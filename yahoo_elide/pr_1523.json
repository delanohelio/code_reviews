{"pr_number": 1523, "pr_title": "Query Engine and Aggregation Store Changes for Multi Data Source Support", "pr_author": "rishi-aga", "pr_createdAt": "2020-09-08T16:31:37Z", "pr_url": "https://github.com/yahoo/elide/pull/1523", "merge_commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDc0MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485074740", "body": "since there are no plans to support this, we can remove it from here and the abstract class. ", "bodyText": "since there are no plans to support this, we can remove it from here and the abstract class.", "bodyHTML": "<p dir=\"auto\">since there are no plans to support this, we can remove it from here and the abstract class.</p>", "author": "moizarafat", "createdAt": "2020-09-08T17:12:40Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java", "diffHunk": "@@ -9,78 +9,37 @@\n import com.yahoo.elide.datastores.aggregation.QueryEngine;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-import com.yahoo.elide.utils.coerce.CoerceUtil;\n-import lombok.AccessLevel;\n-import lombok.Getter;\n \n-import java.util.AbstractMap;\n+import java.sql.ResultSet;\n import java.util.Collections;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.persistence.EntityManager;\n \n /**\n  * {@link SQLEntityHydrator} hydrates the entity loaded by\n  * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n  */\n public class SQLEntityHydrator extends AbstractEntityHydrator {\n \n-    @Getter(AccessLevel.PRIVATE)\n-    private final EntityManager entityManager;\n-\n     /**\n      * Constructor.\n      *\n      * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n      * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n      *               objects\n      * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     * @param entityManager  An service that issues JPQL queries to load relationship objects\n      */\n     public SQLEntityHydrator(\n-            List<Object> results,\n+            ResultSet results,\n             Query query,\n-            EntityDictionary entityDictionary,\n-            EntityManager entityManager\n+            EntityDictionary entityDictionary\n     ) {\n         super(results, query, entityDictionary);\n-        this.entityManager = entityManager;\n     }\n \n     @Override\n-    protected Map<Object, Object> getRelationshipValues(\n-            Class<?> relationshipType,\n-            List<Object> joinFieldIds\n-    ) {\n-        if (joinFieldIds.isEmpty()) {\n-            return Collections.emptyMap();\n-        }\n-\n-        List<Object> uniqueIds = joinFieldIds.stream()\n-                .distinct()\n-                .collect(Collectors.toCollection(LinkedList::new));\n-\n-        List<Object> loaded = getEntityManager()\n-                .createQuery(\n-                        String.format(\n-                                \"SELECT e FROM %s e WHERE %s IN (:idList)\",\n-                                relationshipType.getCanonicalName(),\n-                                getEntityDictionary().getIdFieldName(relationshipType)\n-                        )\n-                )\n-                .setParameter(\"idList\", uniqueIds)\n-                .getResultList();\n-\n-        return loaded.stream()\n-                .map(obj -> new AbstractMap.SimpleImmutableEntry<>(\n-                        CoerceUtil.coerce(\n-                                (Object) getEntityDictionary().getId(obj),\n-                                getEntityDictionary().getIdType(relationshipType)\n-                        ),\n-                        obj))\n-                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {", "originalCommit": "33066ea45b06474cf68125d9bea8663fc9406d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjUxNQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485106515", "bodyText": "removed related methods.", "author": "rishi-aga", "createdAt": "2020-09-08T18:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex 276c12d84..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,45 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n-        // Not required\n-        return Collections.emptyMap();\n-    }\n-}\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nnew file mode 100644\nindex 000000000..276c12d84\n--- /dev/null\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.QueryEngine;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n+\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * {@link SQLEntityHydrator} hydrates the entity loaded by\n+ * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n+ */\n+public class SQLEntityHydrator extends AbstractEntityHydrator {\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n+     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n+     *               objects\n+     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n+     */\n+    public SQLEntityHydrator(\n+            ResultSet results,\n+            Query query,\n+            EntityDictionary entityDictionary\n+    ) {\n+        super(results, query, entityDictionary);\n+    }\n+\n+    @Override\n+    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n+        // Not required\n+        return Collections.emptyMap();\n+    }\n+}\n", "next_change": {"commit": "fa95290812c67c8b7bf2fbebebd3f5ffdfc6d252", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nindex 276c12d84..e74da1961 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -36,10 +33,4 @@ public class SQLEntityHydrator extends AbstractEntityHydrator {\n     ) {\n         super(results, query, entityDictionary);\n     }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n-        // Not required\n-        return Collections.emptyMap();\n-    }\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex e74da1961..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex 276c12d84..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,45 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n-        // Not required\n-        return Collections.emptyMap();\n-    }\n-}\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nnew file mode 100644\nindex 000000000..7ae9d8b0e\n--- /dev/null\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n+import com.yahoo.elide.utils.coerce.CoerceUtil;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.persistence.EntityManager;\n+\n+/**\n+ * {@link SQLEntityHydrator} hydrates the entity loaded by {@link SQLQueryEngine#executeQuery(Query, boolean)}.\n+ */\n+public class SQLEntityHydrator extends AbstractEntityHydrator {\n+\n+    @Getter(AccessLevel.PRIVATE)\n+    private final EntityManager entityManager;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param results The loaded objects from {@link SQLQueryEngine#executeQuery(Query, boolean)}\n+     * @param query  The query passed to {@link SQLQueryEngine#executeQuery(Query, boolean)} to load the objects\n+     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n+     * @param entityManager  An service that issues JPQL queries to load relationship objects\n+     */\n+    public SQLEntityHydrator(\n+            List<Object> results,\n+            Query query,\n+            EntityDictionary entityDictionary,\n+            EntityManager entityManager\n+    ) {\n+        super(results, query, entityDictionary);\n+        this.entityManager = entityManager;\n+    }\n+\n+    @Override\n+    protected Map<Object, Object> getRelationshipValues(\n+            Class<?> relationshipType,\n+            List<Object> joinFieldIds\n+    ) {\n+        if (joinFieldIds.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        List<Object> uniqueIds = joinFieldIds.stream()\n+                .distinct()\n+                .collect(Collectors.toCollection(LinkedList::new));\n+\n+        List<Object> loaded = getEntityManager()\n+                .createQuery(\n+                        String.format(\n+                                \"SELECT e FROM %s e WHERE %s IN (:idList)\",\n+                                relationshipType.getCanonicalName(),\n+                                getEntityDictionary().getIdFieldName(relationshipType)\n+                        )\n+                )\n+                .setParameter(\"idList\", uniqueIds)\n+                .getResultList();\n+\n+        return loaded.stream()\n+                .map(obj -> new AbstractMap.SimpleImmutableEntry<>(\n+                        CoerceUtil.coerce(\n+                                (Object) getEntityDictionary().getId(obj),\n+                                getEntityDictionary().getIdType(relationshipType)\n+                        ),\n+                        obj))\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+}\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex 7ae9d8b0e..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,83 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-import com.yahoo.elide.utils.coerce.CoerceUtil;\n-import lombok.AccessLevel;\n-import lombok.Getter;\n-\n-import java.util.AbstractMap;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.persistence.EntityManager;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by {@link SQLQueryEngine#executeQuery(Query, boolean)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    @Getter(AccessLevel.PRIVATE)\n-    private final EntityManager entityManager;\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link SQLQueryEngine#executeQuery(Query, boolean)}\n-     * @param query  The query passed to {@link SQLQueryEngine#executeQuery(Query, boolean)} to load the objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     * @param entityManager  An service that issues JPQL queries to load relationship objects\n-     */\n-    public SQLEntityHydrator(\n-            List<Object> results,\n-            Query query,\n-            EntityDictionary entityDictionary,\n-            EntityManager entityManager\n-    ) {\n-        super(results, query, entityDictionary);\n-        this.entityManager = entityManager;\n-    }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(\n-            Class<?> relationshipType,\n-            List<Object> joinFieldIds\n-    ) {\n-        if (joinFieldIds.isEmpty()) {\n-            return Collections.emptyMap();\n-        }\n-\n-        List<Object> uniqueIds = joinFieldIds.stream()\n-                .distinct()\n-                .collect(Collectors.toCollection(LinkedList::new));\n-\n-        List<Object> loaded = getEntityManager()\n-                .createQuery(\n-                        String.format(\n-                                \"SELECT e FROM %s e WHERE %s IN (:idList)\",\n-                                relationshipType.getCanonicalName(),\n-                                getEntityDictionary().getIdFieldName(relationshipType)\n-                        )\n-                )\n-                .setParameter(\"idList\", uniqueIds)\n-                .getResultList();\n-\n-        return loaded.stream()\n-                .map(obj -> new AbstractMap.SimpleImmutableEntry<>(\n-                        CoerceUtil.coerce(\n-                                (Object) getEntityDictionary().getId(obj),\n-                                getEntityDictionary().getIdType(relationshipType)\n-                        ),\n-                        obj))\n-                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0ODY2Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485248663", "body": "should we close the connection before throwing the exception or connection close is going to be handled some place else? ", "bodyText": "should we close the connection before throwing the exception or connection close is going to be handled some place else?", "bodyHTML": "<p dir=\"auto\">should we close the connection before throwing the exception or connection close is going to be handled some place else?</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:24:48Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +144,209 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private final Connection conn;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+        private final SQLDialect dialect;\n+\n+        SqlTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);", "originalCommit": "33066ea45b06474cf68125d9bea8663fc9406d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNzU5NA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485617594", "bodyText": "Updated it to just log the exception instead of throwing it.", "author": "rishi-aga", "createdAt": "2020-09-09T13:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0ODY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..af77ce49b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b..a49d1f5b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -187,38 +172,60 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.cancel();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n+        return new SqlTransaction(defaultDataSource, defaultDialect);\n+    }\n+\n+    @Override\n+    public Transaction beginTransaction(String dbConnectionName) {\n+        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        return new SqlTransaction(dataSource, dialect);\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n+        SQLDialect dialect = sqlTransaction.dialect;\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..af77ce49b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b..5dbe48e69 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,17 +206,8 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9aff2a5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -206,8 +204,9 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "ae647b5050b99f6129f4810329d9114408a3c25f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9aff2a5f8..530d6e25c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,7 +208,6 @@ public class SQLQueryEngine extends QueryEngine {\n         ConnectionDetails details = getConnectionDetails(connectionName);\n         DataSource dataSource = details.getDataSource();\n         SQLDialect dialect = details.getDialect();\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +183,29 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -151,172 +114,84 @@ public class SQLQueryEngine extends QueryEngine {\n         return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n     }\n \n-    /**\n-     * State needed for SQLQueryEngine to execute queries.\n-     */\n-    static class SqlTransaction implements QueryEngine.Transaction {\n-\n-        private Connection conn;\n-        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n-\n-        private void initializeConnection(DataSource dataSource) {\n-            try {\n-                this.conn = dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        public NamedParamPreparedStatement initializeStatement(String namedParamQuery, DataSource dataSource) {\n-            NamedParamPreparedStatement stmt;\n-            try {\n-                if (conn == null || !conn.isValid(10)) {\n-                    initializeConnection(dataSource);\n-                }\n-                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n-                stmts.add(stmt);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-            return stmt;\n-        }\n-\n-        @Override\n-        public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n-        }\n-\n-        @Override\n-        public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n-        }\n-    }\n-\n     @Override\n-    public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n-    }\n-\n-    @Override\n-    public QueryResult executeQuery(Query query, Transaction transaction) {\n-        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-\n-        // Translate the query into SQL.\n-        SQLQuery sql = toSQL(query, dialect);\n-        String queryString = sql.toString();\n+    public Iterable<Object> executeQuery(Query query, boolean useCache) {\n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n+        try {\n+            entityManager = entityManagerFactory.createEntityManager();\n \n-        QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n-        NamedParamPreparedStatement stmt;\n+            // manually begin the transaction\n+            transaction = entityManager.getTransaction();\n+            if (!transaction.isActive()) {\n+                transaction.begin();\n+            }\n \n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-        }\n+            // Translate the query into SQL.\n+            SQLQuery sql = toSQL(query);\n+            log.debug(\"SQL Query: \" + sql);\n \n-        log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n+            javax.persistence.Query jpaQuery = entityManager.createNativeQuery(sql.toString());\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+            Pagination pagination = query.getPagination();\n+            if (pagination != null) {\n+                jpaQuery.setFirstResult(pagination.getOffset());\n+                jpaQuery.setMaxResults(pagination.getLimit());\n \n-        // Run the primary query and log the time spent.\n-        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n+                if (pagination.returnPageTotals()) {\n \n-        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n-        return resultBuilder.build();\n-    }\n+                    SQLQuery paginationSQL = toPageTotalSQL(sql);\n+                    javax.persistence.Query pageTotalQuery =\n+                            entityManager.createNativeQuery(paginationSQL.toString())\n+                                    .setHint(QueryHints.HINT_READONLY, true);\n \n-    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+                    //Supply the query parameters to the query\n+                    supplyFilterQueryParameters(query, pageTotalQuery);\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n+                    //Run the Pagination query and log the time spent.\n+                    long total = new TimedFunction<>(\n+                            () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                            \"Running Query: \" + paginationSQL\n+                    ).get();\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+                    pagination.setPageTotals(total);\n+                }\n+            }\n \n-        // Run the Pagination query and log the time spent.\n-        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n-    }\n+            // Supply the query parameters to the query\n+            supplyFilterQueryParameters(query, jpaQuery);\n \n-    @Override\n-    public String getTableVersion(Table table, Transaction transaction) {\n-\n-        String tableVersion = null;\n-        Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n-        VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n-        if (versionAnnotation != null) {\n-            String versionQueryString = versionAnnotation.sql();\n-            SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-            ConnectionDetails details = getConnectionDetails(table.getDbConnectionName());\n-            DataSource dataSource = details.getDataSource();\n-            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString, dataSource);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n-        }\n-        return tableVersion;\n-    }\n+            // Run the primary query and log the time spent.\n+            List<Object> results = new TimedFunction<>(\n+                    () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n+                    \"Running Query: \" + sql).get();\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+            return new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate();\n+        } finally {\n+            if (transaction != null && transaction.isActive()) {\n+                transaction.commit();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n             }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param dialect SQL dialect to use for this storage.\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public List<String> explain(Query query, SQLDialect dialect) {\n-        List<String> queries = new ArrayList<String>();\n-        SQLQuery sql = toSQL(query, dialect);\n-\n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n-        queries.add(sql.toString());\n-        return queries;\n-    }\n-\n-    @Override\n-    public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n      * @param query the client query.\n-     * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n-    private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+    private SQLQuery toSQL(Query query) {\n+        Set<ColumnProjection> groupByDimensions = new LinkedHashSet<>(query.getGroupByDimensions());\n+        Set<TimeDimensionProjection> timeDimensions = new LinkedHashSet<>(query.getTimeDimensions());\n \n         SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n                 .map(metricProjection -> {\n                     if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n+                        throw new InvalidPredicateException(\n+                                \"Non-SQL metric function on \" + metricProjection.getAlias());\n                     }\n \n                     return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -199,7 +273,7 @@ public class SQLQueryEngine extends QueryEngine {\n                 .reduce(SQLQueryTemplate::merge)\n                 .orElse(new SQLQueryTemplate(query));\n \n-        return new SQLQueryConstructor(referenceTable).resolveTemplate(\n+        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n                 query,\n                 queryTemplate,\n                 query.getSorting(),\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -278,18 +329,18 @@ public class SQLQueryEngine extends QueryEngine {\n                 queryTemplate,\n                 query.getSorting(),\n                 query.getWhereFilter(),\n-                query.getHavingFilter());\n+                query.getHavingFilter(),\n+                query.getPagination());\n     }\n \n \n     /**\n-     * Given a JPA query, replaces any parameters with their values from client query.\n+     * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n-     * @param jpaQuery The JPA query\n+     * @param stmt Customized Prepared Statement\n      */\n-    private void supplyFilterQueryParameters(Query query,\n-                                             javax.persistence.Query jpaQuery) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..25eda7887 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,47 +316,56 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n+        return explain(query, query.getConnectionDetails().getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n-     * @param query the client query.\n+     * @param query the transformed client query.\n      * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n     private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+        SQLReferenceTable queryReferenceTable = new DynamicSQLReferenceTable(referenceTable, query);\n \n-        SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n-                .map(metricProjection -> {\n-                    if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n-                    }\n+        QueryTranslator translator = new QueryTranslator(queryReferenceTable, sqlDialect);\n \n-                    return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n-                })\n-                .reduce(SQLQueryTemplate::merge)\n-                .orElse(new SQLQueryTemplate(query));\n-\n-        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n-                query,\n-                queryTemplate,\n-                query.getSorting(),\n-                query.getWhereFilter(),\n-                query.getHavingFilter(),\n-                query.getPagination());\n+        return query.accept(translator).build();\n     }\n \n+    /**\n+     * Transforms a client query into a potentially nested/complex query by expanding each metric into\n+     * its respective query plan - and then merging the plans together into a consolidated query.\n+     * @param query The client query.\n+     * @return A query that reflects each metric's individual query plan.\n+     */\n+    private Query expandMetricQueryPlans(Query query) {\n+        QueryPlan mergedPlan = null;\n+\n+        //Expand each metric into its own query plan.  Merge them all together.\n+        for (MetricProjection metricProjection : query.getMetricProjections()) {\n+            QueryPlan queryPlan = metricProjection.resolve();\n+            if (queryPlan != null) {\n+                mergedPlan = queryPlan.merge(mergedPlan);\n+            }\n+        }\n+\n+        QueryPlanTranslator queryPlanTranslator = new QueryPlanTranslator(query);\n+\n+        return (mergedPlan == null)\n+                ? query\n+                : mergedPlan.accept(queryPlanTranslator).build();\n+    }\n \n     /**\n      * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n      * @param stmt Customized Prepared Statement\n+     * @param dialect the SQL dialect\n      */\n-    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt, SQLDialect dialect) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDA3MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485250070", "body": "Same as above, we should close the connection as well. ", "bodyText": "Same as above, we should close the connection as well.", "bodyHTML": "<p dir=\"auto\">Same as above, we should close the connection as well.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:29:31Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +144,209 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private final Connection conn;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+        private final SQLDialect dialect;\n+\n+        SqlTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.cancel();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNjkyOQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485616929", "bodyText": "I am assuming, connection closing will be handled by close method and cancel method is for stopping the running queries.", "author": "rishi-aga", "createdAt": "2020-09-09T13:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..af77ce49b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b..a49d1f5b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -187,38 +172,60 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.cancel();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n+        return new SqlTransaction(defaultDataSource, defaultDialect);\n+    }\n+\n+    @Override\n+    public Transaction beginTransaction(String dbConnectionName) {\n+        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        return new SqlTransaction(dataSource, dialect);\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n+        SQLDialect dialect = sqlTransaction.dialect;\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..af77ce49b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b..5dbe48e69 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,17 +206,8 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9aff2a5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -206,8 +204,9 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "ae647b5050b99f6129f4810329d9114408a3c25f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9aff2a5f8..530d6e25c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,7 +208,6 @@ public class SQLQueryEngine extends QueryEngine {\n         ConnectionDetails details = getConnectionDetails(connectionName);\n         DataSource dataSource = details.getDataSource();\n         SQLDialect dialect = details.getDialect();\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +183,29 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -151,172 +114,84 @@ public class SQLQueryEngine extends QueryEngine {\n         return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n     }\n \n-    /**\n-     * State needed for SQLQueryEngine to execute queries.\n-     */\n-    static class SqlTransaction implements QueryEngine.Transaction {\n-\n-        private Connection conn;\n-        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n-\n-        private void initializeConnection(DataSource dataSource) {\n-            try {\n-                this.conn = dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        public NamedParamPreparedStatement initializeStatement(String namedParamQuery, DataSource dataSource) {\n-            NamedParamPreparedStatement stmt;\n-            try {\n-                if (conn == null || !conn.isValid(10)) {\n-                    initializeConnection(dataSource);\n-                }\n-                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n-                stmts.add(stmt);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-            return stmt;\n-        }\n-\n-        @Override\n-        public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n-        }\n-\n-        @Override\n-        public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n-        }\n-    }\n-\n     @Override\n-    public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n-    }\n-\n-    @Override\n-    public QueryResult executeQuery(Query query, Transaction transaction) {\n-        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-\n-        // Translate the query into SQL.\n-        SQLQuery sql = toSQL(query, dialect);\n-        String queryString = sql.toString();\n+    public Iterable<Object> executeQuery(Query query, boolean useCache) {\n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n+        try {\n+            entityManager = entityManagerFactory.createEntityManager();\n \n-        QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n-        NamedParamPreparedStatement stmt;\n+            // manually begin the transaction\n+            transaction = entityManager.getTransaction();\n+            if (!transaction.isActive()) {\n+                transaction.begin();\n+            }\n \n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-        }\n+            // Translate the query into SQL.\n+            SQLQuery sql = toSQL(query);\n+            log.debug(\"SQL Query: \" + sql);\n \n-        log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n+            javax.persistence.Query jpaQuery = entityManager.createNativeQuery(sql.toString());\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+            Pagination pagination = query.getPagination();\n+            if (pagination != null) {\n+                jpaQuery.setFirstResult(pagination.getOffset());\n+                jpaQuery.setMaxResults(pagination.getLimit());\n \n-        // Run the primary query and log the time spent.\n-        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n+                if (pagination.returnPageTotals()) {\n \n-        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n-        return resultBuilder.build();\n-    }\n+                    SQLQuery paginationSQL = toPageTotalSQL(sql);\n+                    javax.persistence.Query pageTotalQuery =\n+                            entityManager.createNativeQuery(paginationSQL.toString())\n+                                    .setHint(QueryHints.HINT_READONLY, true);\n \n-    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+                    //Supply the query parameters to the query\n+                    supplyFilterQueryParameters(query, pageTotalQuery);\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n+                    //Run the Pagination query and log the time spent.\n+                    long total = new TimedFunction<>(\n+                            () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                            \"Running Query: \" + paginationSQL\n+                    ).get();\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+                    pagination.setPageTotals(total);\n+                }\n+            }\n \n-        // Run the Pagination query and log the time spent.\n-        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n-    }\n+            // Supply the query parameters to the query\n+            supplyFilterQueryParameters(query, jpaQuery);\n \n-    @Override\n-    public String getTableVersion(Table table, Transaction transaction) {\n-\n-        String tableVersion = null;\n-        Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n-        VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n-        if (versionAnnotation != null) {\n-            String versionQueryString = versionAnnotation.sql();\n-            SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-            ConnectionDetails details = getConnectionDetails(table.getDbConnectionName());\n-            DataSource dataSource = details.getDataSource();\n-            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString, dataSource);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n-        }\n-        return tableVersion;\n-    }\n+            // Run the primary query and log the time spent.\n+            List<Object> results = new TimedFunction<>(\n+                    () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n+                    \"Running Query: \" + sql).get();\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+            return new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate();\n+        } finally {\n+            if (transaction != null && transaction.isActive()) {\n+                transaction.commit();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n             }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param dialect SQL dialect to use for this storage.\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public List<String> explain(Query query, SQLDialect dialect) {\n-        List<String> queries = new ArrayList<String>();\n-        SQLQuery sql = toSQL(query, dialect);\n-\n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n-        queries.add(sql.toString());\n-        return queries;\n-    }\n-\n-    @Override\n-    public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n      * @param query the client query.\n-     * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n-    private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+    private SQLQuery toSQL(Query query) {\n+        Set<ColumnProjection> groupByDimensions = new LinkedHashSet<>(query.getGroupByDimensions());\n+        Set<TimeDimensionProjection> timeDimensions = new LinkedHashSet<>(query.getTimeDimensions());\n \n         SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n                 .map(metricProjection -> {\n                     if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n+                        throw new InvalidPredicateException(\n+                                \"Non-SQL metric function on \" + metricProjection.getAlias());\n                     }\n \n                     return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -199,7 +273,7 @@ public class SQLQueryEngine extends QueryEngine {\n                 .reduce(SQLQueryTemplate::merge)\n                 .orElse(new SQLQueryTemplate(query));\n \n-        return new SQLQueryConstructor(referenceTable).resolveTemplate(\n+        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n                 query,\n                 queryTemplate,\n                 query.getSorting(),\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -278,18 +329,18 @@ public class SQLQueryEngine extends QueryEngine {\n                 queryTemplate,\n                 query.getSorting(),\n                 query.getWhereFilter(),\n-                query.getHavingFilter());\n+                query.getHavingFilter(),\n+                query.getPagination());\n     }\n \n \n     /**\n-     * Given a JPA query, replaces any parameters with their values from client query.\n+     * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n-     * @param jpaQuery The JPA query\n+     * @param stmt Customized Prepared Statement\n      */\n-    private void supplyFilterQueryParameters(Query query,\n-                                             javax.persistence.Query jpaQuery) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..25eda7887 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,47 +316,56 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n+        return explain(query, query.getConnectionDetails().getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n-     * @param query the client query.\n+     * @param query the transformed client query.\n      * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n     private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+        SQLReferenceTable queryReferenceTable = new DynamicSQLReferenceTable(referenceTable, query);\n \n-        SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n-                .map(metricProjection -> {\n-                    if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n-                    }\n+        QueryTranslator translator = new QueryTranslator(queryReferenceTable, sqlDialect);\n \n-                    return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n-                })\n-                .reduce(SQLQueryTemplate::merge)\n-                .orElse(new SQLQueryTemplate(query));\n-\n-        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n-                query,\n-                queryTemplate,\n-                query.getSorting(),\n-                query.getWhereFilter(),\n-                query.getHavingFilter(),\n-                query.getPagination());\n+        return query.accept(translator).build();\n     }\n \n+    /**\n+     * Transforms a client query into a potentially nested/complex query by expanding each metric into\n+     * its respective query plan - and then merging the plans together into a consolidated query.\n+     * @param query The client query.\n+     * @return A query that reflects each metric's individual query plan.\n+     */\n+    private Query expandMetricQueryPlans(Query query) {\n+        QueryPlan mergedPlan = null;\n+\n+        //Expand each metric into its own query plan.  Merge them all together.\n+        for (MetricProjection metricProjection : query.getMetricProjections()) {\n+            QueryPlan queryPlan = metricProjection.resolve();\n+            if (queryPlan != null) {\n+                mergedPlan = queryPlan.merge(mergedPlan);\n+            }\n+        }\n+\n+        QueryPlanTranslator queryPlanTranslator = new QueryPlanTranslator(query);\n+\n+        return (mergedPlan == null)\n+                ? query\n+                : mergedPlan.accept(queryPlanTranslator).build();\n+    }\n \n     /**\n      * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n      * @param stmt Customized Prepared Statement\n+     * @param dialect the SQL dialect\n      */\n-    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt, SQLDialect dialect) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDE5OA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485254198", "body": "Lets check with Aaron, I think this method seems very specific to SQLQueryEngine, so not a good candidate to be included in the interface here. We can just have it created and used in SQLQuery Engine itself.", "bodyText": "Lets check with Aaron, I think this method seems very specific to SQLQueryEngine, so not a good candidate to be included in the interface here. We can just have it created and used in SQLQuery Engine itself.", "bodyHTML": "<p dir=\"auto\">Lets check with Aaron, I think this method seems very specific to SQLQueryEngine, so not a good candidate to be included in the interface here. We can just have it created and used in SQLQuery Engine itself.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:43:02Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -167,6 +167,8 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n \n     public abstract Transaction beginTransaction();\n \n+    public abstract Transaction beginTransaction(String dbConnectionName);", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxOTQzOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485619438", "bodyText": "this is called from AggregationDataStoreTransaction which uses QueryEngine interface so had to add it here.", "author": "rishi-aga", "createdAt": "2020-09-09T13:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMTcyMQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486411721", "bodyText": "I tend to agree with Moiz.  Everything inside dynamic config is tightly coupled with with the SQLQueryEngine.  Other query engines might have a totally different configuration (like Fili for example).", "author": "aklish", "createdAt": "2020-09-10T14:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NDY4Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487084683", "bodyText": "created a new class SQLAggregationDataStoreTransaction which extends AggregationDataStoreTransaction (which is abstract now)", "author": "rishi-aga", "createdAt": "2020-09-11T14:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -167,8 +167,6 @@ public abstract class QueryEngine {\n \n     public abstract Transaction beginTransaction();\n \n-    public abstract Transaction beginTransaction(String dbConnectionName);\n-\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b..69d0a65d8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -167,6 +167,8 @@ public abstract class QueryEngine {\n \n     public abstract Transaction beginTransaction();\n \n+    public abstract Transaction beginTransaction(String dbConnectionName);\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -167,8 +167,6 @@ public abstract class QueryEngine {\n \n     public abstract Transaction beginTransaction();\n \n-    public abstract Transaction beginTransaction(String dbConnectionName);\n-\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -167,8 +167,6 @@ public abstract class QueryEngine {\n \n     public abstract Transaction beginTransaction();\n \n-    public abstract Transaction beginTransaction(String dbConnectionName);\n-\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b..6c57bce21 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -152,40 +159,15 @@ public abstract class QueryEngine {\n                 .forEach(metaDataStore::addTable);\n     }\n \n-    /**\n-     * Contains state necessary for query execution.\n-     */\n-    public interface Transaction extends AutoCloseable {\n-        @Override\n-        void close();\n-\n-        /**\n-         * Cancels running transaction\n-         */\n-        void cancel();\n-    }\n-\n-    public abstract Transaction beginTransaction();\n-\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n-     * @param query The query customized for a particular persistent storage or storage client\n-     * @param transaction\n+     * @param query    The query customized for a particular persistent storage or storage client\n+     * @param useCache Whether to use the cache, if configured\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n-\n-    /**\n-     * Get a serial number or other token indicating the version of the data in the table.\n-     * No particular semantics are required, though it must change if the data changes.\n-     * If one is not available, returns null, which will prevent caching this table.\n-     * @param table The table to get version of\n-     * @param transaction The transaction to use for the lookup\n-     * @return a version token, or null if not available.\n-     */\n-    public abstract String getTableVersion(Table table, Transaction transaction);\n+    public abstract Iterable<Object> executeQuery(Query query, boolean useCache);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "3f34e76977a5a591eca1f8c00ac986562a38d250", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 6c57bce21..4308e4db1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -163,11 +160,10 @@ public abstract class QueryEngine {\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n-     * @param query    The query customized for a particular persistent storage or storage client\n-     * @param useCache Whether to use the cache, if configured\n+     * @param query The query customized for a particular persistent storage or storage client\n      * @return query results\n      */\n-    public abstract Iterable<Object> executeQuery(Query query, boolean useCache);\n+    public abstract QueryResult executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 4308e4db1..2e7a94a11 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -156,14 +151,35 @@ public abstract class QueryEngine {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    /**\n+     * Contains state necessary for query execution.\n+     */\n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();\n+    }\n+\n+    public abstract Transaction beginTransaction();\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n      * @param query The query customized for a particular persistent storage or storage client\n+     * @param transaction\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query);\n+    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n+\n+    /**\n+     * Get a serial number or other token indicating the version of the data in the table.\n+     * No particular semantics are required, though it must change if the data changes.\n+     * If one is not available, returns null, which will prevent caching this table.\n+     * @param table The table to get version of\n+     * @param transaction The transaction to use for the lookup\n+     * @return a version token, or null if not available.\n+     */\n+    public abstract String getTableVersion(Table table, Transaction transaction);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 2e7a94a11..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -187,6 +193,30 @@ public abstract class QueryEngine {\n      * @return The schema that represents the provided entity.\n      */\n     public Table getTable(String classAlias) {\n-        return tables.get(classAlias);\n+        return tables\n+                    .entrySet()\n+                    .stream()\n+                    .filter(entry -> entry.getKey().getName().equalsIgnoreCase(classAlias))\n+                    .map(entry -> entry.getValue())\n+                    .findFirst()\n+                    .orElse(null);\n     }\n+\n+    /**\n+     * Returns the schema for a given entity class.\n+     * @param tableId Composite Id for the table\n+     * @return The schema that represents the provided entity.\n+     */\n+    public Table getTable(TableId tableId) {\n+        return tables.get(tableId);\n+    }\n+\n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public abstract List<String> explain(Query query);\n+\n }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b..99f07d6d3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -219,4 +232,5 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n+    public abstract QueryValidator getValidator();\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "e1c47d8a0c7d2703e602ed1c2cdc975c25166cc3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Remove deprecated code (#1647)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "0e85109b24e6637f46b73d9722fc08cc01cfa639", "committedDate": "2021-03-29 13:04:32 -0500", "message": "elide-datastore-aggregation - fix javadoc build warning (#1963)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "e722d3e2ac0acf976920871dd0a52a14f2cfd545", "committedDate": "2021-05-10 15:19:00 -0500", "message": "Refactor tableSource for Column and Argument (#2075)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "6d341a829a16ea8c1dc0fb2815e320601545467d", "committedDate": "2021-05-18 20:30:21 -0400", "message": "Parse table and column arguments in Expression parser (#2105)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDI1NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485254255", "body": "Same comment as other method.", "bodyText": "Same comment as other method.", "bodyHTML": "<p dir=\"auto\">Same comment as other method.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:43:16Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -219,4 +221,13 @@ public Table getTable(TableId tableId) {\n      */\n     public abstract List<String> explain(Query query);\n \n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @param connectionName Connection Name for this storage\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public abstract List<String> explain(Query query, String connectionName);", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -221,13 +219,4 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param connectionName Connection Name for this storage\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public abstract List<String> explain(Query query, String connectionName);\n-\n }\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b..69d0a65d8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -219,4 +221,13 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @param connectionName Connection Name for this storage\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public abstract List<String> explain(Query query, String connectionName);\n+\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -221,13 +219,4 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param connectionName Connection Name for this storage\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public abstract List<String> explain(Query query, String connectionName);\n-\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -221,13 +219,4 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param connectionName Connection Name for this storage\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public abstract List<String> explain(Query query, String connectionName);\n-\n }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b..6c57bce21 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -193,30 +175,18 @@ public abstract class QueryEngine {\n      * @return The schema that represents the provided entity.\n      */\n     public Table getTable(String classAlias) {\n-        return tables\n-                    .entrySet()\n-                    .stream()\n-                    .filter(entry -> entry.getKey().getName().equalsIgnoreCase(classAlias))\n-                    .map(entry -> entry.getValue())\n-                    .findFirst()\n-                    .orElse(null);\n+        return tables.get(classAlias);\n     }\n \n-    /**\n-     * Returns the schema for a given entity class.\n-     * @param tableId Composite Id for the table\n-     * @return The schema that represents the provided entity.\n-     */\n-    public Table getTable(TableId tableId) {\n-        return tables.get(tableId);\n-    }\n-\n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public abstract List<String> explain(Query query);\n+    private static class NoCache implements Cache {\n+        @Override\n+        public Iterable<Object> get(Object key) {\n+            return null;\n+        }\n \n+        @Override\n+        public void put(Object key, Iterable<Object> result) {\n+            // Do nothing\n+        }\n+    }\n }\n", "next_change": {"commit": "3f34e76977a5a591eca1f8c00ac986562a38d250", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 6c57bce21..4308e4db1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -177,16 +173,4 @@ public abstract class QueryEngine {\n     public Table getTable(String classAlias) {\n         return tables.get(classAlias);\n     }\n-\n-    private static class NoCache implements Cache {\n-        @Override\n-        public Iterable<Object> get(Object key) {\n-            return null;\n-        }\n-\n-        @Override\n-        public void put(Object key, Iterable<Object> result) {\n-            // Do nothing\n-        }\n-    }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 4308e4db1..79d644cb3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -173,4 +193,11 @@ public abstract class QueryEngine {\n     public Table getTable(String classAlias) {\n         return tables.get(classAlias);\n     }\n+\n+    /**\n+     * Explains the specified query passed in\n+     * @param query The query customized for a particular persistent storage or storage client\n+     * @return SQL string corresponding to the given query\n+     */\n+    public abstract String explain(Query query);\n }\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 79d644cb3..437a5e7b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -195,9 +196,11 @@ public abstract class QueryEngine {\n     }\n \n     /**\n-     * Explains the specified query passed in\n-     * @param query The query customized for a particular persistent storage or storage client\n-     * @return SQL string corresponding to the given query\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @return List of SQL string(s) corresponding to the given query.\n      */\n-    public abstract String explain(Query query);\n+    public abstract List<String> explain(Query query);\n+\n }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 437a5e7b9..99f07d6d3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -203,4 +232,5 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n+    public abstract QueryValidator getValidator();\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "e1c47d8a0c7d2703e602ed1c2cdc975c25166cc3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Remove deprecated code (#1647)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "0e85109b24e6637f46b73d9722fc08cc01cfa639", "committedDate": "2021-03-29 13:04:32 -0500", "message": "elide-datastore-aggregation - fix javadoc build warning (#1963)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "e722d3e2ac0acf976920871dd0a52a14f2cfd545", "committedDate": "2021-05-10 15:19:00 -0500", "message": "Refactor tableSource for Column and Argument (#2075)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "6d341a829a16ea8c1dc0fb2815e320601545467d", "committedDate": "2021-05-18 20:30:21 -0400", "message": "Parse table and column arguments in Expression parser (#2105)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NTYxNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485255616", "body": "\" OFFSET \"  and \" LIMIT \" can be made static variables and reused.", "bodyText": "\" OFFSET \"  and \" LIMIT \" can be made static variables and reused.", "bodyHTML": "<p dir=\"auto\">\" OFFSET \"  and \" LIMIT \" can be made static variables and reused.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:47:47Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java", "diffHunk": "@@ -14,7 +14,13 @@ public boolean useAliasForOrderByClause() {\n         return false;\n     }\n \n+    @Override\n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n     }\n+\n+    @Override\n+    public String appendOffsetLimit(String sql, int offset, int limit) {\n+        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNTgzMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485615830", "bodyText": "\ud83d\udc4d", "author": "rishi-aga", "createdAt": "2020-09-09T13:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NTYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 2c385ae13..5c166ac4b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -21,6 +25,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n+        return sql + OFFSET + offset + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b..2c385ae13 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -25,6 +21,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n     }\n }\n", "next_change": {"commit": "664ed6b057089f2015af078948af6d6d7d7a2a58", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 2c385ae13..5c166ac4b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -21,6 +25,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n+        return sql + OFFSET + offset + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b..46e7a1b70 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -24,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+    public String appendOffsetLimit(int offset, int limit) {\n+        return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "083c4cc27a896d73fcd8456379d014f07c56f304", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 46e7a1b70..f5f224bb8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -25,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(int offset, int limit) {\n+    public String generateOffsetLimitClause(int offset, int limit) {\n         return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 2c385ae13..f5f224bb8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -20,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n+    public String generateOffsetLimitClause(int offset, int limit) {\n+        return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex f5f224bb8..3ee363e26 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -10,22 +10,7 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n  */\n public abstract class AbstractSqlDialect implements SQLDialect {\n \n-    public static final String OFFSET = \"OFFSET \";\n-    public static final String LIMIT = \"LIMIT \";\n-    public static final char SPACE = ' ';\n-\n-    @Override\n-    public boolean useAliasForOrderByClause() {\n-        return false;\n-    }\n-\n-    @Override\n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n     }\n-\n-    @Override\n-    public String generateOffsetLimitClause(int offset, int limit) {\n-        return OFFSET + offset + SPACE + LIMIT + limit;\n-    }\n }\n", "next_change": {"commit": "2a9f6d4e8fa5fb35d46af564c61b6528197828f3", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 3ee363e26..4855fa0a2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -9,6 +9,10 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n  * Common code for {@link SQLDialect} implementations.\n  */\n public abstract class AbstractSqlDialect implements SQLDialect {\n+    @Override\n+    public boolean useAliasForOrderByClause() {\n+        return false;\n+    }\n \n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 4855fa0a2..f5f224bb8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -9,12 +9,23 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n  * Common code for {@link SQLDialect} implementations.\n  */\n public abstract class AbstractSqlDialect implements SQLDialect {\n+\n+    public static final String OFFSET = \"OFFSET \";\n+    public static final String LIMIT = \"LIMIT \";\n+    public static final char SPACE = ' ';\n+\n     @Override\n     public boolean useAliasForOrderByClause() {\n         return false;\n     }\n \n+    @Override\n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n     }\n+\n+    @Override\n+    public String generateOffsetLimitClause(int offset, int limit) {\n+        return OFFSET + offset + SPACE + LIMIT + limit;\n+    }\n }\n", "next_change": {"commit": "c6f23dd421705b7a93be8823310143e6b631c7e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex f5f224bb8..fe9c81249 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -28,4 +31,14 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     public String generateOffsetLimitClause(int offset, int limit) {\n         return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n+\n+    @Override\n+    public char getBeginQuote() {\n+        return BACKTICK;\n+    }\n+\n+    @Override\n+    public char getEndQuote() {\n+        return BACKTICK;\n+    }\n }\n", "next_change": {"commit": "47f08461f94a04cde2a4356f90fa1ae5a5386573", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex fe9c81249..571470e3a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -41,4 +47,37 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     public char getEndQuote() {\n         return BACKTICK;\n     }\n+\n+    @Override\n+    public String getJoinKeyword(JoinType joinType) {\n+\n+        switch (joinType) {\n+            case LEFT:\n+                return getLeftJoinKeyword();\n+            case INNER:\n+                return getInnerJoinKeyword();\n+            case FULL:\n+                return getFullJoinKeyword();\n+            case CROSS:\n+                return getCrossJoinKeyword();\n+            default:\n+                return getLeftJoinKeyword();\n+        }\n+    }\n+\n+    public String getLeftJoinKeyword() {\n+        return LEFT_JOIN_SYNTAX;\n+    }\n+\n+    public String getInnerJoinKeyword() {\n+        return INNER_JOIN_SYNTAX;\n+    }\n+\n+    public String getFullJoinKeyword() {\n+        return FULL_JOIN_SYNTAX;\n+    }\n+\n+    public String getCrossJoinKeyword() {\n+        return CROSS_JOIN_SYNTAX;\n+    }\n }\n", "next_change": {"commit": "234905d972c491934ce3774771c9733193b45007", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 571470e3a..c9ed49cc2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -80,4 +126,9 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     public String getCrossJoinKeyword() {\n         return CROSS_JOIN_SYNTAX;\n     }\n+\n+    @Override\n+    public SupportedAggregation getSupportedAggregation(String name) {\n+        return supportedAggregations.getOrDefault(name.toUpperCase(Locale.ENGLISH), null);\n+    }\n }\n", "next_change": {"commit": "89619d233aa877230f49bf962f979a0af34f941f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex c9ed49cc2..0434e18ae 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -131,4 +300,9 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     public SupportedAggregation getSupportedAggregation(String name) {\n         return supportedAggregations.getOrDefault(name.toUpperCase(Locale.ENGLISH), null);\n     }\n+\n+    @Override\n+    public SupportedOperation getSupportedOperation(String name) {\n+        return supportedOperations.getOrDefault(name.toUpperCase(Locale.ENGLISH), null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "2a9f6d4e8fa5fb35d46af564c61b6528197828f3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "use alias for order by (#1515)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "47f08461f94a04cde2a4356f90fa1ae5a5386573", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Join Type support in aggregation store. (#1712)"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "89619d233aa877230f49bf962f979a0af34f941f", "committedDate": "2021-04-13 09:47:30 -0500", "message": "Adding explicit support for dialect operators to help determine when column nesting is possible. (#1996)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1Nzk2OA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485257968", "body": "this could call the constructor with 4 args instead. ", "bodyText": "this could call the constructor with 4 args instead.", "bodyHTML": "<p dir=\"auto\">this could call the constructor with 4 args instead.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:55:42Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java", "diffHunk": "@@ -11,31 +11,49 @@\n import com.yahoo.elide.datastores.aggregation.core.NoopQueryLogger;\n import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n import com.yahoo.elide.datastores.jpa.JpaDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n import com.yahoo.elide.datastores.multiplex.MultiplexManager;\n \n import org.hibernate.Session;\n \n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.Map;\n import java.util.function.Consumer;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n \n+@AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n+    private DataSource defaultDataSource;\n+    private Map<String, DataSource> dataSourceMap;\n+    private String defaultDialect;\n+    private Map<String, String> dialectMap;\n+\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNTUzNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485615536", "bodyText": "updated to call the constructor with 3 args.", "author": "rishi-aga", "createdAt": "2020-09-09T13:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1Nzk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex aab5bee84..28af154cd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -32,18 +33,16 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n-                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 28af154cd..aab5bee84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -33,16 +32,18 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n+    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, ConnectionDetails> connectionDetailsMap;\n+    private Map<String, String> dialectMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n+                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex aab5bee84..28af154cd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -32,18 +33,16 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n-                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "e4591d599576816c58f6cafb0ad03e404ea0e7b6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 28af154cd..a2f698f73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -42,20 +48,36 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap(), null);\n     }\n \n     @Override\n     public DataStore getDataStore() {\n \n-        MetaDataStore metaDataStore = new MetaDataStore();\n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+\n+        MetaDataStore metaDataStore;\n+        if (compiler != null) {\n+            try {\n+                metaDataStore = new MetaDataStore(compiler);\n+                Set<Class<?>> annotatedClasses = new HashSet<>();\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n \n-        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n                 .queryEngine(new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect, connectionDetailsMap))\n                 .queryLogger(new NoopQueryLogger())\n                 .build();\n \n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n                 (em) -> { return new NonJtaTransaction(em, txCancel); }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex aab5bee84..17f95d276 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -31,32 +37,47 @@ import javax.sql.DataSource;\n @AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n-    private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n-    private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private ConnectionDetails defaultConnectionDetails;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n+    private ElideDynamicEntityCompiler compiler;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n-                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n+        this(entityManagerFactory, new ConnectionDetails(defaultDataSource,\n+                        SQLDialectFactory.getDefaultDialect().getClass().getName()));\n     }\n \n-    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n-                    String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory,\n+                    ConnectionDetails defaultConnectionDetails) {\n+        this(entityManagerFactory, defaultConnectionDetails, Collections.emptyMap(), null);\n     }\n \n     @Override\n     public DataStore getDataStore() {\n \n-        MetaDataStore metaDataStore = new MetaDataStore();\n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+\n+        MetaDataStore metaDataStore;\n+        if (compiler != null) {\n+            try {\n+                metaDataStore = new MetaDataStore(compiler);\n+                Set<Class<?>> annotatedClasses = new HashSet<>();\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n \n-        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n-                .queryEngine(new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect, dataSourceMap, dialectMap))\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n+                .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n                 .queryLogger(new NoopQueryLogger())\n                 .build();\n \n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n                 (em) -> { return new NonJtaTransaction(em, txCancel); }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 17f95d276..d0e2def49 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -5,82 +5,36 @@\n  */\n package com.yahoo.elide.datastores.aggregation.framework;\n \n-import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n-import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n import com.yahoo.elide.core.DataStore;\n import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n import com.yahoo.elide.datastores.aggregation.AggregationDataStore;\n-import com.yahoo.elide.datastores.aggregation.core.NoopQueryLogger;\n+import com.yahoo.elide.datastores.aggregation.QueryEngine;\n import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n import com.yahoo.elide.datastores.jpa.JpaDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n import com.yahoo.elide.datastores.multiplex.MultiplexManager;\n \n-import org.hibernate.Session;\n-\n-import lombok.AllArgsConstructor;\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Consumer;\n-\n-import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n-import javax.sql.DataSource;\n \n-@AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n-    private ConnectionDetails defaultConnectionDetails;\n-    private Map<String, ConnectionDetails> connectionDetailsMap;\n-    private ElideDynamicEntityCompiler compiler;\n \n-    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, new ConnectionDetails(defaultDataSource,\n-                        SQLDialectFactory.getDefaultDialect().getClass().getName()));\n-    }\n-\n-    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory,\n-                    ConnectionDetails defaultConnectionDetails) {\n-        this(entityManagerFactory, defaultConnectionDetails, Collections.emptyMap(), null);\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory) {\n+        this.entityManagerFactory = entityManagerFactory;\n     }\n \n     @Override\n     public DataStore getDataStore() {\n+        MetaDataStore metaDataStore = new MetaDataStore();\n \n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n-\n-        MetaDataStore metaDataStore;\n-        if (compiler != null) {\n-            try {\n-                metaDataStore = new MetaDataStore(compiler);\n-                Set<Class<?>> annotatedClasses = new HashSet<>();\n-                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n-                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n-                .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n-                .queryLogger(new NoopQueryLogger())\n-                .build();\n+        QueryEngine sqlQueryEngine = new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n \n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        AggregationDataStore aggregationDataStore = new AggregationDataStore(sqlQueryEngine);\n \n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n-                (em) -> { return new NonJtaTransaction(em, txCancel); }\n+                NonJtaTransaction::new\n         );\n \n         return new MultiplexManager(jpaStore, metaDataStore, aggregationDataStore);\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex d0e2def49..95f39d5a9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -28,9 +27,9 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     public DataStore getDataStore() {\n         MetaDataStore metaDataStore = new MetaDataStore();\n \n-        QueryEngine sqlQueryEngine = new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n-\n-        AggregationDataStore aggregationDataStore = new AggregationDataStore(sqlQueryEngine);\n+        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n+                .queryEngine(new SQLQueryEngine(metaDataStore, entityManagerFactory))\n+                .build();\n \n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 95f39d5a9..44ca68189 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -26,14 +31,15 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     @Override\n     public DataStore getDataStore() {\n         MetaDataStore metaDataStore = new MetaDataStore();\n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n         AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n-                .queryEngine(new SQLQueryEngine(metaDataStore, entityManagerFactory))\n+                .queryEngine(new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel))\n                 .build();\n \n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n-                NonJtaTransaction::new\n+                (em) -> { return new NonJtaTransaction(em, txCancel); }\n         );\n \n         return new MultiplexManager(jpaStore, metaDataStore, aggregationDataStore);\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 44ca68189..17f95d276 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -5,38 +5,79 @@\n  */\n package com.yahoo.elide.datastores.aggregation.framework;\n \n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n import com.yahoo.elide.core.DataStore;\n import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n import com.yahoo.elide.datastores.aggregation.AggregationDataStore;\n+import com.yahoo.elide.datastores.aggregation.core.NoopQueryLogger;\n import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n import com.yahoo.elide.datastores.jpa.JpaDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n import com.yahoo.elide.datastores.multiplex.MultiplexManager;\n \n import org.hibernate.Session;\n \n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.function.Consumer;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n \n+@AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n+    private ConnectionDetails defaultConnectionDetails;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n+    private ElideDynamicEntityCompiler compiler;\n+\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n+        this(entityManagerFactory, new ConnectionDetails(defaultDataSource,\n+                        SQLDialectFactory.getDefaultDialect().getClass().getName()));\n+    }\n \n-    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory) {\n-        this.entityManagerFactory = entityManagerFactory;\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory,\n+                    ConnectionDetails defaultConnectionDetails) {\n+        this(entityManagerFactory, defaultConnectionDetails, Collections.emptyMap(), null);\n     }\n \n     @Override\n     public DataStore getDataStore() {\n-        MetaDataStore metaDataStore = new MetaDataStore();\n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n-        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n-                .queryEngine(new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel))\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+\n+        MetaDataStore metaDataStore;\n+        if (compiler != null) {\n+            try {\n+                metaDataStore = new MetaDataStore(compiler);\n+                Set<Class<?>> annotatedClasses = new HashSet<>();\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n+                .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n+                .queryLogger(new NoopQueryLogger())\n                 .build();\n \n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n                 (em) -> { return new NonJtaTransaction(em, txCancel); }\n", "next_change": {"commit": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 17f95d276..93aac1620 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -73,7 +73,7 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n \n         AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n                 .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n-                .queryLogger(new NoopQueryLogger())\n+                .queryLogger(new Slf4jQueryLogger())\n                 .build();\n \n         Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n", "next_change": {"commit": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 93aac1620..b88915c82 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -76,16 +62,17 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n                 .queryLogger(new Slf4jQueryLogger())\n                 .build();\n \n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        Consumer<EntityManager> txCancel = em -> em.unwrap(Session.class).cancelQuery();\n \n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n-                (em) -> { return new NonJtaTransaction(em, txCancel); }\n+                em -> new NonJtaTransaction(em, txCancel)\n         );\n \n         return new MultiplexManager(jpaStore, metaDataStore, aggregationDataStore);\n     }\n \n+    @Override\n     public void cleanseTestData() {\n \n     }\n", "next_change": {"commit": "53fbf01a9e7d0120db65334e99ccae5c7cf78c5e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex b88915c82..037526d10 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -43,33 +50,43 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n         this(entityManagerFactory, defaultConnectionDetails, Collections.emptyMap(), null);\n     }\n \n-    @Override\n-    public DataStore getDataStore() {\n+    protected JpaDataStore createJPADataStore() {\n+        Consumer<EntityManager> txCancel = em -> em.unwrap(Session.class).cancelQuery();\n \n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+        return new JpaDataStore(\n+                () -> entityManagerFactory.createEntityManager(),\n+                em -> new NonJtaTransaction(em, txCancel)\n+        );\n+    }\n+\n+    protected MetaDataStore createMetaDataStore() {\n+        ClassScanner scanner = DefaultClassScanner.getInstance();\n \n         MetaDataStore metaDataStore;\n         if (validator != null) {\n-           metaDataStore = new MetaDataStore(validator.getElideTableConfig().getTables(), true);\n-\n-           aggregationDataStoreBuilder.dynamicCompiledClasses(metaDataStore.getDynamicTypes());\n+           metaDataStore = new MetaDataStore(scanner,\n+                   validator.getElideTableConfig().getTables(),\n+                   validator.getElideNamespaceConfig().getNamespaceconfigs(), true);\n         } else {\n-            metaDataStore = new MetaDataStore(true);\n+            metaDataStore = new MetaDataStore(scanner, true);\n         }\n \n-        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n-                .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n-                .queryLogger(new Slf4jQueryLogger())\n-                .build();\n-\n-        Consumer<EntityManager> txCancel = em -> em.unwrap(Session.class).cancelQuery();\n+        return metaDataStore;\n+    }\n \n-        DataStore jpaStore = new JpaDataStore(\n-                () -> entityManagerFactory.createEntityManager(),\n-                em -> new NonJtaTransaction(em, txCancel)\n-        );\n+    protected AggregationDataStore.AggregationDataStoreBuilder createAggregationDataStoreBuilder(MetaDataStore metaDataStore) {\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n \n-        return new MultiplexManager(jpaStore, metaDataStore, aggregationDataStore);\n+        if (validator != null) {\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(metaDataStore.getDynamicTypes());\n+        }\n+        return aggregationDataStoreBuilder\n+                .queryEngine(new SQLQueryEngine(metaDataStore,\n+                        (name) -> connectionDetailsMap.getOrDefault(name, defaultConnectionDetails),\n+                        new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))),\n+                        new DefaultQueryPlanMerger(metaDataStore),\n+                        new DefaultQueryValidator(metaDataStore.getMetadataDictionary())))\n+                .queryLogger(new Slf4jQueryLogger());\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "e090ab5ed5344760d6239c680515f203548c1596", "committedDate": "2022-01-12 11:24:34 -0600", "message": "use alias to get column projection in query plan translator and while nesting projection (#2493)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "53fbf01a9e7d0120db65334e99ccae5c7cf78c5e", "committedDate": "2022-07-05 19:34:26 -0500", "message": "Use Serializable Classes for RedisCache to work (#2681)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1OTAzMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485259033", "body": "This can still take Argument of Type SQLDialect", "bodyText": "This can still take Argument of Type SQLDialect", "bodyHTML": "<p dir=\"auto\">This can still take Argument of Type SQLDialect</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:59:15Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -298,14 +299,19 @@ public Query getQuery() {\n \n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n-    public static void init(SQLDialect sqlDialect) {\n+    public static void init(String sqlDialect) {", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNTAwNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485615006", "bodyText": "yes, I left it as it was used in other test classes but can be removed if required.", "author": "rishi-aga", "createdAt": "2020-09-09T13:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1OTAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce4..4ed0a05cd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +304,22 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection conn = dataSource.getConnection();\n+                        Reader reader = new InputStreamReader(\n+                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n+            ScriptRunner runner = new ScriptRunner(conn);\n+            runner.runScript(reader);\n+        } catch (SQLException | IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 4ed0a05cd..8ed124ce4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -304,22 +300,18 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n+        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n+        em.getTransaction().commit();\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n-        try (Connection conn = dataSource.getConnection();\n-                        Reader reader = new InputStreamReader(\n-                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n-            ScriptRunner runner = new ScriptRunner(conn);\n-            runner.runScript(reader);\n-        } catch (SQLException | IOException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce4..4ed0a05cd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +304,22 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection conn = dataSource.getConnection();\n+                        Reader reader = new InputStreamReader(\n+                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n+            ScriptRunner runner = new ScriptRunner(conn);\n+            runner.runScript(reader);\n+        } catch (SQLException | IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 4ed0a05cd..ac093db0c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -311,12 +307,10 @@ public abstract class SQLUnitTest {\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n-        try (Connection conn = dataSource.getConnection();\n-                        Reader reader = new InputStreamReader(\n-                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n-            ScriptRunner runner = new ScriptRunner(conn);\n-            runner.runScript(reader);\n-        } catch (SQLException | IOException e) {\n+        try (Connection h2Conn = dataSource.getConnection()) {\n+            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n+        } catch (SQLException e) {\n+            ((HikariDataSource) dataSource).close();\n             throw new IllegalStateException(e);\n         }\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce4..8fdef02a7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +300,17 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n-\n-        HikariConfig config = new HikariConfig();\n-        config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n-        config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection h2Conn = dataSource.getConnection()) {\n+            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n+        } catch (SQLException e) {\n+            ((HikariDataSource) dataSource).close();\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8fdef02a7..99e5ce120 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -83,236 +49,10 @@ public abstract class SQLUnitTest {\n \n     protected static QueryEngine engine;\n \n-    protected QueryEngine.Transaction transaction;\n-\n-    // Standard set of test queries used in dialect tests\n-    protected enum TestQuery {\n-        WHERE_METRICS_ONLY (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n-                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                    .whereFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n-                            Operator.GT,\n-                            Arrays.asList(9000)))\n-                    .build();\n-        }),\n-        WHERE_DIMS_ONLY (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .whereFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                            Operator.NOTNULL,\n-                            new ArrayList<Object>()))\n-                    .build();\n-        }),\n-        WHERE_METRICS_AND_DIMS (() -> {\n-            FilterPredicate ratingFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                    Operator.NOTNULL, new ArrayList<Object>());\n-            FilterPredicate highScoreFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .whereFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n-                    .build();\n-        }),\n-        WHERE_METRICS_OR_DIMS (() -> {\n-            FilterPredicate ratingFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                    Operator.NOTNULL, new ArrayList<Object>());\n-            FilterPredicate highScoreFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .whereFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n-                    .build();\n-        }),\n-        WHERE_METRICS_AGGREGATION (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                    .whereFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                            Operator.GT,\n-                            Arrays.asList(9000)))\n-                    .build();\n-        }),\n-        HAVING_METRICS_ONLY (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n-                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                    .havingFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n-                            Operator.GT,\n-                            Arrays.asList(9000)))\n-                    .build();\n-        }),\n-        HAVING_DIMS_ONLY (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .havingFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                            Operator.NOTNULL,\n-                            new ArrayList<Object>()))\n-                    .build();\n-        }),\n-        HAVING_METRICS_AND_DIMS (() -> {\n-            FilterPredicate ratingFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                    Operator.NOTNULL, new ArrayList<Object>());\n-            FilterPredicate highScoreFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .havingFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n-                    .build();\n-        }),\n-        HAVING_METRICS_OR_DIMS (() -> {\n-            FilterPredicate ratingFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                    Operator.NOTNULL, new ArrayList<Object>());\n-            FilterPredicate highScoreFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .havingFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n-                    .build();\n-        }),\n-        PAGINATION_TOTAL (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n-                    .pagination(new ImmutablePagination(0, 1, false, true))\n-                    .build();\n-        }),\n-        SORT_METRIC_ASC (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.asc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        SORT_METRIC_DESC (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        SORT_DIM_DESC (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        SORT_METRIC_AND_DIM_DESC (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"highScore\", Sorting.SortOrder.desc);\n-            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        SUBQUERY (() -> {\n-            Table playerStatsViewTable = engine.getTable(\"playerStatsView\");\n-            return Query.builder()\n-                    .table(playerStatsViewTable)\n-                    .metric(invoke(playerStatsViewTable.getMetric(\"highScore\")))\n-                    .build();\n-        }),\n-        ORDER_BY_DIMENSION_NOT_IN_SELECT (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        COMPLICATED (() -> {\n-            // Sorting\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n-            // WHERE filter\n-            FilterPredicate predicate = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n-                    .pagination(new ImmutablePagination(10, 5, false, true))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .whereFilter(predicate)\n-                    // force a join to look up countryIsoCode\n-                    .havingFilter(parseFilterExpression(\"countryIsoCode==USA\",\n-                            PlayerStats.class, false))\n-                    .build();\n-        });\n-\n-        private Provider<Query> queryProvider;\n-\n-        TestQuery(Provider<Query> p) {\n-            queryProvider = p;\n-        }\n-\n-        public Query getQuery() {\n-            return queryProvider.get();\n-        }\n-    }\n-\n-    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n-\n-    public static void init(String sqlDialect) {\n-\n-        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n-        DataSource dataSource = new HikariDataSource(config);\n-\n-        try (Connection h2Conn = dataSource.getConnection()) {\n-            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n-        } catch (SQLException e) {\n-            ((HikariDataSource) dataSource).close();\n-            throw new IllegalStateException(e);\n-        }\n-\n+    public static void init() {\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n+        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         dictionary = new EntityDictionary(new HashMap<>());\n         dictionary.bindEntity(PlayerStatsWithView.class);\n         dictionary.bindEntity(PlayerStatsView.class);\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 99e5ce120..015663e95 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -49,10 +58,18 @@ public abstract class SQLUnitTest {\n \n     protected static QueryEngine engine;\n \n+    protected QueryEngine.Transaction transaction;\n+\n     public static void init() {\n+        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n+        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n+        em.getTransaction().commit();\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         dictionary = new EntityDictionary(new HashMap<>());\n         dictionary.bindEntity(PlayerStatsWithView.class);\n         dictionary.bindEntity(PlayerStatsView.class);\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 015663e95..8fdef02a7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -60,13 +85,231 @@ public abstract class SQLUnitTest {\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQuery {\n+        WHERE_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        WHERE_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AGGREGATION (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        HAVING_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        HAVING_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        PAGINATION_TOTAL (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n+                    .pagination(new ImmutablePagination(0, 1, false, true))\n+                    .build();\n+        }),\n+        SORT_METRIC_ASC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.asc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_AND_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScore\", Sorting.SortOrder.desc);\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SUBQUERY (() -> {\n+            Table playerStatsViewTable = engine.getTable(\"playerStatsView\");\n+            return Query.builder()\n+                    .table(playerStatsViewTable)\n+                    .metric(invoke(playerStatsViewTable.getMetric(\"highScore\")))\n+                    .build();\n+        }),\n+        ORDER_BY_DIMENSION_NOT_IN_SELECT (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        COMPLICATED (() -> {\n+            // Sorting\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            // WHERE filter\n+            FilterPredicate predicate = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n+                    .pagination(new ImmutablePagination(10, 5, false, true))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .whereFilter(predicate)\n+                    // force a join to look up countryIsoCode\n+                    .havingFilter(parseFilterExpression(\"countryIsoCode==USA\",\n+                            PlayerStats.class, false))\n+                    .build();\n+        });\n+\n+        private Provider<Query> queryProvider;\n+\n+        TestQuery(Provider<Query> p) {\n+            queryProvider = p;\n+        }\n+\n+        public Query getQuery() {\n+            return queryProvider.get();\n+        }\n+    }\n+\n+    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n+\n+    public static void init(String sqlDialect) {\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n+        DataSource dataSource = new HikariDataSource(config);\n+\n+        try (Connection h2Conn = dataSource.getConnection()) {\n+            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n+        } catch (SQLException e) {\n+            ((HikariDataSource) dataSource).close();\n+            throw new IllegalStateException(e);\n+        }\n \n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n", "next_change": {"commit": "800ba874c21672a727aed4e1beacb294bfb5022e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8fdef02a7..fee51e721 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -311,7 +348,7 @@ public abstract class SQLUnitTest {\n             throw new IllegalStateException(e);\n         }\n \n-        metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n+        metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"), false);\n \n         dictionary = new EntityDictionary(new HashMap<>());\n         dictionary.bindEntity(PlayerStatsWithView.class);\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex fee51e721..3307553a8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -351,15 +379,15 @@ public abstract class SQLUnitTest {\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"), false);\n \n         dictionary = new EntityDictionary(new HashMap<>());\n-        dictionary.bindEntity(PlayerStatsWithView.class);\n-        dictionary.bindEntity(PlayerStatsView.class);\n-        dictionary.bindEntity(PlayerStats.class);\n-        dictionary.bindEntity(Country.class);\n-        dictionary.bindEntity(SubCountry.class);\n-        dictionary.bindEntity(Player.class);\n-        dictionary.bindEntity(CountryView.class);\n-        dictionary.bindEntity(CountryViewNested.class);\n-        dictionary.bindEntity(Continent.class);\n+        dictionary.bindEntity(getType(PlayerStatsWithView.class));\n+        dictionary.bindEntity(getType(PlayerStatsView.class));\n+        dictionary.bindEntity(getType(PlayerStats.class));\n+        dictionary.bindEntity(getType(Country.class));\n+        dictionary.bindEntity(getType(SubCountry.class));\n+        dictionary.bindEntity(getType(Player.class));\n+        dictionary.bindEntity(getType(CountryView.class));\n+        dictionary.bindEntity(getType(CountryViewNested.class));\n+        dictionary.bindEntity(getType(Continent.class));\n         filterParser = new RSQLFilterDialect(dictionary);\n \n         //Manually register the serdes because we are not running a complete Elide service.\n", "next_change": {"commit": "de9883d363ba8b4171be5d8ad508564664f6fc90", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 3307553a8..712f45839 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -376,18 +379,18 @@ public abstract class SQLUnitTest {\n             throw new IllegalStateException(e);\n         }\n \n-        metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"), false);\n+        metaDataStore = new MetaDataStore(getClassType(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\")), false);\n \n         dictionary = new EntityDictionary(new HashMap<>());\n-        dictionary.bindEntity(getType(PlayerStatsWithView.class));\n-        dictionary.bindEntity(getType(PlayerStatsView.class));\n-        dictionary.bindEntity(getType(PlayerStats.class));\n-        dictionary.bindEntity(getType(Country.class));\n-        dictionary.bindEntity(getType(SubCountry.class));\n-        dictionary.bindEntity(getType(Player.class));\n-        dictionary.bindEntity(getType(CountryView.class));\n-        dictionary.bindEntity(getType(CountryViewNested.class));\n-        dictionary.bindEntity(getType(Continent.class));\n+        dictionary.bindEntity(PlayerStatsWithView.class);\n+        dictionary.bindEntity(PlayerStatsView.class);\n+        dictionary.bindEntity(PlayerStats.class);\n+        dictionary.bindEntity(Country.class);\n+        dictionary.bindEntity(SubCountry.class);\n+        dictionary.bindEntity(Player.class);\n+        dictionary.bindEntity(CountryView.class);\n+        dictionary.bindEntity(CountryViewNested.class);\n+        dictionary.bindEntity(Continent.class);\n         filterParser = new RSQLFilterDialect(dictionary);\n \n         //Manually register the serdes because we are not running a complete Elide service.\n", "next_change": {"commit": "737b4ee7d0791a757a496b21f60dd7e8d944f9a0", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 712f45839..1ed59a0f6 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -391,6 +493,7 @@ public abstract class SQLUnitTest {\n         dictionary.bindEntity(CountryView.class);\n         dictionary.bindEntity(CountryViewNested.class);\n         dictionary.bindEntity(Continent.class);\n+        dictionary.bindEntity(GameRevenue.class);\n         filterParser = new RSQLFilterDialect(dictionary);\n \n         //Manually register the serdes because we are not running a complete Elide service.\n", "next_change": {"commit": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 1ed59a0f6..598a7573b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -494,7 +494,7 @@ public abstract class SQLUnitTest {\n         dictionary.bindEntity(CountryViewNested.class);\n         dictionary.bindEntity(Continent.class);\n         dictionary.bindEntity(GameRevenue.class);\n-        filterParser = new RSQLFilterDialect(dictionary);\n+        filterParser = RSQLFilterDialect.builder().dictionary(dictionary).build();\n \n         //Manually register the serdes because we are not running a complete Elide service.\n         CoerceUtil.register(Day.class, new Day.DaySerde());\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "2987d912bf04babaef6ea9d6053583aefd4ebbf2", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Resolves #1566 (#1568)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "4aa0224dc1a0fa5588c637ea3b7e9e5f065ed69e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x Time grain WEEKDATE rename (#1596)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "6e346195b2bb1cbde4e790899c1854ad75e73f39", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cleaned SQL Generation Tests (#1603)"}, {"oid": "e2029731954a3773f367a8e1bf521db8f5f8f6ca", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor analytic time grains (#1608)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "6a0b27f36af3282db4474ce7e5e36adc1d4b91b2", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Postgres Dialect (#1679)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "47f08461f94a04cde2a4356f90fa1ae5a5386573", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Join Type support in aggregation store. (#1712)"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "6a8727709b4fec7d9aede978c11989a5cb8317ba", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Working build"}, {"oid": "b012115bd4753517196d4305d8002a96b3e76c57", "committedDate": "2021-01-25 10:59:22 -0600", "message": "add join expression for all column projection including metrics (#1789)"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "d1be9578498603d9b0f73161cc09555c5c34d3d6", "committedDate": "2021-02-09 13:40:20 -0600", "message": "Convert user provided alias before using in SQL (#1821)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "59f0c3cafed60c462b82e13e45cd0664afa7b7cf", "committedDate": "2021-02-23 11:09:48 -0600", "message": "Cleanup tests (#1856)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "a2c66e96df6239b1e545772308aaf4a9b50df80e", "committedDate": "2021-03-11 11:49:07 -0600", "message": "Parse Arguments from Filter Expression (#1877)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "737b4ee7d0791a757a496b21f60dd7e8d944f9a0", "committedDate": "2021-04-08 09:24:22 -0500", "message": "Phase 8 of Aggregation Store Optimizer: Adding more tests (#1984)"}, {"oid": "0c9fff2684f6bff02222fd36c9b12a686ee655ef", "committedDate": "2021-04-26 09:59:59 -0500", "message": "ClassType.of (#2027)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "b8a9ae644bff7db48b761d83cfac20821f8029e3", "committedDate": "2021-05-11 16:27:16 -0500", "message": "Context for partially resolving expressions (#2068)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "20cccc1e7386d25e7f112e912822afdfc612e79a", "committedDate": "2021-05-14 13:57:01 -0400", "message": "Validate required arguments (#2092)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "9a4849d738692723c45dda410587b3e8c1be897a", "committedDate": "2022-01-04 15:36:49 -0600", "message": "Bump h2 from 1.4.200 to 2.0.202 (#2427)"}, {"oid": "4c9bff306e4d0d0f9644c705a241edc7104cc1fe", "committedDate": "2022-01-19 11:38:10 -0600", "message": "Bump h2 from 2.0.202 to 2.0.206 (#2476)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "a6e6995ad7b3a7571ad3120f76924e9b83009ca7", "committedDate": "2023-04-16 16:45:08 -0500", "message": "Adds Spring Boot 3 Native Image support (#2939)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjcxNw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486406717", "body": "Cleaner to have a single map that stores a new class that includes both the data source and its dialect.  Then there is no way for state to get out of sync.", "bodyText": "Cleaner to have a single map that stores a new class that includes both the data source and its dialect.  Then there is no way for state to get out of sync.", "bodyHTML": "<p dir=\"auto\">Cleaner to have a single map that stores a new class that includes both the data source and its dialect.  Then there is no way for state to get out of sync.</p>", "author": "aklish", "createdAt": "2020-09-10T14:50:39Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -41,6 +47,8 @@\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n+    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NTUyMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487085523", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-11T14:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex bd6d8b384..e69c12f59 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -47,8 +47,8 @@ public class ElideDynamicEntityCompiler {\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n-    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();\n-    @Getter private final Map<String, String> dialectMap = new HashMap<String, String>();\n+    @Getter\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n     /**\n      * Parse dynamic config path.\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex e69c12f59..bd6d8b384 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -47,8 +47,8 @@ public class ElideDynamicEntityCompiler {\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n-    @Getter\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();\n+    @Getter private final Map<String, String> dialectMap = new HashMap<String, String>();\n \n     /**\n      * Parse dynamic config path.\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex bd6d8b384..e69c12f59 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -47,8 +47,8 @@ public class ElideDynamicEntityCompiler {\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n-    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();\n-    @Getter private final Map<String, String> dialectMap = new HashMap<String, String>();\n+    @Getter\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n     /**\n      * Parse dynamic config path.\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex e69c12f59..e195aa5b2 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -53,9 +55,10 @@ public class ElideDynamicEntityCompiler {\n     /**\n      * Parse dynamic config path.\n      * @param path : Dynamic config hjsons root location\n+     * @param dbPasswordExtractor : Password Extractor Implementation\n      * @throws Exception Exception thrown\n      */\n-    public ElideDynamicEntityCompiler(String path) throws Exception {\n+    public ElideDynamicEntityCompiler(String path, DBPasswordExtractor dbPasswordExtractor) throws Exception {\n \n         if (DynamicConfigHelpers.isNullOrEmpty(path)) {\n             throw new IllegalArgumentException(\"Config path is null\");\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex bd6d8b384..33e503a70 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -47,15 +49,16 @@ public class ElideDynamicEntityCompiler {\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n-    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();\n-    @Getter private final Map<String, String> dialectMap = new HashMap<String, String>();\n+    @Getter\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n     /**\n      * Parse dynamic config path.\n      * @param path : Dynamic config hjsons root location\n+     * @param dbPasswordExtractor : Password Extractor Implementation\n      * @throws Exception Exception thrown\n      */\n-    public ElideDynamicEntityCompiler(String path) throws Exception {\n+    public ElideDynamicEntityCompiler(String path, DBPasswordExtractor dbPasswordExtractor) throws Exception {\n \n         if (DynamicConfigHelpers.isNullOrEmpty(path)) {\n             throw new IllegalArgumentException(\"Config path is null\");\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex 33e503a70..5973b3bae 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -49,29 +41,21 @@ public class ElideDynamicEntityCompiler {\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n-    @Getter\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n     /**\n      * Parse dynamic config path.\n      * @param path : Dynamic config hjsons root location\n-     * @param dbPasswordExtractor : Password Extractor Implementation\n      * @throws Exception Exception thrown\n      */\n-    public ElideDynamicEntityCompiler(String path, DBPasswordExtractor dbPasswordExtractor) throws Exception {\n+    public ElideDynamicEntityCompiler(String path) throws Exception {\n \n-        if (DynamicConfigHelpers.isNullOrEmpty(path)) {\n-            throw new IllegalArgumentException(\"Config path is null\");\n-        }\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser(path);\n         HandlebarsHydrator hydrator = new HandlebarsHydrator();\n \n-        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator(path);\n-        dynamicConfigValidator.readAndValidateConfigs();\n-\n-        ElideTableConfig tableConfig = dynamicConfigValidator.getElideTableConfig();\n-        ElideSecurityConfig securityConfig = dynamicConfigValidator.getElideSecurityConfig();\n-        ElideDBConfig elideSQLDBConfig = dynamicConfigValidator.getElideSQLDBConfig();\n-\n+        tableConfig = elideConfigParser.getElideTableConfig();\n+        securityConfig = elideConfigParser.getElideSecurityConfig();\n         tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n         securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n \n", "next_change": {"commit": "59bedbf548534afd73c2953b598b9b0fabb2da15", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex 5973b3bae..13aac9fe3 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -49,13 +49,17 @@ public class ElideDynamicEntityCompiler {\n      */\n     public ElideDynamicEntityCompiler(String path) throws Exception {\n \n-        ElideTableConfig tableConfig = new ElideTableConfig();\n-        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n-        ElideConfigParser elideConfigParser = new ElideConfigParser(path);\n+        if (DynamicConfigHelpers.isNullOrEmpty(path)) {\n+            throw new IllegalArgumentException(\"Config path is null\");\n+        }\n         HandlebarsHydrator hydrator = new HandlebarsHydrator();\n \n-        tableConfig = elideConfigParser.getElideTableConfig();\n-        securityConfig = elideConfigParser.getElideSecurityConfig();\n+        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator();\n+        dynamicConfigValidator.readAndValidateConfigs(path);\n+\n+        ElideTableConfig tableConfig = dynamicConfigValidator.getElideTableConfig();\n+        ElideSecurityConfig securityConfig = dynamicConfigValidator.getElideSecurityConfig();\n+\n         tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n         securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n \n", "next_change": {"commit": "f1541e4c1aaf7adf6d31ffcd6f5e8fbd3d80e6d7", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex 13aac9fe3..c757267a9 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -54,8 +54,8 @@ public class ElideDynamicEntityCompiler {\n         }\n         HandlebarsHydrator hydrator = new HandlebarsHydrator();\n \n-        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator();\n-        dynamicConfigValidator.readAndValidateConfigs(path);\n+        DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator(path);\n+        dynamicConfigValidator.readAndValidateConfigs();\n \n         ElideTableConfig tableConfig = dynamicConfigValidator.getElideTableConfig();\n         ElideSecurityConfig securityConfig = dynamicConfigValidator.getElideSecurityConfig();\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex c757267a9..33e503a70 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -59,6 +70,7 @@ public class ElideDynamicEntityCompiler {\n \n         ElideTableConfig tableConfig = dynamicConfigValidator.getElideTableConfig();\n         ElideSecurityConfig securityConfig = dynamicConfigValidator.getElideSecurityConfig();\n+        ElideDBConfig elideSQLDBConfig = dynamicConfigValidator.getElideSQLDBConfig();\n \n         tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n         securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "59bedbf548534afd73c2953b598b9b0fabb2da15", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Validation for Model Configs (#1306)"}, {"oid": "f1541e4c1aaf7adf6d31ffcd6f5e8fbd3d80e6d7", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Dynamic config schema validation; Read resources from jar (#1449)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "7f7b96932194502aa322368e7e0dc0613974c36d", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Lookup Join Class from static defined models (#1606)"}, {"oid": "b102edce2aab462b582845148c7ea7624a3e977b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrated dynamic-config-helpers module to elide-model-config module (#1628)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMjM5OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486412399", "body": "I don't think we need the stitchList anymore - that was for populating relationships.", "bodyText": "I don't think we need the stitchList anymore - that was for populating relationships.", "bodyHTML": "<p dir=\"auto\">I don't think we need the stitchList anymore - that was for populating relationships.</p>", "author": "aklish", "createdAt": "2020-09-10T14:58:10Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java", "diffHunk": "@@ -86,48 +88,37 @@ public AbstractEntityHydrator(List<Object> results, Query query, EntityDictionar\n         });\n     }\n \n-    /**\n-     * Loads a map of relationship object ID to relationship object instance.\n-     * <p>\n-     * Note the relationship cannot be toMany. This method will be invoked for every relationship field of the\n-     * requested entity. Its implementation should return the result of the following query\n-     * <p>\n-     * <b>Given a relationship with type {@code relationshipType} in an entity, loads all relationship\n-     * objects whose foreign keys are one of the specified list, {@code joinFieldIds}</b>.\n-     * <p>\n-     * For example, when the relationship is loaded from SQL and we have the following example identity:\n-     * <pre>\n-     * public class PlayerStats {\n-     *     private String id;\n-     *     private Country country;\n-     *\n-     *     &#64;OneToOne\n-     *     &#64;JoinColumn(name = \"country_id\")\n-     *     public Country getCountry() {\n-     *         return country;\n-     *     }\n-     * }\n-     * </pre>\n-     * In this case {@code relationshipType = Country.class}. If {@code country} is\n-     * requested in {@code PlayerStats} query and 3 stats, for example, are found in database whose country ID's are\n-     * {@code joinFieldIds = [840, 344, 840]}, then this method should effectively run the following query (JPQL as\n-     * example)\n-     * <pre>\n-     * {@code\n-     *     SELECT e FROM country_table e WHERE country_id IN (840, 344);\n-     * }\n-     * </pre>\n-     * and returns the map of [840: Country(id:840), 344: Country(id:344)]\n-     *\n-     * @param relationshipType  The type of relationship\n-     * @param joinFieldIds  The specified list of join ID's against the relationship\n-     *\n-     * @return a list of hydrating values\n-     */\n-    protected abstract Map<Object, Object> getRelationshipValues(\n-            Class<?> relationshipType,\n-            List<Object> joinFieldIds\n-    );\n+    public AbstractEntityHydrator(ResultSet rs, Query query, EntityDictionary entityDictionary) {\n+        this.stitchList = new StitchList(entityDictionary);", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NTczMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487085730", "bodyText": "removed StitchList class.", "author": "rishi-aga", "createdAt": "2020-09-11T14:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMjM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\nsimilarity index 87%\nrename from elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java\nrename to elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\nindex 43bc8f8dd..ea81c72ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\n", "chunk": "@@ -88,8 +81,7 @@ public abstract class AbstractEntityHydrator {\n         });\n     }\n \n-    public AbstractEntityHydrator(ResultSet rs, Query query, EntityDictionary entityDictionary) {\n-        this.stitchList = new StitchList(entityDictionary);\n+    public EntityHydrator(ResultSet rs, Query query, EntityDictionary entityDictionary) {\n         this.query = query;\n         this.entityDictionary = entityDictionary;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\nsimilarity index 87%\nrename from elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java\nrename to elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\nindex 43bc8f8dd..ea81c72ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\n", "chunk": "@@ -88,8 +81,7 @@ public abstract class AbstractEntityHydrator {\n         });\n     }\n \n-    public AbstractEntityHydrator(ResultSet rs, Query query, EntityDictionary entityDictionary) {\n-        this.stitchList = new StitchList(entityDictionary);\n+    public EntityHydrator(ResultSet rs, Query query, EntityDictionary entityDictionary) {\n         this.query = query;\n         this.entityDictionary = entityDictionary;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMzk0MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486413941", "body": "Why do we still need an entityManagerFactory if we are using Hikari and JDBC directly?", "bodyText": "Why do we still need an entityManagerFactory if we are using Hikari and JDBC directly?", "bodyHTML": "<p dir=\"auto\">Why do we still need an entityManagerFactory if we are using Hikari and JDBC directly?</p>", "author": "aklish", "createdAt": "2020-09-10T15:00:14Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java", "diffHunk": "@@ -11,31 +11,48 @@\n import com.yahoo.elide.datastores.aggregation.core.NoopQueryLogger;\n import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n import com.yahoo.elide.datastores.jpa.JpaDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n import com.yahoo.elide.datastores.multiplex.MultiplexManager;\n \n import org.hibernate.Session;\n \n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.Map;\n import java.util.function.Consumer;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n \n+@AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n+    private DataSource defaultDataSource;", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1Nzg5MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487057890", "bodyText": "entityManagerFactory is still required for JPA datastore.", "author": "rishi-aga", "createdAt": "2020-09-11T13:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMzk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 8bffd7476..28af154cd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -32,17 +33,16 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getDialectType());\n+        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 28af154cd..aab5bee84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -33,16 +32,18 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n+    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, ConnectionDetails> connectionDetailsMap;\n+    private Map<String, String> dialectMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n+                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex aab5bee84..28af154cd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -32,18 +33,16 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n-                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "e4591d599576816c58f6cafb0ad03e404ea0e7b6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 28af154cd..a2f698f73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -42,20 +48,36 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap(), null);\n     }\n \n     @Override\n     public DataStore getDataStore() {\n \n-        MetaDataStore metaDataStore = new MetaDataStore();\n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+\n+        MetaDataStore metaDataStore;\n+        if (compiler != null) {\n+            try {\n+                metaDataStore = new MetaDataStore(compiler);\n+                Set<Class<?>> annotatedClasses = new HashSet<>();\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n \n-        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n                 .queryEngine(new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect, connectionDetailsMap))\n                 .queryLogger(new NoopQueryLogger())\n                 .build();\n \n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n                 (em) -> { return new NonJtaTransaction(em, txCancel); }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 8bffd7476..17f95d276 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -31,31 +37,47 @@ import javax.sql.DataSource;\n @AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n-    private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n-    private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private ConnectionDetails defaultConnectionDetails;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n+    private ElideDynamicEntityCompiler compiler;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getDialectType());\n+        this(entityManagerFactory, new ConnectionDetails(defaultDataSource,\n+                        SQLDialectFactory.getDefaultDialect().getClass().getName()));\n     }\n \n-    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n-                    String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory,\n+                    ConnectionDetails defaultConnectionDetails) {\n+        this(entityManagerFactory, defaultConnectionDetails, Collections.emptyMap(), null);\n     }\n \n     @Override\n     public DataStore getDataStore() {\n \n-        MetaDataStore metaDataStore = new MetaDataStore();\n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+\n+        MetaDataStore metaDataStore;\n+        if (compiler != null) {\n+            try {\n+                metaDataStore = new MetaDataStore(compiler);\n+                Set<Class<?>> annotatedClasses = new HashSet<>();\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n \n-        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n-                .queryEngine(new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect, dataSourceMap, dialectMap))\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n+                .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n                 .queryLogger(new NoopQueryLogger())\n                 .build();\n \n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n                 (em) -> { return new NonJtaTransaction(em, txCancel); }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 17f95d276..d0e2def49 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -5,82 +5,36 @@\n  */\n package com.yahoo.elide.datastores.aggregation.framework;\n \n-import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n-import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n import com.yahoo.elide.core.DataStore;\n import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n import com.yahoo.elide.datastores.aggregation.AggregationDataStore;\n-import com.yahoo.elide.datastores.aggregation.core.NoopQueryLogger;\n+import com.yahoo.elide.datastores.aggregation.QueryEngine;\n import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n import com.yahoo.elide.datastores.jpa.JpaDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n import com.yahoo.elide.datastores.multiplex.MultiplexManager;\n \n-import org.hibernate.Session;\n-\n-import lombok.AllArgsConstructor;\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Consumer;\n-\n-import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n-import javax.sql.DataSource;\n \n-@AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n-    private ConnectionDetails defaultConnectionDetails;\n-    private Map<String, ConnectionDetails> connectionDetailsMap;\n-    private ElideDynamicEntityCompiler compiler;\n \n-    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, new ConnectionDetails(defaultDataSource,\n-                        SQLDialectFactory.getDefaultDialect().getClass().getName()));\n-    }\n-\n-    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory,\n-                    ConnectionDetails defaultConnectionDetails) {\n-        this(entityManagerFactory, defaultConnectionDetails, Collections.emptyMap(), null);\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory) {\n+        this.entityManagerFactory = entityManagerFactory;\n     }\n \n     @Override\n     public DataStore getDataStore() {\n+        MetaDataStore metaDataStore = new MetaDataStore();\n \n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n-\n-        MetaDataStore metaDataStore;\n-        if (compiler != null) {\n-            try {\n-                metaDataStore = new MetaDataStore(compiler);\n-                Set<Class<?>> annotatedClasses = new HashSet<>();\n-                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n-                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n-                .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n-                .queryLogger(new NoopQueryLogger())\n-                .build();\n+        QueryEngine sqlQueryEngine = new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n \n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        AggregationDataStore aggregationDataStore = new AggregationDataStore(sqlQueryEngine);\n \n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n-                (em) -> { return new NonJtaTransaction(em, txCancel); }\n+                NonJtaTransaction::new\n         );\n \n         return new MultiplexManager(jpaStore, metaDataStore, aggregationDataStore);\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex d0e2def49..95f39d5a9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -28,9 +27,9 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     public DataStore getDataStore() {\n         MetaDataStore metaDataStore = new MetaDataStore();\n \n-        QueryEngine sqlQueryEngine = new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n-\n-        AggregationDataStore aggregationDataStore = new AggregationDataStore(sqlQueryEngine);\n+        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n+                .queryEngine(new SQLQueryEngine(metaDataStore, entityManagerFactory))\n+                .build();\n \n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 95f39d5a9..44ca68189 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -26,14 +31,15 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     @Override\n     public DataStore getDataStore() {\n         MetaDataStore metaDataStore = new MetaDataStore();\n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n         AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n-                .queryEngine(new SQLQueryEngine(metaDataStore, entityManagerFactory))\n+                .queryEngine(new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel))\n                 .build();\n \n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n-                NonJtaTransaction::new\n+                (em) -> { return new NonJtaTransaction(em, txCancel); }\n         );\n \n         return new MultiplexManager(jpaStore, metaDataStore, aggregationDataStore);\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 44ca68189..17f95d276 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -5,38 +5,79 @@\n  */\n package com.yahoo.elide.datastores.aggregation.framework;\n \n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n import com.yahoo.elide.core.DataStore;\n import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n import com.yahoo.elide.datastores.aggregation.AggregationDataStore;\n+import com.yahoo.elide.datastores.aggregation.core.NoopQueryLogger;\n import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n import com.yahoo.elide.datastores.jpa.JpaDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n import com.yahoo.elide.datastores.multiplex.MultiplexManager;\n \n import org.hibernate.Session;\n \n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.function.Consumer;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n \n+@AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n+    private ConnectionDetails defaultConnectionDetails;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n+    private ElideDynamicEntityCompiler compiler;\n+\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n+        this(entityManagerFactory, new ConnectionDetails(defaultDataSource,\n+                        SQLDialectFactory.getDefaultDialect().getClass().getName()));\n+    }\n \n-    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory) {\n-        this.entityManagerFactory = entityManagerFactory;\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory,\n+                    ConnectionDetails defaultConnectionDetails) {\n+        this(entityManagerFactory, defaultConnectionDetails, Collections.emptyMap(), null);\n     }\n \n     @Override\n     public DataStore getDataStore() {\n-        MetaDataStore metaDataStore = new MetaDataStore();\n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n-        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n-                .queryEngine(new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel))\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+\n+        MetaDataStore metaDataStore;\n+        if (compiler != null) {\n+            try {\n+                metaDataStore = new MetaDataStore(compiler);\n+                Set<Class<?>> annotatedClasses = new HashSet<>();\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n+                .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n+                .queryLogger(new NoopQueryLogger())\n                 .build();\n \n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n                 (em) -> { return new NonJtaTransaction(em, txCancel); }\n", "next_change": {"commit": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 17f95d276..93aac1620 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -73,7 +73,7 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n \n         AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n                 .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n-                .queryLogger(new NoopQueryLogger())\n+                .queryLogger(new Slf4jQueryLogger())\n                 .build();\n \n         Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n", "next_change": {"commit": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 93aac1620..b88915c82 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -76,16 +62,17 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n                 .queryLogger(new Slf4jQueryLogger())\n                 .build();\n \n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        Consumer<EntityManager> txCancel = em -> em.unwrap(Session.class).cancelQuery();\n \n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n-                (em) -> { return new NonJtaTransaction(em, txCancel); }\n+                em -> new NonJtaTransaction(em, txCancel)\n         );\n \n         return new MultiplexManager(jpaStore, metaDataStore, aggregationDataStore);\n     }\n \n+    @Override\n     public void cleanseTestData() {\n \n     }\n", "next_change": {"commit": "53fbf01a9e7d0120db65334e99ccae5c7cf78c5e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex b88915c82..037526d10 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -43,33 +50,43 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n         this(entityManagerFactory, defaultConnectionDetails, Collections.emptyMap(), null);\n     }\n \n-    @Override\n-    public DataStore getDataStore() {\n+    protected JpaDataStore createJPADataStore() {\n+        Consumer<EntityManager> txCancel = em -> em.unwrap(Session.class).cancelQuery();\n \n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+        return new JpaDataStore(\n+                () -> entityManagerFactory.createEntityManager(),\n+                em -> new NonJtaTransaction(em, txCancel)\n+        );\n+    }\n+\n+    protected MetaDataStore createMetaDataStore() {\n+        ClassScanner scanner = DefaultClassScanner.getInstance();\n \n         MetaDataStore metaDataStore;\n         if (validator != null) {\n-           metaDataStore = new MetaDataStore(validator.getElideTableConfig().getTables(), true);\n-\n-           aggregationDataStoreBuilder.dynamicCompiledClasses(metaDataStore.getDynamicTypes());\n+           metaDataStore = new MetaDataStore(scanner,\n+                   validator.getElideTableConfig().getTables(),\n+                   validator.getElideNamespaceConfig().getNamespaceconfigs(), true);\n         } else {\n-            metaDataStore = new MetaDataStore(true);\n+            metaDataStore = new MetaDataStore(scanner, true);\n         }\n \n-        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n-                .queryEngine(new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap))\n-                .queryLogger(new Slf4jQueryLogger())\n-                .build();\n-\n-        Consumer<EntityManager> txCancel = em -> em.unwrap(Session.class).cancelQuery();\n+        return metaDataStore;\n+    }\n \n-        DataStore jpaStore = new JpaDataStore(\n-                () -> entityManagerFactory.createEntityManager(),\n-                em -> new NonJtaTransaction(em, txCancel)\n-        );\n+    protected AggregationDataStore.AggregationDataStoreBuilder createAggregationDataStoreBuilder(MetaDataStore metaDataStore) {\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n \n-        return new MultiplexManager(jpaStore, metaDataStore, aggregationDataStore);\n+        if (validator != null) {\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(metaDataStore.getDynamicTypes());\n+        }\n+        return aggregationDataStoreBuilder\n+                .queryEngine(new SQLQueryEngine(metaDataStore,\n+                        (name) -> connectionDetailsMap.getOrDefault(name, defaultConnectionDetails),\n+                        new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))),\n+                        new DefaultQueryPlanMerger(metaDataStore),\n+                        new DefaultQueryValidator(metaDataStore.getMetadataDictionary())))\n+                .queryLogger(new Slf4jQueryLogger());\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "e090ab5ed5344760d6239c680515f203548c1596", "committedDate": "2022-01-12 11:24:34 -0600", "message": "use alias to get column projection in query plan translator and while nesting projection (#2493)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "53fbf01a9e7d0120db65334e99ccae5c7cf78c5e", "committedDate": "2022-07-05 19:34:26 -0500", "message": "Use Serializable Classes for RedisCache to work (#2681)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjM5NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486416395", "body": "Maybe we can merge this with AbstractEntityHyrdator now that this doesn't do anything.", "bodyText": "Maybe we can merge this with AbstractEntityHyrdator now that this doesn't do anything.", "bodyHTML": "<p dir=\"auto\">Maybe we can merge this with AbstractEntityHyrdator now that this doesn't do anything.</p>", "author": "aklish", "createdAt": "2020-09-10T15:03:36Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java", "diffHunk": "@@ -9,78 +9,28 @@\n import com.yahoo.elide.datastores.aggregation.QueryEngine;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-import com.yahoo.elide.utils.coerce.CoerceUtil;\n-import lombok.AccessLevel;\n-import lombok.Getter;\n \n-import java.util.AbstractMap;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.persistence.EntityManager;\n+import java.sql.ResultSet;\n \n /**\n  * {@link SQLEntityHydrator} hydrates the entity loaded by\n  * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n  */\n public class SQLEntityHydrator extends AbstractEntityHydrator {\n \n-    @Getter(AccessLevel.PRIVATE)\n-    private final EntityManager entityManager;\n-\n     /**\n      * Constructor.\n      *\n      * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n      * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n      *               objects\n      * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     * @param entityManager  An service that issues JPQL queries to load relationship objects\n      */\n     public SQLEntityHydrator(\n-            List<Object> results,\n+            ResultSet results,", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjg1Mg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486416852", "bodyText": "We can just call it EntityHydrator.", "author": "aklish", "createdAt": "2020-09-10T15:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NjM4Mg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487086382", "bodyText": "removed SQLEntityHydrator and renamed AbstractEntityHyrdator -> EntityHydrator", "author": "rishi-aga", "createdAt": "2020-09-11T14:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex e74da1961..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-}\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nnew file mode 100644\nindex 000000000..276c12d84\n--- /dev/null\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.QueryEngine;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n+\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * {@link SQLEntityHydrator} hydrates the entity loaded by\n+ * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n+ */\n+public class SQLEntityHydrator extends AbstractEntityHydrator {\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n+     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n+     *               objects\n+     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n+     */\n+    public SQLEntityHydrator(\n+            ResultSet results,\n+            Query query,\n+            EntityDictionary entityDictionary\n+    ) {\n+        super(results, query, entityDictionary);\n+    }\n+\n+    @Override\n+    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n+        // Not required\n+        return Collections.emptyMap();\n+    }\n+}\n", "next_change": {"commit": "fa95290812c67c8b7bf2fbebebd3f5ffdfc6d252", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nindex 276c12d84..e74da1961 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -36,10 +33,4 @@ public class SQLEntityHydrator extends AbstractEntityHydrator {\n     ) {\n         super(results, query, entityDictionary);\n     }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n-        // Not required\n-        return Collections.emptyMap();\n-    }\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex e74da1961..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex e74da1961..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-}\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nnew file mode 100644\nindex 000000000..7ae9d8b0e\n--- /dev/null\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n+import com.yahoo.elide.utils.coerce.CoerceUtil;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.persistence.EntityManager;\n+\n+/**\n+ * {@link SQLEntityHydrator} hydrates the entity loaded by {@link SQLQueryEngine#executeQuery(Query, boolean)}.\n+ */\n+public class SQLEntityHydrator extends AbstractEntityHydrator {\n+\n+    @Getter(AccessLevel.PRIVATE)\n+    private final EntityManager entityManager;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param results The loaded objects from {@link SQLQueryEngine#executeQuery(Query, boolean)}\n+     * @param query  The query passed to {@link SQLQueryEngine#executeQuery(Query, boolean)} to load the objects\n+     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n+     * @param entityManager  An service that issues JPQL queries to load relationship objects\n+     */\n+    public SQLEntityHydrator(\n+            List<Object> results,\n+            Query query,\n+            EntityDictionary entityDictionary,\n+            EntityManager entityManager\n+    ) {\n+        super(results, query, entityDictionary);\n+        this.entityManager = entityManager;\n+    }\n+\n+    @Override\n+    protected Map<Object, Object> getRelationshipValues(\n+            Class<?> relationshipType,\n+            List<Object> joinFieldIds\n+    ) {\n+        if (joinFieldIds.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+\n+        List<Object> uniqueIds = joinFieldIds.stream()\n+                .distinct()\n+                .collect(Collectors.toCollection(LinkedList::new));\n+\n+        List<Object> loaded = getEntityManager()\n+                .createQuery(\n+                        String.format(\n+                                \"SELECT e FROM %s e WHERE %s IN (:idList)\",\n+                                relationshipType.getCanonicalName(),\n+                                getEntityDictionary().getIdFieldName(relationshipType)\n+                        )\n+                )\n+                .setParameter(\"idList\", uniqueIds)\n+                .getResultList();\n+\n+        return loaded.stream()\n+                .map(obj -> new AbstractMap.SimpleImmutableEntry<>(\n+                        CoerceUtil.coerce(\n+                                (Object) getEntityDictionary().getId(obj),\n+                                getEntityDictionary().getIdType(relationshipType)\n+                        ),\n+                        obj))\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+}\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex 7ae9d8b0e..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,83 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-import com.yahoo.elide.utils.coerce.CoerceUtil;\n-import lombok.AccessLevel;\n-import lombok.Getter;\n-\n-import java.util.AbstractMap;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.persistence.EntityManager;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by {@link SQLQueryEngine#executeQuery(Query, boolean)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    @Getter(AccessLevel.PRIVATE)\n-    private final EntityManager entityManager;\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link SQLQueryEngine#executeQuery(Query, boolean)}\n-     * @param query  The query passed to {@link SQLQueryEngine#executeQuery(Query, boolean)} to load the objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     * @param entityManager  An service that issues JPQL queries to load relationship objects\n-     */\n-    public SQLEntityHydrator(\n-            List<Object> results,\n-            Query query,\n-            EntityDictionary entityDictionary,\n-            EntityManager entityManager\n-    ) {\n-        super(results, query, entityDictionary);\n-        this.entityManager = entityManager;\n-    }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(\n-            Class<?> relationshipType,\n-            List<Object> joinFieldIds\n-    ) {\n-        if (joinFieldIds.isEmpty()) {\n-            return Collections.emptyMap();\n-        }\n-\n-        List<Object> uniqueIds = joinFieldIds.stream()\n-                .distinct()\n-                .collect(Collectors.toCollection(LinkedList::new));\n-\n-        List<Object> loaded = getEntityManager()\n-                .createQuery(\n-                        String.format(\n-                                \"SELECT e FROM %s e WHERE %s IN (:idList)\",\n-                                relationshipType.getCanonicalName(),\n-                                getEntityDictionary().getIdFieldName(relationshipType)\n-                        )\n-                )\n-                .setParameter(\"idList\", uniqueIds)\n-                .getResultList();\n-\n-        return loaded.stream()\n-                .map(obj -> new AbstractMap.SimpleImmutableEntry<>(\n-                        CoerceUtil.coerce(\n-                                (Object) getEntityDictionary().getId(obj),\n-                                getEntityDictionary().getIdType(relationshipType)\n-                        ),\n-                        obj))\n-                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMzAyNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486423026", "body": "You could commonize this code with a template function that takes another function with a result set argument\r\n\r\n```java\r\n<T> runQuery(String query, Function<ResultSet, T> resultSetMapper)\r\n```\r\nor something along those lines.", "bodyText": "You could commonize this code with a template function that takes another function with a result set argument\n<T> runQuery(String query, Function<ResultSet, T> resultSetMapper)\nor something along those lines.", "bodyHTML": "<p dir=\"auto\">You could commonize this code with a template function that takes another function with a result set argument</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;T&gt; runQuery(String query, Function&lt;ResultSet, T&gt; resultSetMapper)\"><pre><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-k\">&gt;</span> runQuery(<span class=\"pl-smi\">String</span> query, <span class=\"pl-k\">Function&lt;<span class=\"pl-smi\">ResultSet</span>, <span class=\"pl-smi\">T</span>&gt;</span> resultSetMapper)</pre></div>\n<p dir=\"auto\">or something along those lines.</p>", "author": "aklish", "createdAt": "2020-09-10T15:12:27Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +144,187 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private final Connection conn;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+        private final SQLDialect dialect;\n+\n+        SqlTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction(defaultDataSource, defaultDialect);\n+    }\n+\n+    @Override\n+    public Transaction beginTransaction(String dbConnectionName) {\n+        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        return new SqlTransaction(dataSource, dialect);\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+        SQLDialect dialect = sqlTransaction.dialect;\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n         String queryString = sql.toString();\n-        log.debug(\"SQL Query: \" + queryString);\n-        javax.persistence.Query jpaQuery = entityManager.createNativeQuery(queryString);\n \n         QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n+        NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n         if (pagination != null) {\n-            jpaQuery.setFirstResult(pagination.getOffset());\n-            jpaQuery.setMaxResults(pagination.getLimit());\n+            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n             if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, entityManager));\n+                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n             }\n         }\n \n+        log.debug(\"SQL Query: \" + queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString);\n+\n         // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, jpaQuery);\n+        supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        List<Object> results = new TimedFunction<List<Object>>(\n-                () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n-                \"Running Query: \" + queryString).get();\n+        ResultSet resultSet = new TimedFunction<ResultSet>(() -> {\n+            try {\n+                return stmt.executeQuery();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n \n-        resultBuilder.data(new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate());\n+        resultBuilder.data(new SQLEntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n-    private long getPageTotal(Query query, SQLQuery sql, EntityManager entityManager) {\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n-\n-        javax.persistence.Query pageTotalQuery =\n-                entityManager.createNativeQuery(paginationSQL)\n-                        .setHint(QueryHints.HINT_READONLY, true);\n+    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n+        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n \n-        //Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, pageTotalQuery);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n \n-        //Run the Pagination query and log the time spent.\n-        return new TimedFunction<>(\n-                () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n-                \"Running Query: \" + paginationSQL\n+        // Supply the query parameters to the query\n+        supplyFilterQueryParameters(query, stmt);\n+\n+        // Run the Pagination query and log the time spent.\n+        return new TimedFunction<>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                if (rs.next()) {\n+                    return rs.getLong(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + paginationSQL\n         ).get();\n     }\n \n     @Override\n     public String getTableVersion(Table table, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String tableVersion = null;\n         Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n         VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n-            javax.persistence.Query versionQuery =\n-                    entityManager.createNativeQuery(versionQueryString)\n-                            .setHint(QueryHints.HINT_READONLY, true);\n-            tableVersion = new TimedFunction<>(\n-                    () -> CoerceUtil.coerce(versionQuery.getSingleResult(), String.class),\n-                    \"Running Query: \" + versionQueryString\n+            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n+            tableVersion = new TimedFunction<>(() -> {", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5NzgyMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487097823", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-11T14:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMzAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 85abbd695..af77ce49b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -274,23 +277,29 @@ public class SQLQueryEngine extends QueryEngine {\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n             NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n-            tableVersion = new TimedFunction<>(() -> {\n-                try {\n-                    ResultSet rs = stmt.executeQuery();\n-                    if (rs.next()) {\n-                        return rs.getString(1);\n-                    } else {\n-                        return null;\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            }, \"Running Query: \" + versionQueryString\n-            ).get();\n+            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n         }\n         return tableVersion;\n     }\n \n+    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n+\n+        // Run the query and log the time spent.\n+        return new TimedFunction<>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                return resultMapper.apply(rs);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n+    }\n+\n+    private Supplier<IllegalStateException> undefinedConnectionException(String str) {\n+        return () -> new IllegalStateException(\"DataSource or Dialect undefined for DB Connection Name: \" + str);\n+    }\n+\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b..a49d1f5b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -277,29 +296,23 @@ public class SQLQueryEngine extends QueryEngine {\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n             NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n+            tableVersion = new TimedFunction<>(() -> {\n+                try {\n+                    ResultSet rs = stmt.executeQuery();\n+                    if (rs.next()) {\n+                        return rs.getString(1);\n+                    } else {\n+                        return null;\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            }, \"Running Query: \" + versionQueryString\n+            ).get();\n         }\n         return tableVersion;\n     }\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    private Supplier<IllegalStateException> undefinedConnectionException(String str) {\n-        return () -> new IllegalStateException(\"DataSource or Dialect undefined for DB Connection Name: \" + str);\n-    }\n-\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..de44895c1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -296,23 +278,25 @@ public class SQLQueryEngine extends QueryEngine {\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n             NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n-            tableVersion = new TimedFunction<>(() -> {\n-                try {\n-                    ResultSet rs = stmt.executeQuery();\n-                    if (rs.next()) {\n-                        return rs.getString(1);\n-                    } else {\n-                        return null;\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            }, \"Running Query: \" + versionQueryString\n-            ).get();\n+            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n         }\n         return tableVersion;\n     }\n \n+    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n+\n+        // Run the query and log the time spent.\n+        return new TimedFunction<R>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                return resultMapper.apply(rs);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n+    }\n+\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex de44895c1..af77ce49b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -297,6 +296,10 @@ public class SQLQueryEngine extends QueryEngine {\n         ).get();\n     }\n \n+    private Supplier<IllegalStateException> undefinedConnectionException(String str) {\n+        return () -> new IllegalStateException(\"DataSource or Dialect undefined for DB Connection Name: \" + str);\n+    }\n+\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b..5dbe48e69 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -296,10 +288,6 @@ public class SQLQueryEngine extends QueryEngine {\n         ).get();\n     }\n \n-    private Supplier<IllegalStateException> undefinedConnectionException(String str) {\n-        return () -> new IllegalStateException(\"DataSource or Dialect undefined for DB Connection Name: \" + str);\n-    }\n-\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 85abbd695..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -213,84 +215,70 @@ public class SQLQueryEngine extends QueryEngine {\n         NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null) {\n-            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n-            if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-            }\n+        if (returnPageTotals(pagination)) {\n+            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n         }\n \n         log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<ResultSet>(() -> {\n-            try {\n-                return stmt.executeQuery();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n+        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n \n-        resultBuilder.data(new SQLEntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n+        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n     private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n+        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the Pagination query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                if (rs.next()) {\n-                    return rs.getLong(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + paginationSQL\n-        ).get();\n+        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n     }\n \n     @Override\n     public String getTableVersion(Table table, Transaction transaction) {\n-        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String tableVersion = null;\n         Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n         VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n-            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n-            tableVersion = new TimedFunction<>(() -> {\n-                try {\n-                    ResultSet rs = stmt.executeQuery();\n-                    if (rs.next()) {\n-                        return rs.getString(1);\n-                    } else {\n-                        return null;\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            }, \"Running Query: \" + versionQueryString\n-            ).get();\n+            SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+            ConnectionDetails details = getConnectionDetails(table.getDbConnectionName());\n+            DataSource dataSource = details.getDataSource();\n+            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString, dataSource);\n+            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n         }\n         return tableVersion;\n     }\n \n+    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n+\n+        // Run the query and log the time spent.\n+        return new TimedFunction<>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                return resultMapper.apply(rs);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n+    }\n+\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -151,172 +114,84 @@ public class SQLQueryEngine extends QueryEngine {\n         return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n     }\n \n-    /**\n-     * State needed for SQLQueryEngine to execute queries.\n-     */\n-    static class SqlTransaction implements QueryEngine.Transaction {\n-\n-        private Connection conn;\n-        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n-\n-        private void initializeConnection(DataSource dataSource) {\n-            try {\n-                this.conn = dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        public NamedParamPreparedStatement initializeStatement(String namedParamQuery, DataSource dataSource) {\n-            NamedParamPreparedStatement stmt;\n-            try {\n-                if (conn == null || !conn.isValid(10)) {\n-                    initializeConnection(dataSource);\n-                }\n-                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n-                stmts.add(stmt);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-            return stmt;\n-        }\n-\n-        @Override\n-        public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n-        }\n-\n-        @Override\n-        public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n-        }\n-    }\n-\n     @Override\n-    public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n-    }\n-\n-    @Override\n-    public QueryResult executeQuery(Query query, Transaction transaction) {\n-        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-\n-        // Translate the query into SQL.\n-        SQLQuery sql = toSQL(query, dialect);\n-        String queryString = sql.toString();\n+    public Iterable<Object> executeQuery(Query query, boolean useCache) {\n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n+        try {\n+            entityManager = entityManagerFactory.createEntityManager();\n \n-        QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n-        NamedParamPreparedStatement stmt;\n+            // manually begin the transaction\n+            transaction = entityManager.getTransaction();\n+            if (!transaction.isActive()) {\n+                transaction.begin();\n+            }\n \n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-        }\n+            // Translate the query into SQL.\n+            SQLQuery sql = toSQL(query);\n+            log.debug(\"SQL Query: \" + sql);\n \n-        log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n+            javax.persistence.Query jpaQuery = entityManager.createNativeQuery(sql.toString());\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+            Pagination pagination = query.getPagination();\n+            if (pagination != null) {\n+                jpaQuery.setFirstResult(pagination.getOffset());\n+                jpaQuery.setMaxResults(pagination.getLimit());\n \n-        // Run the primary query and log the time spent.\n-        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n+                if (pagination.returnPageTotals()) {\n \n-        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n-        return resultBuilder.build();\n-    }\n+                    SQLQuery paginationSQL = toPageTotalSQL(sql);\n+                    javax.persistence.Query pageTotalQuery =\n+                            entityManager.createNativeQuery(paginationSQL.toString())\n+                                    .setHint(QueryHints.HINT_READONLY, true);\n \n-    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+                    //Supply the query parameters to the query\n+                    supplyFilterQueryParameters(query, pageTotalQuery);\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n+                    //Run the Pagination query and log the time spent.\n+                    long total = new TimedFunction<>(\n+                            () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                            \"Running Query: \" + paginationSQL\n+                    ).get();\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+                    pagination.setPageTotals(total);\n+                }\n+            }\n \n-        // Run the Pagination query and log the time spent.\n-        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n-    }\n+            // Supply the query parameters to the query\n+            supplyFilterQueryParameters(query, jpaQuery);\n \n-    @Override\n-    public String getTableVersion(Table table, Transaction transaction) {\n-\n-        String tableVersion = null;\n-        Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n-        VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n-        if (versionAnnotation != null) {\n-            String versionQueryString = versionAnnotation.sql();\n-            SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-            ConnectionDetails details = getConnectionDetails(table.getDbConnectionName());\n-            DataSource dataSource = details.getDataSource();\n-            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString, dataSource);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n-        }\n-        return tableVersion;\n-    }\n+            // Run the primary query and log the time spent.\n+            List<Object> results = new TimedFunction<>(\n+                    () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n+                    \"Running Query: \" + sql).get();\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+            return new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate();\n+        } finally {\n+            if (transaction != null && transaction.isActive()) {\n+                transaction.commit();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n             }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param dialect SQL dialect to use for this storage.\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public List<String> explain(Query query, SQLDialect dialect) {\n-        List<String> queries = new ArrayList<String>();\n-        SQLQuery sql = toSQL(query, dialect);\n-\n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n-        queries.add(sql.toString());\n-        return queries;\n-    }\n-\n-    @Override\n-    public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n      * @param query the client query.\n-     * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n-    private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+    private SQLQuery toSQL(Query query) {\n+        Set<ColumnProjection> groupByDimensions = new LinkedHashSet<>(query.getGroupByDimensions());\n+        Set<TimeDimensionProjection> timeDimensions = new LinkedHashSet<>(query.getTimeDimensions());\n \n         SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n                 .map(metricProjection -> {\n                     if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n+                        throw new InvalidPredicateException(\n+                                \"Non-SQL metric function on \" + metricProjection.getAlias());\n                     }\n \n                     return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -199,7 +273,7 @@ public class SQLQueryEngine extends QueryEngine {\n                 .reduce(SQLQueryTemplate::merge)\n                 .orElse(new SQLQueryTemplate(query));\n \n-        return new SQLQueryConstructor(referenceTable).resolveTemplate(\n+        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n                 query,\n                 queryTemplate,\n                 query.getSorting(),\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -278,18 +329,18 @@ public class SQLQueryEngine extends QueryEngine {\n                 queryTemplate,\n                 query.getSorting(),\n                 query.getWhereFilter(),\n-                query.getHavingFilter());\n+                query.getHavingFilter(),\n+                query.getPagination());\n     }\n \n \n     /**\n-     * Given a JPA query, replaces any parameters with their values from client query.\n+     * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n-     * @param jpaQuery The JPA query\n+     * @param stmt Customized Prepared Statement\n      */\n-    private void supplyFilterQueryParameters(Query query,\n-                                             javax.persistence.Query jpaQuery) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..25eda7887 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,47 +316,56 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n+        return explain(query, query.getConnectionDetails().getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n-     * @param query the client query.\n+     * @param query the transformed client query.\n      * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n     private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+        SQLReferenceTable queryReferenceTable = new DynamicSQLReferenceTable(referenceTable, query);\n \n-        SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n-                .map(metricProjection -> {\n-                    if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n-                    }\n+        QueryTranslator translator = new QueryTranslator(queryReferenceTable, sqlDialect);\n \n-                    return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n-                })\n-                .reduce(SQLQueryTemplate::merge)\n-                .orElse(new SQLQueryTemplate(query));\n-\n-        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n-                query,\n-                queryTemplate,\n-                query.getSorting(),\n-                query.getWhereFilter(),\n-                query.getHavingFilter(),\n-                query.getPagination());\n+        return query.accept(translator).build();\n     }\n \n+    /**\n+     * Transforms a client query into a potentially nested/complex query by expanding each metric into\n+     * its respective query plan - and then merging the plans together into a consolidated query.\n+     * @param query The client query.\n+     * @return A query that reflects each metric's individual query plan.\n+     */\n+    private Query expandMetricQueryPlans(Query query) {\n+        QueryPlan mergedPlan = null;\n+\n+        //Expand each metric into its own query plan.  Merge them all together.\n+        for (MetricProjection metricProjection : query.getMetricProjections()) {\n+            QueryPlan queryPlan = metricProjection.resolve();\n+            if (queryPlan != null) {\n+                mergedPlan = queryPlan.merge(mergedPlan);\n+            }\n+        }\n+\n+        QueryPlanTranslator queryPlanTranslator = new QueryPlanTranslator(query);\n+\n+        return (mergedPlan == null)\n+                ? query\n+                : mergedPlan.accept(queryPlanTranslator).build();\n+    }\n \n     /**\n      * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n      * @param stmt Customized Prepared Statement\n+     * @param dialect the SQL dialect\n      */\n-    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt, SQLDialect dialect) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDU1Ng==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486424556", "body": "Instead of instantiation via string name, we could pass the class name here and use reflection to load the dialect like a plugin.", "bodyText": "Instead of instantiation via string name, we could pass the class name here and use reflection to load the dialect like a plugin.", "bodyHTML": "<p dir=\"auto\">Instead of instantiation via string name, we could pass the class name here and use reflection to load the dialect like a plugin.</p>", "author": "aklish", "createdAt": "2020-09-10T15:14:33Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java", "diffHunk": "@@ -13,19 +13,36 @@\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n+\n+    private static final SQLDialect H2_DIALECT = new H2Dialect();\n+    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n+    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n+\n     public static SQLDialect getDefaultDialect() {\n-        return new H2Dialect();\n+        return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return new H2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return new HiveDialect();\n+        return HIVE_DIALECT;\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return new PrestoDialect();\n+        return PRESTO_DIALECT;\n+    }\n+\n+    public static SQLDialect getDialect(String type) {", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NzU2Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487057563", "bodyText": "ok.", "author": "rishi-aga", "createdAt": "2020-09-11T13:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex a14f84499..6dc584984 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -13,36 +13,29 @@ import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.Pre\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n-\n-    private static final SQLDialect H2_DIALECT = new H2Dialect();\n-    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n-    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n-\n     public static SQLDialect getDefaultDialect() {\n         return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return H2_DIALECT;\n+        return new H2Dialect();\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return HIVE_DIALECT;\n+        return new HiveDialect();\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return PRESTO_DIALECT;\n+        return new PrestoDialect();\n     }\n \n-    public static SQLDialect getDialect(String type) {\n-        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n-            return H2_DIALECT;\n-        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n-            return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n-            return PRESTO_DIALECT;\n-        } else {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect Type: \" + type);\n+    public static SQLDialect getDialect(String name) {\n+        try {\n+            return (SQLDialect) Class.forName(name).getConstructor().newInstance();\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + name, e);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + name, e);\n         }\n     }\n }\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex 6dc584984..d3284573b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -13,29 +13,36 @@ import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.Pre\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n+\n+    private static final SQLDialect H2_DIALECT = new H2Dialect();\n+    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n+    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n+\n     public static SQLDialect getDefaultDialect() {\n-        return getH2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return new H2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return new HiveDialect();\n+        return HIVE_DIALECT;\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return new PrestoDialect();\n+        return PRESTO_DIALECT;\n     }\n \n-    public static SQLDialect getDialect(String name) {\n-        try {\n-            return (SQLDialect) Class.forName(name).getConstructor().newInstance();\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + name, e);\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + name, e);\n+    public static SQLDialect getDialect(String type) {\n+        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n+            return H2_DIALECT;\n+        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n+            return HIVE_DIALECT;\n+        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n+            return PRESTO_DIALECT;\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported SQL Dialect Type: \" + type);\n         }\n     }\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex d3284573b..6dc584984 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -13,36 +13,29 @@ import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.Pre\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n-\n-    private static final SQLDialect H2_DIALECT = new H2Dialect();\n-    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n-    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n-\n     public static SQLDialect getDefaultDialect() {\n-        return H2_DIALECT;\n+        return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return H2_DIALECT;\n+        return new H2Dialect();\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return HIVE_DIALECT;\n+        return new HiveDialect();\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return PRESTO_DIALECT;\n+        return new PrestoDialect();\n     }\n \n-    public static SQLDialect getDialect(String type) {\n-        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n-            return H2_DIALECT;\n-        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n-            return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n-            return PRESTO_DIALECT;\n-        } else {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect Type: \" + type);\n+    public static SQLDialect getDialect(String name) {\n+        try {\n+            return (SQLDialect) Class.forName(name).getConstructor().newInstance();\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + name, e);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + name, e);\n         }\n     }\n }\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex 6dc584984..d611f639b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -13,29 +13,42 @@ import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.Pre\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n+\n+    private static final SQLDialect H2_DIALECT = new H2Dialect();\n+    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n+    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n+\n     public static SQLDialect getDefaultDialect() {\n         return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return new H2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return new HiveDialect();\n+        return HIVE_DIALECT;\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return new PrestoDialect();\n+        return PRESTO_DIALECT;\n     }\n \n-    public static SQLDialect getDialect(String name) {\n-        try {\n-            return (SQLDialect) Class.forName(name).getConstructor().newInstance();\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + name, e);\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + name, e);\n+    public static SQLDialect getDialect(String type) {\n+        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n+            return H2_DIALECT;\n+        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n+            return HIVE_DIALECT;\n+        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n+            return PRESTO_DIALECT;\n+        } else {\n+            try {\n+                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n+            } catch (Exception e) {\n+                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n+            }\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex a14f84499..e07d6ae73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -31,7 +31,7 @@ public class SQLDialectFactory {\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return PRESTO_DIALECT;\n+        return PRESTODB_DIALECT;\n     }\n \n     public static SQLDialect getDialect(String type) {\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex e07d6ae73..578ae3348 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -7,48 +7,25 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n \n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.H2Dialect;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.HiveDialect;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.PrestoDBDialect;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.PrestoDialect;\n \n /**\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n-\n-    private static final SQLDialect H2_DIALECT = new H2Dialect();\n-    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n-    private static final SQLDialect PRESTODB_DIALECT = new PrestoDBDialect();\n-\n     public static SQLDialect getDefaultDialect() {\n-        return getH2Dialect();\n+        return new H2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return H2_DIALECT;\n+        return new H2Dialect();\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return HIVE_DIALECT;\n+        return new HiveDialect();\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return PRESTODB_DIALECT;\n-    }\n-\n-    public static SQLDialect getDialect(String type) {\n-        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n-            return H2_DIALECT;\n-        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n-            return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n-            return PRESTODB_DIALECT;\n-        } else {\n-            try {\n-                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n-            } catch (Exception e) {\n-                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n-            }\n-        }\n+        return new PrestoDialect();\n     }\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex 578ae3348..e07d6ae73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -7,25 +7,48 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n \n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.H2Dialect;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.HiveDialect;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.PrestoDialect;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.PrestoDBDialect;\n \n /**\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n+\n+    private static final SQLDialect H2_DIALECT = new H2Dialect();\n+    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n+    private static final SQLDialect PRESTODB_DIALECT = new PrestoDBDialect();\n+\n     public static SQLDialect getDefaultDialect() {\n-        return new H2Dialect();\n+        return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return new H2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return new HiveDialect();\n+        return HIVE_DIALECT;\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return new PrestoDialect();\n+        return PRESTODB_DIALECT;\n+    }\n+\n+    public static SQLDialect getDialect(String type) {\n+        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n+            return H2_DIALECT;\n+        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n+            return HIVE_DIALECT;\n+        } else if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n+            return PRESTODB_DIALECT;\n+        } else {\n+            try {\n+                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n+            } catch (Exception e) {\n+                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n+            }\n+        }\n     }\n }\n", "next_change": {"commit": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex e07d6ae73..cc21d88e7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -30,25 +36,47 @@ public class SQLDialectFactory {\n         return HIVE_DIALECT;\n     }\n \n-    public static SQLDialect getPrestoDialect() {\n+    public static SQLDialect getPrestoDBDialect() {\n         return PRESTODB_DIALECT;\n     }\n \n+    public static SQLDialect getMySQLDialect() {\n+        return MYSQL_DIALECT;\n+    }\n+\n+    public static SQLDialect getPostgresDialect() {\n+        return POSTGRES_DIALECT;\n+    }\n+\n+    public static SQLDialect getDruidDialect() {\n+        return DRUID_DIALECT;\n+    }\n+\n     public static SQLDialect getDialect(String type) {\n         if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n             return H2_DIALECT;\n-        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n+        }\n+        if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n             return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n+        }\n+        if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n             return PRESTODB_DIALECT;\n-        } else {\n-            try {\n-                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n-            } catch (Exception e) {\n-                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n-            }\n+        }\n+        if (type.equalsIgnoreCase(MYSQL_DIALECT.getDialectType())) {\n+            return MYSQL_DIALECT;\n+        }\n+        if (type.equalsIgnoreCase(POSTGRES_DIALECT.getDialectType())) {\n+            return POSTGRES_DIALECT;\n+        }\n+        if (type.equalsIgnoreCase(DRUID_DIALECT.getDialectType())) {\n+            return DRUID_DIALECT;\n+        }\n+        try {\n+            return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n         }\n     }\n }\n", "next_change": {"commit": "d7b8635bcba15ce8103e0cebd42ee6825dfa982d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex cc21d88e7..ad37ff6c3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -72,7 +72,7 @@ public class SQLDialectFactory {\n             return DRUID_DIALECT;\n         }\n         try {\n-            return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+            return Class.forName(type).asSubclass(SQLDialect.class).getConstructor().newInstance();\n         } catch (ClassNotFoundException e) {\n             throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n         } catch (Exception e) {\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex a14f84499..e07d6ae73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -39,10 +39,16 @@ public class SQLDialectFactory {\n             return H2_DIALECT;\n         } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n             return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n-            return PRESTO_DIALECT;\n+        } else if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n+            return PRESTODB_DIALECT;\n         } else {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect Type: \" + type);\n+            try {\n+                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n+            } catch (Exception e) {\n+                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n+            }\n         }\n     }\n }\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex e07d6ae73..578ae3348 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -7,48 +7,25 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n \n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.H2Dialect;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.HiveDialect;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.PrestoDBDialect;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.PrestoDialect;\n \n /**\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n-\n-    private static final SQLDialect H2_DIALECT = new H2Dialect();\n-    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n-    private static final SQLDialect PRESTODB_DIALECT = new PrestoDBDialect();\n-\n     public static SQLDialect getDefaultDialect() {\n-        return getH2Dialect();\n+        return new H2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return H2_DIALECT;\n+        return new H2Dialect();\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return HIVE_DIALECT;\n+        return new HiveDialect();\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return PRESTODB_DIALECT;\n-    }\n-\n-    public static SQLDialect getDialect(String type) {\n-        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n-            return H2_DIALECT;\n-        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n-            return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n-            return PRESTODB_DIALECT;\n-        } else {\n-            try {\n-                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n-            } catch (Exception e) {\n-                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n-            }\n-        }\n+        return new PrestoDialect();\n     }\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex 578ae3348..e07d6ae73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -7,25 +7,48 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n \n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.H2Dialect;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.HiveDialect;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.PrestoDialect;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.PrestoDBDialect;\n \n /**\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n+\n+    private static final SQLDialect H2_DIALECT = new H2Dialect();\n+    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n+    private static final SQLDialect PRESTODB_DIALECT = new PrestoDBDialect();\n+\n     public static SQLDialect getDefaultDialect() {\n-        return new H2Dialect();\n+        return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return new H2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return new HiveDialect();\n+        return HIVE_DIALECT;\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return new PrestoDialect();\n+        return PRESTODB_DIALECT;\n+    }\n+\n+    public static SQLDialect getDialect(String type) {\n+        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n+            return H2_DIALECT;\n+        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n+            return HIVE_DIALECT;\n+        } else if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n+            return PRESTODB_DIALECT;\n+        } else {\n+            try {\n+                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n+            } catch (Exception e) {\n+                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n+            }\n+        }\n     }\n }\n", "next_change": {"commit": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex e07d6ae73..cc21d88e7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -30,25 +36,47 @@ public class SQLDialectFactory {\n         return HIVE_DIALECT;\n     }\n \n-    public static SQLDialect getPrestoDialect() {\n+    public static SQLDialect getPrestoDBDialect() {\n         return PRESTODB_DIALECT;\n     }\n \n+    public static SQLDialect getMySQLDialect() {\n+        return MYSQL_DIALECT;\n+    }\n+\n+    public static SQLDialect getPostgresDialect() {\n+        return POSTGRES_DIALECT;\n+    }\n+\n+    public static SQLDialect getDruidDialect() {\n+        return DRUID_DIALECT;\n+    }\n+\n     public static SQLDialect getDialect(String type) {\n         if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n             return H2_DIALECT;\n-        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n+        }\n+        if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n             return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n+        }\n+        if (type.equalsIgnoreCase(PRESTODB_DIALECT.getDialectType())) {\n             return PRESTODB_DIALECT;\n-        } else {\n-            try {\n-                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n-            } catch (Exception e) {\n-                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n-            }\n+        }\n+        if (type.equalsIgnoreCase(MYSQL_DIALECT.getDialectType())) {\n+            return MYSQL_DIALECT;\n+        }\n+        if (type.equalsIgnoreCase(POSTGRES_DIALECT.getDialectType())) {\n+            return POSTGRES_DIALECT;\n+        }\n+        if (type.equalsIgnoreCase(DRUID_DIALECT.getDialectType())) {\n+            return DRUID_DIALECT;\n+        }\n+        try {\n+            return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n         }\n     }\n }\n", "next_change": {"commit": "d7b8635bcba15ce8103e0cebd42ee6825dfa982d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex cc21d88e7..ad37ff6c3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -72,7 +72,7 @@ public class SQLDialectFactory {\n             return DRUID_DIALECT;\n         }\n         try {\n-            return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+            return Class.forName(type).asSubclass(SQLDialect.class).getConstructor().newInstance();\n         } catch (ClassNotFoundException e) {\n             throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n         } catch (Exception e) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "6a0b27f36af3282db4474ce7e5e36adc1d4b91b2", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Postgres Dialect (#1679)"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "d7b8635bcba15ce8103e0cebd42ee6825dfa982d", "committedDate": "2022-04-22 15:42:14 -0500", "message": "Aggregation store dynamic table sql (#2626)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNjIxNQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486426215", "body": "Can you explain what this is for?", "bodyText": "Can you explain what this is for?", "bodyHTML": "<p dir=\"auto\">Can you explain what this is for?</p>", "author": "aklish", "createdAt": "2020-09-10T15:16:44Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -74,8 +76,10 @@ public static void beforeAllTests() {\n     }\n \n     @BeforeEach\n-    public void setUp() {\n-        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+    public void setUp(TestInfo info) {\n+        if (!info.getTags().contains(\"SkipBeforeEach\")) {", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NzM5Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487057393", "bodyText": "one of test case was failing for \"Extra Stubbing\" error after the changes, so had to skip \"BeforeEach\" method for it to pass.", "author": "rishi-aga", "createdAt": "2020-09-11T13:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNjIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NzY5Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487087693", "bodyText": "removed this logic and added annotation \"@MockitoSettings(strictness = Strictness.LENIENT)\"", "author": "rishi-aga", "createdAt": "2020-09-11T14:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNjIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16..38be16031 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,9 +77,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n-            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n-        }\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n     @Test\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 38be16031..509600f16 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,7 +77,9 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n+            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+        }\n     }\n \n     @Test\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16..7420c9fee 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,9 +80,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n-            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n-        }\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n     @Test\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee..4b57cffa4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -79,7 +75,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @BeforeEach\n-    public void setUp(TestInfo info) {\n+    public void setUp() {\n         when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16..4b57cffa4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -76,10 +75,8 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @BeforeEach\n-    public void setUp(TestInfo info) {\n-        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n-            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n-        }\n+    public void setUp() {\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n     @Test\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 4b57cffa4..dcc2a7c77 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -81,17 +72,10 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @Test\n     public void loadObjectsPopulatesCache() {\n-        Mockito.reset(queryLogger);\n-\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n-                .fromClause(query.getTable().getName())\n-                .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n-        when(queryEngine.explain(query)).thenReturn(Arrays.asList(myQuery.toString()));\n-        AggregationDataStoreTransaction transaction =\n-                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex dcc2a7c77..e25e3dcf3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -72,10 +79,17 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @Test\n     public void loadObjectsPopulatesCache() {\n+        Mockito.reset(queryLogger);\n+\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n+        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                .fromClause(query.getTable().getName())\n+                .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n-        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        AggregationDataStoreTransaction transaction =\n+                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex e25e3dcf3..b7bbd2ad0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -87,7 +88,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n                 .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n-        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        when(queryEngine.explain(query)).thenReturn(Arrays.asList(myQuery.toString()));\n         AggregationDataStoreTransaction transaction =\n                 new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n", "next_change": {"commit": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex b7bbd2ad0..86273165c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -84,7 +85,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n         SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n-                .fromClause(query.getTable().getName())\n+                .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 86273165c..3f75b1617 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -84,7 +84,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         Mockito.reset(queryLogger);\n \n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+        SQLQuery myQuery = SQLQuery.builder()\n                 .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n", "next_change": {"commit": "cd008a45ad379004b92c5114150016027aa07b80", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 3f75b1617..7e6187c6a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -84,7 +82,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         Mockito.reset(queryLogger);\n \n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder()\n+        NativeQuery myQuery = NativeQuery.builder()\n                 .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex dcc2a7c77..e25e3dcf3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -84,15 +98,29 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         Mockito.verify(cache).get(cacheKey);\n         Mockito.verify(cache).put(cacheKey, queryResult);\n         Mockito.verifyNoMoreInteractions(cache);\n+        Mockito.verify(queryLogger, times(1)).acceptQuery(\n+                Mockito.eq(scope.getRequestId()),\n+                any(), any(), any(), any(), any());\n+        Mockito.verify(queryLogger, times(1)).processQuery(\n+                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(false));\n+        Mockito.verify(queryLogger, times(1)).completeQuery(\n+                Mockito.eq(scope.getRequestId()), any());\n     }\n \n     @Test\n     public void loadObjectsUsesCache() {\n+        Mockito.reset(queryLogger);\n+\n         String cacheKey = \"foo;\" + queryKey;\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n+        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                .fromClause(query.getTable().getName())\n+                .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n-        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        AggregationDataStoreTransaction transaction =\n+                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex e25e3dcf3..b7bbd2ad0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -118,7 +119,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n                 .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n-        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        when(queryEngine.explain(query)).thenReturn(Arrays.asList(myQuery.toString()));\n         AggregationDataStoreTransaction transaction =\n                 new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n", "next_change": {"commit": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex b7bbd2ad0..86273165c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -115,7 +116,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         String cacheKey = \"foo;\" + queryKey;\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n         SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n-                .fromClause(query.getTable().getName())\n+                .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 86273165c..3f75b1617 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -115,7 +115,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n         String cacheKey = \"foo;\" + queryKey;\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+        SQLQuery myQuery = SQLQuery.builder()\n                 .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n", "next_change": {"commit": "cd008a45ad379004b92c5114150016027aa07b80", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 3f75b1617..7e6187c6a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -115,7 +113,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n         String cacheKey = \"foo;\" + queryKey;\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder()\n+        NativeQuery myQuery = NativeQuery.builder()\n                 .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "cc0dffc51428b5b9ee255896169de91c69af0314", "committedDate": "2021-09-13 14:27:56 -0500", "message": "AggregationStore: Templated filter column arguments (#2297)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486428565", "body": "It would be nice if we removed all the entity manager factory code from Aggregation Store and its tests.  We should just use JDBC directly.", "bodyText": "It would be nice if we removed all the entity manager factory code from Aggregation Store and its tests.  We should just use JDBC directly.", "bodyHTML": "<p dir=\"auto\">It would be nice if we removed all the entity manager factory code from Aggregation Store and its tests.  We should just use JDBC directly.</p>", "author": "aklish", "createdAt": "2020-09-10T15:19:39Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -298,14 +299,19 @@ public Query getQuery() {\n \n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n-    public static void init(SQLDialect sqlDialect) {\n+    public static void init(String sqlDialect) {\n         emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n         em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n         em.getTransaction().commit();\n \n+        HikariConfig config = new HikariConfig();", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5ODY1OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487098659", "bodyText": "using org.apache.ibatis.jdbc.ScriptRunner for executing SQL.\nFor creating datasource, still using emf and persistence.xml. Should I create a new properties file for creating datasource ?", "author": "rishi-aga", "createdAt": "2020-09-11T14:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NjI1Nw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487146257", "bodyText": "Can we use an HJSON config for that?", "author": "aklish", "createdAt": "2020-09-11T16:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0Njk1Nw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487146957", "bodyText": "If persistence.xml is just using H2 database, there is a way to run scripts using H2 script runner - or alternatively you can run a script in the JDBC connection URL.", "author": "aklish", "createdAt": "2020-09-11T16:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMjA1Nw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488812057", "bodyText": "working on HJSON config", "author": "rishi-aga", "createdAt": "2020-09-15T16:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce4..4ed0a05cd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +304,22 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection conn = dataSource.getConnection();\n+                        Reader reader = new InputStreamReader(\n+                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n+            ScriptRunner runner = new ScriptRunner(conn);\n+            runner.runScript(reader);\n+        } catch (SQLException | IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 4ed0a05cd..8ed124ce4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -304,22 +300,18 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n+        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n+        em.getTransaction().commit();\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n-        try (Connection conn = dataSource.getConnection();\n-                        Reader reader = new InputStreamReader(\n-                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n-            ScriptRunner runner = new ScriptRunner(conn);\n-            runner.runScript(reader);\n-        } catch (SQLException | IOException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce4..4ed0a05cd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +304,22 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection conn = dataSource.getConnection();\n+                        Reader reader = new InputStreamReader(\n+                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n+            ScriptRunner runner = new ScriptRunner(conn);\n+            runner.runScript(reader);\n+        } catch (SQLException | IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 4ed0a05cd..ac093db0c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -311,12 +307,10 @@ public abstract class SQLUnitTest {\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n-        try (Connection conn = dataSource.getConnection();\n-                        Reader reader = new InputStreamReader(\n-                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n-            ScriptRunner runner = new ScriptRunner(conn);\n-            runner.runScript(reader);\n-        } catch (SQLException | IOException e) {\n+        try (Connection h2Conn = dataSource.getConnection()) {\n+            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n+        } catch (SQLException e) {\n+            ((HikariDataSource) dataSource).close();\n             throw new IllegalStateException(e);\n         }\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce4..8fdef02a7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +300,17 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n-\n-        HikariConfig config = new HikariConfig();\n-        config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n-        config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection h2Conn = dataSource.getConnection()) {\n+            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n+        } catch (SQLException e) {\n+            ((HikariDataSource) dataSource).close();\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8fdef02a7..99e5ce120 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -83,236 +49,10 @@ public abstract class SQLUnitTest {\n \n     protected static QueryEngine engine;\n \n-    protected QueryEngine.Transaction transaction;\n-\n-    // Standard set of test queries used in dialect tests\n-    protected enum TestQuery {\n-        WHERE_METRICS_ONLY (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n-                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                    .whereFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n-                            Operator.GT,\n-                            Arrays.asList(9000)))\n-                    .build();\n-        }),\n-        WHERE_DIMS_ONLY (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .whereFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                            Operator.NOTNULL,\n-                            new ArrayList<Object>()))\n-                    .build();\n-        }),\n-        WHERE_METRICS_AND_DIMS (() -> {\n-            FilterPredicate ratingFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                    Operator.NOTNULL, new ArrayList<Object>());\n-            FilterPredicate highScoreFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .whereFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n-                    .build();\n-        }),\n-        WHERE_METRICS_OR_DIMS (() -> {\n-            FilterPredicate ratingFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                    Operator.NOTNULL, new ArrayList<Object>());\n-            FilterPredicate highScoreFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .whereFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n-                    .build();\n-        }),\n-        WHERE_METRICS_AGGREGATION (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                    .whereFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                            Operator.GT,\n-                            Arrays.asList(9000)))\n-                    .build();\n-        }),\n-        HAVING_METRICS_ONLY (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n-                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                    .havingFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n-                            Operator.GT,\n-                            Arrays.asList(9000)))\n-                    .build();\n-        }),\n-        HAVING_DIMS_ONLY (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .havingFilter(new FilterPredicate(\n-                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                            Operator.NOTNULL,\n-                            new ArrayList<Object>()))\n-                    .build();\n-        }),\n-        HAVING_METRICS_AND_DIMS (() -> {\n-            FilterPredicate ratingFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                    Operator.NOTNULL, new ArrayList<Object>());\n-            FilterPredicate highScoreFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .havingFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n-                    .build();\n-        }),\n-        HAVING_METRICS_OR_DIMS (() -> {\n-            FilterPredicate ratingFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n-                    Operator.NOTNULL, new ArrayList<Object>());\n-            FilterPredicate highScoreFilter = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .havingFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n-                    .build();\n-        }),\n-        PAGINATION_TOTAL (() -> {\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n-                    .pagination(new ImmutablePagination(0, 1, false, true))\n-                    .build();\n-        }),\n-        SORT_METRIC_ASC (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.asc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        SORT_METRIC_DESC (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        SORT_DIM_DESC (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        SORT_METRIC_AND_DIM_DESC (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"highScore\", Sorting.SortOrder.desc);\n-            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        SUBQUERY (() -> {\n-            Table playerStatsViewTable = engine.getTable(\"playerStatsView\");\n-            return Query.builder()\n-                    .table(playerStatsViewTable)\n-                    .metric(invoke(playerStatsViewTable.getMetric(\"highScore\")))\n-                    .build();\n-        }),\n-        ORDER_BY_DIMENSION_NOT_IN_SELECT (() -> {\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .build();\n-        }),\n-        COMPLICATED (() -> {\n-            // Sorting\n-            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n-            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n-            // WHERE filter\n-            FilterPredicate predicate = new FilterPredicate(\n-                    new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n-                    Operator.GT,\n-                    Arrays.asList(9000));\n-            return Query.builder()\n-                    .table(playerStatsTable)\n-                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n-                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n-                    .pagination(new ImmutablePagination(10, 5, false, true))\n-                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n-                    .whereFilter(predicate)\n-                    // force a join to look up countryIsoCode\n-                    .havingFilter(parseFilterExpression(\"countryIsoCode==USA\",\n-                            PlayerStats.class, false))\n-                    .build();\n-        });\n-\n-        private Provider<Query> queryProvider;\n-\n-        TestQuery(Provider<Query> p) {\n-            queryProvider = p;\n-        }\n-\n-        public Query getQuery() {\n-            return queryProvider.get();\n-        }\n-    }\n-\n-    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n-\n-    public static void init(String sqlDialect) {\n-\n-        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n-        DataSource dataSource = new HikariDataSource(config);\n-\n-        try (Connection h2Conn = dataSource.getConnection()) {\n-            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n-        } catch (SQLException e) {\n-            ((HikariDataSource) dataSource).close();\n-            throw new IllegalStateException(e);\n-        }\n-\n+    public static void init() {\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n+        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         dictionary = new EntityDictionary(new HashMap<>());\n         dictionary.bindEntity(PlayerStatsWithView.class);\n         dictionary.bindEntity(PlayerStatsView.class);\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 99e5ce120..015663e95 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -49,10 +58,18 @@ public abstract class SQLUnitTest {\n \n     protected static QueryEngine engine;\n \n+    protected QueryEngine.Transaction transaction;\n+\n     public static void init() {\n+        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n+        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n+        em.getTransaction().commit();\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         dictionary = new EntityDictionary(new HashMap<>());\n         dictionary.bindEntity(PlayerStatsWithView.class);\n         dictionary.bindEntity(PlayerStatsView.class);\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 015663e95..8fdef02a7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -60,13 +85,231 @@ public abstract class SQLUnitTest {\n \n     protected QueryEngine.Transaction transaction;\n \n-    public static void init() {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+    // Standard set of test queries used in dialect tests\n+    protected enum TestQuery {\n+        WHERE_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        WHERE_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .whereFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        WHERE_METRICS_AGGREGATION (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .whereFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_METRICS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                            Operator.GT,\n+                            Arrays.asList(9000)))\n+                    .build();\n+        }),\n+        HAVING_DIMS_ONLY (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new FilterPredicate(\n+                            new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                            Operator.NOTNULL,\n+                            new ArrayList<Object>()))\n+                    .build();\n+        }),\n+        HAVING_METRICS_AND_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new AndFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        HAVING_METRICS_OR_DIMS (() -> {\n+            FilterPredicate ratingFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"overallRating\"),\n+                    Operator.NOTNULL, new ArrayList<Object>());\n+            FilterPredicate highScoreFilter = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScore\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .havingFilter(new OrFilterExpression(ratingFilter, highScoreFilter))\n+                    .build();\n+        }),\n+        PAGINATION_TOTAL (() -> {\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n+                    .pagination(new ImmutablePagination(0, 1, false, true))\n+                    .build();\n+        }),\n+        SORT_METRIC_ASC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.asc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScoreNoAgg\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SORT_METRIC_AND_DIM_DESC (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScore\", Sorting.SortOrder.desc);\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        SUBQUERY (() -> {\n+            Table playerStatsViewTable = engine.getTable(\"playerStatsView\");\n+            return Query.builder()\n+                    .table(playerStatsViewTable)\n+                    .metric(invoke(playerStatsViewTable.getMetric(\"highScore\")))\n+                    .build();\n+        }),\n+        ORDER_BY_DIMENSION_NOT_IN_SELECT (() -> {\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"overallRating\", Sorting.SortOrder.desc);\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .build();\n+        }),\n+        COMPLICATED (() -> {\n+            // Sorting\n+            Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n+            sortMap.put(\"highScoreNoAgg\", Sorting.SortOrder.desc);\n+            // WHERE filter\n+            FilterPredicate predicate = new FilterPredicate(\n+                    new Path(PlayerStats.class, dictionary, \"highScoreNoAgg\"),\n+                    Operator.GT,\n+                    Arrays.asList(9000));\n+            return Query.builder()\n+                    .table(playerStatsTable)\n+                    .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                    .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                    .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n+                    .pagination(new ImmutablePagination(10, 5, false, true))\n+                    .sorting(new SortingImpl(sortMap, PlayerStats.class, dictionary))\n+                    .whereFilter(predicate)\n+                    // force a join to look up countryIsoCode\n+                    .havingFilter(parseFilterExpression(\"countryIsoCode==USA\",\n+                            PlayerStats.class, false))\n+                    .build();\n+        });\n+\n+        private Provider<Query> queryProvider;\n+\n+        TestQuery(Provider<Query> p) {\n+            queryProvider = p;\n+        }\n+\n+        public Query getQuery() {\n+            return queryProvider.get();\n+        }\n+    }\n+\n+    protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n+\n+    public static void init(String sqlDialect) {\n+\n+        HikariConfig config = new HikariConfig(File.separator + \"jpah2db.properties\");\n+        DataSource dataSource = new HikariDataSource(config);\n+\n+        try (Connection h2Conn = dataSource.getConnection()) {\n+            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n+        } catch (SQLException e) {\n+            ((HikariDataSource) dataSource).close();\n+            throw new IllegalStateException(e);\n+        }\n \n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n", "next_change": {"commit": "800ba874c21672a727aed4e1beacb294bfb5022e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8fdef02a7..fee51e721 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -311,7 +348,7 @@ public abstract class SQLUnitTest {\n             throw new IllegalStateException(e);\n         }\n \n-        metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n+        metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"), false);\n \n         dictionary = new EntityDictionary(new HashMap<>());\n         dictionary.bindEntity(PlayerStatsWithView.class);\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex fee51e721..3307553a8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -351,15 +379,15 @@ public abstract class SQLUnitTest {\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"), false);\n \n         dictionary = new EntityDictionary(new HashMap<>());\n-        dictionary.bindEntity(PlayerStatsWithView.class);\n-        dictionary.bindEntity(PlayerStatsView.class);\n-        dictionary.bindEntity(PlayerStats.class);\n-        dictionary.bindEntity(Country.class);\n-        dictionary.bindEntity(SubCountry.class);\n-        dictionary.bindEntity(Player.class);\n-        dictionary.bindEntity(CountryView.class);\n-        dictionary.bindEntity(CountryViewNested.class);\n-        dictionary.bindEntity(Continent.class);\n+        dictionary.bindEntity(getType(PlayerStatsWithView.class));\n+        dictionary.bindEntity(getType(PlayerStatsView.class));\n+        dictionary.bindEntity(getType(PlayerStats.class));\n+        dictionary.bindEntity(getType(Country.class));\n+        dictionary.bindEntity(getType(SubCountry.class));\n+        dictionary.bindEntity(getType(Player.class));\n+        dictionary.bindEntity(getType(CountryView.class));\n+        dictionary.bindEntity(getType(CountryViewNested.class));\n+        dictionary.bindEntity(getType(Continent.class));\n         filterParser = new RSQLFilterDialect(dictionary);\n \n         //Manually register the serdes because we are not running a complete Elide service.\n", "next_change": {"commit": "de9883d363ba8b4171be5d8ad508564664f6fc90", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 3307553a8..712f45839 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -376,18 +379,18 @@ public abstract class SQLUnitTest {\n             throw new IllegalStateException(e);\n         }\n \n-        metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"), false);\n+        metaDataStore = new MetaDataStore(getClassType(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\")), false);\n \n         dictionary = new EntityDictionary(new HashMap<>());\n-        dictionary.bindEntity(getType(PlayerStatsWithView.class));\n-        dictionary.bindEntity(getType(PlayerStatsView.class));\n-        dictionary.bindEntity(getType(PlayerStats.class));\n-        dictionary.bindEntity(getType(Country.class));\n-        dictionary.bindEntity(getType(SubCountry.class));\n-        dictionary.bindEntity(getType(Player.class));\n-        dictionary.bindEntity(getType(CountryView.class));\n-        dictionary.bindEntity(getType(CountryViewNested.class));\n-        dictionary.bindEntity(getType(Continent.class));\n+        dictionary.bindEntity(PlayerStatsWithView.class);\n+        dictionary.bindEntity(PlayerStatsView.class);\n+        dictionary.bindEntity(PlayerStats.class);\n+        dictionary.bindEntity(Country.class);\n+        dictionary.bindEntity(SubCountry.class);\n+        dictionary.bindEntity(Player.class);\n+        dictionary.bindEntity(CountryView.class);\n+        dictionary.bindEntity(CountryViewNested.class);\n+        dictionary.bindEntity(Continent.class);\n         filterParser = new RSQLFilterDialect(dictionary);\n \n         //Manually register the serdes because we are not running a complete Elide service.\n", "next_change": {"commit": "737b4ee7d0791a757a496b21f60dd7e8d944f9a0", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 712f45839..1ed59a0f6 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -391,6 +493,7 @@ public abstract class SQLUnitTest {\n         dictionary.bindEntity(CountryView.class);\n         dictionary.bindEntity(CountryViewNested.class);\n         dictionary.bindEntity(Continent.class);\n+        dictionary.bindEntity(GameRevenue.class);\n         filterParser = new RSQLFilterDialect(dictionary);\n \n         //Manually register the serdes because we are not running a complete Elide service.\n", "next_change": {"commit": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 1ed59a0f6..598a7573b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -494,7 +494,7 @@ public abstract class SQLUnitTest {\n         dictionary.bindEntity(CountryViewNested.class);\n         dictionary.bindEntity(Continent.class);\n         dictionary.bindEntity(GameRevenue.class);\n-        filterParser = new RSQLFilterDialect(dictionary);\n+        filterParser = RSQLFilterDialect.builder().dictionary(dictionary).build();\n \n         //Manually register the serdes because we are not running a complete Elide service.\n         CoerceUtil.register(Day.class, new Day.DaySerde());\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "2987d912bf04babaef6ea9d6053583aefd4ebbf2", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Resolves #1566 (#1568)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "4aa0224dc1a0fa5588c637ea3b7e9e5f065ed69e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x Time grain WEEKDATE rename (#1596)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "6e346195b2bb1cbde4e790899c1854ad75e73f39", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cleaned SQL Generation Tests (#1603)"}, {"oid": "e2029731954a3773f367a8e1bf521db8f5f8f6ca", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor analytic time grains (#1608)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "6a0b27f36af3282db4474ce7e5e36adc1d4b91b2", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Postgres Dialect (#1679)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "47f08461f94a04cde2a4356f90fa1ae5a5386573", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Join Type support in aggregation store. (#1712)"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "6a8727709b4fec7d9aede978c11989a5cb8317ba", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Working build"}, {"oid": "b012115bd4753517196d4305d8002a96b3e76c57", "committedDate": "2021-01-25 10:59:22 -0600", "message": "add join expression for all column projection including metrics (#1789)"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "d1be9578498603d9b0f73161cc09555c5c34d3d6", "committedDate": "2021-02-09 13:40:20 -0600", "message": "Convert user provided alias before using in SQL (#1821)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "59f0c3cafed60c462b82e13e45cd0664afa7b7cf", "committedDate": "2021-02-23 11:09:48 -0600", "message": "Cleanup tests (#1856)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "a2c66e96df6239b1e545772308aaf4a9b50df80e", "committedDate": "2021-03-11 11:49:07 -0600", "message": "Parse Arguments from Filter Expression (#1877)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "737b4ee7d0791a757a496b21f60dd7e8d944f9a0", "committedDate": "2021-04-08 09:24:22 -0500", "message": "Phase 8 of Aggregation Store Optimizer: Adding more tests (#1984)"}, {"oid": "0c9fff2684f6bff02222fd36c9b12a686ee655ef", "committedDate": "2021-04-26 09:59:59 -0500", "message": "ClassType.of (#2027)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "b8a9ae644bff7db48b761d83cfac20821f8029e3", "committedDate": "2021-05-11 16:27:16 -0500", "message": "Context for partially resolving expressions (#2068)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "20cccc1e7386d25e7f112e912822afdfc612e79a", "committedDate": "2021-05-14 13:57:01 -0400", "message": "Validate required arguments (#2092)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "9a4849d738692723c45dda410587b3e8c1be897a", "committedDate": "2022-01-04 15:36:49 -0600", "message": "Bump h2 from 1.4.200 to 2.0.202 (#2427)"}, {"oid": "4c9bff306e4d0d0f9644c705a241edc7104cc1fe", "committedDate": "2022-01-19 11:38:10 -0600", "message": "Bump h2 from 2.0.202 to 2.0.206 (#2476)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "a6e6995ad7b3a7571ad3120f76924e9b83009ca7", "committedDate": "2023-04-16 16:45:08 -0500", "message": "Adds Spring Boot 3 Native Image support (#2939)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyOTgyNQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486429825", "body": "This looks like a problem.  EntityManager had a way to cancel a query and tear down the resources.  Is there a way to do something similar with JDBC?", "bodyText": "This looks like a problem.  EntityManager had a way to cancel a query and tear down the resources.  Is there a way to do something similar with JDBC?", "bodyHTML": "<p dir=\"auto\">This looks like a problem.  EntityManager had a way to cancel a query and tear down the resources.  Is there a way to do something similar with JDBC?</p>", "author": "aklish", "createdAt": "2020-09-10T15:21:17Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -321,8 +327,8 @@ public static void init(SQLDialect sqlDialect) {\n         filterParser = new RSQLFilterDialect(dictionary);\n \n         metaDataStore.populateEntityDictionary(dictionary);\n-        Consumer<EntityManager> txCancel = (entityManager) -> { entityManager.unwrap(Session.class).cancelQuery(); };\n-        engine = new SQLQueryEngine(metaDataStore, emf, txCancel, sqlDialect);\n+", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NjI1OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487056259", "bodyText": "JDBC supports Statement.cancel() for killing the running queries on DB. I am calling it in transaction's cancel method", "author": "rishi-aga", "createdAt": "2020-09-11T13:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyOTgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce4..8fdef02a7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -328,26 +327,11 @@ public abstract class SQLUnitTest {\n \n         metaDataStore.populateEntityDictionary(dictionary);\n \n-        engine = new SQLQueryEngine(metaDataStore, dataSource, sqlDialect);\n+        engine = new SQLQueryEngine(metaDataStore, new ConnectionDetails(dataSource, sqlDialect));\n \n         TableId tableId = new TableId(\"playerStats\", \"\", \"\");\n         playerStatsTable = engine.getTable(tableId);\n \n-        ASIA.setName(\"Asia\");\n-        ASIA.setId(\"1\");\n-\n-        NA.setName(\"North America\");\n-        NA.setId(\"2\");\n-\n-        HONG_KONG.setIsoCode(\"HKG\");\n-        HONG_KONG.setName(\"Hong Kong\");\n-        HONG_KONG.setId(\"344\");\n-        HONG_KONG.setContinent(ASIA);\n-\n-        USA.setIsoCode(\"USA\");\n-        USA.setName(\"United States\");\n-        USA.setId(\"840\");\n-        USA.setContinent(NA);\n     }\n \n     public static void init() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce4..8fdef02a7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -328,26 +327,11 @@ public abstract class SQLUnitTest {\n \n         metaDataStore.populateEntityDictionary(dictionary);\n \n-        engine = new SQLQueryEngine(metaDataStore, dataSource, sqlDialect);\n+        engine = new SQLQueryEngine(metaDataStore, new ConnectionDetails(dataSource, sqlDialect));\n \n         TableId tableId = new TableId(\"playerStats\", \"\", \"\");\n         playerStatsTable = engine.getTable(tableId);\n \n-        ASIA.setName(\"Asia\");\n-        ASIA.setId(\"1\");\n-\n-        NA.setName(\"North America\");\n-        NA.setId(\"2\");\n-\n-        HONG_KONG.setIsoCode(\"HKG\");\n-        HONG_KONG.setName(\"Hong Kong\");\n-        HONG_KONG.setId(\"344\");\n-        HONG_KONG.setContinent(ASIA);\n-\n-        USA.setIsoCode(\"USA\");\n-        USA.setName(\"United States\");\n-        USA.setId(\"840\");\n-        USA.setContinent(NA);\n     }\n \n     public static void init() {\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8fdef02a7..99e5ce120 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -327,29 +67,24 @@ public abstract class SQLUnitTest {\n \n         metaDataStore.populateEntityDictionary(dictionary);\n \n-        engine = new SQLQueryEngine(metaDataStore, new ConnectionDetails(dataSource, sqlDialect));\n-\n-        TableId tableId = new TableId(\"playerStats\", \"\", \"\");\n-        playerStatsTable = engine.getTable(tableId);\n+        engine = new SQLQueryEngine(metaDataStore, emf, null);\n+        playerStatsTable = engine.getTable(\"playerStats\");\n \n-    }\n-\n-    public static void init() {\n-        init(SQLDialectFactory.getDefaultDialect());\n-    }\n+        ASIA.setName(\"Asia\");\n+        ASIA.setId(\"1\");\n \n-    public static void init(SQLDialect sqlDialect) {\n-        init(sqlDialect.getClass().getName());\n-    }\n+        NA.setName(\"North America\");\n+        NA.setId(\"2\");\n \n-    @BeforeEach\n-    public void begin() {\n-        transaction = engine.beginTransaction();\n-    }\n+        HONG_KONG.setIsoCode(\"HKG\");\n+        HONG_KONG.setName(\"Hong Kong\");\n+        HONG_KONG.setId(\"344\");\n+        HONG_KONG.setContinent(ASIA);\n \n-    @AfterEach\n-    public void end() {\n-        transaction.close();\n+        USA.setIsoCode(\"USA\");\n+        USA.setName(\"United States\");\n+        USA.setId(\"840\");\n+        USA.setContinent(NA);\n     }\n \n     public static ColumnProjection toProjection(Dimension dimension) {\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 99e5ce120..015663e95 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -87,6 +104,16 @@ public abstract class SQLUnitTest {\n         USA.setContinent(NA);\n     }\n \n+    @BeforeEach\n+    public void begin() {\n+        transaction = engine.beginTransaction();\n+    }\n+\n+    @AfterEach\n+    public void end() {\n+        transaction.close();\n+    }\n+\n     public static ColumnProjection toProjection(Dimension dimension) {\n         return engine.constructDimensionProjection(dimension, dimension.getName(), Collections.emptyMap());\n     }\n", "next_change": {"commit": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 015663e95..d3bae5dbb 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -122,7 +366,7 @@ public abstract class SQLUnitTest {\n         return engine.constructTimeDimensionProjection(\n                 dimension,\n                 dimension.getName(),\n-                Collections.singletonMap(\"grain\", Argument.builder().name(\"grain\").value(grain).build()));\n+                Collections.emptyMap());\n     }\n \n     public static MetricProjection invoke(Metric metric) {\n", "next_change": {"commit": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex d3bae5dbb..e34e1c0e1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -369,10 +351,6 @@ public abstract class SQLUnitTest {\n                 Collections.emptyMap());\n     }\n \n-    public static MetricProjection invoke(Metric metric) {\n-        return engine.constructMetricProjection(metric, metric.getName(), Collections.emptyMap());\n-    }\n-\n     protected static List<Object> toList(Iterable<Object> data) {\n         return StreamSupport.stream(data.spliterator(), false)\n                 .collect(Collectors.toList());\n", "next_change": {"commit": "b8a9ae644bff7db48b761d83cfac20821f8029e3", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex e34e1c0e1..d39a8f4da 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -344,13 +550,6 @@ public abstract class SQLUnitTest {\n         transaction.close();\n     }\n \n-    public static TimeDimensionProjection toProjection(TimeDimension dimension, TimeGrain grain) {\n-        return engine.constructTimeDimensionProjection(\n-                dimension,\n-                dimension.getName(),\n-                Collections.emptyMap());\n-    }\n-\n     protected static List<Object> toList(Iterable<Object> data) {\n         return StreamSupport.stream(data.spliterator(), false)\n                 .collect(Collectors.toList());\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "2987d912bf04babaef6ea9d6053583aefd4ebbf2", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Resolves #1566 (#1568)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "4aa0224dc1a0fa5588c637ea3b7e9e5f065ed69e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x Time grain WEEKDATE rename (#1596)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "6e346195b2bb1cbde4e790899c1854ad75e73f39", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cleaned SQL Generation Tests (#1603)"}, {"oid": "e2029731954a3773f367a8e1bf521db8f5f8f6ca", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor analytic time grains (#1608)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "6a0b27f36af3282db4474ce7e5e36adc1d4b91b2", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Postgres Dialect (#1679)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "47f08461f94a04cde2a4356f90fa1ae5a5386573", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Join Type support in aggregation store. (#1712)"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "6a8727709b4fec7d9aede978c11989a5cb8317ba", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Working build"}, {"oid": "b012115bd4753517196d4305d8002a96b3e76c57", "committedDate": "2021-01-25 10:59:22 -0600", "message": "add join expression for all column projection including metrics (#1789)"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "d1be9578498603d9b0f73161cc09555c5c34d3d6", "committedDate": "2021-02-09 13:40:20 -0600", "message": "Convert user provided alias before using in SQL (#1821)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "59f0c3cafed60c462b82e13e45cd0664afa7b7cf", "committedDate": "2021-02-23 11:09:48 -0600", "message": "Cleanup tests (#1856)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "a2c66e96df6239b1e545772308aaf4a9b50df80e", "committedDate": "2021-03-11 11:49:07 -0600", "message": "Parse Arguments from Filter Expression (#1877)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "737b4ee7d0791a757a496b21f60dd7e8d944f9a0", "committedDate": "2021-04-08 09:24:22 -0500", "message": "Phase 8 of Aggregation Store Optimizer: Adding more tests (#1984)"}, {"oid": "0c9fff2684f6bff02222fd36c9b12a686ee655ef", "committedDate": "2021-04-26 09:59:59 -0500", "message": "ClassType.of (#2027)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "b8a9ae644bff7db48b761d83cfac20821f8029e3", "committedDate": "2021-05-11 16:27:16 -0500", "message": "Context for partially resolving expressions (#2068)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "20cccc1e7386d25e7f112e912822afdfc612e79a", "committedDate": "2021-05-14 13:57:01 -0400", "message": "Validate required arguments (#2092)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "9a4849d738692723c45dda410587b3e8c1be897a", "committedDate": "2022-01-04 15:36:49 -0600", "message": "Bump h2 from 1.4.200 to 2.0.202 (#2427)"}, {"oid": "4c9bff306e4d0d0f9644c705a241edc7104cc1fe", "committedDate": "2022-01-19 11:38:10 -0600", "message": "Bump h2 from 2.0.202 to 2.0.206 (#2476)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "a6e6995ad7b3a7571ad3120f76924e9b83009ca7", "committedDate": "2023-04-16 16:45:08 -0500", "message": "Adds Spring Boot 3 Native Image support (#2939)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NDM0MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487144340", "body": "Why are we doing this here?  I don't think we want AggregationDataStore to know about its subclasses.", "bodyText": "Why are we doing this here?  I don't think we want AggregationDataStore to know about its subclasses.", "bodyHTML": "<p dir=\"auto\">Why are we doing this here?  I don't think we want AggregationDataStore to know about its subclasses.</p>", "author": "aklish", "createdAt": "2020-09-11T16:06:42Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -63,6 +65,9 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {", "originalCommit": "a9c968d8f1496f42508f6faeed562104aafa97c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMjQwOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488812408", "bodyText": "reverted.", "author": "rishi-aga", "createdAt": "2020-09-15T16:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NDM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 7a65a0119..a12f9bb3f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -65,9 +63,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {\n-            return new SQLAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n-        }\n-        throw new IllegalStateException(\"Unknown type of Query Engine\");\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a12f9bb3f..7a65a0119 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -63,6 +65,9 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {\n+            return new SQLAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        }\n+        throw new IllegalStateException(\"Unknown type of Query Engine\");\n     }\n }\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 7a65a0119..a12f9bb3f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -65,9 +63,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {\n-            return new SQLAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n-        }\n-        throw new IllegalStateException(\"Unknown type of Query Engine\");\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 7a65a0119..a12f9bb3f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -65,9 +63,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {\n-            return new SQLAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n-        }\n-        throw new IllegalStateException(\"Unknown type of Query Engine\");\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a12f9bb3f..12de28098 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -59,10 +61,20 @@ public class AggregationDataStore implements DataStore {\n             ClassScanner.getAnnotatedClasses(annotation)\n                     .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n         }\n+\n+        /* Add 'grain' argument to each TimeDimensionColumn */\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(Table.class)) {\n+            for (TimeDimension timeDim : table.getColumns(TimeDimension.class)) {\n+                dictionary.addArgumentToAttribute(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        timeDim.getName(),\n+                        new ArgumentType(\"grain\", String.class));\n+            }\n+        }\n     }\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        return new AggregationDataStoreTransaction(queryEngine);\n     }\n }\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 12de28098..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -75,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..098b52525 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +76,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 098b52525..a12f9bb3f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,16 +59,6 @@ public class AggregationDataStore implements DataStore {\n             ClassScanner.getAnnotatedClasses(annotation)\n                     .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n         }\n-\n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(Table.class)) {\n-            for (TimeDimension timeDim : table.getColumns(TimeDimension.class)) {\n-                dictionary.addArgumentToAttribute(\n-                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n-                        timeDim.getName(),\n-                        new ArgumentType(\"grain\", String.class));\n-            }\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "c9fb3b958d0067572de7a276ce491016a9f231d6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a12f9bb3f..1b33c3972 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -54,11 +53,9 @@ public class AggregationDataStore implements DataStore {\n                     Collections.singleton(Join.class)));\n         }\n \n-        for (Class<? extends Annotation> annotation : AGGREGATION_STORE_CLASSES) {\n-            // bind non-jpa entity tables\n-            ClassScanner.getAnnotatedClasses(annotation)\n-                    .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n-        }\n+        ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n+        );\n     }\n \n     @Override\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 1b33c3972..9d0f4f4f9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -49,12 +50,12 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n-                    Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n+                            Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n         );\n     }\n \n", "next_change": {"commit": "11b3c4311c36f5ea792d08137866c067964851eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 9d0f4f4f9..e26334f83 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -50,8 +51,8 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n-                            Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n+                    Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n", "next_change": {"commit": "de9883d363ba8b4171be5d8ad508564664f6fc90", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e26334f83..2a313aa23 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -56,7 +55,7 @@ public class AggregationDataStore implements DataStore {\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n     }\n \n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 2a313aa23..142d5003b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -57,6 +61,16 @@ public class AggregationDataStore implements DataStore {\n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n+\n+        /* Add 'grain' argument to each TimeDimensionColumn */\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+            for (TimeDimension timeDim : table.getTimeDimensions()) {\n+                dictionary.addArgumentToAttribute(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        timeDim.getName(),\n+                        new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n+            }\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "6b9fe00b85461bb3ad17310348cec20ad411512d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 142d5003b..bb5b2e0b5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,14 +65,31 @@ public class AggregationDataStore implements DataStore {\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(ClassType.of(Table.class))) {\n+            /* Add 'grain' argument to each TimeDimensionColumn */\n             for (TimeDimension timeDim : table.getTimeDimensions()) {\n                 dictionary.addArgumentToAttribute(\n                         dictionary.getEntityClass(table.getName(), table.getVersion()),\n                         timeDim.getName(),\n                         new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n             }\n+\n+            /* Add argument to each Column */\n+            for (Column col : table.getColumns()) {\n+                for (Argument arg : col.getArguments()) {\n+                    dictionary.addArgumentToAttribute(\n+                            dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                            col.getName(),\n+                            new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+                }\n+            }\n+\n+            /* Add argument to each Table */\n+            for (Argument arg : table.getArguments()) {\n+                dictionary.addArgumentToEntity(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+            }\n         }\n     }\n \n", "next_change": {"commit": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex bb5b2e0b5..ce1f14160 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -97,4 +114,56 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n+\n+    /**\n+     * Validates The security Check expression type for both Table and all its fields.\n+     * Table Security Check Condition - User Checks and Filter Expression Checks\n+     * Field Security Check Condition - User Checks\n+     * @param dictionary - Entity Dictionary\n+     * @param clz - Model Type.\n+     */\n+    private void validateModelExpressionChecks(EntityDictionary dictionary, Type<?> clz) {\n+        PermissionExpressionVisitor visitor = new PermissionExpressionVisitor();\n+        ParseTree parseTree = dictionary.getPermissionsForClass(clz, ReadPermission.class);\n+        if (parseTree != null) {\n+            validateExpression(dictionary,\n+                    visitor.visit(parseTree),\n+                    (checkClass) -> UserCheck.class.isAssignableFrom(checkClass)\n+                            || FilterExpressionCheck.class.isAssignableFrom(checkClass),\n+                    \"Table Can only have User Check and Filter Expression Check.\"\n+                    + \"Operation Checks Not allowed. given - %s\");\n+        }\n+\n+        dictionary.getAllFields(clz).stream()\n+                .map(field -> dictionary.getPermissionsForField(clz, field, ReadPermission.class))\n+                .filter(Objects::nonNull)\n+                .forEach(tree ->\n+                        validateExpression(dictionary,\n+                                visitor.visit(tree),\n+                                (checkClass) -> UserCheck.class.isAssignableFrom(checkClass),\n+                                \"Fields Can only have User checks. Given - %s\"));\n+    }\n+\n+    /**\n+     * Validates the Expression Check class to check whether it complies with the given predicate\n+     * @param dictionary - Entity dictionary\n+     * @param expressionChecksIdentifiers - Set of identifiers for whose the security check class is validated\n+     * @param validCheckPredicate - Predicate that takes security check class as argument.\n+     * @param errorMsgFormat - Error message format for the exception when predicate fails.\n+     * @throws IllegalStateException\n+     */\n+    private void validateExpression(EntityDictionary dictionary,\n+                                    Set<String> expressionChecksIdentifiers,\n+                                    Predicate<Class> validCheckPredicate,\n+                                    String errorMsgFormat) throws IllegalStateException {\n+        expressionChecksIdentifiers.stream()\n+                .filter(check -> dictionary.getRoleCheck(check) == null)  // skip all role checks\n+                .forEach(check -> {\n+                    Class<? extends Check> checkClass = dictionary.getCheck(check);\n+                    if (!validCheckPredicate.test(checkClass)) {\n+                        throw new IllegalStateException(String.format(errorMsgFormat,\n+                                \"(\" + check + \"-\" + checkClass + \")\"));\n+                    }\n+                });\n+    }\n }\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ce1f14160..3fa211272 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -166,4 +166,14 @@ public class AggregationDataStore implements DataStore {\n                     }\n                 });\n     }\n+\n+    /**\n+     * Determines if a model is managed by the aggregation data store.\n+     * @param model The model in question.\n+     * @return True if the model is managed by the aggregation data store.  False otherwise.\n+     */\n+    public static final boolean isAggregationStoreModel(Type<?> model) {\n+        return AGGREGATION_STORE_CLASSES.stream()\n+                .anyMatch((annotation) -> model.getDeclaredAnnotation(annotation) != null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c9fb3b958d0067572de7a276ce491016a9f231d6", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Reduce class scans (#1704)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "6b9fe00b85461bb3ad17310348cec20ad411512d", "committedDate": "2021-03-25 14:02:17 -0500", "message": "Parameterized Metrics: Aggregation Store Model Changes Set 2 (#1957)"}, {"oid": "21b4c5a728a2fd55339282b1e13bfb02cf26c875", "committedDate": "2021-05-05 16:53:26 -0500", "message": "get permission executor from datastore for each model that it manages. (#2070)"}, {"oid": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "committedDate": "2021-05-17 09:38:24 -0500", "message": "add validation for security checks in agg model table, namespace and fields (#2088)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "06fbda9b30433d71d45e62ceab5727246c59b904", "committedDate": "2021-05-18 14:58:40 -0500", "message": "use AggregationStorePermissionExecutor for Aggregation Store Model (#2102)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NzQ1MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487147450", "body": "What does this do?", "bodyText": "What does this do?", "bodyHTML": "<p dir=\"auto\">What does this do?</p>", "author": "aklish", "createdAt": "2020-09-11T16:12:23Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -255,6 +260,7 @@ public void loadObjectsExceptionThrownTest() throws Exception {\n     }\n \n     @Test\n+    @MockitoSettings(strictness = Strictness.LENIENT)", "originalCommit": "a9c968d8f1496f42508f6faeed562104aafa97c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNDU2MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488814561", "bodyText": "reverted it, no longer required after after reverting the changes to base class. Earlier I was getting this error: Unnecessary stubbings detected. Please remove unnecessary stubbings or use 'lenient' strictness.", "author": "rishi-aga", "createdAt": "2020-09-15T16:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NzQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee..38be16031 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -260,7 +257,6 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n-    @MockitoSettings(strictness = Strictness.LENIENT)\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 38be16031..509600f16 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -257,6 +259,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n+    @Tag(\"SkipBeforeEach\")\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16..7420c9fee 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -259,7 +260,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n-    @Tag(\"SkipBeforeEach\")\n+    @MockitoSettings(strictness = Strictness.LENIENT)\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee..38be16031 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -260,7 +257,6 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n-    @MockitoSettings(strictness = Strictness.LENIENT)\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee..4b57cffa4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -260,7 +256,6 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n-    @MockitoSettings(strictness = Strictness.LENIENT)\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 4b57cffa4..dcc2a7c77 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -164,103 +120,32 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         Mockito.verify(queryEngine, never()).executeQuery(any(), any());\n         Mockito.verify(cache).get(cacheKey);\n         Mockito.verifyNoMoreInteractions(cache);\n-        Mockito.verify(queryLogger, times(1)).acceptQuery(\n-                Mockito.eq(scope.getRequestId()),\n-                any(), any(), any(), any(), any());\n-        Mockito.verify(queryLogger, times(1)).processQuery(\n-                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(true));\n-        Mockito.verify(queryLogger, times(1)).completeQuery(\n-                Mockito.eq(scope.getRequestId()), any());\n     }\n \n     @Test\n     public void loadObjectsNoTableVersion() {\n-        Mockito.reset(queryLogger);\n-\n-        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n-                .fromClause(query.getTable().getName())\n-                .projectionClause(\" \").build();\n         when(queryEngine.executeQuery(query, qeTransaction))\n                 .thenReturn(QueryResult.builder().data(Collections.emptyList()).build());\n-        when(queryEngine.explain(query)).thenReturn(Arrays.asList(myQuery.toString()));\n-        AggregationDataStoreTransaction transaction =\n-                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         transaction.loadObjects(entityProjection, scope);\n \n         Mockito.verifyNoInteractions(cache);\n-        Mockito.verify(queryLogger, times(1)).acceptQuery(\n-                Mockito.eq(scope.getRequestId()),\n-                any(), any(), any(), any(), any());\n-        Mockito.verify(queryLogger, times(1)).processQuery(\n-                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(false));\n-        Mockito.verify(queryLogger, times(1)).completeQuery(\n-                Mockito.eq(scope.getRequestId()), any());\n     }\n \n     @Test\n     public void loadObjectsBypassCache() {\n-        Mockito.reset(queryLogger);\n-\n         query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n-        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n-                .fromClause(query.getTable().getName())\n-                .projectionClause(\" \").build();\n \n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n-        when(queryEngine.explain(query)).thenReturn(Arrays.asList(myQuery.toString()));\n-        AggregationDataStoreTransaction transaction =\n-                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n \n         Mockito.verify(queryEngine, never()).getTableVersion(any(), any());\n         Mockito.verifyNoInteractions(cache);\n-        Mockito.verify(queryLogger, times(1)).acceptQuery(\n-                Mockito.eq(scope.getRequestId()),\n-                any(), any(), any(), any(), any());\n-        Mockito.verify(queryLogger, times(1)).processQuery(\n-                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(false));\n-        Mockito.verify(queryLogger, times(1)).completeQuery(\n-                Mockito.eq(scope.getRequestId()), any());\n-    }\n-\n-    @Test\n-    public void loadObjectsExceptionThrownTest() throws Exception {\n-        Mockito.reset(queryLogger);\n-        String nullPointerExceptionMessage = \"Cannot dereference an object with value Null\";\n-        try {\n-            query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n-            doThrow(new NullPointerException(nullPointerExceptionMessage))\n-                    .when(queryEngine).executeQuery(query, qeTransaction);\n-            AggregationDataStoreTransaction transaction =\n-                    new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n-            EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n-            transaction.loadObjects(entityProjection, scope);\n-        } catch (Exception e) {\n-                assertEquals(nullPointerExceptionMessage, e.getMessage());\n-                Mockito.verify(queryLogger).completeQuery(Mockito.eq(scope.getRequestId()),\n-                    argThat((QueryResponse qResponse) -> qResponse.getErrorMessage() == e.getMessage()));\n-        }\n-\n-        Mockito.verify(queryLogger, times(1)).acceptQuery(\n-                Mockito.eq(scope.getRequestId()),\n-                any(), any(), any(), any(), any());\n-        Mockito.verify(queryLogger, times(1)).processQuery(\n-                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(false));\n-        Mockito.verify(queryLogger, times(1)).completeQuery(\n-                Mockito.eq(scope.getRequestId()), any());\n-    }\n-\n-    @Test\n-    public void aggregationQueryLoggerCancelQueryTest() {\n-        Mockito.reset(queryLogger);\n-        AggregationDataStoreTransaction transaction =\n-                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n-        transaction.cancel(scope);\n-        Mockito.verify(queryLogger, times(1)).cancelQuery(Mockito.eq(scope.getRequestId()));\n     }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex dcc2a7c77..e25e3dcf3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -120,32 +162,103 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         Mockito.verify(queryEngine, never()).executeQuery(any(), any());\n         Mockito.verify(cache).get(cacheKey);\n         Mockito.verifyNoMoreInteractions(cache);\n+        Mockito.verify(queryLogger, times(1)).acceptQuery(\n+                Mockito.eq(scope.getRequestId()),\n+                any(), any(), any(), any(), any());\n+        Mockito.verify(queryLogger, times(1)).processQuery(\n+                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(true));\n+        Mockito.verify(queryLogger, times(1)).completeQuery(\n+                Mockito.eq(scope.getRequestId()), any());\n     }\n \n     @Test\n     public void loadObjectsNoTableVersion() {\n+        Mockito.reset(queryLogger);\n+\n+        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                .fromClause(query.getTable().getName())\n+                .projectionClause(\" \").build();\n         when(queryEngine.executeQuery(query, qeTransaction))\n                 .thenReturn(QueryResult.builder().data(Collections.emptyList()).build());\n-        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        AggregationDataStoreTransaction transaction =\n+                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         transaction.loadObjects(entityProjection, scope);\n \n         Mockito.verifyNoInteractions(cache);\n+        Mockito.verify(queryLogger, times(1)).acceptQuery(\n+                Mockito.eq(scope.getRequestId()),\n+                any(), any(), any(), any(), any());\n+        Mockito.verify(queryLogger, times(1)).processQuery(\n+                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(false));\n+        Mockito.verify(queryLogger, times(1)).completeQuery(\n+                Mockito.eq(scope.getRequestId()), any());\n     }\n \n     @Test\n     public void loadObjectsBypassCache() {\n+        Mockito.reset(queryLogger);\n+\n         query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n+        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                .fromClause(query.getTable().getName())\n+                .projectionClause(\" \").build();\n \n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n-        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        AggregationDataStoreTransaction transaction =\n+                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n \n         Mockito.verify(queryEngine, never()).getTableVersion(any(), any());\n         Mockito.verifyNoInteractions(cache);\n+        Mockito.verify(queryLogger, times(1)).acceptQuery(\n+                Mockito.eq(scope.getRequestId()),\n+                any(), any(), any(), any(), any());\n+        Mockito.verify(queryLogger, times(1)).processQuery(\n+                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(false));\n+        Mockito.verify(queryLogger, times(1)).completeQuery(\n+                Mockito.eq(scope.getRequestId()), any());\n+    }\n+\n+    @Test\n+    public void loadObjectsExceptionThrownTest() throws Exception {\n+        Mockito.reset(queryLogger);\n+        String nullPointerExceptionMessage = \"Cannot dereference an object with value Null\";\n+        try {\n+            query = Query.builder().table(playerStatsTable).bypassingCache(true).build();\n+            doThrow(new NullPointerException(nullPointerExceptionMessage))\n+                    .when(queryEngine).executeQuery(query, qeTransaction);\n+            AggregationDataStoreTransaction transaction =\n+                    new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+            EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n+            transaction.loadObjects(entityProjection, scope);\n+        } catch (Exception e) {\n+                assertEquals(nullPointerExceptionMessage, e.getMessage());\n+                Mockito.verify(queryLogger).completeQuery(Mockito.eq(scope.getRequestId()),\n+                    argThat((QueryResponse qResponse) -> qResponse.getErrorMessage() == e.getMessage()));\n+        }\n+\n+        Mockito.verify(queryLogger, times(1)).acceptQuery(\n+                Mockito.eq(scope.getRequestId()),\n+                any(), any(), any(), any(), any());\n+        Mockito.verify(queryLogger, times(1)).processQuery(\n+                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(false));\n+        Mockito.verify(queryLogger, times(1)).completeQuery(\n+                Mockito.eq(scope.getRequestId()), any());\n+    }\n+\n+    @Test\n+    public void aggregationQueryLoggerCancelQueryTest() {\n+        Mockito.reset(queryLogger);\n+        AggregationDataStoreTransaction transaction =\n+                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        transaction.cancel(scope);\n+        Mockito.verify(queryLogger, times(1)).cancelQuery(Mockito.eq(scope.getRequestId()));\n     }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "cc0dffc51428b5b9ee255896169de91c69af0314", "committedDate": "2021-09-13 14:27:56 -0500", "message": "AggregationStore: Templated filter column arguments (#2297)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"oid": "4a6ebd4628c5c937e91081de9405ab861f97e366", "url": "https://github.com/yahoo/elide/commit/4a6ebd4628c5c937e91081de9405ab861f97e366", "message": "Rebased and fix MetaDataStoreIntegrationTest", "committedDate": "2020-09-11T21:55:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NDIwMg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488874202", "body": "May be the dialect should be renamed to PrestoDB dialect to highlight the fact that we have 2 flavors of Presto? ", "bodyText": "May be the dialect should be renamed to PrestoDB dialect to highlight the fact that we have 2 flavors of Presto?", "bodyHTML": "<p dir=\"auto\">May be the dialect should be renamed to PrestoDB dialect to highlight the fact that we have 2 flavors of Presto?</p>", "author": "moizarafat", "createdAt": "2020-09-15T18:23:48Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java", "diffHunk": "@@ -20,4 +20,10 @@ public String getDialectType() {\n     public boolean useAliasForOrderByClause() {\n         return true;\n     }\n+\n+    @Override\n+    public String appendOffsetLimit(String sql, int offset, int limit) {\n+        // offset is supported in prestosql but not in prestodb", "originalCommit": "ee7efe7046771fdab838716f7f2289b3b14d0c5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3Mzc4OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489073789", "bodyText": "renamed to PrestoDB", "author": "rishi-aga", "createdAt": "2020-09-15T23:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NDIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\nindex 9f67538d0..f4426014d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n", "chunk": "@@ -24,6 +24,6 @@ public class PrestoDialect extends AbstractSqlDialect {\n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n         // offset is supported in prestosql but not in prestodb\n-        return sql + LIMIT + limit;\n+        return sql + \" LIMIT \" + limit;\n     }\n }\n", "next_change": {"commit": "664ed6b057089f2015af078948af6d6d7d7a2a58", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\nindex f4426014d..9f67538d0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n", "chunk": "@@ -24,6 +24,6 @@ public class PrestoDialect extends AbstractSqlDialect {\n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n         // offset is supported in prestosql but not in prestodb\n-        return sql + \" LIMIT \" + limit;\n+        return sql + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\nsimilarity index 72%\nrename from elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\nrename to elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\nindex 9f67538d0..59fac0b42 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\n", "chunk": "@@ -22,8 +22,8 @@ public class PrestoDialect extends AbstractSqlDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n+    public String appendOffsetLimit(int offset, int limit) {\n         // offset is supported in prestosql but not in prestodb\n-        return sql + LIMIT + limit;\n+        return LIMIT + limit;\n     }\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\nsimilarity index 72%\nrename from elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\nrename to elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\nindex 9f67538d0..f2a9d3c42 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\n", "chunk": "@@ -22,8 +22,8 @@ public class PrestoDialect extends AbstractSqlDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n+    public String generateOffsetLimitClause(int offset, int limit) {\n         // offset is supported in prestosql but not in prestodb\n-        return sql + LIMIT + limit;\n+        return LIMIT + limit;\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "2a9f6d4e8fa5fb35d46af564c61b6528197828f3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "use alias for order by (#1515)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMzkxMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488903910", "body": "instead of asking user to put new/duplicate `dialect` property can we use from the JPAProperties? ", "bodyText": "instead of asking user to put new/duplicate dialect property can we use from the JPAProperties?", "bodyHTML": "<p dir=\"auto\">instead of asking user to put new/duplicate <code>dialect</code> property can we use from the JPAProperties?</p>", "author": "moizarafat", "createdAt": "2020-09-15T19:09:37Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -64,28 +69,49 @@\n     @Autowired(required = false)\n     private MeterRegistry meterRegistry;\n \n+    @Value(\"${spring.dialect}\")", "originalCommit": "ee7efe7046771fdab838716f7f2289b3b14d0c5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3Njc1MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488976751", "bodyText": "The dialects are different classes though.  I think the spring dialect is a JPA dialect, whereas our default dialect is an Elide concept.  I'm not sure we can do this.", "author": "aklish", "createdAt": "2020-09-15T21:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMzkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3MzcwNw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489073707", "bodyText": "added default-dialect property to elide.aggregation-store", "author": "rishi-aga", "createdAt": "2020-09-15T23:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMzkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba088..358307c09 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -69,49 +64,28 @@ public class ElideAutoConfiguration {\n     @Autowired(required = false)\n     private MeterRegistry meterRegistry;\n \n-    @Value(\"${spring.dialect}\")\n-    private String defaultDialect;\n-\n-    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n     /**\n      * Creates a entity compiler for compiling dynamic config classes.\n      * @param settings Config Settings.\n-     * @param dbPasswordExtractor : Password Extractor Implementation.\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n+\n+    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings,\n-                    DBPasswordExtractor dbPasswordExtractor) throws Exception {\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n \n         ElideDynamicEntityCompiler compiler = null;\n \n         if (isDynamicConfigEnabled(settings)) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath(), dbPasswordExtractor);\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n         }\n         return compiler;\n     }\n \n-    /**\n-     * Creates the default Password Extractor Implementation.\n-     * @return An instance of DBPasswordExtractor.\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public DBPasswordExtractor getDBPasswordExtractor() {\n-\n-        return new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        };\n-    }\n-\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 358307c09..88c766893 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -64,28 +69,48 @@ public class ElideAutoConfiguration {\n     @Autowired(required = false)\n     private MeterRegistry meterRegistry;\n \n+    @Value(\"${spring.dialect}\")\n+    private String defaultDialect;\n+\n+    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     /**\n      * Creates a entity compiler for compiling dynamic config classes.\n      * @param settings Config Settings.\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n-\n-    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings,\n+                    DBPasswordExtractor dbPasswordExtractor) throws Exception {\n \n         ElideDynamicEntityCompiler compiler = null;\n \n         if (isDynamicConfigEnabled(settings)) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath(), dbPasswordExtractor);\n         }\n         return compiler;\n     }\n \n+    /**\n+     * Creates the default Password Extractor Implementation.\n+     * @return An instance of DBPasswordExtractor.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public DBPasswordExtractor getDBPasswordExtractor() {\n+\n+        return new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba088..bb259e966 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -69,9 +69,6 @@ public class ElideAutoConfiguration {\n     @Autowired(required = false)\n     private MeterRegistry meterRegistry;\n \n-    @Value(\"${spring.dialect}\")\n-    private String defaultDialect;\n-\n     private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bb259e966..102e34fbf 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -66,49 +50,24 @@ import javax.sql.DataSource;\n @Slf4j\n public class ElideAutoConfiguration {\n \n-    @Autowired(required = false)\n-    private MeterRegistry meterRegistry;\n-\n-    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n     /**\n      * Creates a entity compiler for compiling dynamic config classes.\n      * @param settings Config Settings.\n-     * @param dbPasswordExtractor : Password Extractor Implementation.\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings,\n-                    DBPasswordExtractor dbPasswordExtractor) throws Exception {\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n \n         ElideDynamicEntityCompiler compiler = null;\n \n-        if (isDynamicConfigEnabled(settings)) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath(), dbPasswordExtractor);\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n         }\n         return compiler;\n     }\n \n-    /**\n-     * Creates the default Password Extractor Implementation.\n-     * @return An instance of DBPasswordExtractor.\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public DBPasswordExtractor getDBPasswordExtractor() {\n-\n-        return new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        };\n-    }\n-\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 102e34fbf..bb259e966 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -50,24 +66,49 @@ import javax.persistence.EntityManagerFactory;\n @Slf4j\n public class ElideAutoConfiguration {\n \n+    @Autowired(required = false)\n+    private MeterRegistry meterRegistry;\n+\n+    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     /**\n      * Creates a entity compiler for compiling dynamic config classes.\n      * @param settings Config Settings.\n+     * @param dbPasswordExtractor : Password Extractor Implementation.\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings,\n+                    DBPasswordExtractor dbPasswordExtractor) throws Exception {\n \n         ElideDynamicEntityCompiler compiler = null;\n \n-        if (settings.getDynamicConfig().isEnabled()) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+        if (isDynamicConfigEnabled(settings)) {\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath(), dbPasswordExtractor);\n         }\n         return compiler;\n     }\n \n+    /**\n+     * Creates the default Password Extractor Implementation.\n+     * @return An instance of DBPasswordExtractor.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public DBPasswordExtractor getDBPasswordExtractor() {\n+\n+        return new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bb259e966..11d4054e0 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -109,6 +109,18 @@ public class ElideAutoConfiguration {\n         };\n     }\n \n+    /**\n+     * Provides the default Hikari DataSource Configuration.\n+     * @return An instance of DataSourceConfiguration.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public DataSourceConfiguration getDataSourceConfiguration() {\n+        return new DataSourceConfiguration() {\n+        };\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "c38eb980af7f953202cb53faaed14595d3709ed9", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 11d4054e0..5ef33d35f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -125,41 +152,124 @@ public class ElideAutoConfiguration {\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n      * @param dataStore The persistence store.\n+     * @param transactionRegistry Global transaction registry.\n      * @param settings Elide settings.\n      * @return A new elide instance.\n      */\n     @Bean\n+    @RefreshScope\n     @ConditionalOnMissingBean\n-    public Elide initializeElide(EntityDictionary dictionary,\n-            DataStore dataStore, ElideConfigProperties settings) {\n+    public RefreshableElide getRefreshableElide(EntityDictionary dictionary,\n+                                                DataStore dataStore,\n+                                                TransactionRegistry transactionRegistry,\n+                                                ElideConfigProperties settings,\n+                                                JsonApiMapper mapper,\n+                                                ErrorMapper errorMapper) {\n \n         ElideSettingsBuilder builder = new ElideSettingsBuilder(dataStore)\n                 .withEntityDictionary(dictionary)\n+                .withErrorMapper(errorMapper)\n+                .withJsonApiMapper(mapper)\n                 .withDefaultMaxPageSize(settings.getMaxPageSize())\n                 .withDefaultPageSize(settings.getPageSize())\n-                .withJoinFilterDialect(new RSQLFilterDialect(dictionary))\n-                .withSubqueryFilterDialect(new RSQLFilterDialect(dictionary))\n+                .withJoinFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n+                .withSubqueryFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n                 .withAuditLogger(new Slf4jLogger())\n-                .withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"));\n+                .withBaseUrl(settings.getBaseUrl())\n+                .withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"))\n+                .withJsonApiPath(settings.getJsonApi().getPath())\n+                .withGraphQLApiPath(settings.getGraphql().getPath());\n+\n+        if (settings.isVerboseErrors()) {\n+            builder.withVerboseErrors();\n+        }\n+\n+        if (settings.getAsync() != null\n+                && settings.getAsync().getExport() != null\n+                && settings.getAsync().getExport().isEnabled()) {\n+            builder.withExportApiPath(settings.getAsync().getExport().getPath());\n+        }\n \n-        return new Elide(builder.build());\n+        if (settings.getJsonApi() != null\n+                && settings.getJsonApi().isEnabled()\n+                && settings.getJsonApi().isEnableLinks()) {\n+            String baseUrl = settings.getBaseUrl();\n+\n+            if (StringUtils.isEmpty(baseUrl)) {\n+                builder.withJSONApiLinks(new DefaultJSONApiLinks());\n+            } else {\n+                String jsonApiBaseUrl = baseUrl + settings.getJsonApi().getPath() + \"/\";\n+                builder.withJSONApiLinks(new DefaultJSONApiLinks(jsonApiBaseUrl));\n+            }\n+        }\n+\n+        Elide elide = new Elide(builder.build(), transactionRegistry, dictionary.getScanner(), true);\n+\n+        return new RefreshableElide(elide);\n+    }\n+\n+    @Bean\n+    @RefreshScope\n+    @ConditionalOnMissingBean\n+    public QueryRunners getQueryRunners(RefreshableElide refreshableElide) {\n+        return new QueryRunners(refreshableElide);\n+    }\n+\n+    /**\n+     * A Set containing Types to be excluded from EntityDictionary's EntityBinding.\n+     * @param settings Elide configuration settings.\n+     * @return Set of Types.\n+     */\n+    @Bean(name = \"entitiesToExclude\")\n+    @ConditionalOnMissingBean\n+    public Set<Type<?>> getEntitiesToExclude(ElideConfigProperties settings) {\n+        Set<Type<?>> entitiesToExclude = new HashSet<>();\n+\n+        AsyncProperties asyncProperties = settings.getAsync();\n+\n+        if (asyncProperties == null || !asyncProperties.isEnabled()) {\n+            entitiesToExclude.add(ClassType.of(AsyncQuery.class));\n+        }\n+\n+        boolean exportEnabled = isExportEnabled(asyncProperties);\n+\n+        if (!exportEnabled) {\n+            entitiesToExclude.add(ClassType.of(TableExport.class));\n+        }\n+\n+        return entitiesToExclude;\n     }\n \n     /**\n      * Creates the entity dictionary for Elide which contains static metadata about Elide models.\n      * Override to load check classes or life cycle hooks.\n      * @param beanFactory Injector to inject Elide models.\n-     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n+     * @param dynamicConfig An instance of DynamicConfiguration.\n      * @param settings Elide configuration settings.\n+     * @param entitiesToExclude set of Entities to exclude from binding.\n      * @return a newly configured EntityDictionary.\n-     * @throws ClassNotFoundException Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n+    @Scope(SCOPE_PROTOTYPE)\n     public EntityDictionary buildDictionary(AutowireCapableBeanFactory beanFactory,\n-            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n-        EntityDictionary dictionary = new EntityDictionary(new HashMap<>(),\n+                                            ClassScanner scanner,\n+                                            @Autowired(required = false) DynamicConfiguration dynamicConfig,\n+                                            ElideConfigProperties settings,\n+                                            @Qualifier(\"entitiesToExclude\") Set<Type<?>> entitiesToExclude) {\n+\n+        Map<String, Class<? extends Check>> checks = new HashMap<>();\n+\n+        if (settings.getDynamicConfig().isConfigApiEnabled()) {\n+            checks.put(ConfigChecks.CAN_CREATE_CONFIG, ConfigChecks.CanNotCreate.class);\n+            checks.put(ConfigChecks.CAN_READ_CONFIG, ConfigChecks.CanNotRead.class);\n+            checks.put(ConfigChecks.CAN_DELETE_CONFIG, ConfigChecks.CanNotDelete.class);\n+            checks.put(ConfigChecks.CAN_UPDATE_CONFIG, ConfigChecks.CanNotUpdate.class);\n+        }\n+\n+        EntityDictionary dictionary = new EntityDictionary(\n+                checks, //Checks\n+                new HashMap<>(), //Role Checks\n                 new Injector() {\n                     @Override\n                     public void inject(Object entity) {\n", "next_change": {"commit": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5ef33d35f..d32384a4b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -270,17 +313,7 @@ public class ElideAutoConfiguration {\n         EntityDictionary dictionary = new EntityDictionary(\n                 checks, //Checks\n                 new HashMap<>(), //Role Checks\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        beanFactory.autowireBean(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return beanFactory.createBean(cls);\n-                    }\n-                },\n+                injector,\n                 CoerceUtil::lookup, //Serde Lookup\n                 entitiesToExclude,\n                 scanner);\n", "next_change": {"commit": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex d32384a4b..8bba0b25d 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -319,9 +274,11 @@ public class ElideAutoConfiguration {\n                 scanner);\n \n         if (isAggregationStoreEnabled(settings) && isDynamicConfigEnabled(settings)) {\n-            dynamicConfig.getRoles().forEach(role -> {\n-                dictionary.addRoleCheck(role, new Role.RoleMemberCheck(role));\n-            });\n+            optionalDynamicConfig.ifPresent(dynamicConfig ->\n+                dynamicConfig.getRoles().forEach(role ->\n+                    dictionary.addRoleCheck(role, new Role.RoleMemberCheck(role))\n+                )\n+            );\n         }\n \n         return dictionary;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "b55b769236519aa81a171321c14ee0ac8315908f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async ID change from UUID to String and Dynamic Config FIx (#1325)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "9c8fe001d36753349ad1f7df83029e1c8d8edcac", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Multiplex Transaction Lazy Initialize and Dynamic Config fixes (#1383)"}, {"oid": "d31cff91c7452ae4b07bcc2006b70f15474b4198", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes for query cache spring integration (#1381)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "7dcb449ad9bf24c3c12601209803a0f05420e380", "committedDate": "2021-01-07 23:13:06 -0600", "message": "Only build swagger if the controller is activated"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "4641781684344dd25e47bdbe1a8aa6f28881d627", "committedDate": "2021-01-12 09:00:58 -0600", "message": "Added a new setting to Spring to enable/disable JSON-API links"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "b911028feb3655bb897041047caa7602f3f0c761", "committedDate": "2021-05-02 21:51:37 -0500", "message": "Add missing default values for ElideAutoConfiguration (#2052)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "abb32869ab0e97b8ceaa1bd61b53c579b4ca1c65", "committedDate": "2022-04-22 15:17:21 -0500", "message": "Header filtering config (#2627)"}, {"oid": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "committedDate": "2022-04-26 16:56:53 -0500", "message": "Add Injector Bean (#2637)"}, {"oid": "af3e1d9d64479e3ca0f5141bec8b906843d11248", "committedDate": "2022-05-05 21:14:51 -0500", "message": "Minimum to expose _service.sdl for Apollo federation. (#2640)"}, {"oid": "c0a0f0ad9a1a9bbb9938e3225f27b2d191b82e79", "committedDate": "2022-09-15 21:47:40 -0500", "message": "Only build query runner if graphQL is enabled (#2766)"}, {"oid": "f03aba8c1f854a9c0c286fad97c30d2fed5ffe08", "committedDate": "2022-09-22 18:59:56 -0500", "message": "Allow elide-graphql to be excluded when elide.graphql.enabled=false (#2787)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "119ea75d9ad68b27361326e9837ef1627afd3169", "committedDate": "2023-03-20 18:16:04 -0500", "message": "Fixes #2912 (#2931)"}, {"oid": "a6e6995ad7b3a7571ad3120f76924e9b83009ca7", "committedDate": "2023-04-16 16:45:08 -0500", "message": "Adds Spring Boot 3 Native Image support (#2939)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "e570df51218d29e6625a1d91c6f8d5b7f8642526", "committedDate": "2023-05-29 17:38:29 -0500", "message": "Add Atomic Operations Support (#2979)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}, {"oid": "855ab18b75a01ea145050f7424fbe93bec2ccb1f", "committedDate": "2023-06-04 10:15:22 -0500", "message": "Support multiple `JpaDataStore` (#2998)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwNjM4Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488906383", "body": "Instead of 2 return statements, We can have 1 return. In this block, we can populate the Map else the default Empty map is passed. ", "bodyText": "Instead of 2 return statements, We can have 1 return. In this block, we can populate the Map else the default Empty map is passed.", "bodyHTML": "<p dir=\"auto\">Instead of 2 return statements, We can have 1 return. In this block, we can populate the Map else the default Empty map is passed.</p>", "author": "moizarafat", "createdAt": "2020-09-15T19:14:20Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -159,18 +185,18 @@ public void inject(Object entity) {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n-        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,", "originalCommit": "ee7efe7046771fdab838716f7f2289b3b14d0c5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba088..358307c09 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -185,18 +159,18 @@ public class ElideAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n+        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n-                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n+            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n         } else {\n-            MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            metaDataStore = new MetaDataStore();\n         }\n+\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n     }\n \n     /**\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 358307c09..88c766893 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -159,18 +184,18 @@ public class ElideAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n-        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n-            metaDataStore = new MetaDataStore();\n+            MetaDataStore metaDataStore = new MetaDataStore();\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n         }\n-\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n     }\n \n     /**\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 88c766893..a20848f89 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -186,15 +184,17 @@ public class ElideAutoConfiguration {\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n+                    throws ClassNotFoundException {\n \n+        ConnectionDetails defaultConnectionDetails =\n+                        new ConnectionDetails(defaultDataSource, settings.getAggregationStore().getDefaultDialect());\n         if (isDynamicConfigEnabled(settings)) {\n             MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n                             dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n             MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba088..bb259e966 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -189,13 +186,15 @@ public class ElideAutoConfiguration {\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n+        ConnectionDetails defaultConnectionDetails =\n+                        new ConnectionDetails(defaultDataSource, settings.getAggregationStore().getDefaultDialect());\n         if (isDynamicConfigEnabled(settings)) {\n             MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n                             dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n             MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n         }\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bb259e966..102e34fbf 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -181,92 +140,52 @@ public class ElideAutoConfiguration {\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n-        ConnectionDetails defaultConnectionDetails =\n-                        new ConnectionDetails(defaultDataSource, settings.getAggregationStore().getDefaultDialect());\n-        if (isDynamicConfigEnabled(settings)) {\n-            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n-                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n+        MetaDataStore metaDataStore = null;\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n         } else {\n-            MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n+            metaDataStore = new MetaDataStore();\n         }\n+\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n     }\n \n     /**\n      * Creates the DataStore Elide.  Override to use a different store.\n      * @param entityManagerFactory The JPA factory which creates entity managers.\n      * @param queryEngine QueryEngine instance for aggregation data store.\n-     * @param compiler ElideDynamicEntityCompiler.\n+     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n      * @param settings Elide configuration settings.\n      * @return An instance of a JPA DataStore.\n      * @throws ClassNotFoundException Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    @Autowired(required = false) QueryEngine queryEngine,\n-                                    @Autowired(required = false) ElideDynamicEntityCompiler compiler,\n-                                    ElideConfigProperties settings,\n-                                    @Autowired(required = false) Cache cache,\n-                                    @Autowired(required = false) QueryLogger querylogger)\n+    public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n+        AggregationDataStore aggregationDataStore = null;\n \n-        JpaDataStore jpaDataStore = new JpaDataStore(entityManagerFactory::createEntityManager,\n-                                                     (em) -> { return new NonJtaTransaction(em, txCancel); });\n-\n-        if (isAggregationStoreEnabled(settings)) {\n-            AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder =\n-                            AggregationDataStore.builder().queryEngine(queryEngine);\n-            if (isDynamicConfigEnabled(settings)) {\n-                Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n-                annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n-            }\n-            aggregationDataStoreBuilder.cache(cache);\n-            aggregationDataStoreBuilder.queryLogger(querylogger);\n-            AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n-\n-            // meta data store needs to be put at first to populate meta data models\n-            return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n+            annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClass);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n         }\n \n-        return jpaDataStore;\n-    }\n+        JpaDataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                    (em -> { return new NonJtaTransaction(em); }));\n \n-    /**\n-     * Creates a query result cache to be used by {@link #buildDataStore}, or null if cache is to be disabled.\n-     * @param settings Elide configuration settings.\n-     * @return An instance of a query cache, or null.\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public Cache buildQueryCache(ElideConfigProperties settings) {\n-        CaffeineCache cache = null;\n-        if (settings.getQueryCacheMaximumEntries() > 0) {\n-            cache = new CaffeineCache(settings.getQueryCacheMaximumEntries());\n-            if (meterRegistry != null) {\n-                CaffeineCacheMetrics.monitor(meterRegistry, cache.getImplementation(), \"elideQueryCache\");\n-            }\n-        }\n-        return cache;\n-    }\n-\n-    /**\n-     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation.\n-     * @return The default Noop QueryLogger.\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryLogger buildQueryLogger() {\n-        return new NoopQueryLogger();\n+        // meta data store needs to be put at first to populate meta data models\n+        return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n     }\n \n     /**\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 102e34fbf..e0dcca581 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -169,20 +175,19 @@ public class ElideAutoConfiguration {\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n-        AggregationDataStore aggregationDataStore = null;\n-\n-        if (settings.getDynamicConfig().isEnabled()) {\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n+        if (isDynamicConfigEnabled(settings)) {\n             ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n             Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClass);\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(queryEngine);\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n         }\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em -> { return new NonJtaTransaction(em); }));\n+                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex e0dcca581..4d65a4e49 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -183,16 +191,34 @@ public class ElideAutoConfiguration {\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n             aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n         }\n+        aggregationDataStoreBuilder.cache(cache);\n         AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n-        JpaDataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n+        JpaDataStore jpaDataStore = new JpaDataStore(entityManagerFactory::createEntityManager,\n+                                                     (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n     }\n \n+    /**\n+     * Creates a query result cache to be used by {@link #buildDataStore}, or null if cache is to be disabled.\n+     * @param settings Elide configuration settings.\n+     * @return An instance of a query cache, or null.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public Cache buildQueryCache(ElideConfigProperties settings) {\n+        CaffeineCache cache = null;\n+        if (settings.getQueryCacheMaximumEntries() > 0) {\n+            cache = new CaffeineCache(settings.getQueryCacheMaximumEntries());\n+            if (meterRegistry != null) {\n+                CaffeineCacheMetrics.monitor(meterRegistry, cache.getImplementation(), \"elideQueryCache\");\n+            }\n+        }\n+        return cache;\n+    }\n+\n     /**\n      * Creates a singular swagger document for JSON-API.\n      * @param dictionary Contains the static metadata about Elide models.\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 4d65a4e49..e498edf4b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -219,6 +228,16 @@ public class ElideAutoConfiguration {\n         return cache;\n     }\n \n+    /**\n+     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation\n+     * @return The default Noop QueryLogger.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public QueryLogger buildQueryLogger() {\n+        return new NoopQueryLogger();\n+    }\n+\n     /**\n      * Creates a singular swagger document for JSON-API.\n      * @param dictionary Contains the static metadata about Elide models.\n", "next_change": {"commit": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex e498edf4b..fcf60bbf0 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -234,6 +239,7 @@ public class ElideAutoConfiguration {\n      */\n     @Bean\n     @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryLogger buildQueryLogger() {\n         return new NoopQueryLogger();\n     }\n", "next_change": {"commit": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex fcf60bbf0..72cad9375 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -234,14 +261,14 @@ public class ElideAutoConfiguration {\n     }\n \n     /**\n-     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation\n+     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation.\n      * @return The default Noop QueryLogger.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryLogger buildQueryLogger() {\n-        return new NoopQueryLogger();\n+        return new Slf4jQueryLogger();\n     }\n \n     /**\n", "next_change": {"commit": "c38eb980af7f953202cb53faaed14595d3709ed9", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 72cad9375..5ef33d35f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -273,22 +436,46 @@ public class ElideAutoConfiguration {\n \n     /**\n      * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models.\n+     * @param elide Singleton elide instance.\n      * @param settings Elide configuration settings.\n      * @return An instance of a JPA DataStore.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public Swagger buildSwagger(EntityDictionary dictionary, ElideConfigProperties settings) {\n+    @ConditionalOnProperty(name = \"elide.swagger.enabled\", havingValue = \"true\")\n+    @RefreshScope\n+    public SwaggerController.SwaggerRegistrations buildSwagger(\n+            RefreshableElide elide,\n+            ElideConfigProperties settings\n+    ) {\n+        EntityDictionary dictionary = elide.getElide().getElideSettings().getDictionary();\n         Info info = new Info()\n                 .title(settings.getSwagger().getName())\n                 .version(settings.getSwagger().getVersion());\n \n         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info).withLegacyFilterDialect(false);\n+        return new SwaggerController.SwaggerRegistrations(\n+                builder.build().basePath(settings.getJsonApi().getPath())\n+        );\n+    }\n \n-        Swagger swagger = builder.build().basePath(settings.getJsonApi().getPath());\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n \n-        return swagger;\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @Scope(SCOPE_PROTOTYPE)\n+    public JsonApiMapper mapper() {\n+        return new JsonApiMapper();\n     }\n \n     private boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n", "next_change": {"commit": "a6e6995ad7b3a7571ad3120f76924e9b83009ca7", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5ef33d35f..9b888e84c 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -478,6 +440,231 @@ public class ElideAutoConfiguration {\n         return new JsonApiMapper();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnExpression(\"${elide.async.enabled:false} && ${elide.async.export.enabled:false}\")\n+    public ExportController exportController(ResultStorageEngine resultStorageEngine) {\n+        return new ExportController(resultStorageEngine);\n+    }\n+\n+    @Configuration\n+    @ConditionalOnClass(RefreshScope.class)\n+    @ConditionalOnProperty(name = \"spring.cloud.refresh.enabled\", havingValue = \"true\", matchIfMissing = true)\n+    @Order(Ordered.LOWEST_PRECEDENCE - 1)\n+    public static class RefreshableConfiguration {\n+        /**\n+         * Creates the Elide instance with standard settings.\n+         * @param dictionary Stores the static metadata about Elide models.\n+         * @param dataStore The persistence store.\n+         * @param headerProcessor HTTP header function which is invoked for every request.\n+         * @param transactionRegistry Global transaction registry.\n+         * @param settings Elide settings.\n+         * @return A new elide instance.\n+         */\n+        @Bean\n+        @RefreshScope\n+        @ConditionalOnMissingBean\n+        public RefreshableElide refreshableElide(EntityDictionary dictionary, DataStore dataStore,\n+                HeaderUtils.HeaderProcessor headerProcessor, TransactionRegistry transactionRegistry,\n+                ElideConfigProperties settings, JsonApiMapper mapper, ErrorMapper errorMapper) {\n+            return buildRefreshableElide(dictionary, dataStore, headerProcessor, transactionRegistry, settings, mapper,\n+                    errorMapper);\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.json-api.enabled\", havingValue = \"true\")\n+        public static class JsonApiConfiguration {\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean(name = \"jsonApiController\")\n+            public JsonApiController jsonApiController(RefreshableElide refreshableElide,\n+                    ElideConfigProperties settings) {\n+                return new JsonApiController(refreshableElide, settings);\n+            }\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.swagger.enabled\", havingValue = \"true\")\n+        public static class SwaggerConfiguration {\n+            /**\n+             * Creates a singular swagger document for JSON-API.\n+             * @param elide Singleton elide instance.\n+             * @param settings Elide configuration settings.\n+             * @return An instance of a JPA DataStore.\n+             */\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean\n+            public SwaggerController.SwaggerRegistrations swaggerRegistrations(RefreshableElide elide,\n+                    ElideConfigProperties settings) {\n+                return buildSwaggerRegistrations(elide, settings);\n+            }\n+\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean(name = \"swaggerController\")\n+            public SwaggerController swaggerController(SwaggerController.SwaggerRegistrations docs) {\n+                return new SwaggerController(docs);\n+            }\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.graphql.enabled\", havingValue = \"true\")\n+        public static class GraphQLConfiguration {\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean\n+            public QueryRunners queryRunners(RefreshableElide refreshableElide,\n+                    DataFetcherExceptionHandler exceptionHandler) {\n+                return new QueryRunners(refreshableElide, exceptionHandler);\n+            }\n+\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean(name = \"graphqlController\")\n+            public GraphqlController graphqlController(QueryRunners runners, JsonApiMapper jsonApiMapper,\n+                    HeaderUtils.HeaderProcessor headerProcessor, ElideConfigProperties settings) {\n+                return new GraphqlController(runners, jsonApiMapper, headerProcessor, settings);\n+            }\n+        }\n+    }\n+\n+    @Configuration\n+    @ConditionalOnProperty(name = \"spring.cloud.refresh.enabled\", havingValue = \"false\", matchIfMissing = true)\n+    @Order(Ordered.LOWEST_PRECEDENCE)\n+    public static class NonRefreshableConfiguration {\n+        /**\n+         * Creates the Elide instance with standard settings.\n+         * @param dictionary Stores the static metadata about Elide models.\n+         * @param dataStore The persistence store.\n+         * @param headerProcessor HTTP header function which is invoked for every request.\n+         * @param transactionRegistry Global transaction registry.\n+         * @param settings Elide settings.\n+         * @return A new elide instance.\n+         */\n+        @Bean\n+        @ConditionalOnMissingBean\n+        public RefreshableElide refreshableElide(EntityDictionary dictionary, DataStore dataStore,\n+                HeaderUtils.HeaderProcessor headerProcessor, TransactionRegistry transactionRegistry,\n+                ElideConfigProperties settings, JsonApiMapper mapper, ErrorMapper errorMapper) {\n+            return buildRefreshableElide(dictionary, dataStore, headerProcessor, transactionRegistry, settings, mapper,\n+                    errorMapper);\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.json-api.enabled\", havingValue = \"true\")\n+        public static class JsonApiConfiguration {\n+            @Bean\n+            @ConditionalOnMissingBean(name = \"jsonApiController\")\n+            public JsonApiController jsonApiController(RefreshableElide refreshableElide,\n+                    ElideConfigProperties settings) {\n+                return new JsonApiController(refreshableElide, settings);\n+            }\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.swagger.enabled\", havingValue = \"true\")\n+        public static class SwaggerConfiguration {\n+            /**\n+             * Creates a singular swagger document for JSON-API.\n+             * @param elide Singleton elide instance.\n+             * @param settings Elide configuration settings.\n+             * @return An instance of a JPA DataStore.\n+             */\n+            @Bean\n+            @ConditionalOnMissingBean\n+            public SwaggerController.SwaggerRegistrations swaggerRegistrations(RefreshableElide elide,\n+                    ElideConfigProperties settings) {\n+                return buildSwaggerRegistrations(elide, settings);\n+            }\n+\n+            @Bean\n+            @ConditionalOnMissingBean(name = \"swaggerController\")\n+            public SwaggerController swaggerController(SwaggerController.SwaggerRegistrations docs) {\n+                return new SwaggerController(docs);\n+            }\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.graphql.enabled\", havingValue = \"true\")\n+        public static class GraphQLConfiguration {\n+            @Bean\n+            @ConditionalOnMissingBean\n+            public QueryRunners queryRunners(RefreshableElide refreshableElide,\n+                    DataFetcherExceptionHandler exceptionHandler) {\n+                return new QueryRunners(refreshableElide, exceptionHandler);\n+            }\n+\n+            @Bean\n+            @ConditionalOnMissingBean(name = \"graphqlController\")\n+            public GraphqlController graphqlController(QueryRunners runners, JsonApiMapper jsonApiMapper,\n+                    HeaderUtils.HeaderProcessor headerProcessor, ElideConfigProperties settings) {\n+                return new GraphqlController(runners, jsonApiMapper, headerProcessor, settings);\n+            }\n+        }\n+    }\n+\n+    public static RefreshableElide buildRefreshableElide(EntityDictionary dictionary, DataStore dataStore,\n+            HeaderUtils.HeaderProcessor headerProcessor, TransactionRegistry transactionRegistry,\n+            ElideConfigProperties settings, JsonApiMapper mapper, ErrorMapper errorMapper) {\n+\n+        ElideSettingsBuilder builder = new ElideSettingsBuilder(dataStore).withEntityDictionary(dictionary)\n+                .withErrorMapper(errorMapper).withJsonApiMapper(mapper)\n+                .withDefaultMaxPageSize(settings.getMaxPageSize()).withDefaultPageSize(settings.getPageSize())\n+                .withJoinFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n+                .withSubqueryFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n+                .withAuditLogger(new Slf4jLogger()).withBaseUrl(settings.getBaseUrl())\n+                .withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"))\n+                .withHeaderProcessor(headerProcessor);\n+\n+        if (settings.isVerboseErrors()) {\n+            builder.withVerboseErrors();\n+        }\n+\n+        if (settings.getAsync() != null && settings.getAsync().getExport() != null\n+                && settings.getAsync().getExport().isEnabled()) {\n+            builder.withExportApiPath(settings.getAsync().getExport().getPath());\n+        }\n+\n+        if (settings.getGraphql() != null && settings.getGraphql().isEnabled()) {\n+            builder.withGraphQLApiPath(settings.getGraphql().getPath());\n+\n+            if (settings.getGraphql().isEnableFederation()) {\n+                builder.withGraphQLFederation(true);\n+            }\n+        }\n+\n+        if (settings.getJsonApi() != null && settings.getJsonApi().isEnabled()) {\n+            builder.withJsonApiPath(settings.getJsonApi().getPath());\n+\n+            if (settings.getJsonApi().isEnableLinks()) {\n+                String baseUrl = settings.getBaseUrl();\n+\n+                if (StringUtils.isEmpty(baseUrl)) {\n+                    builder.withJSONApiLinks(new DefaultJSONApiLinks());\n+                } else {\n+                    String jsonApiBaseUrl = baseUrl + settings.getJsonApi().getPath() + \"/\";\n+                    builder.withJSONApiLinks(new DefaultJSONApiLinks(jsonApiBaseUrl));\n+                }\n+            }\n+        }\n+\n+        Elide elide = new Elide(builder.build(), transactionRegistry, dictionary.getScanner(), true);\n+\n+        return new RefreshableElide(elide);\n+    }\n+\n+    public static SwaggerController.SwaggerRegistrations buildSwaggerRegistrations(RefreshableElide elide,\n+            ElideConfigProperties settings) {\n+        String jsonApiPath = settings.getJsonApi() != null ? settings.getJsonApi().getPath() : null;\n+\n+        EntityDictionary dictionary = elide.getElide().getElideSettings().getDictionary();\n+        Info info = new Info().title(settings.getSwagger().getName()).version(settings.getSwagger().getVersion());\n+\n+        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info).withLegacyFilterDialect(false);\n+        return new SwaggerController.SwaggerRegistrations(builder.build().basePath(jsonApiPath));\n+    }\n+\n     private boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n \n         boolean enabled = false;\n", "next_change": {"commit": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 9b888e84c..8bba0b25d 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -665,7 +726,7 @@ public class ElideAutoConfiguration {\n         return new SwaggerController.SwaggerRegistrations(builder.build().basePath(jsonApiPath));\n     }\n \n-    private boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n+    public static boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n \n         boolean enabled = false;\n         if (settings.getDynamicConfig() != null) {\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 8bba0b25d..333838910 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -715,15 +760,33 @@ public class ElideAutoConfiguration {\n         return new RefreshableElide(elide);\n     }\n \n-    public static SwaggerController.SwaggerRegistrations buildSwaggerRegistrations(RefreshableElide elide,\n-            ElideConfigProperties settings) {\n+    public static ApiDocsController.ApiDocsRegistrations buildApiDocsRegistrations(RefreshableElide elide,\n+            ElideConfigProperties settings, OpenApiDocumentCustomizer customizer) {\n         String jsonApiPath = settings.getJsonApi() != null ? settings.getJsonApi().getPath() : null;\n \n         EntityDictionary dictionary = elide.getElide().getElideSettings().getDictionary();\n-        Info info = new Info().title(settings.getSwagger().getName()).version(settings.getSwagger().getVersion());\n \n-        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info).withLegacyFilterDialect(false);\n-        return new SwaggerController.SwaggerRegistrations(builder.build().basePath(jsonApiPath));\n+        List<ApiDocsRegistration> registrations = new ArrayList<>();\n+        dictionary.getApiVersions().stream().forEach(apiVersion -> {\n+            Supplier<OpenAPI> document = () -> {\n+                OpenApiBuilder builder = new OpenApiBuilder(dictionary).apiVersion(apiVersion)\n+                        .supportLegacyFilterDialect(false);\n+                OpenAPI openApi = builder.build();\n+                openApi.addServersItem(new Server().url(jsonApiPath));\n+                customizer.customize(openApi);\n+                if (!EntityDictionary.NO_VERSION.equals(apiVersion)) {\n+                    Info info = openApi.getInfo();\n+                    if (info == null) {\n+                        info = new Info();\n+                        openApi.setInfo(info);\n+                    }\n+                    info.setVersion(apiVersion);\n+                }\n+                return openApi;\n+            };\n+            registrations.add(new ApiDocsRegistration(\"\", SingletonSupplier.of(document),\n+                    settings.getApiDocs().getVersion().getValue(), apiVersion));        });\n+        return new ApiDocsController.ApiDocsRegistrations(registrations);\n     }\n \n     public static boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n", "next_change": {"commit": "30816cbe1496c349c05a778b105efa87ec51a7c2", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 333838910..0620d9f93 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -792,8 +808,8 @@ public class ElideAutoConfiguration {\n     public static boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n \n         boolean enabled = false;\n-        if (settings.getDynamicConfig() != null) {\n-            enabled = settings.getDynamicConfig().isEnabled();\n+        if (settings.getAggregationStore() != null && settings.getAggregationStore().getDynamicConfig() != null) {\n+            enabled = settings.getAggregationStore().getDynamicConfig().isEnabled();\n         }\n \n         return enabled;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "b55b769236519aa81a171321c14ee0ac8315908f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async ID change from UUID to String and Dynamic Config FIx (#1325)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "9c8fe001d36753349ad1f7df83029e1c8d8edcac", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Multiplex Transaction Lazy Initialize and Dynamic Config fixes (#1383)"}, {"oid": "d31cff91c7452ae4b07bcc2006b70f15474b4198", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes for query cache spring integration (#1381)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "7dcb449ad9bf24c3c12601209803a0f05420e380", "committedDate": "2021-01-07 23:13:06 -0600", "message": "Only build swagger if the controller is activated"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "4641781684344dd25e47bdbe1a8aa6f28881d627", "committedDate": "2021-01-12 09:00:58 -0600", "message": "Added a new setting to Spring to enable/disable JSON-API links"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "b911028feb3655bb897041047caa7602f3f0c761", "committedDate": "2021-05-02 21:51:37 -0500", "message": "Add missing default values for ElideAutoConfiguration (#2052)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "abb32869ab0e97b8ceaa1bd61b53c579b4ca1c65", "committedDate": "2022-04-22 15:17:21 -0500", "message": "Header filtering config (#2627)"}, {"oid": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "committedDate": "2022-04-26 16:56:53 -0500", "message": "Add Injector Bean (#2637)"}, {"oid": "af3e1d9d64479e3ca0f5141bec8b906843d11248", "committedDate": "2022-05-05 21:14:51 -0500", "message": "Minimum to expose _service.sdl for Apollo federation. (#2640)"}, {"oid": "c0a0f0ad9a1a9bbb9938e3225f27b2d191b82e79", "committedDate": "2022-09-15 21:47:40 -0500", "message": "Only build query runner if graphQL is enabled (#2766)"}, {"oid": "f03aba8c1f854a9c0c286fad97c30d2fed5ffe08", "committedDate": "2022-09-22 18:59:56 -0500", "message": "Allow elide-graphql to be excluded when elide.graphql.enabled=false (#2787)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "119ea75d9ad68b27361326e9837ef1627afd3169", "committedDate": "2023-03-20 18:16:04 -0500", "message": "Fixes #2912 (#2931)"}, {"oid": "a6e6995ad7b3a7571ad3120f76924e9b83009ca7", "committedDate": "2023-04-16 16:45:08 -0500", "message": "Adds Spring Boot 3 Native Image support (#2939)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "e570df51218d29e6625a1d91c6f8d5b7f8642526", "committedDate": "2023-05-29 17:38:29 -0500", "message": "Add Atomic Operations Support (#2979)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}, {"oid": "855ab18b75a01ea145050f7424fbe93bec2ccb1f", "committedDate": "2023-06-04 10:15:22 -0500", "message": "Support multiple `JpaDataStore` (#2998)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0ODgwOQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488948809", "body": "static", "bodyText": "static", "bodyHTML": "<p dir=\"auto\">static</p>", "author": "aklish", "createdAt": "2020-09-15T20:19:39Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -75,6 +87,44 @@ public ElideDynamicEntityCompiler(String path) throws Exception {\n                 new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n                         Sets.newHashSet(classNames)));\n         compile();\n+\n+        elideSQLDBConfig.getDbconfigs().forEach(config -> {\n+            connectionDetailsMap.put(config.getName(),\n+                            new ConnectionDetails(getDataSource(config, dbPasswordExtractor), config.getDialect()));\n+        });\n+\n+    }\n+\n+    /**\n+     * Parse dynamic config path and provides default implementation for DB Password Extractor.\n+     * @param path : Dynamic config hjsons root location.\n+     * @throws Exception Exception thrown.\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws Exception {\n+        this(path, new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Generates DataSource for provided configuration.\n+     * @param dbConfig DB Configuration pojo.\n+     * @param dbPasswordExtractor DB Password Extractor Implementation.\n+     * @return DataSource Object.\n+     */\n+    private DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {", "originalCommit": "9d0f414511b474f4d7cdb49dcc356ebf6d4c6de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjMzNA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488982334", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-15T21:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0ODgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex ce21a453f..bd6d8b384 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -89,38 +86,23 @@ public class ElideDynamicEntityCompiler {\n         compile();\n \n         elideSQLDBConfig.getDbconfigs().forEach(config -> {\n-            connectionDetailsMap.put(config.getName(),\n-                            new ConnectionDetails(getDataSource(config, dbPasswordExtractor), config.getDialect()));\n+            dataSourceMap.put(config.getName(), getDataSource(config));\n+            dialectMap.put(config.getName(), config.getDialect());\n         });\n \n     }\n \n-    /**\n-     * Parse dynamic config path and provides default implementation for DB Password Extractor.\n-     * @param path : Dynamic config hjsons root location.\n-     * @throws Exception Exception thrown.\n-     */\n-    public ElideDynamicEntityCompiler(String path) throws Exception {\n-        this(path, new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        });\n-    }\n-\n     /**\n      * Generates DataSource for provided configuration.\n-     * @param dbConfig DB Configuration pojo.\n-     * @param dbPasswordExtractor DB Password Extractor Implementation.\n-     * @return DataSource Object.\n+     * @param dbConfig DB Configuration pojo\n+     * @return DataSource.\n      */\n-    private DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {\n+    private DataSource getDataSource(DBConfig dbConfig) {\n         HikariConfig config = new HikariConfig();\n \n         config.setJdbcUrl(dbConfig.getUrl());\n         config.setUsername(dbConfig.getUser());\n-        config.setPassword(dbPasswordExtractor.getDBPassword(dbConfig));\n+        config.setPassword(\"\"); // TO DO\n         config.setDriverClassName(dbConfig.getDriver());\n         dbConfig.getPropertyMap().forEach((k, v) -> config.addDataSourceProperty(k, v));\n \n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex bd6d8b384..e195aa5b2 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -86,23 +89,38 @@ public class ElideDynamicEntityCompiler {\n         compile();\n \n         elideSQLDBConfig.getDbconfigs().forEach(config -> {\n-            dataSourceMap.put(config.getName(), getDataSource(config));\n-            dialectMap.put(config.getName(), config.getDialect());\n+            connectionDetailsMap.put(config.getName(),\n+                            new ConnectionDetails(getDataSource(config, dbPasswordExtractor), config.getDialect()));\n         });\n \n     }\n \n+    /**\n+     * Parse dynamic config path and provides default implementation for DB Password Extractor.\n+     * @param path : Dynamic config hjsons root location\n+     * @throws Exception Exception thrown\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws Exception {\n+        this(path, new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        });\n+    }\n+\n     /**\n      * Generates DataSource for provided configuration.\n      * @param dbConfig DB Configuration pojo\n-     * @return DataSource.\n+     * @param dbPasswordExtractor DB Password Extractor Implementation\n+     * @return DataSource\n      */\n-    private DataSource getDataSource(DBConfig dbConfig) {\n+    private DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {\n         HikariConfig config = new HikariConfig();\n \n         config.setJdbcUrl(dbConfig.getUrl());\n         config.setUsername(dbConfig.getUser());\n-        config.setPassword(\"\"); // TO DO\n+        config.setPassword(dbPasswordExtractor.getDBPassword(dbConfig));\n         config.setDriverClassName(dbConfig.getDriver());\n         dbConfig.getPropertyMap().forEach((k, v) -> config.addDataSourceProperty(k, v));\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex ce21a453f..33e503a70 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -115,7 +115,7 @@ public class ElideDynamicEntityCompiler {\n      * @param dbPasswordExtractor DB Password Extractor Implementation.\n      * @return DataSource Object.\n      */\n-    private DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {\n+    private static DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {\n         HikariConfig config = new HikariConfig();\n \n         config.setJdbcUrl(dbConfig.getUrl());\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex 33e503a70..5973b3bae 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -87,44 +71,6 @@ public class ElideDynamicEntityCompiler {\n                 new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n                         Sets.newHashSet(classNames)));\n         compile();\n-\n-        elideSQLDBConfig.getDbconfigs().forEach(config -> {\n-            connectionDetailsMap.put(config.getName(),\n-                            new ConnectionDetails(getDataSource(config, dbPasswordExtractor), config.getDialect()));\n-        });\n-\n-    }\n-\n-    /**\n-     * Parse dynamic config path and provides default implementation for DB Password Extractor.\n-     * @param path : Dynamic config hjsons root location.\n-     * @throws Exception Exception thrown.\n-     */\n-    public ElideDynamicEntityCompiler(String path) throws Exception {\n-        this(path, new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        });\n-    }\n-\n-    /**\n-     * Generates DataSource for provided configuration.\n-     * @param dbConfig DB Configuration pojo.\n-     * @param dbPasswordExtractor DB Password Extractor Implementation.\n-     * @return DataSource Object.\n-     */\n-    private static DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {\n-        HikariConfig config = new HikariConfig();\n-\n-        config.setJdbcUrl(dbConfig.getUrl());\n-        config.setUsername(dbConfig.getUser());\n-        config.setPassword(dbPasswordExtractor.getDBPassword(dbConfig));\n-        config.setDriverClassName(dbConfig.getDriver());\n-        dbConfig.getPropertyMap().forEach((k, v) -> config.addDataSourceProperty(k, v));\n-\n-        return new HikariDataSource(config);\n     }\n \n     /**\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex 5973b3bae..33e503a70 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -71,6 +87,44 @@ public class ElideDynamicEntityCompiler {\n                 new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n                         Sets.newHashSet(classNames)));\n         compile();\n+\n+        elideSQLDBConfig.getDbconfigs().forEach(config -> {\n+            connectionDetailsMap.put(config.getName(),\n+                            new ConnectionDetails(getDataSource(config, dbPasswordExtractor), config.getDialect()));\n+        });\n+\n+    }\n+\n+    /**\n+     * Parse dynamic config path and provides default implementation for DB Password Extractor.\n+     * @param path : Dynamic config hjsons root location.\n+     * @throws Exception Exception thrown.\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws Exception {\n+        this(path, new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Generates DataSource for provided configuration.\n+     * @param dbConfig DB Configuration pojo.\n+     * @param dbPasswordExtractor DB Password Extractor Implementation.\n+     * @return DataSource Object.\n+     */\n+    private static DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {\n+        HikariConfig config = new HikariConfig();\n+\n+        config.setJdbcUrl(dbConfig.getUrl());\n+        config.setUsername(dbConfig.getUser());\n+        config.setPassword(dbPasswordExtractor.getDBPassword(dbConfig));\n+        config.setDriverClassName(dbConfig.getDriver());\n+        dbConfig.getPropertyMap().forEach((k, v) -> config.addDataSourceProperty(k, v));\n+\n+        return new HikariDataSource(config);\n     }\n \n     /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "59bedbf548534afd73c2953b598b9b0fabb2da15", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Validation for Model Configs (#1306)"}, {"oid": "f1541e4c1aaf7adf6d31ffcd6f5e8fbd3d80e6d7", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Dynamic config schema validation; Read resources from jar (#1449)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "7f7b96932194502aa322368e7e0dc0613974c36d", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Lookup Join Class from static defined models (#1606)"}, {"oid": "b102edce2aab462b582845148c7ea7624a3e977b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrated dynamic-config-helpers module to elide-model-config module (#1628)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0OTA5NA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488949094", "body": "You can use @Value to make this immutable.", "bodyText": "You can use @value to make this immutable.", "bodyHTML": "<p dir=\"auto\">You can use <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/value/hovercard\" href=\"https://github.com/value\">@value</a> to make this immutable.</p>", "author": "aklish", "createdAt": "2020-09-15T20:20:06Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * Custom class to abstract {@link DataSource} and name of Dialect class.\n+ */\n+@AllArgsConstructor\n+@Getter", "originalCommit": "9d0f414511b474f4d7cdb49dcc356ebf6d4c6de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjQwMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488982403", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-15T21:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0OTA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\ndeleted file mode 100644\nindex 1985a113a..000000000\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-\n-import javax.sql.DataSource;\n-\n-/**\n- * Custom class to abstract {@link DataSource} and name of Dialect class.\n- */\n-@AllArgsConstructor\n-@Getter\n-public class ConnectionDetails {\n-    private DataSource dataSource;\n-    private String dialect;\n-}\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nnew file mode 100644\nindex 000000000..1985a113a\n--- /dev/null\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * Custom class to abstract {@link DataSource} and name of Dialect class.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class ConnectionDetails {\n+    private DataSource dataSource;\n+    private String dialect;\n+}\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nindex 1985a113a..d48ca93a8 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -5,16 +5,14 @@\n  */\n package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import lombok.Value;\n \n import javax.sql.DataSource;\n \n /**\n  * Custom class to abstract {@link DataSource} and name of Dialect class.\n  */\n-@AllArgsConstructor\n-@Getter\n+@Value\n public class ConnectionDetails {\n     private DataSource dataSource;\n     private String dialect;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nindex 1985a113a..d48ca93a8 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -5,16 +5,14 @@\n  */\n package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import lombok.Value;\n \n import javax.sql.DataSource;\n \n /**\n  * Custom class to abstract {@link DataSource} and name of Dialect class.\n  */\n-@AllArgsConstructor\n-@Getter\n+@Value\n public class ConnectionDetails {\n     private DataSource dataSource;\n     private String dialect;\n", "next_change": null}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b102edce2aab462b582845148c7ea7624a3e977b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrated dynamic-config-helpers module to elide-model-config module (#1628)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NjYxOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488956618", "body": "Why not use ConnectionDetails here?", "bodyText": "Why not use ConnectionDetails here?", "bodyHTML": "<p dir=\"auto\">Why not use ConnectionDetails here?</p>", "author": "aklish", "createdAt": "2020-09-15T20:34:21Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -41,45 +43,72 @@\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n-import org.hibernate.jpa.QueryHints;\n-\n import lombok.extern.slf4j.Slf4j;\n \n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n+import javax.sql.DataSource;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n-    private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final SQLDialect dialect;\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n-    }\n+    private final DataSource defaultDataSource;\n+    private final Map<String, DataSource> dataSourceMap = new HashMap<>();", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3MTg4MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489071881", "bodyText": "added additional ConnectionDetails class in aggregation module with dialect of type SQLDialect.", "author": "rishi-aga", "createdAt": "2020-09-15T23:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NjYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9aff2a5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -66,31 +65,30 @@ import javax.sql.DataSource;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n-    private final DataSource defaultDataSource;\n-    private final Map<String, DataSource> dataSourceMap = new HashMap<>();\n-    private final SQLDialect defaultDialect;\n-    private final Map<String, SQLDialect> dialectMap = new HashMap<>();\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultDataSource = defaultDataSource;\n-        this.defaultDialect = SQLDialectFactory.getDialect(defaultDialect);\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n-     * @param defaultDataSource : default DataSource Object.\n-     * @param defaultDialect : default SQL Dialect Class Name.\n-     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Class Name mapping.\n+     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n+     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n-                    Map<String, ConnectionDetails> connectionDetailsMap) {\n-        this(metaDataStore, defaultDataSource, defaultDialect);\n-        connectionDetailsMap.forEach((name, details) -> {\n-            dataSourceMap.put(name, details.getDataSource());\n-            dialectMap.put(name, SQLDialectFactory.getDialect(details.getDialect()));\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n+                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n+        this(metaDataStore, defaultConnectionDetails);\n+        detailsMap.forEach((name, details) -> {\n+            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n+                            SQLDialectFactory.getDialect(details.getDialect())));\n         });\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -66,31 +63,30 @@ import javax.sql.DataSource;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n-    private final DataSource defaultDataSource;\n-    private final Map<String, DataSource> dataSourceMap = new HashMap<>();\n-    private final SQLDialect defaultDialect;\n-    private final Map<String, SQLDialect> dialectMap = new HashMap<>();\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultDataSource = defaultDataSource;\n-        this.defaultDialect = SQLDialectFactory.getDialect(defaultDialect);\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n-     * @param defaultDataSource : default DataSource Object.\n-     * @param defaultDialect : default SQL Dialect Class Name.\n-     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Class Name mapping.\n+     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n+     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n-                    Map<String, ConnectionDetails> connectionDetailsMap) {\n-        this(metaDataStore, defaultDataSource, defaultDialect);\n-        connectionDetailsMap.forEach((name, details) -> {\n-            dataSourceMap.put(name, details.getDataSource());\n-            dialectMap.put(name, SQLDialectFactory.getDialect(details.getDialect()));\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n+                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n+        this(metaDataStore, defaultConnectionDetails);\n+        detailsMap.forEach((name, details) -> {\n+            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n+                            SQLDialectFactory.getDialect(details.getDialect())));\n         });\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -42,69 +38,36 @@ import com.yahoo.elide.request.Argument;\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n+import org.hibernate.jpa.QueryHints;\n+\n import lombok.extern.slf4j.Slf4j;\n \n-import java.sql.Connection;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n-import java.util.function.Function;\n+import java.util.Set;\n import java.util.stream.Collectors;\n-import javax.sql.DataSource;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n+    private final EntityManagerFactory entityManagerFactory;\n+\n     private final SQLReferenceTable referenceTable;\n-    private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n-        super(metaDataStore);\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n+        super(metaDataStore, cache);\n+        this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n-    }\n-\n-    /**\n-     * Constructor.\n-     * @param metaDataStore : MetaDataStore.\n-     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n-     */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-    };\n-\n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n         return new SQLTable(entityClass, metaDataDictionary);\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..7c335531d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -62,8 +63,8 @@ public class SQLQueryEngine extends QueryEngine {\n \n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n-        super(metaDataStore, cache);\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        super(metaDataStore);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n     }\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 7c335531d..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -60,13 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n         super(metaDataStore);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,12 +65,19 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final SQLDialect dialect;\n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n+        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n+    }\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n+                          SQLDialect sqlDialect) {\n         super(metaDataStore);\n         this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n         this.transactionCancel = txC;\n+        this.dialect = sqlDialect;\n     }\n \n     @Override\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -41,45 +42,69 @@ import com.yahoo.elide.request.Argument;\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n-import org.hibernate.jpa.QueryHints;\n-\n import lombok.extern.slf4j.Slf4j;\n \n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.Optional;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n+import javax.sql.DataSource;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n-    private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final SQLDialect dialect;\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n-    }\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n-                          SQLDialect sqlDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n-        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = txC;\n-        this.dialect = sqlDialect;\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param metaDataStore : MetaDataStore.\n+     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n+     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     */\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n+                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n+        this(metaDataStore, defaultConnectionDetails);\n+        detailsMap.forEach((name, details) -> {\n+            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n+                            SQLDialectFactory.getDialect(details.getDialect())));\n+        });\n     }\n \n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n+        @Override\n+        public Object apply(ResultSet rs) {\n+            try {\n+                if (rs.next()) {\n+                    return rs.getObject(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    };\n+\n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n         return new SQLTable(entityClass, metaDataDictionary);\n", "next_change": {"commit": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..ca3f47ca5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -107,34 +103,14 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+        return new SQLTable(entityClass, metaDataDictionary, this);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLColumnProjection() {\n-            @Override\n-            public SQLReferenceTable getReferenceTable() {\n-                return referenceTable;\n-            }\n-\n-            @Override\n-            public Column getColumn() {\n-                return dimension;\n-            }\n-\n-            @Override\n-            public String getAlias() {\n-                return alias;\n-            }\n-\n-            @Override\n-            public Map<String, Argument> getArguments() {\n-                return arguments;\n-            }\n-        };\n+        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n     }\n \n     @Override\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex ca3f47ca5..f2433475a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -103,28 +104,28 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary, this);\n+        return new SQLTable(entityClass, metaDataDictionary);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n+        return new SQLDimensionProjection(dimension, alias, arguments);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), referenceTable, alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n+        return new SQLMetricProjection(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f2433475a..3296af5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,71 +72,90 @@ public class SQLQueryEngine extends QueryEngine {\n     @Getter\n     private final SQLReferenceTable referenceTable;\n     private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n-        super(metaDataStore);\n-        referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    private final Map<String, ConnectionDetails> connectionDetailsMap;\n+    private final Set<Optimizer> optimizers;\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails) {\n+        this(metaDataStore, defaultConnectionDetails, Collections.emptyMap(),\n+                new HashSet<>());\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n      * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Map<String, ConnectionDetails> connectionDetailsMap, Set<Optimizer> optimizers) {\n+\n+        Preconditions.checkNotNull(defaultConnectionDetails);\n+        Preconditions.checkNotNull(connectionDetailsMap);\n+\n+        this.defaultConnectionDetails = defaultConnectionDetails;\n+        this.connectionDetailsMap = connectionDetailsMap;\n+        this.metaDataStore = metaDataStore;\n+        this.metadataDictionary = metaDataStore.getMetadataDictionary();\n+        populateMetaData(metaDataStore);\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.optimizers = optimizers;\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = rs -> {\n+        try {\n+            if (rs.next()) {\n+                return rs.getObject(1);\n             }\n+            return null;\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(e);\n         }\n     };\n \n     @Override\n-    protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+    protected Table constructTable(Type<?> entityClass, EntityDictionary metaDataDictionary) {\n+\n+        String dbConnectionName = null;\n+        Annotation annotation = EntityDictionary.getFirstAnnotation(entityClass,\n+                        Arrays.asList(FromTable.class, FromSubquery.class));\n+        if (annotation instanceof FromTable) {\n+            dbConnectionName = ((FromTable) annotation).dbConnectionName();\n+        } else if (annotation instanceof FromSubquery) {\n+            dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n+        }\n+\n+        ConnectionDetails connectionDetails;\n+        if (StringUtils.isBlank(dbConnectionName)) {\n+            connectionDetails = defaultConnectionDetails;\n+        } else {\n+            connectionDetails = Optional.ofNullable(connectionDetailsMap.get(dbConnectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\"ConnectionDetails undefined for model: \"\n+                                            + metaDataDictionary.getJsonAliasFor(entityClass)));\n+        }\n+\n+        return new SQLTable(entityClass, metaDataDictionary, connectionDetails);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments);\n+        return new SQLDimensionProjection(dimension, alias, arguments, true);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments, true);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, alias, arguments);\n+\n+        return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 3296af5f8..54caaa4ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -154,7 +171,6 @@ public class SQLQueryEngine extends QueryEngine {\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n", "next_change": {"commit": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 54caaa4ef..fcf751616 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -174,6 +178,24 @@ public class SQLQueryEngine extends QueryEngine {\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n+    @Override\n+    protected void verifyMetaData(MetaDataStore metaDataStore) {\n+        metaDataStore.getTables().forEach(table -> {\n+            SQLTable sqlTable = (SQLTable) table;\n+            checkForCycles(sqlTable);\n+            TableArgumentValidator tableArgValidator = new TableArgumentValidator(metaDataStore, sqlTable);\n+            tableArgValidator.validate();\n+        });\n+    }\n+\n+    /**\n+     * Verify that there is no reference loop for given {@link SQLTable}.\n+     * @param sqlTable Queryable to validate.\n+     */\n+    private void checkForCycles(SQLTable sqlTable) {\n+        sqlTable.getColumnProjections().forEach(column -> formulaValidator.parse(sqlTable, column));\n+    }\n+\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NzIyMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488957223", "body": "I wonder if we should make this SQLDialect instead of String.", "bodyText": "I wonder if we should make this SQLDialect instead of String.", "bodyHTML": "<p dir=\"auto\">I wonder if we should make this SQLDialect instead of String.</p>", "author": "aklish", "createdAt": "2020-09-15T20:35:29Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * Custom class to abstract {@link DataSource} and name of Dialect class.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class ConnectionDetails {\n+    private DataSource dataSource;\n+    private String dialect;", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3MjM2Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489072363", "bodyText": "SQLDialect is not available in contrib module. added the workaround for now.", "author": "rishi-aga", "createdAt": "2020-09-15T23:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NzIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\ndeleted file mode 100644\nindex 1985a113a..000000000\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-\n-import javax.sql.DataSource;\n-\n-/**\n- * Custom class to abstract {@link DataSource} and name of Dialect class.\n- */\n-@AllArgsConstructor\n-@Getter\n-public class ConnectionDetails {\n-    private DataSource dataSource;\n-    private String dialect;\n-}\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nnew file mode 100644\nindex 000000000..1985a113a\n--- /dev/null\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * Custom class to abstract {@link DataSource} and name of Dialect class.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class ConnectionDetails {\n+    private DataSource dataSource;\n+    private String dialect;\n+}\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nindex 1985a113a..d48ca93a8 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -5,16 +5,14 @@\n  */\n package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import lombok.Value;\n \n import javax.sql.DataSource;\n \n /**\n  * Custom class to abstract {@link DataSource} and name of Dialect class.\n  */\n-@AllArgsConstructor\n-@Getter\n+@Value\n public class ConnectionDetails {\n     private DataSource dataSource;\n     private String dialect;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nindex 1985a113a..d48ca93a8 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -5,16 +5,14 @@\n  */\n package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import lombok.Value;\n \n import javax.sql.DataSource;\n \n /**\n  * Custom class to abstract {@link DataSource} and name of Dialect class.\n  */\n-@AllArgsConstructor\n-@Getter\n+@Value\n public class ConnectionDetails {\n     private DataSource dataSource;\n     private String dialect;\n", "next_change": null}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b102edce2aab462b582845148c7ea7624a3e977b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrated dynamic-config-helpers module to elide-model-config module (#1628)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1OTcwNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488959706", "body": "Now that we are adding offset and limit directly, I feel like this functionality (appending the offset & limit string) should move to the SQLQueryConstructor", "bodyText": "Now that we are adding offset and limit directly, I feel like this functionality (appending the offset & limit string) should move to the SQLQueryConstructor", "bodyHTML": "<p dir=\"auto\">Now that we are adding offset and limit directly, I feel like this functionality (appending the offset &amp; limit string) should move to the SQLQueryConstructor</p>", "author": "aklish", "createdAt": "2020-09-15T20:40:12Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +158,165 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private Connection conn;\n+        private SQLDialect dialect;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+\n+        public void initializeTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n         String queryString = sql.toString();\n-        log.debug(\"SQL Query: \" + queryString);\n-        javax.persistence.Query jpaQuery = entityManager.createNativeQuery(queryString);\n \n         QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n+        NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n         if (pagination != null) {\n-            jpaQuery.setFirstResult(pagination.getOffset());\n-            jpaQuery.setMaxResults(pagination.getLimit());\n+            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2NjYyNA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489666624", "bodyText": "moved it to SQLQueryConstructor.", "author": "rishi-aga", "createdAt": "2020-09-16T18:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1OTcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..7cad4de86 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -218,37 +215,31 @@ public class SQLQueryEngine extends QueryEngine {\n         NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null) {\n-            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n-            if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-            }\n+        if (returnPageTotals(pagination)) {\n+            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n         }\n \n         log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<>(() -> {\n-            try {\n-                return stmt.executeQuery();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n+        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n \n         resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n     private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n+        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -218,37 +215,31 @@ public class SQLQueryEngine extends QueryEngine {\n         NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null) {\n-            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n-            if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-            }\n+        if (returnPageTotals(pagination)) {\n+            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n         }\n \n         log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<>(() -> {\n-            try {\n-                return stmt.executeQuery();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n+        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n \n         resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n     private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n+        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -151,172 +114,84 @@ public class SQLQueryEngine extends QueryEngine {\n         return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n     }\n \n-    /**\n-     * State needed for SQLQueryEngine to execute queries.\n-     */\n-    static class SqlTransaction implements QueryEngine.Transaction {\n-\n-        private Connection conn;\n-        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n-\n-        private void initializeConnection(DataSource dataSource) {\n-            try {\n-                this.conn = dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        public NamedParamPreparedStatement initializeStatement(String namedParamQuery, DataSource dataSource) {\n-            NamedParamPreparedStatement stmt;\n-            try {\n-                if (conn == null || !conn.isValid(10)) {\n-                    initializeConnection(dataSource);\n-                }\n-                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n-                stmts.add(stmt);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-            return stmt;\n-        }\n-\n-        @Override\n-        public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n-        }\n-\n-        @Override\n-        public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n-        }\n-    }\n-\n     @Override\n-    public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n-    }\n-\n-    @Override\n-    public QueryResult executeQuery(Query query, Transaction transaction) {\n-        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-\n-        // Translate the query into SQL.\n-        SQLQuery sql = toSQL(query, dialect);\n-        String queryString = sql.toString();\n+    public Iterable<Object> executeQuery(Query query, boolean useCache) {\n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n+        try {\n+            entityManager = entityManagerFactory.createEntityManager();\n \n-        QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n-        NamedParamPreparedStatement stmt;\n+            // manually begin the transaction\n+            transaction = entityManager.getTransaction();\n+            if (!transaction.isActive()) {\n+                transaction.begin();\n+            }\n \n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-        }\n+            // Translate the query into SQL.\n+            SQLQuery sql = toSQL(query);\n+            log.debug(\"SQL Query: \" + sql);\n \n-        log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n+            javax.persistence.Query jpaQuery = entityManager.createNativeQuery(sql.toString());\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+            Pagination pagination = query.getPagination();\n+            if (pagination != null) {\n+                jpaQuery.setFirstResult(pagination.getOffset());\n+                jpaQuery.setMaxResults(pagination.getLimit());\n \n-        // Run the primary query and log the time spent.\n-        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n+                if (pagination.returnPageTotals()) {\n \n-        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n-        return resultBuilder.build();\n-    }\n+                    SQLQuery paginationSQL = toPageTotalSQL(sql);\n+                    javax.persistence.Query pageTotalQuery =\n+                            entityManager.createNativeQuery(paginationSQL.toString())\n+                                    .setHint(QueryHints.HINT_READONLY, true);\n \n-    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+                    //Supply the query parameters to the query\n+                    supplyFilterQueryParameters(query, pageTotalQuery);\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n+                    //Run the Pagination query and log the time spent.\n+                    long total = new TimedFunction<>(\n+                            () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                            \"Running Query: \" + paginationSQL\n+                    ).get();\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+                    pagination.setPageTotals(total);\n+                }\n+            }\n \n-        // Run the Pagination query and log the time spent.\n-        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n-    }\n+            // Supply the query parameters to the query\n+            supplyFilterQueryParameters(query, jpaQuery);\n \n-    @Override\n-    public String getTableVersion(Table table, Transaction transaction) {\n-\n-        String tableVersion = null;\n-        Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n-        VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n-        if (versionAnnotation != null) {\n-            String versionQueryString = versionAnnotation.sql();\n-            SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-            ConnectionDetails details = getConnectionDetails(table.getDbConnectionName());\n-            DataSource dataSource = details.getDataSource();\n-            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString, dataSource);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n-        }\n-        return tableVersion;\n-    }\n+            // Run the primary query and log the time spent.\n+            List<Object> results = new TimedFunction<>(\n+                    () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n+                    \"Running Query: \" + sql).get();\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+            return new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate();\n+        } finally {\n+            if (transaction != null && transaction.isActive()) {\n+                transaction.commit();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n             }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param dialect SQL dialect to use for this storage.\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public List<String> explain(Query query, SQLDialect dialect) {\n-        List<String> queries = new ArrayList<String>();\n-        SQLQuery sql = toSQL(query, dialect);\n-\n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n-        queries.add(sql.toString());\n-        return queries;\n-    }\n-\n-    @Override\n-    public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n      * @param query the client query.\n-     * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n-    private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+    private SQLQuery toSQL(Query query) {\n+        Set<ColumnProjection> groupByDimensions = new LinkedHashSet<>(query.getGroupByDimensions());\n+        Set<TimeDimensionProjection> timeDimensions = new LinkedHashSet<>(query.getTimeDimensions());\n \n         SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n                 .map(metricProjection -> {\n                     if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n+                        throw new InvalidPredicateException(\n+                                \"Non-SQL metric function on \" + metricProjection.getAlias());\n                     }\n \n                     return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -199,7 +273,7 @@ public class SQLQueryEngine extends QueryEngine {\n                 .reduce(SQLQueryTemplate::merge)\n                 .orElse(new SQLQueryTemplate(query));\n \n-        return new SQLQueryConstructor(referenceTable).resolveTemplate(\n+        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n                 query,\n                 queryTemplate,\n                 query.getSorting(),\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -278,18 +329,18 @@ public class SQLQueryEngine extends QueryEngine {\n                 queryTemplate,\n                 query.getSorting(),\n                 query.getWhereFilter(),\n-                query.getHavingFilter());\n+                query.getHavingFilter(),\n+                query.getPagination());\n     }\n \n \n     /**\n-     * Given a JPA query, replaces any parameters with their values from client query.\n+     * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n-     * @param jpaQuery The JPA query\n+     * @param stmt Customized Prepared Statement\n      */\n-    private void supplyFilterQueryParameters(Query query,\n-                                             javax.persistence.Query jpaQuery) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..25eda7887 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,47 +316,56 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n+        return explain(query, query.getConnectionDetails().getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n-     * @param query the client query.\n+     * @param query the transformed client query.\n      * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n     private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+        SQLReferenceTable queryReferenceTable = new DynamicSQLReferenceTable(referenceTable, query);\n \n-        SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n-                .map(metricProjection -> {\n-                    if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n-                    }\n+        QueryTranslator translator = new QueryTranslator(queryReferenceTable, sqlDialect);\n \n-                    return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n-                })\n-                .reduce(SQLQueryTemplate::merge)\n-                .orElse(new SQLQueryTemplate(query));\n-\n-        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n-                query,\n-                queryTemplate,\n-                query.getSorting(),\n-                query.getWhereFilter(),\n-                query.getHavingFilter(),\n-                query.getPagination());\n+        return query.accept(translator).build();\n     }\n \n+    /**\n+     * Transforms a client query into a potentially nested/complex query by expanding each metric into\n+     * its respective query plan - and then merging the plans together into a consolidated query.\n+     * @param query The client query.\n+     * @return A query that reflects each metric's individual query plan.\n+     */\n+    private Query expandMetricQueryPlans(Query query) {\n+        QueryPlan mergedPlan = null;\n+\n+        //Expand each metric into its own query plan.  Merge them all together.\n+        for (MetricProjection metricProjection : query.getMetricProjections()) {\n+            QueryPlan queryPlan = metricProjection.resolve();\n+            if (queryPlan != null) {\n+                mergedPlan = queryPlan.merge(mergedPlan);\n+            }\n+        }\n+\n+        QueryPlanTranslator queryPlanTranslator = new QueryPlanTranslator(query);\n+\n+        return (mergedPlan == null)\n+                ? query\n+                : mergedPlan.accept(queryPlanTranslator).build();\n+    }\n \n     /**\n      * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n      * @param stmt Customized Prepared Statement\n+     * @param dialect the SQL dialect\n      */\n-    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt, SQLDialect dialect) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MDcxOQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488960719", "body": "Same comment.", "bodyText": "Same comment.", "bodyHTML": "<p dir=\"auto\">Same comment.</p>", "author": "aklish", "createdAt": "2020-09-15T20:42:12Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +158,165 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private Connection conn;\n+        private SQLDialect dialect;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+\n+        public void initializeTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n         String queryString = sql.toString();\n-        log.debug(\"SQL Query: \" + queryString);\n-        javax.persistence.Query jpaQuery = entityManager.createNativeQuery(queryString);\n \n         QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n+        NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n         if (pagination != null) {\n-            jpaQuery.setFirstResult(pagination.getOffset());\n-            jpaQuery.setMaxResults(pagination.getLimit());\n+            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n             if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, entityManager));\n+                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n             }\n         }\n \n+        log.debug(\"SQL Query: \" + queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString);\n+\n         // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, jpaQuery);\n+        supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        List<Object> results = new TimedFunction<List<Object>>(\n-                () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n-                \"Running Query: \" + queryString).get();\n+        ResultSet resultSet = new TimedFunction<>(() -> {\n+            try {\n+                return stmt.executeQuery();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n \n-        resultBuilder.data(new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate());\n+        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n-    private long getPageTotal(Query query, SQLQuery sql, EntityManager entityManager) {\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n+        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n \n-        javax.persistence.Query pageTotalQuery =\n-                entityManager.createNativeQuery(paginationSQL)\n-                        .setHint(QueryHints.HINT_READONLY, true);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n \n-        //Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, pageTotalQuery);\n+        // Supply the query parameters to the query\n+        supplyFilterQueryParameters(query, stmt);\n \n-        //Run the Pagination query and log the time spent.\n-        return new TimedFunction<>(\n-                () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n-                \"Running Query: \" + paginationSQL\n-        ).get();\n+        // Run the Pagination query and log the time spent.\n+        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n     }\n \n     @Override\n     public String getTableVersion(Table table, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String tableVersion = null;\n         Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n         VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n-            javax.persistence.Query versionQuery =\n-                    entityManager.createNativeQuery(versionQueryString)\n-                            .setHint(QueryHints.HINT_READONLY, true);\n-            tableVersion = new TimedFunction<>(\n-                    () -> CoerceUtil.coerce(versionQuery.getSingleResult(), String.class),\n-                    \"Running Query: \" + versionQueryString\n-            ).get();\n+            String connectionName = table.getDbConnectionName();\n+            sqlTransaction.initializeTransaction(getDataSource(connectionName), getSQLDialect(connectionName));\n+            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n+            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n         }\n         return tableVersion;\n     }\n \n-    @Override\n-    public List<String> explain(Query query) {\n+    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n+\n+        // Run the query and log the time spent.\n+        return new TimedFunction<>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                return resultMapper.apply(rs);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n+    }\n+\n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @param dialect SQL dialect to use for this storage.\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public List<String> explain(Query query, SQLDialect dialect) {\n         List<String> queries = new ArrayList<String>();\n         SQLQuery sql = toSQL(query, dialect);\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null && pagination.returnPageTotals()) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n+        if (pagination != null) {\n+            if (pagination.returnPageTotals()) {\n+                queries.add(toPageTotalSQL(sql, dialect).toString());\n+            }\n+            queries.add(appendOffsetLimit(sql.toString(), dialect, pagination.getOffset(), pagination.getLimit()));", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..7cad4de86 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,21 +291,17 @@ public class SQLQueryEngine extends QueryEngine {\n         SQLQuery sql = toSQL(query, dialect);\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null) {\n-            if (pagination.returnPageTotals()) {\n-                queries.add(toPageTotalSQL(sql, dialect).toString());\n-            }\n-            queries.add(appendOffsetLimit(sql.toString(), dialect, pagination.getOffset(), pagination.getLimit()));\n-        } else {\n-            queries.add(sql.toString());\n+        if (returnPageTotals(pagination)) {\n+            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n+        queries.add(sql.toString());\n         return queries;\n     }\n \n     @Override\n     public List<String> explain(Query query) {\n         String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getSQLDialect(connectionName));\n+        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,21 +291,17 @@ public class SQLQueryEngine extends QueryEngine {\n         SQLQuery sql = toSQL(query, dialect);\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null) {\n-            if (pagination.returnPageTotals()) {\n-                queries.add(toPageTotalSQL(sql, dialect).toString());\n-            }\n-            queries.add(appendOffsetLimit(sql.toString(), dialect, pagination.getOffset(), pagination.getLimit()));\n-        } else {\n-            queries.add(sql.toString());\n+        if (returnPageTotals(pagination)) {\n+            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n+        queries.add(sql.toString());\n         return queries;\n     }\n \n     @Override\n     public List<String> explain(Query query) {\n         String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getSQLDialect(connectionName));\n+        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -151,172 +114,84 @@ public class SQLQueryEngine extends QueryEngine {\n         return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n     }\n \n-    /**\n-     * State needed for SQLQueryEngine to execute queries.\n-     */\n-    static class SqlTransaction implements QueryEngine.Transaction {\n-\n-        private Connection conn;\n-        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n-\n-        private void initializeConnection(DataSource dataSource) {\n-            try {\n-                this.conn = dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        public NamedParamPreparedStatement initializeStatement(String namedParamQuery, DataSource dataSource) {\n-            NamedParamPreparedStatement stmt;\n-            try {\n-                if (conn == null || !conn.isValid(10)) {\n-                    initializeConnection(dataSource);\n-                }\n-                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n-                stmts.add(stmt);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-            return stmt;\n-        }\n-\n-        @Override\n-        public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n-        }\n-\n-        @Override\n-        public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n-        }\n-    }\n-\n     @Override\n-    public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n-    }\n-\n-    @Override\n-    public QueryResult executeQuery(Query query, Transaction transaction) {\n-        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-\n-        // Translate the query into SQL.\n-        SQLQuery sql = toSQL(query, dialect);\n-        String queryString = sql.toString();\n+    public Iterable<Object> executeQuery(Query query, boolean useCache) {\n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n+        try {\n+            entityManager = entityManagerFactory.createEntityManager();\n \n-        QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n-        NamedParamPreparedStatement stmt;\n+            // manually begin the transaction\n+            transaction = entityManager.getTransaction();\n+            if (!transaction.isActive()) {\n+                transaction.begin();\n+            }\n \n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-        }\n+            // Translate the query into SQL.\n+            SQLQuery sql = toSQL(query);\n+            log.debug(\"SQL Query: \" + sql);\n \n-        log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n+            javax.persistence.Query jpaQuery = entityManager.createNativeQuery(sql.toString());\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+            Pagination pagination = query.getPagination();\n+            if (pagination != null) {\n+                jpaQuery.setFirstResult(pagination.getOffset());\n+                jpaQuery.setMaxResults(pagination.getLimit());\n \n-        // Run the primary query and log the time spent.\n-        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n+                if (pagination.returnPageTotals()) {\n \n-        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n-        return resultBuilder.build();\n-    }\n+                    SQLQuery paginationSQL = toPageTotalSQL(sql);\n+                    javax.persistence.Query pageTotalQuery =\n+                            entityManager.createNativeQuery(paginationSQL.toString())\n+                                    .setHint(QueryHints.HINT_READONLY, true);\n \n-    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+                    //Supply the query parameters to the query\n+                    supplyFilterQueryParameters(query, pageTotalQuery);\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n+                    //Run the Pagination query and log the time spent.\n+                    long total = new TimedFunction<>(\n+                            () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                            \"Running Query: \" + paginationSQL\n+                    ).get();\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+                    pagination.setPageTotals(total);\n+                }\n+            }\n \n-        // Run the Pagination query and log the time spent.\n-        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n-    }\n+            // Supply the query parameters to the query\n+            supplyFilterQueryParameters(query, jpaQuery);\n \n-    @Override\n-    public String getTableVersion(Table table, Transaction transaction) {\n-\n-        String tableVersion = null;\n-        Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n-        VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n-        if (versionAnnotation != null) {\n-            String versionQueryString = versionAnnotation.sql();\n-            SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-            ConnectionDetails details = getConnectionDetails(table.getDbConnectionName());\n-            DataSource dataSource = details.getDataSource();\n-            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString, dataSource);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n-        }\n-        return tableVersion;\n-    }\n+            // Run the primary query and log the time spent.\n+            List<Object> results = new TimedFunction<>(\n+                    () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n+                    \"Running Query: \" + sql).get();\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+            return new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate();\n+        } finally {\n+            if (transaction != null && transaction.isActive()) {\n+                transaction.commit();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n             }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param dialect SQL dialect to use for this storage.\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public List<String> explain(Query query, SQLDialect dialect) {\n-        List<String> queries = new ArrayList<String>();\n-        SQLQuery sql = toSQL(query, dialect);\n-\n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n-        queries.add(sql.toString());\n-        return queries;\n-    }\n-\n-    @Override\n-    public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n      * @param query the client query.\n-     * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n-    private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+    private SQLQuery toSQL(Query query) {\n+        Set<ColumnProjection> groupByDimensions = new LinkedHashSet<>(query.getGroupByDimensions());\n+        Set<TimeDimensionProjection> timeDimensions = new LinkedHashSet<>(query.getTimeDimensions());\n \n         SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n                 .map(metricProjection -> {\n                     if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n+                        throw new InvalidPredicateException(\n+                                \"Non-SQL metric function on \" + metricProjection.getAlias());\n                     }\n \n                     return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -199,7 +273,7 @@ public class SQLQueryEngine extends QueryEngine {\n                 .reduce(SQLQueryTemplate::merge)\n                 .orElse(new SQLQueryTemplate(query));\n \n-        return new SQLQueryConstructor(referenceTable).resolveTemplate(\n+        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n                 query,\n                 queryTemplate,\n                 query.getSorting(),\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -278,18 +329,18 @@ public class SQLQueryEngine extends QueryEngine {\n                 queryTemplate,\n                 query.getSorting(),\n                 query.getWhereFilter(),\n-                query.getHavingFilter());\n+                query.getHavingFilter(),\n+                query.getPagination());\n     }\n \n \n     /**\n-     * Given a JPA query, replaces any parameters with their values from client query.\n+     * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n-     * @param jpaQuery The JPA query\n+     * @param stmt Customized Prepared Statement\n      */\n-    private void supplyFilterQueryParameters(Query query,\n-                                             javax.persistence.Query jpaQuery) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..25eda7887 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,47 +316,56 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n+        return explain(query, query.getConnectionDetails().getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n-     * @param query the client query.\n+     * @param query the transformed client query.\n      * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n     private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+        SQLReferenceTable queryReferenceTable = new DynamicSQLReferenceTable(referenceTable, query);\n \n-        SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n-                .map(metricProjection -> {\n-                    if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n-                    }\n+        QueryTranslator translator = new QueryTranslator(queryReferenceTable, sqlDialect);\n \n-                    return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n-                })\n-                .reduce(SQLQueryTemplate::merge)\n-                .orElse(new SQLQueryTemplate(query));\n-\n-        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n-                query,\n-                queryTemplate,\n-                query.getSorting(),\n-                query.getWhereFilter(),\n-                query.getHavingFilter(),\n-                query.getPagination());\n+        return query.accept(translator).build();\n     }\n \n+    /**\n+     * Transforms a client query into a potentially nested/complex query by expanding each metric into\n+     * its respective query plan - and then merging the plans together into a consolidated query.\n+     * @param query The client query.\n+     * @return A query that reflects each metric's individual query plan.\n+     */\n+    private Query expandMetricQueryPlans(Query query) {\n+        QueryPlan mergedPlan = null;\n+\n+        //Expand each metric into its own query plan.  Merge them all together.\n+        for (MetricProjection metricProjection : query.getMetricProjections()) {\n+            QueryPlan queryPlan = metricProjection.resolve();\n+            if (queryPlan != null) {\n+                mergedPlan = queryPlan.merge(mergedPlan);\n+            }\n+        }\n+\n+        QueryPlanTranslator queryPlanTranslator = new QueryPlanTranslator(query);\n+\n+        return (mergedPlan == null)\n+                ? query\n+                : mergedPlan.accept(queryPlanTranslator).build();\n+    }\n \n     /**\n      * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n      * @param stmt Customized Prepared Statement\n+     * @param dialect the SQL dialect\n      */\n-    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt, SQLDialect dialect) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MTg4Mg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488961882", "body": "Why doesn't this use the new runQuery method you added with an identity mapper?", "bodyText": "Why doesn't this use the new runQuery method you added with an identity mapper?", "bodyHTML": "<p dir=\"auto\">Why doesn't this use the new runQuery method you added with an identity mapper?</p>", "author": "aklish", "createdAt": "2020-09-15T20:44:37Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +158,165 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private Connection conn;\n+        private SQLDialect dialect;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+\n+        public void initializeTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n         String queryString = sql.toString();\n-        log.debug(\"SQL Query: \" + queryString);\n-        javax.persistence.Query jpaQuery = entityManager.createNativeQuery(queryString);\n \n         QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n+        NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n         if (pagination != null) {\n-            jpaQuery.setFirstResult(pagination.getOffset());\n-            jpaQuery.setMaxResults(pagination.getLimit());\n+            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n             if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, entityManager));\n+                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n             }\n         }\n \n+        log.debug(\"SQL Query: \" + queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString);\n+\n         // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, jpaQuery);\n+        supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        List<Object> results = new TimedFunction<List<Object>>(\n-                () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n-                \"Running Query: \" + queryString).get();\n+        ResultSet resultSet = new TimedFunction<>(() -> {", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NDk1Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489494953", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-16T14:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MTg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..a49d1f5b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -232,7 +249,7 @@ public class SQLQueryEngine extends QueryEngine {\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<>(() -> {\n+        ResultSet resultSet = new TimedFunction<ResultSet>(() -> {\n             try {\n                 return stmt.executeQuery();\n             } catch (SQLException e) {\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..de44895c1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -258,7 +252,7 @@ public class SQLQueryEngine extends QueryEngine {\n         }, \"Running Query: \" + queryString\n         ).get();\n \n-        resultBuilder.data(new SQLEntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n+        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n", "next_change": {"commit": "ae647b5050b99f6129f4810329d9114408a3c25f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex de44895c1..530d6e25c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -237,29 +225,26 @@ public class SQLQueryEngine extends QueryEngine {\n         }\n \n         log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<ResultSet>(() -> {\n-            try {\n-                return stmt.executeQuery();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n+        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n \n         resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n     private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n+        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -218,37 +215,31 @@ public class SQLQueryEngine extends QueryEngine {\n         NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null) {\n-            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n-            if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-            }\n+        if (returnPageTotals(pagination)) {\n+            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n         }\n \n         log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<>(() -> {\n-            try {\n-                return stmt.executeQuery();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n+        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n \n         resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n     private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n+        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -151,172 +114,84 @@ public class SQLQueryEngine extends QueryEngine {\n         return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n     }\n \n-    /**\n-     * State needed for SQLQueryEngine to execute queries.\n-     */\n-    static class SqlTransaction implements QueryEngine.Transaction {\n-\n-        private Connection conn;\n-        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n-\n-        private void initializeConnection(DataSource dataSource) {\n-            try {\n-                this.conn = dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        public NamedParamPreparedStatement initializeStatement(String namedParamQuery, DataSource dataSource) {\n-            NamedParamPreparedStatement stmt;\n-            try {\n-                if (conn == null || !conn.isValid(10)) {\n-                    initializeConnection(dataSource);\n-                }\n-                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n-                stmts.add(stmt);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-            return stmt;\n-        }\n-\n-        @Override\n-        public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n-        }\n-\n-        @Override\n-        public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n-        }\n-    }\n-\n     @Override\n-    public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n-    }\n-\n-    @Override\n-    public QueryResult executeQuery(Query query, Transaction transaction) {\n-        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-\n-        // Translate the query into SQL.\n-        SQLQuery sql = toSQL(query, dialect);\n-        String queryString = sql.toString();\n+    public Iterable<Object> executeQuery(Query query, boolean useCache) {\n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n+        try {\n+            entityManager = entityManagerFactory.createEntityManager();\n \n-        QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n-        NamedParamPreparedStatement stmt;\n+            // manually begin the transaction\n+            transaction = entityManager.getTransaction();\n+            if (!transaction.isActive()) {\n+                transaction.begin();\n+            }\n \n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-        }\n+            // Translate the query into SQL.\n+            SQLQuery sql = toSQL(query);\n+            log.debug(\"SQL Query: \" + sql);\n \n-        log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n+            javax.persistence.Query jpaQuery = entityManager.createNativeQuery(sql.toString());\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+            Pagination pagination = query.getPagination();\n+            if (pagination != null) {\n+                jpaQuery.setFirstResult(pagination.getOffset());\n+                jpaQuery.setMaxResults(pagination.getLimit());\n \n-        // Run the primary query and log the time spent.\n-        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n+                if (pagination.returnPageTotals()) {\n \n-        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n-        return resultBuilder.build();\n-    }\n+                    SQLQuery paginationSQL = toPageTotalSQL(sql);\n+                    javax.persistence.Query pageTotalQuery =\n+                            entityManager.createNativeQuery(paginationSQL.toString())\n+                                    .setHint(QueryHints.HINT_READONLY, true);\n \n-    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+                    //Supply the query parameters to the query\n+                    supplyFilterQueryParameters(query, pageTotalQuery);\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n+                    //Run the Pagination query and log the time spent.\n+                    long total = new TimedFunction<>(\n+                            () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                            \"Running Query: \" + paginationSQL\n+                    ).get();\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+                    pagination.setPageTotals(total);\n+                }\n+            }\n \n-        // Run the Pagination query and log the time spent.\n-        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n-    }\n+            // Supply the query parameters to the query\n+            supplyFilterQueryParameters(query, jpaQuery);\n \n-    @Override\n-    public String getTableVersion(Table table, Transaction transaction) {\n-\n-        String tableVersion = null;\n-        Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n-        VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n-        if (versionAnnotation != null) {\n-            String versionQueryString = versionAnnotation.sql();\n-            SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-            ConnectionDetails details = getConnectionDetails(table.getDbConnectionName());\n-            DataSource dataSource = details.getDataSource();\n-            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString, dataSource);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n-        }\n-        return tableVersion;\n-    }\n+            // Run the primary query and log the time spent.\n+            List<Object> results = new TimedFunction<>(\n+                    () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n+                    \"Running Query: \" + sql).get();\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+            return new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate();\n+        } finally {\n+            if (transaction != null && transaction.isActive()) {\n+                transaction.commit();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n             }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param dialect SQL dialect to use for this storage.\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public List<String> explain(Query query, SQLDialect dialect) {\n-        List<String> queries = new ArrayList<String>();\n-        SQLQuery sql = toSQL(query, dialect);\n-\n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n-        queries.add(sql.toString());\n-        return queries;\n-    }\n-\n-    @Override\n-    public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n      * @param query the client query.\n-     * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n-    private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+    private SQLQuery toSQL(Query query) {\n+        Set<ColumnProjection> groupByDimensions = new LinkedHashSet<>(query.getGroupByDimensions());\n+        Set<TimeDimensionProjection> timeDimensions = new LinkedHashSet<>(query.getTimeDimensions());\n \n         SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n                 .map(metricProjection -> {\n                     if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n+                        throw new InvalidPredicateException(\n+                                \"Non-SQL metric function on \" + metricProjection.getAlias());\n                     }\n \n                     return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -199,7 +273,7 @@ public class SQLQueryEngine extends QueryEngine {\n                 .reduce(SQLQueryTemplate::merge)\n                 .orElse(new SQLQueryTemplate(query));\n \n-        return new SQLQueryConstructor(referenceTable).resolveTemplate(\n+        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n                 query,\n                 queryTemplate,\n                 query.getSorting(),\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -278,18 +329,18 @@ public class SQLQueryEngine extends QueryEngine {\n                 queryTemplate,\n                 query.getSorting(),\n                 query.getWhereFilter(),\n-                query.getHavingFilter());\n+                query.getHavingFilter(),\n+                query.getPagination());\n     }\n \n \n     /**\n-     * Given a JPA query, replaces any parameters with their values from client query.\n+     * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n-     * @param jpaQuery The JPA query\n+     * @param stmt Customized Prepared Statement\n      */\n-    private void supplyFilterQueryParameters(Query query,\n-                                             javax.persistence.Query jpaQuery) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..25eda7887 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,47 +316,56 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n+        return explain(query, query.getConnectionDetails().getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n-     * @param query the client query.\n+     * @param query the transformed client query.\n      * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n     private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+        SQLReferenceTable queryReferenceTable = new DynamicSQLReferenceTable(referenceTable, query);\n \n-        SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n-                .map(metricProjection -> {\n-                    if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n-                    }\n+        QueryTranslator translator = new QueryTranslator(queryReferenceTable, sqlDialect);\n \n-                    return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n-                })\n-                .reduce(SQLQueryTemplate::merge)\n-                .orElse(new SQLQueryTemplate(query));\n-\n-        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n-                query,\n-                queryTemplate,\n-                query.getSorting(),\n-                query.getWhereFilter(),\n-                query.getHavingFilter(),\n-                query.getPagination());\n+        return query.accept(translator).build();\n     }\n \n+    /**\n+     * Transforms a client query into a potentially nested/complex query by expanding each metric into\n+     * its respective query plan - and then merging the plans together into a consolidated query.\n+     * @param query The client query.\n+     * @return A query that reflects each metric's individual query plan.\n+     */\n+    private Query expandMetricQueryPlans(Query query) {\n+        QueryPlan mergedPlan = null;\n+\n+        //Expand each metric into its own query plan.  Merge them all together.\n+        for (MetricProjection metricProjection : query.getMetricProjections()) {\n+            QueryPlan queryPlan = metricProjection.resolve();\n+            if (queryPlan != null) {\n+                mergedPlan = queryPlan.merge(mergedPlan);\n+            }\n+        }\n+\n+        QueryPlanTranslator queryPlanTranslator = new QueryPlanTranslator(query);\n+\n+        return (mergedPlan == null)\n+                ? query\n+                : mergedPlan.accept(queryPlanTranslator).build();\n+    }\n \n     /**\n      * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n      * @param stmt Customized Prepared Statement\n+     * @param dialect the SQL dialect\n      */\n-    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt, SQLDialect dialect) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NTgwMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488965800", "body": "InitializeTransaction is called twice in this file (once here and once to get the table version).  The transaction should only be initialized once because it involves getting a DB connection.  I recommend we have state about whether or not  the transaction is initialized.  One other possibility is to do the initialization lazily inside the Transaction when a new statement is created.  Then you could remove the need to initialize both the transaction and the statement in multiple places.", "bodyText": "InitializeTransaction is called twice in this file (once here and once to get the table version).  The transaction should only be initialized once because it involves getting a DB connection.  I recommend we have state about whether or not  the transaction is initialized.  One other possibility is to do the initialization lazily inside the Transaction when a new statement is created.  Then you could remove the need to initialize both the transaction and the statement in multiple places.", "bodyHTML": "<p dir=\"auto\">InitializeTransaction is called twice in this file (once here and once to get the table version).  The transaction should only be initialized once because it involves getting a DB connection.  I recommend we have state about whether or not  the transaction is initialized.  One other possibility is to do the initialization lazily inside the Transaction when a new statement is created.  Then you could remove the need to initialize both the transaction and the statement in multiple places.</p>", "author": "aklish", "createdAt": "2020-09-15T20:52:10Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +158,165 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private Connection conn;\n+        private SQLDialect dialect;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+\n+        public void initializeTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n+        sqlTransaction.initializeTransaction(dataSource, dialect);", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NTg2Nw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489495867", "bodyText": "updated to initialization lazily inside the Transaction when a new statement is created.", "author": "rishi-aga", "createdAt": "2020-09-16T14:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NTgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..a49d1f5b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -186,29 +172,60 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.cancel();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n+        return new SqlTransaction(defaultDataSource, defaultDialect);\n+    }\n+\n+    @Override\n+    public Transaction beginTransaction(String dbConnectionName) {\n+        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        return new SqlTransaction(dataSource, dialect);\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n+        SQLDialect dialect = sqlTransaction.dialect;\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..af77ce49b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b..5dbe48e69 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,17 +206,8 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9aff2a5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -206,8 +204,9 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "ae647b5050b99f6129f4810329d9114408a3c25f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9aff2a5f8..530d6e25c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,7 +208,6 @@ public class SQLQueryEngine extends QueryEngine {\n         ConnectionDetails details = getConnectionDetails(connectionName);\n         DataSource dataSource = details.getDataSource();\n         SQLDialect dialect = details.getDialect();\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e69..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -206,9 +203,9 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -151,172 +114,84 @@ public class SQLQueryEngine extends QueryEngine {\n         return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n     }\n \n-    /**\n-     * State needed for SQLQueryEngine to execute queries.\n-     */\n-    static class SqlTransaction implements QueryEngine.Transaction {\n-\n-        private Connection conn;\n-        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n-\n-        private void initializeConnection(DataSource dataSource) {\n-            try {\n-                this.conn = dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        public NamedParamPreparedStatement initializeStatement(String namedParamQuery, DataSource dataSource) {\n-            NamedParamPreparedStatement stmt;\n-            try {\n-                if (conn == null || !conn.isValid(10)) {\n-                    initializeConnection(dataSource);\n-                }\n-                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n-                stmts.add(stmt);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-            return stmt;\n-        }\n-\n-        @Override\n-        public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n-        }\n-\n-        @Override\n-        public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n-        }\n-    }\n-\n     @Override\n-    public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n-    }\n-\n-    @Override\n-    public QueryResult executeQuery(Query query, Transaction transaction) {\n-        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-\n-        // Translate the query into SQL.\n-        SQLQuery sql = toSQL(query, dialect);\n-        String queryString = sql.toString();\n+    public Iterable<Object> executeQuery(Query query, boolean useCache) {\n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n+        try {\n+            entityManager = entityManagerFactory.createEntityManager();\n \n-        QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n-        NamedParamPreparedStatement stmt;\n+            // manually begin the transaction\n+            transaction = entityManager.getTransaction();\n+            if (!transaction.isActive()) {\n+                transaction.begin();\n+            }\n \n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-        }\n+            // Translate the query into SQL.\n+            SQLQuery sql = toSQL(query);\n+            log.debug(\"SQL Query: \" + sql);\n \n-        log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n+            javax.persistence.Query jpaQuery = entityManager.createNativeQuery(sql.toString());\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+            Pagination pagination = query.getPagination();\n+            if (pagination != null) {\n+                jpaQuery.setFirstResult(pagination.getOffset());\n+                jpaQuery.setMaxResults(pagination.getLimit());\n \n-        // Run the primary query and log the time spent.\n-        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n+                if (pagination.returnPageTotals()) {\n \n-        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n-        return resultBuilder.build();\n-    }\n+                    SQLQuery paginationSQL = toPageTotalSQL(sql);\n+                    javax.persistence.Query pageTotalQuery =\n+                            entityManager.createNativeQuery(paginationSQL.toString())\n+                                    .setHint(QueryHints.HINT_READONLY, true);\n \n-    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        ConnectionDetails details = getConnectionDetails(connectionName);\n-        DataSource dataSource = details.getDataSource();\n-        SQLDialect dialect = details.getDialect();\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+                    //Supply the query parameters to the query\n+                    supplyFilterQueryParameters(query, pageTotalQuery);\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n+                    //Run the Pagination query and log the time spent.\n+                    long total = new TimedFunction<>(\n+                            () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n+                            \"Running Query: \" + paginationSQL\n+                    ).get();\n \n-        // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, stmt);\n+                    pagination.setPageTotals(total);\n+                }\n+            }\n \n-        // Run the Pagination query and log the time spent.\n-        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n-    }\n+            // Supply the query parameters to the query\n+            supplyFilterQueryParameters(query, jpaQuery);\n \n-    @Override\n-    public String getTableVersion(Table table, Transaction transaction) {\n-\n-        String tableVersion = null;\n-        Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n-        VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n-        if (versionAnnotation != null) {\n-            String versionQueryString = versionAnnotation.sql();\n-            SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-            ConnectionDetails details = getConnectionDetails(table.getDbConnectionName());\n-            DataSource dataSource = details.getDataSource();\n-            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString, dataSource);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n-        }\n-        return tableVersion;\n-    }\n+            // Run the primary query and log the time spent.\n+            List<Object> results = new TimedFunction<>(\n+                    () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n+                    \"Running Query: \" + sql).get();\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+            return new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate();\n+        } finally {\n+            if (transaction != null && transaction.isActive()) {\n+                transaction.commit();\n+            }\n+            if (entityManager != null) {\n+                entityManager.close();\n             }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param dialect SQL dialect to use for this storage.\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public List<String> explain(Query query, SQLDialect dialect) {\n-        List<String> queries = new ArrayList<String>();\n-        SQLQuery sql = toSQL(query, dialect);\n-\n-        Pagination pagination = query.getPagination();\n-        if (returnPageTotals(pagination)) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n-        queries.add(sql.toString());\n-        return queries;\n-    }\n-\n-    @Override\n-    public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n      * @param query the client query.\n-     * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n-    private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+    private SQLQuery toSQL(Query query) {\n+        Set<ColumnProjection> groupByDimensions = new LinkedHashSet<>(query.getGroupByDimensions());\n+        Set<TimeDimensionProjection> timeDimensions = new LinkedHashSet<>(query.getTimeDimensions());\n \n         SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n                 .map(metricProjection -> {\n                     if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n+                        throw new InvalidPredicateException(\n+                                \"Non-SQL metric function on \" + metricProjection.getAlias());\n                     }\n \n                     return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -199,7 +273,7 @@ public class SQLQueryEngine extends QueryEngine {\n                 .reduce(SQLQueryTemplate::merge)\n                 .orElse(new SQLQueryTemplate(query));\n \n-        return new SQLQueryConstructor(referenceTable).resolveTemplate(\n+        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n                 query,\n                 queryTemplate,\n                 query.getSorting(),\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -278,18 +329,18 @@ public class SQLQueryEngine extends QueryEngine {\n                 queryTemplate,\n                 query.getSorting(),\n                 query.getWhereFilter(),\n-                query.getHavingFilter());\n+                query.getHavingFilter(),\n+                query.getPagination());\n     }\n \n \n     /**\n-     * Given a JPA query, replaces any parameters with their values from client query.\n+     * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n-     * @param jpaQuery The JPA query\n+     * @param stmt Customized Prepared Statement\n      */\n-    private void supplyFilterQueryParameters(Query query,\n-                                             javax.persistence.Query jpaQuery) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..25eda7887 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,47 +316,56 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     public List<String> explain(Query query) {\n-        String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getConnectionDetails(connectionName).getDialect());\n+        return explain(query, query.getConnectionDetails().getDialect());\n     }\n \n     /**\n      * Translates the client query into SQL.\n      *\n-     * @param query the client query.\n+     * @param query the transformed client query.\n      * @param sqlDialect the SQL dialect.\n      * @return the SQL query.\n      */\n     private SQLQuery toSQL(Query query, SQLDialect sqlDialect) {\n+        SQLReferenceTable queryReferenceTable = new DynamicSQLReferenceTable(referenceTable, query);\n \n-        SQLQueryTemplate queryTemplate = query.getMetrics().stream()\n-                .map(metricProjection -> {\n-                    if (!(metricProjection.getColumn().getMetricFunction() instanceof SQLMetricFunction)) {\n-                        throw new BadRequestException(\"Non-SQL metric function on \" + metricProjection.getAlias());\n-                    }\n+        QueryTranslator translator = new QueryTranslator(queryReferenceTable, sqlDialect);\n \n-                    return ((SQLMetric) metricProjection.getColumn()).resolve(query, metricProjection, referenceTable);\n-                })\n-                .reduce(SQLQueryTemplate::merge)\n-                .orElse(new SQLQueryTemplate(query));\n-\n-        return new SQLQueryConstructor(referenceTable, sqlDialect).resolveTemplate(\n-                query,\n-                queryTemplate,\n-                query.getSorting(),\n-                query.getWhereFilter(),\n-                query.getHavingFilter(),\n-                query.getPagination());\n+        return query.accept(translator).build();\n     }\n \n+    /**\n+     * Transforms a client query into a potentially nested/complex query by expanding each metric into\n+     * its respective query plan - and then merging the plans together into a consolidated query.\n+     * @param query The client query.\n+     * @return A query that reflects each metric's individual query plan.\n+     */\n+    private Query expandMetricQueryPlans(Query query) {\n+        QueryPlan mergedPlan = null;\n+\n+        //Expand each metric into its own query plan.  Merge them all together.\n+        for (MetricProjection metricProjection : query.getMetricProjections()) {\n+            QueryPlan queryPlan = metricProjection.resolve();\n+            if (queryPlan != null) {\n+                mergedPlan = queryPlan.merge(mergedPlan);\n+            }\n+        }\n+\n+        QueryPlanTranslator queryPlanTranslator = new QueryPlanTranslator(query);\n+\n+        return (mergedPlan == null)\n+                ? query\n+                : mergedPlan.accept(queryPlanTranslator).build();\n+    }\n \n     /**\n      * Given a Prepared Statement, replaces any parameters with their values from client query.\n      *\n      * @param query The client query\n      * @param stmt Customized Prepared Statement\n+     * @param dialect the SQL dialect\n      */\n-    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt) {\n+    private void supplyFilterQueryParameters(Query query, NamedParamPreparedStatement stmt, SQLDialect dialect) {\n \n         Collection<FilterPredicate> predicates = new ArrayList<>();\n         if (query.getWhereFilter() != null) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NzE0OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488967149", "body": "It might be better to do the appending outside the dialect.  If there are nested subqueries, we may want to apply offset and limit on an inner query.  The calling code will know how to stitch in the fragment.", "bodyText": "It might be better to do the appending outside the dialect.  If there are nested subqueries, we may want to apply offset and limit on an inner query.  The calling code will know how to stitch in the fragment.", "bodyHTML": "<p dir=\"auto\">It might be better to do the appending outside the dialect.  If there are nested subqueries, we may want to apply offset and limit on an inner query.  The calling code will know how to stitch in the fragment.</p>", "author": "aklish", "createdAt": "2020-09-15T20:54:49Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java", "diffHunk": "@@ -9,12 +9,22 @@\n  * Common code for {@link SQLDialect} implementations.\n  */\n public abstract class AbstractSqlDialect implements SQLDialect {\n+\n+    public static final String OFFSET = \" OFFSET \";\n+    public static final String LIMIT = \" LIMIT \";\n+\n     @Override\n     public boolean useAliasForOrderByClause() {\n         return false;\n     }\n \n+    @Override\n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n     }\n+\n+    @Override\n+    public String appendOffsetLimit(String sql, int offset, int limit) {\n+        return sql + OFFSET + offset + LIMIT + limit;", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2NjAzMQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489666031", "bodyText": "this method is now called from SQLQueryConstructor.", "author": "rishi-aga", "createdAt": "2020-09-16T18:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NzE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b..2c385ae13 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -25,6 +21,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n     }\n }\n", "next_change": {"commit": "664ed6b057089f2015af078948af6d6d7d7a2a58", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 2c385ae13..5c166ac4b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -21,6 +25,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n+        return sql + OFFSET + offset + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b..46e7a1b70 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -24,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+    public String appendOffsetLimit(int offset, int limit) {\n+        return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "083c4cc27a896d73fcd8456379d014f07c56f304", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 46e7a1b70..f5f224bb8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -25,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(int offset, int limit) {\n+    public String generateOffsetLimitClause(int offset, int limit) {\n         return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b..f5f224bb8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -24,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+    public String generateOffsetLimitClause(int offset, int limit) {\n+        return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex f5f224bb8..3ee363e26 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -10,22 +10,7 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n  */\n public abstract class AbstractSqlDialect implements SQLDialect {\n \n-    public static final String OFFSET = \"OFFSET \";\n-    public static final String LIMIT = \"LIMIT \";\n-    public static final char SPACE = ' ';\n-\n-    @Override\n-    public boolean useAliasForOrderByClause() {\n-        return false;\n-    }\n-\n-    @Override\n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n     }\n-\n-    @Override\n-    public String generateOffsetLimitClause(int offset, int limit) {\n-        return OFFSET + offset + SPACE + LIMIT + limit;\n-    }\n }\n", "next_change": {"commit": "2a9f6d4e8fa5fb35d46af564c61b6528197828f3", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 3ee363e26..4855fa0a2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -9,6 +9,10 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n  * Common code for {@link SQLDialect} implementations.\n  */\n public abstract class AbstractSqlDialect implements SQLDialect {\n+    @Override\n+    public boolean useAliasForOrderByClause() {\n+        return false;\n+    }\n \n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 4855fa0a2..f5f224bb8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -9,12 +9,23 @@ package com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects;\n  * Common code for {@link SQLDialect} implementations.\n  */\n public abstract class AbstractSqlDialect implements SQLDialect {\n+\n+    public static final String OFFSET = \"OFFSET \";\n+    public static final String LIMIT = \"LIMIT \";\n+    public static final char SPACE = ' ';\n+\n     @Override\n     public boolean useAliasForOrderByClause() {\n         return false;\n     }\n \n+    @Override\n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n     }\n+\n+    @Override\n+    public String generateOffsetLimitClause(int offset, int limit) {\n+        return OFFSET + offset + SPACE + LIMIT + limit;\n+    }\n }\n", "next_change": {"commit": "c6f23dd421705b7a93be8823310143e6b631c7e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex f5f224bb8..fe9c81249 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -28,4 +31,14 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     public String generateOffsetLimitClause(int offset, int limit) {\n         return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n+\n+    @Override\n+    public char getBeginQuote() {\n+        return BACKTICK;\n+    }\n+\n+    @Override\n+    public char getEndQuote() {\n+        return BACKTICK;\n+    }\n }\n", "next_change": {"commit": "47f08461f94a04cde2a4356f90fa1ae5a5386573", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex fe9c81249..571470e3a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -41,4 +47,37 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     public char getEndQuote() {\n         return BACKTICK;\n     }\n+\n+    @Override\n+    public String getJoinKeyword(JoinType joinType) {\n+\n+        switch (joinType) {\n+            case LEFT:\n+                return getLeftJoinKeyword();\n+            case INNER:\n+                return getInnerJoinKeyword();\n+            case FULL:\n+                return getFullJoinKeyword();\n+            case CROSS:\n+                return getCrossJoinKeyword();\n+            default:\n+                return getLeftJoinKeyword();\n+        }\n+    }\n+\n+    public String getLeftJoinKeyword() {\n+        return LEFT_JOIN_SYNTAX;\n+    }\n+\n+    public String getInnerJoinKeyword() {\n+        return INNER_JOIN_SYNTAX;\n+    }\n+\n+    public String getFullJoinKeyword() {\n+        return FULL_JOIN_SYNTAX;\n+    }\n+\n+    public String getCrossJoinKeyword() {\n+        return CROSS_JOIN_SYNTAX;\n+    }\n }\n", "next_change": {"commit": "234905d972c491934ce3774771c9733193b45007", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 571470e3a..c9ed49cc2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -80,4 +126,9 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     public String getCrossJoinKeyword() {\n         return CROSS_JOIN_SYNTAX;\n     }\n+\n+    @Override\n+    public SupportedAggregation getSupportedAggregation(String name) {\n+        return supportedAggregations.getOrDefault(name.toUpperCase(Locale.ENGLISH), null);\n+    }\n }\n", "next_change": {"commit": "89619d233aa877230f49bf962f979a0af34f941f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex c9ed49cc2..0434e18ae 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -131,4 +300,9 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     public SupportedAggregation getSupportedAggregation(String name) {\n         return supportedAggregations.getOrDefault(name.toUpperCase(Locale.ENGLISH), null);\n     }\n+\n+    @Override\n+    public SupportedOperation getSupportedOperation(String name) {\n+        return supportedOperations.getOrDefault(name.toUpperCase(Locale.ENGLISH), null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "2a9f6d4e8fa5fb35d46af564c61b6528197828f3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "use alias for order by (#1515)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "47f08461f94a04cde2a4356f90fa1ae5a5386573", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Join Type support in aggregation store. (#1712)"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "89619d233aa877230f49bf962f979a0af34f941f", "committedDate": "2021-04-13 09:47:30 -0500", "message": "Adding explicit support for dialect operators to help determine when column nesting is possible. (#1996)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2Nzg0OA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488967848", "body": "TestInfo looks unused.", "bodyText": "TestInfo looks unused.", "bodyHTML": "<p dir=\"auto\">TestInfo looks unused.</p>", "author": "aklish", "createdAt": "2020-09-15T20:56:11Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -74,7 +76,7 @@ public static void beforeAllTests() {\n     }\n \n     @BeforeEach\n-    public void setUp() {\n+    public void setUp(TestInfo info) {", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4Mzc2NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488983765", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-15T21:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2Nzg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 38be16031..509600f16 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,7 +77,9 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n+            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+        }\n     }\n \n     @Test\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16..7420c9fee 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,9 +80,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n-            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n-        }\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n     @Test\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee..4b57cffa4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -79,7 +75,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @BeforeEach\n-    public void setUp(TestInfo info) {\n+    public void setUp() {\n         when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 38be16031..4b57cffa4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -76,7 +75,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @BeforeEach\n-    public void setUp(TestInfo info) {\n+    public void setUp() {\n         when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 4b57cffa4..dcc2a7c77 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -81,17 +72,10 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @Test\n     public void loadObjectsPopulatesCache() {\n-        Mockito.reset(queryLogger);\n-\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n-                .fromClause(query.getTable().getName())\n-                .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n-        when(queryEngine.explain(query)).thenReturn(Arrays.asList(myQuery.toString()));\n-        AggregationDataStoreTransaction transaction =\n-                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex dcc2a7c77..e25e3dcf3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -72,10 +79,17 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @Test\n     public void loadObjectsPopulatesCache() {\n+        Mockito.reset(queryLogger);\n+\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n+        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                .fromClause(query.getTable().getName())\n+                .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n-        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        AggregationDataStoreTransaction transaction =\n+                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex e25e3dcf3..b7bbd2ad0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -87,7 +88,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n                 .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n-        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        when(queryEngine.explain(query)).thenReturn(Arrays.asList(myQuery.toString()));\n         AggregationDataStoreTransaction transaction =\n                 new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n", "next_change": {"commit": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex b7bbd2ad0..86273165c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -84,7 +85,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n         SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n-                .fromClause(query.getTable().getName())\n+                .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n         when(queryEngine.executeQuery(query, qeTransaction)).thenReturn(queryResult);\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 86273165c..3f75b1617 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -84,7 +84,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         Mockito.reset(queryLogger);\n \n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+        SQLQuery myQuery = SQLQuery.builder()\n                 .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n", "next_change": {"commit": "cd008a45ad379004b92c5114150016027aa07b80", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 3f75b1617..7e6187c6a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -84,7 +82,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         Mockito.reset(queryLogger);\n \n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder()\n+        NativeQuery myQuery = NativeQuery.builder()\n                 .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex dcc2a7c77..e25e3dcf3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -84,15 +98,29 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         Mockito.verify(cache).get(cacheKey);\n         Mockito.verify(cache).put(cacheKey, queryResult);\n         Mockito.verifyNoMoreInteractions(cache);\n+        Mockito.verify(queryLogger, times(1)).acceptQuery(\n+                Mockito.eq(scope.getRequestId()),\n+                any(), any(), any(), any(), any());\n+        Mockito.verify(queryLogger, times(1)).processQuery(\n+                Mockito.eq(scope.getRequestId()), any(), any(), Mockito.eq(false));\n+        Mockito.verify(queryLogger, times(1)).completeQuery(\n+                Mockito.eq(scope.getRequestId()), any());\n     }\n \n     @Test\n     public void loadObjectsUsesCache() {\n+        Mockito.reset(queryLogger);\n+\n         String cacheKey = \"foo;\" + queryKey;\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n+        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+                .fromClause(query.getTable().getName())\n+                .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n-        AggregationDataStoreTransaction transaction = new MyAggregationDataStoreTransaction(queryEngine, cache);\n+        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        AggregationDataStoreTransaction transaction =\n+                new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n \n         assertEquals(DATA, transaction.loadObjects(entityProjection, scope));\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex e25e3dcf3..b7bbd2ad0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -118,7 +119,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n                 .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n-        when(queryEngine.explain(query)).thenReturn(myQuery.toString());\n+        when(queryEngine.explain(query)).thenReturn(Arrays.asList(myQuery.toString()));\n         AggregationDataStoreTransaction transaction =\n                 new MyAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n         EntityProjection entityProjection = EntityProjection.builder().type(PlayerStats.class).build();\n", "next_change": {"commit": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex b7bbd2ad0..86273165c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -115,7 +116,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n         String cacheKey = \"foo;\" + queryKey;\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n         SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n-                .fromClause(query.getTable().getName())\n+                .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n         when(queryEngine.getTableVersion(playerStatsTable, qeTransaction)).thenReturn(\"foo\");\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 86273165c..3f75b1617 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -115,7 +115,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n         String cacheKey = \"foo;\" + queryKey;\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder().clientQuery(query)\n+        SQLQuery myQuery = SQLQuery.builder()\n                 .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n", "next_change": {"commit": "cd008a45ad379004b92c5114150016027aa07b80", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 3f75b1617..7e6187c6a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -115,7 +113,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n         String cacheKey = \"foo;\" + queryKey;\n         QueryResult queryResult = QueryResult.builder().data(DATA).build();\n-        SQLQuery myQuery = SQLQuery.builder()\n+        NativeQuery myQuery = NativeQuery.builder()\n                 .fromClause(playerStatsTable.getName())\n                 .projectionClause(\" \").build();\n         when(cache.get(cacheKey)).thenReturn(queryResult);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "cc0dffc51428b5b9ee255896169de91c69af0314", "committedDate": "2021-09-13 14:27:56 -0500", "message": "AggregationStore: Templated filter column arguments (#2297)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NjAzMg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488976032", "body": "Why does Async need the DBPassword config?", "bodyText": "Why does Async need the DBPassword config?", "bodyHTML": "<p dir=\"auto\">Why does Async need the DBPassword config?</p>", "author": "aklish", "createdAt": "2020-09-15T21:12:21Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java", "diffHunk": "@@ -39,6 +39,7 @@\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n+@Import(DBPasswordExtractorSetup.class)", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4ODg4OA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488988888", "bodyText": "this test uses shared application.yaml where dynamic config is enabled so it tries to parse DB and hjson and create DataSource object.\nWithout it, it will run fine independently but will fail when all tests are run together for incorrect password as it will use default implementation.", "author": "rishi-aga", "createdAt": "2020-09-15T21:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NjAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA2OTA4Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489069083", "bodyText": "this is no longer required after removing db connection hjson", "author": "rishi-aga", "createdAt": "2020-09-15T23:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NjAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\nindex c30305f7b..287843268 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n", "chunk": "@@ -39,7 +39,6 @@ import javax.ws.rs.core.MediaType;\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n-@Import(DBPasswordExtractorSetup.class)\n public class AsyncTest extends IntegrationTest {\n \n     @Test\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\nindex 287843268..c30305f7b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n", "chunk": "@@ -39,6 +39,7 @@ import javax.ws.rs.core.MediaType;\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n+@Import(DBPasswordExtractorSetup.class)\n public class AsyncTest extends IntegrationTest {\n \n     @Test\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\nindex c30305f7b..0e7eff351 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n", "chunk": "@@ -39,7 +38,6 @@ import javax.ws.rs.core.MediaType;\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n-@Import(DBPasswordExtractorSetup.class)\n public class AsyncTest extends IntegrationTest {\n \n     @Test\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\nindex c30305f7b..287843268 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n", "chunk": "@@ -39,7 +39,6 @@ import javax.ws.rs.core.MediaType;\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n-@Import(DBPasswordExtractorSetup.class)\n public class AsyncTest extends IntegrationTest {\n \n     @Test\n", "next_change": {"commit": "34fbcd282798c6668f61ff35202c3c2aa783857f", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\nindex 287843268..98760730e 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n", "chunk": "@@ -34,11 +32,20 @@ import javax.ws.rs.core.MediaType;\n  * Basic functional tests to test Async service setup, JSONAPI and GRAPHQL endpoints.\n  */\n @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n-@Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n-        statements = \"INSERT INTO ArtifactGroup (name, commonName, description, deprecated) VALUES\\n\"\n-                + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n-@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n-        statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n+@Sql(\n+        executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = \"classpath:db/test_init.sql\",\n+        statements = {\n+                \"INSERT INTO ArtifactGroup (name, commonName, description, deprecated) VALUES\\n\"\n+                    + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\",\n+                \"INSERT INTO Stats (id, measure, dimension) VALUES\\n\"\n+                    + \"\\t\\t(1,100,'Foo'),\"\n+                    + \"\\t\\t(2,150,'Bar');\",\n+                \"INSERT INTO PlayerStats (name, highScore, countryId, createdOn, updatedOn) VALUES\\n\"\n+                    + \"\\t\\t('Sachin',100, 1, '2020-01-01', now());\",\n+                \"INSERT INTO PlayerCountry (id, isoCode) VALUES\\n\"\n+                    + \"\\t\\t(1, 'IND');\"\n+})\n public class AsyncTest extends IntegrationTest {\n \n     @Test\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "78619ef065965a1ee0d9fcd90192d70382467c90", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Carbon 167 Async Enhancements Embeddable (#1353)"}, {"oid": "2e6cc79915eae3bac99c8ff6f1dadcfc84274ca6", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x - Async Tests, Break loop when fail (#1422)"}, {"oid": "c823f5a24efd81298d5fdd0ffc1657be7572b2b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5- Unify request ids (#1423)"}, {"oid": "0ce21e5e6020cd53bdfeb5e6108c83d6aa269ed3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data Export - Model Changes (#1524)"}, {"oid": "6227ce4839efe4607e3604f9abf85e031b44cdc9", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async model Spec Changes  (#1584)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "34fbcd282798c6668f61ff35202c3c2aa783857f", "committedDate": "2021-02-05 12:13:44 -0600", "message": "TableExport Spring Controller (#1811)"}, {"oid": "5283569e556181cdc145f0090eac74ee6a9d3e1c", "committedDate": "2021-02-11 11:27:08 -0600", "message": "Issue#1798 Remove Singleton Pattern for Async Service Classes (#1831)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "59f0c3cafed60c462b82e13e45cd0664afa7b7cf", "committedDate": "2021-02-23 11:09:48 -0600", "message": "Cleanup tests (#1856)"}, {"oid": "7a11ee300605ed0130d89a036ed221d49f1b1d9c", "committedDate": "2021-03-18 11:53:42 -0500", "message": "Agg Store Model Changes for Parameterized Metric Support (#1921)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "e722d3e2ac0acf976920871dd0a52a14f2cfd545", "committedDate": "2021-05-10 15:19:00 -0500", "message": "Refactor tableSource for Column and Argument (#2075)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "4caaae234214edf6a61bea57531de79520604d54", "committedDate": "2022-01-06 09:20:20 -0600", "message": "File Extension Support for Export Attachments (#2475)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "e570df51218d29e6625a1d91c6f8d5b7f8642526", "committedDate": "2023-05-29 17:38:29 -0500", "message": "Add Atomic Operations Support (#2979)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzgwOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488977808", "body": "Does Spring provide the DataSource for us?", "bodyText": "Does Spring provide the DataSource for us?", "bodyHTML": "<p dir=\"auto\">Does Spring provide the DataSource for us?</p>", "author": "aklish", "createdAt": "2020-09-15T21:16:04Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -159,18 +185,18 @@ public void inject(Object entity) {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+    public QueryEngine buildQueryEngine(DataSource defaultDataSource,", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4NjI4NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488986285", "bodyText": "yes, we are not creating DataSource anywhere.", "author": "rishi-aga", "createdAt": "2020-09-15T21:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba088..358307c09 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -185,18 +159,18 @@ public class ElideAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n+        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n-                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n+            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n         } else {\n-            MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            metaDataStore = new MetaDataStore();\n         }\n+\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n     }\n \n     /**\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 358307c09..88c766893 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -159,18 +184,18 @@ public class ElideAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n-        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n-            metaDataStore = new MetaDataStore();\n+            MetaDataStore metaDataStore = new MetaDataStore();\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n         }\n-\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n     }\n \n     /**\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 88c766893..a20848f89 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -186,15 +184,17 @@ public class ElideAutoConfiguration {\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n+                    throws ClassNotFoundException {\n \n+        ConnectionDetails defaultConnectionDetails =\n+                        new ConnectionDetails(defaultDataSource, settings.getAggregationStore().getDefaultDialect());\n         if (isDynamicConfigEnabled(settings)) {\n             MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n                             dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n             MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba088..bb259e966 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -189,13 +186,15 @@ public class ElideAutoConfiguration {\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n+        ConnectionDetails defaultConnectionDetails =\n+                        new ConnectionDetails(defaultDataSource, settings.getAggregationStore().getDefaultDialect());\n         if (isDynamicConfigEnabled(settings)) {\n             MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n                             dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n             MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n         }\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bb259e966..102e34fbf 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -181,92 +140,52 @@ public class ElideAutoConfiguration {\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n-        ConnectionDetails defaultConnectionDetails =\n-                        new ConnectionDetails(defaultDataSource, settings.getAggregationStore().getDefaultDialect());\n-        if (isDynamicConfigEnabled(settings)) {\n-            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n-                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n+        MetaDataStore metaDataStore = null;\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n         } else {\n-            MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n+            metaDataStore = new MetaDataStore();\n         }\n+\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n     }\n \n     /**\n      * Creates the DataStore Elide.  Override to use a different store.\n      * @param entityManagerFactory The JPA factory which creates entity managers.\n      * @param queryEngine QueryEngine instance for aggregation data store.\n-     * @param compiler ElideDynamicEntityCompiler.\n+     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n      * @param settings Elide configuration settings.\n      * @return An instance of a JPA DataStore.\n      * @throws ClassNotFoundException Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public DataStore buildDataStore(EntityManagerFactory entityManagerFactory,\n-                                    @Autowired(required = false) QueryEngine queryEngine,\n-                                    @Autowired(required = false) ElideDynamicEntityCompiler compiler,\n-                                    ElideConfigProperties settings,\n-                                    @Autowired(required = false) Cache cache,\n-                                    @Autowired(required = false) QueryLogger querylogger)\n+    public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n+        AggregationDataStore aggregationDataStore = null;\n \n-        JpaDataStore jpaDataStore = new JpaDataStore(entityManagerFactory::createEntityManager,\n-                                                     (em) -> { return new NonJtaTransaction(em, txCancel); });\n-\n-        if (isAggregationStoreEnabled(settings)) {\n-            AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder =\n-                            AggregationDataStore.builder().queryEngine(queryEngine);\n-            if (isDynamicConfigEnabled(settings)) {\n-                Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n-                annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n-            }\n-            aggregationDataStoreBuilder.cache(cache);\n-            aggregationDataStoreBuilder.queryLogger(querylogger);\n-            AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n-\n-            // meta data store needs to be put at first to populate meta data models\n-            return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n+            annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClass);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n         }\n \n-        return jpaDataStore;\n-    }\n+        JpaDataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                    (em -> { return new NonJtaTransaction(em); }));\n \n-    /**\n-     * Creates a query result cache to be used by {@link #buildDataStore}, or null if cache is to be disabled.\n-     * @param settings Elide configuration settings.\n-     * @return An instance of a query cache, or null.\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public Cache buildQueryCache(ElideConfigProperties settings) {\n-        CaffeineCache cache = null;\n-        if (settings.getQueryCacheMaximumEntries() > 0) {\n-            cache = new CaffeineCache(settings.getQueryCacheMaximumEntries());\n-            if (meterRegistry != null) {\n-                CaffeineCacheMetrics.monitor(meterRegistry, cache.getImplementation(), \"elideQueryCache\");\n-            }\n-        }\n-        return cache;\n-    }\n-\n-    /**\n-     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation.\n-     * @return The default Noop QueryLogger.\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryLogger buildQueryLogger() {\n-        return new NoopQueryLogger();\n+        // meta data store needs to be put at first to populate meta data models\n+        return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n     }\n \n     /**\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 102e34fbf..e0dcca581 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -169,20 +175,19 @@ public class ElideAutoConfiguration {\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n-        AggregationDataStore aggregationDataStore = null;\n-\n-        if (settings.getDynamicConfig().isEnabled()) {\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n+        if (isDynamicConfigEnabled(settings)) {\n             ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n             Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClass);\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(queryEngine);\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n         }\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em -> { return new NonJtaTransaction(em); }));\n+                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex e0dcca581..4d65a4e49 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -183,16 +191,34 @@ public class ElideAutoConfiguration {\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n             aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n         }\n+        aggregationDataStoreBuilder.cache(cache);\n         AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n-        JpaDataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n+        JpaDataStore jpaDataStore = new JpaDataStore(entityManagerFactory::createEntityManager,\n+                                                     (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n     }\n \n+    /**\n+     * Creates a query result cache to be used by {@link #buildDataStore}, or null if cache is to be disabled.\n+     * @param settings Elide configuration settings.\n+     * @return An instance of a query cache, or null.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public Cache buildQueryCache(ElideConfigProperties settings) {\n+        CaffeineCache cache = null;\n+        if (settings.getQueryCacheMaximumEntries() > 0) {\n+            cache = new CaffeineCache(settings.getQueryCacheMaximumEntries());\n+            if (meterRegistry != null) {\n+                CaffeineCacheMetrics.monitor(meterRegistry, cache.getImplementation(), \"elideQueryCache\");\n+            }\n+        }\n+        return cache;\n+    }\n+\n     /**\n      * Creates a singular swagger document for JSON-API.\n      * @param dictionary Contains the static metadata about Elide models.\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 4d65a4e49..e498edf4b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -219,6 +228,16 @@ public class ElideAutoConfiguration {\n         return cache;\n     }\n \n+    /**\n+     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation\n+     * @return The default Noop QueryLogger.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public QueryLogger buildQueryLogger() {\n+        return new NoopQueryLogger();\n+    }\n+\n     /**\n      * Creates a singular swagger document for JSON-API.\n      * @param dictionary Contains the static metadata about Elide models.\n", "next_change": {"commit": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex e498edf4b..fcf60bbf0 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -234,6 +239,7 @@ public class ElideAutoConfiguration {\n      */\n     @Bean\n     @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryLogger buildQueryLogger() {\n         return new NoopQueryLogger();\n     }\n", "next_change": {"commit": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex fcf60bbf0..72cad9375 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -234,14 +261,14 @@ public class ElideAutoConfiguration {\n     }\n \n     /**\n-     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation\n+     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation.\n      * @return The default Noop QueryLogger.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryLogger buildQueryLogger() {\n-        return new NoopQueryLogger();\n+        return new Slf4jQueryLogger();\n     }\n \n     /**\n", "next_change": {"commit": "c38eb980af7f953202cb53faaed14595d3709ed9", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 72cad9375..5ef33d35f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -273,22 +436,46 @@ public class ElideAutoConfiguration {\n \n     /**\n      * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models.\n+     * @param elide Singleton elide instance.\n      * @param settings Elide configuration settings.\n      * @return An instance of a JPA DataStore.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public Swagger buildSwagger(EntityDictionary dictionary, ElideConfigProperties settings) {\n+    @ConditionalOnProperty(name = \"elide.swagger.enabled\", havingValue = \"true\")\n+    @RefreshScope\n+    public SwaggerController.SwaggerRegistrations buildSwagger(\n+            RefreshableElide elide,\n+            ElideConfigProperties settings\n+    ) {\n+        EntityDictionary dictionary = elide.getElide().getElideSettings().getDictionary();\n         Info info = new Info()\n                 .title(settings.getSwagger().getName())\n                 .version(settings.getSwagger().getVersion());\n \n         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info).withLegacyFilterDialect(false);\n+        return new SwaggerController.SwaggerRegistrations(\n+                builder.build().basePath(settings.getJsonApi().getPath())\n+        );\n+    }\n \n-        Swagger swagger = builder.build().basePath(settings.getJsonApi().getPath());\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n \n-        return swagger;\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @Scope(SCOPE_PROTOTYPE)\n+    public JsonApiMapper mapper() {\n+        return new JsonApiMapper();\n     }\n \n     private boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n", "next_change": {"commit": "a6e6995ad7b3a7571ad3120f76924e9b83009ca7", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5ef33d35f..9b888e84c 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -478,6 +440,231 @@ public class ElideAutoConfiguration {\n         return new JsonApiMapper();\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnExpression(\"${elide.async.enabled:false} && ${elide.async.export.enabled:false}\")\n+    public ExportController exportController(ResultStorageEngine resultStorageEngine) {\n+        return new ExportController(resultStorageEngine);\n+    }\n+\n+    @Configuration\n+    @ConditionalOnClass(RefreshScope.class)\n+    @ConditionalOnProperty(name = \"spring.cloud.refresh.enabled\", havingValue = \"true\", matchIfMissing = true)\n+    @Order(Ordered.LOWEST_PRECEDENCE - 1)\n+    public static class RefreshableConfiguration {\n+        /**\n+         * Creates the Elide instance with standard settings.\n+         * @param dictionary Stores the static metadata about Elide models.\n+         * @param dataStore The persistence store.\n+         * @param headerProcessor HTTP header function which is invoked for every request.\n+         * @param transactionRegistry Global transaction registry.\n+         * @param settings Elide settings.\n+         * @return A new elide instance.\n+         */\n+        @Bean\n+        @RefreshScope\n+        @ConditionalOnMissingBean\n+        public RefreshableElide refreshableElide(EntityDictionary dictionary, DataStore dataStore,\n+                HeaderUtils.HeaderProcessor headerProcessor, TransactionRegistry transactionRegistry,\n+                ElideConfigProperties settings, JsonApiMapper mapper, ErrorMapper errorMapper) {\n+            return buildRefreshableElide(dictionary, dataStore, headerProcessor, transactionRegistry, settings, mapper,\n+                    errorMapper);\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.json-api.enabled\", havingValue = \"true\")\n+        public static class JsonApiConfiguration {\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean(name = \"jsonApiController\")\n+            public JsonApiController jsonApiController(RefreshableElide refreshableElide,\n+                    ElideConfigProperties settings) {\n+                return new JsonApiController(refreshableElide, settings);\n+            }\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.swagger.enabled\", havingValue = \"true\")\n+        public static class SwaggerConfiguration {\n+            /**\n+             * Creates a singular swagger document for JSON-API.\n+             * @param elide Singleton elide instance.\n+             * @param settings Elide configuration settings.\n+             * @return An instance of a JPA DataStore.\n+             */\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean\n+            public SwaggerController.SwaggerRegistrations swaggerRegistrations(RefreshableElide elide,\n+                    ElideConfigProperties settings) {\n+                return buildSwaggerRegistrations(elide, settings);\n+            }\n+\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean(name = \"swaggerController\")\n+            public SwaggerController swaggerController(SwaggerController.SwaggerRegistrations docs) {\n+                return new SwaggerController(docs);\n+            }\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.graphql.enabled\", havingValue = \"true\")\n+        public static class GraphQLConfiguration {\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean\n+            public QueryRunners queryRunners(RefreshableElide refreshableElide,\n+                    DataFetcherExceptionHandler exceptionHandler) {\n+                return new QueryRunners(refreshableElide, exceptionHandler);\n+            }\n+\n+            @Bean\n+            @RefreshScope\n+            @ConditionalOnMissingBean(name = \"graphqlController\")\n+            public GraphqlController graphqlController(QueryRunners runners, JsonApiMapper jsonApiMapper,\n+                    HeaderUtils.HeaderProcessor headerProcessor, ElideConfigProperties settings) {\n+                return new GraphqlController(runners, jsonApiMapper, headerProcessor, settings);\n+            }\n+        }\n+    }\n+\n+    @Configuration\n+    @ConditionalOnProperty(name = \"spring.cloud.refresh.enabled\", havingValue = \"false\", matchIfMissing = true)\n+    @Order(Ordered.LOWEST_PRECEDENCE)\n+    public static class NonRefreshableConfiguration {\n+        /**\n+         * Creates the Elide instance with standard settings.\n+         * @param dictionary Stores the static metadata about Elide models.\n+         * @param dataStore The persistence store.\n+         * @param headerProcessor HTTP header function which is invoked for every request.\n+         * @param transactionRegistry Global transaction registry.\n+         * @param settings Elide settings.\n+         * @return A new elide instance.\n+         */\n+        @Bean\n+        @ConditionalOnMissingBean\n+        public RefreshableElide refreshableElide(EntityDictionary dictionary, DataStore dataStore,\n+                HeaderUtils.HeaderProcessor headerProcessor, TransactionRegistry transactionRegistry,\n+                ElideConfigProperties settings, JsonApiMapper mapper, ErrorMapper errorMapper) {\n+            return buildRefreshableElide(dictionary, dataStore, headerProcessor, transactionRegistry, settings, mapper,\n+                    errorMapper);\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.json-api.enabled\", havingValue = \"true\")\n+        public static class JsonApiConfiguration {\n+            @Bean\n+            @ConditionalOnMissingBean(name = \"jsonApiController\")\n+            public JsonApiController jsonApiController(RefreshableElide refreshableElide,\n+                    ElideConfigProperties settings) {\n+                return new JsonApiController(refreshableElide, settings);\n+            }\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.swagger.enabled\", havingValue = \"true\")\n+        public static class SwaggerConfiguration {\n+            /**\n+             * Creates a singular swagger document for JSON-API.\n+             * @param elide Singleton elide instance.\n+             * @param settings Elide configuration settings.\n+             * @return An instance of a JPA DataStore.\n+             */\n+            @Bean\n+            @ConditionalOnMissingBean\n+            public SwaggerController.SwaggerRegistrations swaggerRegistrations(RefreshableElide elide,\n+                    ElideConfigProperties settings) {\n+                return buildSwaggerRegistrations(elide, settings);\n+            }\n+\n+            @Bean\n+            @ConditionalOnMissingBean(name = \"swaggerController\")\n+            public SwaggerController swaggerController(SwaggerController.SwaggerRegistrations docs) {\n+                return new SwaggerController(docs);\n+            }\n+        }\n+\n+        @Configuration\n+        @ConditionalOnProperty(name = \"elide.graphql.enabled\", havingValue = \"true\")\n+        public static class GraphQLConfiguration {\n+            @Bean\n+            @ConditionalOnMissingBean\n+            public QueryRunners queryRunners(RefreshableElide refreshableElide,\n+                    DataFetcherExceptionHandler exceptionHandler) {\n+                return new QueryRunners(refreshableElide, exceptionHandler);\n+            }\n+\n+            @Bean\n+            @ConditionalOnMissingBean(name = \"graphqlController\")\n+            public GraphqlController graphqlController(QueryRunners runners, JsonApiMapper jsonApiMapper,\n+                    HeaderUtils.HeaderProcessor headerProcessor, ElideConfigProperties settings) {\n+                return new GraphqlController(runners, jsonApiMapper, headerProcessor, settings);\n+            }\n+        }\n+    }\n+\n+    public static RefreshableElide buildRefreshableElide(EntityDictionary dictionary, DataStore dataStore,\n+            HeaderUtils.HeaderProcessor headerProcessor, TransactionRegistry transactionRegistry,\n+            ElideConfigProperties settings, JsonApiMapper mapper, ErrorMapper errorMapper) {\n+\n+        ElideSettingsBuilder builder = new ElideSettingsBuilder(dataStore).withEntityDictionary(dictionary)\n+                .withErrorMapper(errorMapper).withJsonApiMapper(mapper)\n+                .withDefaultMaxPageSize(settings.getMaxPageSize()).withDefaultPageSize(settings.getPageSize())\n+                .withJoinFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n+                .withSubqueryFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n+                .withAuditLogger(new Slf4jLogger()).withBaseUrl(settings.getBaseUrl())\n+                .withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"))\n+                .withHeaderProcessor(headerProcessor);\n+\n+        if (settings.isVerboseErrors()) {\n+            builder.withVerboseErrors();\n+        }\n+\n+        if (settings.getAsync() != null && settings.getAsync().getExport() != null\n+                && settings.getAsync().getExport().isEnabled()) {\n+            builder.withExportApiPath(settings.getAsync().getExport().getPath());\n+        }\n+\n+        if (settings.getGraphql() != null && settings.getGraphql().isEnabled()) {\n+            builder.withGraphQLApiPath(settings.getGraphql().getPath());\n+\n+            if (settings.getGraphql().isEnableFederation()) {\n+                builder.withGraphQLFederation(true);\n+            }\n+        }\n+\n+        if (settings.getJsonApi() != null && settings.getJsonApi().isEnabled()) {\n+            builder.withJsonApiPath(settings.getJsonApi().getPath());\n+\n+            if (settings.getJsonApi().isEnableLinks()) {\n+                String baseUrl = settings.getBaseUrl();\n+\n+                if (StringUtils.isEmpty(baseUrl)) {\n+                    builder.withJSONApiLinks(new DefaultJSONApiLinks());\n+                } else {\n+                    String jsonApiBaseUrl = baseUrl + settings.getJsonApi().getPath() + \"/\";\n+                    builder.withJSONApiLinks(new DefaultJSONApiLinks(jsonApiBaseUrl));\n+                }\n+            }\n+        }\n+\n+        Elide elide = new Elide(builder.build(), transactionRegistry, dictionary.getScanner(), true);\n+\n+        return new RefreshableElide(elide);\n+    }\n+\n+    public static SwaggerController.SwaggerRegistrations buildSwaggerRegistrations(RefreshableElide elide,\n+            ElideConfigProperties settings) {\n+        String jsonApiPath = settings.getJsonApi() != null ? settings.getJsonApi().getPath() : null;\n+\n+        EntityDictionary dictionary = elide.getElide().getElideSettings().getDictionary();\n+        Info info = new Info().title(settings.getSwagger().getName()).version(settings.getSwagger().getVersion());\n+\n+        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info).withLegacyFilterDialect(false);\n+        return new SwaggerController.SwaggerRegistrations(builder.build().basePath(jsonApiPath));\n+    }\n+\n     private boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n \n         boolean enabled = false;\n", "next_change": {"commit": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 9b888e84c..8bba0b25d 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -665,7 +726,7 @@ public class ElideAutoConfiguration {\n         return new SwaggerController.SwaggerRegistrations(builder.build().basePath(jsonApiPath));\n     }\n \n-    private boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n+    public static boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n \n         boolean enabled = false;\n         if (settings.getDynamicConfig() != null) {\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 8bba0b25d..333838910 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -715,15 +760,33 @@ public class ElideAutoConfiguration {\n         return new RefreshableElide(elide);\n     }\n \n-    public static SwaggerController.SwaggerRegistrations buildSwaggerRegistrations(RefreshableElide elide,\n-            ElideConfigProperties settings) {\n+    public static ApiDocsController.ApiDocsRegistrations buildApiDocsRegistrations(RefreshableElide elide,\n+            ElideConfigProperties settings, OpenApiDocumentCustomizer customizer) {\n         String jsonApiPath = settings.getJsonApi() != null ? settings.getJsonApi().getPath() : null;\n \n         EntityDictionary dictionary = elide.getElide().getElideSettings().getDictionary();\n-        Info info = new Info().title(settings.getSwagger().getName()).version(settings.getSwagger().getVersion());\n \n-        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info).withLegacyFilterDialect(false);\n-        return new SwaggerController.SwaggerRegistrations(builder.build().basePath(jsonApiPath));\n+        List<ApiDocsRegistration> registrations = new ArrayList<>();\n+        dictionary.getApiVersions().stream().forEach(apiVersion -> {\n+            Supplier<OpenAPI> document = () -> {\n+                OpenApiBuilder builder = new OpenApiBuilder(dictionary).apiVersion(apiVersion)\n+                        .supportLegacyFilterDialect(false);\n+                OpenAPI openApi = builder.build();\n+                openApi.addServersItem(new Server().url(jsonApiPath));\n+                customizer.customize(openApi);\n+                if (!EntityDictionary.NO_VERSION.equals(apiVersion)) {\n+                    Info info = openApi.getInfo();\n+                    if (info == null) {\n+                        info = new Info();\n+                        openApi.setInfo(info);\n+                    }\n+                    info.setVersion(apiVersion);\n+                }\n+                return openApi;\n+            };\n+            registrations.add(new ApiDocsRegistration(\"\", SingletonSupplier.of(document),\n+                    settings.getApiDocs().getVersion().getValue(), apiVersion));        });\n+        return new ApiDocsController.ApiDocsRegistrations(registrations);\n     }\n \n     public static boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n", "next_change": {"commit": "30816cbe1496c349c05a778b105efa87ec51a7c2", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 333838910..0620d9f93 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -792,8 +808,8 @@ public class ElideAutoConfiguration {\n     public static boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n \n         boolean enabled = false;\n-        if (settings.getDynamicConfig() != null) {\n-            enabled = settings.getDynamicConfig().isEnabled();\n+        if (settings.getAggregationStore() != null && settings.getAggregationStore().getDynamicConfig() != null) {\n+            enabled = settings.getAggregationStore().getDynamicConfig().isEnabled();\n         }\n \n         return enabled;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "b55b769236519aa81a171321c14ee0ac8315908f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async ID change from UUID to String and Dynamic Config FIx (#1325)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "9c8fe001d36753349ad1f7df83029e1c8d8edcac", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Multiplex Transaction Lazy Initialize and Dynamic Config fixes (#1383)"}, {"oid": "d31cff91c7452ae4b07bcc2006b70f15474b4198", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes for query cache spring integration (#1381)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "7dcb449ad9bf24c3c12601209803a0f05420e380", "committedDate": "2021-01-07 23:13:06 -0600", "message": "Only build swagger if the controller is activated"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "4641781684344dd25e47bdbe1a8aa6f28881d627", "committedDate": "2021-01-12 09:00:58 -0600", "message": "Added a new setting to Spring to enable/disable JSON-API links"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "b911028feb3655bb897041047caa7602f3f0c761", "committedDate": "2021-05-02 21:51:37 -0500", "message": "Add missing default values for ElideAutoConfiguration (#2052)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "abb32869ab0e97b8ceaa1bd61b53c579b4ca1c65", "committedDate": "2022-04-22 15:17:21 -0500", "message": "Header filtering config (#2627)"}, {"oid": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "committedDate": "2022-04-26 16:56:53 -0500", "message": "Add Injector Bean (#2637)"}, {"oid": "af3e1d9d64479e3ca0f5141bec8b906843d11248", "committedDate": "2022-05-05 21:14:51 -0500", "message": "Minimum to expose _service.sdl for Apollo federation. (#2640)"}, {"oid": "c0a0f0ad9a1a9bbb9938e3225f27b2d191b82e79", "committedDate": "2022-09-15 21:47:40 -0500", "message": "Only build query runner if graphQL is enabled (#2766)"}, {"oid": "f03aba8c1f854a9c0c286fad97c30d2fed5ffe08", "committedDate": "2022-09-22 18:59:56 -0500", "message": "Allow elide-graphql to be excluded when elide.graphql.enabled=false (#2787)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "119ea75d9ad68b27361326e9837ef1627afd3169", "committedDate": "2023-03-20 18:16:04 -0500", "message": "Fixes #2912 (#2931)"}, {"oid": "a6e6995ad7b3a7571ad3120f76924e9b83009ca7", "committedDate": "2023-04-16 16:45:08 -0500", "message": "Adds Spring Boot 3 Native Image support (#2939)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "e570df51218d29e6625a1d91c6f8d5b7f8642526", "committedDate": "2023-05-29 17:38:29 -0500", "message": "Add Atomic Operations Support (#2979)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}, {"oid": "855ab18b75a01ea145050f7424fbe93bec2ccb1f", "committedDate": "2023-06-04 10:15:22 -0500", "message": "Support multiple `JpaDataStore` (#2998)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMDE1Mg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489730152", "body": "Indentation is off", "bodyText": "Indentation is off", "bodyHTML": "<p dir=\"auto\">Indentation is off</p>", "author": "moizarafat", "createdAt": "2020-09-16T20:18:54Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -66,31 +63,30 @@\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n-    private final DataSource defaultDataSource;\n-    private final Map<String, DataSource> dataSourceMap = new HashMap<>();\n-    private final SQLDialect defaultDialect;\n-    private final Map<String, SQLDialect> dialectMap = new HashMap<>();\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultDataSource = defaultDataSource;\n-        this.defaultDialect = SQLDialectFactory.getDialect(defaultDialect);\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));", "originalCommit": "3458c01de2508bd2c25469357512292f585f7706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzE2Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489737163", "bodyText": "its same line.", "author": "rishi-aga", "createdAt": "2020-09-16T20:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMDE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..a49d1f5b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,47 +63,37 @@ import javax.sql.DataSource;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n-    private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+    private final DataSource defaultDataSource;\n+    private final Map<String, DataSource> dataSourceMap = new HashMap<>();\n+    private final SQLDialect defaultDialect;\n+    private final Map<String, SQLDialect> dialectMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect) {\n         super(metaDataStore);\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+        this.defaultDataSource = defaultDataSource;\n+        this.defaultDialect = SQLDialectFactory.getDialect(defaultDialect);\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n-     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     * @param defaultDataSource : default DataSource.\n+     * @param defaultDialect : default Sql Dialect.\n+     * @param dataSourceMap : Connection Name to DataSource mapping.\n+     * @param dialectMap : Connection Name to Sql Dialect Name mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n+    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n+                    Map<String, DataSource> dataSourceMap, Map<String, String> dialectMap) {\n+        this(metaDataStore, defaultDataSource, defaultDialect);\n+        this.dataSourceMap.putAll(dataSourceMap);\n+        dialectMap.forEach((k, v) -> this.dialectMap.put(k, SQLDialectFactory.getDialect(v)));\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-    };\n+    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n+                    ElideDynamicEntityCompiler compiler) {\n+        this(metaDataStore, defaultDataSource, defaultDialect, compiler.getDataSourceMap(), compiler.getDialectMap());\n+    }\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b1..de44895c1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -78,22 +81,33 @@ public class SQLQueryEngine extends QueryEngine {\n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n-     * @param defaultDataSource : default DataSource.\n-     * @param defaultDialect : default Sql Dialect.\n-     * @param dataSourceMap : Connection Name to DataSource mapping.\n-     * @param dialectMap : Connection Name to Sql Dialect Name mapping.\n+     * @param defaultDataSource : default DataSource Object.\n+     * @param defaultDialect : default SQL Dialect Class Name.\n+     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Class Name mapping.\n      */\n     public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n-                    Map<String, DataSource> dataSourceMap, Map<String, String> dialectMap) {\n+                    Map<String, ConnectionDetails> connectionDetailsMap) {\n         this(metaDataStore, defaultDataSource, defaultDialect);\n-        this.dataSourceMap.putAll(dataSourceMap);\n-        dialectMap.forEach((k, v) -> this.dialectMap.put(k, SQLDialectFactory.getDialect(v)));\n+        connectionDetailsMap.forEach((name, details) -> {\n+            dataSourceMap.put(name, details.getDataSource());\n+            dialectMap.put(name, SQLDialectFactory.getDialect(details.getDialect()));\n+        });\n     }\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n-                    ElideDynamicEntityCompiler compiler) {\n-        this(metaDataStore, defaultDataSource, defaultDialect, compiler.getDataSourceMap(), compiler.getDialectMap());\n-    }\n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n+        @Override\n+        public Object apply(ResultSet rs) {\n+            try {\n+                if (rs.next()) {\n+                    return rs.getObject(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    };\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -42,69 +38,36 @@ import com.yahoo.elide.request.Argument;\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n+import org.hibernate.jpa.QueryHints;\n+\n import lombok.extern.slf4j.Slf4j;\n \n-import java.sql.Connection;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n-import java.util.function.Function;\n+import java.util.Set;\n import java.util.stream.Collectors;\n-import javax.sql.DataSource;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n+    private final EntityManagerFactory entityManagerFactory;\n+\n     private final SQLReferenceTable referenceTable;\n-    private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n-        super(metaDataStore);\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n+        super(metaDataStore, cache);\n+        this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n-    }\n-\n-    /**\n-     * Constructor.\n-     * @param metaDataStore : MetaDataStore.\n-     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n-     */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-    };\n-\n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n         return new SQLTable(entityClass, metaDataDictionary);\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..7c335531d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -62,8 +63,8 @@ public class SQLQueryEngine extends QueryEngine {\n \n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n-        super(metaDataStore, cache);\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        super(metaDataStore);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n     }\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 7c335531d..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -60,13 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n         super(metaDataStore);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,12 +65,19 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final SQLDialect dialect;\n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n+        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n+    }\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n+                          SQLDialect sqlDialect) {\n         super(metaDataStore);\n         this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n         this.transactionCancel = txC;\n+        this.dialect = sqlDialect;\n     }\n \n     @Override\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -41,45 +42,69 @@ import com.yahoo.elide.request.Argument;\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n-import org.hibernate.jpa.QueryHints;\n-\n import lombok.extern.slf4j.Slf4j;\n \n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.Optional;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n+import javax.sql.DataSource;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n-    private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final SQLDialect dialect;\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n-    }\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n-                          SQLDialect sqlDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n-        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = txC;\n-        this.dialect = sqlDialect;\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param metaDataStore : MetaDataStore.\n+     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n+     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     */\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n+                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n+        this(metaDataStore, defaultConnectionDetails);\n+        detailsMap.forEach((name, details) -> {\n+            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n+                            SQLDialectFactory.getDialect(details.getDialect())));\n+        });\n     }\n \n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n+        @Override\n+        public Object apply(ResultSet rs) {\n+            try {\n+                if (rs.next()) {\n+                    return rs.getObject(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    };\n+\n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n         return new SQLTable(entityClass, metaDataDictionary);\n", "next_change": {"commit": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..ca3f47ca5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -107,34 +103,14 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+        return new SQLTable(entityClass, metaDataDictionary, this);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLColumnProjection() {\n-            @Override\n-            public SQLReferenceTable getReferenceTable() {\n-                return referenceTable;\n-            }\n-\n-            @Override\n-            public Column getColumn() {\n-                return dimension;\n-            }\n-\n-            @Override\n-            public String getAlias() {\n-                return alias;\n-            }\n-\n-            @Override\n-            public Map<String, Argument> getArguments() {\n-                return arguments;\n-            }\n-        };\n+        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n     }\n \n     @Override\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex ca3f47ca5..f2433475a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -103,28 +104,28 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary, this);\n+        return new SQLTable(entityClass, metaDataDictionary);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n+        return new SQLDimensionProjection(dimension, alias, arguments);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), referenceTable, alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n+        return new SQLMetricProjection(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f2433475a..3296af5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,71 +72,90 @@ public class SQLQueryEngine extends QueryEngine {\n     @Getter\n     private final SQLReferenceTable referenceTable;\n     private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n-        super(metaDataStore);\n-        referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    private final Map<String, ConnectionDetails> connectionDetailsMap;\n+    private final Set<Optimizer> optimizers;\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails) {\n+        this(metaDataStore, defaultConnectionDetails, Collections.emptyMap(),\n+                new HashSet<>());\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n      * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Map<String, ConnectionDetails> connectionDetailsMap, Set<Optimizer> optimizers) {\n+\n+        Preconditions.checkNotNull(defaultConnectionDetails);\n+        Preconditions.checkNotNull(connectionDetailsMap);\n+\n+        this.defaultConnectionDetails = defaultConnectionDetails;\n+        this.connectionDetailsMap = connectionDetailsMap;\n+        this.metaDataStore = metaDataStore;\n+        this.metadataDictionary = metaDataStore.getMetadataDictionary();\n+        populateMetaData(metaDataStore);\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.optimizers = optimizers;\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = rs -> {\n+        try {\n+            if (rs.next()) {\n+                return rs.getObject(1);\n             }\n+            return null;\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(e);\n         }\n     };\n \n     @Override\n-    protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+    protected Table constructTable(Type<?> entityClass, EntityDictionary metaDataDictionary) {\n+\n+        String dbConnectionName = null;\n+        Annotation annotation = EntityDictionary.getFirstAnnotation(entityClass,\n+                        Arrays.asList(FromTable.class, FromSubquery.class));\n+        if (annotation instanceof FromTable) {\n+            dbConnectionName = ((FromTable) annotation).dbConnectionName();\n+        } else if (annotation instanceof FromSubquery) {\n+            dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n+        }\n+\n+        ConnectionDetails connectionDetails;\n+        if (StringUtils.isBlank(dbConnectionName)) {\n+            connectionDetails = defaultConnectionDetails;\n+        } else {\n+            connectionDetails = Optional.ofNullable(connectionDetailsMap.get(dbConnectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\"ConnectionDetails undefined for model: \"\n+                                            + metaDataDictionary.getJsonAliasFor(entityClass)));\n+        }\n+\n+        return new SQLTable(entityClass, metaDataDictionary, connectionDetails);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments);\n+        return new SQLDimensionProjection(dimension, alias, arguments, true);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments, true);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, alias, arguments);\n+\n+        return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 3296af5f8..54caaa4ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -154,7 +171,6 @@ public class SQLQueryEngine extends QueryEngine {\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n", "next_change": {"commit": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 54caaa4ef..fcf751616 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -174,6 +178,24 @@ public class SQLQueryEngine extends QueryEngine {\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n+    @Override\n+    protected void verifyMetaData(MetaDataStore metaDataStore) {\n+        metaDataStore.getTables().forEach(table -> {\n+            SQLTable sqlTable = (SQLTable) table;\n+            checkForCycles(sqlTable);\n+            TableArgumentValidator tableArgValidator = new TableArgumentValidator(metaDataStore, sqlTable);\n+            tableArgValidator.validate();\n+        });\n+    }\n+\n+    /**\n+     * Verify that there is no reference loop for given {@link SQLTable}.\n+     * @param sqlTable Queryable to validate.\n+     */\n+    private void checkForCycles(SQLTable sqlTable) {\n+        sqlTable.getColumnProjections().forEach(column -> formulaValidator.parse(sqlTable, column));\n+    }\n+\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjg3Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489732873", "body": "This import is unused.", "bodyText": "This import is unused.", "bodyHTML": "<p dir=\"auto\">This import is unused.</p>", "author": "moizarafat", "createdAt": "2020-09-16T20:24:24Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java", "diffHunk": "@@ -5,6 +5,8 @@\n  */\n package com.yahoo.elide.spring.config;\n \n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;", "originalCommit": "3458c01de2508bd2c25469357512292f585f7706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNjYzMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489736633", "bodyText": "its used in javadoc", "author": "rishi-aga", "createdAt": "2020-09-16T20:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjUzNw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r490416537", "bodyText": "ah okie :)", "author": "moizarafat", "createdAt": "2020-09-17T16:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 99f881a7b..02e0d88b9 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -5,8 +5,6 @@\n  */\n package com.yahoo.elide.spring.config;\n \n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n-\n import lombok.Data;\n \n /**\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 02e0d88b9..e4519325c 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -5,6 +5,9 @@\n  */\n package com.yahoo.elide.spring.config;\n \n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+\n import lombok.Data;\n \n /**\n", "next_change": {"commit": "f8774463648ef8593cd6c069933effe65e79b73d", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex e4519325c..99f881a7b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -6,7 +6,6 @@\n package com.yahoo.elide.spring.config;\n \n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n \n import lombok.Data;\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 99f881a7b..02e0d88b9 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -5,8 +5,6 @@\n  */\n package com.yahoo.elide.spring.config;\n \n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n-\n import lombok.Data;\n \n /**\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 02e0d88b9..61c846e57 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -5,6 +5,8 @@\n  */\n package com.yahoo.elide.spring.config;\n \n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n+\n import lombok.Data;\n \n /**\n", "next_change": {"commit": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 61c846e57..4ed3f893b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -5,6 +5,8 @@\n  */\n package com.yahoo.elide.spring.config;\n \n+import static com.yahoo.elide.datastores.aggregation.cache.CaffeineCache.DEFAULT_MAXIMUM_ENTRIES;\n+\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n \n import lombok.Data;\n", "next_change": {"commit": "49e61867e840d9818993879436d5db1aad964c9a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 4ed3f893b..6a56ccd1c 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -6,9 +6,7 @@\n package com.yahoo.elide.spring.config;\n \n import static com.yahoo.elide.datastores.aggregation.cache.CaffeineCache.DEFAULT_MAXIMUM_ENTRIES;\n-\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n-\n import lombok.Data;\n \n /**\n", "next_change": {"commit": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 6a56ccd1c..85fb6564d 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -6,7 +6,9 @@\n package com.yahoo.elide.spring.config;\n \n import static com.yahoo.elide.datastores.aggregation.cache.CaffeineCache.DEFAULT_MAXIMUM_ENTRIES;\n+\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n+\n import lombok.Data;\n \n /**\n", "next_change": {"commit": "30816cbe1496c349c05a778b105efa87ec51a7c2", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 85fb6564d..03bd13583 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -9,36 +9,64 @@ import static com.yahoo.elide.datastores.aggregation.cache.CaffeineCache.DEFAULT\n \n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n \n+import org.springframework.boot.context.properties.NestedConfigurationProperty;\n+import org.springframework.boot.convert.DurationUnit;\n+\n import lombok.Data;\n \n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+\n /**\n  * Extra properties for setting up aggregation data store.\n  */\n @Data\n public class AggregationStoreProperties {\n-\n     /**\n      * Whether or not aggregation data store is enabled.\n      */\n     private boolean enabled = false;\n \n-    /**\n-     * Whether or not meta data store is enabled.\n-     */\n-    private boolean enableMetaDataStore = false;\n-\n     /**\n      * {@link SQLDialect} type for default DataSource Object.\n      */\n     private String defaultDialect = \"Hive\";\n \n     /**\n-     * Limit on number of query cache entries. Non-positive values disable the query cache.\n+     * Settings for the Dynamic Configuration.\n      */\n-    private int queryCacheMaximumEntries = DEFAULT_MAXIMUM_ENTRIES;\n+    @NestedConfigurationProperty\n+    private DynamicConfigProperties dynamicConfig = new DynamicConfigProperties();\n+\n+    @Data\n+    public static class MetadataStore {\n+        /**\n+         * Whether or not meta data store is enabled.\n+         */\n+        private boolean enabled;\n+    }\n+\n+    private MetadataStore metadataStore = new MetadataStore();\n+\n+    @Data\n+    public static class QueryCache {\n+        /**\n+         * Whether or not to enable the query cache.\n+         */\n+        private boolean enabled = true;\n+\n+        /**\n+         * Limit on number of query cache entries.\n+         */\n+        private int maxSize = DEFAULT_MAXIMUM_ENTRIES;\n+\n+        /**\n+         * Query cache expiration after write.\n+         */\n+        @DurationUnit(ChronoUnit.MINUTES)\n+        private Duration expiration = Duration.ofMinutes(10L);\n+    }\n+\n+    private QueryCache queryCache = new QueryCache();\n \n-    /**\n-     * Default Cache Expiration.\n-     */\n-    private long defaultCacheExpirationMinutes = 10;\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjk4MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489732981", "body": "We should set to one of the supported values.", "bodyText": "We should set to one of the supported values.", "bodyHTML": "<p dir=\"auto\">We should set to one of the supported values.</p>", "author": "moizarafat", "createdAt": "2020-09-16T20:24:37Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java", "diffHunk": "@@ -18,4 +20,8 @@\n      */\n     private boolean enabled = false;\n \n+    /**\n+     * {@link SQLDialect} type for default DataSource Object.\n+     */\n+    private String defaultDialect = \"MYSQL\";", "originalCommit": "3458c01de2508bd2c25469357512292f585f7706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5MDIwOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r490390208", "bodyText": "changed to Hive.", "author": "rishi-aga", "createdAt": "2020-09-17T16:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 99f881a7b..02e0d88b9 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -20,8 +18,4 @@ public class AggregationStoreProperties {\n      */\n     private boolean enabled = false;\n \n-    /**\n-     * {@link SQLDialect} type for default DataSource Object.\n-     */\n-    private String defaultDialect = \"MYSQL\";\n }\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 02e0d88b9..e4519325c 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -18,4 +21,8 @@ public class AggregationStoreProperties {\n      */\n     private boolean enabled = false;\n \n+    /**\n+     * {@link SQLDialect} for default DataSource Object.\n+     */\n+    private String defaultDialect = SQLDialectFactory.getDefaultDialect().getDialectType();\n }\n", "next_change": {"commit": "f8774463648ef8593cd6c069933effe65e79b73d", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex e4519325c..99f881a7b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -22,7 +21,7 @@ public class AggregationStoreProperties {\n     private boolean enabled = false;\n \n     /**\n-     * {@link SQLDialect} for default DataSource Object.\n+     * {@link SQLDialect} type for default DataSource Object.\n      */\n-    private String defaultDialect = SQLDialectFactory.getDefaultDialect().getDialectType();\n+    private String defaultDialect = \"MYSQL\";\n }\n", "next_change": {"commit": "7eee714a83a300b5bb33dbcdecd0c6939e39db7c", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 99f881a7b..61c846e57 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -23,5 +23,5 @@ public class AggregationStoreProperties {\n     /**\n      * {@link SQLDialect} type for default DataSource Object.\n      */\n-    private String defaultDialect = \"MYSQL\";\n+    private String defaultDialect = \"Hive\";\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 99f881a7b..61c846e57 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -23,5 +23,5 @@ public class AggregationStoreProperties {\n     /**\n      * {@link SQLDialect} type for default DataSource Object.\n      */\n-    private String defaultDialect = \"MYSQL\";\n+    private String defaultDialect = \"Hive\";\n }\n", "next_change": {"commit": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 61c846e57..02e0d88b9 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -20,8 +18,4 @@ public class AggregationStoreProperties {\n      */\n     private boolean enabled = false;\n \n-    /**\n-     * {@link SQLDialect} type for default DataSource Object.\n-     */\n-    private String defaultDialect = \"Hive\";\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 02e0d88b9..61c846e57 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -18,4 +20,8 @@ public class AggregationStoreProperties {\n      */\n     private boolean enabled = false;\n \n+    /**\n+     * {@link SQLDialect} type for default DataSource Object.\n+     */\n+    private String defaultDialect = \"Hive\";\n }\n", "next_change": {"commit": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 61c846e57..4ed3f893b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -24,4 +26,14 @@ public class AggregationStoreProperties {\n      * {@link SQLDialect} type for default DataSource Object.\n      */\n     private String defaultDialect = \"Hive\";\n+\n+    /**\n+     * Limit on number of query cache entries. Non-positive values disable the query cache.\n+     */\n+    private int queryCacheMaximumEntries = DEFAULT_MAXIMUM_ENTRIES;\n+\n+    /**\n+     * Default Cache Expiration.\n+     */\n+    private long defaultCacheExpirationMinutes = 10;\n }\n", "next_change": {"commit": "30816cbe1496c349c05a778b105efa87ec51a7c2", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 4ed3f893b..03bd13583 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -28,12 +33,40 @@ public class AggregationStoreProperties {\n     private String defaultDialect = \"Hive\";\n \n     /**\n-     * Limit on number of query cache entries. Non-positive values disable the query cache.\n+     * Settings for the Dynamic Configuration.\n      */\n-    private int queryCacheMaximumEntries = DEFAULT_MAXIMUM_ENTRIES;\n+    @NestedConfigurationProperty\n+    private DynamicConfigProperties dynamicConfig = new DynamicConfigProperties();\n+\n+    @Data\n+    public static class MetadataStore {\n+        /**\n+         * Whether or not meta data store is enabled.\n+         */\n+        private boolean enabled;\n+    }\n+\n+    private MetadataStore metadataStore = new MetadataStore();\n+\n+    @Data\n+    public static class QueryCache {\n+        /**\n+         * Whether or not to enable the query cache.\n+         */\n+        private boolean enabled = true;\n+\n+        /**\n+         * Limit on number of query cache entries.\n+         */\n+        private int maxSize = DEFAULT_MAXIMUM_ENTRIES;\n+\n+        /**\n+         * Query cache expiration after write.\n+         */\n+        @DurationUnit(ChronoUnit.MINUTES)\n+        private Duration expiration = Duration.ofMinutes(10L);\n+    }\n+\n+    private QueryCache queryCache = new QueryCache();\n \n-    /**\n-     * Default Cache Expiration.\n-     */\n-    private long defaultCacheExpirationMinutes = 10;\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzUwMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489733500", "body": "use one of the supported types.", "bodyText": "use one of the supported types.", "bodyHTML": "<p dir=\"auto\">use one of the supported types.</p>", "author": "moizarafat", "createdAt": "2020-09-16T20:25:32Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -375,6 +376,15 @@ public String getDBPassword(DBConfig config) {\n         };\n     }\n \n+    /**\n+     * Provides the default SQLDialect type.\n+     *\n+     * @return {@link SQLDialect} type for default DataSource Object.\n+     */\n+    default String getDefaultDialect() {\n+        return \"MYSQL\";", "originalCommit": "3458c01de2508bd2c25469357512292f585f7706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzYyOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489737628", "bodyText": "wanted to ensure override works properly.", "author": "rishi-aga", "createdAt": "2020-09-16T20:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5MDQ3Ng==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r490390476", "bodyText": "changed to Hive.", "author": "rishi-aga", "createdAt": "2020-09-17T16:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7b7eb3aea..421157cb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -362,29 +357,6 @@ public interface ElideStandaloneSettings {\n         return Optional.ofNullable(dynamicEntityCompiler);\n     }\n \n-    /**\n-     * Creates the default Password Extractor Implementation.\n-     *\n-     * @return An instance of DBPasswordExtractor.\n-     */\n-    default DBPasswordExtractor getDBPasswordExtractor() {\n-        return new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Provides the default SQLDialect type.\n-     *\n-     * @return {@link SQLDialect} type for default DataSource Object.\n-     */\n-    default String getDefaultDialect() {\n-        return \"MYSQL\";\n-    }\n-\n     /**\n      * Gets the DataStore for elide.\n      * @param metaDataStore MetaDataStore object.\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 421157cb8..dee3f34c9 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -357,6 +361,20 @@ public interface ElideStandaloneSettings {\n         return Optional.ofNullable(dynamicEntityCompiler);\n     }\n \n+    /**\n+     * Gets the Password Extractor Implementation\n+     *\n+     * @return DBPasswordExtractor\n+     */\n+    default DBPasswordExtractor getDBPasswordExtractor() {\n+        return new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Gets the DataStore for elide.\n      * @param metaDataStore MetaDataStore object.\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex dee3f34c9..79db0bc21 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -375,6 +376,15 @@ public interface ElideStandaloneSettings {\n         };\n     }\n \n+    /**\n+     * Provides the default SQLDialect type.\n+     *\n+     * @return String dialect for default DataSource Object.\n+     */\n+    default String getDefaultDialect() {\n+        return SQLDialectFactory.getDefaultDialect().getDialectType();\n+    }\n+\n     /**\n      * Gets the DataStore for elide.\n      * @param metaDataStore MetaDataStore object.\n", "next_change": {"commit": "f8774463648ef8593cd6c069933effe65e79b73d", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 79db0bc21..7b7eb3aea 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -379,10 +379,10 @@ public interface ElideStandaloneSettings {\n     /**\n      * Provides the default SQLDialect type.\n      *\n-     * @return String dialect for default DataSource Object.\n+     * @return {@link SQLDialect} type for default DataSource Object.\n      */\n     default String getDefaultDialect() {\n-        return SQLDialectFactory.getDefaultDialect().getDialectType();\n+        return \"MYSQL\";\n     }\n \n     /**\n", "next_change": {"commit": "7eee714a83a300b5bb33dbcdecd0c6939e39db7c", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7b7eb3aea..ce0393e56 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -382,7 +382,7 @@ public interface ElideStandaloneSettings {\n      * @return {@link SQLDialect} type for default DataSource Object.\n      */\n     default String getDefaultDialect() {\n-        return \"MYSQL\";\n+        return \"Hive\";\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7b7eb3aea..ce0393e56 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -382,7 +382,7 @@ public interface ElideStandaloneSettings {\n      * @return {@link SQLDialect} type for default DataSource Object.\n      */\n     default String getDefaultDialect() {\n-        return \"MYSQL\";\n+        return \"Hive\";\n     }\n \n     /**\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex ce0393e56..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -317,208 +285,11 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide.\n+     * Gets the audit logger for elide\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n-\n-    /**\n-     * Limit on number of query cache entries. Non-positive values disable the query cache.\n-     *\n-     * @return Default: 1024\n-     */\n-    default Integer getQueryCacheMaximumEntries() {\n-        return CaffeineCache.DEFAULT_MAXIMUM_ENTRIES;\n-    }\n-\n-    /**\n-     * Get the query cache implementation. If null, query cache is disabled.\n-     *\n-     * @return Default: {@code new CaffeineCache(getQueryCacheSize())}\n-     */\n-    default Cache getQueryCache() {\n-        return getQueryCacheMaximumEntries() > 0 ? new CaffeineCache(getQueryCacheMaximumEntries()) : null;\n-    }\n-\n-    /**\n-     * Gets the dynamic compiler for elide.\n-     * @param dbPasswordExtractor : Password Extractor Implementation\n-     * @return Optional ElideDynamicEntityCompiler\n-     */\n-    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler(DBPasswordExtractor dbPasswordExtractor) {\n-        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n-\n-        if (enableAggregationDataStore() && enableDynamicModelConfig()) {\n-            try {\n-                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath(), dbPasswordExtractor);\n-            } catch (Exception e) { // thrown by in memory compiler\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        return Optional.ofNullable(dynamicEntityCompiler);\n-    }\n-\n-    /**\n-     * Creates the default Password Extractor Implementation.\n-     *\n-     * @return An instance of DBPasswordExtractor.\n-     */\n-    default DBPasswordExtractor getDBPasswordExtractor() {\n-        return new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Provides the default SQLDialect type.\n-     *\n-     * @return {@link SQLDialect} type for default DataSource Object.\n-     */\n-    default String getDefaultDialect() {\n-        return \"Hive\";\n-    }\n-\n-    /**\n-     * Gets the DataStore for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param aggregationDataStore AggregationDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return DataStore object initialized.\n-     */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n-        DataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n-\n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n-    }\n-\n-    /**\n-     * Gets the DataStore for elide when aggregation store is disabled.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return DataStore object initialized.\n-     */\n-    default DataStore getDataStore(EntityManagerFactory entityManagerFactory) {\n-        DataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n-\n-        return jpaDataStore;\n-    }\n-\n-    /**\n-     * Gets the AggregationDataStore for elide.\n-     * @param queryEngine query engine object.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return AggregationDataStore object initialized.\n-     */\n-    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine).queryLogger(new NoopQueryLogger());\n-\n-        if (enableDynamicModelConfig()) {\n-            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n-            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-        }\n-        aggregationDataStoreBuilder.cache(getQueryCache());\n-        return aggregationDataStoreBuilder.build();\n-    }\n-\n-    /**\n-     * Gets the EntityDictionary for elide.\n-     * @param injector Service locator for web service for dependency injection.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        injector.inject(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return injector.create(cls);\n-                    }\n-                });\n-\n-        dictionary.scanForSecurityChecks();\n-\n-        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n-\n-        dictionary.addSecurityChecks(annotatedSecurityClasses);\n-\n-        return dictionary;\n-    }\n-\n-    /**\n-     * Gets the metadatastore for elide.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return MetaDataStore object initialized.\n-     */\n-    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        MetaDataStore metaDataStore = null;\n-\n-        if (optionalCompiler.isPresent()) {\n-            try {\n-                metaDataStore = new MetaDataStore(optionalCompiler.get());\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        return metaDataStore;\n-    }\n-\n-    /**\n-     * Gets the QueryEngine for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n-     * @param optionalCompiler Optional dynamic compiler object.\n-     * @return QueryEngine object initialized.\n-     */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n-                    Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        if (optionalCompiler.isPresent()) {\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n-                            optionalCompiler.get().getConnectionDetailsMap());\n-        }\n-        return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n-        }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n-    }\n }\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -285,11 +340,150 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em -> { return new NonJtaTransaction(em); }));\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the AggregationDataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return AggregationDataStore object initialized.\n+     */\n+    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        AggregationDataStore aggregationDataStore = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n+            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClasses);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n+        }\n+\n+        return aggregationDataStore;\n+    }\n+\n+    /**\n+     * Gets the EntityDictionary for elide.\n+     * @param injector Service locator for web service for dependency injection.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n+                new Injector() {\n+                    @Override\n+                    public void inject(Object entity) {\n+                        injector.inject(entity);\n+                    }\n+\n+                    @Override\n+                    public <T> T instantiate(Class<T> cls) {\n+                        return injector.create(cls);\n+                    }\n+                });\n+\n+        dictionary.scanForSecurityChecks();\n+\n+        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n+\n+        dictionary.addSecurityChecks(annotatedSecurityClasses);\n+\n+        return dictionary;\n+    }\n+\n+    /**\n+     * Gets the metadatastore for elide.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return MetaDataStore object initialized.\n+     */\n+    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        MetaDataStore metaDataStore = null;\n+\n+        if (optionalCompiler.isPresent()) {\n+            try {\n+                metaDataStore = new MetaDataStore(optionalCompiler.get());\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        return metaDataStore;\n+    }\n+\n+    /**\n+     * Gets the QueryEngine for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return QueryEngine object initialized.\n+     */\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n+    }\n+\n+    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n+            Class<?> classz) {\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+\n+        if (!optionalCompiler.isPresent()) {\n+            return annotatedClasses;\n+        }\n+\n+        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n+\n+        try {\n+            annotatedClasses = compiler.findAnnotatedClasses(classz);\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        return annotatedClasses;\n+    }\n }\n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..c4cbeb54f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -461,29 +457,26 @@ public interface ElideStandaloneSettings {\n     /**\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n+     * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n+     * @param validator Optional dynamic config validator.\n+     * @param dataSourceConfiguration DataSource Configuration.\n+     * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Optional<DynamicConfigValidator> validator,\n+                    DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n+        if (validator.isPresent()) {\n+            Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+\n+            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+                connectionDetailsMap.put(dbConfig.getName(),\n+                                new ConnectionDetails(\n+                                                dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n+            });\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n         }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n+        return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n }\n", "next_change": {"commit": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex c4cbeb54f..9e09a65a7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -458,24 +486,24 @@ public interface ElideStandaloneSettings {\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n      * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n-     * @param validator Optional dynamic config validator.\n+     * @param dynamicConfiguration Optional dynamic config.\n      * @param dataSourceConfiguration DataSource Configuration.\n      * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n     default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n-                    Optional<DynamicConfigValidator> validator,\n+                    Optional<DynamicConfiguration> dynamicConfiguration,\n                     DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n-        if (validator.isPresent()) {\n+        if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "43598e8411d544b31d9807ded4f248e25ef334a4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9e09a65a7..5dfabf6a2 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "6143d108eb7b1a2250370409d5362c6722c95b23", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 5dfabf6a2..9bf6ad35a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -492,12 +490,12 @@ public interface ElideStandaloneSettings {\n         if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig ->\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n-                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n-            });\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())))\n+            );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n                     new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9bf6ad35a..7085a6328 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -497,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())))\n             );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n-                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))),\n+                    new DefaultQueryValidator(metaDataStore.getMetadataDictionary()));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7085a6328..3f1071c95 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,4 +526,12 @@ public interface ElideStandaloneSettings {\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n+\n+    /**\n+     * Get the class scanner for this Elide instance.\n+     * @return class scanner implementation.\n+     */\n+    default ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n }\n", "next_change": {"commit": "65eaaa12fc2b805135285287d4912d2329bc676d", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 3f1071c95..1098fa4f0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -534,4 +536,13 @@ public interface ElideStandaloneSettings {\n     default ClassScanner getClassScanner() {\n         return new DefaultClassScanner();\n     }\n+\n+    /**\n+     * Get the error mapper for this Elide instance. By default no errors will be mapped.\n+     *\n+     * @return error mapper implementation\n+     */\n+    default ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n }\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 1098fa4f0..e41dc47e3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -545,4 +559,13 @@ public interface ElideStandaloneSettings {\n     default ErrorMapper getErrorMapper() {\n         return error -> null;\n     }\n+\n+    /**\n+     * Get the Jackson object mapper for Elide.\n+     *\n+     * @return object mapper.\n+     */\n+    default JsonApiMapper getObjectMapper() {\n+        return new JsonApiMapper();\n+    }\n }\n", "next_change": {"commit": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex e41dc47e3..92fde5ca0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -568,4 +611,13 @@ public interface ElideStandaloneSettings {\n     default JsonApiMapper getObjectMapper() {\n         return new JsonApiMapper();\n     }\n+\n+    /**\n+     * Gets the DataFetcherExceptionHandler for GraphQL.\n+     *\n+     * @return the DataFetcherExceptionHandler for GraphQL\n+     */\n+    default DataFetcherExceptionHandler getDataFetcherExceptionHandler() {\n+        return new SimpleDataFetcherExceptionHandler();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "39cd981fe2f8ecb473bf35f01b254898fbc091eb", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"oid": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "url": "https://github.com/yahoo/elide/commit/8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "d9533291c7c0459182cb5d3b2a5806628348bc1c", "url": "https://github.com/yahoo/elide/commit/d9533291c7c0459182cb5d3b2a5806628348bc1c", "message": "minor updates", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "c663a02f086186aa8e22b374b8061ecc235fe9a1", "url": "https://github.com/yahoo/elide/commit/c663a02f086186aa8e22b374b8061ecc235fe9a1", "message": "Review Comments: Change Dialect to Enum", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "fa95290812c67c8b7bf2fbebebd3f5ffdfc6d252", "url": "https://github.com/yahoo/elide/commit/fa95290812c67c8b7bf2fbebebd3f5ffdfc6d252", "message": "Review Comment: Remove references for getRelationshipValues from EntityHydrator", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "664ed6b057089f2015af078948af6d6d7d7a2a58", "url": "https://github.com/yahoo/elide/commit/664ed6b057089f2015af078948af6d6d7d7a2a58", "message": "Review Comments", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "url": "https://github.com/yahoo/elide/commit/2b9f9aed822872dc4639271d5fe69f1e6496b60f", "message": "Review Comments", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "url": "https://github.com/yahoo/elide/commit/4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "message": "Revert changes to AggregationDataStore and AggregationDataStoreTransaction", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "42fcc4f783bff6be0334a35793d1c5e12686cee2", "url": "https://github.com/yahoo/elide/commit/42fcc4f783bff6be0334a35793d1c5e12686cee2", "message": "Rebased and fix MetaDataStoreIntegrationTest", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "url": "https://github.com/yahoo/elide/commit/286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "message": "Elide StandAlone Changes", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "69854b2d7b710de47d2d6541a443558f6c865a95", "url": "https://github.com/yahoo/elide/commit/69854b2d7b710de47d2d6541a443558f6c865a95", "message": "Refactoring and Spring changes", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "ded581ce81830bdfc13e1d4379a7d7f6ebe84196", "url": "https://github.com/yahoo/elide/commit/ded581ce81830bdfc13e1d4379a7d7f6ebe84196", "message": "Minor", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "e4591d599576816c58f6cafb0ad03e404ea0e7b6", "url": "https://github.com/yahoo/elide/commit/e4591d599576816c58f6cafb0ad03e404ea0e7b6", "message": "Final Pass", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "7c8f7edc74bb95eb371d9ed3809942a7ab2c79aa", "url": "https://github.com/yahoo/elide/commit/7c8f7edc74bb95eb371d9ed3809942a7ab2c79aa", "message": "Remove emf from SQLUNIT", "committedDate": "2020-09-16T21:27:21Z", "type": "commit"}, {"oid": "e50b44ec2b0c5241e688ca40b32166fde8f1f0d9", "url": "https://github.com/yahoo/elide/commit/e50b44ec2b0c5241e688ca40b32166fde8f1f0d9", "message": "Add missing file", "committedDate": "2020-09-16T21:27:21Z", "type": "commit"}, {"oid": "98328e3419976c6b9deb6f7f4ce0d28825286710", "url": "https://github.com/yahoo/elide/commit/98328e3419976c6b9deb6f7f4ce0d28825286710", "message": "Review Comments: Refactor Connection Details, Remove duplicate tests from Slring and Standalone", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "ae647b5050b99f6129f4810329d9114408a3c25f", "url": "https://github.com/yahoo/elide/commit/ae647b5050b99f6129f4810329d9114408a3c25f", "message": "Review Comments: Lazily Initialize Transaction", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "f8774463648ef8593cd6c069933effe65e79b73d", "url": "https://github.com/yahoo/elide/commit/f8774463648ef8593cd6c069933effe65e79b73d", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "url": "https://github.com/yahoo/elide/commit/861ddacd41352e79a7a90ac99f8d1f330c8c731e", "message": "Review Comments: Move Offset/Limit to SQLQueryConstructor", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "083c4cc27a896d73fcd8456379d014f07c56f304", "url": "https://github.com/yahoo/elide/commit/083c4cc27a896d73fcd8456379d014f07c56f304", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "03f02a317999ef082bbc8a57e4ceba337b008fd5", "url": "https://github.com/yahoo/elide/commit/03f02a317999ef082bbc8a57e4ceba337b008fd5", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "7a9b1a27a8a2bfb24748962037b7380e1e251a9c", "url": "https://github.com/yahoo/elide/commit/7a9b1a27a8a2bfb24748962037b7380e1e251a9c", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "7a9b1a27a8a2bfb24748962037b7380e1e251a9c", "url": "https://github.com/yahoo/elide/commit/7a9b1a27a8a2bfb24748962037b7380e1e251a9c", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "forcePushed"}, {"oid": "7eee714a83a300b5bb33dbcdecd0c6939e39db7c", "url": "https://github.com/yahoo/elide/commit/7eee714a83a300b5bb33dbcdecd0c6939e39db7c", "message": "Review Comments", "committedDate": "2020-09-17T16:20:30Z", "type": "commit"}]}