{"pr_number": 1523, "pr_title": "Query Engine and Aggregation Store Changes for Multi Data Source Support", "pr_author": "rishi-aga", "pr_createdAt": "2020-09-08T16:31:37Z", "pr_url": "https://github.com/yahoo/elide/pull/1523", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDc0MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485074740", "body": "since there are no plans to support this, we can remove it from here and the abstract class. ", "bodyText": "since there are no plans to support this, we can remove it from here and the abstract class.", "bodyHTML": "<p dir=\"auto\">since there are no plans to support this, we can remove it from here and the abstract class.</p>", "author": "moizarafat", "createdAt": "2020-09-08T17:12:40Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java", "diffHunk": "@@ -9,78 +9,37 @@\n import com.yahoo.elide.datastores.aggregation.QueryEngine;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-import com.yahoo.elide.utils.coerce.CoerceUtil;\n-import lombok.AccessLevel;\n-import lombok.Getter;\n \n-import java.util.AbstractMap;\n+import java.sql.ResultSet;\n import java.util.Collections;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.persistence.EntityManager;\n \n /**\n  * {@link SQLEntityHydrator} hydrates the entity loaded by\n  * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n  */\n public class SQLEntityHydrator extends AbstractEntityHydrator {\n \n-    @Getter(AccessLevel.PRIVATE)\n-    private final EntityManager entityManager;\n-\n     /**\n      * Constructor.\n      *\n      * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n      * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n      *               objects\n      * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     * @param entityManager  An service that issues JPQL queries to load relationship objects\n      */\n     public SQLEntityHydrator(\n-            List<Object> results,\n+            ResultSet results,\n             Query query,\n-            EntityDictionary entityDictionary,\n-            EntityManager entityManager\n+            EntityDictionary entityDictionary\n     ) {\n         super(results, query, entityDictionary);\n-        this.entityManager = entityManager;\n     }\n \n     @Override\n-    protected Map<Object, Object> getRelationshipValues(\n-            Class<?> relationshipType,\n-            List<Object> joinFieldIds\n-    ) {\n-        if (joinFieldIds.isEmpty()) {\n-            return Collections.emptyMap();\n-        }\n-\n-        List<Object> uniqueIds = joinFieldIds.stream()\n-                .distinct()\n-                .collect(Collectors.toCollection(LinkedList::new));\n-\n-        List<Object> loaded = getEntityManager()\n-                .createQuery(\n-                        String.format(\n-                                \"SELECT e FROM %s e WHERE %s IN (:idList)\",\n-                                relationshipType.getCanonicalName(),\n-                                getEntityDictionary().getIdFieldName(relationshipType)\n-                        )\n-                )\n-                .setParameter(\"idList\", uniqueIds)\n-                .getResultList();\n-\n-        return loaded.stream()\n-                .map(obj -> new AbstractMap.SimpleImmutableEntry<>(\n-                        CoerceUtil.coerce(\n-                                (Object) getEntityDictionary().getId(obj),\n-                                getEntityDictionary().getIdType(relationshipType)\n-                        ),\n-                        obj))\n-                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {", "originalCommit": "33066ea45b06474cf68125d9bea8663fc9406d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjUxNQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485106515", "bodyText": "removed related methods.", "author": "rishi-aga", "createdAt": "2020-09-08T18:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex 276c12d84f..0000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,45 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n-        // Not required\n-        return Collections.emptyMap();\n-    }\n-}\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nnew file mode 100644\nindex 0000000000..276c12d84f\n--- /dev/null\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.QueryEngine;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n+\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * {@link SQLEntityHydrator} hydrates the entity loaded by\n+ * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n+ */\n+public class SQLEntityHydrator extends AbstractEntityHydrator {\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n+     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n+     *               objects\n+     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n+     */\n+    public SQLEntityHydrator(\n+            ResultSet results,\n+            Query query,\n+            EntityDictionary entityDictionary\n+    ) {\n+        super(results, query, entityDictionary);\n+    }\n+\n+    @Override\n+    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n+        // Not required\n+        return Collections.emptyMap();\n+    }\n+}\n", "next_change": {"commit": "fa95290812c67c8b7bf2fbebebd3f5ffdfc6d252", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nindex 276c12d84f..e74da19619 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -36,10 +33,4 @@ public class SQLEntityHydrator extends AbstractEntityHydrator {\n     ) {\n         super(results, query, entityDictionary);\n     }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n-        // Not required\n-        return Collections.emptyMap();\n-    }\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex e74da19619..0000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0ODY2Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485248663", "body": "should we close the connection before throwing the exception or connection close is going to be handled some place else? ", "bodyText": "should we close the connection before throwing the exception or connection close is going to be handled some place else?", "bodyHTML": "<p dir=\"auto\">should we close the connection before throwing the exception or connection close is going to be handled some place else?</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:24:48Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +144,209 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private final Connection conn;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+        private final SQLDialect dialect;\n+\n+        SqlTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);", "originalCommit": "33066ea45b06474cf68125d9bea8663fc9406d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNzU5NA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485617594", "bodyText": "Updated it to just log the exception instead of throwing it.", "author": "rishi-aga", "createdAt": "2020-09-09T13:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0ODY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b18..af77ce49b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b9..a49d1f5b18 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -187,38 +172,60 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.cancel();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n+        return new SqlTransaction(defaultDataSource, defaultDialect);\n+    }\n+\n+    @Override\n+    public Transaction beginTransaction(String dbConnectionName) {\n+        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        return new SqlTransaction(dataSource, dialect);\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n+        SQLDialect dialect = sqlTransaction.dialect;\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b18..af77ce49b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b9..5dbe48e699 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,17 +206,8 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e699..9aff2a5f81 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -206,8 +204,9 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "ae647b5050b99f6129f4810329d9114408a3c25f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9aff2a5f81..530d6e25c0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,7 +208,6 @@ public class SQLQueryEngine extends QueryEngine {\n         ConnectionDetails details = getConnectionDetails(connectionName);\n         DataSource dataSource = details.getDataSource();\n         SQLDialect dialect = details.getDialect();\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDA3MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485250070", "body": "Same as above, we should close the connection as well. ", "bodyText": "Same as above, we should close the connection as well.", "bodyHTML": "<p dir=\"auto\">Same as above, we should close the connection as well.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:29:31Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +144,209 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private final Connection conn;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+        private final SQLDialect dialect;\n+\n+        SqlTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.cancel();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNjkyOQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485616929", "bodyText": "I am assuming, connection closing will be handled by close method and cancel method is for stopping the running queries.", "author": "rishi-aga", "createdAt": "2020-09-09T13:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MDA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b18..af77ce49b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b9..a49d1f5b18 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -187,38 +172,60 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.cancel();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n+        return new SqlTransaction(defaultDataSource, defaultDialect);\n+    }\n+\n+    @Override\n+    public Transaction beginTransaction(String dbConnectionName) {\n+        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        return new SqlTransaction(dataSource, dialect);\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n+        SQLDialect dialect = sqlTransaction.dialect;\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b18..af77ce49b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b9..5dbe48e699 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,17 +206,8 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e699..9aff2a5f81 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -206,8 +204,9 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "ae647b5050b99f6129f4810329d9114408a3c25f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9aff2a5f81..530d6e25c0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,7 +208,6 @@ public class SQLQueryEngine extends QueryEngine {\n         ConnectionDetails details = getConnectionDetails(connectionName);\n         DataSource dataSource = details.getDataSource();\n         SQLDialect dialect = details.getDialect();\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDE5OA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485254198", "body": "Lets check with Aaron, I think this method seems very specific to SQLQueryEngine, so not a good candidate to be included in the interface here. We can just have it created and used in SQLQuery Engine itself.", "bodyText": "Lets check with Aaron, I think this method seems very specific to SQLQueryEngine, so not a good candidate to be included in the interface here. We can just have it created and used in SQLQuery Engine itself.", "bodyHTML": "<p dir=\"auto\">Lets check with Aaron, I think this method seems very specific to SQLQueryEngine, so not a good candidate to be included in the interface here. We can just have it created and used in SQLQuery Engine itself.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:43:02Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -167,6 +167,8 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n \n     public abstract Transaction beginTransaction();\n \n+    public abstract Transaction beginTransaction(String dbConnectionName);", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxOTQzOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485619438", "bodyText": "this is called from AggregationDataStoreTransaction which uses QueryEngine interface so had to add it here.", "author": "rishi-aga", "createdAt": "2020-09-09T13:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMTcyMQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486411721", "bodyText": "I tend to agree with Moiz.  Everything inside dynamic config is tightly coupled with with the SQLQueryEngine.  Other query engines might have a totally different configuration (like Fili for example).", "author": "aklish", "createdAt": "2020-09-10T14:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NDY4Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487084683", "bodyText": "created a new class SQLAggregationDataStoreTransaction which extends AggregationDataStoreTransaction (which is abstract now)", "author": "rishi-aga", "createdAt": "2020-09-11T14:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8e..f5d273c6b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -167,8 +167,6 @@ public abstract class QueryEngine {\n \n     public abstract Transaction beginTransaction();\n \n-    public abstract Transaction beginTransaction(String dbConnectionName);\n-\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b1..69d0a65d8e 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -167,6 +167,8 @@ public abstract class QueryEngine {\n \n     public abstract Transaction beginTransaction();\n \n+    public abstract Transaction beginTransaction(String dbConnectionName);\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8e..f5d273c6b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -167,8 +167,6 @@ public abstract class QueryEngine {\n \n     public abstract Transaction beginTransaction();\n \n-    public abstract Transaction beginTransaction(String dbConnectionName);\n-\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NDI1NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485254255", "body": "Same comment as other method.", "bodyText": "Same comment as other method.", "bodyHTML": "<p dir=\"auto\">Same comment as other method.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:43:16Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -219,4 +221,13 @@ public Table getTable(TableId tableId) {\n      */\n     public abstract List<String> explain(Query query);\n \n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @param connectionName Connection Name for this storage\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public abstract List<String> explain(Query query, String connectionName);", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8e..f5d273c6b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -221,13 +219,4 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param connectionName Connection Name for this storage\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public abstract List<String> explain(Query query, String connectionName);\n-\n }\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b1..69d0a65d8e 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -219,4 +221,13 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @param connectionName Connection Name for this storage\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public abstract List<String> explain(Query query, String connectionName);\n+\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 69d0a65d8e..f5d273c6b1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -221,13 +219,4 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n-    /**\n-     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n-     *\n-     * @param query The query customized for a particular persistent storage or storage client.\n-     * @param connectionName Connection Name for this storage\n-     * @return List of SQL string(s) corresponding to the given query.\n-     */\n-    public abstract List<String> explain(Query query, String connectionName);\n-\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NTYxNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485255616", "body": "\" OFFSET \"  and \" LIMIT \" can be made static variables and reused.", "bodyText": "\" OFFSET \"  and \" LIMIT \" can be made static variables and reused.", "bodyHTML": "<p dir=\"auto\">\" OFFSET \"  and \" LIMIT \" can be made static variables and reused.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:47:47Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java", "diffHunk": "@@ -14,7 +14,13 @@ public boolean useAliasForOrderByClause() {\n         return false;\n     }\n \n+    @Override\n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n     }\n+\n+    @Override\n+    public String appendOffsetLimit(String sql, int offset, int limit) {\n+        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNTgzMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485615830", "bodyText": "\ud83d\udc4d", "author": "rishi-aga", "createdAt": "2020-09-09T13:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1NTYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 2c385ae13d..5c166ac4b0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -21,6 +25,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n+        return sql + OFFSET + offset + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b0..2c385ae13d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -25,6 +21,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n     }\n }\n", "next_change": {"commit": "664ed6b057089f2015af078948af6d6d7d7a2a58", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 2c385ae13d..5c166ac4b0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -21,6 +25,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n+        return sql + OFFSET + offset + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b0..46e7a1b702 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -24,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+    public String appendOffsetLimit(int offset, int limit) {\n+        return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "083c4cc27a896d73fcd8456379d014f07c56f304", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 46e7a1b702..f5f224bb8a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -25,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(int offset, int limit) {\n+    public String generateOffsetLimitClause(int offset, int limit) {\n         return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1Nzk2OA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485257968", "body": "this could call the constructor with 4 args instead. ", "bodyText": "this could call the constructor with 4 args instead.", "bodyHTML": "<p dir=\"auto\">this could call the constructor with 4 args instead.</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:55:42Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java", "diffHunk": "@@ -11,31 +11,49 @@\n import com.yahoo.elide.datastores.aggregation.core.NoopQueryLogger;\n import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n import com.yahoo.elide.datastores.jpa.JpaDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n import com.yahoo.elide.datastores.multiplex.MultiplexManager;\n \n import org.hibernate.Session;\n \n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.Map;\n import java.util.function.Consumer;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n \n+@AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n+    private DataSource defaultDataSource;\n+    private Map<String, DataSource> dataSourceMap;\n+    private String defaultDialect;\n+    private Map<String, String> dialectMap;\n+\n+    public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNTUzNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485615536", "bodyText": "updated to call the constructor with 3 args.", "author": "rishi-aga", "createdAt": "2020-09-09T13:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1Nzk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex aab5bee84d..28af154cd9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -32,18 +33,16 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n-                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 28af154cd9..aab5bee84d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -33,16 +32,18 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n+    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, ConnectionDetails> connectionDetailsMap;\n+    private Map<String, String> dialectMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n+                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex aab5bee84d..28af154cd9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -32,18 +33,16 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n-                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "e4591d599576816c58f6cafb0ad03e404ea0e7b6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 28af154cd9..a2f698f734 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -42,20 +48,36 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap(), null);\n     }\n \n     @Override\n     public DataStore getDataStore() {\n \n-        MetaDataStore metaDataStore = new MetaDataStore();\n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+\n+        MetaDataStore metaDataStore;\n+        if (compiler != null) {\n+            try {\n+                metaDataStore = new MetaDataStore(compiler);\n+                Set<Class<?>> annotatedClasses = new HashSet<>();\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n \n-        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n                 .queryEngine(new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect, connectionDetailsMap))\n                 .queryLogger(new NoopQueryLogger())\n                 .build();\n \n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n                 (em) -> { return new NonJtaTransaction(em, txCancel); }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1OTAzMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485259033", "body": "This can still take Argument of Type SQLDialect", "bodyText": "This can still take Argument of Type SQLDialect", "bodyHTML": "<p dir=\"auto\">This can still take Argument of Type SQLDialect</p>", "author": "moizarafat", "createdAt": "2020-09-08T23:59:15Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -298,14 +299,19 @@ public Query getQuery() {\n \n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n-    public static void init(SQLDialect sqlDialect) {\n+    public static void init(String sqlDialect) {", "originalCommit": "2cb30cf498da691be1dec47cbf872296f18249cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNTAwNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r485615006", "bodyText": "yes, I left it as it was used in other test classes but can be removed if required.", "author": "rishi-aga", "createdAt": "2020-09-09T13:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1OTAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce46..4ed0a05cd3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +304,22 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection conn = dataSource.getConnection();\n+                        Reader reader = new InputStreamReader(\n+                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n+            ScriptRunner runner = new ScriptRunner(conn);\n+            runner.runScript(reader);\n+        } catch (SQLException | IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 4ed0a05cd3..8ed124ce46 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -304,22 +300,18 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n+        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n+        em.getTransaction().commit();\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n-        try (Connection conn = dataSource.getConnection();\n-                        Reader reader = new InputStreamReader(\n-                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n-            ScriptRunner runner = new ScriptRunner(conn);\n-            runner.runScript(reader);\n-        } catch (SQLException | IOException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce46..4ed0a05cd3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +304,22 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection conn = dataSource.getConnection();\n+                        Reader reader = new InputStreamReader(\n+                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n+            ScriptRunner runner = new ScriptRunner(conn);\n+            runner.runScript(reader);\n+        } catch (SQLException | IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 4ed0a05cd3..ac093db0c5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -311,12 +307,10 @@ public abstract class SQLUnitTest {\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n-        try (Connection conn = dataSource.getConnection();\n-                        Reader reader = new InputStreamReader(\n-                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n-            ScriptRunner runner = new ScriptRunner(conn);\n-            runner.runScript(reader);\n-        } catch (SQLException | IOException e) {\n+        try (Connection h2Conn = dataSource.getConnection()) {\n+            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n+        } catch (SQLException e) {\n+            ((HikariDataSource) dataSource).close();\n             throw new IllegalStateException(e);\n         }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjcxNw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486406717", "body": "Cleaner to have a single map that stores a new class that includes both the data source and its dialect.  Then there is no way for state to get out of sync.", "bodyText": "Cleaner to have a single map that stores a new class that includes both the data source and its dialect.  Then there is no way for state to get out of sync.", "bodyHTML": "<p dir=\"auto\">Cleaner to have a single map that stores a new class that includes both the data source and its dialect.  Then there is no way for state to get out of sync.</p>", "author": "aklish", "createdAt": "2020-09-10T14:50:39Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -41,6 +47,8 @@\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n+    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NTUyMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487085523", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-11T14:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex bd6d8b384e..e69c12f59c 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -47,8 +47,8 @@ public class ElideDynamicEntityCompiler {\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n-    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();\n-    @Getter private final Map<String, String> dialectMap = new HashMap<String, String>();\n+    @Getter\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n     /**\n      * Parse dynamic config path.\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex e69c12f59c..bd6d8b384e 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -47,8 +47,8 @@ public class ElideDynamicEntityCompiler {\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n-    @Getter\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();\n+    @Getter private final Map<String, String> dialectMap = new HashMap<String, String>();\n \n     /**\n      * Parse dynamic config path.\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex bd6d8b384e..e69c12f59c 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -47,8 +47,8 @@ public class ElideDynamicEntityCompiler {\n \n     private Map<String, String> tableClasses = new HashMap<String, String>();\n     private Map<String, String> securityClasses = new HashMap<String, String>();\n-    @Getter private final Map<String, DataSource> dataSourceMap = new HashMap<String, DataSource>();\n-    @Getter private final Map<String, String> dialectMap = new HashMap<String, String>();\n+    @Getter\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n     /**\n      * Parse dynamic config path.\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex e69c12f59c..e195aa5b2a 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -53,9 +55,10 @@ public class ElideDynamicEntityCompiler {\n     /**\n      * Parse dynamic config path.\n      * @param path : Dynamic config hjsons root location\n+     * @param dbPasswordExtractor : Password Extractor Implementation\n      * @throws Exception Exception thrown\n      */\n-    public ElideDynamicEntityCompiler(String path) throws Exception {\n+    public ElideDynamicEntityCompiler(String path, DBPasswordExtractor dbPasswordExtractor) throws Exception {\n \n         if (DynamicConfigHelpers.isNullOrEmpty(path)) {\n             throw new IllegalArgumentException(\"Config path is null\");\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMjM5OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486412399", "body": "I don't think we need the stitchList anymore - that was for populating relationships.", "bodyText": "I don't think we need the stitchList anymore - that was for populating relationships.", "bodyHTML": "<p dir=\"auto\">I don't think we need the stitchList anymore - that was for populating relationships.</p>", "author": "aklish", "createdAt": "2020-09-10T14:58:10Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java", "diffHunk": "@@ -86,48 +88,37 @@ public AbstractEntityHydrator(List<Object> results, Query query, EntityDictionar\n         });\n     }\n \n-    /**\n-     * Loads a map of relationship object ID to relationship object instance.\n-     * <p>\n-     * Note the relationship cannot be toMany. This method will be invoked for every relationship field of the\n-     * requested entity. Its implementation should return the result of the following query\n-     * <p>\n-     * <b>Given a relationship with type {@code relationshipType} in an entity, loads all relationship\n-     * objects whose foreign keys are one of the specified list, {@code joinFieldIds}</b>.\n-     * <p>\n-     * For example, when the relationship is loaded from SQL and we have the following example identity:\n-     * <pre>\n-     * public class PlayerStats {\n-     *     private String id;\n-     *     private Country country;\n-     *\n-     *     &#64;OneToOne\n-     *     &#64;JoinColumn(name = \"country_id\")\n-     *     public Country getCountry() {\n-     *         return country;\n-     *     }\n-     * }\n-     * </pre>\n-     * In this case {@code relationshipType = Country.class}. If {@code country} is\n-     * requested in {@code PlayerStats} query and 3 stats, for example, are found in database whose country ID's are\n-     * {@code joinFieldIds = [840, 344, 840]}, then this method should effectively run the following query (JPQL as\n-     * example)\n-     * <pre>\n-     * {@code\n-     *     SELECT e FROM country_table e WHERE country_id IN (840, 344);\n-     * }\n-     * </pre>\n-     * and returns the map of [840: Country(id:840), 344: Country(id:344)]\n-     *\n-     * @param relationshipType  The type of relationship\n-     * @param joinFieldIds  The specified list of join ID's against the relationship\n-     *\n-     * @return a list of hydrating values\n-     */\n-    protected abstract Map<Object, Object> getRelationshipValues(\n-            Class<?> relationshipType,\n-            List<Object> joinFieldIds\n-    );\n+    public AbstractEntityHydrator(ResultSet rs, Query query, EntityDictionary entityDictionary) {\n+        this.stitchList = new StitchList(entityDictionary);", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NTczMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487085730", "bodyText": "removed StitchList class.", "author": "rishi-aga", "createdAt": "2020-09-11T14:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMjM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\nsimilarity index 87%\nrename from elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java\nrename to elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\nindex 43bc8f8dd6..ea81c72ef8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/AbstractEntityHydrator.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/EntityHydrator.java\n", "chunk": "@@ -88,8 +81,7 @@ public abstract class AbstractEntityHydrator {\n         });\n     }\n \n-    public AbstractEntityHydrator(ResultSet rs, Query query, EntityDictionary entityDictionary) {\n-        this.stitchList = new StitchList(entityDictionary);\n+    public EntityHydrator(ResultSet rs, Query query, EntityDictionary entityDictionary) {\n         this.query = query;\n         this.entityDictionary = entityDictionary;\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMzk0MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486413941", "body": "Why do we still need an entityManagerFactory if we are using Hikari and JDBC directly?", "bodyText": "Why do we still need an entityManagerFactory if we are using Hikari and JDBC directly?", "bodyHTML": "<p dir=\"auto\">Why do we still need an entityManagerFactory if we are using Hikari and JDBC directly?</p>", "author": "aklish", "createdAt": "2020-09-10T15:00:14Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java", "diffHunk": "@@ -11,31 +11,48 @@\n import com.yahoo.elide.datastores.aggregation.core.NoopQueryLogger;\n import com.yahoo.elide.datastores.aggregation.metadata.MetaDataStore;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.SQLQueryEngine;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n import com.yahoo.elide.datastores.jpa.JpaDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n import com.yahoo.elide.datastores.multiplex.MultiplexManager;\n \n import org.hibernate.Session;\n \n+import lombok.AllArgsConstructor;\n+\n+import java.util.Collections;\n+import java.util.Map;\n import java.util.function.Consumer;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n \n+@AllArgsConstructor\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n+    private DataSource defaultDataSource;", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1Nzg5MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487057890", "bodyText": "entityManagerFactory is still required for JPA datastore.", "author": "rishi-aga", "createdAt": "2020-09-11T13:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMzk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 8bffd7476f..28af154cd9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -32,17 +33,16 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getDialectType());\n+        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 28af154cd9..aab5bee84d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -33,16 +32,18 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n+    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, ConnectionDetails> connectionDetailsMap;\n+    private Map<String, String> dialectMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n+                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex aab5bee84d..28af154cd9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -32,18 +33,16 @@ import javax.sql.DataSource;\n public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n     private EntityManagerFactory entityManagerFactory;\n     private DataSource defaultDataSource;\n-    private Map<String, DataSource> dataSourceMap;\n     private String defaultDialect;\n-    private Map<String, String> dialectMap;\n+    private Map<String, ConnectionDetails> connectionDetailsMap;\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(),\n-                        SQLDialectFactory.getDefaultDialect().getDialectType(), Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, SQLDialectFactory.getDefaultDialect().getClass().getName());\n     }\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, Collections.emptyMap(), defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n     }\n \n     @Override\n", "next_change": {"commit": "e4591d599576816c58f6cafb0ad03e404ea0e7b6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\nindex 28af154cd9..a2f698f734 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/AggregationDataStoreTestHarness.java\n", "chunk": "@@ -42,20 +48,36 @@ public class AggregationDataStoreTestHarness implements DataStoreTestHarness {\n \n     public AggregationDataStoreTestHarness(EntityManagerFactory entityManagerFactory, DataSource defaultDataSource,\n                     String defaultDialect) {\n-        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap());\n+        this(entityManagerFactory, defaultDataSource, defaultDialect, Collections.emptyMap(), null);\n     }\n \n     @Override\n     public DataStore getDataStore() {\n \n-        MetaDataStore metaDataStore = new MetaDataStore();\n-        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder();\n+\n+        MetaDataStore metaDataStore;\n+        if (compiler != null) {\n+            try {\n+                metaDataStore = new MetaDataStore(compiler);\n+                Set<Class<?>> annotatedClasses = new HashSet<>();\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromTable.class));\n+                annotatedClasses.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+                aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n \n-        AggregationDataStore aggregationDataStore = AggregationDataStore.builder()\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder\n                 .queryEngine(new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect, connectionDetailsMap))\n                 .queryLogger(new NoopQueryLogger())\n                 .build();\n \n+        Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n         DataStore jpaStore = new JpaDataStore(\n                 () -> entityManagerFactory.createEntityManager(),\n                 (em) -> { return new NonJtaTransaction(em, txCancel); }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjM5NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486416395", "body": "Maybe we can merge this with AbstractEntityHyrdator now that this doesn't do anything.", "bodyText": "Maybe we can merge this with AbstractEntityHyrdator now that this doesn't do anything.", "bodyHTML": "<p dir=\"auto\">Maybe we can merge this with AbstractEntityHyrdator now that this doesn't do anything.</p>", "author": "aklish", "createdAt": "2020-09-10T15:03:36Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java", "diffHunk": "@@ -9,78 +9,28 @@\n import com.yahoo.elide.datastores.aggregation.QueryEngine;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-import com.yahoo.elide.utils.coerce.CoerceUtil;\n-import lombok.AccessLevel;\n-import lombok.Getter;\n \n-import java.util.AbstractMap;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.persistence.EntityManager;\n+import java.sql.ResultSet;\n \n /**\n  * {@link SQLEntityHydrator} hydrates the entity loaded by\n  * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n  */\n public class SQLEntityHydrator extends AbstractEntityHydrator {\n \n-    @Getter(AccessLevel.PRIVATE)\n-    private final EntityManager entityManager;\n-\n     /**\n      * Constructor.\n      *\n      * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n      * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n      *               objects\n      * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     * @param entityManager  An service that issues JPQL queries to load relationship objects\n      */\n     public SQLEntityHydrator(\n-            List<Object> results,\n+            ResultSet results,", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjg1Mg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486416852", "bodyText": "We can just call it EntityHydrator.", "author": "aklish", "createdAt": "2020-09-10T15:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NjM4Mg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487086382", "bodyText": "removed SQLEntityHydrator and renamed AbstractEntityHyrdator -> EntityHydrator", "author": "rishi-aga", "createdAt": "2020-09-11T14:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex e74da19619..0000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-}\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nnew file mode 100644\nindex 0000000000..276c12d84f\n--- /dev/null\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.datastores.aggregation.QueryEngine;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n+\n+import java.sql.ResultSet;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * {@link SQLEntityHydrator} hydrates the entity loaded by\n+ * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n+ */\n+public class SQLEntityHydrator extends AbstractEntityHydrator {\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n+     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n+     *               objects\n+     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n+     */\n+    public SQLEntityHydrator(\n+            ResultSet results,\n+            Query query,\n+            EntityDictionary entityDictionary\n+    ) {\n+        super(results, query, entityDictionary);\n+    }\n+\n+    @Override\n+    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n+        // Not required\n+        return Collections.emptyMap();\n+    }\n+}\n", "next_change": {"commit": "fa95290812c67c8b7bf2fbebebd3f5ffdfc6d252", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\nindex 276c12d84f..e74da19619 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n", "chunk": "@@ -36,10 +33,4 @@ public class SQLEntityHydrator extends AbstractEntityHydrator {\n     ) {\n         super(results, query, entityDictionary);\n     }\n-\n-    @Override\n-    protected Map<Object, Object> getRelationshipValues(Class<?> relationshipType, List<Object> joinFieldIds) {\n-        // Not required\n-        return Collections.emptyMap();\n-    }\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\ndeleted file mode 100644\nindex e74da19619..0000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLEntityHydrator.java\n+++ /dev/null\n", "chunk": "@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2019, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n-\n-import com.yahoo.elide.core.EntityDictionary;\n-import com.yahoo.elide.datastores.aggregation.QueryEngine;\n-import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.queryengines.AbstractEntityHydrator;\n-\n-import java.sql.ResultSet;\n-\n-/**\n- * {@link SQLEntityHydrator} hydrates the entity loaded by\n- * {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}.\n- */\n-public class SQLEntityHydrator extends AbstractEntityHydrator {\n-\n-    /**\n-     * Constructor.\n-     *\n-     * @param results The loaded objects from {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)}\n-     * @param query  The query passed to {@link QueryEngine#executeQuery(Query, QueryEngine.Transaction)} to load the\n-     *               objects\n-     * @param entityDictionary  An object that sets entity instance values and provides entity metadata info\n-     */\n-    public SQLEntityHydrator(\n-            ResultSet results,\n-            Query query,\n-            EntityDictionary entityDictionary\n-    ) {\n-        super(results, query, entityDictionary);\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMzAyNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486423026", "body": "You could commonize this code with a template function that takes another function with a result set argument\r\n\r\n```java\r\n<T> runQuery(String query, Function<ResultSet, T> resultSetMapper)\r\n```\r\nor something along those lines.", "bodyText": "You could commonize this code with a template function that takes another function with a result set argument\n<T> runQuery(String query, Function<ResultSet, T> resultSetMapper)\nor something along those lines.", "bodyHTML": "<p dir=\"auto\">You could commonize this code with a template function that takes another function with a result set argument</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;T&gt; runQuery(String query, Function&lt;ResultSet, T&gt; resultSetMapper)\"><pre><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-k\">&gt;</span> runQuery(<span class=\"pl-smi\">String</span> query, <span class=\"pl-k\">Function&lt;<span class=\"pl-smi\">ResultSet</span>, <span class=\"pl-smi\">T</span>&gt;</span> resultSetMapper)</pre></div>\n<p dir=\"auto\">or something along those lines.</p>", "author": "aklish", "createdAt": "2020-09-10T15:12:27Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +144,187 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private final Connection conn;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+        private final SQLDialect dialect;\n+\n+        SqlTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction(defaultDataSource, defaultDialect);\n+    }\n+\n+    @Override\n+    public Transaction beginTransaction(String dbConnectionName) {\n+        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        return new SqlTransaction(dataSource, dialect);\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+        SQLDialect dialect = sqlTransaction.dialect;\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n         String queryString = sql.toString();\n-        log.debug(\"SQL Query: \" + queryString);\n-        javax.persistence.Query jpaQuery = entityManager.createNativeQuery(queryString);\n \n         QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n+        NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n         if (pagination != null) {\n-            jpaQuery.setFirstResult(pagination.getOffset());\n-            jpaQuery.setMaxResults(pagination.getLimit());\n+            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n             if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, entityManager));\n+                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n             }\n         }\n \n+        log.debug(\"SQL Query: \" + queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString);\n+\n         // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, jpaQuery);\n+        supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        List<Object> results = new TimedFunction<List<Object>>(\n-                () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n-                \"Running Query: \" + queryString).get();\n+        ResultSet resultSet = new TimedFunction<ResultSet>(() -> {\n+            try {\n+                return stmt.executeQuery();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n \n-        resultBuilder.data(new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate());\n+        resultBuilder.data(new SQLEntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n-    private long getPageTotal(Query query, SQLQuery sql, EntityManager entityManager) {\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n-\n-        javax.persistence.Query pageTotalQuery =\n-                entityManager.createNativeQuery(paginationSQL)\n-                        .setHint(QueryHints.HINT_READONLY, true);\n+    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n+        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n \n-        //Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, pageTotalQuery);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n \n-        //Run the Pagination query and log the time spent.\n-        return new TimedFunction<>(\n-                () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n-                \"Running Query: \" + paginationSQL\n+        // Supply the query parameters to the query\n+        supplyFilterQueryParameters(query, stmt);\n+\n+        // Run the Pagination query and log the time spent.\n+        return new TimedFunction<>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                if (rs.next()) {\n+                    return rs.getLong(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + paginationSQL\n         ).get();\n     }\n \n     @Override\n     public String getTableVersion(Table table, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String tableVersion = null;\n         Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n         VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n-            javax.persistence.Query versionQuery =\n-                    entityManager.createNativeQuery(versionQueryString)\n-                            .setHint(QueryHints.HINT_READONLY, true);\n-            tableVersion = new TimedFunction<>(\n-                    () -> CoerceUtil.coerce(versionQuery.getSingleResult(), String.class),\n-                    \"Running Query: \" + versionQueryString\n+            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n+            tableVersion = new TimedFunction<>(() -> {", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5NzgyMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487097823", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-11T14:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMzAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 85abbd695e..af77ce49b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -274,23 +277,29 @@ public class SQLQueryEngine extends QueryEngine {\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n             NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n-            tableVersion = new TimedFunction<>(() -> {\n-                try {\n-                    ResultSet rs = stmt.executeQuery();\n-                    if (rs.next()) {\n-                        return rs.getString(1);\n-                    } else {\n-                        return null;\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            }, \"Running Query: \" + versionQueryString\n-            ).get();\n+            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n         }\n         return tableVersion;\n     }\n \n+    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n+\n+        // Run the query and log the time spent.\n+        return new TimedFunction<>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                return resultMapper.apply(rs);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n+    }\n+\n+    private Supplier<IllegalStateException> undefinedConnectionException(String str) {\n+        return () -> new IllegalStateException(\"DataSource or Dialect undefined for DB Connection Name: \" + str);\n+    }\n+\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b9..a49d1f5b18 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -277,29 +296,23 @@ public class SQLQueryEngine extends QueryEngine {\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n             NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n-            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n+            tableVersion = new TimedFunction<>(() -> {\n+                try {\n+                    ResultSet rs = stmt.executeQuery();\n+                    if (rs.next()) {\n+                        return rs.getString(1);\n+                    } else {\n+                        return null;\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            }, \"Running Query: \" + versionQueryString\n+            ).get();\n         }\n         return tableVersion;\n     }\n \n-    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n-\n-        // Run the query and log the time spent.\n-        return new TimedFunction<>(() -> {\n-            try {\n-                ResultSet rs = stmt.executeQuery();\n-                return resultMapper.apply(rs);\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n-    }\n-\n-    private Supplier<IllegalStateException> undefinedConnectionException(String str) {\n-        return () -> new IllegalStateException(\"DataSource or Dialect undefined for DB Connection Name: \" + str);\n-    }\n-\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b18..de44895c1d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -296,23 +278,25 @@ public class SQLQueryEngine extends QueryEngine {\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n             NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n-            tableVersion = new TimedFunction<>(() -> {\n-                try {\n-                    ResultSet rs = stmt.executeQuery();\n-                    if (rs.next()) {\n-                        return rs.getString(1);\n-                    } else {\n-                        return null;\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            }, \"Running Query: \" + versionQueryString\n-            ).get();\n+            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n         }\n         return tableVersion;\n     }\n \n+    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n+\n+        // Run the query and log the time spent.\n+        return new TimedFunction<R>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                return resultMapper.apply(rs);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n+    }\n+\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex de44895c1d..af77ce49b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -297,6 +296,10 @@ public class SQLQueryEngine extends QueryEngine {\n         ).get();\n     }\n \n+    private Supplier<IllegalStateException> undefinedConnectionException(String str) {\n+        return () -> new IllegalStateException(\"DataSource or Dialect undefined for DB Connection Name: \" + str);\n+    }\n+\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b9..5dbe48e699 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -296,10 +288,6 @@ public class SQLQueryEngine extends QueryEngine {\n         ).get();\n     }\n \n-    private Supplier<IllegalStateException> undefinedConnectionException(String str) {\n-        return () -> new IllegalStateException(\"DataSource or Dialect undefined for DB Connection Name: \" + str);\n-    }\n-\n     /**\n      * Returns the actual query string(s) that would be executed for the input {@link Query}.\n      *\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDU1Ng==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486424556", "body": "Instead of instantiation via string name, we could pass the class name here and use reflection to load the dialect like a plugin.", "bodyText": "Instead of instantiation via string name, we could pass the class name here and use reflection to load the dialect like a plugin.", "bodyHTML": "<p dir=\"auto\">Instead of instantiation via string name, we could pass the class name here and use reflection to load the dialect like a plugin.</p>", "author": "aklish", "createdAt": "2020-09-10T15:14:33Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java", "diffHunk": "@@ -13,19 +13,36 @@\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n+\n+    private static final SQLDialect H2_DIALECT = new H2Dialect();\n+    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n+    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n+\n     public static SQLDialect getDefaultDialect() {\n-        return new H2Dialect();\n+        return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return new H2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return new HiveDialect();\n+        return HIVE_DIALECT;\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return new PrestoDialect();\n+        return PRESTO_DIALECT;\n+    }\n+\n+    public static SQLDialect getDialect(String type) {", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NzU2Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487057563", "bodyText": "ok.", "author": "rishi-aga", "createdAt": "2020-09-11T13:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex a14f84499b..6dc584984d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -13,36 +13,29 @@ import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.Pre\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n-\n-    private static final SQLDialect H2_DIALECT = new H2Dialect();\n-    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n-    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n-\n     public static SQLDialect getDefaultDialect() {\n         return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return H2_DIALECT;\n+        return new H2Dialect();\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return HIVE_DIALECT;\n+        return new HiveDialect();\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return PRESTO_DIALECT;\n+        return new PrestoDialect();\n     }\n \n-    public static SQLDialect getDialect(String type) {\n-        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n-            return H2_DIALECT;\n-        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n-            return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n-            return PRESTO_DIALECT;\n-        } else {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect Type: \" + type);\n+    public static SQLDialect getDialect(String name) {\n+        try {\n+            return (SQLDialect) Class.forName(name).getConstructor().newInstance();\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + name, e);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + name, e);\n         }\n     }\n }\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex 6dc584984d..d3284573b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -13,29 +13,36 @@ import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.Pre\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n+\n+    private static final SQLDialect H2_DIALECT = new H2Dialect();\n+    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n+    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n+\n     public static SQLDialect getDefaultDialect() {\n-        return getH2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return new H2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return new HiveDialect();\n+        return HIVE_DIALECT;\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return new PrestoDialect();\n+        return PRESTO_DIALECT;\n     }\n \n-    public static SQLDialect getDialect(String name) {\n-        try {\n-            return (SQLDialect) Class.forName(name).getConstructor().newInstance();\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + name, e);\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + name, e);\n+    public static SQLDialect getDialect(String type) {\n+        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n+            return H2_DIALECT;\n+        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n+            return HIVE_DIALECT;\n+        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n+            return PRESTO_DIALECT;\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported SQL Dialect Type: \" + type);\n         }\n     }\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex d3284573b9..6dc584984d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -13,36 +13,29 @@ import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.Pre\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n-\n-    private static final SQLDialect H2_DIALECT = new H2Dialect();\n-    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n-    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n-\n     public static SQLDialect getDefaultDialect() {\n-        return H2_DIALECT;\n+        return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return H2_DIALECT;\n+        return new H2Dialect();\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return HIVE_DIALECT;\n+        return new HiveDialect();\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return PRESTO_DIALECT;\n+        return new PrestoDialect();\n     }\n \n-    public static SQLDialect getDialect(String type) {\n-        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n-            return H2_DIALECT;\n-        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n-            return HIVE_DIALECT;\n-        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n-            return PRESTO_DIALECT;\n-        } else {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect Type: \" + type);\n+    public static SQLDialect getDialect(String name) {\n+        try {\n+            return (SQLDialect) Class.forName(name).getConstructor().newInstance();\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + name, e);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + name, e);\n         }\n     }\n }\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\nindex 6dc584984d..d611f639bd 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java\n", "chunk": "@@ -13,29 +13,42 @@ import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.impl.Pre\n  * A class with static methods to create an instance of all Dialects.\n  */\n public class SQLDialectFactory {\n+\n+    private static final SQLDialect H2_DIALECT = new H2Dialect();\n+    private static final SQLDialect HIVE_DIALECT = new HiveDialect();\n+    private static final SQLDialect PRESTO_DIALECT = new PrestoDialect();\n+\n     public static SQLDialect getDefaultDialect() {\n         return getH2Dialect();\n     }\n \n     public static SQLDialect getH2Dialect() {\n-        return new H2Dialect();\n+        return H2_DIALECT;\n     }\n \n     public static SQLDialect getHiveDialect() {\n-        return new HiveDialect();\n+        return HIVE_DIALECT;\n     }\n \n     public static SQLDialect getPrestoDialect() {\n-        return new PrestoDialect();\n+        return PRESTO_DIALECT;\n     }\n \n-    public static SQLDialect getDialect(String name) {\n-        try {\n-            return (SQLDialect) Class.forName(name).getConstructor().newInstance();\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + name, e);\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + name, e);\n+    public static SQLDialect getDialect(String type) {\n+        if (type.equalsIgnoreCase(H2_DIALECT.getDialectType())) {\n+            return H2_DIALECT;\n+        } else if (type.equalsIgnoreCase(HIVE_DIALECT.getDialectType())) {\n+            return HIVE_DIALECT;\n+        } else if (type.equalsIgnoreCase(PRESTO_DIALECT.getDialectType())) {\n+            return PRESTO_DIALECT;\n+        } else {\n+            try {\n+                return (SQLDialect) Class.forName(type).getConstructor().newInstance();\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalArgumentException(\"Unsupported SQL Dialect: \" + type, e);\n+            } catch (Exception e) {\n+                throw new IllegalArgumentException(\"Failed to instantiate SQL Dialect: \" + type, e);\n+            }\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNjIxNQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486426215", "body": "Can you explain what this is for?", "bodyText": "Can you explain what this is for?", "bodyHTML": "<p dir=\"auto\">Can you explain what this is for?</p>", "author": "aklish", "createdAt": "2020-09-10T15:16:44Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -74,8 +76,10 @@ public static void beforeAllTests() {\n     }\n \n     @BeforeEach\n-    public void setUp() {\n-        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+    public void setUp(TestInfo info) {\n+        if (!info.getTags().contains(\"SkipBeforeEach\")) {", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NzM5Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487057393", "bodyText": "one of test case was failing for \"Extra Stubbing\" error after the changes, so had to skip \"BeforeEach\" method for it to pass.", "author": "rishi-aga", "createdAt": "2020-09-11T13:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNjIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NzY5Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487087693", "bodyText": "removed this logic and added annotation \"@MockitoSettings(strictness = Strictness.LENIENT)\"", "author": "rishi-aga", "createdAt": "2020-09-11T14:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNjIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16b..38be16031d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,9 +77,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n-            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n-        }\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n     @Test\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 38be16031d..509600f16b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,7 +77,9 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n+            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+        }\n     }\n \n     @Test\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16b..7420c9fee9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,9 +80,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n-            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n-        }\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n     @Test\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee9..4b57cffa47 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -79,7 +75,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @BeforeEach\n-    public void setUp(TestInfo info) {\n+    public void setUp() {\n         when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486428565", "body": "It would be nice if we removed all the entity manager factory code from Aggregation Store and its tests.  We should just use JDBC directly.", "bodyText": "It would be nice if we removed all the entity manager factory code from Aggregation Store and its tests.  We should just use JDBC directly.", "bodyHTML": "<p dir=\"auto\">It would be nice if we removed all the entity manager factory code from Aggregation Store and its tests.  We should just use JDBC directly.</p>", "author": "aklish", "createdAt": "2020-09-10T15:19:39Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -298,14 +299,19 @@ public Query getQuery() {\n \n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n-    public static void init(SQLDialect sqlDialect) {\n+    public static void init(String sqlDialect) {\n         emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n         em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n         em.getTransaction().commit();\n \n+        HikariConfig config = new HikariConfig();", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5ODY1OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487098659", "bodyText": "using org.apache.ibatis.jdbc.ScriptRunner for executing SQL.\nFor creating datasource, still using emf and persistence.xml. Should I create a new properties file for creating datasource ?", "author": "rishi-aga", "createdAt": "2020-09-11T14:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NjI1Nw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487146257", "bodyText": "Can we use an HJSON config for that?", "author": "aklish", "createdAt": "2020-09-11T16:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0Njk1Nw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487146957", "bodyText": "If persistence.xml is just using H2 database, there is a way to run scripts using H2 script runner - or alternatively you can run a script in the JDBC connection URL.", "author": "aklish", "createdAt": "2020-09-11T16:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMjA1Nw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488812057", "bodyText": "working on HJSON config", "author": "rishi-aga", "createdAt": "2020-09-15T16:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyODU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce46..4ed0a05cd3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +304,22 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection conn = dataSource.getConnection();\n+                        Reader reader = new InputStreamReader(\n+                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n+            ScriptRunner runner = new ScriptRunner(conn);\n+            runner.runScript(reader);\n+        } catch (SQLException | IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 4ed0a05cd3..8ed124ce46 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -304,22 +300,18 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n+        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n+        em.getTransaction().commit();\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n-        try (Connection conn = dataSource.getConnection();\n-                        Reader reader = new InputStreamReader(\n-                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n-            ScriptRunner runner = new ScriptRunner(conn);\n-            runner.runScript(reader);\n-        } catch (SQLException | IOException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce46..4ed0a05cd3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -300,18 +304,22 @@ public abstract class SQLUnitTest {\n     protected Pattern repeatedWhitespacePattern = Pattern.compile(\"\\\\s\\\\s*\");\n \n     public static void init(String sqlDialect) {\n-        emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createNativeQuery(\"DROP ALL OBJECTS;\").executeUpdate();\n-        em.createNativeQuery(\"RUNSCRIPT FROM 'classpath:create_tables.sql'\").executeUpdate();\n-        em.getTransaction().commit();\n+        EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"aggregationStore\");\n \n         HikariConfig config = new HikariConfig();\n         config.setDriverClassName(emf.getProperties().get(\"javax.persistence.jdbc.driver\").toString());\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n+        try (Connection conn = dataSource.getConnection();\n+                        Reader reader = new InputStreamReader(\n+                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n+            ScriptRunner runner = new ScriptRunner(conn);\n+            runner.runScript(reader);\n+        } catch (SQLException | IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         metaDataStore = new MetaDataStore(ClassScanner.getAllClasses(\"com.yahoo.elide.datastores.aggregation.example\"));\n \n         dictionary = new EntityDictionary(new HashMap<>());\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 4ed0a05cd3..ac093db0c5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -311,12 +307,10 @@ public abstract class SQLUnitTest {\n         config.setJdbcUrl(emf.getProperties().get(\"javax.persistence.jdbc.url\").toString());\n         DataSource dataSource = new HikariDataSource(config);\n \n-        try (Connection conn = dataSource.getConnection();\n-                        Reader reader = new InputStreamReader(\n-                                        SQLUnitTest.class.getClassLoader().getResourceAsStream(\"prepare_tables.sql\"))) {\n-            ScriptRunner runner = new ScriptRunner(conn);\n-            runner.runScript(reader);\n-        } catch (SQLException | IOException e) {\n+        try (Connection h2Conn = dataSource.getConnection()) {\n+            h2Conn.createStatement().execute(\"RUNSCRIPT FROM 'classpath:prepare_tables.sql'\");\n+        } catch (SQLException e) {\n+            ((HikariDataSource) dataSource).close();\n             throw new IllegalStateException(e);\n         }\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyOTgyNQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r486429825", "body": "This looks like a problem.  EntityManager had a way to cancel a query and tear down the resources.  Is there a way to do something similar with JDBC?", "bodyText": "This looks like a problem.  EntityManager had a way to cancel a query and tear down the resources.  Is there a way to do something similar with JDBC?", "bodyHTML": "<p dir=\"auto\">This looks like a problem.  EntityManager had a way to cancel a query and tear down the resources.  Is there a way to do something similar with JDBC?</p>", "author": "aklish", "createdAt": "2020-09-10T15:21:17Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -321,8 +327,8 @@ public static void init(SQLDialect sqlDialect) {\n         filterParser = new RSQLFilterDialect(dictionary);\n \n         metaDataStore.populateEntityDictionary(dictionary);\n-        Consumer<EntityManager> txCancel = (entityManager) -> { entityManager.unwrap(Session.class).cancelQuery(); };\n-        engine = new SQLQueryEngine(metaDataStore, emf, txCancel, sqlDialect);\n+", "originalCommit": "1dea9221e4970c498c5b51e96ca6a46302f2ba75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NjI1OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487056259", "bodyText": "JDBC supports Statement.cancel() for killing the running queries on DB. I am calling it in transaction's cancel method", "author": "rishi-aga", "createdAt": "2020-09-11T13:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyOTgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\nindex 8ed124ce46..8fdef02a70 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java\n", "chunk": "@@ -328,26 +327,11 @@ public abstract class SQLUnitTest {\n \n         metaDataStore.populateEntityDictionary(dictionary);\n \n-        engine = new SQLQueryEngine(metaDataStore, dataSource, sqlDialect);\n+        engine = new SQLQueryEngine(metaDataStore, new ConnectionDetails(dataSource, sqlDialect));\n \n         TableId tableId = new TableId(\"playerStats\", \"\", \"\");\n         playerStatsTable = engine.getTable(tableId);\n \n-        ASIA.setName(\"Asia\");\n-        ASIA.setId(\"1\");\n-\n-        NA.setName(\"North America\");\n-        NA.setId(\"2\");\n-\n-        HONG_KONG.setIsoCode(\"HKG\");\n-        HONG_KONG.setName(\"Hong Kong\");\n-        HONG_KONG.setId(\"344\");\n-        HONG_KONG.setContinent(ASIA);\n-\n-        USA.setIsoCode(\"USA\");\n-        USA.setName(\"United States\");\n-        USA.setId(\"840\");\n-        USA.setContinent(NA);\n     }\n \n     public static void init() {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NDM0MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487144340", "body": "Why are we doing this here?  I don't think we want AggregationDataStore to know about its subclasses.", "bodyText": "Why are we doing this here?  I don't think we want AggregationDataStore to know about its subclasses.", "bodyHTML": "<p dir=\"auto\">Why are we doing this here?  I don't think we want AggregationDataStore to know about its subclasses.</p>", "author": "aklish", "createdAt": "2020-09-11T16:06:42Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -63,6 +65,9 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {", "originalCommit": "a9c968d8f1496f42508f6faeed562104aafa97c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMjQwOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488812408", "bodyText": "reverted.", "author": "rishi-aga", "createdAt": "2020-09-15T16:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NDM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 7a65a01190..a12f9bb3f1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -65,9 +63,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {\n-            return new SQLAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n-        }\n-        throw new IllegalStateException(\"Unknown type of Query Engine\");\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a12f9bb3f1..7a65a01190 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -63,6 +65,9 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {\n+            return new SQLAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n+        }\n+        throw new IllegalStateException(\"Unknown type of Query Engine\");\n     }\n }\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 7a65a01190..a12f9bb3f1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -65,9 +63,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        if (queryEngine.getClass().equals(SQLQueryEngine.class)) {\n-            return new SQLAggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n-        }\n-        throw new IllegalStateException(\"Unknown type of Query Engine\");\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NzQ1MA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r487147450", "body": "What does this do?", "bodyText": "What does this do?", "bodyHTML": "<p dir=\"auto\">What does this do?</p>", "author": "aklish", "createdAt": "2020-09-11T16:12:23Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -255,6 +260,7 @@ public void loadObjectsExceptionThrownTest() throws Exception {\n     }\n \n     @Test\n+    @MockitoSettings(strictness = Strictness.LENIENT)", "originalCommit": "a9c968d8f1496f42508f6faeed562104aafa97c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNDU2MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488814561", "bodyText": "reverted it, no longer required after after reverting the changes to base class. Earlier I was getting this error: Unnecessary stubbings detected. Please remove unnecessary stubbings or use 'lenient' strictness.", "author": "rishi-aga", "createdAt": "2020-09-15T16:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NzQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a6ebd4628c5c937e91081de9405ab861f97e366", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee9..38be16031d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -260,7 +257,6 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n-    @MockitoSettings(strictness = Strictness.LENIENT)\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 38be16031d..509600f16b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -257,6 +259,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n+    @Tag(\"SkipBeforeEach\")\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16b..7420c9fee9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -259,7 +260,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n-    @Tag(\"SkipBeforeEach\")\n+    @MockitoSettings(strictness = Strictness.LENIENT)\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee9..38be16031d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -260,7 +257,6 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @Test\n-    @MockitoSettings(strictness = Strictness.LENIENT)\n     public void aggregationQueryLoggerCancelQueryTest() {\n         Mockito.reset(queryLogger);\n         AggregationDataStoreTransaction transaction =\n", "next_change": null}]}}]}}]}}]}}, {"oid": "4a6ebd4628c5c937e91081de9405ab861f97e366", "url": "https://github.com/yahoo/elide/commit/4a6ebd4628c5c937e91081de9405ab861f97e366", "message": "Rebased and fix MetaDataStoreIntegrationTest", "committedDate": "2020-09-11T21:55:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NDIwMg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488874202", "body": "May be the dialect should be renamed to PrestoDB dialect to highlight the fact that we have 2 flavors of Presto? ", "bodyText": "May be the dialect should be renamed to PrestoDB dialect to highlight the fact that we have 2 flavors of Presto?", "bodyHTML": "<p dir=\"auto\">May be the dialect should be renamed to PrestoDB dialect to highlight the fact that we have 2 flavors of Presto?</p>", "author": "moizarafat", "createdAt": "2020-09-15T18:23:48Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java", "diffHunk": "@@ -20,4 +20,10 @@ public String getDialectType() {\n     public boolean useAliasForOrderByClause() {\n         return true;\n     }\n+\n+    @Override\n+    public String appendOffsetLimit(String sql, int offset, int limit) {\n+        // offset is supported in prestosql but not in prestodb", "originalCommit": "ee7efe7046771fdab838716f7f2289b3b14d0c5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3Mzc4OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489073789", "bodyText": "renamed to PrestoDB", "author": "rishi-aga", "createdAt": "2020-09-15T23:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NDIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\nindex 9f67538d07..f4426014dc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n", "chunk": "@@ -24,6 +24,6 @@ public class PrestoDialect extends AbstractSqlDialect {\n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n         // offset is supported in prestosql but not in prestodb\n-        return sql + LIMIT + limit;\n+        return sql + \" LIMIT \" + limit;\n     }\n }\n", "next_change": {"commit": "664ed6b057089f2015af078948af6d6d7d7a2a58", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\nindex f4426014dc..9f67538d07 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n", "chunk": "@@ -24,6 +24,6 @@ public class PrestoDialect extends AbstractSqlDialect {\n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n         // offset is supported in prestosql but not in prestodb\n-        return sql + \" LIMIT \" + limit;\n+        return sql + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\nsimilarity index 72%\nrename from elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\nrename to elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\nindex 9f67538d07..59fac0b428 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/impl/PrestoDBDialect.java\n", "chunk": "@@ -22,8 +22,8 @@ public class PrestoDialect extends AbstractSqlDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n+    public String appendOffsetLimit(int offset, int limit) {\n         // offset is supported in prestosql but not in prestodb\n-        return sql + LIMIT + limit;\n+        return LIMIT + limit;\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMzkxMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488903910", "body": "instead of asking user to put new/duplicate `dialect` property can we use from the JPAProperties? ", "bodyText": "instead of asking user to put new/duplicate dialect property can we use from the JPAProperties?", "bodyHTML": "<p dir=\"auto\">instead of asking user to put new/duplicate <code>dialect</code> property can we use from the JPAProperties?</p>", "author": "moizarafat", "createdAt": "2020-09-15T19:09:37Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -64,28 +69,49 @@\n     @Autowired(required = false)\n     private MeterRegistry meterRegistry;\n \n+    @Value(\"${spring.dialect}\")", "originalCommit": "ee7efe7046771fdab838716f7f2289b3b14d0c5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3Njc1MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488976751", "bodyText": "The dialects are different classes though.  I think the spring dialect is a JPA dialect, whereas our default dialect is an Elide concept.  I'm not sure we can do this.", "author": "aklish", "createdAt": "2020-09-15T21:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMzkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3MzcwNw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489073707", "bodyText": "added default-dialect property to elide.aggregation-store", "author": "rishi-aga", "createdAt": "2020-09-15T23:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMzkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba0888..358307c09c 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -69,49 +64,28 @@ public class ElideAutoConfiguration {\n     @Autowired(required = false)\n     private MeterRegistry meterRegistry;\n \n-    @Value(\"${spring.dialect}\")\n-    private String defaultDialect;\n-\n-    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n     /**\n      * Creates a entity compiler for compiling dynamic config classes.\n      * @param settings Config Settings.\n-     * @param dbPasswordExtractor : Password Extractor Implementation.\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n+\n+    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings,\n-                    DBPasswordExtractor dbPasswordExtractor) throws Exception {\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n \n         ElideDynamicEntityCompiler compiler = null;\n \n         if (isDynamicConfigEnabled(settings)) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath(), dbPasswordExtractor);\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n         }\n         return compiler;\n     }\n \n-    /**\n-     * Creates the default Password Extractor Implementation.\n-     * @return An instance of DBPasswordExtractor.\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public DBPasswordExtractor getDBPasswordExtractor() {\n-\n-        return new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        };\n-    }\n-\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 358307c09c..88c766893b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -64,28 +69,48 @@ public class ElideAutoConfiguration {\n     @Autowired(required = false)\n     private MeterRegistry meterRegistry;\n \n+    @Value(\"${spring.dialect}\")\n+    private String defaultDialect;\n+\n+    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     /**\n      * Creates a entity compiler for compiling dynamic config classes.\n      * @param settings Config Settings.\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n-\n-    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings,\n+                    DBPasswordExtractor dbPasswordExtractor) throws Exception {\n \n         ElideDynamicEntityCompiler compiler = null;\n \n         if (isDynamicConfigEnabled(settings)) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath(), dbPasswordExtractor);\n         }\n         return compiler;\n     }\n \n+    /**\n+     * Creates the default Password Extractor Implementation.\n+     * @return An instance of DBPasswordExtractor.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public DBPasswordExtractor getDBPasswordExtractor() {\n+\n+        return new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwNjM4Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488906383", "body": "Instead of 2 return statements, We can have 1 return. In this block, we can populate the Map else the default Empty map is passed. ", "bodyText": "Instead of 2 return statements, We can have 1 return. In this block, we can populate the Map else the default Empty map is passed.", "bodyHTML": "<p dir=\"auto\">Instead of 2 return statements, We can have 1 return. In this block, we can populate the Map else the default Empty map is passed.</p>", "author": "moizarafat", "createdAt": "2020-09-15T19:14:20Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -159,18 +185,18 @@ public void inject(Object entity) {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n-        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,", "originalCommit": "ee7efe7046771fdab838716f7f2289b3b14d0c5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba0888..358307c09c 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -185,18 +159,18 @@ public class ElideAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n+        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n-                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n+            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n         } else {\n-            MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            metaDataStore = new MetaDataStore();\n         }\n+\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n     }\n \n     /**\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 358307c09c..88c766893b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -159,18 +184,18 @@ public class ElideAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n-        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n-            metaDataStore = new MetaDataStore();\n+            MetaDataStore metaDataStore = new MetaDataStore();\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n         }\n-\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n     }\n \n     /**\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 88c766893b..a20848f890 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -186,15 +184,17 @@ public class ElideAutoConfiguration {\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n+                    throws ClassNotFoundException {\n \n+        ConnectionDetails defaultConnectionDetails =\n+                        new ConnectionDetails(defaultDataSource, settings.getAggregationStore().getDefaultDialect());\n         if (isDynamicConfigEnabled(settings)) {\n             MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n                             dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n             MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n         }\n     }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0ODgwOQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488948809", "body": "static", "bodyText": "static", "bodyHTML": "<p dir=\"auto\">static</p>", "author": "aklish", "createdAt": "2020-09-15T20:19:39Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -75,6 +87,44 @@ public ElideDynamicEntityCompiler(String path) throws Exception {\n                 new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n                         Sets.newHashSet(classNames)));\n         compile();\n+\n+        elideSQLDBConfig.getDbconfigs().forEach(config -> {\n+            connectionDetailsMap.put(config.getName(),\n+                            new ConnectionDetails(getDataSource(config, dbPasswordExtractor), config.getDialect()));\n+        });\n+\n+    }\n+\n+    /**\n+     * Parse dynamic config path and provides default implementation for DB Password Extractor.\n+     * @param path : Dynamic config hjsons root location.\n+     * @throws Exception Exception thrown.\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws Exception {\n+        this(path, new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Generates DataSource for provided configuration.\n+     * @param dbConfig DB Configuration pojo.\n+     * @param dbPasswordExtractor DB Password Extractor Implementation.\n+     * @return DataSource Object.\n+     */\n+    private DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {", "originalCommit": "9d0f414511b474f4d7cdb49dcc356ebf6d4c6de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjMzNA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488982334", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-15T21:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0ODgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex ce21a453fc..bd6d8b384e 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -89,38 +86,23 @@ public class ElideDynamicEntityCompiler {\n         compile();\n \n         elideSQLDBConfig.getDbconfigs().forEach(config -> {\n-            connectionDetailsMap.put(config.getName(),\n-                            new ConnectionDetails(getDataSource(config, dbPasswordExtractor), config.getDialect()));\n+            dataSourceMap.put(config.getName(), getDataSource(config));\n+            dialectMap.put(config.getName(), config.getDialect());\n         });\n \n     }\n \n-    /**\n-     * Parse dynamic config path and provides default implementation for DB Password Extractor.\n-     * @param path : Dynamic config hjsons root location.\n-     * @throws Exception Exception thrown.\n-     */\n-    public ElideDynamicEntityCompiler(String path) throws Exception {\n-        this(path, new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        });\n-    }\n-\n     /**\n      * Generates DataSource for provided configuration.\n-     * @param dbConfig DB Configuration pojo.\n-     * @param dbPasswordExtractor DB Password Extractor Implementation.\n-     * @return DataSource Object.\n+     * @param dbConfig DB Configuration pojo\n+     * @return DataSource.\n      */\n-    private DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {\n+    private DataSource getDataSource(DBConfig dbConfig) {\n         HikariConfig config = new HikariConfig();\n \n         config.setJdbcUrl(dbConfig.getUrl());\n         config.setUsername(dbConfig.getUser());\n-        config.setPassword(dbPasswordExtractor.getDBPassword(dbConfig));\n+        config.setPassword(\"\"); // TO DO\n         config.setDriverClassName(dbConfig.getDriver());\n         dbConfig.getPropertyMap().forEach((k, v) -> config.addDataSourceProperty(k, v));\n \n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\nindex bd6d8b384e..e195aa5b2a 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java\n", "chunk": "@@ -86,23 +89,38 @@ public class ElideDynamicEntityCompiler {\n         compile();\n \n         elideSQLDBConfig.getDbconfigs().forEach(config -> {\n-            dataSourceMap.put(config.getName(), getDataSource(config));\n-            dialectMap.put(config.getName(), config.getDialect());\n+            connectionDetailsMap.put(config.getName(),\n+                            new ConnectionDetails(getDataSource(config, dbPasswordExtractor), config.getDialect()));\n         });\n \n     }\n \n+    /**\n+     * Parse dynamic config path and provides default implementation for DB Password Extractor.\n+     * @param path : Dynamic config hjsons root location\n+     * @throws Exception Exception thrown\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws Exception {\n+        this(path, new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        });\n+    }\n+\n     /**\n      * Generates DataSource for provided configuration.\n      * @param dbConfig DB Configuration pojo\n-     * @return DataSource.\n+     * @param dbPasswordExtractor DB Password Extractor Implementation\n+     * @return DataSource\n      */\n-    private DataSource getDataSource(DBConfig dbConfig) {\n+    private DataSource getDataSource(DBConfig dbConfig, DBPasswordExtractor dbPasswordExtractor) {\n         HikariConfig config = new HikariConfig();\n \n         config.setJdbcUrl(dbConfig.getUrl());\n         config.setUsername(dbConfig.getUser());\n-        config.setPassword(\"\"); // TO DO\n+        config.setPassword(dbPasswordExtractor.getDBPassword(dbConfig));\n         config.setDriverClassName(dbConfig.getDriver());\n         dbConfig.getPropertyMap().forEach((k, v) -> config.addDataSourceProperty(k, v));\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0OTA5NA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488949094", "body": "You can use @Value to make this immutable.", "bodyText": "You can use @value to make this immutable.", "bodyHTML": "<p dir=\"auto\">You can use <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/value/hovercard\" href=\"https://github.com/value\">@value</a> to make this immutable.</p>", "author": "aklish", "createdAt": "2020-09-15T20:20:06Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * Custom class to abstract {@link DataSource} and name of Dialect class.\n+ */\n+@AllArgsConstructor\n+@Getter", "originalCommit": "9d0f414511b474f4d7cdb49dcc356ebf6d4c6de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjQwMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488982403", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-15T21:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0OTA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\ndeleted file mode 100644\nindex 1985a113ad..0000000000\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-\n-import javax.sql.DataSource;\n-\n-/**\n- * Custom class to abstract {@link DataSource} and name of Dialect class.\n- */\n-@AllArgsConstructor\n-@Getter\n-public class ConnectionDetails {\n-    private DataSource dataSource;\n-    private String dialect;\n-}\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nnew file mode 100644\nindex 0000000000..1985a113ad\n--- /dev/null\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * Custom class to abstract {@link DataSource} and name of Dialect class.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class ConnectionDetails {\n+    private DataSource dataSource;\n+    private String dialect;\n+}\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nindex 1985a113ad..d48ca93a87 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -5,16 +5,14 @@\n  */\n package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import lombok.Value;\n \n import javax.sql.DataSource;\n \n /**\n  * Custom class to abstract {@link DataSource} and name of Dialect class.\n  */\n-@AllArgsConstructor\n-@Getter\n+@Value\n public class ConnectionDetails {\n     private DataSource dataSource;\n     private String dialect;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NjYxOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488956618", "body": "Why not use ConnectionDetails here?", "bodyText": "Why not use ConnectionDetails here?", "bodyHTML": "<p dir=\"auto\">Why not use ConnectionDetails here?</p>", "author": "aklish", "createdAt": "2020-09-15T20:34:21Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -41,45 +43,72 @@\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n-import org.hibernate.jpa.QueryHints;\n-\n import lombok.extern.slf4j.Slf4j;\n \n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n+import javax.sql.DataSource;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n-    private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final SQLDialect dialect;\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n-    }\n+    private final DataSource defaultDataSource;\n+    private final Map<String, DataSource> dataSourceMap = new HashMap<>();", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3MTg4MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489071881", "bodyText": "added additional ConnectionDetails class in aggregation module with dialect of type SQLDialect.", "author": "rishi-aga", "createdAt": "2020-09-15T23:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NjYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e699..9aff2a5f81 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -66,31 +65,30 @@ import javax.sql.DataSource;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n-    private final DataSource defaultDataSource;\n-    private final Map<String, DataSource> dataSourceMap = new HashMap<>();\n-    private final SQLDialect defaultDialect;\n-    private final Map<String, SQLDialect> dialectMap = new HashMap<>();\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultDataSource = defaultDataSource;\n-        this.defaultDialect = SQLDialectFactory.getDialect(defaultDialect);\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n-     * @param defaultDataSource : default DataSource Object.\n-     * @param defaultDialect : default SQL Dialect Class Name.\n-     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Class Name mapping.\n+     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n+     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n-                    Map<String, ConnectionDetails> connectionDetailsMap) {\n-        this(metaDataStore, defaultDataSource, defaultDialect);\n-        connectionDetailsMap.forEach((name, details) -> {\n-            dataSourceMap.put(name, details.getDataSource());\n-            dialectMap.put(name, SQLDialectFactory.getDialect(details.getDialect()));\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n+                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n+        this(metaDataStore, defaultConnectionDetails);\n+        detailsMap.forEach((name, details) -> {\n+            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n+                            SQLDialectFactory.getDialect(details.getDialect())));\n         });\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NzIyMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488957223", "body": "I wonder if we should make this SQLDialect instead of String.", "bodyText": "I wonder if we should make this SQLDialect instead of String.", "bodyHTML": "<p dir=\"auto\">I wonder if we should make this SQLDialect instead of String.</p>", "author": "aklish", "createdAt": "2020-09-15T20:35:29Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * Custom class to abstract {@link DataSource} and name of Dialect class.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class ConnectionDetails {\n+    private DataSource dataSource;\n+    private String dialect;", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3MjM2Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489072363", "bodyText": "SQLDialect is not available in contrib module. added the workaround for now.", "author": "rishi-aga", "createdAt": "2020-09-15T23:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NzIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\ndeleted file mode 100644\nindex 1985a113ad..0000000000\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n-\n-import javax.sql.DataSource;\n-\n-/**\n- * Custom class to abstract {@link DataSource} and name of Dialect class.\n- */\n-@AllArgsConstructor\n-@Getter\n-public class ConnectionDetails {\n-    private DataSource dataSource;\n-    private String dialect;\n-}\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nnew file mode 100644\nindex 0000000000..1985a113ad\n--- /dev/null\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * Custom class to abstract {@link DataSource} and name of Dialect class.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class ConnectionDetails {\n+    private DataSource dataSource;\n+    private String dialect;\n+}\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\nindex 1985a113ad..d48ca93a87 100644\n--- a/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n+++ b/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ConnectionDetails.java\n", "chunk": "@@ -5,16 +5,14 @@\n  */\n package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n \n-import lombok.AllArgsConstructor;\n-import lombok.Getter;\n+import lombok.Value;\n \n import javax.sql.DataSource;\n \n /**\n  * Custom class to abstract {@link DataSource} and name of Dialect class.\n  */\n-@AllArgsConstructor\n-@Getter\n+@Value\n public class ConnectionDetails {\n     private DataSource dataSource;\n     private String dialect;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1OTcwNg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488959706", "body": "Now that we are adding offset and limit directly, I feel like this functionality (appending the offset & limit string) should move to the SQLQueryConstructor", "bodyText": "Now that we are adding offset and limit directly, I feel like this functionality (appending the offset & limit string) should move to the SQLQueryConstructor", "bodyHTML": "<p dir=\"auto\">Now that we are adding offset and limit directly, I feel like this functionality (appending the offset &amp; limit string) should move to the SQLQueryConstructor</p>", "author": "aklish", "createdAt": "2020-09-15T20:40:12Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +158,165 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private Connection conn;\n+        private SQLDialect dialect;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+\n+        public void initializeTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n         String queryString = sql.toString();\n-        log.debug(\"SQL Query: \" + queryString);\n-        javax.persistence.Query jpaQuery = entityManager.createNativeQuery(queryString);\n \n         QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n+        NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n         if (pagination != null) {\n-            jpaQuery.setFirstResult(pagination.getOffset());\n-            jpaQuery.setMaxResults(pagination.getLimit());\n+            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2NjYyNA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489666624", "bodyText": "moved it to SQLQueryConstructor.", "author": "rishi-aga", "createdAt": "2020-09-16T18:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1OTcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e699..7cad4de86a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -218,37 +215,31 @@ public class SQLQueryEngine extends QueryEngine {\n         NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null) {\n-            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n-            if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n-            }\n+        if (returnPageTotals(pagination)) {\n+            resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n         }\n \n         log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<>(() -> {\n-            try {\n-                return stmt.executeQuery();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n+        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n \n         resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n     private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n+        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MDcxOQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488960719", "body": "Same comment.", "bodyText": "Same comment.", "bodyHTML": "<p dir=\"auto\">Same comment.</p>", "author": "aklish", "createdAt": "2020-09-15T20:42:12Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +158,165 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private Connection conn;\n+        private SQLDialect dialect;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+\n+        public void initializeTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n         String queryString = sql.toString();\n-        log.debug(\"SQL Query: \" + queryString);\n-        javax.persistence.Query jpaQuery = entityManager.createNativeQuery(queryString);\n \n         QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n+        NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n         if (pagination != null) {\n-            jpaQuery.setFirstResult(pagination.getOffset());\n-            jpaQuery.setMaxResults(pagination.getLimit());\n+            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n             if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, entityManager));\n+                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n             }\n         }\n \n+        log.debug(\"SQL Query: \" + queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString);\n+\n         // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, jpaQuery);\n+        supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        List<Object> results = new TimedFunction<List<Object>>(\n-                () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n-                \"Running Query: \" + queryString).get();\n+        ResultSet resultSet = new TimedFunction<>(() -> {\n+            try {\n+                return stmt.executeQuery();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n \n-        resultBuilder.data(new SQLEntityHydrator(results, query, getMetadataDictionary(), entityManager).hydrate());\n+        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n-    private long getPageTotal(Query query, SQLQuery sql, EntityManager entityManager) {\n-        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n+    private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n+        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n \n-        javax.persistence.Query pageTotalQuery =\n-                entityManager.createNativeQuery(paginationSQL)\n-                        .setHint(QueryHints.HINT_READONLY, true);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n \n-        //Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, pageTotalQuery);\n+        // Supply the query parameters to the query\n+        supplyFilterQueryParameters(query, stmt);\n \n-        //Run the Pagination query and log the time spent.\n-        return new TimedFunction<>(\n-                () -> CoerceUtil.coerce(pageTotalQuery.getSingleResult(), Long.class),\n-                \"Running Query: \" + paginationSQL\n-        ).get();\n+        // Run the Pagination query and log the time spent.\n+        return CoerceUtil.coerce(runQuery(stmt, paginationSQL, SINGLE_RESULT_MAPPER), Long.class);\n     }\n \n     @Override\n     public String getTableVersion(Table table, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String tableVersion = null;\n         Class<?> tableClass = getMetadataDictionary().getEntityClass(table.getName(), table.getVersion());\n         VersionQuery versionAnnotation = tableClass.getAnnotation(VersionQuery.class);\n         if (versionAnnotation != null) {\n             String versionQueryString = versionAnnotation.sql();\n-            javax.persistence.Query versionQuery =\n-                    entityManager.createNativeQuery(versionQueryString)\n-                            .setHint(QueryHints.HINT_READONLY, true);\n-            tableVersion = new TimedFunction<>(\n-                    () -> CoerceUtil.coerce(versionQuery.getSingleResult(), String.class),\n-                    \"Running Query: \" + versionQueryString\n-            ).get();\n+            String connectionName = table.getDbConnectionName();\n+            sqlTransaction.initializeTransaction(getDataSource(connectionName), getSQLDialect(connectionName));\n+            NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(versionQueryString);\n+            tableVersion = CoerceUtil.coerce(runQuery(stmt, versionQueryString, SINGLE_RESULT_MAPPER), String.class);\n         }\n         return tableVersion;\n     }\n \n-    @Override\n-    public List<String> explain(Query query) {\n+    private <R> R runQuery(NamedParamPreparedStatement stmt, String queryString, Function<ResultSet, R> resultMapper) {\n+\n+        // Run the query and log the time spent.\n+        return new TimedFunction<>(() -> {\n+            try {\n+                ResultSet rs = stmt.executeQuery();\n+                return resultMapper.apply(rs);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }, \"Running Query: \" + queryString\n+        ).get();\n+    }\n+\n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @param dialect SQL dialect to use for this storage.\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public List<String> explain(Query query, SQLDialect dialect) {\n         List<String> queries = new ArrayList<String>();\n         SQLQuery sql = toSQL(query, dialect);\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null && pagination.returnPageTotals()) {\n-            queries.add(toPageTotalSQL(sql, dialect).toString());\n+        if (pagination != null) {\n+            if (pagination.returnPageTotals()) {\n+                queries.add(toPageTotalSQL(sql, dialect).toString());\n+            }\n+            queries.add(appendOffsetLimit(sql.toString(), dialect, pagination.getOffset(), pagination.getLimit()));", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e699..7cad4de86a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,21 +291,17 @@ public class SQLQueryEngine extends QueryEngine {\n         SQLQuery sql = toSQL(query, dialect);\n \n         Pagination pagination = query.getPagination();\n-        if (pagination != null) {\n-            if (pagination.returnPageTotals()) {\n-                queries.add(toPageTotalSQL(sql, dialect).toString());\n-            }\n-            queries.add(appendOffsetLimit(sql.toString(), dialect, pagination.getOffset(), pagination.getLimit()));\n-        } else {\n-            queries.add(sql.toString());\n+        if (returnPageTotals(pagination)) {\n+            queries.add(toPageTotalSQL(sql, dialect).toString());\n         }\n+        queries.add(sql.toString());\n         return queries;\n     }\n \n     @Override\n     public List<String> explain(Query query) {\n         String connectionName = query.getTable().getDbConnectionName();\n-        return explain(query, getSQLDialect(connectionName));\n+        return explain(query, getConnectionDetails(connectionName).getDialect());\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MTg4Mg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488961882", "body": "Why doesn't this use the new runQuery method you added with an identity mapper?", "bodyText": "Why doesn't this use the new runQuery method you added with an identity mapper?", "bodyHTML": "<p dir=\"auto\">Why doesn't this use the new runQuery method you added with an identity mapper?</p>", "author": "aklish", "createdAt": "2020-09-15T20:44:37Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +158,165 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private Connection conn;\n+        private SQLDialect dialect;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+\n+        public void initializeTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n         String queryString = sql.toString();\n-        log.debug(\"SQL Query: \" + queryString);\n-        javax.persistence.Query jpaQuery = entityManager.createNativeQuery(queryString);\n \n         QueryResult.QueryResultBuilder resultBuilder = QueryResult.builder();\n+        NamedParamPreparedStatement stmt;\n \n         Pagination pagination = query.getPagination();\n         if (pagination != null) {\n-            jpaQuery.setFirstResult(pagination.getOffset());\n-            jpaQuery.setMaxResults(pagination.getLimit());\n+            queryString = appendOffsetLimit(queryString, dialect, pagination.getOffset(), pagination.getLimit());\n             if (pagination.returnPageTotals()) {\n-                resultBuilder.pageTotals(getPageTotal(query, sql, entityManager));\n+                resultBuilder.pageTotals(getPageTotal(query, sql, sqlTransaction));\n             }\n         }\n \n+        log.debug(\"SQL Query: \" + queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString);\n+\n         // Supply the query parameters to the query\n-        supplyFilterQueryParameters(query, jpaQuery);\n+        supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        List<Object> results = new TimedFunction<List<Object>>(\n-                () -> jpaQuery.setHint(QueryHints.HINT_READONLY, true).getResultList(),\n-                \"Running Query: \" + queryString).get();\n+        ResultSet resultSet = new TimedFunction<>(() -> {", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NDk1Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489494953", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-16T14:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MTg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e699..a49d1f5b18 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -232,7 +249,7 @@ public class SQLQueryEngine extends QueryEngine {\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<>(() -> {\n+        ResultSet resultSet = new TimedFunction<ResultSet>(() -> {\n             try {\n                 return stmt.executeQuery();\n             } catch (SQLException e) {\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b18..de44895c1d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -258,7 +252,7 @@ public class SQLQueryEngine extends QueryEngine {\n         }, \"Running Query: \" + queryString\n         ).get();\n \n-        resultBuilder.data(new SQLEntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n+        resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n", "next_change": {"commit": "ae647b5050b99f6129f4810329d9114408a3c25f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex de44895c1d..530d6e25c0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -237,29 +225,26 @@ public class SQLQueryEngine extends QueryEngine {\n         }\n \n         log.debug(\"SQL Query: \" + queryString);\n-        stmt = sqlTransaction.initializeStatement(queryString);\n+        stmt = sqlTransaction.initializeStatement(queryString, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n \n         // Run the primary query and log the time spent.\n-        ResultSet resultSet = new TimedFunction<ResultSet>(() -> {\n-            try {\n-                return stmt.executeQuery();\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }, \"Running Query: \" + queryString\n-        ).get();\n+        ResultSet resultSet = runQuery(stmt, queryString, Function.identity());\n \n         resultBuilder.data(new EntityHydrator(resultSet, query, getMetadataDictionary()).hydrate());\n         return resultBuilder.build();\n     }\n \n     private long getPageTotal(Query query, SQLQuery sql, SqlTransaction sqlTransaction) {\n-        String paginationSQL = toPageTotalSQL(sql, sqlTransaction.dialect).toString();\n+        String connectionName = query.getTable().getDbConnectionName();\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n+        String paginationSQL = toPageTotalSQL(sql, dialect).toString();\n \n-        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL);\n+        NamedParamPreparedStatement stmt = sqlTransaction.initializeStatement(paginationSQL, dataSource);\n \n         // Supply the query parameters to the query\n         supplyFilterQueryParameters(query, stmt);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NTgwMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488965800", "body": "InitializeTransaction is called twice in this file (once here and once to get the table version).  The transaction should only be initialized once because it involves getting a DB connection.  I recommend we have state about whether or not  the transaction is initialized.  One other possibility is to do the initialization lazily inside the Transaction when a new statement is created.  Then you could remove the need to initialize both the transaction and the statement in multiple places.", "bodyText": "InitializeTransaction is called twice in this file (once here and once to get the table version).  The transaction should only be initialized once because it involves getting a DB connection.  I recommend we have state about whether or not  the transaction is initialized.  One other possibility is to do the initialization lazily inside the Transaction when a new statement is created.  Then you could remove the need to initialize both the transaction and the statement in multiple places.", "bodyHTML": "<p dir=\"auto\">InitializeTransaction is called twice in this file (once here and once to get the table version).  The transaction should only be initialized once because it involves getting a DB connection.  I recommend we have state about whether or not  the transaction is initialized.  One other possibility is to do the initialization lazily inside the Transaction when a new statement is created.  Then you could remove the need to initialize both the transaction and the statement in multiple places.</p>", "author": "aklish", "createdAt": "2020-09-15T20:52:10Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -129,127 +158,165 @@ public MetricProjection constructMetricProjection(Metric metric,\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n-    static class SqlTransaction implements QueryEngine.Transaction  {\n-\n-        private final EntityManager entityManager;\n-        private final EntityTransaction transaction;\n-        private final Consumer<EntityManager> transactionCancel;\n-\n-        SqlTransaction(EntityManagerFactory emf, Consumer<EntityManager> transactionCancel) {\n+    static class SqlTransaction implements QueryEngine.Transaction {\n+\n+        private Connection conn;\n+        private SQLDialect dialect;\n+        private final List<NamedParamPreparedStatement> stmts = new ArrayList<>();\n+\n+        public void initializeTransaction(DataSource dataSource, SQLDialect dialect) {\n+            this.dialect = dialect;\n+            try {\n+                this.conn = dataSource.getConnection();\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n \n-            entityManager = emf.createEntityManager();\n-            transaction = entityManager.getTransaction();\n-            this.transactionCancel = transactionCancel;\n-            if (!transaction.isActive()) {\n-                transaction.begin();\n+        public NamedParamPreparedStatement initializeStatement(String namedParamQuery) {\n+            NamedParamPreparedStatement stmt;\n+            try {\n+                stmt = new NamedParamPreparedStatement(conn, namedParamQuery);\n+                stmts.add(stmt);\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n             }\n+            return stmt;\n         }\n \n         @Override\n         public void close() {\n-            if (transaction != null && transaction.isActive()) {\n-                transaction.commit();\n-            }\n-            if (entityManager != null) {\n-                entityManager.close();\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            transactionCancel.accept(entityManager);\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n-\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(entityManagerFactory, transactionCancel);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n-        EntityManager entityManager = ((SqlTransaction) transaction).entityManager;\n+        SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n+        sqlTransaction.initializeTransaction(dataSource, dialect);", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NTg2Nw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489495867", "bodyText": "updated to initialization lazily inside the Transaction when a new statement is created.", "author": "rishi-aga", "createdAt": "2020-09-16T14:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NTgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e699..a49d1f5b18 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -186,29 +172,60 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n-            closeSoftly(conn);\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.close();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+            try {\n+                if (conn != null) {\n+                    conn.close();\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> cancelSoftly(stmt));\n+            stmts.forEach(stmt -> {\n+                try {\n+                    if (stmt != null && !stmt.isClosed()) {\n+                        stmt.cancel();\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction();\n+        return new SqlTransaction(defaultDataSource, defaultDialect);\n+    }\n+\n+    @Override\n+    public Transaction beginTransaction(String dbConnectionName) {\n+        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n+                        .orElseThrow(() -> new IllegalStateException(\n+                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n+                                                        + dbConnectionName));\n+        return new SqlTransaction(dataSource, dialect);\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-\n-        String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n+        SQLDialect dialect = sqlTransaction.dialect;\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b18..af77ce49b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -172,60 +187,38 @@ public class SQLQueryEngine extends QueryEngine {\n \n         @Override\n         public void close() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.close();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n-            try {\n-                if (conn != null) {\n-                    conn.close();\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n+            stmts.forEach(stmt -> cancelAndCloseSoftly(stmt));\n+            closeSoftly(conn);\n         }\n \n         @Override\n         public void cancel() {\n-            stmts.forEach(stmt -> {\n-                try {\n-                    if (stmt != null && !stmt.isClosed()) {\n-                        stmt.cancel();\n-                    }\n-                } catch (SQLException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            });\n+            stmts.forEach(stmt -> cancelSoftly(stmt));\n         }\n     }\n \n     @Override\n     public QueryEngine.Transaction beginTransaction() {\n-        return new SqlTransaction(defaultDataSource, defaultDialect);\n-    }\n-\n-    @Override\n-    public Transaction beginTransaction(String dbConnectionName) {\n-        DataSource dataSource = Optional.ofNullable(dataSourceMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"DataSource or DB Configuration undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        SQLDialect dialect = Optional.ofNullable(dialectMap.get(dbConnectionName))\n-                        .orElseThrow(() -> new IllegalStateException(\n-                                        \"SQL Dialect Type undefined for DB Connection Name: \"\n-                                                        + dbConnectionName));\n-        return new SqlTransaction(dataSource, dialect);\n+        return new SqlTransaction();\n     }\n \n     @Override\n     public QueryResult executeQuery(Query query, Transaction transaction) {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n-        SQLDialect dialect = sqlTransaction.dialect;\n+\n+        String connectionName = query.getTable().getDbConnectionName();\n+        DataSource dataSource;\n+        SQLDialect dialect;\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            dataSource = defaultDataSource;\n+            dialect = defaultDialect;\n+        } else {\n+            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n+                            .orElseThrow(undefinedConnectionException(connectionName));\n+        }\n+        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex af77ce49b9..5dbe48e699 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,17 +206,8 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource;\n-        SQLDialect dialect;\n-        if (connectionName == null || connectionName.trim().isEmpty()) {\n-            dataSource = defaultDataSource;\n-            dialect = defaultDialect;\n-        } else {\n-            dataSource = Optional.ofNullable(dataSourceMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-            dialect = Optional.ofNullable(dialectMap.get(connectionName))\n-                            .orElseThrow(undefinedConnectionException(connectionName));\n-        }\n+        DataSource dataSource = getDataSource(connectionName);\n+        SQLDialect dialect = getSQLDialect(connectionName);\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5dbe48e699..9aff2a5f81 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -206,8 +204,9 @@ public class SQLQueryEngine extends QueryEngine {\n         SqlTransaction sqlTransaction = (SqlTransaction) transaction;\n \n         String connectionName = query.getTable().getDbConnectionName();\n-        DataSource dataSource = getDataSource(connectionName);\n-        SQLDialect dialect = getSQLDialect(connectionName);\n+        ConnectionDetails details = getConnectionDetails(connectionName);\n+        DataSource dataSource = details.getDataSource();\n+        SQLDialect dialect = details.getDialect();\n         sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n", "next_change": {"commit": "ae647b5050b99f6129f4810329d9114408a3c25f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9aff2a5f81..530d6e25c0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -207,7 +208,6 @@ public class SQLQueryEngine extends QueryEngine {\n         ConnectionDetails details = getConnectionDetails(connectionName);\n         DataSource dataSource = details.getDataSource();\n         SQLDialect dialect = details.getDialect();\n-        sqlTransaction.initializeTransaction(dataSource, dialect);\n \n         // Translate the query into SQL.\n         SQLQuery sql = toSQL(query, dialect);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NzE0OQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488967149", "body": "It might be better to do the appending outside the dialect.  If there are nested subqueries, we may want to apply offset and limit on an inner query.  The calling code will know how to stitch in the fragment.", "bodyText": "It might be better to do the appending outside the dialect.  If there are nested subqueries, we may want to apply offset and limit on an inner query.  The calling code will know how to stitch in the fragment.", "bodyHTML": "<p dir=\"auto\">It might be better to do the appending outside the dialect.  If there are nested subqueries, we may want to apply offset and limit on an inner query.  The calling code will know how to stitch in the fragment.</p>", "author": "aklish", "createdAt": "2020-09-15T20:54:49Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java", "diffHunk": "@@ -9,12 +9,22 @@\n  * Common code for {@link SQLDialect} implementations.\n  */\n public abstract class AbstractSqlDialect implements SQLDialect {\n+\n+    public static final String OFFSET = \" OFFSET \";\n+    public static final String LIMIT = \" LIMIT \";\n+\n     @Override\n     public boolean useAliasForOrderByClause() {\n         return false;\n     }\n \n+    @Override\n     public String generateCountDistinctClause(String dimensions) {\n         return String.format(\"COUNT(DISTINCT(%s))\", dimensions);\n     }\n+\n+    @Override\n+    public String appendOffsetLimit(String sql, int offset, int limit) {\n+        return sql + OFFSET + offset + LIMIT + limit;", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY2NjAzMQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489666031", "bodyText": "this method is now called from SQLQueryConstructor.", "author": "rishi-aga", "createdAt": "2020-09-16T18:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NzE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b0..2c385ae13d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -25,6 +21,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n     }\n }\n", "next_change": {"commit": "664ed6b057089f2015af078948af6d6d7d7a2a58", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 2c385ae13d..5c166ac4b0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -21,6 +25,6 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n \n     @Override\n     public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + \" OFFSET \" + offset + \" LIMIT \" + limit;\n+        return sql + OFFSET + offset + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 5c166ac4b0..46e7a1b702 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -24,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(String sql, int offset, int limit) {\n-        return sql + OFFSET + offset + LIMIT + limit;\n+    public String appendOffsetLimit(int offset, int limit) {\n+        return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": {"commit": "083c4cc27a896d73fcd8456379d014f07c56f304", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\nindex 46e7a1b702..f5f224bb8a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/AbstractSqlDialect.java\n", "chunk": "@@ -25,7 +25,7 @@ public abstract class AbstractSqlDialect implements SQLDialect {\n     }\n \n     @Override\n-    public String appendOffsetLimit(int offset, int limit) {\n+    public String generateOffsetLimitClause(int offset, int limit) {\n         return OFFSET + offset + SPACE + LIMIT + limit;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2Nzg0OA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488967848", "body": "TestInfo looks unused.", "bodyText": "TestInfo looks unused.", "bodyHTML": "<p dir=\"auto\">TestInfo looks unused.</p>", "author": "aklish", "createdAt": "2020-09-15T20:56:11Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java", "diffHunk": "@@ -74,7 +76,7 @@ public static void beforeAllTests() {\n     }\n \n     @BeforeEach\n-    public void setUp() {\n+    public void setUp(TestInfo info) {", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4Mzc2NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488983765", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-09-15T21:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2Nzg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 38be16031d..509600f16b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,7 +77,9 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n+            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n+        }\n     }\n \n     @Test\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 509600f16b..7420c9fee9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -77,9 +80,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n \n     @BeforeEach\n     public void setUp(TestInfo info) {\n-        if (!info.getTags().contains(\"SkipBeforeEach\")) {\n-            when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n-        }\n+        when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n     @Test\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\nindex 7420c9fee9..4b57cffa47 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransactionTest.java\n", "chunk": "@@ -79,7 +75,7 @@ class AggregationDataStoreTransactionTest extends SQLUnitTest {\n     }\n \n     @BeforeEach\n-    public void setUp(TestInfo info) {\n+    public void setUp() {\n         when(queryEngine.beginTransaction()).thenReturn(qeTransaction);\n     }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NjAzMg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488976032", "body": "Why does Async need the DBPassword config?", "bodyText": "Why does Async need the DBPassword config?", "bodyHTML": "<p dir=\"auto\">Why does Async need the DBPassword config?</p>", "author": "aklish", "createdAt": "2020-09-15T21:12:21Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java", "diffHunk": "@@ -39,6 +39,7 @@\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n+@Import(DBPasswordExtractorSetup.class)", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4ODg4OA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488988888", "bodyText": "this test uses shared application.yaml where dynamic config is enabled so it tries to parse DB and hjson and create DataSource object.\nWithout it, it will run fine independently but will fail when all tests are run together for incorrect password as it will use default implementation.", "author": "rishi-aga", "createdAt": "2020-09-15T21:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NjAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA2OTA4Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489069083", "bodyText": "this is no longer required after removing db connection hjson", "author": "rishi-aga", "createdAt": "2020-09-15T23:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NjAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\nindex c30305f7b4..2878432689 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n", "chunk": "@@ -39,7 +39,6 @@ import javax.ws.rs.core.MediaType;\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n-@Import(DBPasswordExtractorSetup.class)\n public class AsyncTest extends IntegrationTest {\n \n     @Test\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\nindex 2878432689..c30305f7b4 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n", "chunk": "@@ -39,6 +39,7 @@ import javax.ws.rs.core.MediaType;\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n+@Import(DBPasswordExtractorSetup.class)\n public class AsyncTest extends IntegrationTest {\n \n     @Test\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\nindex c30305f7b4..0e7eff3513 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java\n", "chunk": "@@ -39,7 +38,6 @@ import javax.ws.rs.core.MediaType;\n                 + \"\\t\\t('com.example.repository','Example Repository','The code for this project', false);\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n         statements = \"DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;\")\n-@Import(DBPasswordExtractorSetup.class)\n public class AsyncTest extends IntegrationTest {\n \n     @Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzgwOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488977808", "body": "Does Spring provide the DataSource for us?", "bodyText": "Does Spring provide the DataSource for us?", "bodyHTML": "<p dir=\"auto\">Does Spring provide the DataSource for us?</p>", "author": "aklish", "createdAt": "2020-09-15T21:16:04Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -159,18 +185,18 @@ public void inject(Object entity) {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+    public QueryEngine buildQueryEngine(DataSource defaultDataSource,", "originalCommit": "17fd81a5da0873e15cb613e74945aeccbb574bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4NjI4NQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r488986285", "bodyText": "yes, we are not creating DataSource anywhere.", "author": "rishi-aga", "createdAt": "2020-09-15T21:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3NzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5516ba0888..358307c09c 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -185,18 +159,18 @@ public class ElideAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n+        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n-                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n+            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n         } else {\n-            MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            metaDataStore = new MetaDataStore();\n         }\n+\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n     }\n \n     /**\n", "next_change": {"commit": "69854b2d7b710de47d2d6541a443558f6c865a95", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 358307c09c..88c766893b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -159,18 +184,18 @@ public class ElideAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+    public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n \n-        MetaDataStore metaDataStore = null;\n         if (isDynamicConfigEnabled(settings)) {\n-            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+                            dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n-            metaDataStore = new MetaDataStore();\n+            MetaDataStore metaDataStore = new MetaDataStore();\n+            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n         }\n-\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n     }\n \n     /**\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 88c766893b..a20848f890 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -186,15 +184,17 @@ public class ElideAutoConfiguration {\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryEngine buildQueryEngine(DataSource defaultDataSource,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n+                    throws ClassNotFoundException {\n \n+        ConnectionDetails defaultConnectionDetails =\n+                        new ConnectionDetails(defaultDataSource, settings.getAggregationStore().getDefaultDialect());\n         if (isDynamicConfigEnabled(settings)) {\n             MetaDataStore metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect,\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails,\n                             dynamicCompiler.getIfAvailable().getConnectionDetailsMap());\n         } else {\n             MetaDataStore metaDataStore = new MetaDataStore();\n-            return new SQLQueryEngine(metaDataStore, defaultDataSource, defaultDialect);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n         }\n     }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMDE1Mg==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489730152", "body": "Indentation is off", "bodyText": "Indentation is off", "bodyHTML": "<p dir=\"auto\">Indentation is off</p>", "author": "moizarafat", "createdAt": "2020-09-16T20:18:54Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -66,31 +63,30 @@\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n-    private final DataSource defaultDataSource;\n-    private final Map<String, DataSource> dataSourceMap = new HashMap<>();\n-    private final SQLDialect defaultDialect;\n-    private final Map<String, SQLDialect> dialectMap = new HashMap<>();\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultDataSource = defaultDataSource;\n-        this.defaultDialect = SQLDialectFactory.getDialect(defaultDialect);\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));", "originalCommit": "3458c01de2508bd2c25469357512292f585f7706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzE2Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489737163", "bodyText": "its same line.", "author": "rishi-aga", "createdAt": "2020-09-16T20:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMDE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e59975..a49d1f5b18 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,47 +63,37 @@ import javax.sql.DataSource;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n-    private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+    private final DataSource defaultDataSource;\n+    private final Map<String, DataSource> dataSourceMap = new HashMap<>();\n+    private final SQLDialect defaultDialect;\n+    private final Map<String, SQLDialect> dialectMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect) {\n         super(metaDataStore);\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+        this.defaultDataSource = defaultDataSource;\n+        this.defaultDialect = SQLDialectFactory.getDialect(defaultDialect);\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n-     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     * @param defaultDataSource : default DataSource.\n+     * @param defaultDialect : default Sql Dialect.\n+     * @param dataSourceMap : Connection Name to DataSource mapping.\n+     * @param dialectMap : Connection Name to Sql Dialect Name mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n+    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n+                    Map<String, DataSource> dataSourceMap, Map<String, String> dialectMap) {\n+        this(metaDataStore, defaultDataSource, defaultDialect);\n+        this.dataSourceMap.putAll(dataSourceMap);\n+        dialectMap.forEach((k, v) -> this.dialectMap.put(k, SQLDialectFactory.getDialect(v)));\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-    };\n+    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n+                    ElideDynamicEntityCompiler compiler) {\n+        this(metaDataStore, defaultDataSource, defaultDialect, compiler.getDataSourceMap(), compiler.getDialectMap());\n+    }\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n", "next_change": {"commit": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex a49d1f5b18..de44895c1d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -78,22 +81,33 @@ public class SQLQueryEngine extends QueryEngine {\n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n-     * @param defaultDataSource : default DataSource.\n-     * @param defaultDialect : default Sql Dialect.\n-     * @param dataSourceMap : Connection Name to DataSource mapping.\n-     * @param dialectMap : Connection Name to Sql Dialect Name mapping.\n+     * @param defaultDataSource : default DataSource Object.\n+     * @param defaultDialect : default SQL Dialect Class Name.\n+     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Class Name mapping.\n      */\n     public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n-                    Map<String, DataSource> dataSourceMap, Map<String, String> dialectMap) {\n+                    Map<String, ConnectionDetails> connectionDetailsMap) {\n         this(metaDataStore, defaultDataSource, defaultDialect);\n-        this.dataSourceMap.putAll(dataSourceMap);\n-        dialectMap.forEach((k, v) -> this.dialectMap.put(k, SQLDialectFactory.getDialect(v)));\n+        connectionDetailsMap.forEach((name, details) -> {\n+            dataSourceMap.put(name, details.getDataSource());\n+            dialectMap.put(name, SQLDialectFactory.getDialect(details.getDialect()));\n+        });\n     }\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, DataSource defaultDataSource, String defaultDialect,\n-                    ElideDynamicEntityCompiler compiler) {\n-        this(metaDataStore, defaultDataSource, defaultDialect, compiler.getDataSourceMap(), compiler.getDialectMap());\n-    }\n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n+        @Override\n+        public Object apply(ResultSet rs) {\n+            try {\n+                if (rs.next()) {\n+                    return rs.getObject(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    };\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjg3Mw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489732873", "body": "This import is unused.", "bodyText": "This import is unused.", "bodyHTML": "<p dir=\"auto\">This import is unused.</p>", "author": "moizarafat", "createdAt": "2020-09-16T20:24:24Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java", "diffHunk": "@@ -5,6 +5,8 @@\n  */\n package com.yahoo.elide.spring.config;\n \n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;", "originalCommit": "3458c01de2508bd2c25469357512292f585f7706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNjYzMw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489736633", "bodyText": "its used in javadoc", "author": "rishi-aga", "createdAt": "2020-09-16T20:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjUzNw==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r490416537", "bodyText": "ah okie :)", "author": "moizarafat", "createdAt": "2020-09-17T16:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 99f881a7b2..02e0d88b93 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -5,8 +5,6 @@\n  */\n package com.yahoo.elide.spring.config;\n \n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n-\n import lombok.Data;\n \n /**\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 02e0d88b93..e4519325cc 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -5,6 +5,9 @@\n  */\n package com.yahoo.elide.spring.config;\n \n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+\n import lombok.Data;\n \n /**\n", "next_change": {"commit": "f8774463648ef8593cd6c069933effe65e79b73d", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex e4519325cc..99f881a7b2 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -6,7 +6,6 @@\n package com.yahoo.elide.spring.config;\n \n import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialect;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n \n import lombok.Data;\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjk4MQ==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489732981", "body": "We should set to one of the supported values.", "bodyText": "We should set to one of the supported values.", "bodyHTML": "<p dir=\"auto\">We should set to one of the supported values.</p>", "author": "moizarafat", "createdAt": "2020-09-16T20:24:37Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java", "diffHunk": "@@ -18,4 +20,8 @@\n      */\n     private boolean enabled = false;\n \n+    /**\n+     * {@link SQLDialect} type for default DataSource Object.\n+     */\n+    private String defaultDialect = \"MYSQL\";", "originalCommit": "3458c01de2508bd2c25469357512292f585f7706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5MDIwOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r490390208", "bodyText": "changed to Hive.", "author": "rishi-aga", "createdAt": "2020-09-17T16:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 99f881a7b2..02e0d88b93 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -20,8 +18,4 @@ public class AggregationStoreProperties {\n      */\n     private boolean enabled = false;\n \n-    /**\n-     * {@link SQLDialect} type for default DataSource Object.\n-     */\n-    private String defaultDialect = \"MYSQL\";\n }\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 02e0d88b93..e4519325cc 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -18,4 +21,8 @@ public class AggregationStoreProperties {\n      */\n     private boolean enabled = false;\n \n+    /**\n+     * {@link SQLDialect} for default DataSource Object.\n+     */\n+    private String defaultDialect = SQLDialectFactory.getDefaultDialect().getDialectType();\n }\n", "next_change": {"commit": "f8774463648ef8593cd6c069933effe65e79b73d", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex e4519325cc..99f881a7b2 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -22,7 +21,7 @@ public class AggregationStoreProperties {\n     private boolean enabled = false;\n \n     /**\n-     * {@link SQLDialect} for default DataSource Object.\n+     * {@link SQLDialect} type for default DataSource Object.\n      */\n-    private String defaultDialect = SQLDialectFactory.getDefaultDialect().getDialectType();\n+    private String defaultDialect = \"MYSQL\";\n }\n", "next_change": {"commit": "7eee714a83a300b5bb33dbcdecd0c6939e39db7c", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\nindex 99f881a7b2..61c846e574 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/AggregationStoreProperties.java\n", "chunk": "@@ -23,5 +23,5 @@ public class AggregationStoreProperties {\n     /**\n      * {@link SQLDialect} type for default DataSource Object.\n      */\n-    private String defaultDialect = \"MYSQL\";\n+    private String defaultDialect = \"Hive\";\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzUwMA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489733500", "body": "use one of the supported types.", "bodyText": "use one of the supported types.", "bodyHTML": "<p dir=\"auto\">use one of the supported types.</p>", "author": "moizarafat", "createdAt": "2020-09-16T20:25:32Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -375,6 +376,15 @@ public String getDBPassword(DBConfig config) {\n         };\n     }\n \n+    /**\n+     * Provides the default SQLDialect type.\n+     *\n+     * @return {@link SQLDialect} type for default DataSource Object.\n+     */\n+    default String getDefaultDialect() {\n+        return \"MYSQL\";", "originalCommit": "3458c01de2508bd2c25469357512292f585f7706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzYyOA==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r489737628", "bodyText": "wanted to ensure override works properly.", "author": "rishi-aga", "createdAt": "2020-09-16T20:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5MDQ3Ng==", "url": "https://github.com/yahoo/elide/pull/1523#discussion_r490390476", "bodyText": "changed to Hive.", "author": "rishi-aga", "createdAt": "2020-09-17T16:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7b7eb3aeae..421157cb8b 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -362,29 +357,6 @@ public interface ElideStandaloneSettings {\n         return Optional.ofNullable(dynamicEntityCompiler);\n     }\n \n-    /**\n-     * Creates the default Password Extractor Implementation.\n-     *\n-     * @return An instance of DBPasswordExtractor.\n-     */\n-    default DBPasswordExtractor getDBPasswordExtractor() {\n-        return new DBPasswordExtractor() {\n-            @Override\n-            public String getDBPassword(DBConfig config) {\n-                return StringUtils.EMPTY;\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Provides the default SQLDialect type.\n-     *\n-     * @return {@link SQLDialect} type for default DataSource Object.\n-     */\n-    default String getDefaultDialect() {\n-        return \"MYSQL\";\n-    }\n-\n     /**\n      * Gets the DataStore for elide.\n      * @param metaDataStore MetaDataStore object.\n", "next_change": {"commit": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 421157cb8b..dee3f34c9a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -357,6 +361,20 @@ public interface ElideStandaloneSettings {\n         return Optional.ofNullable(dynamicEntityCompiler);\n     }\n \n+    /**\n+     * Gets the Password Extractor Implementation\n+     *\n+     * @return DBPasswordExtractor\n+     */\n+    default DBPasswordExtractor getDBPasswordExtractor() {\n+        return new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Gets the DataStore for elide.\n      * @param metaDataStore MetaDataStore object.\n", "next_change": {"commit": "98328e3419976c6b9deb6f7f4ce0d28825286710", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex dee3f34c9a..79db0bc21c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -375,6 +376,15 @@ public interface ElideStandaloneSettings {\n         };\n     }\n \n+    /**\n+     * Provides the default SQLDialect type.\n+     *\n+     * @return String dialect for default DataSource Object.\n+     */\n+    default String getDefaultDialect() {\n+        return SQLDialectFactory.getDefaultDialect().getDialectType();\n+    }\n+\n     /**\n      * Gets the DataStore for elide.\n      * @param metaDataStore MetaDataStore object.\n", "next_change": {"commit": "f8774463648ef8593cd6c069933effe65e79b73d", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 79db0bc21c..7b7eb3aeae 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -379,10 +379,10 @@ public interface ElideStandaloneSettings {\n     /**\n      * Provides the default SQLDialect type.\n      *\n-     * @return String dialect for default DataSource Object.\n+     * @return {@link SQLDialect} type for default DataSource Object.\n      */\n     default String getDefaultDialect() {\n-        return SQLDialectFactory.getDefaultDialect().getDialectType();\n+        return \"MYSQL\";\n     }\n \n     /**\n", "next_change": {"commit": "7eee714a83a300b5bb33dbcdecd0c6939e39db7c", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7b7eb3aeae..ce0393e566 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -382,7 +382,7 @@ public interface ElideStandaloneSettings {\n      * @return {@link SQLDialect} type for default DataSource Object.\n      */\n     default String getDefaultDialect() {\n-        return \"MYSQL\";\n+        return \"Hive\";\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "url": "https://github.com/yahoo/elide/commit/8be2b7ffe2aff0309c0d31f8fd9588245a1575dc", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "d9533291c7c0459182cb5d3b2a5806628348bc1c", "url": "https://github.com/yahoo/elide/commit/d9533291c7c0459182cb5d3b2a5806628348bc1c", "message": "minor updates", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "c663a02f086186aa8e22b374b8061ecc235fe9a1", "url": "https://github.com/yahoo/elide/commit/c663a02f086186aa8e22b374b8061ecc235fe9a1", "message": "Review Comments: Change Dialect to Enum", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "fa95290812c67c8b7bf2fbebebd3f5ffdfc6d252", "url": "https://github.com/yahoo/elide/commit/fa95290812c67c8b7bf2fbebebd3f5ffdfc6d252", "message": "Review Comment: Remove references for getRelationshipValues from EntityHydrator", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "664ed6b057089f2015af078948af6d6d7d7a2a58", "url": "https://github.com/yahoo/elide/commit/664ed6b057089f2015af078948af6d6d7d7a2a58", "message": "Review Comments", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "2b9f9aed822872dc4639271d5fe69f1e6496b60f", "url": "https://github.com/yahoo/elide/commit/2b9f9aed822872dc4639271d5fe69f1e6496b60f", "message": "Review Comments", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "url": "https://github.com/yahoo/elide/commit/4709e99c004bdf9713e59e9c6cf4e09251a3dc4a", "message": "Revert changes to AggregationDataStore and AggregationDataStoreTransaction", "committedDate": "2020-09-16T21:25:41Z", "type": "commit"}, {"oid": "42fcc4f783bff6be0334a35793d1c5e12686cee2", "url": "https://github.com/yahoo/elide/commit/42fcc4f783bff6be0334a35793d1c5e12686cee2", "message": "Rebased and fix MetaDataStoreIntegrationTest", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "url": "https://github.com/yahoo/elide/commit/286b895c6160dec8eccb54d4dc962ed4c7a2f56b", "message": "Elide StandAlone Changes", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "69854b2d7b710de47d2d6541a443558f6c865a95", "url": "https://github.com/yahoo/elide/commit/69854b2d7b710de47d2d6541a443558f6c865a95", "message": "Refactoring and Spring changes", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "ded581ce81830bdfc13e1d4379a7d7f6ebe84196", "url": "https://github.com/yahoo/elide/commit/ded581ce81830bdfc13e1d4379a7d7f6ebe84196", "message": "Minor", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "e4591d599576816c58f6cafb0ad03e404ea0e7b6", "url": "https://github.com/yahoo/elide/commit/e4591d599576816c58f6cafb0ad03e404ea0e7b6", "message": "Final Pass", "committedDate": "2020-09-16T21:26:20Z", "type": "commit"}, {"oid": "7c8f7edc74bb95eb371d9ed3809942a7ab2c79aa", "url": "https://github.com/yahoo/elide/commit/7c8f7edc74bb95eb371d9ed3809942a7ab2c79aa", "message": "Remove emf from SQLUNIT", "committedDate": "2020-09-16T21:27:21Z", "type": "commit"}, {"oid": "e50b44ec2b0c5241e688ca40b32166fde8f1f0d9", "url": "https://github.com/yahoo/elide/commit/e50b44ec2b0c5241e688ca40b32166fde8f1f0d9", "message": "Add missing file", "committedDate": "2020-09-16T21:27:21Z", "type": "commit"}, {"oid": "98328e3419976c6b9deb6f7f4ce0d28825286710", "url": "https://github.com/yahoo/elide/commit/98328e3419976c6b9deb6f7f4ce0d28825286710", "message": "Review Comments: Refactor Connection Details, Remove duplicate tests from Slring and Standalone", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "ae647b5050b99f6129f4810329d9114408a3c25f", "url": "https://github.com/yahoo/elide/commit/ae647b5050b99f6129f4810329d9114408a3c25f", "message": "Review Comments: Lazily Initialize Transaction", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "f8774463648ef8593cd6c069933effe65e79b73d", "url": "https://github.com/yahoo/elide/commit/f8774463648ef8593cd6c069933effe65e79b73d", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "861ddacd41352e79a7a90ac99f8d1f330c8c731e", "url": "https://github.com/yahoo/elide/commit/861ddacd41352e79a7a90ac99f8d1f330c8c731e", "message": "Review Comments: Move Offset/Limit to SQLQueryConstructor", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "083c4cc27a896d73fcd8456379d014f07c56f304", "url": "https://github.com/yahoo/elide/commit/083c4cc27a896d73fcd8456379d014f07c56f304", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "03f02a317999ef082bbc8a57e4ceba337b008fd5", "url": "https://github.com/yahoo/elide/commit/03f02a317999ef082bbc8a57e4ceba337b008fd5", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "7a9b1a27a8a2bfb24748962037b7380e1e251a9c", "url": "https://github.com/yahoo/elide/commit/7a9b1a27a8a2bfb24748962037b7380e1e251a9c", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "commit"}, {"oid": "7a9b1a27a8a2bfb24748962037b7380e1e251a9c", "url": "https://github.com/yahoo/elide/commit/7a9b1a27a8a2bfb24748962037b7380e1e251a9c", "message": "Minor changes", "committedDate": "2020-09-16T21:27:22Z", "type": "forcePushed"}, {"oid": "7eee714a83a300b5bb33dbcdecd0c6939e39db7c", "url": "https://github.com/yahoo/elide/commit/7eee714a83a300b5bb33dbcdecd0c6939e39db7c", "message": "Review Comments", "committedDate": "2020-09-17T16:20:30Z", "type": "commit"}]}