{"pr_number": 1131, "pr_title": "Adds a registry based mechanism for registering Custom GraphQL scalars ", "pr_author": "murtuza-ranapur", "pr_createdAt": "2020-01-10T12:13:21Z", "pr_url": "https://github.com/yahoo/elide/pull/1131", "timeline": [{"oid": "d0bc3989e51134d4beab7875df808c00f9af5230", "url": "https://github.com/yahoo/elide/commit/d0bc3989e51134d4beab7875df808c00f9af5230", "message": "Added support for OffsetDateTimeScalar scalar and refactored GraphQLConversionUtils implementation to support runtime detection and registration of GraphQl Scalars", "committedDate": "2020-01-09T13:11:45Z", "type": "commit"}, {"oid": "eb0154c600f3c6ec488dabc83e5dde9e9da68ce5", "url": "https://github.com/yahoo/elide/commit/eb0154c600f3c6ec488dabc83e5dde9e9da68ce5", "message": "Added ElideCoercing Interface which has method to allow implementations to return Serde for a given Scalar\nAdded usesSerdeOfType field in ElideScalarType annotation to give user flexibility to specify Type for which Serde is written", "committedDate": "2020-01-10T09:18:40Z", "type": "commit"}, {"oid": "06c3c2a7779553dcb68a2ad2dec8e29d1fc98af4", "url": "https://github.com/yahoo/elide/commit/06c3c2a7779553dcb68a2ad2dec8e29d1fc98af4", "message": "Adding test cases for OffsetDateTime scalar and GraphQLConversionUtils", "committedDate": "2020-01-10T11:47:53Z", "type": "commit"}, {"oid": "7a47a5d38deff2fdec70245511b4506c660c79f1", "url": "https://github.com/yahoo/elide/commit/7a47a5d38deff2fdec70245511b4506c660c79f1", "message": "Applied style check suggestion", "committedDate": "2020-01-10T12:02:13Z", "type": "commit"}, {"oid": "acf24b255699d03e05bcb0ae00dd8788948b35e2", "url": "https://github.com/yahoo/elide/commit/acf24b255699d03e05bcb0ae00dd8788948b35e2", "message": "Applied Codacy suggestion", "committedDate": "2020-01-10T13:14:20Z", "type": "commit"}, {"oid": "4075cb9d11f4c077364836594f6df3c6d0abe828", "url": "https://github.com/yahoo/elide/commit/4075cb9d11f4c077364836594f6df3c6d0abe828", "message": "Update OffsetDateTimeSerde.java\n\nFixing checkstyles.", "committedDate": "2020-01-10T20:02:48Z", "type": "commit"}, {"oid": "9dc2861ad80457770fbe18066fb01d94564a9694", "url": "https://github.com/yahoo/elide/commit/9dc2861ad80457770fbe18066fb01d94564a9694", "message": "Merge branch 'master' into elide-graphq;-scalar", "committedDate": "2020-01-10T21:02:02Z", "type": "commit"}, {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9", "url": "https://github.com/yahoo/elide/commit/05def52f25ef4f6a39b5989b22be9319c449bde9", "message": "Elide Annotaion now supports subtypes\nElide Annotaion now registers Serde instead of ElideCoercing\nAuto-scan happens on Elide initialization", "committedDate": "2020-01-15T08:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4ODU0OQ==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r366988549", "body": "Maybe wrap in an immutable map.", "bodyText": "Maybe wrap in an immutable map.", "bodyHTML": "<p dir=\"auto\">Maybe wrap in an immutable map.</p>", "author": "aklish", "createdAt": "2020-01-15T16:51:21Z", "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "diffHunk": "@@ -78,6 +78,10 @@\n         return (Serde<S, T>) SERDES.getOrDefault(targetType, null);\n     }\n \n+    public static Map<Class<?>, Serde<?, ?>> getSerdes() {\n+        return SERDES;", "originalCommit": "05def52f25ef4f6a39b5989b22be9319c449bde9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMjY1Nw==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367322657", "bodyText": "Sure", "author": "murtuza-ranapur", "createdAt": "2020-01-16T09:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4ODU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5ODUxMg==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r366998512", "body": "I refactored this a bit by:\r\n  1. Using a different member of ClassScanner (see other comment in this PR).\r\n  2. Linking the methods together to reduce some duplication between them.\r\n\r\n```java\r\n    private void registerCustomSerde() {\r\n        Set<Class<?>> classes = ClassScanner.getAnnotatedClasses(ElideTypeConverter.class);\r\n\r\n        for (Class<?> clazz : classes) {\r\n            if (!Serde.class.isAssignableFrom(clazz)) {\r\n                log.warn(\"Skipping Serde registration (not a Serde!): {}\", clazz);\r\n                continue;\r\n            }\r\n            Serde serde;\r\n            try {\r\n                serde = (Serde) clazz.newInstance();\r\n            } catch (InstantiationException | IllegalAccessException e) {\r\n                String errorMsg = String.format(\"Error while registering custom Serde: %s\", e.getLocalizedMessage());\r\n                log.error(errorMsg);\r\n                throw new UnableToAddSerdeException(errorMsg);\r\n            }\r\n            ElideTypeConverter converter = clazz.getAnnotation(ElideTypeConverter.class);\r\n            Class baseType = converter.type();\r\n            List<Class<?>> allTypes = Arrays.asList(converter.subTypes());\r\n            allTypes.add(baseType);\r\n\r\n            for (Class type : allTypes) {\r\n                if (!baseType.isAssignableFrom(type)) {\r\n                    throw new IllegalArgumentException(\"Mention type \" + type\r\n                            + \" not subtype of \" + baseType);\r\n                }\r\n                log.info(\"Registering serde for type : {}\", type);\r\n                CoerceUtil.register(type, serde);\r\n                registerCustomSerdeInObjectMapper(type, serde, converter.name());\r\n            }\r\n        }\r\n    }\r\n    private void registerCustomSerdeInObjectMapper(Class<?> type, Serde serde, String name) {\r\n        ObjectMapper objectMapper = mapper.getObjectMapper();\r\n        objectMapper.registerModule(new SimpleModule(name)\r\n            .addSerializer(type, new JsonSerializer<Object>() {\r\n                @Override\r\n                public void serialize(Object obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\r\n                        throws IOException, JsonProcessingException {\r\n                    jsonGenerator.writeObject(serde.serialize(obj));\r\n                }\r\n            }));\r\n    }\r\n```", "bodyText": "I refactored this a bit by:\n\nUsing a different member of ClassScanner (see other comment in this PR).\nLinking the methods together to reduce some duplication between them.\n\n    private void registerCustomSerde() {\n        Set<Class<?>> classes = ClassScanner.getAnnotatedClasses(ElideTypeConverter.class);\n\n        for (Class<?> clazz : classes) {\n            if (!Serde.class.isAssignableFrom(clazz)) {\n                log.warn(\"Skipping Serde registration (not a Serde!): {}\", clazz);\n                continue;\n            }\n            Serde serde;\n            try {\n                serde = (Serde) clazz.newInstance();\n            } catch (InstantiationException | IllegalAccessException e) {\n                String errorMsg = String.format(\"Error while registering custom Serde: %s\", e.getLocalizedMessage());\n                log.error(errorMsg);\n                throw new UnableToAddSerdeException(errorMsg);\n            }\n            ElideTypeConverter converter = clazz.getAnnotation(ElideTypeConverter.class);\n            Class baseType = converter.type();\n            List<Class<?>> allTypes = Arrays.asList(converter.subTypes());\n            allTypes.add(baseType);\n\n            for (Class type : allTypes) {\n                if (!baseType.isAssignableFrom(type)) {\n                    throw new IllegalArgumentException(\"Mention type \" + type\n                            + \" not subtype of \" + baseType);\n                }\n                log.info(\"Registering serde for type : {}\", type);\n                CoerceUtil.register(type, serde);\n                registerCustomSerdeInObjectMapper(type, serde, converter.name());\n            }\n        }\n    }\n    private void registerCustomSerdeInObjectMapper(Class<?> type, Serde serde, String name) {\n        ObjectMapper objectMapper = mapper.getObjectMapper();\n        objectMapper.registerModule(new SimpleModule(name)\n            .addSerializer(type, new JsonSerializer<Object>() {\n                @Override\n                public void serialize(Object obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n                        throws IOException, JsonProcessingException {\n                    jsonGenerator.writeObject(serde.serialize(obj));\n                }\n            }));\n    }", "bodyHTML": "<p dir=\"auto\">I refactored this a bit by:</p>\n<ol dir=\"auto\">\n<li>Using a different member of ClassScanner (see other comment in this PR).</li>\n<li>Linking the methods together to reduce some duplication between them.</li>\n</ol>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    private void registerCustomSerde() {\n        Set&lt;Class&lt;?&gt;&gt; classes = ClassScanner.getAnnotatedClasses(ElideTypeConverter.class);\n\n        for (Class&lt;?&gt; clazz : classes) {\n            if (!Serde.class.isAssignableFrom(clazz)) {\n                log.warn(&quot;Skipping Serde registration (not a Serde!): {}&quot;, clazz);\n                continue;\n            }\n            Serde serde;\n            try {\n                serde = (Serde) clazz.newInstance();\n            } catch (InstantiationException | IllegalAccessException e) {\n                String errorMsg = String.format(&quot;Error while registering custom Serde: %s&quot;, e.getLocalizedMessage());\n                log.error(errorMsg);\n                throw new UnableToAddSerdeException(errorMsg);\n            }\n            ElideTypeConverter converter = clazz.getAnnotation(ElideTypeConverter.class);\n            Class baseType = converter.type();\n            List&lt;Class&lt;?&gt;&gt; allTypes = Arrays.asList(converter.subTypes());\n            allTypes.add(baseType);\n\n            for (Class type : allTypes) {\n                if (!baseType.isAssignableFrom(type)) {\n                    throw new IllegalArgumentException(&quot;Mention type &quot; + type\n                            + &quot; not subtype of &quot; + baseType);\n                }\n                log.info(&quot;Registering serde for type : {}&quot;, type);\n                CoerceUtil.register(type, serde);\n                registerCustomSerdeInObjectMapper(type, serde, converter.name());\n            }\n        }\n    }\n    private void registerCustomSerdeInObjectMapper(Class&lt;?&gt; type, Serde serde, String name) {\n        ObjectMapper objectMapper = mapper.getObjectMapper();\n        objectMapper.registerModule(new SimpleModule(name)\n            .addSerializer(type, new JsonSerializer&lt;Object&gt;() {\n                @Override\n                public void serialize(Object obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n                        throws IOException, JsonProcessingException {\n                    jsonGenerator.writeObject(serde.serialize(obj));\n                }\n            }));\n    }\"><pre>    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> registerCustomSerde() {\n        <span class=\"pl-k\">Set&lt;<span class=\"pl-k\">Class&lt;?&gt;</span>&gt;</span> classes <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ClassScanner</span><span class=\"pl-k\">.</span>getAnnotatedClasses(<span class=\"pl-smi\">ElideTypeConverter</span><span class=\"pl-k\">.</span>class);\n\n        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">Class&lt;?&gt;</span> clazz <span class=\"pl-k\">:</span> classes) {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">Serde</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>isAssignableFrom(clazz)) {\n                log<span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Skipping Serde registration (not a Serde!): {}<span class=\"pl-pds\">\"</span></span>, clazz);\n                <span class=\"pl-k\">continue</span>;\n            }\n            <span class=\"pl-smi\">Serde</span> serde;\n            <span class=\"pl-k\">try</span> {\n                serde <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">Serde</span>) clazz<span class=\"pl-k\">.</span>newInstance();\n            } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InstantiationException</span> <span class=\"pl-k\">|</span> <span class=\"pl-smi\">IllegalAccessException</span> e) {\n                <span class=\"pl-smi\">String</span> errorMsg <span class=\"pl-k\">=</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Error while registering custom Serde: %s<span class=\"pl-pds\">\"</span></span>, e<span class=\"pl-k\">.</span>getLocalizedMessage());\n                log<span class=\"pl-k\">.</span>error(errorMsg);\n                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UnableToAddSerdeException</span>(errorMsg);\n            }\n            <span class=\"pl-smi\">ElideTypeConverter</span> converter <span class=\"pl-k\">=</span> clazz<span class=\"pl-k\">.</span>getAnnotation(<span class=\"pl-smi\">ElideTypeConverter</span><span class=\"pl-k\">.</span>class);\n            <span class=\"pl-smi\">Class</span> baseType <span class=\"pl-k\">=</span> converter<span class=\"pl-k\">.</span>type();\n            <span class=\"pl-k\">List&lt;<span class=\"pl-k\">Class&lt;?&gt;</span>&gt;</span> allTypes <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(converter<span class=\"pl-k\">.</span>subTypes());\n            allTypes<span class=\"pl-k\">.</span>add(baseType);\n\n            <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Class</span> type <span class=\"pl-k\">:</span> allTypes) {\n                <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>baseType<span class=\"pl-k\">.</span>isAssignableFrom(type)) {\n                    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mention type <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> type\n                            <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> not subtype of <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> baseType);\n                }\n                log<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Registering serde for type : {}<span class=\"pl-pds\">\"</span></span>, type);\n                <span class=\"pl-smi\">CoerceUtil</span><span class=\"pl-k\">.</span>register(type, serde);\n                registerCustomSerdeInObjectMapper(type, serde, converter<span class=\"pl-k\">.</span>name());\n            }\n        }\n    }\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> registerCustomSerdeInObjectMapper(<span class=\"pl-k\">Class&lt;?&gt;</span> type, <span class=\"pl-smi\">Serde</span> serde, <span class=\"pl-smi\">String</span> name) {\n        <span class=\"pl-smi\">ObjectMapper</span> objectMapper <span class=\"pl-k\">=</span> mapper<span class=\"pl-k\">.</span>getObjectMapper();\n        objectMapper<span class=\"pl-k\">.</span>registerModule(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">SimpleModule</span>(name)\n            .addSerializer(type, <span class=\"pl-k\">new</span> <span class=\"pl-k\">JsonSerializer&lt;<span class=\"pl-smi\">Object</span>&gt;</span>() {\n                <span class=\"pl-k\">@Override</span>\n                <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-v\">obj</span>, <span class=\"pl-smi\">JsonGenerator</span> <span class=\"pl-v\">jsonGenerator</span>, <span class=\"pl-smi\">SerializerProvider</span> <span class=\"pl-v\">serializerProvider</span>)\n                        <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span>, <span class=\"pl-smi\">JsonProcessingException</span> {\n                    jsonGenerator<span class=\"pl-k\">.</span>writeObject(serde<span class=\"pl-k\">.</span>serialize(obj));\n                }\n            }));\n    }</pre></div>", "author": "aklish", "createdAt": "2020-01-15T17:09:55Z", "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -77,6 +92,69 @@ public Elide(ElideSettings elideSettings) {\n         elideSettings.getSerdes().forEach((targetType, serde) -> {\n             CoerceUtil.register(targetType, serde);\n         });\n+\n+        registerCustomSerde();\n+        registerCustomSerdeInObjectMapper();\n+    }\n+\n+    private void registerCustomSerde() {", "originalCommit": "05def52f25ef4f6a39b5989b22be9319c449bde9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNjIwMQ==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367406201", "bodyText": "Replaced my code with yours, made some minor changes here and there. Thanks! for the lesson on short circuit though :)", "author": "murtuza-ranapur", "createdAt": "2020-01-16T13:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5ODUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTI5NQ==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367005295", "body": "This method leaks ClassInfo.  We don't want ClassGraph concepts to leak into core Elide.  I would just use getAnnotatedClasses instead.", "bodyText": "This method leaks ClassInfo.  We don't want ClassGraph concepts to leak into core Elide.  I would just use getAnnotatedClasses instead.", "bodyHTML": "<p dir=\"auto\">This method leaks ClassInfo.  We don't want ClassGraph concepts to leak into core Elide.  I would just use getAnnotatedClasses instead.</p>", "author": "aklish", "createdAt": "2020-01-15T17:23:21Z", "path": "elide-core/src/main/java/com/yahoo/elide/utils/ClassScanner.java", "diffHunk": "@@ -57,6 +58,18 @@\n         }\n     }\n \n+    /**\n+     * Scans all classes accessible from the context class loader which belong to the current class loader.\n+     *\n+     * @param annotation  Annotation to search\n+     * @return The classeInfos\n+     */\n+    static public List<ClassInfo> getAnnotatedClassInfos(Class<? extends Annotation> annotation) {", "originalCommit": "05def52f25ef4f6a39b5989b22be9319c449bde9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDQ0OA==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367324448", "bodyText": "It slipped through. Its not used anywhere. Will simply remove it.", "author": "murtuza-ranapur", "createdAt": "2020-01-16T09:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTc0Nw==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367005747", "body": "I think the correct spelling is converter", "bodyText": "I think the correct spelling is converter", "bodyHTML": "<p dir=\"auto\">I think the correct spelling is converter</p>", "author": "aklish", "createdAt": "2020-01-15T17:24:10Z", "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/converters/ElideTypeConvertor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.utils.coerce.converters;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface ElideTypeConvertor {", "originalCommit": "05def52f25ef4f6a39b5989b22be9319c449bde9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNjk2MA==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367406960", "bodyText": "Noted, will correct the typo.", "author": "murtuza-ranapur", "createdAt": "2020-01-16T13:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTc0Nw=="}], "type": "inlineReview"}, {"oid": "414623518082af7c2f02ab1cd515642610b9e8ca", "url": "https://github.com/yahoo/elide/commit/414623518082af7c2f02ab1cd515642610b9e8ca", "message": "Applied PR Review Suggestions\n\n1. Fixed typos\n2. Removed unused method from ClassScanner\n3. Added suggested refactored Serde scanning code\n4. CoerceUtil now returns Immutable Serde map", "committedDate": "2020-01-16T13:21:22Z", "type": "commit"}, {"oid": "fd871a0624f7b056f6e6ae7bd8897d9979110c47", "url": "https://github.com/yahoo/elide/commit/fd871a0624f7b056f6e6ae7bd8897d9979110c47", "message": "Fixing checkstyle (extra space)", "committedDate": "2020-01-16T15:48:31Z", "type": "commit"}]}