{"pr_number": 1205, "pr_title": "Elide 5.x elide-async integration in elide-standalone", "pr_author": "moizarafat", "pr_createdAt": "2020-02-26T22:41:56Z", "pr_url": "https://github.com/yahoo/elide/pull/1205", "merge_commit": "70038d5a065c54556906c736ca9125784be81e76", "timeline": [{"oid": "4fda2e9c224ece2d9912af7706a5d0215027c250", "url": "https://github.com/yahoo/elide/commit/4fda2e9c224ece2d9912af7706a5d0215027c250", "message": "Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-26T22:22:54Z", "type": "commit"}, {"oid": "3468a01d366b891e8b568894ae697ecb9f669225", "url": "https://github.com/yahoo/elide/commit/3468a01d366b891e8b568894ae697ecb9f669225", "message": "Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T15:51:46Z", "type": "commit"}, {"oid": "5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "url": "https://github.com/yahoo/elide/commit/5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "message": "Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T15:52:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzM5OQ==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385263399", "body": "I don't think we need this.", "bodyText": "I don't think we need this.", "bodyHTML": "<p dir=\"auto\">I don't think we need this.</p>", "author": "aklish", "createdAt": "2020-02-27T17:34:45Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -179,6 +195,42 @@ default boolean enableJSONAPI() {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getMaxRunTime() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of hosts running Elide Service.\n+     *\n+     * @return Default: 1\n+     */\n+    default Integer getNumberOfHosts() {", "originalCommit": "5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0NjA2NQ==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385346065", "bodyText": "We are using this param to randomize the start-up time for the cleanup executor. If we have more than 1 host running and then if all of them have the cleanup service executing at the same time they could possibly try to update/delete the record at the same time and have lock error etc.  so this is how we are using it here. \n  \n    \n      elide/elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java\n    \n    \n        Lines 59 to 63\n      in\n      c88d08a\n    \n    \n    \n    \n\n        \n          \n           Random random = new Random(); \n        \n\n        \n          \n           int initialDelay = random.ints(0, numberOfNodes * 2).limit(1).findFirst().getAsInt(); \n        \n\n        \n          \n            \n        \n\n        \n          \n           //Having a delay of at least DEFAULT_CLEANUP_DELAY between two cleanup attempts. \n        \n\n        \n          \n           cleaner.scheduleWithFixedDelay(cleanUpTask, initialDelay, Math.max(DEFAULT_CLEANUP_DELAY, maxRunTime * 2), TimeUnit.MINUTES);", "author": "moizarafat", "createdAt": "2020-02-27T20:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzM5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0NTEzNw==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r386145137", "bodyText": "done", "author": "moizarafat", "createdAt": "2020-03-01T22:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "19a247fa3d8ca46f6e9b850c3eca0a54f1ebed6a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex aa3a37ad2..f28afe9f6 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -219,19 +205,10 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTime() {\n+    default Integer getMaxRunTimeMinutes() {\n         return 60;\n     }\n \n-    /**\n-     * Number of hosts running Elide Service.\n-     *\n-     * @return Default: 1\n-     */\n-    default Integer getNumberOfHosts() {\n-        return 1;\n-    }\n-\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "23b22fb689d48eca5fc5dfcc088a0024d94c9d4e", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex f28afe9f6..ea4d7c4f3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -209,6 +217,15 @@ public interface ElideStandaloneSettings {\n         return 60;\n     }\n \n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getQueryCleanupDays() {\n+        return 7;\n+    }\n+\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "379f545d61fbca5842e756dca2cd08c22ffce0dd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex ea4d7c4f3..44f9f4dbf 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -213,17 +207,17 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTimeMinutes() {\n+    default Integer getMaxRunTime() {\n         return 60;\n     }\n \n     /**\n-     * Number of days history to retain for async query executions and results.\n+     * Number of hosts running Elide Service.\n      *\n-     * @return Default: 7\n+     * @return Default: 1\n      */\n-    default Integer getQueryCleanupDays() {\n-        return 7;\n+    default Integer getNumberOfHosts() {\n+        return 1;\n     }\n \n     /**\n", "next_change": {"commit": "2d52b47ad1191fe492874e5ca3dd9c6a0bb96f90", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 44f9f4dbf..559379c88 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -207,19 +191,10 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTime() {\n+    default Integer getMaxRunTimeMinutes() {\n         return 60;\n     }\n \n-    /**\n-     * Number of hosts running Elide Service.\n-     *\n-     * @return Default: 1\n-     */\n-    default Integer getNumberOfHosts() {\n-        return 1;\n-    }\n-\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "b6d0928e0e114ada10b339134740d43e9afa9f54", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 559379c88..6568a5e0b 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -195,6 +204,15 @@ public interface ElideStandaloneSettings {\n         return 60;\n     }\n \n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getQueryCleanupDays() {\n+        return 7;\n+    }\n+\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "2e1b1824dcb350c6503e252b06fd9ac399b8656e", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 6568a5e0b..81fed31bb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -213,6 +215,15 @@ public interface ElideStandaloneSettings {\n         return 7;\n     }\n \n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return new DefaultAsyncQueryDAO();\n+    }\n+\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "9a34233254173fc009f4c3e7661a4e313e7277ef", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81fed31bb..623f1d82c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -211,17 +211,26 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 7\n      */\n-    default Integer getQueryCleanupDays() {\n+    default Integer getAsyncQueryCleanupDays() {\n         return 7;\n     }\n \n+    /**\n+     *  Root path specification for the Async Models Swagger endpoint.\n+     *\n+     * @return Default: /api/v1\n+     */\n+    default String getAsyncSwaggerPath() {\n+        return \"/api/v1\";\n+    }\n+\n     /**\n      * Implementation of AsyncQueryDAO to use.\n      *\n      * @return AsyncQueryDAO type object.\n      */\n     default AsyncQueryDAO getAsyncQueryDAO() {\n-        return new DefaultAsyncQueryDAO();\n+        return null;\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex aa3a37ad2..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -219,17 +202,26 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTime() {\n+    default Integer getAsyncMaxRunTimeMinutes() {\n         return 60;\n     }\n \n     /**\n-     * Number of hosts running Elide Service.\n+     * Number of days history to retain for async query executions and results.\n      *\n-     * @return Default: 1\n+     * @return Default: 7\n      */\n-    default Integer getNumberOfHosts() {\n-        return 1;\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;\n     }\n \n     /**\n", "next_change": {"commit": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex a34eb18c7..b6da96d9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -169,66 +178,12 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n-    \n-    /**\n-     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsync() {\n-        return false;\n-    }\n-\n-    /**\n-     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsyncCleanup() {\n-        return false;\n-    }\n-\n-    /**\n-     * Thread Size for Async queries to run in parallel.\n-     *\n-     * @return Default: 5\n-     */\n-    default Integer getAsyncThreadSize() {\n-        return 5;\n-    }\n-\n-    /**\n-     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n-     *\n-     * @return Default: 60\n-     */\n-    default Integer getAsyncMaxRunTimeMinutes() {\n-        return 60;\n-    }\n-\n-    /**\n-     * Number of days history to retain for async query executions and results.\n-     *\n-     * @return Default: 7\n-     */\n-    default Integer getAsyncQueryCleanupDays() {\n-        return 7;\n-    }\n-\n-    /**\n-     * Implementation of AsyncQueryDAO to use.\n-     *\n-     * @return AsyncQueryDAO type object.\n-     */\n-    default AsyncQueryDAO getAsyncQueryDAO() {\n-        return null;\n-    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableISO8601Dates() {\n+    default boolean enableIS06081Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b6da96d9c..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -178,12 +165,66 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getAsyncMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;\n+    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableIS06081Dates() {\n+    default boolean enableISO8601Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -222,7 +238,7 @@ public interface ElideStandaloneSettings {\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n-     * @return\n+     * @return whether ISO8601Dates are enabled.\n      */\n     default boolean enableISO8601Dates() {\n         return true;\n", "next_change": null}, {"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -231,18 +247,57 @@ public interface ElideStandaloneSettings {\n     /**\n      * Whether or not Codahale metrics, healthchecks, thread, ping, and admin servlet\n      * should be enabled.\n-     * @return\n+     * @return  whether ServiceMonitoring is enabled.\n      */\n     default boolean enableServiceMonitoring() {\n         return true;\n     }\n \n     /**\n-     * Enable swagger documentation by returning non empty list.\n+     * Enable swagger documentation.\n+     * @return whether Swagger is enabled;\n+     */\n+    default boolean enableSwagger() {\n+        return false;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API version.\n+     * The models with the same version are included.\n+     * @return swagger version;\n+     */\n+    default String getSwaggerVersion() {\n+        return NO_VERSION;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API name.\n+     * @return swagger service name;\n+     */\n+    default String getSwaggerName() {\n+        return \"Elide Service\";\n+    }\n+\n+    /**\n+     * Creates a singular swagger document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n      * @return list of swagger registration objects.\n      */\n-    default List<DocEndpoint.SwaggerRegistration> enableSwagger() {\n-        return new ArrayList<>();\n+    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n+        Info info = new Info()\n+                .title(getSwaggerName())\n+                .version(getSwaggerVersion());\n+\n+        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n+\n+        Swagger swagger = builder.build().basePath(moduleBasePath);\n+\n+        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n+        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+\n+        return docs;\n     }\n \n     /**\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..36bc00e65 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -254,48 +315,56 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Enable swagger documentation.\n-     * @return whether Swagger is enabled;\n+     * Enable OpenAPI documentation.\n+     * @return whether OpenAPI is enabled;\n      */\n-    default boolean enableSwagger() {\n+    default boolean enableApiDocs() {\n         return false;\n     }\n \n     /**\n-     * Swagger documentation requires an API version.\n-     * The models with the same version are included.\n-     * @return swagger version;\n+     * The OpenAPI Specification Version to generate.\n+     * @return the OpenAPI Specification Version to generate\n      */\n-    default String getSwaggerVersion() {\n-        return NO_VERSION;\n+    default OpenApiVersion getOpenApiVersion() {\n+        return OpenApiVersion.OPENAPI_3_0;\n     }\n \n     /**\n-     * Swagger documentation requires an API name.\n-     * @return swagger service name;\n+     * The service base URL that clients use in queries.  Elide will reference this name\n+     * in any callback URLs returned by the service.  If not set, Elide uses the API request to generate the base URL.\n+     * @return The base URL of the service.\n      */\n-    default String getSwaggerName() {\n-        return \"Elide Service\";\n+    default String getBaseUrl() {\n+        return \"\";\n     }\n \n     /**\n-     * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models. .\n-     * @return list of swagger registration objects.\n+     * OpenAPI documentation requires an API name.\n+     * @return open api service name;\n      */\n-    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n-        Info info = new Info()\n-                .title(getSwaggerName())\n-                .version(getSwaggerVersion());\n-\n-        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-\n-        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-        Swagger swagger = builder.build().basePath(moduleBasePath);\n+    default String getApiTitle() {\n+        return \"Elide Service\";\n+    }\n \n-        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n-        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+    /**\n+     * Creates a singular OpenAPI document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n+     * @return list of OpenAPI registration objects.\n+     */\n+    default List<ApiDocsEndpoint.ApiDocsRegistration> buildApiDocs(EntityDictionary dictionary) {\n+        List<ApiDocsEndpoint.ApiDocsRegistration> docs = new ArrayList<>();\n+\n+        dictionary.getApiVersions().stream().forEach(apiVersion -> {\n+            Info info = new Info()\n+                    .title(getApiTitle())\n+                    .version(apiVersion);\n+            OpenApiBuilder builder = new OpenApiBuilder(dictionary).apiVersion(apiVersion);\n+            String moduleBasePath = getJsonApiPathSpec().replace(\"/*\", \"\");\n+            OpenAPI openApi = builder.build().info(info).addServersItem(new Server().url(moduleBasePath));\n+            docs.add(new ApiDocsEndpoint.ApiDocsRegistration(\"test\", () -> openApi, getOpenApiVersion().getValue(),\n+                    apiVersion));\n+        });\n \n         return docs;\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "committedDate": "2020-05-18 13:58:16 -0500", "message": "Add Eclipse import order (#1327)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzY5OA==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385263698", "body": "See comments I Had on Spring in general.  Settings that involve time should have units in their name.  We need two time settings (timeout and delete).", "bodyText": "See comments I Had on Spring in general.  Settings that involve time should have units in their name.  We need two time settings (timeout and delete).", "bodyHTML": "<p dir=\"auto\">See comments I Had on Spring in general.  Settings that involve time should have units in their name.  We need two time settings (timeout and delete).</p>", "author": "aklish", "createdAt": "2020-02-27T17:35:22Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -179,6 +195,42 @@ default boolean enableJSONAPI() {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getMaxRunTime() {", "originalCommit": "5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MDgzNg==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385370836", "bodyText": "Done", "author": "moizarafat", "createdAt": "2020-02-27T21:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "a65e7bd4f1620e55be7a2df95a99e8aa9d3e8810", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex aa3a37ad2..1e73d2be4 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -219,7 +220,7 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTime() {\n+    default Integer getMaxRunTimeMinutes() {\n         return 60;\n     }\n \n", "next_change": {"commit": "19a247fa3d8ca46f6e9b850c3eca0a54f1ebed6a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 1e73d2be4..f28afe9f6 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -224,15 +209,6 @@ public interface ElideStandaloneSettings {\n         return 60;\n     }\n \n-    /**\n-     * Number of hosts running Elide Service.\n-     *\n-     * @return Default: 1\n-     */\n-    default Integer getNumberOfHosts() {\n-        return 1;\n-    }\n-\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "23b22fb689d48eca5fc5dfcc088a0024d94c9d4e", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex f28afe9f6..ea4d7c4f3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -209,6 +217,15 @@ public interface ElideStandaloneSettings {\n         return 60;\n     }\n \n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getQueryCleanupDays() {\n+        return 7;\n+    }\n+\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "379f545d61fbca5842e756dca2cd08c22ffce0dd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex ea4d7c4f3..44f9f4dbf 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -213,17 +207,17 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTimeMinutes() {\n+    default Integer getMaxRunTime() {\n         return 60;\n     }\n \n     /**\n-     * Number of days history to retain for async query executions and results.\n+     * Number of hosts running Elide Service.\n      *\n-     * @return Default: 7\n+     * @return Default: 1\n      */\n-    default Integer getQueryCleanupDays() {\n-        return 7;\n+    default Integer getNumberOfHosts() {\n+        return 1;\n     }\n \n     /**\n", "next_change": {"commit": "2d52b47ad1191fe492874e5ca3dd9c6a0bb96f90", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 44f9f4dbf..559379c88 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -207,19 +191,10 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTime() {\n+    default Integer getMaxRunTimeMinutes() {\n         return 60;\n     }\n \n-    /**\n-     * Number of hosts running Elide Service.\n-     *\n-     * @return Default: 1\n-     */\n-    default Integer getNumberOfHosts() {\n-        return 1;\n-    }\n-\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "b6d0928e0e114ada10b339134740d43e9afa9f54", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 559379c88..6568a5e0b 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -195,6 +204,15 @@ public interface ElideStandaloneSettings {\n         return 60;\n     }\n \n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getQueryCleanupDays() {\n+        return 7;\n+    }\n+\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "2e1b1824dcb350c6503e252b06fd9ac399b8656e", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 6568a5e0b..81fed31bb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -213,6 +215,15 @@ public interface ElideStandaloneSettings {\n         return 7;\n     }\n \n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return new DefaultAsyncQueryDAO();\n+    }\n+\n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n", "next_change": {"commit": "9a34233254173fc009f4c3e7661a4e313e7277ef", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81fed31bb..623f1d82c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -211,17 +211,26 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 7\n      */\n-    default Integer getQueryCleanupDays() {\n+    default Integer getAsyncQueryCleanupDays() {\n         return 7;\n     }\n \n+    /**\n+     *  Root path specification for the Async Models Swagger endpoint.\n+     *\n+     * @return Default: /api/v1\n+     */\n+    default String getAsyncSwaggerPath() {\n+        return \"/api/v1\";\n+    }\n+\n     /**\n      * Implementation of AsyncQueryDAO to use.\n      *\n      * @return AsyncQueryDAO type object.\n      */\n     default AsyncQueryDAO getAsyncQueryDAO() {\n-        return new DefaultAsyncQueryDAO();\n+        return null;\n     }\n \n     /**\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex aa3a37ad2..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -219,17 +202,26 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTime() {\n+    default Integer getAsyncMaxRunTimeMinutes() {\n         return 60;\n     }\n \n     /**\n-     * Number of hosts running Elide Service.\n+     * Number of days history to retain for async query executions and results.\n      *\n-     * @return Default: 1\n+     * @return Default: 7\n      */\n-    default Integer getNumberOfHosts() {\n-        return 1;\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;\n     }\n \n     /**\n", "next_change": {"commit": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex a34eb18c7..b6da96d9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -169,66 +178,12 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n-    \n-    /**\n-     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsync() {\n-        return false;\n-    }\n-\n-    /**\n-     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsyncCleanup() {\n-        return false;\n-    }\n-\n-    /**\n-     * Thread Size for Async queries to run in parallel.\n-     *\n-     * @return Default: 5\n-     */\n-    default Integer getAsyncThreadSize() {\n-        return 5;\n-    }\n-\n-    /**\n-     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n-     *\n-     * @return Default: 60\n-     */\n-    default Integer getAsyncMaxRunTimeMinutes() {\n-        return 60;\n-    }\n-\n-    /**\n-     * Number of days history to retain for async query executions and results.\n-     *\n-     * @return Default: 7\n-     */\n-    default Integer getAsyncQueryCleanupDays() {\n-        return 7;\n-    }\n-\n-    /**\n-     * Implementation of AsyncQueryDAO to use.\n-     *\n-     * @return AsyncQueryDAO type object.\n-     */\n-    default AsyncQueryDAO getAsyncQueryDAO() {\n-        return null;\n-    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableISO8601Dates() {\n+    default boolean enableIS06081Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b6da96d9c..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -178,12 +165,66 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getAsyncMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;\n+    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableIS06081Dates() {\n+    default boolean enableISO8601Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -222,7 +238,7 @@ public interface ElideStandaloneSettings {\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n-     * @return\n+     * @return whether ISO8601Dates are enabled.\n      */\n     default boolean enableISO8601Dates() {\n         return true;\n", "next_change": null}, {"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -231,18 +247,57 @@ public interface ElideStandaloneSettings {\n     /**\n      * Whether or not Codahale metrics, healthchecks, thread, ping, and admin servlet\n      * should be enabled.\n-     * @return\n+     * @return  whether ServiceMonitoring is enabled.\n      */\n     default boolean enableServiceMonitoring() {\n         return true;\n     }\n \n     /**\n-     * Enable swagger documentation by returning non empty list.\n+     * Enable swagger documentation.\n+     * @return whether Swagger is enabled;\n+     */\n+    default boolean enableSwagger() {\n+        return false;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API version.\n+     * The models with the same version are included.\n+     * @return swagger version;\n+     */\n+    default String getSwaggerVersion() {\n+        return NO_VERSION;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API name.\n+     * @return swagger service name;\n+     */\n+    default String getSwaggerName() {\n+        return \"Elide Service\";\n+    }\n+\n+    /**\n+     * Creates a singular swagger document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n      * @return list of swagger registration objects.\n      */\n-    default List<DocEndpoint.SwaggerRegistration> enableSwagger() {\n-        return new ArrayList<>();\n+    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n+        Info info = new Info()\n+                .title(getSwaggerName())\n+                .version(getSwaggerVersion());\n+\n+        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n+\n+        Swagger swagger = builder.build().basePath(moduleBasePath);\n+\n+        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n+        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+\n+        return docs;\n     }\n \n     /**\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..36bc00e65 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -254,48 +315,56 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Enable swagger documentation.\n-     * @return whether Swagger is enabled;\n+     * Enable OpenAPI documentation.\n+     * @return whether OpenAPI is enabled;\n      */\n-    default boolean enableSwagger() {\n+    default boolean enableApiDocs() {\n         return false;\n     }\n \n     /**\n-     * Swagger documentation requires an API version.\n-     * The models with the same version are included.\n-     * @return swagger version;\n+     * The OpenAPI Specification Version to generate.\n+     * @return the OpenAPI Specification Version to generate\n      */\n-    default String getSwaggerVersion() {\n-        return NO_VERSION;\n+    default OpenApiVersion getOpenApiVersion() {\n+        return OpenApiVersion.OPENAPI_3_0;\n     }\n \n     /**\n-     * Swagger documentation requires an API name.\n-     * @return swagger service name;\n+     * The service base URL that clients use in queries.  Elide will reference this name\n+     * in any callback URLs returned by the service.  If not set, Elide uses the API request to generate the base URL.\n+     * @return The base URL of the service.\n      */\n-    default String getSwaggerName() {\n-        return \"Elide Service\";\n+    default String getBaseUrl() {\n+        return \"\";\n     }\n \n     /**\n-     * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models. .\n-     * @return list of swagger registration objects.\n+     * OpenAPI documentation requires an API name.\n+     * @return open api service name;\n      */\n-    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n-        Info info = new Info()\n-                .title(getSwaggerName())\n-                .version(getSwaggerVersion());\n-\n-        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-\n-        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-        Swagger swagger = builder.build().basePath(moduleBasePath);\n+    default String getApiTitle() {\n+        return \"Elide Service\";\n+    }\n \n-        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n-        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+    /**\n+     * Creates a singular OpenAPI document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n+     * @return list of OpenAPI registration objects.\n+     */\n+    default List<ApiDocsEndpoint.ApiDocsRegistration> buildApiDocs(EntityDictionary dictionary) {\n+        List<ApiDocsEndpoint.ApiDocsRegistration> docs = new ArrayList<>();\n+\n+        dictionary.getApiVersions().stream().forEach(apiVersion -> {\n+            Info info = new Info()\n+                    .title(getApiTitle())\n+                    .version(apiVersion);\n+            OpenApiBuilder builder = new OpenApiBuilder(dictionary).apiVersion(apiVersion);\n+            String moduleBasePath = getJsonApiPathSpec().replace(\"/*\", \"\");\n+            OpenAPI openApi = builder.build().info(info).addServersItem(new Server().url(moduleBasePath));\n+            docs.add(new ApiDocsEndpoint.ApiDocsRegistration(\"test\", () -> openApi, getOpenApiVersion().getValue(),\n+                    apiVersion));\n+        });\n \n         return docs;\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "committedDate": "2020-05-18 13:58:16 -0500", "message": "Add Eclipse import order (#1327)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzkyNg==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385263926", "body": "We don't need a setting for this.  The package name is fixed (by us).", "bodyText": "We don't need a setting for this.  The package name is fixed (by us).", "bodyHTML": "<p dir=\"auto\">We don't need a setting for this.  The package name is fixed (by us).</p>", "author": "aklish", "createdAt": "2020-02-27T17:35:49Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -131,6 +132,21 @@ default int getPort() {\n     default String getModelPackageName() {\n         return \"com.yourcompany.elide.models\";\n     }\n+    \n+    /**\n+     * Package name containing the Async models to support the Async query feature. This package will be \n+     * recursively scanned for @Entity's and registered with Elide.\n+     *\n+     * NOTE: This will scan for all entities in that package and bind this data to a set named \"elideAllModels\".\n+     *       If providing a custom ElideSettings object, you can inject this data into your class by using:\n+     *\n+     *       <strong>@Inject @Named(\"elideAllModels\") Set&lt;Class&gt; entities;</strong>\n+     *\n+     * @return\n+     */\n+    default String getAsyncModelPackageName() {", "originalCommit": "5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MDIzMQ==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385370231", "bodyText": "Done", "author": "moizarafat", "createdAt": "2020-02-27T21:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8a117d0bea40cc84232fb4524a28b40271e77680", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex aa3a37ad2..289eebf22 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -132,21 +131,6 @@ public interface ElideStandaloneSettings {\n     default String getModelPackageName() {\n         return \"com.yourcompany.elide.models\";\n     }\n-    \n-    /**\n-     * Package name containing the Async models to support the Async query feature. This package will be \n-     * recursively scanned for @Entity's and registered with Elide.\n-     *\n-     * NOTE: This will scan for all entities in that package and bind this data to a set named \"elideAllModels\".\n-     *       If providing a custom ElideSettings object, you can inject this data into your class by using:\n-     *\n-     *       <strong>@Inject @Named(\"elideAllModels\") Set&lt;Class&gt; entities;</strong>\n-     *\n-     * @return\n-     */\n-    default String getAsyncModelPackageName() {\n-        return (enableAsync() ? AsyncQuery.class.getPackage().getName() : null);\n-    }\n \n     /**\n      * API root path specification for JSON-API. Namely, this is the mount point of your API. By default it will look\n", "next_change": {"commit": "48fa5f268d8d5c6e075f04418deff0951d972361", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 289eebf22..b2936020e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -131,6 +133,21 @@ public interface ElideStandaloneSettings {\n     default String getModelPackageName() {\n         return \"com.yourcompany.elide.models\";\n     }\n+    \n+    /**\n+     * Package name containing the Async models to support the Async query feature. This package will be \n+     * recursively scanned for @Entity's and registered with Elide.\n+     *\n+     * NOTE: This will scan for all entities in that package and bind this data to a set named \"elideAllModels\".\n+     *       If providing a custom ElideSettings object, you can inject this data into your class by using:\n+     *\n+     *       <strong>@Inject @Named(\"elideAllModels\") Set&lt;Class&gt; entities;</strong>\n+     *\n+     * @return\n+     */\n+    default String getAsyncModelPackageName() {\n+        return (enableAsync() ? AsyncQuery.class.getPackage().getName() : null);\n+    }\n \n     /**\n      * API root path specification for JSON-API. Namely, this is the mount point of your API. By default it will look\n", "next_change": {"commit": "19a247fa3d8ca46f6e9b850c3eca0a54f1ebed6a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b2936020e..f28afe9f6 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -133,21 +133,6 @@ public interface ElideStandaloneSettings {\n     default String getModelPackageName() {\n         return \"com.yourcompany.elide.models\";\n     }\n-    \n-    /**\n-     * Package name containing the Async models to support the Async query feature. This package will be \n-     * recursively scanned for @Entity's and registered with Elide.\n-     *\n-     * NOTE: This will scan for all entities in that package and bind this data to a set named \"elideAllModels\".\n-     *       If providing a custom ElideSettings object, you can inject this data into your class by using:\n-     *\n-     *       <strong>@Inject @Named(\"elideAllModels\") Set&lt;Class&gt; entities;</strong>\n-     *\n-     * @return\n-     */\n-    default String getAsyncModelPackageName() {\n-        return (enableAsync() ? AsyncQuery.class.getPackage().getName() : null);\n-    }\n \n     /**\n      * API root path specification for JSON-API. Namely, this is the mount point of your API. By default it will look\n", "next_change": {"commit": "379f545d61fbca5842e756dca2cd08c22ffce0dd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex f28afe9f6..44f9f4dbf 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -133,6 +120,21 @@ public interface ElideStandaloneSettings {\n     default String getModelPackageName() {\n         return \"com.yourcompany.elide.models\";\n     }\n+    \n+    /**\n+     * Package name containing the Async models to support the Async query feature. This package will be \n+     * recursively scanned for @Entity's and registered with Elide.\n+     *\n+     * NOTE: This will scan for all entities in that package and bind this data to a set named \"elideAllModels\".\n+     *       If providing a custom ElideSettings object, you can inject this data into your class by using:\n+     *\n+     *       <strong>@Inject @Named(\"elideAllModels\") Set&lt;Class&gt; entities;</strong>\n+     *\n+     * @return\n+     */\n+    default String getAsyncModelPackageName() {\n+        return (enableAsync() ? AsyncQuery.class.getPackage().getName() : null);\n+    }\n \n     /**\n      * API root path specification for JSON-API. Namely, this is the mount point of your API. By default it will look\n", "next_change": {"commit": "e05e4575749d34d4ce8ff13e3d9418d4947ac0a6", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 44f9f4dbf..277b43a40 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -120,21 +119,6 @@ public interface ElideStandaloneSettings {\n     default String getModelPackageName() {\n         return \"com.yourcompany.elide.models\";\n     }\n-    \n-    /**\n-     * Package name containing the Async models to support the Async query feature. This package will be \n-     * recursively scanned for @Entity's and registered with Elide.\n-     *\n-     * NOTE: This will scan for all entities in that package and bind this data to a set named \"elideAllModels\".\n-     *       If providing a custom ElideSettings object, you can inject this data into your class by using:\n-     *\n-     *       <strong>@Inject @Named(\"elideAllModels\") Set&lt;Class&gt; entities;</strong>\n-     *\n-     * @return\n-     */\n-    default String getAsyncModelPackageName() {\n-        return (enableAsync() ? AsyncQuery.class.getPackage().getName() : null);\n-    }\n \n     /**\n      * API root path specification for JSON-API. Namely, this is the mount point of your API. By default it will look\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex aa3a37ad2..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -132,21 +121,6 @@ public interface ElideStandaloneSettings {\n     default String getModelPackageName() {\n         return \"com.yourcompany.elide.models\";\n     }\n-    \n-    /**\n-     * Package name containing the Async models to support the Async query feature. This package will be \n-     * recursively scanned for @Entity's and registered with Elide.\n-     *\n-     * NOTE: This will scan for all entities in that package and bind this data to a set named \"elideAllModels\".\n-     *       If providing a custom ElideSettings object, you can inject this data into your class by using:\n-     *\n-     *       <strong>@Inject @Named(\"elideAllModels\") Set&lt;Class&gt; entities;</strong>\n-     *\n-     * @return\n-     */\n-    default String getAsyncModelPackageName() {\n-        return (enableAsync() ? AsyncQuery.class.getPackage().getName() : null);\n-    }\n \n     /**\n      * API root path specification for JSON-API. Namely, this is the mount point of your API. By default it will look\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex a34eb18c7..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -123,8 +119,8 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * API root path specification for JSON-API. Namely, this is the mount point of your API. By default it will look\n-     * something like:\n+     * API root path specification for JSON-API. Namely, this is the mount point of your API.\n+     * By default it will look something like:\n      *   <strong>yourcompany.com/api/v1/YOUR_ENTITY</strong>\n      *\n      * @return Default: /api/v1/*\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "committedDate": "2020-05-18 13:58:16 -0500", "message": "Add Eclipse import order (#1327)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTMxMQ==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385265311", "body": "Instead of passing the package name for async here (which Elide already knows), you could just pass a flag about whether or not to include async models.", "bodyText": "Instead of passing the package name for async here (which Elide already knows), you could just pass a flag about whether or not to include async models.", "bodyHTML": "<p dir=\"auto\">Instead of passing the package name for async here (which Elide already knows), you could just pass a flag about whether or not to include async models.</p>", "author": "aklish", "createdAt": "2020-02-27T17:38:24Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -23,7 +23,8 @@\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, Properties options) {\n+    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, String asyncModelPackageName, ", "originalCommit": "5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MDE5Mg==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385370192", "bodyText": "Done", "author": "moizarafat", "createdAt": "2020-02-27T21:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a117d0bea40cc84232fb4524a28b40271e77680", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex c0cd89543..5828f43c8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -23,7 +24,7 @@ import javax.persistence.spi.PersistenceUnitInfo;\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, String asyncModelPackageName, \n+    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n             Properties options) {\n \n         // Configure default options for example service\n", "next_change": {"commit": "379f545d61fbca5842e756dca2cd08c22ffce0dd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex 5828f43c8..c0cd89543 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -24,7 +23,7 @@ import javax.persistence.spi.PersistenceUnitInfo;\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n+    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, String asyncModelPackageName, \n             Properties options) {\n \n         // Configure default options for example service\n", "next_change": {"commit": "e05e4575749d34d4ce8ff13e3d9418d4947ac0a6", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex c0cd89543..5828f43c8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -23,7 +24,7 @@ import javax.persistence.spi.PersistenceUnitInfo;\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, String asyncModelPackageName, \n+    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n             Properties options) {\n \n         // Configure default options for example service\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex c0cd89543..c36cdda8f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -23,7 +24,7 @@ import javax.persistence.spi.PersistenceUnitInfo;\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, String asyncModelPackageName, \n+    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n             Properties options) {\n \n         // Configure default options for example service\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex c36cdda8f..f479b187a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -24,8 +31,8 @@ import javax.persistence.spi.PersistenceUnitInfo;\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n-            Properties options) {\n+    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler, Properties options) {\n \n         // Configure default options for example service\n         if (options.isEmpty()) {\n", "next_change": {"commit": "2dd150e56aba7bdfbfe5aa36aa9961ad9dc0e828", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex f479b187a..fd5642e0b 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -35,30 +36,7 @@ public class Util {\n             Optional<ElideDynamicEntityCompiler> optionalCompiler, Properties options) {\n \n         // Configure default options for example service\n-        if (options.isEmpty()) {\n-            options.put(\"hibernate.show_sql\", \"true\");\n-            options.put(\"hibernate.hbm2ddl.auto\", \"create\");\n-            options.put(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5Dialect\");\n-            options.put(\"hibernate.current_session_context_class\", \"thread\");\n-            options.put(\"hibernate.jdbc.use_scrollable_resultset\", \"true\");\n-\n-            // Collection Proxy & JDBC Batching\n-            options.put(\"hibernate.jdbc.batch_size\", \"50\");\n-            options.put(\"hibernate.jdbc.fetch_size\", \"50\");\n-            options.put(\"hibernate.default_batch_fetch_size\", \"100\");\n-\n-            // Hikari Connection Pool Settings\n-            options.putIfAbsent(\"hibernate.connection.provider_class\",\n-                    \"com.zaxxer.hikari.hibernate.HikariConnectionProvider\");\n-            options.putIfAbsent(\"hibernate.hikari.connectionTimeout\", \"20000\");\n-            options.putIfAbsent(\"hibernate.hikari.maximumPoolSize\", \"30\");\n-            options.putIfAbsent(\"hibernate.hikari.idleTimeout\", \"30000\");\n-\n-            options.put(\"javax.persistence.jdbc.driver\", \"com.mysql.jdbc.Driver\");\n-            options.put(\"javax.persistence.jdbc.url\", \"jdbc:mysql://localhost/elide?serverTimezone=UTC\");\n-            options.put(\"javax.persistence.jdbc.user\", \"elide\");\n-            options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n-        }\n+        populateDefaultOptions(options);\n \n         ClassLoader classLoader = null;\n         //Bind entity classes from classpath to Persistence Unit\n", "next_change": {"commit": "79b23531edc46cebc43e889d7ac4727540a72105", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex fd5642e0b..b2d1b8601 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -39,8 +39,6 @@ public class Util {\n         populateDefaultOptions(options);\n \n         ClassLoader classLoader = null;\n-        //Bind entity classes from classpath to Persistence Unit\n-        ArrayList<Class> loadedClasses = new ArrayList<>();\n \n         if (optionalCompiler.isPresent()) {\n             ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex b2d1b8601..1effc3fe4 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -33,23 +28,15 @@ import javax.sql.DataSource;\n public class Util {\n \n     public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler, Properties options) {\n+                                                               Properties options) {\n \n         // Configure default options for example service\n         populateDefaultOptions(options);\n \n         ClassLoader classLoader = null;\n \n-        if (optionalCompiler.isPresent()) {\n-            ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-            classLoader = compiler.getClassLoader();\n-            Collection<ClassLoader> classLoaders = new ArrayList<>();\n-            classLoaders.add(classLoader);\n-            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n-        }\n-\n         PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(optionalCompiler, modelPackageName, includeAsyncModel),\n+                combineModelEntities(modelPackageName, includeAsyncModel),\n                 options, classLoader);\n \n         return new EntityManagerFactoryBuilderImpl(\n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex 1effc3fe4..8f7fa8400 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -36,7 +40,7 @@ public class Util {\n         ClassLoader classLoader = null;\n \n         PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel),\n+                combineModelEntities(scanner, modelPackageName, includeAsyncModel),\n                 options, classLoader);\n \n         return new EntityManagerFactoryBuilderImpl(\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "2dd150e56aba7bdfbfe5aa36aa9961ad9dc0e828", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Standalone Fix for missing options (#1681)"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NjMzOQ==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385266339", "body": "asyncModelPackageName can just be AsyncQuery.class.getPackage().getName()", "bodyText": "asyncModelPackageName can just be AsyncQuery.class.getPackage().getName()", "bodyHTML": "<p dir=\"auto\">asyncModelPackageName can just be AsyncQuery.class.getPackage().getName()</p>", "author": "aklish", "createdAt": "2020-02-27T17:40:20Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -52,13 +53,31 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n         }\n \n         PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                getAllEntities(modelPackageName), options);\n+                combineModelEntities(modelPackageName, asyncModelPackageName), options);\n \n         return new EntityManagerFactoryBuilderImpl(\n                 new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n                 .build();\n     }\n \n+    /**\n+     * Combine the model entities with Async model.\n+     *\n+     * @param modelPackageName Package name\n+     * @param asyncModelPackageName Async model package Name\n+     * @return All entities combined from both package.\n+     */\n+    public static List<String> combineModelEntities(String modelPackageName, String asyncModelPackageName) {\n+\n+        List<String> modelEntities = getAllEntities(modelPackageName);\n+\n+        if (asyncModelPackageName != null) {\n+            modelEntities.addAll(getAllEntities(asyncModelPackageName));", "originalCommit": "5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MDE0Mw==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385370143", "bodyText": "Done", "author": "moizarafat", "createdAt": "2020-02-27T21:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NjMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a117d0bea40cc84232fb4524a28b40271e77680", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex c0cd89543..5828f43c8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -64,15 +65,15 @@ public class Util {\n      * Combine the model entities with Async model.\n      *\n      * @param modelPackageName Package name\n-     * @param asyncModelPackageName Async model package Name\n+     * @param includeAsyncModel Include Async model package Name\n      * @return All entities combined from both package.\n      */\n-    public static List<String> combineModelEntities(String modelPackageName, String asyncModelPackageName) {\n+    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n \n         List<String> modelEntities = getAllEntities(modelPackageName);\n \n-        if (asyncModelPackageName != null) {\n-            modelEntities.addAll(getAllEntities(asyncModelPackageName));\n+        if (includeAsyncModel) {\n+            modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n \n         return modelEntities;\n", "next_change": {"commit": "48fa5f268d8d5c6e075f04418deff0951d972361", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex 5828f43c8..587a59e5c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -75,7 +75,6 @@ public class Util {\n         if (includeAsyncModel) {\n             modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n-\n         return modelEntities;\n     }\n \n", "next_change": {"commit": "379f545d61fbca5842e756dca2cd08c22ffce0dd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex 587a59e5c..c0cd89543 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -65,16 +64,17 @@ public class Util {\n      * Combine the model entities with Async model.\n      *\n      * @param modelPackageName Package name\n-     * @param includeAsyncModel Include Async model package Name\n+     * @param asyncModelPackageName Async model package Name\n      * @return All entities combined from both package.\n      */\n-    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n+    public static List<String> combineModelEntities(String modelPackageName, String asyncModelPackageName) {\n \n         List<String> modelEntities = getAllEntities(modelPackageName);\n \n-        if (includeAsyncModel) {\n-            modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n+        if (asyncModelPackageName != null) {\n+            modelEntities.addAll(getAllEntities(asyncModelPackageName));\n         }\n+\n         return modelEntities;\n     }\n \n", "next_change": {"commit": "e05e4575749d34d4ce8ff13e3d9418d4947ac0a6", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex c0cd89543..5828f43c8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -64,15 +65,15 @@ public class Util {\n      * Combine the model entities with Async model.\n      *\n      * @param modelPackageName Package name\n-     * @param asyncModelPackageName Async model package Name\n+     * @param includeAsyncModel Include Async model package Name\n      * @return All entities combined from both package.\n      */\n-    public static List<String> combineModelEntities(String modelPackageName, String asyncModelPackageName) {\n+    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n \n         List<String> modelEntities = getAllEntities(modelPackageName);\n \n-        if (asyncModelPackageName != null) {\n-            modelEntities.addAll(getAllEntities(asyncModelPackageName));\n+        if (includeAsyncModel) {\n+            modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n \n         return modelEntities;\n", "next_change": {"commit": "7167d750655d2231788b2a9a1944a273b99bc5aa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex 5828f43c8..c36cdda8f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -75,7 +75,6 @@ public class Util {\n         if (includeAsyncModel) {\n             modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n-\n         return modelEntities;\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex c0cd89543..c36cdda8f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -64,17 +65,16 @@ public class Util {\n      * Combine the model entities with Async model.\n      *\n      * @param modelPackageName Package name\n-     * @param asyncModelPackageName Async model package Name\n+     * @param includeAsyncModel Include Async model package Name\n      * @return All entities combined from both package.\n      */\n-    public static List<String> combineModelEntities(String modelPackageName, String asyncModelPackageName) {\n+    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n \n         List<String> modelEntities = getAllEntities(modelPackageName);\n \n-        if (asyncModelPackageName != null) {\n-            modelEntities.addAll(getAllEntities(asyncModelPackageName));\n+        if (includeAsyncModel) {\n+            modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n-\n         return modelEntities;\n     }\n \n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex c36cdda8f..f479b187a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -53,28 +60,57 @@ public class Util {\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n+        ClassLoader classLoader = null;\n+        //Bind entity classes from classpath to Persistence Unit\n+        ArrayList<Class> loadedClasses = new ArrayList<>();\n+\n+        if (optionalCompiler.isPresent()) {\n+            ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n+            classLoader = compiler.getClassLoader();\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(classLoader);\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+\n+            try {\n+                loadedClasses.addAll(compiler.findAnnotatedClasses(Entity.class));\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n         PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+                combineModelEntities(optionalCompiler, modelPackageName, includeAsyncModel),\n+                options, classLoader);\n \n         return new EntityManagerFactoryBuilderImpl(\n-                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n+                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>(), classLoader)\n                 .build();\n     }\n \n     /**\n-     * Combine the model entities with Async model.\n+     * Combine the model entities with Async and Dynamic models.\n      *\n+     * @param optionalCompiler optional dynamicCompiler\n      * @param modelPackageName Package name\n      * @param includeAsyncModel Include Async model package Name\n      * @return All entities combined from both package.\n      */\n-    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n+    public static List<String> combineModelEntities(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n+            String modelPackageName, boolean includeAsyncModel) {\n \n         List<String> modelEntities = getAllEntities(modelPackageName);\n \n         if (includeAsyncModel) {\n             modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n+\n+        if (optionalCompiler.isPresent()) {\n+            try {\n+                modelEntities.addAll(optionalCompiler.get().findAnnotatedClassNames(Entity.class));\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n         return modelEntities;\n     }\n \n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex f479b187a..1effc3fe4 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -59,58 +97,22 @@ public class Util {\n             options.put(\"javax.persistence.jdbc.user\", \"elide\");\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n-\n-        ClassLoader classLoader = null;\n-        //Bind entity classes from classpath to Persistence Unit\n-        ArrayList<Class> loadedClasses = new ArrayList<>();\n-\n-        if (optionalCompiler.isPresent()) {\n-            ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-            classLoader = compiler.getClassLoader();\n-            Collection<ClassLoader> classLoaders = new ArrayList<>();\n-            classLoaders.add(classLoader);\n-            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n-\n-            try {\n-                loadedClasses.addAll(compiler.findAnnotatedClasses(Entity.class));\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(optionalCompiler, modelPackageName, includeAsyncModel),\n-                options, classLoader);\n-\n-        return new EntityManagerFactoryBuilderImpl(\n-                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>(), classLoader)\n-                .build();\n     }\n \n     /**\n      * Combine the model entities with Async and Dynamic models.\n      *\n-     * @param optionalCompiler optional dynamicCompiler\n      * @param modelPackageName Package name\n      * @param includeAsyncModel Include Async model package Name\n      * @return All entities combined from both package.\n      */\n-    public static List<String> combineModelEntities(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            String modelPackageName, boolean includeAsyncModel) {\n+    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n \n         List<String> modelEntities = getAllEntities(modelPackageName);\n \n         if (includeAsyncModel) {\n             modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n-\n-        if (optionalCompiler.isPresent()) {\n-            try {\n-                modelEntities.addAll(optionalCompiler.get().findAnnotatedClassNames(Entity.class));\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n         return modelEntities;\n     }\n \n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\nindex 1effc3fe4..8f7fa8400 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java\n", "chunk": "@@ -102,16 +106,18 @@ public class Util {\n     /**\n      * Combine the model entities with Async and Dynamic models.\n      *\n+     * @param scanner Class scanner\n      * @param modelPackageName Package name\n      * @param includeAsyncModel Include Async model package Name\n      * @return All entities combined from both package.\n      */\n-    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n+    public static List<String> combineModelEntities(ClassScanner scanner,\n+                                                    String modelPackageName, boolean includeAsyncModel) {\n \n-        List<String> modelEntities = getAllEntities(modelPackageName);\n+        List<String> modelEntities = getAllEntities(scanner, modelPackageName);\n \n         if (includeAsyncModel) {\n-            modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n+            modelEntities.addAll(getAllEntities(scanner, AsyncQuery.class.getPackage().getName()));\n         }\n         return modelEntities;\n     }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "2dd150e56aba7bdfbfe5aa36aa9961ad9dc0e828", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Standalone Fix for missing options (#1681)"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NzY5NQ==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385267695", "body": "See my earlier comment here.", "bodyText": "See my earlier comment here.", "bodyHTML": "<p dir=\"auto\">See my earlier comment here.</p>", "author": "aklish", "createdAt": "2020-02-27T17:42:51Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -58,7 +63,8 @@ public ElideResourceConfig(ServiceLocator injector, @Context ServletContext serv\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.getAllEntities(settings.getModelPackageName())).to(Set.class).named(\"elideAllModels\");\n+                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.getAsyncModelPackageName())).to(Set.class)", "originalCommit": "5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MDExNw==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385370117", "bodyText": "Done", "author": "moizarafat", "createdAt": "2020-02-27T21:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NzY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a117d0bea40cc84232fb4524a28b40271e77680", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 3ac3de5af..5769dce94 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -63,7 +63,7 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.getAsyncModelPackageName())).to(Set.class)\n+                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n                         .named(\"elideAllModels\");\n             }\n         });\n", "next_change": {"commit": "48fa5f268d8d5c6e075f04418deff0951d972361", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 5769dce94..fd19605a8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -63,6 +63,7 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n+\n                 bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n                         .named(\"elideAllModels\");\n             }\n", "next_change": {"commit": "379f545d61fbca5842e756dca2cd08c22ffce0dd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex fd19605a8..21ccf746a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -63,8 +62,7 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n+                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.getAsyncModelPackageName())).to(Set.class)\n                         .named(\"elideAllModels\");\n             }\n         });\n", "next_change": {"commit": "e05e4575749d34d4ce8ff13e3d9418d4947ac0a6", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 21ccf746a..f45c7d0a3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -62,7 +62,7 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.getAsyncModelPackageName())).to(Set.class)\n+                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n                         .named(\"elideAllModels\");\n             }\n         });\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 3ac3de5af..7ac53f8da 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -63,7 +65,7 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.getAsyncModelPackageName())).to(Set.class)\n+                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n                         .named(\"elideAllModels\");\n             }\n         });\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7ac53f8da..1b671d234 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -61,12 +70,14 @@ public class ElideResourceConfig extends ResourceConfig {\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        Optional<ElideDynamicEntityCompiler> optionalCompiler = settings.getDynamicCompiler();\n+\n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n-                        .named(\"elideAllModels\");\n+                bind(Util.combineModelEntities(optionalCompiler, settings.getModelPackageName(),\n+                        settings.enableAsync())).to(Set.class).named(\"elideAllModels\");\n             }\n         });\n \n", "next_change": {"commit": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 1b671d234..dc00e21d7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -76,8 +80,9 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n+                ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties();\n                 bind(Util.combineModelEntities(optionalCompiler, settings.getModelPackageName(),\n-                        settings.enableAsync())).to(Set.class).named(\"elideAllModels\");\n+                        asyncProperties.enabled())).to(Set.class).named(\"elideAllModels\");\n             }\n         });\n \n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex dc00e21d7..e8072f1a7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -74,38 +83,50 @@ public class ElideResourceConfig extends ResourceConfig {\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n-        Optional<ElideDynamicEntityCompiler> optionalCompiler = settings.getDynamicCompiler();\n-\n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n                 ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties();\n-                bind(Util.combineModelEntities(optionalCompiler, settings.getModelPackageName(),\n+                bind(Util.combineModelEntities(settings.getModelPackageName(),\n                         asyncProperties.enabled())).to(Set.class).named(\"elideAllModels\");\n             }\n         });\n \n+        Optional<DynamicConfigValidator> validator;\n+        try {\n+            validator = settings.getDynamicConfigValidator();\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n         // Bind to injector\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n                 ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties();\n                 EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(settings.getModelPackageName(),\n-                        asyncProperties.enabled(), optionalCompiler, settings.getDatabaseProperties());\n+                        asyncProperties.enabled(), settings.getDatabaseProperties());\n \n-                EntityDictionary dictionary = settings.getEntityDictionary(injector, optionalCompiler);\n+                EntityDictionary dictionary = settings.getEntityDictionary(injector, validator);\n \n                 DataStore dataStore;\n \n-                if (settings.enableAggregationDataStore()) {\n-                    MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n+                if (settings.getAnalyticProperties().enableAggregationDataStore()) {\n+                    MetaDataStore metaDataStore = settings.getMetaDataStore(validator);\n                     if (metaDataStore == null) {\n                         throw new IllegalStateException(\"Aggregation Datastore is enabled but metaDataStore is null\");\n                     }\n-                    QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, entityManagerFactory);\n+\n+                    DataSource defaultDataSource = Util.getDataSource(settings.getDatabaseProperties());\n+                    ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource,\n+                                    SQLDialectFactory.getDialect(settings.getAnalyticProperties().getDefaultDialect()));\n+\n+                    QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, defaultConnectionDetails,\n+                                    validator, settings.getDataSourceConfiguration(),\n+                                    settings.getAnalyticProperties().getDBPasswordExtractor());\n                     AggregationDataStore aggregationDataStore =\n-                                    settings.getAggregationDataStore(queryEngine, optionalCompiler);\n+                                    settings.getAggregationDataStore(queryEngine);\n                     if (aggregationDataStore == null) {\n                         throw new IllegalStateException(\n                                         \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n", "next_change": {"commit": "d77f1240a3fa5abf824aea54d0533be844235359", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex e8072f1a7..49fc1f39e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -123,7 +125,7 @@ public class ElideResourceConfig extends ResourceConfig {\n                                     SQLDialectFactory.getDialect(settings.getAnalyticProperties().getDefaultDialect()));\n \n                     QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, defaultConnectionDetails,\n-                                    validator, settings.getDataSourceConfiguration(),\n+                                    dynamicConfiguration, settings.getDataSourceConfiguration(),\n                                     settings.getAnalyticProperties().getDBPasswordExtractor());\n                     AggregationDataStore aggregationDataStore =\n                                     settings.getAggregationDataStore(queryEngine);\n", "next_change": {"commit": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 49fc1f39e..5d8445da4 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -127,8 +131,7 @@ public class ElideResourceConfig extends ResourceConfig {\n                     QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, defaultConnectionDetails,\n                                     dynamicConfiguration, settings.getDataSourceConfiguration(),\n                                     settings.getAnalyticProperties().getDBPasswordExtractor());\n-                    AggregationDataStore aggregationDataStore =\n-                                    settings.getAggregationDataStore(queryEngine);\n+                    AggregationDataStore aggregationDataStore = settings.getAggregationDataStore(queryEngine);\n                     if (aggregationDataStore == null) {\n                         throw new IllegalStateException(\n                                         \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 5d8445da4..5fa759378 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -87,132 +216,30 @@ public class ElideResourceConfig extends ResourceConfig {\n         this.injector = injector;\n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        ClassScanner classScanner = settings.getClassScanner();\n+\n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n                 ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties();\n-                bind(Util.combineModelEntities(settings.getModelPackageName(),\n+                bind(Util.combineModelEntities(\n+                        classScanner,\n+                        settings.getModelPackageName(),\n                         asyncProperties.enabled())).to(Set.class).named(\"elideAllModels\");\n             }\n         });\n \n         Optional<DynamicConfiguration> dynamicConfiguration;\n         try {\n-            dynamicConfiguration = settings.getDynamicConfiguration();\n+            dynamicConfiguration = settings.getDynamicConfiguration(classScanner);\n         } catch (IOException e) {\n             throw new IllegalStateException(e);\n         }\n \n         // Bind to injector\n-        register(new AbstractBinder() {\n-            @Override\n-            protected void configure() {\n-                ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties() == null\n-                        ? new ElideStandaloneAsyncSettings() { } : settings.getAsyncProperties();\n-                EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(settings.getModelPackageName(),\n-                        asyncProperties.enabled(), settings.getDatabaseProperties());\n-\n-                EntityDictionary dictionary = settings.getEntityDictionary(injector, dynamicConfiguration,\n-                        settings.getEntitiesToExclude());\n-\n-                DataStore dataStore;\n-\n-                if (settings.getAnalyticProperties().enableAggregationDataStore()) {\n-                    MetaDataStore metaDataStore = settings.getMetaDataStore(dynamicConfiguration);\n-                    if (metaDataStore == null) {\n-                        throw new IllegalStateException(\"Aggregation Datastore is enabled but metaDataStore is null\");\n-                    }\n-\n-                    DataSource defaultDataSource = Util.getDataSource(settings.getDatabaseProperties());\n-                    ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource,\n-                                    SQLDialectFactory.getDialect(settings.getAnalyticProperties().getDefaultDialect()));\n-\n-                    QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, defaultConnectionDetails,\n-                                    dynamicConfiguration, settings.getDataSourceConfiguration(),\n-                                    settings.getAnalyticProperties().getDBPasswordExtractor());\n-                    AggregationDataStore aggregationDataStore = settings.getAggregationDataStore(queryEngine);\n-                    if (aggregationDataStore == null) {\n-                        throw new IllegalStateException(\n-                                        \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n-                    }\n-                    dataStore = settings.getDataStore(metaDataStore, aggregationDataStore, entityManagerFactory);\n-                } else {\n-                    dataStore = settings.getDataStore(entityManagerFactory);\n-                }\n+        register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n-                ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n-\n-                Elide elide = new Elide(elideSettings);\n-\n-                // Bind elide instance for injection into endpoint\n-                bind(elide).to(Elide.class).named(\"elide\");\n-\n-                // Bind additional elements\n-                bind(elideSettings).to(ElideSettings.class);\n-                bind(elideSettings.getDictionary()).to(EntityDictionary.class);\n-                bind(elideSettings.getDataStore()).to(DataStore.class).named(\"elideDataStore\");\n-\n-                // Binding async service\n-                if (asyncProperties.enabled()) {\n-                    AsyncAPIDAO asyncAPIDao = asyncProperties.getAPIDAO();\n-                    if (asyncAPIDao == null) {\n-                        asyncAPIDao = new DefaultAsyncAPIDAO(elide.getElideSettings(), elide.getDataStore());\n-                    }\n-                    bind(asyncAPIDao).to(AsyncAPIDAO.class);\n-\n-                    ExecutorService executor = (ExecutorService) servletContext.getAttribute(ASYNC_EXECUTOR_ATTR);\n-                    ExecutorService updater = (ExecutorService) servletContext.getAttribute(ASYNC_UPDATER_ATTR);\n-                    AsyncExecutorService asyncExecutorService =\n-                                    new AsyncExecutorService(elide, executor, updater, asyncAPIDao);\n-                    bind(asyncExecutorService).to(AsyncExecutorService.class);\n-\n-                    if (asyncProperties.enableExport()) {\n-                        ExportApiProperties exportApiProperties = new ExportApiProperties(\n-                                asyncProperties.getExportAsyncResponseExecutor(),\n-                                asyncProperties.getExportAsyncResponseTimeoutSeconds());\n-                        bind(exportApiProperties).to(ExportApiProperties.class).named(\"exportApiProperties\");\n-\n-                        ResultStorageEngine resultStorageEngine = asyncProperties.getResultStorageEngine();\n-                        if (resultStorageEngine == null) {\n-                            resultStorageEngine = new FileResultStorageEngine(asyncProperties.getStorageDestination());\n-                        }\n-                        bind(resultStorageEngine).to(ResultStorageEngine.class).named(\"resultStorageEngine\");\n-\n-                        // Initialize the Formatters.\n-                        Map<ResultType, TableExportFormatter> supportedFormatters = new HashMap<ResultType,\n-                            TableExportFormatter>();\n-                        supportedFormatters.put(ResultType.CSV, new CSVExportFormatter(elide,\n-                                asyncProperties.skipCSVHeader()));\n-                        supportedFormatters.put(ResultType.JSON, new JSONExportFormatter(elide));\n-\n-                        // Binding TableExport LifeCycleHook\n-                        TableExportHook tableExportHook = getTableExportHook(asyncExecutorService,\n-                                asyncProperties, supportedFormatters, resultStorageEngine);\n-                        dictionary.bindTrigger(TableExport.class, READ, PRESECURITY, tableExportHook, false);\n-                        dictionary.bindTrigger(TableExport.class, CREATE, POSTCOMMIT, tableExportHook, false);\n-                        dictionary.bindTrigger(TableExport.class, CREATE, PRESECURITY, tableExportHook, false);\n-\n-                    }\n-\n-                    // Binding AsyncQuery LifeCycleHook\n-                    AsyncQueryHook asyncQueryHook = new AsyncQueryHook(asyncExecutorService,\n-                            asyncProperties.getMaxAsyncAfterSeconds());\n-\n-                    dictionary.bindTrigger(AsyncQuery.class, READ, PRESECURITY, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, asyncQueryHook, false);\n-\n-                    // Binding async cleanup service\n-                    if (asyncProperties.enableCleanup()) {\n-                        AsyncCleanerService.init(elide, asyncProperties.getMaxRunTimeSeconds(),\n-                                asyncProperties.getQueryCleanupDays(),\n-                                asyncProperties.getQueryCancelCheckIntervalSeconds(), asyncAPIDao);\n-                        bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n-                    }\n-                }\n-            }\n-        });\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n", "next_change": {"commit": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 5fa759378..7e31fd83c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -237,15 +233,28 @@ public class ElideResourceConfig extends ResourceConfig {\n             throw new IllegalStateException(e);\n         }\n \n+\n         // Bind to injector\n         register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n-\n         // Bind swaggers to given endpoint\n+        //This looks strange, but Jersey binds its Abstract binders first, and then later it binds 'external'\n+        //binders (like this HK2 version).  This allows breaking dependency injection into two phases.\n+        //Everything bound in the first phase can be accessed in the second phase.\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n             @Override\n             protected void configure() {\n-                EntityDictionary dictionary = injector.getService(EntityDictionary.class);\n+                Elide elide = injector.getService(Elide.class, \"elide\");\n+\n+                elide.doScans();\n+\n+                //Bind subscription hooks.\n+                if (settings.getSubscriptionProperties().publishingEnabled()) {\n+                    settings.getSubscriptionProperties().subscriptionScanner(elide,\n+                            settings.getSubscriptionProperties().getConnectionFactory());\n+                }\n+\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n                 if (settings.enableSwagger()) {\n                     List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7e31fd83c..7b3f93041 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -256,9 +266,10 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                 EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n-                if (settings.enableSwagger()) {\n-                    List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n-                    bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<List<DocEndpoint.SwaggerRegistration>>() { });\n+                if (settings.enableApiDocs()) {\n+                    List<ApiDocsEndpoint.ApiDocsRegistration> apiDocs = settings.buildApiDocs(dictionary);\n+                    bind(apiDocs).named(\"apiDocs\").to(new TypeLiteral<List<ApiDocsEndpoint.ApiDocsRegistration>>() {\n+                    });\n                 }\n             }\n         });\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 1b671d234..dc00e21d7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -85,19 +90,30 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n+                ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties();\n                 EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(settings.getModelPackageName(),\n-                        settings.enableAsync(), optionalCompiler, settings.getDatabaseProperties());\n+                        asyncProperties.enabled(), optionalCompiler, settings.getDatabaseProperties());\n \n                 EntityDictionary dictionary = settings.getEntityDictionary(injector, optionalCompiler);\n \n-                MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n+                DataStore dataStore;\n \n-                QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, entityManagerFactory);\n-\n-                DataStore dataStore = settings.getDataStore(\n-                        metaDataStore,\n-                        settings.getAggregationDataStore(queryEngine, optionalCompiler),\n-                        entityManagerFactory);\n+                if (settings.enableAggregationDataStore()) {\n+                    MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n+                    if (metaDataStore == null) {\n+                        throw new IllegalStateException(\"Aggregation Datastore is enabled but metaDataStore is null\");\n+                    }\n+                    QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, entityManagerFactory);\n+                    AggregationDataStore aggregationDataStore =\n+                                    settings.getAggregationDataStore(queryEngine, optionalCompiler);\n+                    if (aggregationDataStore == null) {\n+                        throw new IllegalStateException(\n+                                        \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n+                    }\n+                    dataStore = settings.getDataStore(metaDataStore, aggregationDataStore, entityManagerFactory);\n+                } else {\n+                    dataStore = settings.getDataStore(entityManagerFactory);\n+                }\n \n                 ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n \n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex dc00e21d7..e6c306f83 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -116,7 +147,6 @@ public class ElideResourceConfig extends ResourceConfig {\n                 }\n \n                 ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n-\n                 Elide elide = new Elide(elideSettings);\n \n                 // Bind elide instance for injection into endpoint\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex e6c306f83..5fa759378 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -110,111 +238,8 @@ public class ElideResourceConfig extends ResourceConfig {\n         }\n \n         // Bind to injector\n-        register(new AbstractBinder() {\n-            @Override\n-            protected void configure() {\n-                ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties() == null\n-                        ? new ElideStandaloneAsyncSettings() { } : settings.getAsyncProperties();\n-                EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(classScanner,\n-                        settings.getModelPackageName(), asyncProperties.enabled(), settings.getDatabaseProperties());\n-\n-                EntityDictionary dictionary = settings.getEntityDictionary(injector, classScanner, dynamicConfiguration,\n-                        settings.getEntitiesToExclude());\n-\n-                DataStore dataStore;\n-\n-                if (settings.getAnalyticProperties().enableAggregationDataStore()) {\n-                    MetaDataStore metaDataStore = settings.getMetaDataStore(classScanner, dynamicConfiguration);\n-                    if (metaDataStore == null) {\n-                        throw new IllegalStateException(\"Aggregation Datastore is enabled but metaDataStore is null\");\n-                    }\n-\n-                    DataSource defaultDataSource = Util.getDataSource(settings.getDatabaseProperties());\n-                    ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource,\n-                                    SQLDialectFactory.getDialect(settings.getAnalyticProperties().getDefaultDialect()));\n-\n-                    QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, defaultConnectionDetails,\n-                                    dynamicConfiguration, settings.getDataSourceConfiguration(),\n-                                    settings.getAnalyticProperties().getDBPasswordExtractor());\n-                    AggregationDataStore aggregationDataStore = settings.getAggregationDataStore(queryEngine);\n-                    if (aggregationDataStore == null) {\n-                        throw new IllegalStateException(\n-                                        \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n-                    }\n-                    dataStore = settings.getDataStore(metaDataStore, aggregationDataStore, entityManagerFactory);\n-                } else {\n-                    dataStore = settings.getDataStore(entityManagerFactory);\n-                }\n+        register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n-                ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n-                Elide elide = new Elide(elideSettings);\n-\n-                // Bind elide instance for injection into endpoint\n-                bind(elide).to(Elide.class).named(\"elide\");\n-\n-                // Bind additional elements\n-                bind(elideSettings).to(ElideSettings.class);\n-                bind(elideSettings.getDictionary()).to(EntityDictionary.class);\n-                bind(elideSettings.getDataStore()).to(DataStore.class).named(\"elideDataStore\");\n-\n-                // Binding async service\n-                if (asyncProperties.enabled()) {\n-                    AsyncAPIDAO asyncAPIDao = asyncProperties.getAPIDAO();\n-                    if (asyncAPIDao == null) {\n-                        asyncAPIDao = new DefaultAsyncAPIDAO(elide.getElideSettings(), elide.getDataStore());\n-                    }\n-                    bind(asyncAPIDao).to(AsyncAPIDAO.class);\n-\n-                    ExecutorService executor = (ExecutorService) servletContext.getAttribute(ASYNC_EXECUTOR_ATTR);\n-                    ExecutorService updater = (ExecutorService) servletContext.getAttribute(ASYNC_UPDATER_ATTR);\n-                    AsyncExecutorService asyncExecutorService =\n-                                    new AsyncExecutorService(elide, executor, updater, asyncAPIDao);\n-                    bind(asyncExecutorService).to(AsyncExecutorService.class);\n-\n-                    if (asyncProperties.enableExport()) {\n-                        ExportApiProperties exportApiProperties = new ExportApiProperties(\n-                                asyncProperties.getExportAsyncResponseExecutor(),\n-                                asyncProperties.getExportAsyncResponseTimeoutSeconds());\n-                        bind(exportApiProperties).to(ExportApiProperties.class).named(\"exportApiProperties\");\n-\n-                        ResultStorageEngine resultStorageEngine = asyncProperties.getResultStorageEngine();\n-                        if (resultStorageEngine == null) {\n-                            resultStorageEngine = new FileResultStorageEngine(asyncProperties.getStorageDestination());\n-                        }\n-                        bind(resultStorageEngine).to(ResultStorageEngine.class).named(\"resultStorageEngine\");\n-\n-                        // Initialize the Formatters.\n-                        Map<ResultType, TableExportFormatter> supportedFormatters = new HashMap<>();\n-                        supportedFormatters.put(ResultType.CSV, new CSVExportFormatter(elide,\n-                                asyncProperties.skipCSVHeader()));\n-                        supportedFormatters.put(ResultType.JSON, new JSONExportFormatter(elide));\n-\n-                        // Binding TableExport LifeCycleHook\n-                        TableExportHook tableExportHook = getTableExportHook(asyncExecutorService,\n-                                asyncProperties, supportedFormatters, resultStorageEngine);\n-                        dictionary.bindTrigger(TableExport.class, READ, PRESECURITY, tableExportHook, false);\n-                        dictionary.bindTrigger(TableExport.class, CREATE, POSTCOMMIT, tableExportHook, false);\n-                        dictionary.bindTrigger(TableExport.class, CREATE, PRESECURITY, tableExportHook, false);\n-                    }\n-\n-                    // Binding AsyncQuery LifeCycleHook\n-                    AsyncQueryHook asyncQueryHook = new AsyncQueryHook(asyncExecutorService,\n-                            asyncProperties.getMaxAsyncAfterSeconds());\n-\n-                    dictionary.bindTrigger(AsyncQuery.class, READ, PRESECURITY, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, asyncQueryHook, false);\n-\n-                    // Binding async cleanup service\n-                    if (asyncProperties.enableCleanup()) {\n-                        AsyncCleanerService.init(elide, asyncProperties.getMaxRunTimeSeconds(),\n-                                asyncProperties.getQueryCleanupDays(),\n-                                asyncProperties.getQueryCancelCheckIntervalSeconds(), asyncAPIDao);\n-                        bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n-                    }\n-                }\n-            }\n-        });\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n", "next_change": {"commit": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 5fa759378..7e31fd83c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -237,15 +233,28 @@ public class ElideResourceConfig extends ResourceConfig {\n             throw new IllegalStateException(e);\n         }\n \n+\n         // Bind to injector\n         register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n-\n         // Bind swaggers to given endpoint\n+        //This looks strange, but Jersey binds its Abstract binders first, and then later it binds 'external'\n+        //binders (like this HK2 version).  This allows breaking dependency injection into two phases.\n+        //Everything bound in the first phase can be accessed in the second phase.\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n             @Override\n             protected void configure() {\n-                EntityDictionary dictionary = injector.getService(EntityDictionary.class);\n+                Elide elide = injector.getService(Elide.class, \"elide\");\n+\n+                elide.doScans();\n+\n+                //Bind subscription hooks.\n+                if (settings.getSubscriptionProperties().publishingEnabled()) {\n+                    settings.getSubscriptionProperties().subscriptionScanner(elide,\n+                            settings.getSubscriptionProperties().getConnectionFactory());\n+                }\n+\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n                 if (settings.enableSwagger()) {\n                     List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7e31fd83c..7b3f93041 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -256,9 +266,10 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                 EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n-                if (settings.enableSwagger()) {\n-                    List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n-                    bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<List<DocEndpoint.SwaggerRegistration>>() { });\n+                if (settings.enableApiDocs()) {\n+                    List<ApiDocsEndpoint.ApiDocsRegistration> apiDocs = settings.buildApiDocs(dictionary);\n+                    bind(apiDocs).named(\"apiDocs\").to(new TypeLiteral<List<ApiDocsEndpoint.ApiDocsRegistration>>() {\n+                    });\n                 }\n             }\n         });\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7ac53f8da..1b671d234 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -74,7 +85,21 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                ElideSettings elideSettings = settings.getElideSettings(injector);\n+                EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(settings.getModelPackageName(),\n+                        settings.enableAsync(), optionalCompiler, settings.getDatabaseProperties());\n+\n+                EntityDictionary dictionary = settings.getEntityDictionary(injector, optionalCompiler);\n+\n+                MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n+\n+                QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, entityManagerFactory);\n+\n+                DataStore dataStore = settings.getDataStore(\n+                        metaDataStore,\n+                        settings.getAggregationDataStore(queryEngine, optionalCompiler),\n+                        entityManagerFactory);\n+\n+                ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n \n                 Elide elide = new Elide(elideSettings);\n \n", "next_change": {"commit": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 1b671d234..e51eebc52 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -90,14 +95,24 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                 EntityDictionary dictionary = settings.getEntityDictionary(injector, optionalCompiler);\n \n-                MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n+                DataStore dataStore;\n \n-                QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, entityManagerFactory);\n-\n-                DataStore dataStore = settings.getDataStore(\n-                        metaDataStore,\n-                        settings.getAggregationDataStore(queryEngine, optionalCompiler),\n-                        entityManagerFactory);\n+                if (settings.enableAggregationDataStore()) {\n+                    MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n+                    if (metaDataStore == null) {\n+                        throw new IllegalStateException(\"Aggregation Datastore is enabled but metaDataStore is null\");\n+                    }\n+                    QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, entityManagerFactory);\n+                    AggregationDataStore aggregationDataStore =\n+                                    settings.getAggregationDataStore(queryEngine, optionalCompiler);\n+                    if (aggregationDataStore == null) {\n+                        throw new IllegalStateException(\n+                                        \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n+                    }\n+                    dataStore = settings.getDataStore(metaDataStore, aggregationDataStore, entityManagerFactory);\n+                } else {\n+                    dataStore = settings.getDataStore(entityManagerFactory);\n+                }\n \n                 ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n \n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex e51eebc52..e6c306f83 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -115,7 +147,6 @@ public class ElideResourceConfig extends ResourceConfig {\n                 }\n \n                 ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n-\n                 Elide elide = new Elide(elideSettings);\n \n                 // Bind elide instance for injection into endpoint\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex e6c306f83..5fa759378 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -110,111 +238,8 @@ public class ElideResourceConfig extends ResourceConfig {\n         }\n \n         // Bind to injector\n-        register(new AbstractBinder() {\n-            @Override\n-            protected void configure() {\n-                ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties() == null\n-                        ? new ElideStandaloneAsyncSettings() { } : settings.getAsyncProperties();\n-                EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(classScanner,\n-                        settings.getModelPackageName(), asyncProperties.enabled(), settings.getDatabaseProperties());\n-\n-                EntityDictionary dictionary = settings.getEntityDictionary(injector, classScanner, dynamicConfiguration,\n-                        settings.getEntitiesToExclude());\n-\n-                DataStore dataStore;\n-\n-                if (settings.getAnalyticProperties().enableAggregationDataStore()) {\n-                    MetaDataStore metaDataStore = settings.getMetaDataStore(classScanner, dynamicConfiguration);\n-                    if (metaDataStore == null) {\n-                        throw new IllegalStateException(\"Aggregation Datastore is enabled but metaDataStore is null\");\n-                    }\n-\n-                    DataSource defaultDataSource = Util.getDataSource(settings.getDatabaseProperties());\n-                    ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource,\n-                                    SQLDialectFactory.getDialect(settings.getAnalyticProperties().getDefaultDialect()));\n-\n-                    QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, defaultConnectionDetails,\n-                                    dynamicConfiguration, settings.getDataSourceConfiguration(),\n-                                    settings.getAnalyticProperties().getDBPasswordExtractor());\n-                    AggregationDataStore aggregationDataStore = settings.getAggregationDataStore(queryEngine);\n-                    if (aggregationDataStore == null) {\n-                        throw new IllegalStateException(\n-                                        \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n-                    }\n-                    dataStore = settings.getDataStore(metaDataStore, aggregationDataStore, entityManagerFactory);\n-                } else {\n-                    dataStore = settings.getDataStore(entityManagerFactory);\n-                }\n+        register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n-                ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n-                Elide elide = new Elide(elideSettings);\n-\n-                // Bind elide instance for injection into endpoint\n-                bind(elide).to(Elide.class).named(\"elide\");\n-\n-                // Bind additional elements\n-                bind(elideSettings).to(ElideSettings.class);\n-                bind(elideSettings.getDictionary()).to(EntityDictionary.class);\n-                bind(elideSettings.getDataStore()).to(DataStore.class).named(\"elideDataStore\");\n-\n-                // Binding async service\n-                if (asyncProperties.enabled()) {\n-                    AsyncAPIDAO asyncAPIDao = asyncProperties.getAPIDAO();\n-                    if (asyncAPIDao == null) {\n-                        asyncAPIDao = new DefaultAsyncAPIDAO(elide.getElideSettings(), elide.getDataStore());\n-                    }\n-                    bind(asyncAPIDao).to(AsyncAPIDAO.class);\n-\n-                    ExecutorService executor = (ExecutorService) servletContext.getAttribute(ASYNC_EXECUTOR_ATTR);\n-                    ExecutorService updater = (ExecutorService) servletContext.getAttribute(ASYNC_UPDATER_ATTR);\n-                    AsyncExecutorService asyncExecutorService =\n-                                    new AsyncExecutorService(elide, executor, updater, asyncAPIDao);\n-                    bind(asyncExecutorService).to(AsyncExecutorService.class);\n-\n-                    if (asyncProperties.enableExport()) {\n-                        ExportApiProperties exportApiProperties = new ExportApiProperties(\n-                                asyncProperties.getExportAsyncResponseExecutor(),\n-                                asyncProperties.getExportAsyncResponseTimeoutSeconds());\n-                        bind(exportApiProperties).to(ExportApiProperties.class).named(\"exportApiProperties\");\n-\n-                        ResultStorageEngine resultStorageEngine = asyncProperties.getResultStorageEngine();\n-                        if (resultStorageEngine == null) {\n-                            resultStorageEngine = new FileResultStorageEngine(asyncProperties.getStorageDestination());\n-                        }\n-                        bind(resultStorageEngine).to(ResultStorageEngine.class).named(\"resultStorageEngine\");\n-\n-                        // Initialize the Formatters.\n-                        Map<ResultType, TableExportFormatter> supportedFormatters = new HashMap<>();\n-                        supportedFormatters.put(ResultType.CSV, new CSVExportFormatter(elide,\n-                                asyncProperties.skipCSVHeader()));\n-                        supportedFormatters.put(ResultType.JSON, new JSONExportFormatter(elide));\n-\n-                        // Binding TableExport LifeCycleHook\n-                        TableExportHook tableExportHook = getTableExportHook(asyncExecutorService,\n-                                asyncProperties, supportedFormatters, resultStorageEngine);\n-                        dictionary.bindTrigger(TableExport.class, READ, PRESECURITY, tableExportHook, false);\n-                        dictionary.bindTrigger(TableExport.class, CREATE, POSTCOMMIT, tableExportHook, false);\n-                        dictionary.bindTrigger(TableExport.class, CREATE, PRESECURITY, tableExportHook, false);\n-                    }\n-\n-                    // Binding AsyncQuery LifeCycleHook\n-                    AsyncQueryHook asyncQueryHook = new AsyncQueryHook(asyncExecutorService,\n-                            asyncProperties.getMaxAsyncAfterSeconds());\n-\n-                    dictionary.bindTrigger(AsyncQuery.class, READ, PRESECURITY, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, asyncQueryHook, false);\n-\n-                    // Binding async cleanup service\n-                    if (asyncProperties.enableCleanup()) {\n-                        AsyncCleanerService.init(elide, asyncProperties.getMaxRunTimeSeconds(),\n-                                asyncProperties.getQueryCleanupDays(),\n-                                asyncProperties.getQueryCancelCheckIntervalSeconds(), asyncAPIDao);\n-                        bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n-                    }\n-                }\n-            }\n-        });\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n", "next_change": {"commit": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 5fa759378..7e31fd83c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -237,15 +233,28 @@ public class ElideResourceConfig extends ResourceConfig {\n             throw new IllegalStateException(e);\n         }\n \n+\n         // Bind to injector\n         register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n-\n         // Bind swaggers to given endpoint\n+        //This looks strange, but Jersey binds its Abstract binders first, and then later it binds 'external'\n+        //binders (like this HK2 version).  This allows breaking dependency injection into two phases.\n+        //Everything bound in the first phase can be accessed in the second phase.\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n             @Override\n             protected void configure() {\n-                EntityDictionary dictionary = injector.getService(EntityDictionary.class);\n+                Elide elide = injector.getService(Elide.class, \"elide\");\n+\n+                elide.doScans();\n+\n+                //Bind subscription hooks.\n+                if (settings.getSubscriptionProperties().publishingEnabled()) {\n+                    settings.getSubscriptionProperties().subscriptionScanner(elide,\n+                            settings.getSubscriptionProperties().getConnectionFactory());\n+                }\n+\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n                 if (settings.enableSwagger()) {\n                     List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7e31fd83c..7b3f93041 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -256,9 +266,10 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                 EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n-                if (settings.enableSwagger()) {\n-                    List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n-                    bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<List<DocEndpoint.SwaggerRegistration>>() { });\n+                if (settings.enableApiDocs()) {\n+                    List<ApiDocsEndpoint.ApiDocsRegistration> apiDocs = settings.buildApiDocs(dictionary);\n+                    bind(apiDocs).named(\"apiDocs\").to(new TypeLiteral<List<ApiDocsEndpoint.ApiDocsRegistration>>() {\n+                    });\n                 }\n             }\n         });\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "632b7bb81c2ee3413546997718d86afddee47e91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes - Honor Doc Version in SwaggerController and Use ISO8601Dates Serde Format in Date Formatting  (#1336)"}, {"oid": "78619ef065965a1ee0d9fcd90192d70382467c90", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Carbon 167 Async Enhancements Embeddable (#1353)"}, {"oid": "1c3963ab4743d71cc6ecadea40c900c5e6696184", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async change to use onReadPreSecurity Hook (#1409)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "6227ce4839efe4607e3604f9abf85e031b44cdc9", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async model Spec Changes  (#1584)"}, {"oid": "827440dac8d3c807860351ac81fc54905e4af007", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Restructuring the packages for Async (#1612)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "b735f9b19d4d1a13a530f06f335d02eec4cdae1b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Initial commit (#1664)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dd69d567f445b9a62dda30b9ff8093ea4455c08b", "committedDate": "2021-02-01 17:03:04 -0500", "message": "Async Refactor Cleanup (#1804)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "106bb161fbeb937b15a19dd40f4ab9d17037ed6d", "committedDate": "2021-02-10 15:23:17 -0600", "message": "Export : Standalone API Resource (#1817)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "5283569e556181cdc145f0090eac74ee6a9d3e1c", "committedDate": "2021-02-11 11:27:08 -0600", "message": "Issue#1798 Remove Singleton Pattern for Async Service Classes (#1831)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "0eb1624a401c9099c0e9f1f3fb539144cb3b97a1", "committedDate": "2021-10-01 13:23:46 -0500", "message": "Added new flag to enable subscription publishing in a separate service.  Disallow queries in subscription endpoint. (#2320)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "1bec9a04edb9917b34a9d168a3bec98f04fa8cad", "committedDate": "2021-10-26 11:08:07 -0500", "message": "Changing to Create Preflush (#2379)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "4caaae234214edf6a61bea57531de79520604d54", "committedDate": "2022-01-06 09:20:20 -0600", "message": "File Extension Support for Export Attachments (#2475)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NzgzOA==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385267838", "body": "See my earlier comment here.", "bodyText": "See my earlier comment here.", "bodyHTML": "<p dir=\"auto\">See my earlier comment here.</p>", "author": "aklish", "createdAt": "2020-02-27T17:43:07Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -64,7 +65,7 @@\n      */\n     default ElideSettings getElideSettings(ServiceLocator injector) {\n         EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                getDatabaseProperties());\n+                getAsyncModelPackageName(), getDatabaseProperties());", "originalCommit": "5a15ded7ff2f761b8d916065d9b689edfa5fc88a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MDA3OA==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r385370078", "bodyText": "Done", "author": "moizarafat", "createdAt": "2020-02-27T21:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NzgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "8a117d0bea40cc84232fb4524a28b40271e77680", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex aa3a37ad2..289eebf22 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -65,7 +64,7 @@ public interface ElideStandaloneSettings {\n      */\n     default ElideSettings getElideSettings(ServiceLocator injector) {\n         EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                getAsyncModelPackageName(), getDatabaseProperties());\n+                enableAsync(), getDatabaseProperties());\n         DataStore dataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em -> { return new NonJtaTransaction(em); }));\n", "next_change": {"commit": "48fa5f268d8d5c6e075f04418deff0951d972361", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 289eebf22..b2936020e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -65,6 +66,7 @@ public interface ElideStandaloneSettings {\n     default ElideSettings getElideSettings(ServiceLocator injector) {\n         EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n                 enableAsync(), getDatabaseProperties());\n+\n         DataStore dataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em -> { return new NonJtaTransaction(em); }));\n", "next_change": {"commit": "379f545d61fbca5842e756dca2cd08c22ffce0dd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b2936020e..44f9f4dbf 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -65,8 +63,7 @@ public interface ElideStandaloneSettings {\n      */\n     default ElideSettings getElideSettings(ServiceLocator injector) {\n         EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                enableAsync(), getDatabaseProperties());\n-\n+                getAsyncModelPackageName(), getDatabaseProperties());\n         DataStore dataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em -> { return new NonJtaTransaction(em); }));\n", "next_change": {"commit": "e05e4575749d34d4ce8ff13e3d9418d4947ac0a6", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 44f9f4dbf..277b43a40 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -63,7 +62,7 @@ public interface ElideStandaloneSettings {\n      */\n     default ElideSettings getElideSettings(ServiceLocator injector) {\n         EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                getAsyncModelPackageName(), getDatabaseProperties());\n+                enableAsync(), getDatabaseProperties());\n         DataStore dataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em -> { return new NonJtaTransaction(em); }));\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex aa3a37ad2..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -65,7 +64,7 @@ public interface ElideStandaloneSettings {\n      */\n     default ElideSettings getElideSettings(ServiceLocator injector) {\n         EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                getAsyncModelPackageName(), getDatabaseProperties());\n+                enableAsync(), getDatabaseProperties());\n         DataStore dataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em -> { return new NonJtaTransaction(em); }));\n", "next_change": {"commit": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex a34eb18c7..b6da96d9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -64,7 +63,7 @@ public interface ElideStandaloneSettings {\n      */\n     default ElideSettings getElideSettings(ServiceLocator injector) {\n         EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                enableAsync(), getDatabaseProperties());\n+                getDatabaseProperties());\n         DataStore dataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em -> { return new NonJtaTransaction(em); }));\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b6da96d9c..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -63,7 +61,7 @@ public interface ElideStandaloneSettings {\n      */\n     default ElideSettings getElideSettings(ServiceLocator injector) {\n         EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                getDatabaseProperties());\n+                enableAsync(), getDatabaseProperties());\n         DataStore dataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 (em -> { return new NonJtaTransaction(em); }));\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -56,30 +74,11 @@ public interface ElideStandaloneSettings {\n      * That is to say, if you intend to override this method, expect to fully configure the ElideSettings object to\n      * your needs.\n      *\n-     * @param injector Service locator for web service for dependency injection.\n+     * @param dictionary EntityDictionary object.\n+     * @param dataStore Dastore object\n      * @return Configured ElideSettings object.\n      */\n-    default ElideSettings getElideSettings(ServiceLocator injector) {\n-        EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                enableAsync(), getDatabaseProperties());\n-        DataStore dataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em); }));\n-\n-        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        injector.inject(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return injector.create(cls);\n-                    }\n-                });\n-\n-        dictionary.scanForSecurityChecks();\n+    default ElideSettings getElideSettings(EntityDictionary dictionary, DataStore dataStore) {\n \n         ElideSettingsBuilder builder = new ElideSettingsBuilder(dataStore)\n                 .withEntityDictionary(dictionary)\n", "next_change": {"commit": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..28c691c7d 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -84,6 +93,7 @@ public interface ElideStandaloneSettings {\n                 .withEntityDictionary(dictionary)\n                 .withJoinFilterDialect(new RSQLFilterDialect(dictionary))\n                 .withSubqueryFilterDialect(new RSQLFilterDialect(dictionary))\n+                .withBaseUrl(getBaseUrl())\n                 .withAuditLogger(getAuditLogger());\n \n         if (enableISO8601Dates()) {\n", "next_change": {"commit": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 28c691c7d..3f97276fb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -94,6 +96,8 @@ public interface ElideStandaloneSettings {\n                 .withJoinFilterDialect(new RSQLFilterDialect(dictionary))\n                 .withSubqueryFilterDialect(new RSQLFilterDialect(dictionary))\n                 .withBaseUrl(getBaseUrl())\n+                .withJsonApiPath(getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\"))\n+                .withGraphqlApiPath(getGraphQLApiPathSpec().replaceAll(\"/\\\\*\", \"\"))\n                 .withAuditLogger(getAuditLogger());\n \n         if (enableISO8601Dates()) {\n", "next_change": {"commit": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 3f97276fb..f5db3d028 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -97,7 +97,7 @@ public interface ElideStandaloneSettings {\n                 .withSubqueryFilterDialect(new RSQLFilterDialect(dictionary))\n                 .withBaseUrl(getBaseUrl())\n                 .withJsonApiPath(getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\"))\n-                .withGraphqlApiPath(getGraphQLApiPathSpec().replaceAll(\"/\\\\*\", \"\"))\n+                .withGraphQLApiPath(getGraphQLApiPathSpec().replaceAll(\"/\\\\*\", \"\"))\n                 .withAuditLogger(getAuditLogger());\n \n         if (enableISO8601Dates()) {\n", "next_change": {"commit": "93ebb969254204bd315de860bd064ca77e70cfab", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex f5db3d028..955afb929 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -100,8 +100,12 @@ public interface ElideStandaloneSettings {\n                 .withGraphQLApiPath(getGraphQLApiPathSpec().replaceAll(\"/\\\\*\", \"\"))\n                 .withAuditLogger(getAuditLogger());\n \n+        if (getAsyncProperties().enableExport()) {\n+            builder.withDownloadApiPath(getAsyncProperties().getExportApiPathSpec().replaceAll(\"/\\\\*\", \"\"));\n+        }\n+\n         if (enableISO8601Dates()) {\n-            builder = builder.withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"));\n+            builder.withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"));\n         }\n \n         return builder.build();\n", "next_change": {"commit": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 955afb929..263ba2514 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -101,7 +123,7 @@ public interface ElideStandaloneSettings {\n                 .withAuditLogger(getAuditLogger());\n \n         if (getAsyncProperties().enableExport()) {\n-            builder.withDownloadApiPath(getAsyncProperties().getExportApiPathSpec().replaceAll(\"/\\\\*\", \"\"));\n+            builder.withExportApiPath(getAsyncProperties().getExportApiPathSpec().replaceAll(\"/\\\\*\", \"\"));\n         }\n \n         if (enableISO8601Dates()) {\n", "next_change": {"commit": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 263ba2514..439f7ddd0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -122,6 +126,10 @@ public interface ElideStandaloneSettings {\n                 .withGraphQLApiPath(getGraphQLApiPathSpec().replaceAll(\"/\\\\*\", \"\"))\n                 .withAuditLogger(getAuditLogger());\n \n+        if (verboseErrors()) {\n+            builder.withVerboseErrors();\n+        }\n+\n         if (getAsyncProperties().enableExport()) {\n             builder.withExportApiPath(getAsyncProperties().getExportApiPathSpec().replaceAll(\"/\\\\*\", \"\"));\n         }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "committedDate": "2020-05-18 13:58:16 -0500", "message": "Add Eclipse import order (#1327)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"oid": "75b03e6fd7908a910dd2ffadc0c3be3988ad2065", "url": "https://github.com/yahoo/elide/commit/75b03e6fd7908a910dd2ffadc0c3be3988ad2065", "message": "Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T20:48:57Z", "type": "commit"}, {"oid": "2a9954ea2d89c51887844187ef3291ba3d81f7ca", "url": "https://github.com/yahoo/elide/commit/2a9954ea2d89c51887844187ef3291ba3d81f7ca", "message": "Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T20:48:57Z", "type": "commit"}, {"oid": "d57c68deb6e294992f5c9e0e631e36ab2c2121ef", "url": "https://github.com/yahoo/elide/commit/d57c68deb6e294992f5c9e0e631e36ab2c2121ef", "message": "Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T20:48:57Z", "type": "commit"}, {"oid": "8a117d0bea40cc84232fb4524a28b40271e77680", "url": "https://github.com/yahoo/elide/commit/8a117d0bea40cc84232fb4524a28b40271e77680", "message": "Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T20:57:23Z", "type": "commit"}, {"oid": "48fa5f268d8d5c6e075f04418deff0951d972361", "url": "https://github.com/yahoo/elide/commit/48fa5f268d8d5c6e075f04418deff0951d972361", "message": "Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T21:01:08Z", "type": "commit"}, {"oid": "a65e7bd4f1620e55be7a2df95a99e8aa9d3e8810", "url": "https://github.com/yahoo/elide/commit/a65e7bd4f1620e55be7a2df95a99e8aa9d3e8810", "message": "Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-02-27T21:05:24Z", "type": "commit"}, {"oid": "19a247fa3d8ca46f6e9b850c3eca0a54f1ebed6a", "url": "https://github.com/yahoo/elide/commit/19a247fa3d8ca46f6e9b850c3eca0a54f1ebed6a", "message": "Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-01T22:00:23Z", "type": "commit"}, {"oid": "4f6e8b5989ca6304bb2142a3ad7a7dc6cfeb3a5e", "url": "https://github.com/yahoo/elide/commit/4f6e8b5989ca6304bb2142a3ad7a7dc6cfeb3a5e", "message": "Binding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\nBinding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-02T19:06:51Z", "type": "commit"}, {"oid": "4f6e8b5989ca6304bb2142a3ad7a7dc6cfeb3a5e", "url": "https://github.com/yahoo/elide/commit/4f6e8b5989ca6304bb2142a3ad7a7dc6cfeb3a5e", "message": "Binding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\nBinding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-02T19:06:51Z", "type": "forcePushed"}, {"oid": "23b22fb689d48eca5fc5dfcc088a0024d94c9d4e", "url": "https://github.com/yahoo/elide/commit/23b22fb689d48eca5fc5dfcc088a0024d94c9d4e", "message": "Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-03T01:30:43Z", "type": "commit"}, {"oid": "379f545d61fbca5842e756dca2cd08c22ffce0dd", "url": "https://github.com/yahoo/elide/commit/379f545d61fbca5842e756dca2cd08c22ffce0dd", "message": "Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:09:41Z", "type": "commit"}, {"oid": "c8c8f618c7de30db9f2c6abe011f2d5ae668e8d0", "url": "https://github.com/yahoo/elide/commit/c8c8f618c7de30db9f2c6abe011f2d5ae668e8d0", "message": "Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:09:41Z", "type": "commit"}, {"oid": "e10b88a36b9714a556cf97ed69fb1cfeba18d078", "url": "https://github.com/yahoo/elide/commit/e10b88a36b9714a556cf97ed69fb1cfeba18d078", "message": "Default enableAsync to False.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:09:41Z", "type": "commit"}, {"oid": "b10af1fc3b4635d0d02aeb7a3b581ca0bdac06a1", "url": "https://github.com/yahoo/elide/commit/b10af1fc3b4635d0d02aeb7a3b581ca0bdac06a1", "message": "Integrating elide-async.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:10:59Z", "type": "commit"}, {"oid": "e05e4575749d34d4ce8ff13e3d9418d4947ac0a6", "url": "https://github.com/yahoo/elide/commit/e05e4575749d34d4ce8ff13e3d9418d4947ac0a6", "message": "Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:10:59Z", "type": "commit"}, {"oid": "0f6021bbfc1ca64929fb82bd31cc17468f8902e5", "url": "https://github.com/yahoo/elide/commit/0f6021bbfc1ca64929fb82bd31cc17468f8902e5", "message": "Resolving review comments.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:10:59Z", "type": "commit"}, {"oid": "2d52b47ad1191fe492874e5ca3dd9c6a0bb96f90", "url": "https://github.com/yahoo/elide/commit/2d52b47ad1191fe492874e5ca3dd9c6a0bb96f90", "message": "Removing unwanted params.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:10:59Z", "type": "commit"}, {"oid": "9ca38c190efeaaec946099bf60cb3b9396dd3348", "url": "https://github.com/yahoo/elide/commit/9ca38c190efeaaec946099bf60cb3b9396dd3348", "message": "Binding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>\n\nBinding Cleaner service.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:10:59Z", "type": "commit"}, {"oid": "b6d0928e0e114ada10b339134740d43e9afa9f54", "url": "https://github.com/yahoo/elide/commit/b6d0928e0e114ada10b339134740d43e9afa9f54", "message": "Adding query result retention.\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:11:00Z", "type": "commit"}, {"oid": "7167d750655d2231788b2a9a1944a273b99bc5aa", "url": "https://github.com/yahoo/elide/commit/7167d750655d2231788b2a9a1944a273b99bc5aa", "message": "Rebase Conflicts\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-05T23:36:35Z", "type": "commit"}, {"oid": "2e1b1824dcb350c6503e252b06fd9ac399b8656e", "url": "https://github.com/yahoo/elide/commit/2e1b1824dcb350c6503e252b06fd9ac399b8656e", "message": "Making AsyncQueryDAO configurable\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-11T09:55:38Z", "type": "commit"}, {"oid": "2678b3fb6d869e159b4d038fa825457e15e3ebd3", "url": "https://github.com/yahoo/elide/commit/2678b3fb6d869e159b4d038fa825457e15e3ebd3", "message": "Making AsyncQueryDAO configurable\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-11T10:02:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMTY2NA==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r391201664", "body": "This should be qualified with Async", "bodyText": "This should be qualified with Async", "bodyHTML": "<p dir=\"auto\">This should be qualified with Async</p>", "author": "aklish", "createdAt": "2020-03-11T19:11:11Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -167,6 +169,60 @@ default boolean enableJSONAPI() {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getMaxRunTimeMinutes() {", "originalCommit": "2678b3fb6d869e159b4d038fa825457e15e3ebd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3826d246d1889353407b70ee8f4014ae17feced", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81fed31bb..0b8e69360 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -202,7 +202,7 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTimeMinutes() {\n+    default Integer getAsyncMaxRunTimeMinutes() {\n         return 60;\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81fed31bb..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -202,7 +202,7 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 60\n      */\n-    default Integer getMaxRunTimeMinutes() {\n+    default Integer getAsyncMaxRunTimeMinutes() {\n         return 60;\n     }\n \n", "next_change": {"commit": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex a34eb18c7..b6da96d9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -169,66 +178,12 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n-    \n-    /**\n-     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsync() {\n-        return false;\n-    }\n-\n-    /**\n-     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsyncCleanup() {\n-        return false;\n-    }\n-\n-    /**\n-     * Thread Size for Async queries to run in parallel.\n-     *\n-     * @return Default: 5\n-     */\n-    default Integer getAsyncThreadSize() {\n-        return 5;\n-    }\n-\n-    /**\n-     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n-     *\n-     * @return Default: 60\n-     */\n-    default Integer getAsyncMaxRunTimeMinutes() {\n-        return 60;\n-    }\n-\n-    /**\n-     * Number of days history to retain for async query executions and results.\n-     *\n-     * @return Default: 7\n-     */\n-    default Integer getAsyncQueryCleanupDays() {\n-        return 7;\n-    }\n-\n-    /**\n-     * Implementation of AsyncQueryDAO to use.\n-     *\n-     * @return AsyncQueryDAO type object.\n-     */\n-    default AsyncQueryDAO getAsyncQueryDAO() {\n-        return null;\n-    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableISO8601Dates() {\n+    default boolean enableIS06081Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b6da96d9c..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -178,12 +165,66 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getAsyncMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;\n+    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableIS06081Dates() {\n+    default boolean enableISO8601Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -222,7 +238,7 @@ public interface ElideStandaloneSettings {\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n-     * @return\n+     * @return whether ISO8601Dates are enabled.\n      */\n     default boolean enableISO8601Dates() {\n         return true;\n", "next_change": null}, {"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -231,18 +247,57 @@ public interface ElideStandaloneSettings {\n     /**\n      * Whether or not Codahale metrics, healthchecks, thread, ping, and admin servlet\n      * should be enabled.\n-     * @return\n+     * @return  whether ServiceMonitoring is enabled.\n      */\n     default boolean enableServiceMonitoring() {\n         return true;\n     }\n \n     /**\n-     * Enable swagger documentation by returning non empty list.\n+     * Enable swagger documentation.\n+     * @return whether Swagger is enabled;\n+     */\n+    default boolean enableSwagger() {\n+        return false;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API version.\n+     * The models with the same version are included.\n+     * @return swagger version;\n+     */\n+    default String getSwaggerVersion() {\n+        return NO_VERSION;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API name.\n+     * @return swagger service name;\n+     */\n+    default String getSwaggerName() {\n+        return \"Elide Service\";\n+    }\n+\n+    /**\n+     * Creates a singular swagger document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n      * @return list of swagger registration objects.\n      */\n-    default List<DocEndpoint.SwaggerRegistration> enableSwagger() {\n-        return new ArrayList<>();\n+    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n+        Info info = new Info()\n+                .title(getSwaggerName())\n+                .version(getSwaggerVersion());\n+\n+        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n+\n+        Swagger swagger = builder.build().basePath(moduleBasePath);\n+\n+        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n+        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+\n+        return docs;\n     }\n \n     /**\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..36bc00e65 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -254,48 +315,56 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Enable swagger documentation.\n-     * @return whether Swagger is enabled;\n+     * Enable OpenAPI documentation.\n+     * @return whether OpenAPI is enabled;\n      */\n-    default boolean enableSwagger() {\n+    default boolean enableApiDocs() {\n         return false;\n     }\n \n     /**\n-     * Swagger documentation requires an API version.\n-     * The models with the same version are included.\n-     * @return swagger version;\n+     * The OpenAPI Specification Version to generate.\n+     * @return the OpenAPI Specification Version to generate\n      */\n-    default String getSwaggerVersion() {\n-        return NO_VERSION;\n+    default OpenApiVersion getOpenApiVersion() {\n+        return OpenApiVersion.OPENAPI_3_0;\n     }\n \n     /**\n-     * Swagger documentation requires an API name.\n-     * @return swagger service name;\n+     * The service base URL that clients use in queries.  Elide will reference this name\n+     * in any callback URLs returned by the service.  If not set, Elide uses the API request to generate the base URL.\n+     * @return The base URL of the service.\n      */\n-    default String getSwaggerName() {\n-        return \"Elide Service\";\n+    default String getBaseUrl() {\n+        return \"\";\n     }\n \n     /**\n-     * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models. .\n-     * @return list of swagger registration objects.\n+     * OpenAPI documentation requires an API name.\n+     * @return open api service name;\n      */\n-    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n-        Info info = new Info()\n-                .title(getSwaggerName())\n-                .version(getSwaggerVersion());\n-\n-        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-\n-        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-        Swagger swagger = builder.build().basePath(moduleBasePath);\n+    default String getApiTitle() {\n+        return \"Elide Service\";\n+    }\n \n-        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n-        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+    /**\n+     * Creates a singular OpenAPI document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n+     * @return list of OpenAPI registration objects.\n+     */\n+    default List<ApiDocsEndpoint.ApiDocsRegistration> buildApiDocs(EntityDictionary dictionary) {\n+        List<ApiDocsEndpoint.ApiDocsRegistration> docs = new ArrayList<>();\n+\n+        dictionary.getApiVersions().stream().forEach(apiVersion -> {\n+            Info info = new Info()\n+                    .title(getApiTitle())\n+                    .version(apiVersion);\n+            OpenApiBuilder builder = new OpenApiBuilder(dictionary).apiVersion(apiVersion);\n+            String moduleBasePath = getJsonApiPathSpec().replace(\"/*\", \"\");\n+            OpenAPI openApi = builder.build().info(info).addServersItem(new Server().url(moduleBasePath));\n+            docs.add(new ApiDocsEndpoint.ApiDocsRegistration(\"test\", () -> openApi, getOpenApiVersion().getValue(),\n+                    apiVersion));\n+        });\n \n         return docs;\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "committedDate": "2020-05-18 13:58:16 -0500", "message": "Add Eclipse import order (#1327)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMTcyOQ==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r391201729", "body": "Same comment.", "bodyText": "Same comment.", "bodyHTML": "<p dir=\"auto\">Same comment.</p>", "author": "aklish", "createdAt": "2020-03-11T19:11:20Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -167,6 +169,60 @@ default boolean enableJSONAPI() {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getQueryCleanupDays() {", "originalCommit": "2678b3fb6d869e159b4d038fa825457e15e3ebd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3826d246d1889353407b70ee8f4014ae17feced", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81fed31bb..0b8e69360 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -211,10 +211,19 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 7\n      */\n-    default Integer getQueryCleanupDays() {\n+    default Integer getAsyncQueryCleanupDays() {\n         return 7;\n     }\n \n+    /**\n+     *  Root path specification for the Async Models Swagger endpoint.\n+     *\n+     * @return Default: /api/v1\n+     */\n+    default String getAsyncSwaggerPath() {\n+        return \"/api/v1\";\n+    }\n+\n     /**\n      * Implementation of AsyncQueryDAO to use.\n      *\n", "next_change": {"commit": "9a34233254173fc009f4c3e7661a4e313e7277ef", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 0b8e69360..623f1d82c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -230,7 +230,7 @@ public interface ElideStandaloneSettings {\n      * @return AsyncQueryDAO type object.\n      */\n     default AsyncQueryDAO getAsyncQueryDAO() {\n-        return new DefaultAsyncQueryDAO();\n+        return null;\n     }\n \n     /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81fed31bb..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -211,7 +211,7 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 7\n      */\n-    default Integer getQueryCleanupDays() {\n+    default Integer getAsyncQueryCleanupDays() {\n         return 7;\n     }\n \n", "next_change": {"commit": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex a34eb18c7..b6da96d9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -169,66 +178,12 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n-    \n-    /**\n-     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsync() {\n-        return false;\n-    }\n-\n-    /**\n-     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsyncCleanup() {\n-        return false;\n-    }\n-\n-    /**\n-     * Thread Size for Async queries to run in parallel.\n-     *\n-     * @return Default: 5\n-     */\n-    default Integer getAsyncThreadSize() {\n-        return 5;\n-    }\n-\n-    /**\n-     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n-     *\n-     * @return Default: 60\n-     */\n-    default Integer getAsyncMaxRunTimeMinutes() {\n-        return 60;\n-    }\n-\n-    /**\n-     * Number of days history to retain for async query executions and results.\n-     *\n-     * @return Default: 7\n-     */\n-    default Integer getAsyncQueryCleanupDays() {\n-        return 7;\n-    }\n-\n-    /**\n-     * Implementation of AsyncQueryDAO to use.\n-     *\n-     * @return AsyncQueryDAO type object.\n-     */\n-    default AsyncQueryDAO getAsyncQueryDAO() {\n-        return null;\n-    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableISO8601Dates() {\n+    default boolean enableIS06081Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b6da96d9c..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -178,12 +165,66 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getAsyncMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;\n+    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableIS06081Dates() {\n+    default boolean enableISO8601Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -222,7 +238,7 @@ public interface ElideStandaloneSettings {\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n-     * @return\n+     * @return whether ISO8601Dates are enabled.\n      */\n     default boolean enableISO8601Dates() {\n         return true;\n", "next_change": null}, {"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -231,18 +247,57 @@ public interface ElideStandaloneSettings {\n     /**\n      * Whether or not Codahale metrics, healthchecks, thread, ping, and admin servlet\n      * should be enabled.\n-     * @return\n+     * @return  whether ServiceMonitoring is enabled.\n      */\n     default boolean enableServiceMonitoring() {\n         return true;\n     }\n \n     /**\n-     * Enable swagger documentation by returning non empty list.\n+     * Enable swagger documentation.\n+     * @return whether Swagger is enabled;\n+     */\n+    default boolean enableSwagger() {\n+        return false;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API version.\n+     * The models with the same version are included.\n+     * @return swagger version;\n+     */\n+    default String getSwaggerVersion() {\n+        return NO_VERSION;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API name.\n+     * @return swagger service name;\n+     */\n+    default String getSwaggerName() {\n+        return \"Elide Service\";\n+    }\n+\n+    /**\n+     * Creates a singular swagger document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n      * @return list of swagger registration objects.\n      */\n-    default List<DocEndpoint.SwaggerRegistration> enableSwagger() {\n-        return new ArrayList<>();\n+    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n+        Info info = new Info()\n+                .title(getSwaggerName())\n+                .version(getSwaggerVersion());\n+\n+        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n+\n+        Swagger swagger = builder.build().basePath(moduleBasePath);\n+\n+        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n+        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+\n+        return docs;\n     }\n \n     /**\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..36bc00e65 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -254,48 +315,56 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Enable swagger documentation.\n-     * @return whether Swagger is enabled;\n+     * Enable OpenAPI documentation.\n+     * @return whether OpenAPI is enabled;\n      */\n-    default boolean enableSwagger() {\n+    default boolean enableApiDocs() {\n         return false;\n     }\n \n     /**\n-     * Swagger documentation requires an API version.\n-     * The models with the same version are included.\n-     * @return swagger version;\n+     * The OpenAPI Specification Version to generate.\n+     * @return the OpenAPI Specification Version to generate\n      */\n-    default String getSwaggerVersion() {\n-        return NO_VERSION;\n+    default OpenApiVersion getOpenApiVersion() {\n+        return OpenApiVersion.OPENAPI_3_0;\n     }\n \n     /**\n-     * Swagger documentation requires an API name.\n-     * @return swagger service name;\n+     * The service base URL that clients use in queries.  Elide will reference this name\n+     * in any callback URLs returned by the service.  If not set, Elide uses the API request to generate the base URL.\n+     * @return The base URL of the service.\n      */\n-    default String getSwaggerName() {\n-        return \"Elide Service\";\n+    default String getBaseUrl() {\n+        return \"\";\n     }\n \n     /**\n-     * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models. .\n-     * @return list of swagger registration objects.\n+     * OpenAPI documentation requires an API name.\n+     * @return open api service name;\n      */\n-    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n-        Info info = new Info()\n-                .title(getSwaggerName())\n-                .version(getSwaggerVersion());\n-\n-        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-\n-        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-        Swagger swagger = builder.build().basePath(moduleBasePath);\n+    default String getApiTitle() {\n+        return \"Elide Service\";\n+    }\n \n-        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n-        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+    /**\n+     * Creates a singular OpenAPI document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n+     * @return list of OpenAPI registration objects.\n+     */\n+    default List<ApiDocsEndpoint.ApiDocsRegistration> buildApiDocs(EntityDictionary dictionary) {\n+        List<ApiDocsEndpoint.ApiDocsRegistration> docs = new ArrayList<>();\n+\n+        dictionary.getApiVersions().stream().forEach(apiVersion -> {\n+            Info info = new Info()\n+                    .title(getApiTitle())\n+                    .version(apiVersion);\n+            OpenApiBuilder builder = new OpenApiBuilder(dictionary).apiVersion(apiVersion);\n+            String moduleBasePath = getJsonApiPathSpec().replace(\"/*\", \"\");\n+            OpenAPI openApi = builder.build().info(info).addServersItem(new Server().url(moduleBasePath));\n+            docs.add(new ApiDocsEndpoint.ApiDocsRegistration(\"test\", () -> openApi, getOpenApiVersion().getValue(),\n+                    apiVersion));\n+        });\n \n         return docs;\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "committedDate": "2020-05-18 13:58:16 -0500", "message": "Add Eclipse import order (#1327)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMjE4OA==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r391202188", "body": "Instead of resolving this as a setting - this can be injected into the async code (either via lifecycle hook or bean).  ", "bodyText": "Instead of resolving this as a setting - this can be injected into the async code (either via lifecycle hook or bean).", "bodyHTML": "<p dir=\"auto\">Instead of resolving this as a setting - this can be injected into the async code (either via lifecycle hook or bean).</p>", "author": "aklish", "createdAt": "2020-03-11T19:12:18Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -167,6 +169,60 @@ default boolean enableJSONAPI() {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {", "originalCommit": "2678b3fb6d869e159b4d038fa825457e15e3ebd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1Njk2OA==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r391756968", "bodyText": "As discussed will leave it as is.", "author": "moizarafat", "createdAt": "2020-03-12T16:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMjE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c3826d246d1889353407b70ee8f4014ae17feced", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81fed31bb..0b8e69360 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -211,10 +211,19 @@ public interface ElideStandaloneSettings {\n      *\n      * @return Default: 7\n      */\n-    default Integer getQueryCleanupDays() {\n+    default Integer getAsyncQueryCleanupDays() {\n         return 7;\n     }\n \n+    /**\n+     *  Root path specification for the Async Models Swagger endpoint.\n+     *\n+     * @return Default: /api/v1\n+     */\n+    default String getAsyncSwaggerPath() {\n+        return \"/api/v1\";\n+    }\n+\n     /**\n      * Implementation of AsyncQueryDAO to use.\n      *\n", "next_change": {"commit": "9a34233254173fc009f4c3e7661a4e313e7277ef", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 0b8e69360..623f1d82c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -230,7 +230,7 @@ public interface ElideStandaloneSettings {\n      * @return AsyncQueryDAO type object.\n      */\n     default AsyncQueryDAO getAsyncQueryDAO() {\n-        return new DefaultAsyncQueryDAO();\n+        return null;\n     }\n \n     /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81fed31bb..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -221,7 +221,7 @@ public interface ElideStandaloneSettings {\n      * @return AsyncQueryDAO type object.\n      */\n     default AsyncQueryDAO getAsyncQueryDAO() {\n-        return new DefaultAsyncQueryDAO();\n+        return null;\n     }\n \n     /**\n", "next_change": {"commit": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex a34eb18c7..b6da96d9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -169,66 +178,12 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n-    \n-    /**\n-     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsync() {\n-        return false;\n-    }\n-\n-    /**\n-     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsyncCleanup() {\n-        return false;\n-    }\n-\n-    /**\n-     * Thread Size for Async queries to run in parallel.\n-     *\n-     * @return Default: 5\n-     */\n-    default Integer getAsyncThreadSize() {\n-        return 5;\n-    }\n-\n-    /**\n-     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n-     *\n-     * @return Default: 60\n-     */\n-    default Integer getAsyncMaxRunTimeMinutes() {\n-        return 60;\n-    }\n-\n-    /**\n-     * Number of days history to retain for async query executions and results.\n-     *\n-     * @return Default: 7\n-     */\n-    default Integer getAsyncQueryCleanupDays() {\n-        return 7;\n-    }\n-\n-    /**\n-     * Implementation of AsyncQueryDAO to use.\n-     *\n-     * @return AsyncQueryDAO type object.\n-     */\n-    default AsyncQueryDAO getAsyncQueryDAO() {\n-        return null;\n-    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableISO8601Dates() {\n+    default boolean enableIS06081Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b6da96d9c..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -178,12 +165,66 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getAsyncMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;\n+    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableIS06081Dates() {\n+    default boolean enableISO8601Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -222,7 +238,7 @@ public interface ElideStandaloneSettings {\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n-     * @return\n+     * @return whether ISO8601Dates are enabled.\n      */\n     default boolean enableISO8601Dates() {\n         return true;\n", "next_change": null}, {"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -231,18 +247,57 @@ public interface ElideStandaloneSettings {\n     /**\n      * Whether or not Codahale metrics, healthchecks, thread, ping, and admin servlet\n      * should be enabled.\n-     * @return\n+     * @return  whether ServiceMonitoring is enabled.\n      */\n     default boolean enableServiceMonitoring() {\n         return true;\n     }\n \n     /**\n-     * Enable swagger documentation by returning non empty list.\n+     * Enable swagger documentation.\n+     * @return whether Swagger is enabled;\n+     */\n+    default boolean enableSwagger() {\n+        return false;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API version.\n+     * The models with the same version are included.\n+     * @return swagger version;\n+     */\n+    default String getSwaggerVersion() {\n+        return NO_VERSION;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API name.\n+     * @return swagger service name;\n+     */\n+    default String getSwaggerName() {\n+        return \"Elide Service\";\n+    }\n+\n+    /**\n+     * Creates a singular swagger document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n      * @return list of swagger registration objects.\n      */\n-    default List<DocEndpoint.SwaggerRegistration> enableSwagger() {\n-        return new ArrayList<>();\n+    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n+        Info info = new Info()\n+                .title(getSwaggerName())\n+                .version(getSwaggerVersion());\n+\n+        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n+\n+        Swagger swagger = builder.build().basePath(moduleBasePath);\n+\n+        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n+        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+\n+        return docs;\n     }\n \n     /**\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..36bc00e65 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -254,48 +315,56 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Enable swagger documentation.\n-     * @return whether Swagger is enabled;\n+     * Enable OpenAPI documentation.\n+     * @return whether OpenAPI is enabled;\n      */\n-    default boolean enableSwagger() {\n+    default boolean enableApiDocs() {\n         return false;\n     }\n \n     /**\n-     * Swagger documentation requires an API version.\n-     * The models with the same version are included.\n-     * @return swagger version;\n+     * The OpenAPI Specification Version to generate.\n+     * @return the OpenAPI Specification Version to generate\n      */\n-    default String getSwaggerVersion() {\n-        return NO_VERSION;\n+    default OpenApiVersion getOpenApiVersion() {\n+        return OpenApiVersion.OPENAPI_3_0;\n     }\n \n     /**\n-     * Swagger documentation requires an API name.\n-     * @return swagger service name;\n+     * The service base URL that clients use in queries.  Elide will reference this name\n+     * in any callback URLs returned by the service.  If not set, Elide uses the API request to generate the base URL.\n+     * @return The base URL of the service.\n      */\n-    default String getSwaggerName() {\n-        return \"Elide Service\";\n+    default String getBaseUrl() {\n+        return \"\";\n     }\n \n     /**\n-     * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models. .\n-     * @return list of swagger registration objects.\n+     * OpenAPI documentation requires an API name.\n+     * @return open api service name;\n      */\n-    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n-        Info info = new Info()\n-                .title(getSwaggerName())\n-                .version(getSwaggerVersion());\n-\n-        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-\n-        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-        Swagger swagger = builder.build().basePath(moduleBasePath);\n+    default String getApiTitle() {\n+        return \"Elide Service\";\n+    }\n \n-        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n-        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+    /**\n+     * Creates a singular OpenAPI document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n+     * @return list of OpenAPI registration objects.\n+     */\n+    default List<ApiDocsEndpoint.ApiDocsRegistration> buildApiDocs(EntityDictionary dictionary) {\n+        List<ApiDocsEndpoint.ApiDocsRegistration> docs = new ArrayList<>();\n+\n+        dictionary.getApiVersions().stream().forEach(apiVersion -> {\n+            Info info = new Info()\n+                    .title(getApiTitle())\n+                    .version(apiVersion);\n+            OpenApiBuilder builder = new OpenApiBuilder(dictionary).apiVersion(apiVersion);\n+            String moduleBasePath = getJsonApiPathSpec().replace(\"/*\", \"\");\n+            OpenAPI openApi = builder.build().info(info).addServersItem(new Server().url(moduleBasePath));\n+            docs.add(new ApiDocsEndpoint.ApiDocsRegistration(\"test\", () -> openApi, getOpenApiVersion().getValue(),\n+                    apiVersion));\n+        });\n \n         return docs;\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "committedDate": "2020-05-18 13:58:16 -0500", "message": "Add Eclipse import order (#1327)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMjcyMw==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r391202723", "body": "Most of the other APIs have a config setting for the base path.", "bodyText": "Most of the other APIs have a config setting for the base path.", "bodyHTML": "<p dir=\"auto\">Most of the other APIs have a config setting for the base path.</p>", "author": "aklish", "createdAt": "2020-03-11T19:13:22Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -85,6 +112,21 @@ protected void configure() {\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n+                    // Include the async models in swagger docs\n+                    if(settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                        dictionary.bindEntity(AsyncQuery.class);\n+                        dictionary.bindEntity(AsyncQueryResult.class);\n+                         \n+                        Info info = new Info().title(\"Async Service\").version(\"1.0\");\n+\n+                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+                        Swagger swagger = builder.build().basePath(\"/api/v1\");", "originalCommit": "2678b3fb6d869e159b4d038fa825457e15e3ebd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTk0OQ==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r391259949", "bodyText": "As discussed no config setting exists will add a new one.", "author": "moizarafat", "createdAt": "2020-03-11T20:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMjcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "c3826d246d1889353407b70ee8f4014ae17feced", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 0e9a89893..a33e5a387 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -122,7 +122,7 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n \n-                        Swagger swagger = builder.build().basePath(\"/api/v1\");\n+                        Swagger swagger = builder.build().basePath(settings.getAsyncSwaggerPath());\n \n                         swaggerDocs.put(\"async\", swagger);\n                     }\n", "next_change": {"commit": "5cda3ad7c9081650fd5d64fb85fd15df5a84f703", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex a33e5a387..7ac53f8da 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -121,8 +123,11 @@ public class ElideResourceConfig extends ResourceConfig {\n                         Info info = new Info().title(\"Async Service\").version(\"1.0\");\n \n                         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+                        \n+                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n+                        String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n \n-                        Swagger swagger = builder.build().basePath(settings.getAsyncSwaggerPath());\n+                        Swagger swagger = builder.build().basePath(asyncBasePath);\n \n                         swaggerDocs.put(\"async\", swagger);\n                     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 0e9a89893..7ac53f8da 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -121,8 +123,11 @@ public class ElideResourceConfig extends ResourceConfig {\n                         Info info = new Info().title(\"Async Service\").version(\"1.0\");\n \n                         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+                        \n+                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n+                        String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n \n-                        Swagger swagger = builder.build().basePath(\"/api/v1\");\n+                        Swagger swagger = builder.build().basePath(asyncBasePath);\n \n                         swaggerDocs.put(\"async\", swagger);\n                     }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7ac53f8da..8cdc89c9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -129,10 +145,10 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                         Swagger swagger = builder.build().basePath(asyncBasePath);\n \n-                        swaggerDocs.put(\"async\", swagger);\n+                        swaggerDocs.add(new DocEndpoint.SwaggerRegistration(\"async\", swagger));\n                     }\n \n-                    bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<Map<String, Swagger>>() { });\n+                    bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<List<DocEndpoint.SwaggerRegistration>>() { });\n                 }\n             }\n         });\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 8cdc89c9c..1b671d234 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -128,25 +144,11 @@ public class ElideResourceConfig extends ResourceConfig {\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n             @Override\n             protected void configure() {\n-                List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.enableSwagger();\n-                if (!swaggerDocs.isEmpty()) {\n-                    // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n-                        dictionary.bindEntity(AsyncQuery.class);\n-                        dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n-                        Info info = new Info().title(\"Async Service\");\n-\n-                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n-                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n-                        String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-                        Swagger swagger = builder.build().basePath(asyncBasePath);\n-\n-                        swaggerDocs.add(new DocEndpoint.SwaggerRegistration(\"async\", swagger));\n-                    }\n+                EntityDictionary dictionary = injector.getService(EntityDictionary.class);\n+\n+                if (settings.enableSwagger()) {\n+\n+                    List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n \n                     bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<List<DocEndpoint.SwaggerRegistration>>() { });\n                 }\n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 1b671d234..e6c306f83 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -147,9 +223,7 @@ public class ElideResourceConfig extends ResourceConfig {\n                 EntityDictionary dictionary = injector.getService(EntityDictionary.class);\n \n                 if (settings.enableSwagger()) {\n-\n                     List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n-\n                     bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<List<DocEndpoint.SwaggerRegistration>>() { });\n                 }\n             }\n", "next_change": {"commit": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex e6c306f83..7e31fd83c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -109,118 +233,28 @@ public class ElideResourceConfig extends ResourceConfig {\n             throw new IllegalStateException(e);\n         }\n \n-        // Bind to injector\n-        register(new AbstractBinder() {\n-            @Override\n-            protected void configure() {\n-                ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties() == null\n-                        ? new ElideStandaloneAsyncSettings() { } : settings.getAsyncProperties();\n-                EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(classScanner,\n-                        settings.getModelPackageName(), asyncProperties.enabled(), settings.getDatabaseProperties());\n-\n-                EntityDictionary dictionary = settings.getEntityDictionary(injector, classScanner, dynamicConfiguration,\n-                        settings.getEntitiesToExclude());\n-\n-                DataStore dataStore;\n-\n-                if (settings.getAnalyticProperties().enableAggregationDataStore()) {\n-                    MetaDataStore metaDataStore = settings.getMetaDataStore(classScanner, dynamicConfiguration);\n-                    if (metaDataStore == null) {\n-                        throw new IllegalStateException(\"Aggregation Datastore is enabled but metaDataStore is null\");\n-                    }\n-\n-                    DataSource defaultDataSource = Util.getDataSource(settings.getDatabaseProperties());\n-                    ConnectionDetails defaultConnectionDetails = new ConnectionDetails(defaultDataSource,\n-                                    SQLDialectFactory.getDialect(settings.getAnalyticProperties().getDefaultDialect()));\n-\n-                    QueryEngine queryEngine = settings.getQueryEngine(metaDataStore, defaultConnectionDetails,\n-                                    dynamicConfiguration, settings.getDataSourceConfiguration(),\n-                                    settings.getAnalyticProperties().getDBPasswordExtractor());\n-                    AggregationDataStore aggregationDataStore = settings.getAggregationDataStore(queryEngine);\n-                    if (aggregationDataStore == null) {\n-                        throw new IllegalStateException(\n-                                        \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n-                    }\n-                    dataStore = settings.getDataStore(metaDataStore, aggregationDataStore, entityManagerFactory);\n-                } else {\n-                    dataStore = settings.getDataStore(entityManagerFactory);\n-                }\n \n-                ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n-                Elide elide = new Elide(elideSettings);\n-\n-                // Bind elide instance for injection into endpoint\n-                bind(elide).to(Elide.class).named(\"elide\");\n-\n-                // Bind additional elements\n-                bind(elideSettings).to(ElideSettings.class);\n-                bind(elideSettings.getDictionary()).to(EntityDictionary.class);\n-                bind(elideSettings.getDataStore()).to(DataStore.class).named(\"elideDataStore\");\n-\n-                // Binding async service\n-                if (asyncProperties.enabled()) {\n-                    AsyncAPIDAO asyncAPIDao = asyncProperties.getAPIDAO();\n-                    if (asyncAPIDao == null) {\n-                        asyncAPIDao = new DefaultAsyncAPIDAO(elide.getElideSettings(), elide.getDataStore());\n-                    }\n-                    bind(asyncAPIDao).to(AsyncAPIDAO.class);\n-\n-                    ExecutorService executor = (ExecutorService) servletContext.getAttribute(ASYNC_EXECUTOR_ATTR);\n-                    ExecutorService updater = (ExecutorService) servletContext.getAttribute(ASYNC_UPDATER_ATTR);\n-                    AsyncExecutorService asyncExecutorService =\n-                                    new AsyncExecutorService(elide, executor, updater, asyncAPIDao);\n-                    bind(asyncExecutorService).to(AsyncExecutorService.class);\n-\n-                    if (asyncProperties.enableExport()) {\n-                        ExportApiProperties exportApiProperties = new ExportApiProperties(\n-                                asyncProperties.getExportAsyncResponseExecutor(),\n-                                asyncProperties.getExportAsyncResponseTimeoutSeconds());\n-                        bind(exportApiProperties).to(ExportApiProperties.class).named(\"exportApiProperties\");\n-\n-                        ResultStorageEngine resultStorageEngine = asyncProperties.getResultStorageEngine();\n-                        if (resultStorageEngine == null) {\n-                            resultStorageEngine = new FileResultStorageEngine(asyncProperties.getStorageDestination());\n-                        }\n-                        bind(resultStorageEngine).to(ResultStorageEngine.class).named(\"resultStorageEngine\");\n-\n-                        // Initialize the Formatters.\n-                        Map<ResultType, TableExportFormatter> supportedFormatters = new HashMap<>();\n-                        supportedFormatters.put(ResultType.CSV, new CSVExportFormatter(elide,\n-                                asyncProperties.skipCSVHeader()));\n-                        supportedFormatters.put(ResultType.JSON, new JSONExportFormatter(elide));\n-\n-                        // Binding TableExport LifeCycleHook\n-                        TableExportHook tableExportHook = getTableExportHook(asyncExecutorService,\n-                                asyncProperties, supportedFormatters, resultStorageEngine);\n-                        dictionary.bindTrigger(TableExport.class, READ, PRESECURITY, tableExportHook, false);\n-                        dictionary.bindTrigger(TableExport.class, CREATE, POSTCOMMIT, tableExportHook, false);\n-                        dictionary.bindTrigger(TableExport.class, CREATE, PRESECURITY, tableExportHook, false);\n-                    }\n-\n-                    // Binding AsyncQuery LifeCycleHook\n-                    AsyncQueryHook asyncQueryHook = new AsyncQueryHook(asyncExecutorService,\n-                            asyncProperties.getMaxAsyncAfterSeconds());\n-\n-                    dictionary.bindTrigger(AsyncQuery.class, READ, PRESECURITY, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, asyncQueryHook, false);\n-\n-                    // Binding async cleanup service\n-                    if (asyncProperties.enableCleanup()) {\n-                        AsyncCleanerService.init(elide, asyncProperties.getMaxRunTimeSeconds(),\n-                                asyncProperties.getQueryCleanupDays(),\n-                                asyncProperties.getQueryCancelCheckIntervalSeconds(), asyncAPIDao);\n-                        bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n-                    }\n-                }\n-            }\n-        });\n+        // Bind to injector\n+        register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n         // Bind swaggers to given endpoint\n+        //This looks strange, but Jersey binds its Abstract binders first, and then later it binds 'external'\n+        //binders (like this HK2 version).  This allows breaking dependency injection into two phases.\n+        //Everything bound in the first phase can be accessed in the second phase.\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n             @Override\n             protected void configure() {\n-                EntityDictionary dictionary = injector.getService(EntityDictionary.class);\n+                Elide elide = injector.getService(Elide.class, \"elide\");\n+\n+                elide.doScans();\n+\n+                //Bind subscription hooks.\n+                if (settings.getSubscriptionProperties().publishingEnabled()) {\n+                    settings.getSubscriptionProperties().subscriptionScanner(elide,\n+                            settings.getSubscriptionProperties().getConnectionFactory());\n+                }\n+\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n                 if (settings.enableSwagger()) {\n                     List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7e31fd83c..7b3f93041 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -256,9 +266,10 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                 EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n-                if (settings.enableSwagger()) {\n-                    List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n-                    bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<List<DocEndpoint.SwaggerRegistration>>() { });\n+                if (settings.enableApiDocs()) {\n+                    List<ApiDocsEndpoint.ApiDocsRegistration> apiDocs = settings.buildApiDocs(dictionary);\n+                    bind(apiDocs).named(\"apiDocs\").to(new TypeLiteral<List<ApiDocsEndpoint.ApiDocsRegistration>>() {\n+                    });\n                 }\n             }\n         });\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "632b7bb81c2ee3413546997718d86afddee47e91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes - Honor Doc Version in SwaggerController and Use ISO8601Dates Serde Format in Date Formatting  (#1336)"}, {"oid": "78619ef065965a1ee0d9fcd90192d70382467c90", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Carbon 167 Async Enhancements Embeddable (#1353)"}, {"oid": "1c3963ab4743d71cc6ecadea40c900c5e6696184", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async change to use onReadPreSecurity Hook (#1409)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "6227ce4839efe4607e3604f9abf85e031b44cdc9", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async model Spec Changes  (#1584)"}, {"oid": "827440dac8d3c807860351ac81fc54905e4af007", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Restructuring the packages for Async (#1612)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "b735f9b19d4d1a13a530f06f335d02eec4cdae1b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Initial commit (#1664)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dd69d567f445b9a62dda30b9ff8093ea4455c08b", "committedDate": "2021-02-01 17:03:04 -0500", "message": "Async Refactor Cleanup (#1804)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "106bb161fbeb937b15a19dd40f4ab9d17037ed6d", "committedDate": "2021-02-10 15:23:17 -0600", "message": "Export : Standalone API Resource (#1817)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "5283569e556181cdc145f0090eac74ee6a9d3e1c", "committedDate": "2021-02-11 11:27:08 -0600", "message": "Issue#1798 Remove Singleton Pattern for Async Service Classes (#1831)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "0eb1624a401c9099c0e9f1f3fb539144cb3b97a1", "committedDate": "2021-10-01 13:23:46 -0500", "message": "Added new flag to enable subscription publishing in a separate service.  Disallow queries in subscription endpoint. (#2320)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "1bec9a04edb9917b34a9d168a3bec98f04fa8cad", "committedDate": "2021-10-26 11:08:07 -0500", "message": "Changing to Create Preflush (#2379)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "4caaae234214edf6a61bea57531de79520604d54", "committedDate": "2022-01-06 09:20:20 -0600", "message": "File Extension Support for Export Attachments (#2475)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMzM5Mw==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r391203393", "body": "Just create the DAO here.  We don't need a setting.  Users can override this function if they want something different.", "bodyText": "Just create the DAO here.  We don't need a setting.  Users can override this function if they want something different.", "bodyHTML": "<p dir=\"auto\">Just create the DAO here.  We don't need a setting.  Users can override this function if they want something different.</p>", "author": "aklish", "createdAt": "2020-03-11T19:14:40Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -76,6 +84,25 @@ protected void configure() {\n                 bind(elideSettings).to(ElideSettings.class);\n                 bind(elideSettings.getDictionary()).to(EntityDictionary.class);\n                 bind(elideSettings.getDataStore()).to(DataStore.class).named(\"elideDataStore\");\n+\n+                // Binding async service\n+                if(settings.enableAsync()) {\n+                    AsyncQueryDAO asyncQueryDao = settings.getAsyncQueryDAO();", "originalCommit": "2678b3fb6d869e159b4d038fa825457e15e3ebd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1OTA5Mg==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r391759092", "bodyText": "As discussed will leave this as is.", "author": "moizarafat", "createdAt": "2020-03-12T16:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMzM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a6e047db50214412a2199bfa5f43e486782a3874", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 0e9a89893..235fccf4d 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -88,18 +89,20 @@ public class ElideResourceConfig extends ResourceConfig {\n                 // Binding async service\n                 if(settings.enableAsync()) {\n                     AsyncQueryDAO asyncQueryDao = settings.getAsyncQueryDAO();\n-                    asyncQueryDao.setElide(elide);\n-                    asyncQueryDao.setDataStore(elide.getDataStore());\n+                    if(asyncQueryDao.getClass().equals(DefaultAsyncQueryDAO.class)) {\n+                        asyncQueryDao.setElide(elide);\n+                        asyncQueryDao.setDataStore(elide.getDataStore());\n+                    }\n                     bind(asyncQueryDao).to(AsyncQueryDAO.class);\n \n                     AsyncExecutorService asyncExecService = new AsyncExecutorService(elide, settings.getAsyncThreadSize(),\n-                            settings.getMaxRunTimeMinutes(), asyncQueryDao);\n+                            settings.getAsyncMaxRunTimeMinutes(), asyncQueryDao);\n                     bind(asyncExecService).to(AsyncExecutorService.class);\n \n                     // Binding async cleanup service\n                     if(settings.enableAsyncCleanup()) {\n-                        AsyncCleanerService asyncCleanerService = new AsyncCleanerService(elide, settings.getMaxRunTimeMinutes(),\n-                                 settings.getQueryCleanupDays(), asyncQueryDao);\n+                        AsyncCleanerService asyncCleanerService = new AsyncCleanerService(elide, settings.getAsyncMaxRunTimeMinutes(),\n+                                 settings.getAsyncQueryCleanupDays(), asyncQueryDao);\n                         bind(asyncCleanerService).to(AsyncCleanerService.class);\n                     }\n                 }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 0e9a89893..7ac53f8da 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -88,18 +89,19 @@ public class ElideResourceConfig extends ResourceConfig {\n                 // Binding async service\n                 if(settings.enableAsync()) {\n                     AsyncQueryDAO asyncQueryDao = settings.getAsyncQueryDAO();\n-                    asyncQueryDao.setElide(elide);\n-                    asyncQueryDao.setDataStore(elide.getDataStore());\n+                    if(asyncQueryDao == null) {\n+                        asyncQueryDao = new DefaultAsyncQueryDAO(elide, elide.getDataStore());\n+                    }\n                     bind(asyncQueryDao).to(AsyncQueryDAO.class);\n \n                     AsyncExecutorService asyncExecService = new AsyncExecutorService(elide, settings.getAsyncThreadSize(),\n-                            settings.getMaxRunTimeMinutes(), asyncQueryDao);\n+                            settings.getAsyncMaxRunTimeMinutes(), asyncQueryDao);\n                     bind(asyncExecService).to(AsyncExecutorService.class);\n \n                     // Binding async cleanup service\n                     if(settings.enableAsyncCleanup()) {\n-                        AsyncCleanerService asyncCleanerService = new AsyncCleanerService(elide, settings.getMaxRunTimeMinutes(),\n-                                 settings.getQueryCleanupDays(), asyncQueryDao);\n+                        AsyncCleanerService asyncCleanerService = new AsyncCleanerService(elide, settings.getAsyncMaxRunTimeMinutes(),\n+                                 settings.getAsyncQueryCleanupDays(), asyncQueryDao);\n                         bind(asyncCleanerService).to(AsyncCleanerService.class);\n                     }\n                 }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7ac53f8da..8cdc89c9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -94,15 +103,22 @@ public class ElideResourceConfig extends ResourceConfig {\n                     }\n                     bind(asyncQueryDao).to(AsyncQueryDAO.class);\n \n-                    AsyncExecutorService asyncExecService = new AsyncExecutorService(elide, settings.getAsyncThreadSize(),\n+                    AsyncExecutorService.init(elide, settings.getAsyncThreadSize(),\n                             settings.getAsyncMaxRunTimeMinutes(), asyncQueryDao);\n-                    bind(asyncExecService).to(AsyncExecutorService.class);\n+                    bind(AsyncExecutorService.getInstance()).to(AsyncExecutorService.class);\n+\n+                    // Binding AsyncQuery LifeCycleHook\n+                    ExecuteQueryHook executeQueryHook = new ExecuteQueryHook(AsyncExecutorService.getInstance());\n+                    UpdatePrincipalNameHook updatePrincipalNameHook = new UpdatePrincipalNameHook();\n+\n+                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, executeQueryHook, false);\n+                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, updatePrincipalNameHook, false);\n \n                     // Binding async cleanup service\n                     if(settings.enableAsyncCleanup()) {\n-                        AsyncCleanerService asyncCleanerService = new AsyncCleanerService(elide, settings.getAsyncMaxRunTimeMinutes(),\n-                                 settings.getAsyncQueryCleanupDays(), asyncQueryDao);\n-                        bind(asyncCleanerService).to(AsyncCleanerService.class);\n+                        AsyncCleanerService.init(elide, settings.getAsyncMaxRunTimeMinutes(),\n+                                settings.getAsyncQueryCleanupDays(), asyncQueryDao);\n+                        bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n                     }\n                 }\n             }\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 8cdc89c9c..1b671d234 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -115,7 +131,7 @@ public class ElideResourceConfig extends ResourceConfig {\n                     dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, updatePrincipalNameHook, false);\n \n                     // Binding async cleanup service\n-                    if(settings.enableAsyncCleanup()) {\n+                    if (settings.enableAsyncCleanup()) {\n                         AsyncCleanerService.init(elide, settings.getAsyncMaxRunTimeMinutes(),\n                                 settings.getAsyncQueryCleanupDays(), asyncQueryDao);\n                         bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n", "next_change": {"commit": "78619ef065965a1ee0d9fcd90192d70382467c90", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 1b671d234..801adae29 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -125,9 +138,11 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                     // Binding AsyncQuery LifeCycleHook\n                     ExecuteQueryHook executeQueryHook = new ExecuteQueryHook(AsyncExecutorService.getInstance());\n+                    CompleteQueryHook completeQueryHook = new CompleteQueryHook(AsyncExecutorService.getInstance());\n                     UpdatePrincipalNameHook updatePrincipalNameHook = new UpdatePrincipalNameHook();\n \n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, executeQueryHook, false);\n+                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRECOMMIT, executeQueryHook, false);\n+                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, completeQueryHook, false);\n                     dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, updatePrincipalNameHook, false);\n \n                     // Binding async cleanup service\n", "next_change": {"commit": "1c3963ab4743d71cc6ecadea40c900c5e6696184", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 801adae29..8d4a789b0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -141,7 +141,7 @@ public class ElideResourceConfig extends ResourceConfig {\n                     CompleteQueryHook completeQueryHook = new CompleteQueryHook(AsyncExecutorService.getInstance());\n                     UpdatePrincipalNameHook updatePrincipalNameHook = new UpdatePrincipalNameHook();\n \n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRECOMMIT, executeQueryHook, false);\n+                    dictionary.bindTrigger(AsyncQuery.class, READ, PRESECURITY, executeQueryHook, false);\n                     dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, completeQueryHook, false);\n                     dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, updatePrincipalNameHook, false);\n \n", "next_change": {"commit": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 8d4a789b0..debe756b8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -147,8 +148,9 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                     // Binding async cleanup service\n                     if (settings.enableAsyncCleanup()) {\n-                        AsyncCleanerService.init(elide, settings.getAsyncMaxRunTimeMinutes(),\n-                                settings.getAsyncQueryCleanupDays(), asyncQueryDao);\n+                        AsyncCleanerService.init(elide, settings.getAsyncMaxRunTimeSeconds(),\n+                                settings.getAsyncQueryCleanupDays(),\n+                                settings.getAsyncQueryCancelCheckIntervalSeconds(), asyncQueryDao);\n                         bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n                     }\n                 }\n", "next_change": {"commit": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex debe756b8..dc00e21d7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -147,10 +152,10 @@ public class ElideResourceConfig extends ResourceConfig {\n                     dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, updatePrincipalNameHook, false);\n \n                     // Binding async cleanup service\n-                    if (settings.enableAsyncCleanup()) {\n-                        AsyncCleanerService.init(elide, settings.getAsyncMaxRunTimeSeconds(),\n-                                settings.getAsyncQueryCleanupDays(),\n-                                settings.getAsyncQueryCancelCheckIntervalSeconds(), asyncQueryDao);\n+                    if (asyncProperties.enableCleanup()) {\n+                        AsyncCleanerService.init(elide, asyncProperties.getMaxRunTimeSeconds(),\n+                                asyncProperties.getQueryCleanupDays(),\n+                                asyncProperties.getQueryCancelCheckIntervalSeconds(), asyncQueryDao);\n                         bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n                     }\n                 }\n", "next_change": {"commit": "6227ce4839efe4607e3604f9abf85e031b44cdc9", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex dc00e21d7..e26149e55 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -130,32 +135,30 @@ public class ElideResourceConfig extends ResourceConfig {\n                 // Binding async service\n                 if (asyncProperties.enabled()) {\n \n-                    AsyncQueryDAO asyncQueryDao = asyncProperties.getQueryDAO();\n-                    if (asyncQueryDao == null) {\n-                        asyncQueryDao = new DefaultAsyncQueryDAO(elide.getElideSettings(), elide.getDataStore());\n+                    AsyncAPIDAO asyncAPIDao = asyncProperties.getAPIDAO();\n+                    if (asyncAPIDao == null) {\n+                        asyncAPIDao = new DefaultAsyncAPIDAO(elide.getElideSettings(), elide.getDataStore());\n                     }\n-                    bind(asyncQueryDao).to(AsyncQueryDAO.class);\n+                    bind(asyncAPIDao).to(AsyncAPIDAO.class);\n \n                     // TODO: If null, initialize with FileResultStorageEngine\n                     ResultStorageEngine resultStorageEngine = asyncProperties.getResultStorageEngine();\n                     AsyncExecutorService.init(elide, asyncProperties.getThreadSize(),\n-                            asyncProperties.getMaxRunTimeSeconds(), asyncQueryDao, resultStorageEngine);\n+                            asyncProperties.getMaxRunTimeSeconds(), asyncAPIDao, resultStorageEngine);\n                     bind(AsyncExecutorService.getInstance()).to(AsyncExecutorService.class);\n \n                     // Binding AsyncQuery LifeCycleHook\n-                    ExecuteQueryHook executeQueryHook = new ExecuteQueryHook(AsyncExecutorService.getInstance());\n-                    CompleteQueryHook completeQueryHook = new CompleteQueryHook(AsyncExecutorService.getInstance());\n-                    UpdatePrincipalNameHook updatePrincipalNameHook = new UpdatePrincipalNameHook();\n+                    AsyncQueryHook asyncQueryHook = new AsyncQueryHook(AsyncExecutorService.getInstance());\n \n-                    dictionary.bindTrigger(AsyncQuery.class, READ, PRESECURITY, executeQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, completeQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, updatePrincipalNameHook, false);\n+                    dictionary.bindTrigger(AsyncQuery.class, READ, PRESECURITY, asyncQueryHook, false);\n+                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, asyncQueryHook, false);\n+                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, asyncQueryHook, false);\n \n                     // Binding async cleanup service\n                     if (asyncProperties.enableCleanup()) {\n                         AsyncCleanerService.init(elide, asyncProperties.getMaxRunTimeSeconds(),\n                                 asyncProperties.getQueryCleanupDays(),\n-                                asyncProperties.getQueryCancelCheckIntervalSeconds(), asyncQueryDao);\n+                                asyncProperties.getQueryCancelCheckIntervalSeconds(), asyncAPIDao);\n                         bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n                     }\n                 }\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex e26149e55..5fa759378 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -71,99 +214,32 @@ public class ElideResourceConfig extends ResourceConfig {\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n-\n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n-        Optional<ElideDynamicEntityCompiler> optionalCompiler =\n-                        settings.getDynamicCompiler(settings.getDBPasswordExtractor());\n+        ClassScanner classScanner = settings.getClassScanner();\n \n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n                 ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties();\n-                bind(Util.combineModelEntities(optionalCompiler, settings.getModelPackageName(),\n+                bind(Util.combineModelEntities(\n+                        classScanner,\n+                        settings.getModelPackageName(),\n                         asyncProperties.enabled())).to(Set.class).named(\"elideAllModels\");\n             }\n         });\n \n-        // Bind to injector\n-        register(new AbstractBinder() {\n-            @Override\n-            protected void configure() {\n-                ElideStandaloneAsyncSettings asyncProperties = settings.getAsyncProperties();\n-                EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(settings.getModelPackageName(),\n-                        asyncProperties.enabled(), optionalCompiler, settings.getDatabaseProperties());\n-                DataSource defaultDataSource = Util.getDataSource(settings.getDatabaseProperties());\n-                ConnectionDetails defaultConnectionDetails =\n-                                new ConnectionDetails(defaultDataSource, settings.getDefaultDialect());\n-\n-                EntityDictionary dictionary = settings.getEntityDictionary(injector, optionalCompiler);\n-\n-                DataStore dataStore;\n-\n-                if (settings.enableAggregationDataStore()) {\n-                    MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n-                    if (metaDataStore == null) {\n-                        throw new IllegalStateException(\"Aggregation Datastore is enabled but metaDataStore is null\");\n-                    }\n-                    QueryEngine queryEngine =\n-                                    settings.getQueryEngine(metaDataStore, defaultConnectionDetails, optionalCompiler);\n-                    AggregationDataStore aggregationDataStore =\n-                                    settings.getAggregationDataStore(queryEngine, optionalCompiler);\n-                    if (aggregationDataStore == null) {\n-                        throw new IllegalStateException(\n-                                        \"Aggregation Datastore is enabled but aggregationDataStore is null\");\n-                    }\n-                    dataStore = settings.getDataStore(metaDataStore, aggregationDataStore, entityManagerFactory);\n-                } else {\n-                    dataStore = settings.getDataStore(entityManagerFactory);\n-                }\n-\n-                ElideSettings elideSettings = settings.getElideSettings(dictionary, dataStore);\n-\n-                Elide elide = new Elide(elideSettings);\n-\n-                // Bind elide instance for injection into endpoint\n-                bind(elide).to(Elide.class).named(\"elide\");\n-\n-                // Bind additional elements\n-                bind(elideSettings).to(ElideSettings.class);\n-                bind(elideSettings.getDictionary()).to(EntityDictionary.class);\n-                bind(elideSettings.getDataStore()).to(DataStore.class).named(\"elideDataStore\");\n-\n-                // Binding async service\n-                if (asyncProperties.enabled()) {\n-\n-                    AsyncAPIDAO asyncAPIDao = asyncProperties.getAPIDAO();\n-                    if (asyncAPIDao == null) {\n-                        asyncAPIDao = new DefaultAsyncAPIDAO(elide.getElideSettings(), elide.getDataStore());\n-                    }\n-                    bind(asyncAPIDao).to(AsyncAPIDAO.class);\n-\n-                    // TODO: If null, initialize with FileResultStorageEngine\n-                    ResultStorageEngine resultStorageEngine = asyncProperties.getResultStorageEngine();\n-                    AsyncExecutorService.init(elide, asyncProperties.getThreadSize(),\n-                            asyncProperties.getMaxRunTimeSeconds(), asyncAPIDao, resultStorageEngine);\n-                    bind(AsyncExecutorService.getInstance()).to(AsyncExecutorService.class);\n+        Optional<DynamicConfiguration> dynamicConfiguration;\n+        try {\n+            dynamicConfiguration = settings.getDynamicConfiguration(classScanner);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n \n-                    // Binding AsyncQuery LifeCycleHook\n-                    AsyncQueryHook asyncQueryHook = new AsyncQueryHook(AsyncExecutorService.getInstance());\n+        // Bind to injector\n+        register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n-                    dictionary.bindTrigger(AsyncQuery.class, READ, PRESECURITY, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, POSTCOMMIT, asyncQueryHook, false);\n-                    dictionary.bindTrigger(AsyncQuery.class, CREATE, PRESECURITY, asyncQueryHook, false);\n-\n-                    // Binding async cleanup service\n-                    if (asyncProperties.enableCleanup()) {\n-                        AsyncCleanerService.init(elide, asyncProperties.getMaxRunTimeSeconds(),\n-                                asyncProperties.getQueryCleanupDays(),\n-                                asyncProperties.getQueryCancelCheckIntervalSeconds(), asyncAPIDao);\n-                        bind(AsyncCleanerService.getInstance()).to(AsyncCleanerService.class);\n-                    }\n-                }\n-            }\n-        });\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n", "next_change": {"commit": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 5fa759378..7e31fd83c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -237,15 +233,28 @@ public class ElideResourceConfig extends ResourceConfig {\n             throw new IllegalStateException(e);\n         }\n \n+\n         // Bind to injector\n         register(new ElideBinder(classScanner, dynamicConfiguration, servletContext));\n \n-\n         // Bind swaggers to given endpoint\n+        //This looks strange, but Jersey binds its Abstract binders first, and then later it binds 'external'\n+        //binders (like this HK2 version).  This allows breaking dependency injection into two phases.\n+        //Everything bound in the first phase can be accessed in the second phase.\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n             @Override\n             protected void configure() {\n-                EntityDictionary dictionary = injector.getService(EntityDictionary.class);\n+                Elide elide = injector.getService(Elide.class, \"elide\");\n+\n+                elide.doScans();\n+\n+                //Bind subscription hooks.\n+                if (settings.getSubscriptionProperties().publishingEnabled()) {\n+                    settings.getSubscriptionProperties().subscriptionScanner(elide,\n+                            settings.getSubscriptionProperties().getConnectionFactory());\n+                }\n+\n+                EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n                 if (settings.enableSwagger()) {\n                     List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\nindex 7e31fd83c..7b3f93041 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java\n", "chunk": "@@ -256,9 +266,10 @@ public class ElideResourceConfig extends ResourceConfig {\n \n                 EntityDictionary dictionary = elide.getElideSettings().getDictionary();\n \n-                if (settings.enableSwagger()) {\n-                    List<DocEndpoint.SwaggerRegistration> swaggerDocs = settings.buildSwagger(dictionary);\n-                    bind(swaggerDocs).named(\"swagger\").to(new TypeLiteral<List<DocEndpoint.SwaggerRegistration>>() { });\n+                if (settings.enableApiDocs()) {\n+                    List<ApiDocsEndpoint.ApiDocsRegistration> apiDocs = settings.buildApiDocs(dictionary);\n+                    bind(apiDocs).named(\"apiDocs\").to(new TypeLiteral<List<ApiDocsEndpoint.ApiDocsRegistration>>() {\n+                    });\n                 }\n             }\n         });\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "632b7bb81c2ee3413546997718d86afddee47e91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes - Honor Doc Version in SwaggerController and Use ISO8601Dates Serde Format in Date Formatting  (#1336)"}, {"oid": "78619ef065965a1ee0d9fcd90192d70382467c90", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Carbon 167 Async Enhancements Embeddable (#1353)"}, {"oid": "1c3963ab4743d71cc6ecadea40c900c5e6696184", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async change to use onReadPreSecurity Hook (#1409)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "6227ce4839efe4607e3604f9abf85e031b44cdc9", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async model Spec Changes  (#1584)"}, {"oid": "827440dac8d3c807860351ac81fc54905e4af007", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Restructuring the packages for Async (#1612)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "b735f9b19d4d1a13a530f06f335d02eec4cdae1b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Initial commit (#1664)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dd69d567f445b9a62dda30b9ff8093ea4455c08b", "committedDate": "2021-02-01 17:03:04 -0500", "message": "Async Refactor Cleanup (#1804)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "106bb161fbeb937b15a19dd40f4ab9d17037ed6d", "committedDate": "2021-02-10 15:23:17 -0600", "message": "Export : Standalone API Resource (#1817)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "5283569e556181cdc145f0090eac74ee6a9d3e1c", "committedDate": "2021-02-11 11:27:08 -0600", "message": "Issue#1798 Remove Singleton Pattern for Async Service Classes (#1831)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "0eb1624a401c9099c0e9f1f3fb539144cb3b97a1", "committedDate": "2021-10-01 13:23:46 -0500", "message": "Added new flag to enable subscription publishing in a separate service.  Disallow queries in subscription endpoint. (#2320)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "1bec9a04edb9917b34a9d168a3bec98f04fa8cad", "committedDate": "2021-10-26 11:08:07 -0500", "message": "Changing to Create Preflush (#2379)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "4caaae234214edf6a61bea57531de79520604d54", "committedDate": "2022-01-06 09:20:20 -0600", "message": "File Extension Support for Export Attachments (#2475)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"oid": "c3826d246d1889353407b70ee8f4014ae17feced", "url": "https://github.com/yahoo/elide/commit/c3826d246d1889353407b70ee8f4014ae17feced", "message": "Review comments\n\nCo-authored-by: Abhino <abhino@gmail.com>", "committedDate": "2020-03-12T16:58:40Z", "type": "commit"}, {"oid": "a6e047db50214412a2199bfa5f43e486782a3874", "url": "https://github.com/yahoo/elide/commit/a6e047db50214412a2199bfa5f43e486782a3874", "message": "Review comments\n\nCo-authored-by: abhino <abhino@gmail.com>", "committedDate": "2020-03-13T14:37:29Z", "type": "commit"}, {"oid": "9a34233254173fc009f4c3e7661a4e313e7277ef", "url": "https://github.com/yahoo/elide/commit/9a34233254173fc009f4c3e7661a4e313e7277ef", "message": "Changing call to DefaultAsyncQueryDAO", "committedDate": "2020-03-15T22:14:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDk3Ng==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r397470976", "body": "Instead of making this the async swagger path - how about a config setting for swagger in general (including non-asyc models)?", "bodyText": "Instead of making this the async swagger path - how about a config setting for swagger in general (including non-asyc models)?", "bodyHTML": "<p dir=\"auto\">Instead of making this the async swagger path - how about a config setting for swagger in general (including non-asyc models)?</p>", "author": "aklish", "createdAt": "2020-03-24T21:26:06Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -211,17 +211,26 @@ default Integer getMaxRunTimeMinutes() {\n      *\n      * @return Default: 7\n      */\n-    default Integer getQueryCleanupDays() {\n+    default Integer getAsyncQueryCleanupDays() {\n         return 7;\n     }\n \n+    /**\n+     *  Root path specification for the Async Models Swagger endpoint.\n+     *\n+     * @return Default: /api/v1\n+     */\n+    default String getAsyncSwaggerPath() {", "originalCommit": "9a34233254173fc009f4c3e7661a4e313e7277ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTY4MA==", "url": "https://github.com/yahoo/elide/pull/1205#discussion_r397495680", "bodyText": "This should just come from getJsonApiPathSpec()", "author": "aklish", "createdAt": "2020-03-24T22:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5cda3ad7c9081650fd5d64fb85fd15df5a84f703", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 623f1d82c..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -215,15 +215,6 @@ public interface ElideStandaloneSettings {\n         return 7;\n     }\n \n-    /**\n-     *  Root path specification for the Async Models Swagger endpoint.\n-     *\n-     * @return Default: /api/v1\n-     */\n-    default String getAsyncSwaggerPath() {\n-        return \"/api/v1\";\n-    }\n-\n     /**\n      * Implementation of AsyncQueryDAO to use.\n      *\n", "next_change": null}]}, "revised_code_in_main": {"commit": "70038d5a065c54556906c736ca9125784be81e76", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 623f1d82c..a34eb18c7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -215,15 +215,6 @@ public interface ElideStandaloneSettings {\n         return 7;\n     }\n \n-    /**\n-     *  Root path specification for the Async Models Swagger endpoint.\n-     *\n-     * @return Default: /api/v1\n-     */\n-    default String getAsyncSwaggerPath() {\n-        return \"/api/v1\";\n-    }\n-\n     /**\n      * Implementation of AsyncQueryDAO to use.\n      *\n", "next_change": {"commit": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex a34eb18c7..b6da96d9c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -169,66 +178,12 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n-    \n-    /**\n-     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsync() {\n-        return false;\n-    }\n-\n-    /**\n-     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n-     *\n-     * @return Default: False\n-     */\n-    default boolean enableAsyncCleanup() {\n-        return false;\n-    }\n-\n-    /**\n-     * Thread Size for Async queries to run in parallel.\n-     *\n-     * @return Default: 5\n-     */\n-    default Integer getAsyncThreadSize() {\n-        return 5;\n-    }\n-\n-    /**\n-     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n-     *\n-     * @return Default: 60\n-     */\n-    default Integer getAsyncMaxRunTimeMinutes() {\n-        return 60;\n-    }\n-\n-    /**\n-     * Number of days history to retain for async query executions and results.\n-     *\n-     * @return Default: 7\n-     */\n-    default Integer getAsyncQueryCleanupDays() {\n-        return 7;\n-    }\n-\n-    /**\n-     * Implementation of AsyncQueryDAO to use.\n-     *\n-     * @return AsyncQueryDAO type object.\n-     */\n-    default AsyncQueryDAO getAsyncQueryDAO() {\n-        return null;\n-    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableISO8601Dates() {\n+    default boolean enableIS06081Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b6da96d9c..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -178,12 +165,66 @@ public interface ElideStandaloneSettings {\n     default boolean enableGraphQL() {\n         return true;\n     }\n+    \n+    /**\n+     * Enable the support for Async querying feature. If false, the async feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsync() {\n+        return false;\n+    }\n+\n+    /**\n+     * Enable the support for cleaning up Async query history. If false, the async cleanup feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableAsyncCleanup() {\n+        return false;\n+    }\n+\n+    /**\n+     * Thread Size for Async queries to run in parallel.\n+     *\n+     * @return Default: 5\n+     */\n+    default Integer getAsyncThreadSize() {\n+        return 5;\n+    }\n+\n+    /**\n+     * Maximum Query Run time for Async Queries to mark as TIMEDOUT.\n+     *\n+     * @return Default: 60\n+     */\n+    default Integer getAsyncMaxRunTimeMinutes() {\n+        return 60;\n+    }\n+\n+    /**\n+     * Number of days history to retain for async query executions and results.\n+     *\n+     * @return Default: 7\n+     */\n+    default Integer getAsyncQueryCleanupDays() {\n+        return 7;\n+    }\n+\n+    /**\n+     * Implementation of AsyncQueryDAO to use.\n+     *\n+     * @return AsyncQueryDAO type object.\n+     */\n+    default AsyncQueryDAO getAsyncQueryDAO() {\n+        return null;\n+    }\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n      * @return\n      */\n-    default boolean enableIS06081Dates() {\n+    default boolean enableISO8601Dates() {\n         return true;\n     }\n \n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -222,7 +238,7 @@ public interface ElideStandaloneSettings {\n \n     /**\n      * Whether Dates should be ISO8601 strings (true) or epochs (false).\n-     * @return\n+     * @return whether ISO8601Dates are enabled.\n      */\n     default boolean enableISO8601Dates() {\n         return true;\n", "next_change": null}, {"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -231,18 +247,57 @@ public interface ElideStandaloneSettings {\n     /**\n      * Whether or not Codahale metrics, healthchecks, thread, ping, and admin servlet\n      * should be enabled.\n-     * @return\n+     * @return  whether ServiceMonitoring is enabled.\n      */\n     default boolean enableServiceMonitoring() {\n         return true;\n     }\n \n     /**\n-     * Enable swagger documentation by returning non empty list.\n+     * Enable swagger documentation.\n+     * @return whether Swagger is enabled;\n+     */\n+    default boolean enableSwagger() {\n+        return false;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API version.\n+     * The models with the same version are included.\n+     * @return swagger version;\n+     */\n+    default String getSwaggerVersion() {\n+        return NO_VERSION;\n+    }\n+\n+    /**\n+     * Swagger documentation requires an API name.\n+     * @return swagger service name;\n+     */\n+    default String getSwaggerName() {\n+        return \"Elide Service\";\n+    }\n+\n+    /**\n+     * Creates a singular swagger document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n      * @return list of swagger registration objects.\n      */\n-    default List<DocEndpoint.SwaggerRegistration> enableSwagger() {\n-        return new ArrayList<>();\n+    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n+        Info info = new Info()\n+                .title(getSwaggerName())\n+                .version(getSwaggerVersion());\n+\n+        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n+\n+        Swagger swagger = builder.build().basePath(moduleBasePath);\n+\n+        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n+        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+\n+        return docs;\n     }\n \n     /**\n", "next_change": {"commit": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..36bc00e65 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -254,48 +315,56 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Enable swagger documentation.\n-     * @return whether Swagger is enabled;\n+     * Enable OpenAPI documentation.\n+     * @return whether OpenAPI is enabled;\n      */\n-    default boolean enableSwagger() {\n+    default boolean enableApiDocs() {\n         return false;\n     }\n \n     /**\n-     * Swagger documentation requires an API version.\n-     * The models with the same version are included.\n-     * @return swagger version;\n+     * The OpenAPI Specification Version to generate.\n+     * @return the OpenAPI Specification Version to generate\n      */\n-    default String getSwaggerVersion() {\n-        return NO_VERSION;\n+    default OpenApiVersion getOpenApiVersion() {\n+        return OpenApiVersion.OPENAPI_3_0;\n     }\n \n     /**\n-     * Swagger documentation requires an API name.\n-     * @return swagger service name;\n+     * The service base URL that clients use in queries.  Elide will reference this name\n+     * in any callback URLs returned by the service.  If not set, Elide uses the API request to generate the base URL.\n+     * @return The base URL of the service.\n      */\n-    default String getSwaggerName() {\n-        return \"Elide Service\";\n+    default String getBaseUrl() {\n+        return \"\";\n     }\n \n     /**\n-     * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models. .\n-     * @return list of swagger registration objects.\n+     * OpenAPI documentation requires an API name.\n+     * @return open api service name;\n      */\n-    default List<DocEndpoint.SwaggerRegistration> buildSwagger(EntityDictionary dictionary) {\n-        Info info = new Info()\n-                .title(getSwaggerName())\n-                .version(getSwaggerVersion());\n-\n-        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-\n-        String moduleBasePath = getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-        Swagger swagger = builder.build().basePath(moduleBasePath);\n+    default String getApiTitle() {\n+        return \"Elide Service\";\n+    }\n \n-        List<DocEndpoint.SwaggerRegistration> docs = new ArrayList<>();\n-        docs.add(new DocEndpoint.SwaggerRegistration(\"test\", swagger));\n+    /**\n+     * Creates a singular OpenAPI document for JSON-API.\n+     * @param dictionary Contains the static metadata about Elide models. .\n+     * @return list of OpenAPI registration objects.\n+     */\n+    default List<ApiDocsEndpoint.ApiDocsRegistration> buildApiDocs(EntityDictionary dictionary) {\n+        List<ApiDocsEndpoint.ApiDocsRegistration> docs = new ArrayList<>();\n+\n+        dictionary.getApiVersions().stream().forEach(apiVersion -> {\n+            Info info = new Info()\n+                    .title(getApiTitle())\n+                    .version(apiVersion);\n+            OpenApiBuilder builder = new OpenApiBuilder(dictionary).apiVersion(apiVersion);\n+            String moduleBasePath = getJsonApiPathSpec().replace(\"/*\", \"\");\n+            OpenAPI openApi = builder.build().info(info).addServersItem(new Server().url(moduleBasePath));\n+            docs.add(new ApiDocsEndpoint.ApiDocsRegistration(\"test\", () -> openApi, getOpenApiVersion().getValue(),\n+                    apiVersion));\n+        });\n \n         return docs;\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "70038d5a065c54556906c736ca9125784be81e76", "message": "Merge commit", "committedDate": null}, {"oid": "9387412f7a4fa31f3f4818933be0537ee0baa6bd", "committedDate": "2020-05-18 13:58:16 -0500", "message": "Add Eclipse import order (#1327)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "fd6f86b4529245b6291cdc9f50f04972b9abae54", "committedDate": "2023-04-30 15:20:02 -0500", "message": "Fix setting `DataFetcherExceptionHandler` (#2964)"}, {"oid": "a67858ed4997700aaaf37cd83c13a7690b3d388f", "committedDate": "2023-04-30 20:02:40 -0500", "message": "Add Spring PlatformTransactionManager aware transaction support (#2953)"}, {"oid": "addfbff81e285c6f4f106bb6e3dd93fa7e05e9fa", "committedDate": "2023-05-07 20:03:16 -0500", "message": "Upgrade to OpenAPI 3 (#2977)"}, {"oid": "30816cbe1496c349c05a778b105efa87ec51a7c2", "committedDate": "2023-05-29 20:07:44 -0500", "message": "Refactor configuration (#2997)"}]}, {"oid": "5cda3ad7c9081650fd5d64fb85fd15df5a84f703", "url": "https://github.com/yahoo/elide/commit/5cda3ad7c9081650fd5d64fb85fd15df5a84f703", "message": "Review comments\n\nCo-authored-by: Abhino <Abhino@gmail.com>", "committedDate": "2020-03-25T22:20:37Z", "type": "commit"}]}