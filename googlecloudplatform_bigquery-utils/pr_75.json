{"pr_number": 75, "pr_title": "Query Verification: Setup project and input handling", "pr_author": "krishsuchdev", "pr_createdAt": "2020-06-26T21:47:41Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75", "timeline": [{"oid": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d9bfc84dc46b47cd77c29c336d240ad694d2c784", "message": "Setup project and input handling", "committedDate": "2020-06-26T20:33:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NjQxMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446446410", "body": "It may be interesting to consider Autovalue: https://www.baeldung.com/introduction-to-autovalue", "bodyText": "It may be interesting to consider Autovalue: https://www.baeldung.com/introduction-to-autovalue", "bodyHTML": "<p dir=\"auto\">It may be interesting to consider Autovalue: <a href=\"https://www.baeldung.com/introduction-to-autovalue\" rel=\"nofollow\">https://www.baeldung.com/introduction-to-autovalue</a></p>", "author": "yzhvictor", "createdAt": "2020-06-26T23:07:46Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.google.bigquery;\n+\n+public class BigQueryInstance {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java b/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java\ndeleted file mode 100644\nindex 9fb80ed..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-package com.google.bigquery;\n-\n-public class BigQueryInstance {\n-\n-    private String query;\n-    private String schema;\n-\n-    public BigQueryInstance(String query) {\n-        this.query = query;\n-    }\n-\n-    public BigQueryInstance(String query, String schema) {\n-        this.query = query;\n-        this.schema = schema;\n-    }\n-\n-    public boolean dryRun() {\n-        // TODO Send query to BQ as dry run\n-        return false;\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NjU5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446446591", "body": "Why this is \"instance\"?", "bodyText": "Why this is \"instance\"?", "bodyHTML": "<p dir=\"auto\">Why this is \"instance\"?</p>", "author": "yzhvictor", "createdAt": "2020-06-26T23:08:23Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.google.bigquery;\n+\n+public class BigQueryInstance {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java b/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java\ndeleted file mode 100644\nindex 9fb80ed..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-package com.google.bigquery;\n-\n-public class BigQueryInstance {\n-\n-    private String query;\n-    private String schema;\n-\n-    public BigQueryInstance(String query) {\n-        this.query = query;\n-    }\n-\n-    public BigQueryInstance(String query, String schema) {\n-        this.query = query;\n-        this.schema = schema;\n-    }\n-\n-    public boolean dryRun() {\n-        // TODO Send query to BQ as dry run\n-        return false;\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NzA0MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447041", "body": "I don't think you need this.", "bodyText": "I don't think you need this.", "bodyHTML": "<p dir=\"auto\">I don't think you need this.</p>", "author": "yzhvictor", "createdAt": "2020-06-26T23:10:17Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import org.apache.commons.cli.*;\n+\n+public class Main {\n+\n+    /**\n+     * usage: query_verification -q <PATH> <PATH> [-d <PATH>] [-s <PATH> <PATH>]\n+     *        [-h]\n+     *  -q,--query <PATH> <PATH>    First argument is the path to the migrated\n+     *                              query file. Second argument is the path to\n+     *                              the original query file and only required\n+     *                              when data is provided.\n+     *  -d,--data <PATH>            Path for table data in CSV format.\n+     *  -s,--schema <PATH> <PATH>   First argument is the path to the migrated\n+     *                              schema path. Second argument is the path to\n+     *                              the original schema query and is optional.\n+     *                              Referenced files should be in a JSON format.\n+     *  -h,--help                   Print this help screen.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        Main main = new Main();\n+        main.run(args);\n+\n+        System.exit(0);", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/Main.java b/tools/query_verification/src/main/java/com/google/bigquery/Main.java\nindex 50621f5..7fa9627 100644\n--- a/tools/query_verification/src/main/java/com/google/bigquery/Main.java\n+++ b/tools/query_verification/src/main/java/com/google/bigquery/Main.java\n", "chunk": "@@ -26,67 +27,74 @@ public class Main {\n      * @param args Command line arguments\n      */\n     public static void main(String[] args) {\n-        Main main = new Main();\n-        main.run(args);\n-\n-        System.exit(0);\n-    }\n-\n-    public void run(String[] args) {\n         CommandLine command = buildCommand(args);\n         if (command == null) {\n             return;\n         }\n \n-        QueryVerification queryVerification = new QueryVerification();\n+        QueryVerificationQuery migratedQuery = null;\n+        QueryVerificationSchema migratedSchema = null;\n \n-        // Query\n+        QueryVerificationQuery originalQuery = null;\n+        QueryVerificationSchema originalSchema = null;\n+\n+        // Query input handling\n         if (command.hasOption(\"q\")) {\n             String[] queryOptionValues = command.getOptionValues(\"q\");\n \n             if (queryOptionValues.length >= 1) {\n                 String migratedQueryPath = queryOptionValues[0];\n-                QVQuery migratedQuery = new QVQuery(getContentsOfFile(migratedQueryPath), migratedQueryPath);\n-                queryVerification.setMigratedQuery(migratedQuery);\n+                String migratedQueryContents = getContentsOfFile(migratedQueryPath);\n+                if (migratedQueryContents != null) {\n+                    migratedQuery = QueryVerificationQuery.create(migratedQueryContents, migratedQueryPath);\n+                }\n             }\n \n             if (queryOptionValues.length >= 2) {\n                 String originalQueryPath = queryOptionValues[1];\n-                QVQuery originalQuery = new QVQuery(getContentsOfFile(originalQueryPath), originalQueryPath);\n-                queryVerification.setMigratedQuery(originalQuery);\n+                String originalQueryContents = getContentsOfFile(originalQueryPath);\n+                if (originalQueryContents != null) {\n+                    originalQuery = QueryVerificationQuery.create(originalQueryContents, originalQueryPath);\n+                }\n             }\n         }\n \n-        // Schema\n+        // Schema input handling\n         if (command.hasOption(\"s\")) {\n             String[] schemaOptionValues = command.getOptionValues(\"s\");\n \n             if (schemaOptionValues.length >= 1) {\n                 String migratedSchemaPath = schemaOptionValues[0];\n-                QVSchema migratedSchema = new QVSchema(getContentsOfFile(migratedSchemaPath), migratedSchemaPath);\n-                queryVerification.setMigratedSchema(migratedSchema);\n+                String migratedSchemaContents = getContentsOfFile(migratedSchemaPath);\n+                if (migratedSchemaContents != null) {\n+                    migratedSchema = QueryVerificationSchema.create(migratedSchemaContents, migratedSchemaPath);\n+                }\n             }\n \n             if (schemaOptionValues.length >= 2) {\n                 String originalSchemaPath = schemaOptionValues[1];\n-                QVSchema originalSchema = new QVSchema(getContentsOfFile(originalSchemaPath), originalSchemaPath);\n-                queryVerification.setOriginalSchema(originalSchema);\n+                String originalSchemaContents = getContentsOfFile(originalSchemaPath);\n+                if (originalSchemaContents != null) {\n+                    originalSchema = QueryVerificationSchema.create(originalSchemaContents, originalSchemaPath);\n+                }\n             }\n         }\n \n-        // Data\n+        // Data input handling\n         if (command.hasOption(\"d\")) {\n             // TODO Data input for data aware verification\n         }\n+        QueryVerifier queryVerifier = new QueryVerifier(migratedQuery, migratedSchema, originalQuery, originalSchema);\n+        queryVerifier.verify();\n \n-        queryVerification.verify();\n+        System.exit(0);\n     }\n \n     /**\n      * @param args Command Line Arguments\n      * @return Command parsed from arguments\n      */\n-    public CommandLine buildCommand(String[] args) {\n+    public static CommandLine buildCommand(String[] args) {\n         CommandLineParser parser = new DefaultParser();\n         Options options = buildOptions();\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NzI0MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447241", "body": "Just put the full name, QV may be confusing for people, similar for other places. This can also consider Autovalue.", "bodyText": "Just put the full name, QV may be confusing for people, similar for other places. This can also consider Autovalue.", "bodyHTML": "<p dir=\"auto\">Just put the full name, QV may be confusing for people, similar for other places. This can also consider Autovalue.</p>", "author": "yzhvictor", "createdAt": "2020-06-26T23:11:14Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.google.bigquery;\n+\n+public class QVQuery {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java b/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java\ndeleted file mode 100644\nindex 89177aa..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QVQuery {\n-\n-    private String query;\n-    private String path;\n-\n-    public QVQuery(String query, String path) {\n-        this.query = query;\n-        this.path = path;\n-    }\n-\n-    public String getQuery() {\n-        return query;\n-    }\n-\n-    public String getPath() {\n-        return path;\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0Nzg4Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447886", "body": "Should them be final and only set in constructor?", "bodyText": "Should them be final and only set in constructor?", "bodyHTML": "<p dir=\"auto\">Should them be final and only set in constructor?</p>", "author": "yzhvictor", "createdAt": "2020-06-26T23:14:07Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\ndeleted file mode 100644\nindex bce6de2..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QueryVerification {\n-\n-    private QVQuery migratedQuery;\n-    private QVSchema migratedSchema;\n-\n-    private QVQuery originalQuery;\n-    private QVSchema originalSchema;\n-\n-    public QueryVerification() {\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-\n-        this.originalQuery = originalQuery;\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    public QVQuery getMigratedQuery() {\n-        return migratedQuery;\n-    }\n-\n-    public void setMigratedQuery(QVQuery migratedQuery) {\n-        this.migratedQuery = migratedQuery;\n-    }\n-\n-    public QVSchema getMigratedSchema() {\n-        return migratedSchema;\n-    }\n-\n-    public void setMigratedSchema(QVSchema migratedSchema) {\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QVQuery getOriginalQuery() {\n-        return originalQuery;\n-    }\n-\n-    public void setOriginalQuery(QVQuery originalQuery) {\n-        this.originalQuery = originalQuery;\n-    }\n-\n-    public QVSchema getOriginalSchema() {\n-        return originalSchema;\n-    }\n-\n-    public void setOriginalSchema(QVSchema originalSchema) {\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    /**\n-     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n-     */\n-    public void verify() {\n-        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n-        boolean verificationResult;\n-\n-        if (useDataAwareVerification) {\n-            verificationResult = dataAwareVerification();\n-        } else {\n-            verificationResult = dataFreeVerification();\n-        }\n-\n-        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n-    }\n-\n-    public boolean dataFreeVerification() {\n-        // TODO Implement data free verification\n-        return false;\n-    }\n-\n-    public boolean dataAwareVerification() {\n-        // TODO Implement data aware verification\n-        return false;\n-    }\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0Nzk3Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447973", "body": "Will it be better to have a single constructor and mark the input params as @Nuallable", "bodyText": "Will it be better to have a single constructor and mark the input params as @Nuallable", "bodyHTML": "<p dir=\"auto\">Will it be better to have a single constructor and mark the input params as @Nuallable</p>", "author": "yzhvictor", "createdAt": "2020-06-26T23:14:33Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\ndeleted file mode 100644\nindex bce6de2..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QueryVerification {\n-\n-    private QVQuery migratedQuery;\n-    private QVSchema migratedSchema;\n-\n-    private QVQuery originalQuery;\n-    private QVSchema originalSchema;\n-\n-    public QueryVerification() {\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-\n-        this.originalQuery = originalQuery;\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    public QVQuery getMigratedQuery() {\n-        return migratedQuery;\n-    }\n-\n-    public void setMigratedQuery(QVQuery migratedQuery) {\n-        this.migratedQuery = migratedQuery;\n-    }\n-\n-    public QVSchema getMigratedSchema() {\n-        return migratedSchema;\n-    }\n-\n-    public void setMigratedSchema(QVSchema migratedSchema) {\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QVQuery getOriginalQuery() {\n-        return originalQuery;\n-    }\n-\n-    public void setOriginalQuery(QVQuery originalQuery) {\n-        this.originalQuery = originalQuery;\n-    }\n-\n-    public QVSchema getOriginalSchema() {\n-        return originalSchema;\n-    }\n-\n-    public void setOriginalSchema(QVSchema originalSchema) {\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    /**\n-     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n-     */\n-    public void verify() {\n-        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n-        boolean verificationResult;\n-\n-        if (useDataAwareVerification) {\n-            verificationResult = dataAwareVerification();\n-        } else {\n-            verificationResult = dataFreeVerification();\n-        }\n-\n-        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n-    }\n-\n-    public boolean dataFreeVerification() {\n-        // TODO Implement data free verification\n-        return false;\n-    }\n-\n-    public boolean dataAwareVerification() {\n-        // TODO Implement data aware verification\n-        return false;\n-    }\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODE0Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448142", "body": "I can image these methods can be big, consider moving to their own class?", "bodyText": "I can image these methods can be big, consider moving to their own class?", "bodyHTML": "<p dir=\"auto\">I can image these methods can be big, consider moving to their own class?</p>", "author": "yzhvictor", "createdAt": "2020-06-26T23:15:26Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+\n+        this.originalQuery = originalQuery;\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    public QVQuery getMigratedQuery() {\n+        return migratedQuery;\n+    }\n+\n+    public void setMigratedQuery(QVQuery migratedQuery) {\n+        this.migratedQuery = migratedQuery;\n+    }\n+\n+    public QVSchema getMigratedSchema() {\n+        return migratedSchema;\n+    }\n+\n+    public void setMigratedSchema(QVSchema migratedSchema) {\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QVQuery getOriginalQuery() {\n+        return originalQuery;\n+    }\n+\n+    public void setOriginalQuery(QVQuery originalQuery) {\n+        this.originalQuery = originalQuery;\n+    }\n+\n+    public QVSchema getOriginalSchema() {\n+        return originalSchema;\n+    }\n+\n+    public void setOriginalSchema(QVSchema originalSchema) {\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    /**\n+     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n+     */\n+    public void verify() {\n+        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n+        boolean verificationResult;\n+\n+        if (useDataAwareVerification) {\n+            verificationResult = dataAwareVerification();\n+        } else {\n+            verificationResult = dataFreeVerification();\n+        }\n+\n+        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n+    }\n+\n+    public boolean dataFreeVerification() {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\ndeleted file mode 100644\nindex bce6de2..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QueryVerification {\n-\n-    private QVQuery migratedQuery;\n-    private QVSchema migratedSchema;\n-\n-    private QVQuery originalQuery;\n-    private QVSchema originalSchema;\n-\n-    public QueryVerification() {\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-\n-        this.originalQuery = originalQuery;\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    public QVQuery getMigratedQuery() {\n-        return migratedQuery;\n-    }\n-\n-    public void setMigratedQuery(QVQuery migratedQuery) {\n-        this.migratedQuery = migratedQuery;\n-    }\n-\n-    public QVSchema getMigratedSchema() {\n-        return migratedSchema;\n-    }\n-\n-    public void setMigratedSchema(QVSchema migratedSchema) {\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QVQuery getOriginalQuery() {\n-        return originalQuery;\n-    }\n-\n-    public void setOriginalQuery(QVQuery originalQuery) {\n-        this.originalQuery = originalQuery;\n-    }\n-\n-    public QVSchema getOriginalSchema() {\n-        return originalSchema;\n-    }\n-\n-    public void setOriginalSchema(QVSchema originalSchema) {\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    /**\n-     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n-     */\n-    public void verify() {\n-        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n-        boolean verificationResult;\n-\n-        if (useDataAwareVerification) {\n-            verificationResult = dataAwareVerification();\n-        } else {\n-            verificationResult = dataFreeVerification();\n-        }\n-\n-        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n-    }\n-\n-    public boolean dataFreeVerification() {\n-        // TODO Implement data free verification\n-        return false;\n-    }\n-\n-    public boolean dataAwareVerification() {\n-        // TODO Implement data aware verification\n-        return false;\n-    }\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0Nzg3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447878", "body": "Please add some JavaDoc describing the class and its functionality", "bodyText": "Please add some JavaDoc describing the class and its functionality", "bodyHTML": "<p dir=\"auto\">Please add some JavaDoc describing the class and its functionality</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:14:02Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.google.bigquery;\n+\n+public class BigQueryInstance {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java b/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java\ndeleted file mode 100644\nindex 9fb80ed..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java\n+++ /dev/null\n", "chunk": "@@ -1,22 +0,0 @@\n-package com.google.bigquery;\n-\n-public class BigQueryInstance {\n-\n-    private String query;\n-    private String schema;\n-\n-    public BigQueryInstance(String query) {\n-        this.query = query;\n-    }\n-\n-    public BigQueryInstance(String query, String schema) {\n-        this.query = query;\n-        this.schema = schema;\n-    }\n-\n-    public boolean dryRun() {\n-        // TODO Send query to BQ as dry run\n-        return false;\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODI3Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448273", "body": "Rather than give these a QV prefix can we change this to be a custom package called verification or query.verification?", "bodyText": "Rather than give these a QV prefix can we change this to be a custom package called verification or query.verification?", "bodyHTML": "<p dir=\"auto\">Rather than give these a QV prefix can we change this to be a custom package called verification or query.verification?</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:16:00Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.google.bigquery;\n+\n+public class QVQuery {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java b/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java\ndeleted file mode 100644\nindex 89177aa..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QVQuery {\n-\n-    private String query;\n-    private String path;\n-\n-    public QVQuery(String query, String path) {\n-        this.query = query;\n-        this.path = path;\n-    }\n-\n-    public String getQuery() {\n-        return query;\n-    }\n-\n-    public String getPath() {\n-        return path;\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODM0OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448348", "body": "Please add JavaDoc", "bodyText": "Please add JavaDoc", "bodyHTML": "<p dir=\"auto\">Please add JavaDoc</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:16:16Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.google.bigquery;\n+\n+public class QVQuery {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java b/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java\ndeleted file mode 100644\nindex 89177aa..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QVQuery {\n-\n-    private String query;\n-    private String path;\n-\n-    public QVQuery(String query, String path) {\n-        this.query = query;\n-        this.path = path;\n-    }\n-\n-    public String getQuery() {\n-        return query;\n-    }\n-\n-    public String getPath() {\n-        return path;\n-    }\n-\n-}\n\\ No newline at end of file\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODM5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448391", "body": "Same comments here as QVQuery", "bodyText": "Same comments here as QVQuery", "bodyHTML": "<p dir=\"auto\">Same comments here as QVQuery</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:16:29Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QVSchema.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.google.bigquery;", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QVSchema.java b/tools/query_verification/src/main/java/com/google/bigquery/QVSchema.java\ndeleted file mode 100644\nindex 552e460..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QVSchema.java\n+++ /dev/null\n", "chunk": "@@ -1,20 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QVSchema {\n-\n-    private String schema;\n-    private String path;\n-\n-    public QVSchema(String schema, String path) {\n-        this.schema = schema;\n-        this.path = path;\n-    }\n-\n-    public String getSchema() {\n-        return schema;\n-    }\n-\n-    public String getPath() {\n-        return path;\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODc1MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448750", "body": "Please add some JavaDoc", "bodyText": "Please add some JavaDoc", "bodyHTML": "<p dir=\"auto\">Please add some JavaDoc</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:18:20Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\ndeleted file mode 100644\nindex bce6de2..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QueryVerification {\n-\n-    private QVQuery migratedQuery;\n-    private QVSchema migratedSchema;\n-\n-    private QVQuery originalQuery;\n-    private QVSchema originalSchema;\n-\n-    public QueryVerification() {\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-\n-        this.originalQuery = originalQuery;\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    public QVQuery getMigratedQuery() {\n-        return migratedQuery;\n-    }\n-\n-    public void setMigratedQuery(QVQuery migratedQuery) {\n-        this.migratedQuery = migratedQuery;\n-    }\n-\n-    public QVSchema getMigratedSchema() {\n-        return migratedSchema;\n-    }\n-\n-    public void setMigratedSchema(QVSchema migratedSchema) {\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QVQuery getOriginalQuery() {\n-        return originalQuery;\n-    }\n-\n-    public void setOriginalQuery(QVQuery originalQuery) {\n-        this.originalQuery = originalQuery;\n-    }\n-\n-    public QVSchema getOriginalSchema() {\n-        return originalSchema;\n-    }\n-\n-    public void setOriginalSchema(QVSchema originalSchema) {\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    /**\n-     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n-     */\n-    public void verify() {\n-        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n-        boolean verificationResult;\n-\n-        if (useDataAwareVerification) {\n-            verificationResult = dataAwareVerification();\n-        } else {\n-            verificationResult = dataFreeVerification();\n-        }\n-\n-        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n-    }\n-\n-    public boolean dataFreeVerification() {\n-        // TODO Implement data free verification\n-        return false;\n-    }\n-\n-    public boolean dataAwareVerification() {\n-        // TODO Implement data aware verification\n-        return false;\n-    }\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODk4Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448986", "body": "Given you're using two ternaries here I think you could just add this line into the verification methods and have them return void", "bodyText": "Given you're using two ternaries here I think you could just add this line into the verification methods and have them return void", "bodyHTML": "<p dir=\"auto\">Given you're using two ternaries here I think you could just add this line into the verification methods and have them return void</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:19:36Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+\n+        this.originalQuery = originalQuery;\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    public QVQuery getMigratedQuery() {\n+        return migratedQuery;\n+    }\n+\n+    public void setMigratedQuery(QVQuery migratedQuery) {\n+        this.migratedQuery = migratedQuery;\n+    }\n+\n+    public QVSchema getMigratedSchema() {\n+        return migratedSchema;\n+    }\n+\n+    public void setMigratedSchema(QVSchema migratedSchema) {\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QVQuery getOriginalQuery() {\n+        return originalQuery;\n+    }\n+\n+    public void setOriginalQuery(QVQuery originalQuery) {\n+        this.originalQuery = originalQuery;\n+    }\n+\n+    public QVSchema getOriginalSchema() {\n+        return originalSchema;\n+    }\n+\n+    public void setOriginalSchema(QVSchema originalSchema) {\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    /**\n+     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n+     */\n+    public void verify() {\n+        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n+        boolean verificationResult;\n+\n+        if (useDataAwareVerification) {\n+            verificationResult = dataAwareVerification();\n+        } else {\n+            verificationResult = dataFreeVerification();\n+        }\n+\n+        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\ndeleted file mode 100644\nindex bce6de2..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QueryVerification {\n-\n-    private QVQuery migratedQuery;\n-    private QVSchema migratedSchema;\n-\n-    private QVQuery originalQuery;\n-    private QVSchema originalSchema;\n-\n-    public QueryVerification() {\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-\n-        this.originalQuery = originalQuery;\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    public QVQuery getMigratedQuery() {\n-        return migratedQuery;\n-    }\n-\n-    public void setMigratedQuery(QVQuery migratedQuery) {\n-        this.migratedQuery = migratedQuery;\n-    }\n-\n-    public QVSchema getMigratedSchema() {\n-        return migratedSchema;\n-    }\n-\n-    public void setMigratedSchema(QVSchema migratedSchema) {\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QVQuery getOriginalQuery() {\n-        return originalQuery;\n-    }\n-\n-    public void setOriginalQuery(QVQuery originalQuery) {\n-        this.originalQuery = originalQuery;\n-    }\n-\n-    public QVSchema getOriginalSchema() {\n-        return originalSchema;\n-    }\n-\n-    public void setOriginalSchema(QVSchema originalSchema) {\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    /**\n-     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n-     */\n-    public void verify() {\n-        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n-        boolean verificationResult;\n-\n-        if (useDataAwareVerification) {\n-            verificationResult = dataAwareVerification();\n-        } else {\n-            verificationResult = dataFreeVerification();\n-        }\n-\n-        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n-    }\n-\n-    public boolean dataFreeVerification() {\n-        // TODO Implement data free verification\n-        return false;\n-    }\n-\n-    public boolean dataAwareVerification() {\n-        // TODO Implement data aware verification\n-        return false;\n-    }\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTAyMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446449021", "body": "This is named like a getter, please change", "bodyText": "This is named like a getter, please change", "bodyHTML": "<p dir=\"auto\">This is named like a getter, please change</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:19:49Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+\n+        this.originalQuery = originalQuery;\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    public QVQuery getMigratedQuery() {\n+        return migratedQuery;\n+    }\n+\n+    public void setMigratedQuery(QVQuery migratedQuery) {\n+        this.migratedQuery = migratedQuery;\n+    }\n+\n+    public QVSchema getMigratedSchema() {\n+        return migratedSchema;\n+    }\n+\n+    public void setMigratedSchema(QVSchema migratedSchema) {\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QVQuery getOriginalQuery() {\n+        return originalQuery;\n+    }\n+\n+    public void setOriginalQuery(QVQuery originalQuery) {\n+        this.originalQuery = originalQuery;\n+    }\n+\n+    public QVSchema getOriginalSchema() {\n+        return originalSchema;\n+    }\n+\n+    public void setOriginalSchema(QVSchema originalSchema) {\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    /**\n+     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n+     */\n+    public void verify() {\n+        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n+        boolean verificationResult;\n+\n+        if (useDataAwareVerification) {\n+            verificationResult = dataAwareVerification();\n+        } else {\n+            verificationResult = dataFreeVerification();\n+        }\n+\n+        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n+    }\n+\n+    public boolean dataFreeVerification() {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\ndeleted file mode 100644\nindex bce6de2..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QueryVerification {\n-\n-    private QVQuery migratedQuery;\n-    private QVSchema migratedSchema;\n-\n-    private QVQuery originalQuery;\n-    private QVSchema originalSchema;\n-\n-    public QueryVerification() {\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-\n-        this.originalQuery = originalQuery;\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    public QVQuery getMigratedQuery() {\n-        return migratedQuery;\n-    }\n-\n-    public void setMigratedQuery(QVQuery migratedQuery) {\n-        this.migratedQuery = migratedQuery;\n-    }\n-\n-    public QVSchema getMigratedSchema() {\n-        return migratedSchema;\n-    }\n-\n-    public void setMigratedSchema(QVSchema migratedSchema) {\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QVQuery getOriginalQuery() {\n-        return originalQuery;\n-    }\n-\n-    public void setOriginalQuery(QVQuery originalQuery) {\n-        this.originalQuery = originalQuery;\n-    }\n-\n-    public QVSchema getOriginalSchema() {\n-        return originalSchema;\n-    }\n-\n-    public void setOriginalSchema(QVSchema originalSchema) {\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    /**\n-     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n-     */\n-    public void verify() {\n-        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n-        boolean verificationResult;\n-\n-        if (useDataAwareVerification) {\n-            verificationResult = dataAwareVerification();\n-        } else {\n-            verificationResult = dataFreeVerification();\n-        }\n-\n-        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n-    }\n-\n-    public boolean dataFreeVerification() {\n-        // TODO Implement data free verification\n-        return false;\n-    }\n-\n-    public boolean dataAwareVerification() {\n-        // TODO Implement data aware verification\n-        return false;\n-    }\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTA0NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446449045", "body": "Same here", "bodyText": "Same here", "bodyHTML": "<p dir=\"auto\">Same here</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:19:55Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+\n+        this.originalQuery = originalQuery;\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    public QVQuery getMigratedQuery() {\n+        return migratedQuery;\n+    }\n+\n+    public void setMigratedQuery(QVQuery migratedQuery) {\n+        this.migratedQuery = migratedQuery;\n+    }\n+\n+    public QVSchema getMigratedSchema() {\n+        return migratedSchema;\n+    }\n+\n+    public void setMigratedSchema(QVSchema migratedSchema) {\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QVQuery getOriginalQuery() {\n+        return originalQuery;\n+    }\n+\n+    public void setOriginalQuery(QVQuery originalQuery) {\n+        this.originalQuery = originalQuery;\n+    }\n+\n+    public QVSchema getOriginalSchema() {\n+        return originalSchema;\n+    }\n+\n+    public void setOriginalSchema(QVSchema originalSchema) {\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    /**\n+     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n+     */\n+    public void verify() {\n+        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n+        boolean verificationResult;\n+\n+        if (useDataAwareVerification) {\n+            verificationResult = dataAwareVerification();\n+        } else {\n+            verificationResult = dataFreeVerification();\n+        }\n+\n+        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n+    }\n+\n+    public boolean dataFreeVerification() {\n+        // TODO Implement data free verification\n+        return false;\n+    }\n+\n+    public boolean dataAwareVerification() {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\ndeleted file mode 100644\nindex bce6de2..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QueryVerification {\n-\n-    private QVQuery migratedQuery;\n-    private QVSchema migratedSchema;\n-\n-    private QVQuery originalQuery;\n-    private QVSchema originalSchema;\n-\n-    public QueryVerification() {\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-\n-        this.originalQuery = originalQuery;\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    public QVQuery getMigratedQuery() {\n-        return migratedQuery;\n-    }\n-\n-    public void setMigratedQuery(QVQuery migratedQuery) {\n-        this.migratedQuery = migratedQuery;\n-    }\n-\n-    public QVSchema getMigratedSchema() {\n-        return migratedSchema;\n-    }\n-\n-    public void setMigratedSchema(QVSchema migratedSchema) {\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QVQuery getOriginalQuery() {\n-        return originalQuery;\n-    }\n-\n-    public void setOriginalQuery(QVQuery originalQuery) {\n-        this.originalQuery = originalQuery;\n-    }\n-\n-    public QVSchema getOriginalSchema() {\n-        return originalSchema;\n-    }\n-\n-    public void setOriginalSchema(QVSchema originalSchema) {\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    /**\n-     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n-     */\n-    public void verify() {\n-        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n-        boolean verificationResult;\n-\n-        if (useDataAwareVerification) {\n-            verificationResult = dataAwareVerification();\n-        } else {\n-            verificationResult = dataFreeVerification();\n-        }\n-\n-        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n-    }\n-\n-    public boolean dataFreeVerification() {\n-        // TODO Implement data free verification\n-        return false;\n-    }\n-\n-    public boolean dataAwareVerification() {\n-        // TODO Implement data aware verification\n-        return false;\n-    }\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDg1NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446450854", "body": "I think it might look cleaner if you restructure things so that original/migratedQuery and schema get assigned to some variables at this scope, then create the QueryVerification object using the complete constructor. Then you can remove the setters as well.", "bodyText": "I think it might look cleaner if you restructure things so that original/migratedQuery and schema get assigned to some variables at this scope, then create the QueryVerification object using the complete constructor. Then you can remove the setters as well.", "bodyHTML": "<p dir=\"auto\">I think it might look cleaner if you restructure things so that original/migratedQuery and schema get assigned to some variables at this scope, then create the QueryVerification object using the complete constructor. Then you can remove the setters as well.</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:29:11Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import org.apache.commons.cli.*;\n+\n+public class Main {\n+\n+    /**\n+     * usage: query_verification -q <PATH> <PATH> [-d <PATH>] [-s <PATH> <PATH>]\n+     *        [-h]\n+     *  -q,--query <PATH> <PATH>    First argument is the path to the migrated\n+     *                              query file. Second argument is the path to\n+     *                              the original query file and only required\n+     *                              when data is provided.\n+     *  -d,--data <PATH>            Path for table data in CSV format.\n+     *  -s,--schema <PATH> <PATH>   First argument is the path to the migrated\n+     *                              schema path. Second argument is the path to\n+     *                              the original schema query and is optional.\n+     *                              Referenced files should be in a JSON format.\n+     *  -h,--help                   Print this help screen.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        Main main = new Main();\n+        main.run(args);\n+\n+        System.exit(0);\n+    }\n+\n+    public void run(String[] args) {\n+        CommandLine command = buildCommand(args);\n+        if (command == null) {\n+            return;\n+        }\n+\n+        QueryVerification queryVerification = new QueryVerification();", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/Main.java b/tools/query_verification/src/main/java/com/google/bigquery/Main.java\nindex 50621f5..7fa9627 100644\n--- a/tools/query_verification/src/main/java/com/google/bigquery/Main.java\n+++ b/tools/query_verification/src/main/java/com/google/bigquery/Main.java\n", "chunk": "@@ -26,67 +27,74 @@ public class Main {\n      * @param args Command line arguments\n      */\n     public static void main(String[] args) {\n-        Main main = new Main();\n-        main.run(args);\n-\n-        System.exit(0);\n-    }\n-\n-    public void run(String[] args) {\n         CommandLine command = buildCommand(args);\n         if (command == null) {\n             return;\n         }\n \n-        QueryVerification queryVerification = new QueryVerification();\n+        QueryVerificationQuery migratedQuery = null;\n+        QueryVerificationSchema migratedSchema = null;\n \n-        // Query\n+        QueryVerificationQuery originalQuery = null;\n+        QueryVerificationSchema originalSchema = null;\n+\n+        // Query input handling\n         if (command.hasOption(\"q\")) {\n             String[] queryOptionValues = command.getOptionValues(\"q\");\n \n             if (queryOptionValues.length >= 1) {\n                 String migratedQueryPath = queryOptionValues[0];\n-                QVQuery migratedQuery = new QVQuery(getContentsOfFile(migratedQueryPath), migratedQueryPath);\n-                queryVerification.setMigratedQuery(migratedQuery);\n+                String migratedQueryContents = getContentsOfFile(migratedQueryPath);\n+                if (migratedQueryContents != null) {\n+                    migratedQuery = QueryVerificationQuery.create(migratedQueryContents, migratedQueryPath);\n+                }\n             }\n \n             if (queryOptionValues.length >= 2) {\n                 String originalQueryPath = queryOptionValues[1];\n-                QVQuery originalQuery = new QVQuery(getContentsOfFile(originalQueryPath), originalQueryPath);\n-                queryVerification.setMigratedQuery(originalQuery);\n+                String originalQueryContents = getContentsOfFile(originalQueryPath);\n+                if (originalQueryContents != null) {\n+                    originalQuery = QueryVerificationQuery.create(originalQueryContents, originalQueryPath);\n+                }\n             }\n         }\n \n-        // Schema\n+        // Schema input handling\n         if (command.hasOption(\"s\")) {\n             String[] schemaOptionValues = command.getOptionValues(\"s\");\n \n             if (schemaOptionValues.length >= 1) {\n                 String migratedSchemaPath = schemaOptionValues[0];\n-                QVSchema migratedSchema = new QVSchema(getContentsOfFile(migratedSchemaPath), migratedSchemaPath);\n-                queryVerification.setMigratedSchema(migratedSchema);\n+                String migratedSchemaContents = getContentsOfFile(migratedSchemaPath);\n+                if (migratedSchemaContents != null) {\n+                    migratedSchema = QueryVerificationSchema.create(migratedSchemaContents, migratedSchemaPath);\n+                }\n             }\n \n             if (schemaOptionValues.length >= 2) {\n                 String originalSchemaPath = schemaOptionValues[1];\n-                QVSchema originalSchema = new QVSchema(getContentsOfFile(originalSchemaPath), originalSchemaPath);\n-                queryVerification.setOriginalSchema(originalSchema);\n+                String originalSchemaContents = getContentsOfFile(originalSchemaPath);\n+                if (originalSchemaContents != null) {\n+                    originalSchema = QueryVerificationSchema.create(originalSchemaContents, originalSchemaPath);\n+                }\n             }\n         }\n \n-        // Data\n+        // Data input handling\n         if (command.hasOption(\"d\")) {\n             // TODO Data input for data aware verification\n         }\n+        QueryVerifier queryVerifier = new QueryVerifier(migratedQuery, migratedSchema, originalQuery, originalSchema);\n+        queryVerifier.verify();\n \n-        queryVerification.verify();\n+        System.exit(0);\n     }\n \n     /**\n      * @param args Command Line Arguments\n      * @return Command parsed from arguments\n      */\n-    public CommandLine buildCommand(String[] args) {\n+    public static CommandLine buildCommand(String[] args) {\n         CommandLineParser parser = new DefaultParser();\n         Options options = buildOptions();\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDkyNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446450926", "body": "I think we should prefer to call this QueryVerifier", "bodyText": "I think we should prefer to call this QueryVerifier", "bodyHTML": "<p dir=\"auto\">I think we should prefer to call this QueryVerifier</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:29:34Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java b/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\ndeleted file mode 100644\nindex bce6de2..0000000\n--- a/tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java\n+++ /dev/null\n", "chunk": "@@ -1,85 +0,0 @@\n-package com.google.bigquery;\n-\n-public class QueryVerification {\n-\n-    private QVQuery migratedQuery;\n-    private QVSchema migratedSchema;\n-\n-    private QVQuery originalQuery;\n-    private QVSchema originalSchema;\n-\n-    public QueryVerification() {\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n-        this.migratedQuery = migratedQuery;\n-        this.migratedSchema = migratedSchema;\n-\n-        this.originalQuery = originalQuery;\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    public QVQuery getMigratedQuery() {\n-        return migratedQuery;\n-    }\n-\n-    public void setMigratedQuery(QVQuery migratedQuery) {\n-        this.migratedQuery = migratedQuery;\n-    }\n-\n-    public QVSchema getMigratedSchema() {\n-        return migratedSchema;\n-    }\n-\n-    public void setMigratedSchema(QVSchema migratedSchema) {\n-        this.migratedSchema = migratedSchema;\n-    }\n-\n-    public QVQuery getOriginalQuery() {\n-        return originalQuery;\n-    }\n-\n-    public void setOriginalQuery(QVQuery originalQuery) {\n-        this.originalQuery = originalQuery;\n-    }\n-\n-    public QVSchema getOriginalSchema() {\n-        return originalSchema;\n-    }\n-\n-    public void setOriginalSchema(QVSchema originalSchema) {\n-        this.originalSchema = originalSchema;\n-    }\n-\n-    /**\n-     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n-     */\n-    public void verify() {\n-        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n-        boolean verificationResult;\n-\n-        if (useDataAwareVerification) {\n-            verificationResult = dataAwareVerification();\n-        } else {\n-            verificationResult = dataFreeVerification();\n-        }\n-\n-        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n-    }\n-\n-    public boolean dataFreeVerification() {\n-        // TODO Implement data free verification\n-        return false;\n-    }\n-\n-    public boolean dataAwareVerification() {\n-        // TODO Implement data aware verification\n-        return false;\n-    }\n-\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MTY3NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446451674", "body": "We can make this a static method", "bodyText": "We can make this a static method", "bodyHTML": "<p dir=\"auto\">We can make this a static method</p>", "author": "Luminarys", "createdAt": "2020-06-26T23:33:58Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import org.apache.commons.cli.*;\n+\n+public class Main {\n+\n+    /**\n+     * usage: query_verification -q <PATH> <PATH> [-d <PATH>] [-s <PATH> <PATH>]\n+     *        [-h]\n+     *  -q,--query <PATH> <PATH>    First argument is the path to the migrated\n+     *                              query file. Second argument is the path to\n+     *                              the original query file and only required\n+     *                              when data is provided.\n+     *  -d,--data <PATH>            Path for table data in CSV format.\n+     *  -s,--schema <PATH> <PATH>   First argument is the path to the migrated\n+     *                              schema path. Second argument is the path to\n+     *                              the original schema query and is optional.\n+     *                              Referenced files should be in a JSON format.\n+     *  -h,--help                   Print this help screen.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        Main main = new Main();\n+        main.run(args);\n+\n+        System.exit(0);\n+    }\n+\n+    public void run(String[] args) {\n+        CommandLine command = buildCommand(args);\n+        if (command == null) {\n+            return;\n+        }\n+\n+        QueryVerification queryVerification = new QueryVerification();\n+\n+        // Query\n+        if (command.hasOption(\"q\")) {\n+            String[] queryOptionValues = command.getOptionValues(\"q\");\n+\n+            if (queryOptionValues.length >= 1) {\n+                String migratedQueryPath = queryOptionValues[0];\n+                QVQuery migratedQuery = new QVQuery(getContentsOfFile(migratedQueryPath), migratedQueryPath);\n+                queryVerification.setMigratedQuery(migratedQuery);\n+            }\n+\n+            if (queryOptionValues.length >= 2) {\n+                String originalQueryPath = queryOptionValues[1];\n+                QVQuery originalQuery = new QVQuery(getContentsOfFile(originalQueryPath), originalQueryPath);\n+                queryVerification.setMigratedQuery(originalQuery);\n+            }\n+        }\n+\n+        // Schema\n+        if (command.hasOption(\"s\")) {\n+            String[] schemaOptionValues = command.getOptionValues(\"s\");\n+\n+            if (schemaOptionValues.length >= 1) {\n+                String migratedSchemaPath = schemaOptionValues[0];\n+                QVSchema migratedSchema = new QVSchema(getContentsOfFile(migratedSchemaPath), migratedSchemaPath);\n+                queryVerification.setMigratedSchema(migratedSchema);\n+            }\n+\n+            if (schemaOptionValues.length >= 2) {\n+                String originalSchemaPath = schemaOptionValues[1];\n+                QVSchema originalSchema = new QVSchema(getContentsOfFile(originalSchemaPath), originalSchemaPath);\n+                queryVerification.setOriginalSchema(originalSchema);\n+            }\n+        }\n+\n+        // Data\n+        if (command.hasOption(\"d\")) {\n+            // TODO Data input for data aware verification\n+        }\n+\n+        queryVerification.verify();\n+    }\n+\n+    /**\n+     * @param args Command Line Arguments\n+     * @return Command parsed from arguments\n+     */\n+    public CommandLine buildCommand(String[] args) {\n+        CommandLineParser parser = new DefaultParser();\n+        Options options = buildOptions();\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.setOptionComparator(new Comparator<Option>() {\n+            public int compare(Option o1, Option o2) {\n+                if (o1.isRequired() != o2.isRequired())\n+                    return o1.isRequired() ? -1 : 1;\n+                else if (o1.hasArg() != o2.hasArg())\n+                    return o1.hasArg() ? -1 : 1;\n+                else\n+                    return o1.getLongOpt().compareTo(o2.getLongOpt());\n+            }\n+        });\n+\n+        CommandLine command;\n+        try {\n+            command = parser.parse(options, args);\n+        } catch (ParseException e) {\n+            System.out.println(e.getMessage());\n+            formatter.printHelp(\"query_verification\", options, true);\n+            return null;\n+        }\n+\n+        // Help\n+        if (command.hasOption(\"h\")) {\n+            formatter.printHelp(\"query_verification\", options, true);\n+        }\n+\n+        return command;\n+    }\n+\n+    /**\n+     * @return CLI options\n+     */\n+    public Options buildOptions() {\n+        Options options = new Options();\n+\n+        options.addOption(Option.builder(\"q\")\n+                .required(true)\n+                .longOpt(\"query\")\n+                .numberOfArgs(Option.UNLIMITED_VALUES) // Allows for 2 arguments without both being required\n+                .valueSeparator(' ')\n+                .argName(\"PATH> <PATH\") // Appears as \"<PATH> <PATH>\"\n+                .desc(\"First argument is the path to the migrated query file. Second argument is the path to the original query file and only required when data is provided.\")\n+                .build());\n+        options.addOption(Option.builder(\"s\")\n+                .longOpt(\"schema\")\n+                .numberOfArgs(Option.UNLIMITED_VALUES) // Allows for 2 arguments without both being required\n+                .valueSeparator(' ')\n+                .argName(\"PATH> <PATH\") // Appears as \"<PATH> <PATH>\"\n+                .desc(\"First argument is the path to the migrated schema path. Second argument is the path to the original schema query and is optional. Referenced files should be in a JSON format.\")\n+                .build());\n+        options.addOption(Option.builder(\"d\")\n+                .longOpt(\"data\")\n+                .hasArg(true)\n+                .argName(\"PATH\")\n+                .desc(\"Path for table data in CSV format.\")\n+                .build());\n+        options.addOption(Option.builder(\"h\")\n+                .longOpt(\"help\")\n+                .desc(\"Print this help screen.\")\n+                .build());\n+\n+        return options;\n+    }\n+\n+    /**\n+     * Retrieves the text contents from file\n+     *\n+     * @param path The path to the file to be read\n+     * @return Text contents in file\n+     */\n+    public String getContentsOfFile(String path) {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "changed_code": [{"header": "diff --git a/tools/query_verification/src/main/java/com/google/bigquery/Main.java b/tools/query_verification/src/main/java/com/google/bigquery/Main.java\nindex 50621f5..7fa9627 100644\n--- a/tools/query_verification/src/main/java/com/google/bigquery/Main.java\n+++ b/tools/query_verification/src/main/java/com/google/bigquery/Main.java\n", "chunk": "@@ -160,16 +168,17 @@ public class Main {\n      * @param path The path to the file to be read\n      * @return Text contents in file\n      */\n-    public String getContentsOfFile(String path) {\n+    public static String getContentsOfFile(String path) {\n         String contents = null;\n         try {\n             contents = new String(Files.readAllBytes(Paths.get(path)));\n+        } catch (NoSuchFileException e) {\n+            System.out.println(\"File Not Found: \" + e.getMessage());\n         } catch (IOException e) {\n-            System.out.println(e.getMessage());\n+            System.out.println(\"I/O Exception: \" + e.getMessage());\n         } finally {\n             return contents;\n         }\n     }\n \n }\n-\n", "next_change": null}]}}, {"oid": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "message": "Restructuring and added autovalue", "committedDate": "2020-06-30T20:07:20Z", "type": "commit"}, {"oid": "1dfc15c4b706e089206befca05e4eeb6bd9da513", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1dfc15c4b706e089206befca05e4eeb6bd9da513", "message": "Merge branch 'master' into master", "committedDate": "2020-07-01T17:48:48Z", "type": "commit"}]}