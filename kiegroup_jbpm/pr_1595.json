{"pr_number": 1595, "pr_title": "[JBPM-8910] How to use a \"OR\" query operator in a custom query in the query-parameters", "pr_author": "elguardian", "pr_createdAt": "2020-02-14T11:04:05Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1595", "timeline": [{"oid": "15e71fb43877d894e9ce239b39a00da15f3a485d", "url": "https://github.com/kiegroup/jbpm/commit/15e71fb43877d894e9ce239b39a00da15f3a485d", "message": "[JBPM-8910] How to use a \"OR\" query operator in a custom query in the query-parameters\n\nmodify some function to allow AST expressions for filtering", "committedDate": "2020-02-17T08:33:52Z", "type": "forcePushed"}, {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63", "url": "https://github.com/kiegroup/jbpm/commit/0ea39a2f9b859b91986baa5da791dfe8742e9a63", "message": "[JBPM-8910] How to use a \"OR\" query operator in a custom query in the query-parameters\n\nmodify some function to allow AST expressions for filtering", "committedDate": "2020-02-18T08:12:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMDg5MA==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381110890", "body": "If the list of filters contains other filters not related to the `columnId` (`POTOWNER`), these would be removed here and I think this is not expected.\r\n\r\nMy suggestion is to control first that the `removedFilter` is related to the `columnId`:\r\n\r\n```suggestion\r\n       if ((removedFilter.getColumnId().toUpperCase().equals(columnId)) && filters.remove(removedFilter)) {\r\n```\r\nNotice that current behavior works for filters like this (POTOWNER column first), because rest of filters won't be deleted:\r\n`(POTOWNER in potOwner AND COLUMN2 = value2)`\r\nbut not for\r\n`(COLUMN2 = value2 AND POTOWNER in potOwner)`\r\nwhen first filter would be deleted", "bodyText": "If the list of filters contains other filters not related to the columnId (POTOWNER), these would be removed here and I think this is not expected.\nMy suggestion is to control first that the removedFilter is related to the columnId:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (filters.remove(removedFilter)) {\n          \n          \n            \n                   if ((removedFilter.getColumnId().toUpperCase().equals(columnId)) && filters.remove(removedFilter)) {\n          \n      \n    \n    \n  \n\nNotice that current behavior works for filters like this (POTOWNER column first), because rest of filters won't be deleted:\n(POTOWNER in potOwner AND COLUMN2 = value2)\nbut not for\n(COLUMN2 = value2 AND POTOWNER in potOwner)\nwhen first filter would be deleted", "bodyHTML": "<p dir=\"auto\">If the list of filters contains other filters not related to the <code>columnId</code> (<code>POTOWNER</code>), these would be removed here and I think this is not expected.</p>\n<p dir=\"auto\">My suggestion is to control first that the <code>removedFilter</code> is related to the <code>columnId</code>:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">       <span class=\"x x-first x-last\"> </span><span class=\"pl-k\">if</span> (filters<span class=\"pl-k\">.</span>remove(removedFilter)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"pl-k\">if</span> (<span class=\"x x-first\">(removedFilter</span><span class=\"pl-k x\">.</span><span class=\"x\">getColumnId()</span><span class=\"pl-k x\">.</span><span class=\"x\">toUpperCase()</span><span class=\"pl-k x\">.</span><span class=\"x\">equals(columnId)) </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span>filters<span class=\"pl-k\">.</span>remove(removedFilter)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Notice that current behavior works for filters like this (POTOWNER column first), because rest of filters won't be deleted:<br>\n<code>(POTOWNER in potOwner AND COLUMN2 = value2)</code><br>\nbut not for<br>\n<code>(COLUMN2 = value2 AND POTOWNER in potOwner)</code><br>\nwhen first filter would be deleted</p>", "author": "gmunozfe", "createdAt": "2020-02-19T07:12:42Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -105,4 +109,27 @@ private void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities,\n         orgEntities.addAll(Optional.ofNullable(userGroupCallback.getGroupsForUser(userId)).orElse(new ArrayList<>()));\n         orgEntities.add(userId);\n     }\n+\n+    private void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter) {\n+        if (filters.remove(removedFilter)) {", "originalCommit": "0ea39a2f9b859b91986baa5da791dfe8742e9a63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExOTEzOA==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381119138", "bodyText": "good point, either this or as mentioned in my other comment why this is taken out from the if ....", "author": "mswiderski", "createdAt": "2020-02-19T07:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNzU4Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381137587", "bodyText": "changed. it must be the AND for backward compatibility. Also it looks like it is a way to restrict the query (not just change the column filter) otherwise it would not be added in case there are not filters.", "author": "elguardian", "createdAt": "2020-02-19T08:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMDg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMzI0OA==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381113248", "body": "What happens for other instances of filters that are not `CoreFunctionFilter` neither `LogicalExprFilter`?", "bodyText": "What happens for other instances of filters that are not CoreFunctionFilter neither LogicalExprFilter?", "bodyHTML": "<p dir=\"auto\">What happens for other instances of filters that are not <code>CoreFunctionFilter</code> neither <code>LogicalExprFilter</code>?</p>", "author": "gmunozfe", "createdAt": "2020-02-19T07:20:22Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -105,4 +109,27 @@ private void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities,\n         orgEntities.addAll(Optional.ofNullable(userGroupCallback.getGroupsForUser(userId)).orElse(new ArrayList<>()));\n         orgEntities.add(userId);\n     }\n+\n+    private void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter) {\n+        if (filters.remove(removedFilter)) {\n+            return;\n+        }\n+\n+        filters.stream()\n+               .filter(e -> e instanceof LogicalExprFilter)\n+               .map(e -> (LogicalExprFilter) e)\n+               .forEach(filter -> removeCoreFunctionFilter(filter.getLogicalTerms(), removedFilter));\n+\n+    }\n+    private List<CoreFunctionFilter> extractCoreFunctionFilter(List<ColumnFilter> filters) {\n+        List<CoreFunctionFilter> list = new ArrayList<>();\n+        for (ColumnFilter filter : filters) {\n+            if (filter instanceof CoreFunctionFilter) {\n+                list.add((CoreFunctionFilter) filter);\n+            } else if (filter instanceof LogicalExprFilter) {\n+                list.addAll(extractCoreFunctionFilter(((LogicalExprFilter) filter).getLogicalTerms()));\n+            }", "originalCommit": "0ea39a2f9b859b91986baa5da791dfe8742e9a63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMjQwMw==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381122403", "bodyText": "the other won't apply here or it should not be here.\nhttps://github.com/kiegroup/jbpm/pull/1595/files#diff-de3dabd2f1746cc2d025e0c8ee00c507R71", "author": "elguardian", "createdAt": "2020-02-19T07:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMzI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExODQ2Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381118462", "body": "this comment is quite misleading to me... looks like it missing what we need to look for?", "bodyText": "this comment is quite misleading to me... looks like it missing what we need to look for?", "bodyHTML": "<p dir=\"auto\">this comment is quite misleading to me... looks like it missing what we need to look for?</p>", "author": "mswiderski", "createdAt": "2020-02-19T07:35:59Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -77,8 +78,11 @@ public void preprocess(DataSetLookup lookup) {\n                         addUserAndGroupsFromIdentityProvider(orgEntities, potOwner);\n                     }\n \n-                    it.remove();\n                 }\n+\n+                // we need to look for recursively for the filter", "originalCommit": "0ea39a2f9b859b91986baa5da791dfe8742e9a63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyODA5Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381128092", "bodyText": "now we have a tree. so we need to traverse recursively for the filter.\nchanged it", "author": "elguardian", "createdAt": "2020-02-19T08:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExODQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExODk1OA==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381118958", "body": "shouldn't this be placed in exact same location as 'it.remove()' before?", "bodyText": "shouldn't this be placed in exact same location as 'it.remove()' before?", "bodyHTML": "<p dir=\"auto\">shouldn't this be placed in exact same location as 'it.remove()' before?</p>", "author": "mswiderski", "createdAt": "2020-02-19T07:37:29Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -77,8 +78,11 @@ public void preprocess(DataSetLookup lookup) {\n                         addUserAndGroupsFromIdentityProvider(orgEntities, potOwner);\n                     }\n \n-                    it.remove();\n                 }\n+\n+                // we need to look for recursively for the filter\n+                removeCoreFunctionFilter(lookup.getFirstFilterOp().getColumnFilterList(), column);", "originalCommit": "0ea39a2f9b859b91986baa5da791dfe8742e9a63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyODcwMw==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381128703", "bodyText": "you are right.\nchanged it.", "author": "elguardian", "createdAt": "2020-02-19T08:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExODk1OA=="}], "type": "inlineReview"}, {"oid": "3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf", "url": "https://github.com/kiegroup/jbpm/commit/3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf", "message": "[JBPM-8910] How to use a \"OR\" query operator in a custom query in the query-parameters\n\nmodify some function to allow AST expressions for filtering", "committedDate": "2020-02-19T08:25:48Z", "type": "commit"}, {"oid": "3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf", "url": "https://github.com/kiegroup/jbpm/commit/3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf", "message": "[JBPM-8910] How to use a \"OR\" query operator in a custom query in the query-parameters\n\nmodify some function to allow AST expressions for filtering", "committedDate": "2020-02-19T08:25:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxNjMxNg==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381216316", "body": "So, in this test, the whole filter to preprocess is\r\n\r\n(MY_COLUMN = 1234 OR MY_COLUMN not_in 1, 2, 3, 4 **OR** POTOWNER in potOwner)\r\n\r\nbut after preprocessing, the filters are split in a list(because more values have been added for POTOWNER column) but they are going to be rebuilt with AND, no?\r\n\r\n((MY_COLUMN = 1234 OR MY_COLUMN not_in 1, 2, 3, 4) **AND** (POTOWNER in role1, role2, potOwner))\r\n\r\nOr am I misunderstanding anything?\r\n", "bodyText": "So, in this test, the whole filter to preprocess is\n(MY_COLUMN = 1234 OR MY_COLUMN not_in 1, 2, 3, 4 OR POTOWNER in potOwner)\nbut after preprocessing, the filters are split in a list(because more values have been added for POTOWNER column) but they are going to be rebuilt with AND, no?\n((MY_COLUMN = 1234 OR MY_COLUMN not_in 1, 2, 3, 4) AND (POTOWNER in role1, role2, potOwner))\nOr am I misunderstanding anything?", "bodyHTML": "<p dir=\"auto\">So, in this test, the whole filter to preprocess is</p>\n<p dir=\"auto\">(MY_COLUMN = 1234 OR MY_COLUMN not_in 1, 2, 3, 4 <strong>OR</strong> POTOWNER in potOwner)</p>\n<p dir=\"auto\">but after preprocessing, the filters are split in a list(because more values have been added for POTOWNER column) but they are going to be rebuilt with AND, no?</p>\n<p dir=\"auto\">((MY_COLUMN = 1234 OR MY_COLUMN not_in 1, 2, 3, 4) <strong>AND</strong> (POTOWNER in role1, role2, potOwner))</p>\n<p dir=\"auto\">Or am I misunderstanding anything?</p>", "author": "gmunozfe", "createdAt": "2020-02-19T10:50:45Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessorTest.java", "diffHunk": "@@ -138,6 +140,39 @@ public void testPotOwnerFilterNoIdentityProvider() {\n                      dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());\n     }\n \n+    @Test\n+    public void testPotOwnerFilterComplexExpression() {\n+        String userId = \"userId\";\n+\n+        when(userGroupCallback.getGroupsForUser(userId)).thenReturn(null);\n+        when(identityProvider.getName()).thenReturn(userId);\n+\n+        String potOwner = \"potOwner\";\n+        when(userGroupCallback.getGroupsForUser(potOwner)).thenReturn(Arrays.asList(\"role1\", \"role2\"));\n+\n+        List<String> potOwners = new ArrayList<String>();\n+        potOwners.add(potOwner);\n+\n+        QueryParam queryParam = new QueryParam(COL_ID, \"IN\", potOwners);\n+        QueryParam queryParamTerm1 = new QueryParam(\"MY_COLUMN\", \"EQUALS_TO\", Arrays.asList(\"1234\"));\n+        QueryParam queryParamTerm2 = new QueryParam(\"MY_COLUMN\", \"NOT_IN\", Arrays.asList(1, 2, 3, 4));\n+        QueryParam queryParamOR = new QueryParam(null, \"OR\", Arrays.asList(queryParamTerm1, queryParamTerm2, queryParam));", "originalCommit": "3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwNjcwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381306701", "bodyText": "correct. This should the right approach how this filter works.", "author": "elguardian", "createdAt": "2020-02-19T13:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxNjMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3ODE5Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381578192", "body": "Swap these arguments to be: expected, actual", "bodyText": "Swap these arguments to be: expected, actual", "bodyHTML": "<p dir=\"auto\">Swap these arguments to be: expected, actual</p>", "author": "gmunozfe", "createdAt": "2020-02-19T22:17:10Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessorTest.java", "diffHunk": "@@ -138,6 +140,39 @@ public void testPotOwnerFilterNoIdentityProvider() {\n                      dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());\n     }\n \n+    @Test\n+    public void testPotOwnerFilterComplexExpression() {\n+        String userId = \"userId\";\n+\n+        when(userGroupCallback.getGroupsForUser(userId)).thenReturn(null);\n+        when(identityProvider.getName()).thenReturn(userId);\n+\n+        String potOwner = \"potOwner\";\n+        when(userGroupCallback.getGroupsForUser(potOwner)).thenReturn(Arrays.asList(\"role1\", \"role2\"));\n+\n+        List<String> potOwners = new ArrayList<String>();\n+        potOwners.add(potOwner);\n+\n+        QueryParam queryParam = new QueryParam(COL_ID, \"IN\", potOwners);\n+        QueryParam queryParamTerm1 = new QueryParam(\"MY_COLUMN\", \"EQUALS_TO\", Arrays.asList(\"1234\"));\n+        QueryParam queryParamTerm2 = new QueryParam(\"MY_COLUMN\", \"NOT_IN\", Arrays.asList(1, 2, 3, 4));\n+        QueryParam queryParamOR = new QueryParam(null, \"OR\", Arrays.asList(queryParamTerm1, queryParamTerm2, queryParam));\n+\n+        CoreFunctionQueryParamBuilder coreFunctionQueryParamBuilder = new CoreFunctionQueryParamBuilder(queryParamOR);\n+        ColumnFilter columnFilter = (ColumnFilter) coreFunctionQueryParamBuilder.build();\n+\n+        DataSetFilter filter = new DataSetFilter();\n+        filter.addFilterColumn(columnFilter);\n+        dataSetLookup.addOperation(filter);\n+\n+        userAndGroupsTasksPreprocessor.preprocess(dataSetLookup);\n+        List<ColumnFilter> filters = dataSetLookup.getFirstFilterOp().getColumnFilterList();\n+\n+        assertEquals(filters.size(), 2);", "originalCommit": "3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}