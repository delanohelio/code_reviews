{"pr_number": 1624, "pr_title": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener", "pr_author": "elguardian", "pr_createdAt": "2020-04-02T08:40:24Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1624", "timeline": [{"oid": "fb0c815396f4426c93e14552a7fabb73d53728af", "url": "https://github.com/kiegroup/jbpm/commit/fb0c815396f4426c93e14552a7fabb73d53728af", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\nraising and activate operation before calculating new status after adding the task to\nthe persistence tier.", "committedDate": "2020-05-17T12:16:13Z", "type": "forcePushed"}, {"oid": "5647b5a8d2d60c3d626ca239dbbc6bd902107841", "url": "https://github.com/kiegroup/jbpm/commit/5647b5a8d2d60c3d626ca239dbbc6bd902107841", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task.", "committedDate": "2020-05-18T14:42:30Z", "type": "forcePushed"}, {"oid": "974db9e7d32b417b70fc32f5fe183d7151d0a190", "url": "https://github.com/kiegroup/jbpm/commit/974db9e7d32b417b70fc32f5fe183d7151d0a190", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task.", "committedDate": "2020-05-18T14:44:14Z", "type": "forcePushed"}, {"oid": "3cbfc405762d57dce7f72c994a494b89850f3c49", "url": "https://github.com/kiegroup/jbpm/commit/3cbfc405762d57dce7f72c994a494b89850f3c49", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task.", "committedDate": "2020-05-18T18:19:41Z", "type": "forcePushed"}, {"oid": "6feccbf88349380b75bc1015790a8053594edd5f", "url": "https://github.com/kiegroup/jbpm/commit/6feccbf88349380b75bc1015790a8053594edd5f", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task.", "committedDate": "2020-05-19T06:07:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Nzg4Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427477883", "body": "beforeTaskActivatedEvent could also be implemented to be tested with a different AtomicBoolean", "bodyText": "beforeTaskActivatedEvent could also be implemented to be tested with a different AtomicBoolean", "bodyHTML": "<p dir=\"auto\">beforeTaskActivatedEvent could also be implemented to be tested with a different AtomicBoolean</p>", "author": "gmunozfe", "createdAt": "2020-05-19T17:32:54Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {", "originalCommit": "6feccbf88349380b75bc1015790a8053594edd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzEwNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428503105", "bodyText": "changing this to watch how many times is triggered.", "author": "elguardian", "createdAt": "2020-05-21T07:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Nzg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3ODc5Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427478797", "body": "When completing first task, second task is added, so listener is invoked twice in this scenario", "bodyText": "When completing first task, second task is added, so listener is invoked twice in this scenario", "bodyHTML": "<p dir=\"auto\">When completing first task, second task is added, so listener is invoked twice in this scenario</p>", "author": "gmunozfe", "createdAt": "2020-05-19T17:34:18Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {\n+                triggered.set(true);\n+            }\n+\n+        };\n+        RuntimeEngine engine = getRuntimeEngine();\n+        TaskService taskService = engine.getTaskService();\n+        ((EventService<TaskLifeCycleEventListener>) taskService).registerTaskEventListener(listener);\n+        ProcessInstance pi = ksession.startProcess(HUMAN_TASK_LISTENER_ID);\n+        long processInstanceId = pi.getId();\n+\n+        List<Long> idList = taskService.getTasksByProcessInstanceId(processInstanceId);\n+        for (long taskId : idList) {\n+            taskService.start(taskId, \"john\");\n+            taskService.complete(taskId, \"john\", emptyMap());", "originalCommit": "6feccbf88349380b75bc1015790a8053594edd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzE1NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428503155", "bodyText": "changing this to watch how many times is triggered.", "author": "elguardian", "createdAt": "2020-05-21T07:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3ODc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3OTE2Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427479162", "body": "This could be part of a finally clause", "bodyText": "This could be part of a finally clause", "bodyHTML": "<p dir=\"auto\">This could be part of a finally clause</p>", "author": "gmunozfe", "createdAt": "2020-05-19T17:34:52Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {\n+                triggered.set(true);\n+            }\n+\n+        };\n+        RuntimeEngine engine = getRuntimeEngine();\n+        TaskService taskService = engine.getTaskService();\n+        ((EventService<TaskLifeCycleEventListener>) taskService).registerTaskEventListener(listener);\n+        ProcessInstance pi = ksession.startProcess(HUMAN_TASK_LISTENER_ID);\n+        long processInstanceId = pi.getId();\n+\n+        List<Long> idList = taskService.getTasksByProcessInstanceId(processInstanceId);\n+        for (long taskId : idList) {\n+            taskService.start(taskId, \"john\");\n+            taskService.complete(taskId, \"john\", emptyMap());\n+        }\n+        assertTrue(\"Task should have triggered the event\", triggered.get());\n+\n+        ksession.abortProcessInstance(processInstanceId);", "originalCommit": "6feccbf88349380b75bc1015790a8053594edd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwNjU5Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428506596", "bodyText": "nope, part of the test. not failure.", "author": "elguardian", "createdAt": "2020-05-21T08:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3OTE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1MzUxMA==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427853510", "body": "Wondering whether it'd be good to update any possible task changes in the DB in case it's been modified by any additional listener done in the `fireBeforeTaskActivated`?\r\n\r\n```suggestion\r\n                this.taskEventSupport.fireBeforeTaskActivated(task, context);\r\n                context.getPersistenceContext().updateTask(task);\r\n                this.taskEventSupport.fireAfterTaskActivated(task, context);\r\n```", "bodyText": "Wondering whether it'd be good to update any possible task changes in the DB in case it's been modified by any additional listener done in the fireBeforeTaskActivated?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.taskEventSupport.fireBeforeTaskActivated(task, context);\n          \n          \n            \n                            this.taskEventSupport.fireAfterTaskActivated(task, context);\n          \n          \n            \n                            this.taskEventSupport.fireBeforeTaskActivated(task, context);\n          \n          \n            \n                            context.getPersistenceContext().updateTask(task);\n          \n          \n            \n                            this.taskEventSupport.fireAfterTaskActivated(task, context);", "bodyHTML": "<p dir=\"auto\">Wondering whether it'd be good to update any possible task changes in the DB in case it's been modified by any additional listener done in the <code>fireBeforeTaskActivated</code>?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"505\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>taskEventSupport<span class=\"pl-k\">.</span>fireBeforeTaskActivated(task, context);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"506\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>taskEventSupport<span class=\"pl-k\">.</span>fireAfterTaskActivated(task, context);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"505\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>taskEventSupport<span class=\"pl-k\">.</span>fireBeforeTaskActivated(task, context);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"506\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                context<span class=\"pl-k\">.</span>getPersistenceContext()<span class=\"pl-k\">.</span>updateTask(task);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"507\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>taskEventSupport<span class=\"pl-k\">.</span>fireAfterTaskActivated(task, context);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-05-20T09:02:20Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/TaskInstanceServiceImpl.java", "diffHunk": "@@ -497,6 +497,17 @@ protected void resolveTaskDetailsForTaskProperties(Task task) {\n         ((InternalTask)task).setFormName((String) replacements.get(\"formName\"));\n     }\n \n-\n+    @Override\n+    public void fireEvent(Operation operation, long taskId) {\n+        Task task = context.getPersistenceContext().findTask(taskId);\n+        switch (operation) {\n+            case Activate:\n+                this.taskEventSupport.fireBeforeTaskActivated(task, context);\n+                this.taskEventSupport.fireAfterTaskActivated(task, context);", "originalCommit": "6feccbf88349380b75bc1015790a8053594edd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMTgwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428501801", "bodyText": "there is already a listener doing that.", "author": "elguardian", "createdAt": "2020-05-21T07:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1MzUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3OTc2Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427879762", "body": "Why + 2 activate events? It should've been deleted in line  https://github.com/kiegroup/jbpm/blob/6feccbf88349380b75bc1015790a8053594edd5f/jbpm-human-task/jbpm-human-task-audit/src/test/java/org/jbpm/services/task/audit/service/TaskAuditBaseTest.java#L139", "bodyText": "Why + 2 activate events? It should've been deleted in line  \n  \n    \n      jbpm/jbpm-human-task/jbpm-human-task-audit/src/test/java/org/jbpm/services/task/audit/service/TaskAuditBaseTest.java\n    \n    \n         Line 139\n      in\n      6feccbf\n    \n    \n    \n    \n\n        \n          \n           taskService.execute(new DeleteAuditEventsCommand(taskId));", "bodyHTML": "<p dir=\"auto\">Why + 2 activate events? It should've been deleted in line  <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/kiegroup/jbpm/blob/6feccbf88349380b75bc1015790a8053594edd5f/jbpm-human-task/jbpm-human-task-audit/src/test/java/org/jbpm/services/task/audit/service/TaskAuditBaseTest.java#L139\">jbpm/jbpm-human-task/jbpm-human-task-audit/src/test/java/org/jbpm/services/task/audit/service/TaskAuditBaseTest.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 139\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/kiegroup/jbpm/commit/6feccbf88349380b75bc1015790a8053594edd5f\">6feccbf</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L139\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"139\"></td>\n          <td id=\"LC139\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> taskService<span class=\"pl-k\">.</span>execute(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">DeleteAuditEventsCommand</span>(taskId)); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "afalhambra", "createdAt": "2020-05-20T09:44:38Z", "path": "jbpm-human-task/jbpm-human-task-audit/src/test/java/org/jbpm/services/task/audit/service/TaskAuditBaseTest.java", "diffHunk": "@@ -138,7 +138,8 @@ public void testComplete() {\n \n         taskService.execute(new DeleteAuditEventsCommand(taskId));\n         allTaskEvents = taskService.execute(new GetAuditEventsCommand());\n-        assertEquals(numTaskEvents - numFirstTaskEvents, allTaskEvents.size());\n+        // +2 activate events.\n+        assertEquals(numTaskEvents - numFirstTaskEvents + 2, allTaskEvents.size());", "originalCommit": "6feccbf88349380b75bc1015790a8053594edd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMTY4Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428501686", "bodyText": "it didn't take into accoutn the the new events triggered.", "author": "elguardian", "createdAt": "2020-05-21T07:54:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3OTc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0OTg0NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427949845", "body": "Why this change? is because an event can be created same day (i.e. `logtime` column)? But as per the column definition itself this is a timestamp, so I think it shouldn't be a problem here - wdyt?\r\n\r\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/impl/model/TaskEventImpl.java#L73-L74", "bodyText": "Why this change? is because an event can be created same day (i.e. logtime column)? But as per the column definition itself this is a timestamp, so I think it shouldn't be a problem here - wdyt?\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/impl/model/TaskEventImpl.java#L73-L74", "bodyHTML": "<p dir=\"auto\">Why this change? is because an event can be created same day (i.e. <code>logtime</code> column)? But as per the column definition itself this is a timestamp, so I think it shouldn't be a problem here - wdyt?</p>\n<p dir=\"auto\"><a href=\"https://github.com/kiegroup/jbpm/blob/master/jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/impl/model/TaskEventImpl.java#L73-L74\">https://github.com/kiegroup/jbpm/blob/master/jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/impl/model/TaskEventImpl.java#L73-L74</a></p>", "author": "afalhambra", "createdAt": "2020-05-20T11:55:59Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/UserTaskInstanceWithPotOwnerTest.java", "diffHunk": "@@ -271,16 +271,16 @@ public void testSearchTaskByPotOwnerQueryParamBuilder() {\n     public void testSearchTaskWithModifVarsMapper() {\n         query = new SqlQueryDefinition(\"jbpmGetTaskWithPO\", dataSourceJNDIname);\n         query.setExpression(\"select t.id as TASKID, t.name as NAME,  t.FORMNAME AS FORMNAME, t.subject as SUBJECT, \" +\n-                \"t.actualowner_id as ACTUALOWNER, po.entity_id as POTOWNER, p.processinstancedescription as PROCESSINSTANCEDESCRIPTION, t.CREATEDON as CREATEDON, \" +\n-                \"t.CREATEDBY_ID as CREATEDBY, t.EXPIRATIONTIME as EXPIRATIONTIME, \" +\n-                \"(select max(logtime) from taskevent where processinstanceid = t.processinstanceid and taskid = t.id) as lastmodificationdate, \" +\n-                \"(select userid from taskevent where logtime = (select max(logtime) from taskevent where processinstanceid = t.processinstanceid and taskid = t.id)) as lastmodificationuser, \" +\n-                \"t.priority as PRIORITY, t.STATUS as STATUS, t.PROCESSINSTANCEID as PROCESSINSTANCEID, t.PROCESSID as PROCESSID, \" +\n-                \"t.deploymentid as DEPLOYMENTID, d.name as TVNAME, d.type as TVTYPE, d.value as TVVALUE \" +\n-                \"from TASK t \" +\n-                \"inner join PEOPLEASSIGNMENTS_POTOWNERS po on t.id=po.task_id \" +\n-                \"inner join PROCESSINSTANCELOG p on t.processinstanceid = p.processinstanceid \" +\n-                \"inner join TASKVARIABLEIMPL d on t.id=d.taskid\");\n+                            \"t.actualowner_id as ACTUALOWNER, po.entity_id as POTOWNER, p.processinstancedescription as PROCESSINSTANCEDESCRIPTION, t.CREATEDON as CREATEDON, \" +\n+                            \"t.CREATEDBY_ID as CREATEDBY, t.EXPIRATIONTIME as EXPIRATIONTIME, \" +\n+                            \"(select max(logtime) from taskevent where processinstanceid = t.processinstanceid and taskid = t.id) as lastmodificationdate, \" +\n+                            \"(select a.userid from taskevent a left join taskevent b on a.id < b.id where b.id IS NULL) as lastmodificationuser, \" +", "originalCommit": "6feccbf88349380b75bc1015790a8053594edd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzU5MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428503591", "bodyText": "log time is a time stamp. It is better to trust the sequence.", "author": "elguardian", "createdAt": "2020-05-21T07:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0OTg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDIwNg==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428034206", "body": "Agree with @gmunozfe ", "bodyText": "Agree with @gmunozfe", "bodyHTML": "<p dir=\"auto\">Agree with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gmunozfe/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gmunozfe\">@gmunozfe</a></p>", "author": "afalhambra", "createdAt": "2020-05-20T13:58:36Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {", "originalCommit": "6feccbf88349380b75bc1015790a8053594edd5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDQ5MA==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428034490", "body": "same as @gmunozfe - I would make `HumanTask-Listener.bpmn2` a litte simpler and cleaner by removing some task/process variables along with some System.out.println stuff in the \"on entry\" and \"on exit\" section of the bpmn.", "bodyText": "same as @gmunozfe - I would make HumanTask-Listener.bpmn2 a litte simpler and cleaner by removing some task/process variables along with some System.out.println stuff in the \"on entry\" and \"on exit\" section of the bpmn.", "bodyHTML": "<p dir=\"auto\">same as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gmunozfe/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gmunozfe\">@gmunozfe</a> - I would make <code>HumanTask-Listener.bpmn2</code> a litte simpler and cleaner by removing some task/process variables along with some System.out.println stuff in the \"on entry\" and \"on exit\" section of the bpmn.</p>", "author": "afalhambra", "createdAt": "2020-05-20T13:58:56Z", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {\n+                triggered.set(true);\n+            }\n+\n+        };\n+        RuntimeEngine engine = getRuntimeEngine();\n+        TaskService taskService = engine.getTaskService();\n+        ((EventService<TaskLifeCycleEventListener>) taskService).registerTaskEventListener(listener);\n+        ProcessInstance pi = ksession.startProcess(HUMAN_TASK_LISTENER_ID);\n+        long processInstanceId = pi.getId();\n+\n+        List<Long> idList = taskService.getTasksByProcessInstanceId(processInstanceId);\n+        for (long taskId : idList) {\n+            taskService.start(taskId, \"john\");\n+            taskService.complete(taskId, \"john\", emptyMap());", "originalCommit": "6feccbf88349380b75bc1015790a8053594edd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzY0Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428503642", "bodyText": "already answered", "author": "elguardian", "createdAt": "2020-05-21T07:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDQ5MA=="}], "type": "inlineReview"}, {"oid": "ffd6774ea47dabb8f3633e1ecfac5e4c71a3cf11", "url": "https://github.com/kiegroup/jbpm/commit/ffd6774ea47dabb8f3633e1ecfac5e4c71a3cf11", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task.", "committedDate": "2020-05-21T08:04:54Z", "type": "commit"}, {"oid": "ffd6774ea47dabb8f3633e1ecfac5e4c71a3cf11", "url": "https://github.com/kiegroup/jbpm/commit/ffd6774ea47dabb8f3633e1ecfac5e4c71a3cf11", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task.", "committedDate": "2020-05-21T08:04:54Z", "type": "forcePushed"}]}