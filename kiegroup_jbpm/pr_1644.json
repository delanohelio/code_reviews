{"pr_number": 1644, "pr_title": "[BAPL-1526] added new function to get process by task attributes and variables", "pr_author": "elguardian", "pr_createdAt": "2020-05-08T08:05:27Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1644", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5Nzc1Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423797757", "body": "taskVariables may be null from the API call\r\n```suggestion\r\n        if (taskVariables!=null && !taskVariables.isEmpty()) {\r\n```", "bodyText": "taskVariables may be null from the API call\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!taskVariables.isEmpty()) {\n          \n          \n            \n                    if (taskVariables!=null && !taskVariables.isEmpty()) {", "bodyHTML": "<p dir=\"auto\">taskVariables may be null from the API call</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"129\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>taskVariables<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"129\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first\">taskVariables</span><span class=\"pl-k x\">!=</span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span><span class=\"pl-k\">!</span>taskVariables<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmunozfe", "createdAt": "2020-05-12T14:51:48Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzOTY0OA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424239648", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-13T07:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5Nzc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5ODc1NA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423798754", "body": "Same here, check if taskVariables are not null to avoid NPE", "bodyText": "Same here, check if taskVariables are not null to avoid NPE", "bodyHTML": "<p dir=\"auto\">Same here, check if taskVariables are not null to avoid NPE</p>", "author": "gmunozfe", "createdAt": "2020-05-12T14:53:00Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzOTc1OA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424239758", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-13T07:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5ODc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMzAzOA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423823038", "body": "if attributes is null, there's a NPE at translate method loop", "bodyText": "if attributes is null, there's a NPE at translate method loop", "bodyHTML": "<p dir=\"auto\">if attributes is null, there's a NPE at translate method loop</p>", "author": "gmunozfe", "createdAt": "2020-05-12T15:23:45Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/AdvanceCaseRuntimeDataServiceImpl.java", "diffHunk": "@@ -44,21 +44,29 @@ public AdvanceCaseRuntimeDataServiceImpl() {\n \n     @Override\n     public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryCaseByVariables(List<QueryParam> attributes,\n-                                                                                              List<QueryParam> variables,\n+                                                                                              List<QueryParam> caseVariables,\n                                                                                               QueryContext queryContext) {\n-        return queryProcessByVariables(translate(translateTable, attributes), variables, CASE_TYPE, CASE_FILE_PREFIX, queryContext);\n+        return queryProcessByVariables(translate(translateTable, attributes), caseVariables, CASE_TYPE, CASE_FILE_PREFIX, queryContext);", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzOTcxMA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424239710", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-13T07:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMzAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNjkzMg==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423826932", "body": "Same here\r\n```suggestion\r\n        if (processVariables!=null && !processVariables.isEmpty()) {\r\n```", "bodyText": "Same here\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!processVariables.isEmpty()) {\n          \n          \n            \n                    if (processVariables!=null && !processVariables.isEmpty()) {", "bodyHTML": "<p dir=\"auto\">Same here</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"140\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>processVariables<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"140\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first\">processVariables</span><span class=\"pl-k x\">!=</span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span><span class=\"pl-k\">!</span>processVariables<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmunozfe", "createdAt": "2020-05-12T15:28:53Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzOTg2Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424239862", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-13T07:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNjkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNzU2Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423827562", "body": "Same here for processVariables, check if processVariables are not null to avoid NPE", "bodyText": "Same here for processVariables, check if processVariables are not null to avoid NPE", "bodyHTML": "<p dir=\"auto\">Same here for processVariables, check if processVariables are not null to avoid NPE</p>", "author": "gmunozfe", "createdAt": "2020-05-12T15:29:42Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n \n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!taskVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.size());\n         }\n+\n+        processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+        processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0MTU4Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423841582", "body": "Same here\r\n```suggestion\r\n       if (owners!=null && !owners.isEmpty()) {\r\n```", "bodyText": "Same here\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!owners.isEmpty()) {\n          \n          \n            \n                   if (owners!=null && !owners.isEmpty()) {", "bodyHTML": "<p dir=\"auto\">Same here</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"152\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">       <span class=\"x x-first x-last\"> </span><span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>owners<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"152\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"pl-k\">if</span> (<span class=\"x x-first\">owners</span><span class=\"pl-k x\">!=</span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span><span class=\"pl-k\">!</span>owners<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmunozfe", "createdAt": "2020-05-12T15:48:15Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzOTkzMg==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424239932", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-13T07:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0MTU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0MzE3OA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423843178", "body": "Same here, check if owners are not null to avoid NPE\r\n```suggestion\r\n       if (owners!=null && !owners.isEmpty()) {\r\n```", "bodyText": "Same here, check if owners are not null to avoid NPE\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!owners.isEmpty()) {\n          \n          \n            \n                   if (owners!=null && !owners.isEmpty()) {", "bodyHTML": "<p dir=\"auto\">Same here, check if owners are not null to avoid NPE</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">       <span class=\"x x-first x-last\"> </span><span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>owners<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"pl-k\">if</span> (<span class=\"x x-first\">owners</span><span class=\"pl-k x\">!=</span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span><span class=\"pl-k\">!</span>owners<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmunozfe", "createdAt": "2020-05-12T15:50:28Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n \n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!taskVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.size());\n         }\n+\n+        processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+        processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+        if (!processVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_PROCVARS\", processVariables.size());\n+        }\n+\n+        if (!owners.isEmpty()) {", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNzExNA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423937114", "body": "Shouldn't `close` invocation be included into a finally block to get assured that entityManager is always closed (even with an unchecked exception is thrown -e.g. UnsupportedOperationException)?", "bodyText": "Shouldn't close invocation be included into a finally block to get assured that entityManager is always closed (even with an unchecked exception is thrown -e.g. UnsupportedOperationException)?", "bodyHTML": "<p dir=\"auto\">Shouldn't <code>close</code> invocation be included into a finally block to get assured that entityManager is always closed (even with an unchecked exception is thrown -e.g. UnsupportedOperationException)?</p>", "author": "gmunozfe", "createdAt": "2020-05-12T18:14:27Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n \n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!taskVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.size());\n         }\n+\n+        processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+        processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+        if (!processVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_PROCVARS\", processVariables.size());\n+        }\n+\n+        if (!owners.isEmpty()) {\n+            query.setParameter(\"num_owners\", owners.size());\n+            query.setParameter(\"owners\", owners);\n+        }\n+\n+        attributes.stream().filter(e -> e.getObjectValue() != null).forEach(entry -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n         query.setParameter(\"processType\", processType);\n \n         addPagination(query, queryContext);\n+\n         List<Number> ids = query.getResultList();\n         if (ids.isEmpty()) {\n-            return Collections.emptyList();\n+            return emptyList();\n         }\n \n-        // now we get the information\n+        entityManager.close();", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MTUyMA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424241520", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-13T07:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNzExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MzQ1Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424063456", "body": "QueryParam with **UNARY_OPERAND** were filtered out previously to invoke query.setParameter, however they are considered here to set the number for HAVING clause, is it right?\r\n\r\nConsider this example (filter by _notEqualsTo_ and _isNotNull_ for the same variable):\r\n`List<QueryParam> processVariables = list(equalsTo(\"var_b\", \"3\"), notEqualsTo(\"var_c\",\"fake\"), isNotNull(\"var_c\"));`\r\n\r\nas var_c is used twice, then HAVING should be only for the distinct variables: 2 instead of 3 (processVariables.size())\r\n\r\nI guess though this is a weird scenario it has sense; probably we should group the variables before counting them:\r\n```\r\nlong count = processVariables.stream().collect(Collectors.groupingBy(QueryParam::getColumn, Collectors.counting())).size();\r\nquery.setParameter(\"NUMBER_OF_PROCVARS\", count);\r\n```\r\n\r\nwdyt?", "bodyText": "QueryParam with UNARY_OPERAND were filtered out previously to invoke query.setParameter, however they are considered here to set the number for HAVING clause, is it right?\nConsider this example (filter by notEqualsTo and isNotNull for the same variable):\nList<QueryParam> processVariables = list(equalsTo(\"var_b\", \"3\"), notEqualsTo(\"var_c\",\"fake\"), isNotNull(\"var_c\"));\nas var_c is used twice, then HAVING should be only for the distinct variables: 2 instead of 3 (processVariables.size())\nI guess though this is a weird scenario it has sense; probably we should group the variables before counting them:\nlong count = processVariables.stream().collect(Collectors.groupingBy(QueryParam::getColumn, Collectors.counting())).size();\nquery.setParameter(\"NUMBER_OF_PROCVARS\", count);\n\nwdyt?", "bodyHTML": "<p dir=\"auto\">QueryParam with <strong>UNARY_OPERAND</strong> were filtered out previously to invoke query.setParameter, however they are considered here to set the number for HAVING clause, is it right?</p>\n<p dir=\"auto\">Consider this example (filter by <em>notEqualsTo</em> and <em>isNotNull</em> for the same variable):<br>\n<code>List&lt;QueryParam&gt; processVariables = list(equalsTo(\"var_b\", \"3\"), notEqualsTo(\"var_c\",\"fake\"), isNotNull(\"var_c\"));</code></p>\n<p dir=\"auto\">as var_c is used twice, then HAVING should be only for the distinct variables: 2 instead of 3 (processVariables.size())</p>\n<p dir=\"auto\">I guess though this is a weird scenario it has sense; probably we should group the variables before counting them:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"long count = processVariables.stream().collect(Collectors.groupingBy(QueryParam::getColumn, Collectors.counting())).size();\nquery.setParameter(&quot;NUMBER_OF_PROCVARS&quot;, count);\"><pre><code>long count = processVariables.stream().collect(Collectors.groupingBy(QueryParam::getColumn, Collectors.counting())).size();\nquery.setParameter(\"NUMBER_OF_PROCVARS\", count);\n</code></pre></div>\n<p dir=\"auto\">wdyt?</p>", "author": "gmunozfe", "createdAt": "2020-05-12T22:11:09Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n \n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!taskVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.size());\n         }\n+\n+        processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+        processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+        if (!processVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_PROCVARS\", processVariables.size());", "originalCommit": "b4d8f791f2373647e0a13d8545a2859dac528c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3ODg5Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424278897", "bodyText": "UNARY OPERAND does not have right side that is the reason for not filtering for setting parameters.\nok I will set if there are several conditions per variable they will act as and AND. in your example would be\n(variableId = varC AND value IS NOT NULL AND var_c <> \"fake\") OR ...", "author": "elguardian", "createdAt": "2020-05-13T08:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MzQ1Ng=="}], "type": "inlineReview"}, {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "url": "https://github.com/kiegroup/jbpm/commit/dd3db6b1891b24bb663ad96686f5c875907ab1e2", "message": "[BAPL-1526] added new function to get process by task attributes and variables", "committedDate": "2020-05-13T08:52:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMTM5Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424331396", "body": "Wouldn't be clearer to overload method `queryProcessByVariables` by adding this new taskVariables parameter instead of creating a new method?", "bodyText": "Wouldn't be clearer to overload method queryProcessByVariables by adding this new taskVariables parameter instead of creating a new method?", "bodyHTML": "<p dir=\"auto\">Wouldn't be clearer to overload method <code>queryProcessByVariables</code> by adding this new taskVariables parameter instead of creating a new method?</p>", "author": "afalhambra", "createdAt": "2020-05-13T10:21:24Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/AdvanceRuntimeDataService.java", "diffHunk": "@@ -27,13 +27,28 @@\n \n     String TASK_ATTR_NAME = \"TASK_NAME\";\n     String TASK_ATTR_OWNER = \"TASK_OWNER\";\n+    String TASK_ATTR_STATUS = \"TASK_STATUS\";\n     String PROCESS_ATTR_INSTANCE_ID = \"PROCESS_INSTANCE_ID\";\n     String PROCESS_ATTR_CORRELATION_KEY = \"PROCESS_CORRELATION_KEY\";\n     String PROCESS_ATTR_DEFINITION_ID = \"PROCESS_DEFINITION_ID\";\n     String PROCESS_ATTR_DEPLOYMENT_ID = \"PROCESS_DEPLOYMENT_ID\";\n \n-    List<ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes, List<QueryParam> variables, QueryContext queryContext);\n+    List<ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                              List<QueryParam> processVariables,\n+                                                              QueryContext queryContext);\n+\n+    List<ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,", "originalCommit": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNDQwMA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424904400", "bodyText": "They don't do the same thing and they are not querying against the same data.", "author": "elguardian", "createdAt": "2020-05-14T06:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMTM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM0NTEzOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424345139", "body": "Why a new test class? wouldn't be better to have this test all together in the same test class `AdvanceRuntimeDataServiceImplTest`?", "bodyText": "Why a new test class? wouldn't be better to have this test all together in the same test class AdvanceRuntimeDataServiceImplTest?", "bodyHTML": "<p dir=\"auto\">Why a new test class? wouldn't be better to have this test all together in the same test class <code>AdvanceRuntimeDataServiceImplTest</code>?</p>", "author": "afalhambra", "createdAt": "2020-05-13T10:48:00Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImpl2Test.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*", "originalCommit": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNjk5Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424906996", "bodyText": "Different datasets, different behaviour.", "author": "elguardian", "createdAt": "2020-05-14T06:49:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM0NTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1OTAyOA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424359028", "body": "why this? there is no `task_out_a2` variable defined in any of the three bpm processes. Might look confusing.", "bodyText": "why this? there is no task_out_a2 variable defined in any of the three bpm processes. Might look confusing.", "bodyHTML": "<p dir=\"auto\">why this? there is no <code>task_out_a2</code> variable defined in any of the three bpm processes. Might look confusing.</p>", "author": "afalhambra", "createdAt": "2020-05-13T11:16:51Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImpl2Test.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.ProcessInstanceNotFoundException;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.ProcessInstanceWithVarsDesc;\n+import org.jbpm.services.api.model.UserTaskInstanceDesc;\n+import org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc;\n+import org.jbpm.services.api.query.model.QueryParam;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.internal.query.QueryContext;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.jbpm.services.api.AdvanceRuntimeDataService.TASK_ATTR_NAME;\n+import static org.jbpm.services.api.query.model.QueryParam.equalsTo;\n+import static org.jbpm.services.api.query.model.QueryParam.list;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class AdvanceRuntimeDataServiceImpl2Test extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AdvanceRuntimeDataServiceImpl2Test.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<>();\n+\n+    private List<Long> processIds;\n+    private KModuleDeploymentUnit deploymentUnit = null;\n+\n+\n+    @Before\n+    public void prepare() {\n+\n+        configureServices();\n+        logger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<>();\n+        processes.add(\"repo/processes/general/SingleHumanTaskWithVarsA.bpmn2\");\n+        processes.add(\"repo/processes/general/SingleHumanTaskWithVarsB.bpmn2\");\n+        processes.add(\"repo/processes/general/SingleHumanTaskWithVarsC.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try (FileOutputStream fs = new FileOutputStream(pom);) {\n+            fs.write(getPom(releaseId).getBytes());\n+        } catch (Exception e) {\n+\n+        }\n+        KieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        assertNotNull(deploymentService);\n+\n+        deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+        assertNotNull(processService);\n+\n+        processIds = new ArrayList<>();\n+\n+        Map<String, Object> inputsA1 = new HashMap<>();\n+        inputsA1.put(\"var_a\", \"myvalue\");\n+        inputsA1.put(\"var_b\", \"othervalue\");\n+        processIds.add(processService.startProcess(deploymentUnit.getIdentifier(), \"test.test_A\", inputsA1));\n+\n+        Map<String, Object> inputsB1 = new HashMap<>();\n+        inputsB1.put(\"var_a\", \"somethingelse\");\n+        inputsB1.put(\"var_b\", \"b_var\");\n+        processIds.add(processService.startProcess(deploymentUnit.getIdentifier(), \"test.test_B\", inputsB1));\n+\n+        Map<String, Object> inputsC1 = new HashMap<>();\n+        inputsC1.put(\"var_c\", \"somethingelse\");\n+        inputsC1.put(\"var_b\", \"b_var\");\n+        processIds.add(processService.startProcess(deploymentUnit.getIdentifier(), \"test.test_C\", inputsC1));\n+\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        for (Long processInstanceId : processIds) {\n+            try {\n+                // let's abort process instance to leave the system in clear state\n+                processService.abortProcessInstance(processInstanceId);\n+\n+                ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+                assertNull(pi);\n+            } catch (ProcessInstanceNotFoundException e) {\n+                // ignore it as it was already completed/aborted\n+            }\n+        }\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+                try {\n+                    deploymentService.undeploy(unit);\n+                } catch (Exception e) {\n+                    // do nothing in case of some failed tests to avoid next test to fail as well\n+                }\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testQueryProcessTaskByVariablesWithOwners() {\n+\n+\n+        List<UserTaskInstanceWithPotOwnerDesc> userTasks = advanceVariableDataService.queryUserTasksByVariables(emptyList(), emptyList(), emptyList(), emptyList(), new QueryContext());\n+\n+        for (UserTaskInstanceWithPotOwnerDesc userTask : userTasks) {\n+            Long taskId = userTask.getTaskId();\n+            String user = userTask.getPotentialOwners().get(0);\n+            userTaskService.start(taskId, user);\n+            Map<String, Object> inputs = userTaskService.getTaskInputContentByTaskId(taskId);\n+            Map<String, Object> output = new HashMap<>(inputs);\n+            output.put(\"task_out_a1\", 3);\n+            output.put(\"task_out_a2\", \"h2\");", "originalCommit": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNzQwMg==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424907402", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-14T06:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1OTAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDA0MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424440041", "body": "I would reword this test method to something more meaningful as this is meant to test `queryCaseByVariablesAndTask` method.", "bodyText": "I would reword this test method to something more meaningful as this is meant to test queryCaseByVariablesAndTask method.", "bodyHTML": "<p dir=\"auto\">I would reword this test method to something more meaningful as this is meant to test <code>queryCaseByVariablesAndTask</code> method.</p>", "author": "afalhambra", "createdAt": "2020-05-13T13:32:37Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/AdvanceCaseRuntimeDataServiceImplTest.java", "diffHunk": "@@ -93,4 +93,24 @@ public void testSearchUserByVariable() {\n \n     }\n \n+    @Test\n+    public void testSearchCaseUserByVariable() {", "originalCommit": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNDgwMA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424904800", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-05-14T06:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDkwMg==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424440902", "body": "Just to confirm - Is this a correct and expected behaviour? When no filter is passed as parameter, we are returning all cases/processes.", "bodyText": "Just to confirm - Is this a correct and expected behaviour? When no filter is passed as parameter, we are returning all cases/processes.", "bodyHTML": "<p dir=\"auto\">Just to confirm - Is this a correct and expected behaviour? When no filter is passed as parameter, we are returning all cases/processes.</p>", "author": "afalhambra", "createdAt": "2020-05-13T13:33:47Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/AdvanceCaseRuntimeDataServiceImplTest.java", "diffHunk": "@@ -93,4 +93,24 @@ public void testSearchUserByVariable() {\n \n     }\n \n+    @Test\n+    public void testSearchCaseUserByVariable() {\n+        Map<String, OrganizationalEntity> roleAssignments = new HashMap<>();\n+        roleAssignments.put(\"owner\", new UserImpl(USER));\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"name\", \"my first case\");\n+        CaseFileInstance caseFile = caseService.newCaseFileInstance(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, data, roleAssignments);\n+\n+        String caseId = caseService.startCase(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, caseFile);\n+\n+        List<ProcessInstanceWithVarsDesc> process = advanceCaseRuntimeDataService.queryCaseByVariablesAndTask(emptyList(), emptyList(), emptyList(), emptyList(), new QueryContext());", "originalCommit": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNTQwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424905401", "bodyText": "correct, in this case will query case with tasks (that is different for query process only)", "author": "elguardian", "createdAt": "2020-05-14T06:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NTI3MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424445271", "body": "Shouldn't we add a task and a variable attribute filter for this test? \r\n\r\nReason for asking is that at the moment, same functionality is tested in the `AdvanceRuntimeDataServiceImpl2Test` java test class cause it's calling the same methods/apis internally, so it might sound redundant to test here again... \r\nbut this might not be always the case in future necessarily and the internal implementation might change or could be split it for instance into several impls, for instance, 1 particular impl for processes and another imp for cases for whatever reason. \r\nwdyt?", "bodyText": "Shouldn't we add a task and a variable attribute filter for this test?\nReason for asking is that at the moment, same functionality is tested in the AdvanceRuntimeDataServiceImpl2Test java test class cause it's calling the same methods/apis internally, so it might sound redundant to test here again...\nbut this might not be always the case in future necessarily and the internal implementation might change or could be split it for instance into several impls, for instance, 1 particular impl for processes and another imp for cases for whatever reason.\nwdyt?", "bodyHTML": "<p dir=\"auto\">Shouldn't we add a task and a variable attribute filter for this test?</p>\n<p dir=\"auto\">Reason for asking is that at the moment, same functionality is tested in the <code>AdvanceRuntimeDataServiceImpl2Test</code> java test class cause it's calling the same methods/apis internally, so it might sound redundant to test here again...<br>\nbut this might not be always the case in future necessarily and the internal implementation might change or could be split it for instance into several impls, for instance, 1 particular impl for processes and another imp for cases for whatever reason.<br>\nwdyt?</p>", "author": "afalhambra", "createdAt": "2020-05-13T13:39:40Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/AdvanceCaseRuntimeDataServiceImplTest.java", "diffHunk": "@@ -93,4 +93,24 @@ public void testSearchUserByVariable() {\n \n     }\n \n+    @Test\n+    public void testSearchCaseUserByVariable() {\n+        Map<String, OrganizationalEntity> roleAssignments = new HashMap<>();\n+        roleAssignments.put(\"owner\", new UserImpl(USER));\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"name\", \"my first case\");\n+        CaseFileInstance caseFile = caseService.newCaseFileInstance(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, data, roleAssignments);\n+\n+        String caseId = caseService.startCase(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, caseFile);\n+\n+        List<ProcessInstanceWithVarsDesc> process = advanceCaseRuntimeDataService.queryCaseByVariablesAndTask(emptyList(), emptyList(), emptyList(), emptyList(), new QueryContext());", "originalCommit": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNjU1MA==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424906550", "bodyText": "they are not testing the same thing and don't have the same data set for test. also change data set modification. If I put this in the other place I would change the entire test.", "author": "elguardian", "createdAt": "2020-05-14T06:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NTI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MDM5NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424470395", "body": "I would use TaskVariable.VariableType.INPUT instead of hardcoding values in the query.\r\n```suggestion\r\n                                 \"WHERE type = \" + TaskVariable.VariableType.INPUT + \" AND (\" + where + \")\\n\" +\r\n```", "bodyText": "I would use TaskVariable.VariableType.INPUT instead of hardcoding values in the query.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             \"WHERE type = 0 AND (\" + where + \")\\n\" +\n          \n          \n            \n                                             \"WHERE type = \" + TaskVariable.VariableType.INPUT + \" AND (\" + where + \")\\n\" +", "bodyHTML": "<p dir=\"auto\">I would use TaskVariable.VariableType.INPUT instead of hardcoding values in the query.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                 <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>WHERE type = <span class=\"x x-first x-last\">0</span> AND (<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> where <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>)<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                 <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>WHERE type = <span class=\"pl-pds x x-first\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-smi x\">TaskVariable</span><span class=\"pl-k x\">.</span><span class=\"pl-smi x\">VariableType</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">INPUT</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x x-last\">\"</span> AND (<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> where <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>)<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-05-13T14:12:53Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +58,155 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributesArg,\n+                                                           List<QueryParam> processVariablesArg,\n+                                                           List<QueryParam> taskVariablesArg,\n+                                                           List<String> ownersArg,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        List<QueryParam> attributes = attributesArg != null ? attributesArg : emptyList();\n+        List<QueryParam> processVariables = processVariablesArg != null ? processVariablesArg : emptyList();\n+        List<QueryParam> taskVariables = taskVariablesArg != null ? taskVariablesArg : emptyList();\n+        List<String> owners = ownersArg != null ? ownersArg : emptyList();\n+\n+\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n-            List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n-            String where = String.join(\" OR \", conditions);\n+        if (!taskVariables.isEmpty()) {\n+            String where = computeVariableExpression(taskVariables, \"V\", \"name\", \"value\");\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +", "originalCommit": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5NDE5Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424494192", "body": "what if `List<String> owners` contains a duplicate owner? the query won't return any data as per query                              `HAVING COUNT(po.entity_id) = :num_owners`\r\n\r\n```suggestion\r\n                query.setParameter(\"num_owners\", owners.stream().distinct().collect(Collectors.toList()));\r\n```", "bodyText": "what if List<String> owners contains a duplicate owner? the query won't return any data as per query                              HAVING COUNT(po.entity_id) = :num_owners\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            query.setParameter(\"num_owners\", owners.size());\n          \n          \n            \n                            query.setParameter(\"num_owners\", owners.stream().distinct().collect(Collectors.toList()));", "bodyHTML": "<p dir=\"auto\">what if <code>List&lt;String&gt; owners</code> contains a duplicate owner? the query won't return any data as per query                              <code>HAVING COUNT(po.entity_id) = :num_owners</code></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                query<span class=\"pl-k\">.</span>setParameter(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>num_owners<span class=\"pl-pds\">\"</span></span>, owners<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">size(</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                query<span class=\"pl-k\">.</span>setParameter(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>num_owners<span class=\"pl-pds\">\"</span></span>, owners<span class=\"pl-k\">.</span><span class=\"x x-first\">stream()</span><span class=\"pl-k x\">.</span><span class=\"x\">distinct()</span><span class=\"pl-k x\">.</span><span class=\"x\">collect(</span><span class=\"pl-smi x\">Collectors</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toList()</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-05-13T14:43:28Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +58,155 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributesArg,\n+                                                           List<QueryParam> processVariablesArg,\n+                                                           List<QueryParam> taskVariablesArg,\n+                                                           List<String> ownersArg,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        List<QueryParam> attributes = attributesArg != null ? attributesArg : emptyList();\n+        List<QueryParam> processVariables = processVariablesArg != null ? processVariablesArg : emptyList();\n+        List<QueryParam> taskVariables = taskVariablesArg != null ? taskVariablesArg : emptyList();\n+        List<String> owners = ownersArg != null ? ownersArg : emptyList();\n+\n+\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n-            List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n-            String where = String.join(\" OR \", conditions);\n+        if (!taskVariables.isEmpty()) {\n+            String where = computeVariableExpression(taskVariables, \"V\", \"name\", \"value\");\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n+            String where = computeVariableExpression(processVariables, \"P\", \"A1.variableId\", \"A1.value\");\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n-\n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n-\n-        Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n-\n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n         }\n-        query.setParameter(\"processType\", processType);\n \n-        addPagination(query, queryContext);\n-        List<Number> ids = query.getResultList();\n-        if (ids.isEmpty()) {\n-            return Collections.emptyList();\n-        }\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n-        // now we get the information\n+        List<Number> ids = emptyList();\n+        EntityManager entityManager = emf.createEntityManager();\n+        try {\n+            Query query = entityManager.createNativeQuery(procSQLString);\n+            taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+            taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+            if (!taskVariables.isEmpty()) {\n+                query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.stream().map(QueryParam::getColumn).distinct().count());\n+            }\n \n+            processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+            processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+            if (!processVariables.isEmpty()) {\n+                query.setParameter(\"NUMBER_OF_PROCVARS\", processVariables.stream().map(QueryParam::getColumn).distinct().count());\n+            }\n+\n+            if (!owners.isEmpty()) {\n+                query.setParameter(\"num_owners\", owners.size());", "originalCommit": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "10990ebf75498ec1d7b40116c219ad19f265ace1", "url": "https://github.com/kiegroup/jbpm/commit/10990ebf75498ec1d7b40116c219ad19f265ace1", "message": "[BAPL-1526] added new function to get process by task attributes and variables", "committedDate": "2020-05-14T08:10:49Z", "type": "forcePushed"}, {"oid": "562519bde5fb373fa6afbaa36867b73619cb3c92", "url": "https://github.com/kiegroup/jbpm/commit/562519bde5fb373fa6afbaa36867b73619cb3c92", "message": "[BAPL-1526] added new function to get process by task attributes and variables", "committedDate": "2020-05-14T13:31:23Z", "type": "forcePushed"}, {"oid": "3d6b013e2d7cd0cb08acb39f954981186d84ad00", "url": "https://github.com/kiegroup/jbpm/commit/3d6b013e2d7cd0cb08acb39f954981186d84ad00", "message": "[BAPL-1526] added new function to get process by task attributes and variables", "committedDate": "2020-05-14T13:50:27Z", "type": "commit"}, {"oid": "3d6b013e2d7cd0cb08acb39f954981186d84ad00", "url": "https://github.com/kiegroup/jbpm/commit/3d6b013e2d7cd0cb08acb39f954981186d84ad00", "message": "[BAPL-1526] added new function to get process by task attributes and variables", "committedDate": "2020-05-14T13:50:27Z", "type": "forcePushed"}]}