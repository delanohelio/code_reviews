{"pr_number": 1720, "pr_title": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)", "pr_author": "elguardian", "pr_createdAt": "2020-08-04T13:05:39Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1720", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NTQ2Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r465685466", "body": "Why is removed? I think this is not exactly a Test class, as there are no assertions.\r\nWe could expand this PR [jbpm#1714](https://github.com/kiegroup/jbpm/pull/1714) to check also new files at certification matrix only for postgres allocated dbs. ", "bodyText": "Why is removed? I think this is not exactly a Test class, as there are no assertions.\nWe could expand this PR jbpm#1714 to check also new files at certification matrix only for postgres allocated dbs.", "bodyHTML": "<p dir=\"auto\">Why is removed? I think this is not exactly a Test class, as there are no assertions.<br>\nWe could expand this PR <a href=\"https://github.com/kiegroup/jbpm/pull/1714\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/kiegroup/jbpm/pull/1714/hovercard\">jbpm#1714</a> to check also new files at certification matrix only for postgres allocated dbs.</p>", "author": "gmunozfe", "createdAt": "2020-08-05T12:20:32Z", "path": "jbpm-db-scripts/src/test/java/org/jbpm/persistence/scripts/GenerateDDLScriptsTests.java", "diffHunk": "@@ -36,33 +35,38 @@\n  * Utility class for generating DDL scripts (create and drop) please ignore it.\n  */\n @RunWith(Parameterized.class)\n-@Ignore", "originalCommit": "416a2a587f021e3465ad4af5eb61ba7b4cbff396", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxNzEwNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r466317105", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-06T10:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NTQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NTk2NA==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r465685964", "body": "Shouldn't it be \"springboot-\" subtype instead of \"new-\"?", "bodyText": "Shouldn't it be \"springboot-\" subtype instead of \"new-\"?", "bodyHTML": "<p dir=\"auto\">Shouldn't it be \"springboot-\" subtype instead of \"new-\"?</p>", "author": "gmunozfe", "createdAt": "2020-08-05T12:21:28Z", "path": "jbpm-db-scripts/src/test/java/org/jbpm/persistence/scripts/GenerateDDLScriptsTests.java", "diffHunk": "@@ -36,33 +35,38 @@\n  * Utility class for generating DDL scripts (create and drop) please ignore it.\n  */\n @RunWith(Parameterized.class)\n-@Ignore\n public class GenerateDDLScriptsTests {\n \n-    private static class ScriptFile {\n+    static {\n+        System.setProperty(\"org.kie.persistence.postgresql.useBytea\", \"false\");\n+    }\n+\n+    public static class ScriptFile {\n \n         private String dialect;\n         private String alias;\n         private String prefix;\n+        private String subtype;\n         private boolean newGenerator;\n \n         public ScriptFile(String dialect, String alias, boolean newGenerator) {\n-            this(dialect, alias, alias, newGenerator);\n+            this(dialect, alias, alias, (newGenerator ? \"new-\" : \"\"), newGenerator);", "originalCommit": "416a2a587f021e3465ad4af5eb61ba7b4cbff396", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxNzI2OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r466317269", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-06T10:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NTk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NzA1Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r465687056", "body": "Same as above, perhaps better merge with this PR [jbpm#1714](https://github.com/kiegroup/jbpm/pull/1714)", "bodyText": "Same as above, perhaps better merge with this PR jbpm#1714", "bodyHTML": "<p dir=\"auto\">Same as above, perhaps better merge with this PR <a href=\"https://github.com/kiegroup/jbpm/pull/1714\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/kiegroup/jbpm/pull/1714/hovercard\">jbpm#1714</a></p>", "author": "gmunozfe", "createdAt": "2020-08-05T12:23:31Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/TestsUtil.java", "diffHunk": "@@ -51,7 +51,7 @@\n             final boolean sortByName, final boolean dropFiles) {\n         final File folderWithScripts = new File(folderWithDDLs.getPath() + File.separator + databaseType.getScriptsFolderName());\n         if (folderWithScripts.exists()) {\n-            Predicate<File> filterNew = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n+            Predicate<File> filterNew = (name) -> name.getName().toLowerCase().contains(\"springboot\") || name.getName().toLowerCase().contains(\"bytea\");", "originalCommit": "416a2a587f021e3465ad4af5eb61ba7b4cbff396", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxNzE4NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r466317185", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-06T10:26:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NzA1Ng=="}], "type": "inlineReview"}, {"oid": "599f21bdc9e3df856eb07da1cfa9dce4808ba200", "url": "https://github.com/kiegroup/jbpm/commit/599f21bdc9e3df856eb07da1cfa9dce4808ba200", "message": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)\n\nadded sql scripts for bytea\nadded type contributor and a new flag for bytea", "committedDate": "2020-08-06T10:25:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MzA1NA==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r466483054", "body": "This quartz validation is failing for non-standard configurations (i.e., 1, 2 and 3 of parameterized configs for postgres and 1 for oracle):\r\n\r\nFor these configurations (e.g. [1]):\r\n_Returned DDL files: [postgresql-springboot-jbpm-schema.sql]_\r\n\r\ninstead of working configurations [0]:\r\n\r\n_Returned DDL files: [postgresql-jbpm-schema.sql, postgresql-jbpm-lo-trigger-clob.sql, quartz_tables_postgres.sql, task_assigning_tables_postgresql.sql]_\r\n\r\nAt least, quartz_tables_postgres.sql should be either returned for all configurations or skipping this validations for all configurations but 0.", "bodyText": "This quartz validation is failing for non-standard configurations (i.e., 1, 2 and 3 of parameterized configs for postgres and 1 for oracle):\nFor these configurations (e.g. [1]):\nReturned DDL files: [postgresql-springboot-jbpm-schema.sql]\ninstead of working configurations [0]:\nReturned DDL files: [postgresql-jbpm-schema.sql, postgresql-jbpm-lo-trigger-clob.sql, quartz_tables_postgres.sql, task_assigning_tables_postgresql.sql]\nAt least, quartz_tables_postgres.sql should be either returned for all configurations or skipping this validations for all configurations but 0.", "bodyHTML": "<p dir=\"auto\">This quartz validation is failing for non-standard configurations (i.e., 1, 2 and 3 of parameterized configs for postgres and 1 for oracle):</p>\n<p dir=\"auto\">For these configurations (e.g. [1]):<br>\n<em>Returned DDL files: [postgresql-springboot-jbpm-schema.sql]</em></p>\n<p dir=\"auto\">instead of working configurations [0]:</p>\n<p dir=\"auto\"><em>Returned DDL files: [postgresql-jbpm-schema.sql, postgresql-jbpm-lo-trigger-clob.sql, quartz_tables_postgres.sql, task_assigning_tables_postgresql.sql]</em></p>\n<p dir=\"auto\">At least, quartz_tables_postgres.sql should be either returned for all configurations or skipping this validations for all configurations but 0.</p>", "author": "gmunozfe", "createdAt": "2020-08-06T15:09:22Z", "path": "jbpm-db-scripts/src/test/java/org/jbpm/persistence/scripts/DDLScriptsTest.java", "diffHunk": "@@ -16,28 +16,79 @@\n \n package org.jbpm.persistence.scripts;\n \n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.jbpm.test.persistence.scripts.DatabaseType;\n+import org.jbpm.test.persistence.scripts.PersistenceUnit;\n import org.jbpm.test.persistence.scripts.ScriptsBase;\n+import org.jbpm.test.persistence.scripts.TestPersistenceContextBase;\n import org.jbpm.test.persistence.scripts.util.ScriptFilter;\n+import org.jbpm.test.persistence.scripts.util.ScriptFilter.Option;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n \n+import static org.jbpm.persistence.scripts.TestPersistenceContext.createAndInitContext;\n import static org.jbpm.test.persistence.scripts.PersistenceUnit.DB_QUARTZ_VALIDATE;\n import static org.jbpm.test.persistence.scripts.PersistenceUnit.DB_TESTING_VALIDATE;\n-import static org.jbpm.persistence.scripts.TestPersistenceContext.createAndInitContext;\n+import static org.jbpm.test.persistence.scripts.util.ScriptFilter.filter;\n+import static org.junit.Assume.assumeTrue;\n \n /**\n  * Contains tests that test DDL scripts.\n  */\n+@RunWith(Parameterized.class)\n public class DDLScriptsTest extends ScriptsBase {\n+\n+    @Parameters\n+    public static Collection<ScriptFilter[]> data() {\n+        ScriptFilter[] standard = new ScriptFilter[]{ScriptFilter.init(false, true), ScriptFilter.init(false, false)};\n+\n+        ScriptFilter[] springBoot = new ScriptFilter[]{ScriptFilter.init(true, true)\n+                                                                   .setSupportedDatabase(DatabaseType.POSTGRESQL, DatabaseType.ORACLE),\n+                                                       ScriptFilter.init(true, false)};\n+\n+\n+        ScriptFilter[] pqlBytea = new ScriptFilter[]{filter(\"postgresql-bytea-jbpm-schema.sql\")\n+                                                                 .setSupportedDatabase(DatabaseType.POSTGRESQL)\n+                                                                 .setOptions(Option.DISALLOW_EMTPY_RESULTS, Option.THROW_ON_SCRIPT_ERROR),\n+                                                     filter(\"postgresql-bytea-jbpm-schema-drop.sql\")};\n+\n+        ScriptFilter[] pqlSpringBootBytea = new ScriptFilter[]{filter(\"postgresql-springboot-bytea-jbpm-schema.sql\")\n+                                                                           .setSupportedDatabase(DatabaseType.POSTGRESQL)\n+                                                                           .setOptions(Option.DISALLOW_EMTPY_RESULTS, Option.THROW_ON_SCRIPT_ERROR),\n+                                                               filter(\"postgresql-springboot-bytea-jbpm-schema-drop.sql\")};\n+\n+        return Arrays.asList(standard, springBoot, pqlBytea, pqlSpringBootBytea);\n+    }\n+\n+    private ScriptFilter createScript;\n+    private ScriptFilter dropScript;\n+\n+    public DDLScriptsTest(ScriptFilter createScript, ScriptFilter dropScript) {\n+        this.createScript = createScript;\n+        this.dropScript = dropScript;\n+    }\n+\n+    @Before\n+    public void prepare() {\n+        TestPersistenceContextBase scriptRunnerContext = createAndInitContext(PersistenceUnit.SCRIPT_RUNNER);\n+        DatabaseType dbType = scriptRunnerContext.getDatabaseType();\n+        assumeTrue(\"Scripts test not supported this database \" + dbType, createScript.isSupportedDatabase(dbType));\n+    }\n     /**\n      * Tests that DB schema is created properly using DDL scripts.\n      */\n     @Test\n     public void createAndDropSchemaUsingDDLs() throws Exception {\n-        executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, ScriptFilter.init(false, true));\n+        executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, createScript);\n         validateAndPersistProcess();\n         validateQuartz();", "originalCommit": "599f21bdc9e3df856eb07da1cfa9dce4808ba200", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2a5d072b7f0cb84d1c95ff2e06bf9cf4ee2ea93", "url": "https://github.com/kiegroup/jbpm/commit/b2a5d072b7f0cb84d1c95ff2e06bf9cf4ee2ea93", "message": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)\n\nadded sql scripts for bytea\nadded type contributor and a new flag for bytea", "committedDate": "2020-08-07T07:37:49Z", "type": "forcePushed"}, {"oid": "162100a7a16f3b316dd0f17b33e1924effb9f2d3", "url": "https://github.com/kiegroup/jbpm/commit/162100a7a16f3b316dd0f17b33e1924effb9f2d3", "message": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)\n\nadded sql scripts for bytea\nadded type contributor and a new flag for bytea", "committedDate": "2020-08-07T07:38:35Z", "type": "forcePushed"}, {"oid": "5dec37df8cb0a146403532d8a39ec8ac1fc86174", "url": "https://github.com/kiegroup/jbpm/commit/5dec37df8cb0a146403532d8a39ec8ac1fc86174", "message": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)\n\nadded sql scripts for bytea\nadded type contributor and a new flag for bytea", "committedDate": "2020-08-09T09:04:53Z", "type": "forcePushed"}, {"oid": "0f1acf46d159703dfbbc5ca81e46619d954d78a4", "url": "https://github.com/kiegroup/jbpm/commit/0f1acf46d159703dfbbc5ca81e46619d954d78a4", "message": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)\n\nadded sql scripts for bytea\nadded type contributor and a new flag for bytea", "committedDate": "2020-08-10T07:02:06Z", "type": "forcePushed"}, {"oid": "7aefb626aa5dc7ee98c24b9a50f00946edd4e149", "url": "https://github.com/kiegroup/jbpm/commit/7aefb626aa5dc7ee98c24b9a50f00946edd4e149", "message": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)\n\nadded sql scripts for bytea\nadded type contributor and a new flag for bytea", "committedDate": "2020-08-10T07:06:23Z", "type": "forcePushed"}, {"oid": "7514e428b9741a32d6875389bcf17c8897503fe4", "url": "https://github.com/kiegroup/jbpm/commit/7514e428b9741a32d6875389bcf17c8897503fe4", "message": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)\n\nadded sql scripts for bytea\nadded type contributor and a new flag for bytea", "committedDate": "2020-08-11T15:24:54Z", "type": "commit"}, {"oid": "7514e428b9741a32d6875389bcf17c8897503fe4", "url": "https://github.com/kiegroup/jbpm/commit/7514e428b9741a32d6875389bcf17c8897503fe4", "message": "[JBPM-9264] Provide alternative to oid column in Postgres (bytea)\n\nadded sql scripts for bytea\nadded type contributor and a new flag for bytea", "committedDate": "2020-08-11T15:24:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ2NjU0OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r468466549", "body": "It can be made `static` class", "bodyText": "It can be made static class", "bodyHTML": "<p dir=\"auto\">It can be made <code>static</code> class</p>", "author": "afalhambra", "createdAt": "2020-08-11T10:00:16Z", "path": "jbpm-persistence/jbpm-persistence-jpa/src/main/java/org/jbpm/persistence/jpa/hibernate/PostgreSQLByteaTypeContributor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.persistence.jpa.hibernate;\n+\n+import org.hibernate.boot.model.TypeContributions;\n+import org.hibernate.boot.model.TypeContributor;\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.engine.jdbc.spi.JdbcServices;\n+import org.hibernate.service.ServiceRegistry;\n+import org.hibernate.type.StandardBasicTypeTemplate;\n+import org.hibernate.type.StandardBasicTypes;\n+import org.hibernate.type.descriptor.java.PrimitiveByteArrayTypeDescriptor;\n+import org.hibernate.type.descriptor.sql.BinaryTypeDescriptor;\n+\n+\n+public class PostgreSQLByteaTypeContributor implements TypeContributor {\n+\n+    public class ByteaContributorType extends StandardBasicTypeTemplate<byte[]> {", "originalCommit": "7aefb626aa5dc7ee98c24b9a50f00946edd4e149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3ODE0OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r468578149", "body": "Typo\r\n\r\n```suggestion\r\n        DISALLOW_EMPTY_RESULTS, // if the filter allows no results\r\n```", "bodyText": "Typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DISALLOW_EMTPY_RESULTS, // if the filter allow no results\n          \n          \n            \n                    DISALLOW_EMPTY_RESULTS, // if the filter allows no results", "bodyHTML": "<p dir=\"auto\">Typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"36\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1 x x-first x-last\">DISALLOW_EMTPY_RESULTS</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> if the filter <span class=\"x x-first x-last\">allow</span> no results</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"36\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1 x x-first x-last\">DISALLOW_EMPTY_RESULTS</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> if the filter <span class=\"x x-first x-last\">allows</span> no results</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-11T13:27:44Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/ScriptFilter.java", "diffHunk": "@@ -16,25 +16,87 @@\n \n package org.jbpm.test.persistence.scripts.util;\n \n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+\n+import org.jbpm.test.persistence.scripts.DatabaseType;\n+\n+\n public class ScriptFilter {\n \n-    private boolean springboot;\n-    private boolean create;\n-    \n-    public ScriptFilter(boolean springboot, boolean create) {\n-        this.springboot = springboot;\n-        this.create = create;\n+    public enum Option {\n+        DISALLOW_EMTPY_RESULTS, // if the filter allow no results", "originalCommit": "7aefb626aa5dc7ee98c24b9a50f00946edd4e149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMTA2MA==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r469031060", "body": "Typo\r\n\r\n```suggestion\r\n    public Map<String, Object> getEnvironment() {\r\n```", "bodyText": "Typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Map<String, Object> getEnvironent() {\n          \n          \n            \n                public Map<String, Object> getEnvironment() {", "bodyHTML": "<p dir=\"auto\">Typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"115\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> <span class=\"x x-first x-last\">getEnvironent</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"115\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt;</span> <span class=\"x x-first x-last\">getEnvironment</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-12T06:24:29Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/ScriptFilter.java", "diffHunk": "@@ -16,25 +16,104 @@\n \n package org.jbpm.test.persistence.scripts.util;\n \n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+\n+import org.jbpm.test.persistence.scripts.DatabaseType;\n+\n+\n public class ScriptFilter {\n \n-    private boolean springboot;\n-    private boolean create;\n-    \n-    public ScriptFilter(boolean springboot, boolean create) {\n-        this.springboot = springboot;\n-        this.create = create;\n+    public enum Option {\n+        DISALLOW_EMTPY_RESULTS, // if the filter allow no results\n+        THROW_ON_SCRIPT_ERROR // if the filter allows script errors\n+    }\n+\n+    private Set<DatabaseType> dbTypes;\n+    private Set<Option> options;\n+    private List<Predicate<File>> predicates;\n+    private Map<String, Object> env;\n+\n+    @SafeVarargs\n+    public ScriptFilter(Predicate<File>... filters) {\n+        this.predicates = new ArrayList<>();\n+        this.options = new TreeSet<>();\n+        this.dbTypes = new TreeSet<>();\n+        Collections.addAll(this.dbTypes, DatabaseType.values());\n+        Collections.addAll(this.predicates, filters);\n+        env = new HashMap<String, Object>();\n+    }\n+\n+    @SafeVarargs\n+    public static ScriptFilter create(Predicate<File>... filters) {\n+        return new ScriptFilter(filters);\n     }\n-    \n+\n+    public static ScriptFilter filter(String... scripts) {\n+        Predicate<File> predicate = Arrays.asList(scripts).stream().map(s -> (Predicate<File>) file -> file.getName().contains(s)).reduce(x -> false, Predicate::or);\n+        ScriptFilter filter = new ScriptFilter(predicate);\n+        return filter;\n+    }\n+\n+    public ScriptFilter env(String key, Object value) {\n+        env.put(key, value);\n+        return this;\n+    }\n+\n     public static ScriptFilter init(boolean springboot, boolean create) {\n-        return new ScriptFilter(springboot, create);\n+        Predicate<File> filterExtension = file -> file.getName().toLowerCase().endsWith(\".sql\");\n+\n+        Predicate<File> filterSpringboot = file -> file.getName().toLowerCase().contains(\"springboot\");\n+        filterSpringboot = springboot ? filterSpringboot : filterSpringboot.negate();\n+\n+        Predicate<File> filterBytea = file -> !file.getName().toLowerCase().contains(\"bytea\");\n+\n+        Predicate<File> filterName = file -> file.getName().contains(\"drop\");\n+        filterName = !create ? filterName : filterName.negate();\n+        ScriptFilter filter = new ScriptFilter(filterExtension, filterName, filterSpringboot, filterBytea);\n+        if (create) {\n+            filter.setOptions(Option.DISALLOW_EMTPY_RESULTS, Option.THROW_ON_SCRIPT_ERROR);\n+        }\n+        return filter;\n+    }\n+\n+    public ScriptFilter setSupportedDatabase(DatabaseType... types) {\n+        this.dbTypes.clear();\n+        Collections.addAll(this.dbTypes, types);\n+        return this;\n+    }\n+\n+    public boolean isSupportedDatabase(DatabaseType type) {\n+        return dbTypes.contains(type);\n+    }\n+\n+    public ScriptFilter setOptions(Option... elements) {\n+        Collections.addAll(this.options, elements);\n+        return this;\n     }\n-    \n-    public boolean isSpringboot() {\n-        return springboot;\n+\n+    public boolean hasOption(Option option) {\n+        return options.contains(option);\n+    }\n+\n+    public Predicate<File> build() {\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n     }\n-    \n-    public boolean isCreate() {\n-        return create;\n+\n+    public Set<DatabaseType> getSupportedDatabase() {\n+        return this.dbTypes;\n     }\n+\n+    public Map<String, Object> getEnvironent() {", "originalCommit": "7514e428b9741a32d6875389bcf17c8897503fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3MzUwNg==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r469173506", "body": "\r\n```suggestion\r\n        env = new HashMap<>();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    env = new HashMap<String, Object>();\n          \n          \n            \n                    env = new HashMap<>();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        env <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;<span class=\"pl-smi x x-first\">String</span><span class=\"x\">, </span><span class=\"pl-smi x x-last\">Object</span>&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        env <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashMap&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-12T10:52:32Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/ScriptFilter.java", "diffHunk": "@@ -16,25 +16,104 @@\n \n package org.jbpm.test.persistence.scripts.util;\n \n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+\n+import org.jbpm.test.persistence.scripts.DatabaseType;\n+\n+\n public class ScriptFilter {\n \n-    private boolean springboot;\n-    private boolean create;\n-    \n-    public ScriptFilter(boolean springboot, boolean create) {\n-        this.springboot = springboot;\n-        this.create = create;\n+    public enum Option {\n+        DISALLOW_EMTPY_RESULTS, // if the filter allow no results\n+        THROW_ON_SCRIPT_ERROR // if the filter allows script errors\n+    }\n+\n+    private Set<DatabaseType> dbTypes;\n+    private Set<Option> options;\n+    private List<Predicate<File>> predicates;\n+    private Map<String, Object> env;\n+\n+    @SafeVarargs\n+    public ScriptFilter(Predicate<File>... filters) {\n+        this.predicates = new ArrayList<>();\n+        this.options = new TreeSet<>();\n+        this.dbTypes = new TreeSet<>();\n+        Collections.addAll(this.dbTypes, DatabaseType.values());\n+        Collections.addAll(this.predicates, filters);\n+        env = new HashMap<String, Object>();", "originalCommit": "7514e428b9741a32d6875389bcf17c8897503fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NDIwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r469174201", "body": "```suggestion\r\n        Predicate<File> predicate = Arrays.stream(scripts).map(s -> (Predicate<File>) file -> file.getName().contains(s)).reduce(x -> false, Predicate::or);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Predicate<File> predicate = Arrays.asList(scripts).stream().map(s -> (Predicate<File>) file -> file.getName().contains(s)).reduce(x -> false, Predicate::or);\n          \n          \n            \n                    Predicate<File> predicate = Arrays.stream(scripts).map(s -> (Predicate<File>) file -> file.getName().contains(s)).reduce(x -> false, Predicate::or);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">Predicate&lt;<span class=\"pl-smi\">File</span>&gt;</span> predicate <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span><span class=\"x x-first\">asList(scripts)</span><span class=\"pl-k x x-last\">.</span>stream()<span class=\"pl-k\">.</span>map(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (<span class=\"pl-k\">Predicate&lt;<span class=\"pl-smi\">File</span>&gt;</span>) file <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> file<span class=\"pl-k\">.</span>getName()<span class=\"pl-k\">.</span>contains(s))<span class=\"pl-k\">.</span>reduce(x <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">false</span>, <span class=\"pl-smi\">Predicate</span><span class=\"pl-k\">::</span>or);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">Predicate&lt;<span class=\"pl-smi\">File</span>&gt;</span> predicate <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>stream(<span class=\"x x-first x-last\">scripts</span>)<span class=\"pl-k\">.</span>map(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (<span class=\"pl-k\">Predicate&lt;<span class=\"pl-smi\">File</span>&gt;</span>) file <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> file<span class=\"pl-k\">.</span>getName()<span class=\"pl-k\">.</span>contains(s))<span class=\"pl-k\">.</span>reduce(x <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">false</span>, <span class=\"pl-smi\">Predicate</span><span class=\"pl-k\">::</span>or);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-12T10:53:56Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/ScriptFilter.java", "diffHunk": "@@ -16,25 +16,104 @@\n \n package org.jbpm.test.persistence.scripts.util;\n \n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+\n+import org.jbpm.test.persistence.scripts.DatabaseType;\n+\n+\n public class ScriptFilter {\n \n-    private boolean springboot;\n-    private boolean create;\n-    \n-    public ScriptFilter(boolean springboot, boolean create) {\n-        this.springboot = springboot;\n-        this.create = create;\n+    public enum Option {\n+        DISALLOW_EMTPY_RESULTS, // if the filter allow no results\n+        THROW_ON_SCRIPT_ERROR // if the filter allows script errors\n+    }\n+\n+    private Set<DatabaseType> dbTypes;\n+    private Set<Option> options;\n+    private List<Predicate<File>> predicates;\n+    private Map<String, Object> env;\n+\n+    @SafeVarargs\n+    public ScriptFilter(Predicate<File>... filters) {\n+        this.predicates = new ArrayList<>();\n+        this.options = new TreeSet<>();\n+        this.dbTypes = new TreeSet<>();\n+        Collections.addAll(this.dbTypes, DatabaseType.values());\n+        Collections.addAll(this.predicates, filters);\n+        env = new HashMap<String, Object>();\n+    }\n+\n+    @SafeVarargs\n+    public static ScriptFilter create(Predicate<File>... filters) {\n+        return new ScriptFilter(filters);\n     }\n-    \n+\n+    public static ScriptFilter filter(String... scripts) {\n+        Predicate<File> predicate = Arrays.asList(scripts).stream().map(s -> (Predicate<File>) file -> file.getName().contains(s)).reduce(x -> false, Predicate::or);", "originalCommit": "7514e428b9741a32d6875389bcf17c8897503fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NTE3Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r469175173", "body": "Do we really need `TreeSet`, why not `HashSet`?", "bodyText": "Do we really need TreeSet, why not HashSet?", "bodyHTML": "<p dir=\"auto\">Do we really need <code>TreeSet</code>, why not <code>HashSet</code>?</p>", "author": "afalhambra", "createdAt": "2020-08-12T10:56:00Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/ScriptFilter.java", "diffHunk": "@@ -16,25 +16,104 @@\n \n package org.jbpm.test.persistence.scripts.util;\n \n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+\n+import org.jbpm.test.persistence.scripts.DatabaseType;\n+\n+\n public class ScriptFilter {\n \n-    private boolean springboot;\n-    private boolean create;\n-    \n-    public ScriptFilter(boolean springboot, boolean create) {\n-        this.springboot = springboot;\n-        this.create = create;\n+    public enum Option {\n+        DISALLOW_EMTPY_RESULTS, // if the filter allow no results\n+        THROW_ON_SCRIPT_ERROR // if the filter allows script errors\n+    }\n+\n+    private Set<DatabaseType> dbTypes;\n+    private Set<Option> options;\n+    private List<Predicate<File>> predicates;\n+    private Map<String, Object> env;\n+\n+    @SafeVarargs\n+    public ScriptFilter(Predicate<File>... filters) {\n+        this.predicates = new ArrayList<>();\n+        this.options = new TreeSet<>();\n+        this.dbTypes = new TreeSet<>();", "originalCommit": "7514e428b9741a32d6875389bcf17c8897503fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3NzY2MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1720#discussion_r469177661", "body": "`folderWithScripts.listFiles()` might be null\r\n\r\n```suggestion\r\n        File[] foundFiles = Arrays.stream(Objects.requireNonNull(folderWithScripts.listFiles())).filter(scriptFilter.build()).toArray(File[]::new);\r\n```", "bodyText": "folderWithScripts.listFiles() might be null\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    File[] foundFiles = Arrays.asList(folderWithScripts.listFiles()).stream().filter(scriptFilter.build()).toArray(File[]::new);\n          \n          \n            \n                    File[] foundFiles = Arrays.stream(Objects.requireNonNull(folderWithScripts.listFiles())).filter(scriptFilter.build()).toArray(File[]::new);", "bodyHTML": "<p dir=\"auto\"><code>folderWithScripts.listFiles()</code> might be null</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">File</span>[] foundFiles <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">asList(</span>folderWithScripts<span class=\"pl-k\">.</span>listFiles())<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">stream(</span>)<span class=\"pl-k\">.</span>filter(scriptFilter<span class=\"pl-k\">.</span>build())<span class=\"pl-k\">.</span>toArray(<span class=\"pl-k\">File</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">File</span>[] foundFiles <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span><span class=\"x x-first\">stream(</span><span class=\"pl-smi x\">Objects</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">requireNonNull(</span>folderWithScripts<span class=\"pl-k\">.</span>listFiles()))<span class=\"pl-k\">.</span>filter(scriptFilter<span class=\"pl-k\">.</span>build())<span class=\"pl-k\">.</span>toArray(<span class=\"pl-k\">File</span>[]<span class=\"pl-k\">::</span><span class=\"pl-k\">new</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-08-12T11:01:06Z", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/TestsUtil.java", "diffHunk": "@@ -53,14 +52,8 @@\n             logger.warn(\"Folder with DDLs doesn't exist {}\", folderWithDDLs);\n             return new File[0];\n         }\n-        \n-        Predicate<File> filterExtension = file -> file.getName().toLowerCase().endsWith(\".sql\");\n-        Predicate<File> filterSpringboot = file -> file.getName().toLowerCase().contains(\"springboot\");\n-        Predicate<File> filterName = file -> file.getName().contains(\"drop\");\n-        Predicate<File> filter = filterExtension.and((!scriptFilter.isCreate()) ? filterName : filterName.negate())\n-                                                .and((scriptFilter.isSpringboot()) ? filterSpringboot : filterSpringboot.negate());\n-        \n-        File[] foundFiles = Arrays.asList(folderWithScripts.listFiles()).stream().filter(filter).toArray(File[]::new);\n+\n+        File[] foundFiles = Arrays.asList(folderWithScripts.listFiles()).stream().filter(scriptFilter.build()).toArray(File[]::new);", "originalCommit": "7514e428b9741a32d6875389bcf17c8897503fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}