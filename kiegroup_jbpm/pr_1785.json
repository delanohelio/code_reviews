{"pr_number": 1785, "pr_title": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer", "pr_author": "fjtirado", "pr_createdAt": "2020-10-26T10:21:48Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1785", "timeline": [{"oid": "66f184840ca54a49470946922791ca80d0511997", "url": "https://github.com/kiegroup/jbpm/commit/66f184840ca54a49470946922791ca80d0511997", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-26T10:27:35Z", "type": "forcePushed"}, {"oid": "97c0912006e6c415947bbc097f91c382db53232f", "url": "https://github.com/kiegroup/jbpm/commit/97c0912006e6c415947bbc097f91c382db53232f", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-26T10:34:00Z", "type": "forcePushed"}, {"oid": "fe2a2e829cdbc77b6d632713cf07c6785eed9ea4", "url": "https://github.com/kiegroup/jbpm/commit/fe2a2e829cdbc77b6d632713cf07c6785eed9ea4", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-26T13:33:28Z", "type": "forcePushed"}, {"oid": "6117d739b107c1109dddeddb52424c310c5100a1", "url": "https://github.com/kiegroup/jbpm/commit/6117d739b107c1109dddeddb52424c310c5100a1", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-27T08:46:34Z", "type": "forcePushed"}, {"oid": "2a6b574e70fbc9fdee3d581f011bd533b00dd191", "url": "https://github.com/kiegroup/jbpm/commit/2a6b574e70fbc9fdee3d581f011bd533b00dd191", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-27T08:50:27Z", "type": "forcePushed"}, {"oid": "696f487eea3b6904f942fc337cf4f09b2ced3ccc", "url": "https://github.com/kiegroup/jbpm/commit/696f487eea3b6904f942fc337cf4f09b2ced3ccc", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-27T09:04:42Z", "type": "forcePushed"}, {"oid": "4c2beda9c311d3be83c5ce57f1e09ca908b37add", "url": "https://github.com/kiegroup/jbpm/commit/4c2beda9c311d3be83c5ce57f1e09ca908b37add", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-27T11:39:18Z", "type": "forcePushed"}, {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec", "url": "https://github.com/kiegroup/jbpm/commit/7bbd95359b1239eaede0e50e32c4272cc227bcec", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-29T08:02:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MTYwNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514341605", "body": "Probably not required, but maybe it's worth checking - `clear` method in this class, shouldn't also be clearing rest of the member such as `signals`, `signalsMetadata` and `messages` (just for consistency)?", "bodyText": "Probably not required, but maybe it's worth checking - clear method in this class, shouldn't also be clearing rest of the member such as signals, signalsMetadata and messages (just for consistency)?", "bodyHTML": "<p dir=\"auto\">Probably not required, but maybe it's worth checking - <code>clear</code> method in this class, shouldn't also be clearing rest of the member such as <code>signals</code>, <code>signalsMetadata</code> and <code>messages</code> (just for consistency)?</p>", "author": "afalhambra", "createdAt": "2020-10-29T15:17:57Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -229,6 +249,8 @@ public ProcessDescriptor clone() {\n         cloned.unqualifiedClasses = new HashSet<String>(this.unqualifiedClasses);\n         cloned.signals = new HashSet<String>(this.signals);\n         cloned.globals = new HashSet<String>(this.globals);\n+        cloned.signalsMetadata = new HashSet<>(this.signalsMetadata);\n+        cloned.messages = new HashSet<>(this.messages);", "originalCommit": "7bbd95359b1239eaede0e50e32c4272cc227bcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MTYxMg==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515151612", "bodyText": "Probably, but since Im not sure and they are not related with this JIRA, I refrained myself and decided to not clear them", "author": "fjtirado", "createdAt": "2020-10-30T14:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MTYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MDk1Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514360957", "body": "It's a little ambiguous here - id and name are both the same, so maybe it's worth saying `@return name of the signals defined in the process` (just avoid confusion)\r\n```suggestion\r\n     * Returns process definition signals names.\r\n     * @return names of the signals defined in the process\r\n```", "bodyText": "It's a little ambiguous here - id and name are both the same, so maybe it's worth saying @return name of the signals defined in the process (just avoid confusion)\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns process definition signals names.\n          \n          \n            \n                 * @return id of the signals defined in the process\n          \n          \n            \n                 * Returns process definition signals names.\n          \n          \n            \n                 * @return names of the signals defined in the process", "bodyHTML": "<p dir=\"auto\">It's a little ambiguous here - id and name are both the same, so maybe it's worth saying <code>@return name of the signals defined in the process</code> (just avoid confusion)</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"94\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> process definition signals names.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"95\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"x x-first x-last\">id</span> of the signals defined in the process</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"94\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> process definition signals names.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"95\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"x x-first x-last\">names</span> of the signals defined in the process</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-10-29T15:41:56Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/ProcessDefinition.java", "diffHunk": "@@ -90,11 +91,17 @@\n     Collection<String> getReusableSubProcesses();\n \n     /**\n-     * Returns process definition signals.\n-     * @return signals\n+     * Returns process definition signals names.\n+     * @return id of the signals defined in the process", "originalCommit": "7bbd95359b1239eaede0e50e32c4272cc227bcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MjEyNA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515152124", "bodyText": "not the same, id and name might be different and this method is returning the ids", "author": "fjtirado", "createdAt": "2020-10-30T14:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MDk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjI1MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514366251", "body": "Maybe it's worth checking if `signal` is not `null` to avoid any potential NPE - wdyt?", "bodyText": "Maybe it's worth checking if signal is not null to avoid any potential NPE - wdyt?", "bodyHTML": "<p dir=\"auto\">Maybe it's worth checking if <code>signal</code> is not <code>null</code> to avoid any potential NPE - wdyt?</p>", "author": "afalhambra", "createdAt": "2020-10-29T15:48:33Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescImpl.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.model;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.jbpm.services.api.model.SignalType;\n+\n+public class SignalDescImpl implements SignalDesc {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String id;\n+    private String name;\n+    private String structureRef;\n+    private SignalType signalType;\n+\n+    public static SignalDescImpl from(Signal signal) {\n+        return new SignalDescImpl(signal.getId(), signal.getName(), signal.getStructureRef(), SignalType.SIGNAL);", "originalCommit": "7bbd95359b1239eaede0e50e32c4272cc227bcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1Mjg5NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515152895", "bodyText": "signal is not expected to be null there, if it is a runtime will be thrown anyway", "author": "fjtirado", "createdAt": "2020-10-30T14:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjM3Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514366372", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "afalhambra", "createdAt": "2020-10-29T15:48:42Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescImpl.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.model;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.jbpm.services.api.model.SignalType;\n+\n+public class SignalDescImpl implements SignalDesc {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String id;\n+    private String name;\n+    private String structureRef;\n+    private SignalType signalType;\n+\n+    public static SignalDescImpl from(Signal signal) {\n+        return new SignalDescImpl(signal.getId(), signal.getName(), signal.getStructureRef(), SignalType.SIGNAL);\n+    }\n+\n+    public static SignalDescImpl from(Message message) {\n+        return new SignalDescImpl(message.getId(), message.getName(), message.getType(), SignalType.MESSAGE);", "originalCommit": "7bbd95359b1239eaede0e50e32c4272cc227bcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MzgyMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515153821", "bodyText": "same rationale, message must not be null, since this is unexpected, it is acceptable to have the runtime", "author": "fjtirado", "createdAt": "2020-10-30T14:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNjk0NA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514916944", "body": "I like `pepe` :) but I'd change to something more meaningful so it's easier and quicker to understand what these arguments are meant for at first sight.", "bodyText": "I like pepe :) but I'd change to something more meaningful so it's easier and quicker to understand what these arguments are meant for at first sight.", "bodyHTML": "<p dir=\"auto\">I like <code>pepe</code> :) but I'd change to something more meaningful so it's easier and quicker to understand what these arguments are meant for at first sight.</p>", "author": "afalhambra", "createdAt": "2020-10-30T07:39:04Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/SignalDescImplTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.kie.services.impl.model.SignalDescImpl;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class SignalDescImplTest {\n+\n+    @Test\n+    public void testEqualsHashCode() {\n+        SignalDesc signal1 = SignalDescImpl.from(new Signal(\"pepe\", \"pepe\", \"pepe\"));\n+        SignalDesc signal2 = SignalDescImpl.from(new Signal(\"pepe\", \"pepe\", \"pepe\"));", "originalCommit": "7bbd95359b1239eaede0e50e32c4272cc227bcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1ODY0MA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515158640", "bodyText": "ok, I technically \"abuse\" pepe here, but because I want to emphasize that everything is equals and despite of it, since one SignalDesc come from Signal object and another SignalDesc come from Message, theere are two instances at the end in the set. Changed anyway", "author": "fjtirado", "createdAt": "2020-10-30T14:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNjk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514925095", "body": "sorry for asking but I can't see any potential backward compatibility issue here, do you mind clarifying? thanks!", "bodyText": "sorry for asking but I can't see any potential backward compatibility issue here, do you mind clarifying? thanks!", "bodyHTML": "<p dir=\"auto\">sorry for asking but I can't see any potential backward compatibility issue here, do you mind clarifying? thanks!</p>", "author": "afalhambra", "createdAt": "2020-10-30T07:59:59Z", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -587,17 +589,26 @@ protected String checkSignalAndConvertToRealSignalNam(ExtensibleXmlParser parser\n         }\n         signalNames.add(signalName);\n \n-        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(\"Signals\");\n+        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(SIGNALS);\n         if (signals != null ) {\n             if( signals.containsKey(signalName)) {\n                 Signal signal = signals.get(signalName);\n                 signalName = signal.getName();\n                 if (signalName == null) {\n                     throw new IllegalArgumentException(\"Signal definition must have a name attribute\");\n                 }\n+            } else {\n+                // align signals metadata with signal names \n+                // (for backward compatibility we need to support signals even if not defined)\n+                signals.put(signalName, new Signal(signalName, signalName, null));", "originalCommit": "7bbd95359b1239eaede0e50e32c4272cc227bcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2MDAxNg==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515160016", "bodyText": "Our engine is supporting undefined signals (meaning that you can put a signal name in an intermediate event without a signal definition). I cannot enforce that now (because process that are now considered validated, wont be anymore), so I have to add this comparison in code", "author": "fjtirado", "createdAt": "2020-10-30T14:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMTgxMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515901811", "bodyText": "Any time you create a signal in the bpmn2 modeler should create a signal element. So this should not be needed.\nThis is actually hiding a problem in the bpmn2 modeler IMO if that is happening.\nThere are few cases where signals are used to implement something else. They should not be defined as signals but messages.\nStart Message (implemented as signal)\nBoundary events (messages BoundaryEventHandler)\ncatching events (messages)\nthis should be removed.\nIn spite they are implemented as signal you need to make a difference in objects there.", "author": "elguardian", "createdAt": "2020-11-02T11:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzOTk1MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r516539951", "bodyText": "There are some processes with have a signal ref, but not define signal object, this code is trying to completate that scenario\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/signal.bpmn", "author": "fjtirado", "createdAt": "2020-11-03T09:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MzUwOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r516553509", "bodyText": "After talking with Enrique, this non defined signals should not be exposed externally", "author": "fjtirado", "createdAt": "2020-11-03T10:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ=="}], "type": "inlineReview"}, {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "url": "https://github.com/kiegroup/jbpm/commit/ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-10-30T15:07:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzA2OA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515903068", "body": "this is redundant as we have the signal object here already.", "bodyText": "this is redundant as we have the signal object here already.", "bodyHTML": "<p dir=\"auto\">this is redundant as we have the signal object here already.</p>", "author": "elguardian", "createdAt": "2020-11-02T11:16:31Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -64,6 +66,8 @@\n     private Set<String> referencedRules = new HashSet<String>(1);\n \n     private Collection<String> signals = Collections.emptySet();", "originalCommit": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzY3Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515903672", "body": "This objects are coming from bpm2 parser. They should not be here.\r\nyou have an object already for this SignalDesc.\r\nI dont see the counter part MessageDesc", "bodyText": "This objects are coming from bpm2 parser. They should not be here.\nyou have an object already for this SignalDesc.\nI dont see the counter part MessageDesc", "bodyHTML": "<p dir=\"auto\">This objects are coming from bpm2 parser. They should not be here.<br>\nyou have an object already for this SignalDesc.<br>\nI dont see the counter part MessageDesc</p>", "author": "elguardian", "createdAt": "2020-11-02T11:17:46Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -64,6 +66,8 @@\n     private Set<String> referencedRules = new HashSet<String>(1);\n \n     private Collection<String> signals = Collections.emptySet();\n+    private Collection<Signal> signalsMetadata = Collections.emptySet();\n+    private Collection<Message> messages = Collections.emptySet();", "originalCommit": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDE0Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515904147", "body": "it is not signal metadata... it is the signal element it self. change for a more descriptive name. i.e signallement or signalobject.", "bodyText": "it is not signal metadata... it is the signal element it self. change for a more descriptive name. i.e signallement or signalobject.", "bodyHTML": "<p dir=\"auto\">it is not signal metadata... it is the signal element it self. change for a more descriptive name. i.e signallement or signalobject.</p>", "author": "elguardian", "createdAt": "2020-11-02T11:18:41Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -177,6 +181,22 @@ public void setSignals( Collection<String> signals ) {\n        this.signals = signals;\n     }\n \n+    public Collection<Signal> getSignalsMetadata() {\n+        return signalsMetadata;", "originalCommit": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDQ5OA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515904498", "body": "same as before. change to a more descriptive name. this is not the metadata but  the element itself.", "bodyText": "same as before. change to a more descriptive name. this is not the metadata but  the element itself.", "bodyHTML": "<p dir=\"auto\">same as before. change to a more descriptive name. this is not the metadata but  the element itself.</p>", "author": "elguardian", "createdAt": "2020-11-02T11:19:21Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "diffHunk": "@@ -210,6 +215,23 @@ public void setSignals(Collection<String> signals) {\n         this.signals = signals;\n     }\n \n+    @Override\n+    public Collection<SignalDesc> getSignalsMetadata() {", "originalCommit": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDkxMA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515904910", "body": "this should not be here. create a dependency with the parser.\r\ntry to put this logic in ServicesProcessDataEventListener", "bodyText": "this should not be here. create a dependency with the parser.\ntry to put this logic in ServicesProcessDataEventListener", "bodyHTML": "<p dir=\"auto\">this should not be here. create a dependency with the parser.<br>\ntry to put this logic in ServicesProcessDataEventListener</p>", "author": "elguardian", "createdAt": "2020-11-02T11:20:00Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "diffHunk": "@@ -210,6 +215,23 @@ public void setSignals(Collection<String> signals) {\n         this.signals = signals;\n     }\n \n+    @Override\n+    public Collection<SignalDesc> getSignalsMetadata() {\n+        return signalsDesc;\n+    }\n+\n+    public void setSignalsMetadata(Collection<Signal> signals) {", "originalCommit": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNTU0OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515905549", "body": "there is no signal type only id, name and structure ref.", "bodyText": "there is no signal type only id, name and structure ref.", "bodyHTML": "<p dir=\"auto\">there is no signal type only id, name and structure ref.</p>", "author": "elguardian", "createdAt": "2020-11-02T11:21:19Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/SignalDesc.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.services.api.model;\n+\n+import java.io.Serializable;\n+\n+public interface SignalDesc extends Serializable {\n+\n+    String getId();\n+\n+    String getName();\n+\n+    String getStructureRef();\n+\n+    SignalType getSignalType();", "originalCommit": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNzUzMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515907531", "body": "this should not be here. create a dependency with the parser.\r\ntry to put this logic in ServicesProcessDataEventListener", "bodyText": "this should not be here. create a dependency with the parser.\ntry to put this logic in ServicesProcessDataEventListener", "bodyHTML": "<p dir=\"auto\">this should not be here. create a dependency with the parser.<br>\ntry to put this logic in ServicesProcessDataEventListener</p>", "author": "elguardian", "createdAt": "2020-11-02T11:25:15Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "diffHunk": "@@ -210,6 +215,23 @@ public void setSignals(Collection<String> signals) {\n         this.signals = signals;\n     }\n \n+    @Override\n+    public Collection<SignalDesc> getSignalsMetadata() {\n+        return signalsDesc;\n+    }\n+\n+    public void setSignalsMetadata(Collection<Signal> signals) {\n+        for (Signal signal : signals) {\n+            signalsDesc.add(SignalDescImpl.from(signal));\n+        }\n+    }\n+\n+    public void setMessages(Collection<Message> messages) {\n+        for (Message message : messages) {\n+            signalsDesc.add(SignalDescImpl.from(message));", "originalCommit": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwODIxOA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515908218", "body": "not required.", "bodyText": "not required.", "bodyHTML": "<p dir=\"auto\">not required.</p>", "author": "elguardian", "createdAt": "2020-11-02T11:26:37Z", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/SignalType.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*", "originalCommit": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe9bfa80ef4c4b628a2cb3992c3959de67df17a7", "url": "https://github.com/kiegroup/jbpm/commit/fe9bfa80ef4c4b628a2cb3992c3959de67df17a7", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-11-03T13:03:39Z", "type": "forcePushed"}, {"oid": "cdc95651b8b79b810858c74fb671271f4d2b999f", "url": "https://github.com/kiegroup/jbpm/commit/cdc95651b8b79b810858c74fb671271f4d2b999f", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-11-03T14:02:15Z", "type": "forcePushed"}, {"oid": "c2ecfccae483caf21b409528f05dc5b724c17352", "url": "https://github.com/kiegroup/jbpm/commit/c2ecfccae483caf21b409528f05dc5b724c17352", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-11-03T14:03:31Z", "type": "forcePushed"}, {"oid": "345d83aeacff858e20adc35299f40f08a54ac0a5", "url": "https://github.com/kiegroup/jbpm/commit/345d83aeacff858e20adc35299f40f08a54ac0a5", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-11-03T20:25:24Z", "type": "forcePushed"}, {"oid": "b031ebd81e1c2c6ae58ef738663c6fadcd6c1a09", "url": "https://github.com/kiegroup/jbpm/commit/b031ebd81e1c2c6ae58ef738663c6fadcd6c1a09", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-11-04T15:57:46Z", "type": "forcePushed"}, {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "url": "https://github.com/kiegroup/jbpm/commit/1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-11-05T10:27:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY2MTYxNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518661615", "body": "`messagesDesc` should be also added to the output.", "bodyText": "messagesDesc should be also added to the output.", "bodyHTML": "<p dir=\"auto\"><code>messagesDesc</code> should be also added to the output.</p>", "author": "afalhambra", "createdAt": "2020-11-06T10:32:02Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "diffHunk": "@@ -313,6 +337,7 @@ public String toString() {\n                 \", forms=\" + forms +\n                 \", roles=\" + roles +\n                 \", signals=\" + signals +\n+                \", signalsDesc=\" + signalsDesc +", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY2Nzk5Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518667993", "body": "typo\r\n```suggestion\r\n    public static MessageDescImpl from(Message message) {\r\n```", "bodyText": "typo\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static MessageDescImpl from(Message messasge) {\n          \n          \n            \n                public static MessageDescImpl from(Message message) {", "bodyHTML": "<p dir=\"auto\">typo</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">MessageDescImpl</span> from(<span class=\"pl-smi\">Message</span> <span class=\"x x-first x-last\">messasge</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">MessageDescImpl</span> from(<span class=\"pl-smi\">Message</span> <span class=\"x x-first x-last\">message</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-06T10:43:49Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/MessageDescImpl.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.model;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.services.api.model.MessageDesc;\n+\n+public class MessageDescImpl extends SignalDescBaseImpl implements MessageDesc {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static MessageDescImpl from(Message messasge) {", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3NDY4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518674680", "body": "`messagesDesc` maybe? just to follow same naming convention as `signalsDesc` - just an idea\r\n```suggestion\r\n    private Collection<MessageDesc> messagesDesc = Collections.emptySet();\r\n```", "bodyText": "messagesDesc maybe? just to follow same naming convention as signalsDesc - just an idea\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Collection<MessageDesc> messages = Collections.emptySet();\n          \n          \n            \n                private Collection<MessageDesc> messagesDesc = Collections.emptySet();", "bodyHTML": "<p dir=\"auto\"><code>messagesDesc</code> maybe? just to follow same naming convention as <code>signalsDesc</code> - just an idea</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Collection&lt;<span class=\"pl-smi\">MessageDesc</span>&gt;</span> <span class=\"x x-first x-last\">messages</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>emptySet();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Collection&lt;<span class=\"pl-smi\">MessageDesc</span>&gt;</span> <span class=\"x x-first x-last\">messagesDesc</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>emptySet();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-06T10:55:50Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -64,6 +66,8 @@\n     private Set<String> referencedRules = new HashSet<String>(1);\n \n     private Collection<String> signals = Collections.emptySet();\n+    private Collection<SignalDesc> signalsDesc = Collections.emptySet();\n+    private Collection<MessageDesc> messages = Collections.emptySet();", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NTM2NA==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518685364", "body": "Shouldn't this test class be located under a package `org.jbpm.kie.services.impl.model` just to follow same package structure for the class to test?", "bodyText": "Shouldn't this test class be located under a package org.jbpm.kie.services.impl.model just to follow same package structure for the class to test?", "bodyHTML": "<p dir=\"auto\">Shouldn't this test class be located under a package <code>org.jbpm.kie.services.impl.model</code> just to follow same package structure for the class to test?</p>", "author": "afalhambra", "createdAt": "2020-11-06T11:14:14Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/MessageDescImplTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NTQ2MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518685461", "body": "Shouldn't this test class be located under a package `org.jbpm.kie.services.impl.model` just to follow same package structure for the class to test?", "bodyText": "Shouldn't this test class be located under a package org.jbpm.kie.services.impl.model just to follow same package structure for the class to test?", "bodyHTML": "<p dir=\"auto\">Shouldn't this test class be located under a package <code>org.jbpm.kie.services.impl.model</code> just to follow same package structure for the class to test?</p>", "author": "afalhambra", "createdAt": "2020-11-06T11:14:24Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/SignalDescImplTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MTkyNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518691925", "body": "Checked exception is not thrown within this method\r\n```suggestion\r\n    public void testSignalsDesc() {\r\n```", "bodyText": "Checked exception is not thrown within this method\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testSignalsDesc() throws IOException {\n          \n          \n            \n                public void testSignalsDesc() {", "bodyHTML": "<p dir=\"auto\">Checked exception is not thrown within this method</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> testSignalsDesc() <span class=\"x x-first\">throws </span><span class=\"pl-smi x\">IOException</span><span class=\"x x-last\"> </span>{</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> testSignalsDesc() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-06T11:27:38Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "diffHunk": "@@ -510,7 +521,41 @@ public void testSignalsAndGlobals() throws IOException {\n                     \"person\".equals(globalName) || \"name\".equals(globalName) );\n         }\n \n+        assertNotNull(\"Signals description should not be null\", procDef.getSignalsDesc());\n+        assertNotNull(\"Messages description should not be null\", procDef.getMessagesDesc());\n+        assertTrue(\"Signal description should be empty\", procDef.getSignalsDesc().isEmpty());\n+        assertTrue(\"Messages description should be empty\", procDef.getMessagesDesc().isEmpty());\n+\n         // cleanup\n         processService.abortProcessInstance(procInstId);\n     }\n+\n+    @Test\n+    public void testSignalsDesc() throws IOException {", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MzQ0Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518693447", "body": "Should be changed to:\r\n```suggestion\r\n        assertFalse(\"Signal description should not be empty\", signals.isEmpty());\r\n```", "bodyText": "Should be changed to:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFalse(\"Signal description should be empty\", signals.isEmpty());\n          \n          \n            \n                    assertFalse(\"Signal description should not be empty\", signals.isEmpty());", "bodyHTML": "<p dir=\"auto\">Should be changed to:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertFalse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Signal description should be empty<span class=\"pl-pds\">\"</span></span>, signals<span class=\"pl-k\">.</span>isEmpty());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertFalse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Signal description should <span class=\"x x-first x-last\">not </span>be empty<span class=\"pl-pds\">\"</span></span>, signals<span class=\"pl-k\">.</span>isEmpty());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-06T11:30:50Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "diffHunk": "@@ -510,7 +521,41 @@ public void testSignalsAndGlobals() throws IOException {\n                     \"person\".equals(globalName) || \"name\".equals(globalName) );\n         }\n \n+        assertNotNull(\"Signals description should not be null\", procDef.getSignalsDesc());\n+        assertNotNull(\"Messages description should not be null\", procDef.getMessagesDesc());\n+        assertTrue(\"Signal description should be empty\", procDef.getSignalsDesc().isEmpty());\n+        assertTrue(\"Messages description should be empty\", procDef.getMessagesDesc().isEmpty());\n+\n         // cleanup\n         processService.abortProcessInstance(procInstId);\n     }\n+\n+    @Test\n+    public void testSignalsDesc() throws IOException {\n+        ProcessDefinition procDef = bpmn2Service.getProcessDefinition(deploymentId, \"org.jbpm.boundarysignal\");\n+        assertNotNull(procDef);\n+\n+        Collection<SignalDesc> signals = procDef.getSignalsDesc();\n+        assertNotNull(\"Signals description should not be null\", signals);\n+        assertFalse(\"Signal description should be empty\", signals.isEmpty());", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NTEwMw==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518695103", "body": "I would add an assert for `structRef` as well, even if it is null, just to cover all possible attributes\r\n```suggestion\r\n        assertEquals(\"MySignal\", signal.getName());\r\n        assertNull(\"Structure Ref is expected to be null\", signal.getStructureRef());\r\n```", "bodyText": "I would add an assert for structRef as well, even if it is null, just to cover all possible attributes\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(\"MySignal\", signal.getName());\n          \n          \n            \n                    assertEquals(\"MySignal\", signal.getName());\n          \n          \n            \n                    assertNull(\"Structure Ref is expected to be null\", signal.getStructureRef());", "bodyHTML": "<p dir=\"auto\">I would add an assert for <code>structRef</code> as well, even if it is null, just to cover all possible attributes</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"544\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertEquals(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MySignal<span class=\"pl-pds\">\"</span></span>, signal<span class=\"pl-k\">.</span>getName());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"544\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertEquals(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MySignal<span class=\"pl-pds\">\"</span></span>, signal<span class=\"pl-k\">.</span>getName());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"545\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertNull(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Structure Ref is expected to be null<span class=\"pl-pds\">\"</span></span>, signal<span class=\"pl-k\">.</span>getStructureRef());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-06T11:34:31Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "diffHunk": "@@ -510,7 +521,41 @@ public void testSignalsAndGlobals() throws IOException {\n                     \"person\".equals(globalName) || \"name\".equals(globalName) );\n         }\n \n+        assertNotNull(\"Signals description should not be null\", procDef.getSignalsDesc());\n+        assertNotNull(\"Messages description should not be null\", procDef.getMessagesDesc());\n+        assertTrue(\"Signal description should be empty\", procDef.getSignalsDesc().isEmpty());\n+        assertTrue(\"Messages description should be empty\", procDef.getMessagesDesc().isEmpty());\n+\n         // cleanup\n         processService.abortProcessInstance(procInstId);\n     }\n+\n+    @Test\n+    public void testSignalsDesc() throws IOException {\n+        ProcessDefinition procDef = bpmn2Service.getProcessDefinition(deploymentId, \"org.jbpm.boundarysignal\");\n+        assertNotNull(procDef);\n+\n+        Collection<SignalDesc> signals = procDef.getSignalsDesc();\n+        assertNotNull(\"Signals description should not be null\", signals);\n+        assertFalse(\"Signal description should be empty\", signals.isEmpty());\n+\n+        SignalDesc signal = signals.iterator().next();\n+        assertEquals(\"_3b677877-9be0-3fe7-bfc4-94a862fdc919\", signal.getId());\n+        assertEquals(\"MySignal\", signal.getName());", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NjE4MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518696181", "body": "```suggestion\r\n        assertFalse(\"Message description should not be empty\", signals.isEmpty());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFalse(\"Message description should be empty\", signals.isEmpty());\n          \n          \n            \n                    assertFalse(\"Message description should not be empty\", signals.isEmpty());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertFalse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Message description should be empty<span class=\"pl-pds\">\"</span></span>, signals<span class=\"pl-k\">.</span>isEmpty());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertFalse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Message description should <span class=\"x x-first x-last\">not </span>be empty<span class=\"pl-pds\">\"</span></span>, signals<span class=\"pl-k\">.</span>isEmpty());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-06T11:36:55Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "diffHunk": "@@ -510,7 +521,41 @@ public void testSignalsAndGlobals() throws IOException {\n                     \"person\".equals(globalName) || \"name\".equals(globalName) );\n         }\n \n+        assertNotNull(\"Signals description should not be null\", procDef.getSignalsDesc());\n+        assertNotNull(\"Messages description should not be null\", procDef.getMessagesDesc());\n+        assertTrue(\"Signal description should be empty\", procDef.getSignalsDesc().isEmpty());\n+        assertTrue(\"Messages description should be empty\", procDef.getMessagesDesc().isEmpty());\n+\n         // cleanup\n         processService.abortProcessInstance(procInstId);\n     }\n+\n+    @Test\n+    public void testSignalsDesc() throws IOException {\n+        ProcessDefinition procDef = bpmn2Service.getProcessDefinition(deploymentId, \"org.jbpm.boundarysignal\");\n+        assertNotNull(procDef);\n+\n+        Collection<SignalDesc> signals = procDef.getSignalsDesc();\n+        assertNotNull(\"Signals description should not be null\", signals);\n+        assertFalse(\"Signal description should be empty\", signals.isEmpty());\n+\n+        SignalDesc signal = signals.iterator().next();\n+        assertEquals(\"_3b677877-9be0-3fe7-bfc4-94a862fdc919\", signal.getId());\n+        assertEquals(\"MySignal\", signal.getName());\n+    }\n+\n+    @Test\n+    public void testMessageDesc() throws IOException {\n+        ProcessDefinition procDef = bpmn2Service.getProcessDefinition(deploymentId, \"Minimal\");\n+        assertNotNull(procDef);\n+\n+        Collection<MessageDesc> signals = procDef.getMessagesDesc();\n+        assertNotNull(\"Message description should not be null\", signals);\n+        assertFalse(\"Message description should be empty\", signals.isEmpty());", "originalCommit": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f90ecadc1908e2df30b8fe555bc7474dbc9703c4", "url": "https://github.com/kiegroup/jbpm/commit/f90ecadc1908e2df30b8fe555bc7474dbc9703c4", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-11-06T12:13:11Z", "type": "commit"}, {"oid": "f90ecadc1908e2df30b8fe555bc7474dbc9703c4", "url": "https://github.com/kiegroup/jbpm/commit/f90ecadc1908e2df30b8fe555bc7474dbc9703c4", "message": "[JBPM-9436] AMQ Streams (Kafka) listener functionality / consumer\n\nAdding method getSignalsMetadata to ProcessDefinition interface", "committedDate": "2020-11-06T12:13:11Z", "type": "forcePushed"}]}