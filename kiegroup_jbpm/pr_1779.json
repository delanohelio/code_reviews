{"pr_number": 1779, "pr_title": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null", "pr_author": "elguardian", "pr_createdAt": "2020-10-14T07:56:55Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1779", "timeline": [{"oid": "0988f090af152241644e4c71ec279db8193d8bec", "url": "https://github.com/kiegroup/jbpm/commit/0988f090af152241644e4c71ec279db8193d8bec", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null", "committedDate": "2020-10-28T11:53:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1NTI0Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r514455246", "body": "typo", "bodyText": "typo", "bodyHTML": "<p dir=\"auto\">typo</p>", "author": "gmunozfe", "createdAt": "2020-10-29T17:52:45Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -532,7 +768,7 @@ public void testGetTasksAssignedByGroupsWithGroupsLangNoTask() {\n     \n     @Test\n     public void testGetTasksAssignedByGroupsWithGroupsLangOneTask() {\n-        // One potential owner, should go straight to state Reserved\n+        // One potential owner, should go straight to s)tate Reserved", "originalCommit": "0988f090af152241644e4c71ec279db8193d8bec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902", "url": "https://github.com/kiegroup/jbpm/commit/20678522eed6bd03f535c8a85b4be5c62cca3902", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null", "committedDate": "2020-11-02T08:13:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjQ2Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515906462", "body": "No longer throwing a checked exception", "bodyText": "No longer throwing a checked exception", "bodyHTML": "<p dir=\"auto\">No longer throwing a checked exception</p>", "author": "afalhambra", "createdAt": "2020-11-02T11:23:11Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "diffHunk": "@@ -118,21 +119,20 @@ public void taskCmdUniqueRootElementTest() throws Exception {\n \n     @Test\n     public void taskCommandSubTypesCanBeSerialized() throws Exception {", "originalCommit": "20678522eed6bd03f535c8a85b4be5c62cca3902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwODMxNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516008315", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-11-02T14:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjg0NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515906845", "body": "Not really needed\r\n```suggestion\r\n                Constructor<?> construct = jaxbClass.getConstructor();\r\n                Object jaxbInst = construct.newInstance();\r\n```", "bodyText": "Not really needed\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n          \n          \n            \n                            Object jaxbInst = construct.newInstance(new Object[] {});\n          \n          \n            \n                            Constructor<?> construct = jaxbClass.getConstructor();\n          \n          \n            \n                            Object jaxbInst = construct.newInstance();", "bodyHTML": "<p dir=\"auto\">Not really needed</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">Constructor&lt;?&gt;</span> construct <span class=\"pl-k\">=</span> jaxbClass<span class=\"pl-k\">.</span>getConstructor(<span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">Class</span><span class=\"x x-last\">[] {}</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Object</span> jaxbInst <span class=\"pl-k\">=</span> construct<span class=\"pl-k\">.</span>newInstance(<span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">Object</span><span class=\"x x-last\">[] {}</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">Constructor&lt;?&gt;</span> construct <span class=\"pl-k\">=</span> jaxbClass<span class=\"pl-k\">.</span>getConstructor();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi\">Object</span> jaxbInst <span class=\"pl-k\">=</span> construct<span class=\"pl-k\">.</span>newInstance();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-02T11:23:56Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "diffHunk": "@@ -118,21 +119,20 @@ public void taskCmdUniqueRootElementTest() throws Exception {\n \n     @Test\n     public void taskCommandSubTypesCanBeSerialized() throws Exception {\n-        for (Class<?> jaxbClass : reflections.getSubTypesOf(TaskCommand.class)) {\n-            if (jaxbClass.equals(UserGroupCallbackTaskCommand.class)\n-            \t\t|| jaxbClass.equals(GetCurrentTxTasksCommand.class)) {\n-                continue;\n+        reflections.getSubTypesOf(TaskCommand.class).stream().filter(e -> !e.getName().contains(\"$\")).forEach(jaxbClass ->  {\n+            if (jaxbClass.equals(UserGroupCallbackTaskCommand.class) || jaxbClass.equals(GetCurrentTxTasksCommand.class)) {\n+                return;\n             }\n-            addClassesToSerializationContext(jaxbClass);\n-            Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n             try {\n+                addClassesToSerializationContext(jaxbClass);\n+                Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n                 Object jaxbInst = construct.newInstance(new Object[] {});", "originalCommit": "20678522eed6bd03f535c8a85b4be5c62cca3902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwOTM5Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516009397", "bodyText": "jaxbClass.newInstance", "author": "elguardian", "createdAt": "2020-11-02T14:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNzc1Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515907753", "body": "Please remove unused imports", "bodyText": "Please remove unused imports", "bodyHTML": "<p dir=\"auto\">Please remove unused imports</p>", "author": "afalhambra", "createdAt": "2020-11-02T11:25:44Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -23,21 +23,29 @@\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n import javax.naming.InitialContext;\n import javax.transaction.UserTransaction;\n \n+import org.jbpm.services.task.commands.TaskCommand;\n+import org.jbpm.services.task.commands.TaskContext;\n import org.jbpm.services.task.impl.factories.TaskFactory;\n import org.jbpm.services.task.impl.model.TaskDataImpl;\n+import org.jbpm.services.task.utils.ClassUtil;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.kie.api.command.ExecutableCommand;\n+import org.kie.api.runtime.Context;\n import org.kie.api.task.model.I18NText;\n import org.kie.api.task.model.Status;\n import org.kie.api.task.model.Task;\n import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.executor.api.Command;", "originalCommit": "20678522eed6bd03f535c8a85b4be5c62cca3902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwOTc5Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516009793", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-11-02T14:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNzc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNjQyMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515916421", "body": "Redundant cast\r\n```suggestion\r\n                return context.getPersistenceContext()\r\n```", "bodyText": "Redundant cast\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (List<TaskSummary>) context.getPersistenceContext()\n          \n          \n            \n                            return context.getPersistenceContext()", "bodyHTML": "<p dir=\"auto\">Redundant cast</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">return</span> <span class=\"x x-first\">(</span><span class=\"pl-k\"><span class=\"x\">List&lt;</span><span class=\"pl-smi x\">TaskSummary</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\">) </span>context<span class=\"pl-k\">.</span>getPersistenceContext()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">return</span> context<span class=\"pl-k\">.</span>getPersistenceContext()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-02T11:43:08Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -270,6 +278,234 @@ public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangStatus() {\n     }\n     \n     \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithNoUserGroupsLangStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerByStatusByGroup\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithGroups() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerWithGroups\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerByStatusWithGroups() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerByStatusWithGroups\", params);\n+\n+    }\n+\n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerStatusByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerStatusByExpirationDate\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerStatusByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    \n+    @Test\n+    public void testGetSubTasksAssignedAsPotentialOwner() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"parentId\", 2L);\n+        endBaseTest(\"SubTasksAssignedAsPotentialOwner\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerWithGroupsByStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerWithGroupsByStatus\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerStatusByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerStatusByExpirationDate\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwner() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwner\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwnerByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwnerByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwnerByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwnerByExpirationDate\", params);\n+\n+    }\n+    \n+    private Task startBaseTest() {\n+        String str = \"(with (new Task()) { priority = 55, taskData = (with( new TaskData() ) { expirationTime = new Date( ), parentId = 2} ), \";\n+        str += \"peopleAssignments = (with ( new PeopleAssignments() ) { \" +\n+                \"   potentialOwners = [new Group('Crusaders'), ], \" +\n+                \"   excludedOwners = [new Group('Administrators'), ], \" +\n+                \"   businessAdministrators = [ new User('Administrator') ], }),\";\n+        str += \"name =  'This is my task name' })\";\n+        Task task = TaskFactory.evalTask(new StringReader(str));\n+        taskService.addTask(task, new HashMap<String, Object>());\n+        return task;\n+    }\n+    private void endBaseTest(String query, Map<String, Object> params) {\n+        \n+        List<TaskSummary> tasks = taskService.execute(new TaskCommand<List<TaskSummary>> () {\n+\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public List<TaskSummary> execute(Context cntxt) {\n+                TaskContext context = (TaskContext) cntxt;\n+                \n+                return (List<TaskSummary>) context.getPersistenceContext()", "originalCommit": "20678522eed6bd03f535c8a85b4be5c62cca3902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxMDE4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516010180", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-11-02T14:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNjQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNzQ0OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515917449", "body": "Explicit type argument not really needed\r\n```suggestion\r\n        final List<String> groups = new ArrayList<>();\r\n```", "bodyText": "Explicit type argument not really needed\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<String> groups = new ArrayList<String>();\n          \n          \n            \n                    final List<String> groups = new ArrayList<>();", "bodyHTML": "<p dir=\"auto\">Explicit type argument not really needed</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">String</span>&gt;</span> groups <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;<span class=\"pl-smi x x-first x-last\">String</span>&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">String</span>&gt;</span> groups <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-11-02T11:45:04Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -270,6 +278,234 @@ public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangStatus() {\n     }\n     \n     \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithNoUserGroupsLangStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();", "originalCommit": "20678522eed6bd03f535c8a85b4be5c62cca3902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxMDU2NA==", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516010564", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-11-02T14:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNzQ0OQ=="}], "type": "inlineReview"}, {"oid": "3a12fb5793bb3034f9d765419367293b0cf29ebc", "url": "https://github.com/kiegroup/jbpm/commit/3a12fb5793bb3034f9d765419367293b0cf29ebc", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null", "committedDate": "2020-11-02T14:32:06Z", "type": "commit"}, {"oid": "3a12fb5793bb3034f9d765419367293b0cf29ebc", "url": "https://github.com/kiegroup/jbpm/commit/3a12fb5793bb3034f9d765419367293b0cf29ebc", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null", "committedDate": "2020-11-02T14:32:06Z", "type": "forcePushed"}]}