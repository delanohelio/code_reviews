{"pr_number": 1659, "pr_title": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after", "pr_author": "fjtirado", "pr_createdAt": "2020-05-22T16:42:41Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1659", "timeline": [{"oid": "e9ae966c2e7690646796c806bd45b12f1a341881", "url": "https://github.com/kiegroup/jbpm/commit/e9ae966c2e7690646796c806bd45b12f1a341881", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it when reopening.\n\nImplementation note. In order to not change existing interface, which I\nbelieve to be out of scope, the\nparameter to decide if ViolationException should be thrown or not is\nspecified inside the parameters map.", "committedDate": "2020-05-25T08:11:08Z", "type": "forcePushed"}, {"oid": "5c4ccd4102f105ba2f76ccbe83f34ea73b6b7bf0", "url": "https://github.com/kiegroup/jbpm/commit/5c4ccd4102f105ba2f76ccbe83f34ea73b6b7bf0", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it when reopening.\n\nImplementation note. In order to not change existing interface, which I\nbelieve to be out of scope, the\nparameter to decide if ViolationException should be thrown or not is\nspecified inside the parameters map.", "committedDate": "2020-05-25T10:50:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NDQzMg==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r429884432", "body": "It should control also that variable has a previous value assigned which tries to be overwritten", "bodyText": "It should control also that variable has a previous value assigned which tries to be overwritten", "bodyHTML": "<p dir=\"auto\">It should control also that variable has a previous value assigned which tries to be overwritten</p>", "author": "gmunozfe", "createdAt": "2020-05-25T11:28:40Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/AddDataCaseFileInstanceCommand.java", "diffHunk": "@@ -73,6 +74,15 @@ public Void execute(Context context) {\n         \n         KieSession ksession = ((RegistryContext) context).lookup( KieSession.class );\n         \n+        org.jbpm.process.instance.ProcessInstance pi = (org.jbpm.process.instance.ProcessInstance) ksession.getProcessInstance(processInstanceId);\n+        VariableScope variableScope = (VariableScope) pi.getContextContainer().getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        \n+        for (String name: parameters.keySet())\n+        {\n+            if (variableScope.isReadOnly(VariableScope.CASE_FILE_PREFIX+name))", "originalCommit": "5c4ccd4102f105ba2f76ccbe83f34ea73b6b7bf0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyNzk4MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r429927981", "bodyText": "Done", "author": "fjtirado", "createdAt": "2020-05-25T13:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NDQzMg=="}], "type": "inlineReview"}, {"oid": "da973012bc88cf9b75af3b8e355b71c5f019d048", "url": "https://github.com/kiegroup/jbpm/commit/da973012bc88cf9b75af3b8e355b71c5f019d048", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it when reopening.\n\nImplementation note. In order to not change existing interface, which I\nbelieve to be out of scope, the\nparameter to decide if ViolationException should be thrown or not is\nspecified inside the parameters map.", "committedDate": "2020-05-25T13:11:17Z", "type": "forcePushed"}, {"oid": "9afb2b3b05442e6db2a89d1feb6c2a0b57862309", "url": "https://github.com/kiegroup/jbpm/commit/9afb2b3b05442e6db2a89d1feb6c2a0b57862309", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it when reopening.\n\nImplementation note. In order to not change existing interface, which I\nbelieve to be out of scope, the\nparameter to decide if ViolationException should be thrown or not is\nspecified inside the parameters map.", "committedDate": "2020-05-25T15:40:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyNDk5Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r430324996", "body": "I am not very convince about this.\r\nIf you are starting a case o restarting one to avoid any problem with variable you just need to check whether the oldValue and the newOne are the same instead of this. This will fix the issue regarding using the newCaseFileInstance + startCase... reopening will be more tricky as drools and facts are involved.\r\n", "bodyText": "I am not very convince about this.\nIf you are starting a case o restarting one to avoid any problem with variable you just need to check whether the oldValue and the newOne are the same instead of this. This will fix the issue regarding using the newCaseFileInstance + startCase... reopening will be more tricky as drools and facts are involved.", "bodyHTML": "<p dir=\"auto\">I am not very convince about this.<br>\nIf you are starting a case o restarting one to avoid any problem with variable you just need to check whether the oldValue and the newOne are the same instead of this. This will fix the issue regarding using the newCaseFileInstance + startCase... reopening will be more tricky as drools and facts are involved.</p>", "author": "elguardian", "createdAt": "2020-05-26T10:52:46Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/StartCaseCommand.java", "diffHunk": "@@ -125,6 +123,7 @@ public void matchCreated(MatchCreatedEvent event) {\n         }\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n+        params.put(VariableScope.FORCE_UPDATE, Boolean.TRUE);", "originalCommit": "9afb2b3b05442e6db2a89d1feb6c2a0b57862309", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NzQ1NA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r430457454", "bodyText": "Additional parameter has been removed.\nassuming assigment of equal object is not considered assigment, we can avoid it", "author": "fjtirado", "createdAt": "2020-05-26T14:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyNDk5Ng=="}], "type": "inlineReview"}, {"oid": "7a47a0592c88a5a67a43c1619d2640f97b8ce1e0", "url": "https://github.com/kiegroup/jbpm/commit/7a47a0592c88a5a67a43c1619d2640f97b8ce1e0", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-05-26T14:22:29Z", "type": "forcePushed"}, {"oid": "18a0059edc966bae836522d2daf0a0767340d12a", "url": "https://github.com/kiegroup/jbpm/commit/18a0059edc966bae836522d2daf0a0767340d12a", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-05-27T22:27:47Z", "type": "forcePushed"}, {"oid": "03c7d3b0d82f470b8550181d8c15b17d34622d02", "url": "https://github.com/kiegroup/jbpm/commit/03c7d3b0d82f470b8550181d8c15b17d34622d02", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-05-28T07:17:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyOTc0OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432329749", "body": "logic spreaded between VariableScopeInstance and here.", "bodyText": "logic spreaded between VariableScopeInstance and here.", "bodyHTML": "<p dir=\"auto\">logic spreaded between VariableScopeInstance and here.</p>", "author": "elguardian", "createdAt": "2020-05-29T08:20:53Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/AddDataCaseFileInstanceCommand.java", "diffHunk": "@@ -85,6 +87,16 @@ public Void execute(Context context) {\n         \n         CaseEventSupport caseEventSupport = getCaseEventSupport(context);\n         caseEventSupport.fireBeforeCaseDataAdded(caseFile.getCaseId(), caseFile, caseFile.getDefinitionId(), parameters);\n+        \n+        org.jbpm.process.instance.ProcessInstance pi = (org.jbpm.process.instance.ProcessInstance) ksession.getProcessInstance(processInstanceId);", "originalCommit": "03c7d3b0d82f470b8550181d8c15b17d34622d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1ODkwMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432358901", "bodyText": "VariableScopeInstance is not really used in this scenario. Please check getVariable, which relies on CaseFileInnstan", "author": "fjtirado", "createdAt": "2020-05-29T09:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyOTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0ODc1NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432448755", "bodyText": "Code changed to reuse setVariable on VariableScopeInstance", "author": "fjtirado", "createdAt": "2020-05-29T12:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyOTc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyOTg2OA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432329868", "body": "logic spreaded between VariableScopeInstance and here.", "bodyText": "logic spreaded between VariableScopeInstance and here.", "bodyHTML": "<p dir=\"auto\">logic spreaded between VariableScopeInstance and here.</p>", "author": "elguardian", "createdAt": "2020-05-29T08:21:04Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/RemoveDataCaseFileInstanceCommand.java", "diffHunk": "@@ -60,6 +64,17 @@ public Void execute(Context context) {\n         // apply authorization\n         authorizationManager.checkDataAuthorization(caseFile.getCaseId(), caseFile, variableNames);\n         \n+        \n+        org.jbpm.process.instance.ProcessInstance pi = (org.jbpm.process.instance.ProcessInstance) ksession.getProcessInstance(processInstanceId);", "originalCommit": "03c7d3b0d82f470b8550181d8c15b17d34622d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1ODk2NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432358965", "bodyText": "VariableScopeInstance is not really used in this scenario. Please check getVariable, which relies on CaseFileInnstan", "author": "fjtirado", "createdAt": "2020-05-29T09:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyOTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0OTM2Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432449366", "bodyText": "Remove logic is very particular of CaseFileInstance (the events published are specific), so there is not really logic spread besided the call to variableScopeInstance.isReadOnly, which I believe is probably fine.", "author": "fjtirado", "createdAt": "2020-05-29T12:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyOTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MDQ4Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r435240487", "bodyText": "After some failed tests, I think the original code is good there, reusing VariableScopeInstance.setVariable cause case duplication because of the way the listeners are handled there.\nI do not think it is wise to change it more deeply.", "author": "fjtirado", "createdAt": "2020-06-04T13:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyOTg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDE4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432330180", "body": "why removed the check of null ?", "bodyText": "why removed the check of null ?", "bodyHTML": "<p dir=\"auto\">why removed the check of null ?</p>", "author": "elguardian", "createdAt": "2020-05-29T08:21:40Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -78,29 +78,43 @@ public Void execute(Context context) {\n         \n         KieSession ksession = ((RegistryContext) context).lookup( KieSession.class );\n                                \n-        CaseFileInstance caseFile = getCaseFile(ksession, caseId);                        \n+        CaseFileInstance caseFile = getCaseFile(ksession, caseId);     \n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n         logger.debug(\"Updating case file in working memory\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n-        ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n-        if (data != null && !data.isEmpty()) {\n-            caseFile.addAll(data);\n-        }\n         ksession.update(factHandle, caseFile);\n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n+        final Map<String, Object> caseData = caseFile.getData();\n+        \n+        \n+        for (Map.Entry<String, Object> entry : caseData.entrySet()) {\n+            params.put(VariableScope.CASE_FILE_PREFIX + entry.getKey(), entry.getValue());\n+        }\n+        \n+        if (data != null)   {\n+            for (Map.Entry<String, Object> entry : data.entrySet()) {\n+                params.put(VariableScope.CASE_FILE_PREFIX + entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);\n+        \n+        ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n+        if (data != null) {\n+            caseFile.addAll(data);\n+        }\n+        \n         logger.debug(\"Removing case file from working memory to allow refiring of rules...\");\n         ksession.delete(factHandle);\n         ksession.insert(caseFile);\n-        final Map<String, Object> caseData = caseFile.getData();\n-        if (caseData != null && !caseData.isEmpty()) {\n+        if (!caseData.isEmpty()) {", "originalCommit": "03c7d3b0d82f470b8550181d8c15b17d34622d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1NjEzOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432356139", "bodyText": "because it was unneded and reported as a code smell", "author": "fjtirado", "createdAt": "2020-05-29T09:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDUwNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432330505", "body": "unneeded", "bodyText": "unneeded", "bodyHTML": "<p dir=\"auto\">unneeded</p>", "author": "elguardian", "createdAt": "2020-05-29T08:22:15Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/StartCaseCommand.java", "diffHunk": "@@ -112,10 +111,7 @@ public void matchCreated(MatchCreatedEvent event) {\n         });\n         commands.add(commandsFactory.newInsert(caseFile));\n         commands.add(commandsFactory.newFireAllRules());\n-\n-        BatchExecutionCommand batch = commandsFactory.newBatchExecution(commands);\n-        processService.execute(deploymentId, CaseContext.get(caseId), batch);\n-\n+        processService.execute(deploymentId, CaseContext.get(caseId), commandsFactory.newBatchExecution(commands));", "originalCommit": "03c7d3b0d82f470b8550181d8c15b17d34622d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMTk2NA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432421964", "bodyText": "what was unnededed is the definition of a variable which is used in one place, this is an improvement of previous code and should stay", "author": "fjtirado", "createdAt": "2020-05-29T11:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjMzMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432426331", "bodyText": "Change rolled back", "author": "fjtirado", "createdAt": "2020-05-29T11:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDczNw==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432330737", "body": "unneeded", "bodyText": "unneeded", "bodyHTML": "<p dir=\"auto\">unneeded</p>", "author": "elguardian", "createdAt": "2020-05-29T08:22:40Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/model/instance/CaseFileInstanceImpl.java", "diffHunk": "@@ -113,7 +113,7 @@ public Date getCaseEndDate() {\n \n     @Override\n     public Map<String, Object> getData() {\n-        return this.data;\n+        return Collections.unmodifiableMap(this.data);", "originalCommit": "03c7d3b0d82f470b8550181d8c15b17d34622d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Njg4MA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432356880", "bodyText": "this is to prevent a backdoor update of the intenal map, it should stay to make the solution more robust", "author": "fjtirado", "createdAt": "2020-05-29T09:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjU0Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432426542", "bodyText": "Change rolled back. Althoung theoretically correct, making the  map unmodifiable is potentially harmful for existing clients", "author": "fjtirado", "createdAt": "2020-05-29T11:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMTQwOA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432331408", "body": "this will required a full downstream compilation at least. Commands are sensitive. @gmunozfe ", "bodyText": "this will required a full downstream compilation at least. Commands are sensitive. @gmunozfe", "bodyHTML": "<p dir=\"auto\">this will required a full downstream compilation at least. Commands are sensitive. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/gmunozfe/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gmunozfe\">@gmunozfe</a></p>", "author": "elguardian", "createdAt": "2020-05-29T08:23:54Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/RemoveDataCaseFileInstanceCommand.java", "diffHunk": "@@ -40,9 +42,11 @@\n \n     private List<String> variableNames;\n     private AuthorizationManager authorizationManager;\n+    private Long processInstanceId;\n     \n-    public RemoveDataCaseFileInstanceCommand(IdentityProvider identityProvider, List<String> variableNames, AuthorizationManager authorizationManager) {                \n+    public RemoveDataCaseFileInstanceCommand(Long processInstanceId, IdentityProvider identityProvider, List<String> variableNames, AuthorizationManager authorizationManager) {                ", "originalCommit": "03c7d3b0d82f470b8550181d8c15b17d34622d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1NzQxNQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432357415", "bodyText": "this is the only way I found to access variable readonly definition in RemoveDataCaseFileInstace. Lets do the full downstream compilation", "author": "fjtirado", "createdAt": "2020-05-29T09:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMTQwOA=="}], "type": "inlineReview"}, {"oid": "9681fd1d6f0629d72d9404b8758885f964e46f65", "url": "https://github.com/kiegroup/jbpm/commit/9681fd1d6f0629d72d9404b8758885f964e46f65", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-05-29T12:26:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMTA0NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432531045", "body": "It doesn't match with the file name (case sensitive)\r\n```suggestion\r\n        processes.add(\"cases/UserTaskCaseReadonlyCaseFileItem.bpmn2\");\r\n```\r\nor change the file name.", "bodyText": "It doesn't match with the file name (case sensitive)\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    processes.add(\"cases/UserTaskCaseReadOnlyCaseFileItem.bpmn2\");\n          \n          \n            \n                    processes.add(\"cases/UserTaskCaseReadonlyCaseFileItem.bpmn2\");\n          \n      \n    \n    \n  \n\nor change the file name.", "bodyHTML": "<p dir=\"auto\">It doesn't match with the file name (case sensitive)</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"149\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        processes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cases/<span class=\"x x-first x-last\">UserTaskCaseReadOnlyCaseFileItem</span>.bpmn2<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"149\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        processes<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cases/<span class=\"x x-first x-last\">UserTaskCaseReadonlyCaseFileItem</span>.bpmn2<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">or change the file name.</p>", "author": "gmunozfe", "createdAt": "2020-05-29T14:37:51Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/CaseServiceImplTest.java", "diffHunk": "@@ -146,6 +146,7 @@\n         processes.add(\"cases/UserTaskCaseRequiredCaseFileItem.bpmn2\");\n         processes.add(\"cases/UserTaskCaseRestrictedCaseFileItem.bpmn2\");\n         processes.add(\"cases/UserTaskCaseRequiredRestrictedCaseFileItem.bpmn2\");\n+        processes.add(\"cases/UserTaskCaseReadOnlyCaseFileItem.bpmn2\");", "originalCommit": "9681fd1d6f0629d72d9404b8758885f964e46f65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MTYwNA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r432581604", "bodyText": "file name changed", "author": "fjtirado", "createdAt": "2020-05-29T15:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMTA0NQ=="}], "type": "inlineReview"}, {"oid": "b880fb224049023d0482c6526139448cf0f0fc3d", "url": "https://github.com/kiegroup/jbpm/commit/b880fb224049023d0482c6526139448cf0f0fc3d", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-05-29T14:44:58Z", "type": "forcePushed"}, {"oid": "65ac5110b5635cf545564f9b948a6de61af0922e", "url": "https://github.com/kiegroup/jbpm/commit/65ac5110b5635cf545564f9b948a6de61af0922e", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-06-04T09:01:43Z", "type": "forcePushed"}, {"oid": "cf8f5cb5c26a1065f472b9d957ae5e6c438ddd10", "url": "https://github.com/kiegroup/jbpm/commit/cf8f5cb5c26a1065f472b9d957ae5e6c438ddd10", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-06-04T12:58:35Z", "type": "forcePushed"}, {"oid": "2615d1a8758c56a9b1a5d8e92e3d669f3d2e7e21", "url": "https://github.com/kiegroup/jbpm/commit/2615d1a8758c56a9b1a5d8e92e3d669f3d2e7e21", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-06-08T15:11:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMTU5Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r440821592", "body": "Can you clarify it here, please? So `VariableScopeInstance.setVariable` calls fire methods which we don't want to call, so we use this approach?", "bodyText": "Can you clarify it here, please? So VariableScopeInstance.setVariable calls fire methods which we don't want to call, so we use this approach?", "bodyHTML": "<p dir=\"auto\">Can you clarify it here, please? So <code>VariableScopeInstance.setVariable</code> calls fire methods which we don't want to call, so we use this approach?</p>", "author": "MarianMacik", "createdAt": "2020-06-16T12:47:06Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/AddDataCaseFileInstanceCommand.java", "diffHunk": "@@ -81,6 +82,16 @@ public Void execute(Context context) {\n         // apply authorization\n         authorizationManager.checkDataAuthorization(caseFile.getCaseId(), caseFile, parameters.keySet());\n         \n+        // check read only variables, due to dependencies between firexxxCaseData methods, we need this logic here, we cannot reuse VariableScopeInstance.setVariable", "originalCommit": "2615d1a8758c56a9b1a5d8e92e3d669f3d2e7e21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3Mjg4OA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r440972888", "bodyText": "Yes, after trying to modify original code to call setVariable instance and centralize some logic, some test were failing because the trigger call needs to be invoked at a very specific moment of time (or the case will be added twice), so I was adding that comment to avoid the temptation to do the same change in the future", "author": "fjtirado", "createdAt": "2020-06-16T16:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMTU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNTk3MA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r440905970", "body": "Any reason why this was removed?", "bodyText": "Any reason why this was removed?", "bodyHTML": "<p dir=\"auto\">Any reason why this was removed?</p>", "author": "MarianMacik", "createdAt": "2020-06-16T14:42:38Z", "path": "jbpm-test-coverage/src/main/java/org/jbpm/test/entity/MedicalRecord.java", "diffHunk": "@@ -110,9 +110,6 @@ public boolean equals(Object obj) {\n         if ((this.description == null) ? (other.description != null) : !this.description.equals(other.description)) {\n             return false;\n         }\n-        if (this.patient != other.patient && (this.patient == null || !this.patient.equals(other.patient))) {\n-            return false;\n-        }", "originalCommit": "2615d1a8758c56a9b1a5d8e92e3d669f3d2e7e21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MTYxOA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r440971618", "bodyText": "This was changed to avoid a circular dependency between equals that causes StackOverflowException", "author": "fjtirado", "createdAt": "2020-06-16T16:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNTk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNTkyOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r440925929", "body": "In theory somebody can be already using that via `ProcessService` to be run as a separate command, so we can break backward compatibility, but if there is no other way, it is ok from my side.", "bodyText": "In theory somebody can be already using that via ProcessService to be run as a separate command, so we can break backward compatibility, but if there is no other way, it is ok from my side.", "bodyHTML": "<p dir=\"auto\">In theory somebody can be already using that via <code>ProcessService</code> to be run as a separate command, so we can break backward compatibility, but if there is no other way, it is ok from my side.</p>", "author": "MarianMacik", "createdAt": "2020-06-16T15:08:19Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/RemoveDataCaseFileInstanceCommand.java", "diffHunk": "@@ -40,9 +42,11 @@\n \n     private List<String> variableNames;\n     private AuthorizationManager authorizationManager;\n+    private Long processInstanceId;\n     \n-    public RemoveDataCaseFileInstanceCommand(IdentityProvider identityProvider, List<String> variableNames, AuthorizationManager authorizationManager) {                \n+    public RemoveDataCaseFileInstanceCommand(Long processInstanceId, IdentityProvider identityProvider, List<String> variableNames, AuthorizationManager authorizationManager) {                ", "originalCommit": "2615d1a8758c56a9b1a5d8e92e3d669f3d2e7e21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3Mzg4Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r440973887", "bodyText": "Im aware of the potential backward compatiiliry problem, but I cannot find other way, processInstanceId is needed to check the readonly flag (and now both command constructors, add and remove data case are symetrical)", "author": "fjtirado", "createdAt": "2020-06-16T16:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNTkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNjY1OA==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r440926658", "body": "Maybe use the same message as in `VariableScopeInstance`?\r\n`throw new VariableViolationException(getProcessInstance().getId(), name, \"Variable '\" + name + \"' is already set and is marked as read only\");`", "bodyText": "Maybe use the same message as in VariableScopeInstance?\nthrow new VariableViolationException(getProcessInstance().getId(), name, \"Variable '\" + name + \"' is already set and is marked as read only\");", "bodyHTML": "<p dir=\"auto\">Maybe use the same message as in <code>VariableScopeInstance</code>?<br>\n<code>throw new VariableViolationException(getProcessInstance().getId(), name, \"Variable '\" + name + \"' is already set and is marked as read only\");</code></p>", "author": "MarianMacik", "createdAt": "2020-06-16T15:09:20Z", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/RemoveDataCaseFileInstanceCommand.java", "diffHunk": "@@ -59,7 +63,15 @@ public Void execute(Context context) {\n         \n         // apply authorization\n         authorizationManager.checkDataAuthorization(caseFile.getCaseId(), caseFile, variableNames);\n-        \n+          \n+        org.jbpm.process.instance.ProcessInstance pi = (org.jbpm.process.instance.ProcessInstance) ksession.getProcessInstance(processInstanceId);\n+        VariableScope variableScope = (VariableScope) pi.getContextContainer().getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        for (String name: variableNames) {\n+            if (caseFile.getData(name) != null && variableScope.isReadOnly(VariableScope.CASE_FILE_PREFIX+name)) {\n+                throw new VariableViolationException(pi.getId(), name,\"variable is read only and cannot be removed\");", "originalCommit": "2615d1a8758c56a9b1a5d8e92e3d669f3d2e7e21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3NDk2Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1659#discussion_r440974966", "bodyText": "Changed", "author": "fjtirado", "createdAt": "2020-06-16T16:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNjY1OA=="}], "type": "inlineReview"}, {"oid": "74156c2b50141d04a3986b4b67e42d57507bbd32", "url": "https://github.com/kiegroup/jbpm/commit/74156c2b50141d04a3986b4b67e42d57507bbd32", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-06-16T16:15:59Z", "type": "commit"}, {"oid": "74156c2b50141d04a3986b4b67e42d57507bbd32", "url": "https://github.com/kiegroup/jbpm/commit/74156c2b50141d04a3986b4b67e42d57507bbd32", "message": "[JBPM-9097] Case variable: \"readonly\" tag permits changing value after\n\nNow it is possible to assign a value to a case property when the\nprocess is created, but a ViolationException will be thrown if trying\nto update it with a different value when reopening.", "committedDate": "2020-06-16T16:15:59Z", "type": "forcePushed"}]}