{"pr_number": 1634, "pr_title": "[JBPM-9118] Support disabling of Notification Listener", "pr_author": "elguardian", "pr_createdAt": "2020-04-16T07:47:07Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1634", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwMjUwMA==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409502500", "body": "Missing method header above", "bodyText": "Missing method header above", "bodyHTML": "<p dir=\"auto\">Missing method header above</p>", "author": "gmunozfe", "createdAt": "2020-04-16T12:05:09Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManagerTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.jbpm.services.task.deadlines.notifications.impl;", "originalCommit": "bdd3b518304a23ec778dcd89703b74a8fdc141ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNTkxOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410015919", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T06:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwMjUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNzE2Mg==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409507162", "body": "To avoid issues with leading, intermediate or trailing spaces, use trim() and regex into split:\r\n```suggestion\r\n        return Arrays.asList(name.trim().split(\"\\\\s*,\\\\s*\"));\r\n```", "bodyText": "To avoid issues with leading, intermediate or trailing spaces, use trim() and regex into split:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Arrays.asList(name.split(\",\"));\n          \n          \n            \n                    return Arrays.asList(name.trim().split(\"\\\\s*,\\\\s*\"));", "bodyHTML": "<p dir=\"auto\">To avoid issues with leading, intermediate or trailing spaces, use trim() and regex into split:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(name<span class=\"pl-k\">.</span>split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">,</span><span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(name<span class=\"pl-k\">.</span><span class=\"x x-first\">trim()</span><span class=\"pl-k x x-last\">.</span>split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce x x-first\">\\\\</span><span class=\"x\">s*,</span><span class=\"pl-cce x\">\\\\</span><span class=\"x x-last\">s*</span><span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmunozfe", "createdAt": "2020-04-16T12:13:56Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));", "originalCommit": "bdd3b518304a23ec778dcd89703b74a8fdc141ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNzc2NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409537765", "body": "Why not return `Collections.emptyList()` ?\r\nThen, at createPredicate you can check against \"is not empty\"... ", "bodyText": "Why not return Collections.emptyList() ?\nThen, at createPredicate you can check against \"is not empty\"...", "bodyHTML": "<p dir=\"auto\">Why not return <code>Collections.emptyList()</code> ?<br>\nThen, at createPredicate you can check against \"is not empty\"...</p>", "author": "gmunozfe", "createdAt": "2020-04-16T13:03:06Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;", "originalCommit": "bdd3b518304a23ec778dcd89703b74a8fdc141ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNjk5MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410016991", "bodyText": "not equivalent... empty string is not equivalent to null. Think aboud include = \"\"... this will exclude everthing as the predicate will never test true.", "author": "elguardian", "createdAt": "2020-04-17T06:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNzc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzOTM4Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409539387", "body": "Missing a blank after \"if\"\r\nIf `propertyToList` returns empty list, check `if (!includeLists.isEmpty())`\r\n", "bodyText": "Missing a blank after \"if\"\nIf propertyToList returns empty list, check if (!includeLists.isEmpty())", "bodyHTML": "<p dir=\"auto\">Missing a blank after \"if\"<br>\nIf <code>propertyToList</code> returns empty list, check <code>if (!includeLists.isEmpty())</code></p>", "author": "gmunozfe", "createdAt": "2020-04-16T13:05:33Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();\n+    }\n+\n+    private void init() {\n+        excludeLists = propertyToList(KIE_LISTENER_EXCLUDE);\n+        includeLists = propertyToList(KIE_LISTENER_INCLUDE);\n+\n+        listeners.clear();\n+        Predicate<String> predicate = createPredicate();\n         for (NotificationListener listener : listenersLoaded) {\n-            listeners.add(listener);\n+            if (predicate.test(listener.getClass().getName())) {\n+                listeners.add(listener);\n+            }\n+        }\n+    }\n+\n+    private Predicate<String> createPredicate() {\n+        if(includeLists != null) {", "originalCommit": "bdd3b518304a23ec778dcd89703b74a8fdc141ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNzI2Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410017263", "bodyText": "ok with the if. The other one I already explain why not.", "author": "elguardian", "createdAt": "2020-04-17T06:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzOTM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU0MDIwOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409540209", "body": "Same here", "bodyText": "Same here", "bodyHTML": "<p dir=\"auto\">Same here</p>", "author": "gmunozfe", "createdAt": "2020-04-16T13:06:45Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();\n+    }\n+\n+    private void init() {\n+        excludeLists = propertyToList(KIE_LISTENER_EXCLUDE);\n+        includeLists = propertyToList(KIE_LISTENER_INCLUDE);\n+\n+        listeners.clear();\n+        Predicate<String> predicate = createPredicate();\n         for (NotificationListener listener : listenersLoaded) {\n-            listeners.add(listener);\n+            if (predicate.test(listener.getClass().getName())) {\n+                listeners.add(listener);\n+            }\n+        }\n+    }\n+\n+    private Predicate<String> createPredicate() {\n+        if(includeLists != null) {\n+            return e -> includeLists.contains(e);\n+        } else if (excludeLists != null) {", "originalCommit": "bdd3b518304a23ec778dcd89703b74a8fdc141ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNzM3Mw==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410017373", "bodyText": "not the same thing", "author": "elguardian", "createdAt": "2020-04-17T06:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU0MDIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNTAyNg==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409625026", "body": "Is this method really needed? It's similar to make init public", "bodyText": "Is this method really needed? It's similar to make init public", "bodyHTML": "<p dir=\"auto\">Is this method really needed? It's similar to make init public</p>", "author": "gmunozfe", "createdAt": "2020-04-16T14:57:40Z", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();", "originalCommit": "bdd3b518304a23ec778dcd89703b74a8fdc141ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNzczNw==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410017737", "bodyText": "done.", "author": "elguardian", "createdAt": "2020-04-17T06:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNTAyNg=="}], "type": "inlineReview"}, {"oid": "ad079384ffd283c7d01306388c73acd363a95008", "url": "https://github.com/kiegroup/jbpm/commit/ad079384ffd283c7d01306388c73acd363a95008", "message": "[JBPM-9118] Support disabling of Notification Listener\n\nadd flags for include/excluding notification listeners", "committedDate": "2020-04-17T06:33:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMTkyNg==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410101926", "body": "What about adding a test which will test excluding/including more than one?", "bodyText": "What about adding a test which will test excluding/including more than one?", "bodyHTML": "<p dir=\"auto\">What about adding a test which will test excluding/including more than one?</p>", "author": "MarianMacik", "createdAt": "2020-04-17T09:23:40Z", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManagerTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.services.task.deadlines.notifications.impl;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class NotificationListenerManagerTest {\n+\n+    private static String EMAIL_LISTENER = \"org.jbpm.services.task.deadlines.notifications.impl.email.EmailNotificationListener\";\n+    private static String MOCK_LISTENER = \"org.jbpm.services.task.deadlines.notifications.impl.MockNotificationListener\";\n+\n+    @After\n+    @Before\n+    public void reset() {\n+        System.clearProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE);\n+        System.clearProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE);\n+        NotificationListenerManager.get().reset();\n+    }\n+\n+    @Test\n+    public void testNoFlagsLists() {\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(2));\n+    }\n+\n+    @Test\n+    public void testExcludeLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE, EMAIL_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(MOCK_LISTENER));\n+    }\n+\n+    @Test\n+    public void testIncludeLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE, MOCK_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(MOCK_LISTENER));\n+    }\n+\n+    @Test\n+    public void testBothLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE, EMAIL_LISTENER);\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE, EMAIL_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(EMAIL_LISTENER));\n+    }", "originalCommit": "ad079384ffd283c7d01306388c73acd363a95008", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNTEzMA==", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410115130", "bodyText": "done", "author": "elguardian", "createdAt": "2020-04-17T09:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMTkyNg=="}], "type": "inlineReview"}, {"oid": "6e282188753292c296e3be27cb268f222c9a09dc", "url": "https://github.com/kiegroup/jbpm/commit/6e282188753292c296e3be27cb268f222c9a09dc", "message": "[JBPM-9118] Support disabling of Notification Listener\n\nadd flags for include/excluding notification listeners", "committedDate": "2020-04-17T09:47:14Z", "type": "forcePushed"}, {"oid": "d69bd64368874db3923e3095f2e5396223fbb9c5", "url": "https://github.com/kiegroup/jbpm/commit/d69bd64368874db3923e3095f2e5396223fbb9c5", "message": "[JBPM-9118] Support disabling of Notification Listener\n\nadd flags for include/excluding notification listeners", "committedDate": "2020-04-17T09:56:00Z", "type": "commit"}, {"oid": "d69bd64368874db3923e3095f2e5396223fbb9c5", "url": "https://github.com/kiegroup/jbpm/commit/d69bd64368874db3923e3095f2e5396223fbb9c5", "message": "[JBPM-9118] Support disabling of Notification Listener\n\nadd flags for include/excluding notification listeners", "committedDate": "2020-04-17T09:56:00Z", "type": "forcePushed"}]}