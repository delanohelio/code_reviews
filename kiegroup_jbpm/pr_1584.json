{"pr_number": 1584, "pr_title": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckError  Command\" execution fails on Postgres database", "pr_author": "elguardian", "pr_createdAt": "2020-01-24T10:59:55Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1584", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0MDk0Ng==", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r371640946", "body": "It may log a warning message to account there was an issue", "bodyText": "It may log a warning message to account there was an issue", "bodyHTML": "<p dir=\"auto\">It may log a warning message to account there was an issue</p>", "author": "gmunozfe", "createdAt": "2020-01-28T07:25:00Z", "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/ProcessAutoAckErrorCommand.java", "diffHunk": "@@ -40,32 +40,35 @@\n \n     private static final String RULE = \"Process instances that previously failed but now are in different nodes - meaning node where they were was already completed - or completed/aborted\";\n     \n-    @SuppressWarnings(\"unchecked\")\n+\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n         List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n         \n-        String findProcessErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.acknowledged =:acknowledged \"\n-                + \"and error.processInstanceId in (select pil.id from ProcessInstanceLog pil where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> processErrorsToAck = em.createQuery(findProcessErrorsQuery)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(ProcessInstance.STATE_COMPLETED, ProcessInstance.STATE_ABORTED))\n-                .getResultList();\n-        errorsToAck.addAll(processErrorsToAck);\n-        \n-        String findNodeErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.acknowledged =:acknowledged \"\n-                + \"and error.initActivityId in (select nil.nodeInstanceId from NodeInstanceLog nil where nil.processInstanceId = error.processInstanceId and nil.nodeInstanceId = error.initActivityId and nil.type = 1)\";\n-        \n-        List<ExecutionErrorInfo> nodeErrorsToAck = em.createQuery(findNodeErrorsQuery)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .getResultList();\n-        errorsToAck.addAll(nodeErrorsToAck);\n-        \n+        em.getTransaction().begin();\n+        try {\n+            String findProcessErrorsQuery = \"select error from ExecutionErrorInfo error where error.acknowledged =:acknowledged \" +\n+                                            \"and error.processInstanceId in (select pil.id from ProcessInstanceLog pil where status in (:status))\";\n+\n+            List<ExecutionErrorInfo> processErrorsToAck = em.createQuery(findProcessErrorsQuery, ExecutionErrorInfo.class)\n+                                                            .setParameter(\"acknowledged\", new Short(\"0\"))\n+                                                            .setParameter(\"status\", Arrays.asList(ProcessInstance.STATE_COMPLETED, ProcessInstance.STATE_ABORTED))\n+                                                            .getResultList();\n+            errorsToAck.addAll(processErrorsToAck);\n+\n+            String findNodeErrorsQuery = \"select error from ExecutionErrorInfo error where error.acknowledged =:acknowledged \" +\n+                                         \"and CAST(error.initActivityId AS string) in (select nil.nodeInstanceId from NodeInstanceLog nil where nil.processInstanceId = error.processInstanceId and nil.nodeInstanceId = CAST(error.initActivityId AS string) and nil.type = '1')\";\n+\n+            List<ExecutionErrorInfo> nodeErrorsToAck = em.createQuery(findNodeErrorsQuery, ExecutionErrorInfo.class)\n+                                                         .setParameter(\"acknowledged\", new Short(\"0\"))\n+                                                         .getResultList();\n+            errorsToAck.addAll(nodeErrorsToAck);\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            em.getTransaction().rollback();", "originalCommit": "6e05bc8cd5cf7ed93dc3796e6322860207723057", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88", "url": "https://github.com/kiegroup/jbpm/commit/83e4142889ee8e7739e639ab1572a89add8b8b88", "message": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckErrorCommand\" execution fails on Postgres database\n\ntype conversion are not implicit in postgres db\n@Lob field needs to be in a tx", "committedDate": "2020-01-29T08:08:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNTg1MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372325851", "body": "```suggestion\r\n            errorsToAck = em.createQuery(findJobErrorsQuery, ExecutionErrorInfo.class)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        errorsToAck = em.createQuery(findJobErrorsQuery)\n          \n          \n            \n                        errorsToAck = em.createQuery(findJobErrorsQuery, ExecutionErrorInfo.class)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            errorsToAck <span class=\"pl-k\">=</span> em<span class=\"pl-k\">.</span>createQuery(findJobErrorsQuery)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            errorsToAck <span class=\"pl-k\">=</span> em<span class=\"pl-k\">.</span>createQuery(findJobErrorsQuery<span class=\"x x-first\">, </span><span class=\"pl-smi x\">ExecutionErrorInfo</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">class</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmunozfe", "createdAt": "2020-01-29T11:20:46Z", "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "diffHunk": "@@ -40,22 +43,29 @@\n  */\n public class JobAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(JobAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Jobs that previously failed but now are in one of the statuses - queued, completed or cancelled\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findJobErrorsQuery)\n-                .setParameter(\"type\", JobExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(STATUS.DONE, STATUS.CANCELLED, STATUS.QUEUED))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n+        em.getTransaction().begin();\n+        try {\n+            String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \" + \"where error.type = :type \" + \"and error.acknowledged =:acknowledged \" +\n+                                        \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n \n+            errorsToAck = em.createQuery(findJobErrorsQuery)", "originalCommit": "83e4142889ee8e7739e639ab1572a89add8b8b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNjAzNg==", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372326036", "body": "```suggestion\r\n            errorsToAck = em.createQuery(findTaskErrorsQuery, ExecutionErrorInfo.class)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        errorsToAck = em.createQuery(findTaskErrorsQuery)\n          \n          \n            \n                        errorsToAck = em.createQuery(findTaskErrorsQuery, ExecutionErrorInfo.class)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            errorsToAck <span class=\"pl-k\">=</span> em<span class=\"pl-k\">.</span>createQuery(findTaskErrorsQuery)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            errorsToAck <span class=\"pl-k\">=</span> em<span class=\"pl-k\">.</span>createQuery(findTaskErrorsQuery<span class=\"x x-first\">, </span><span class=\"pl-smi x\">ExecutionErrorInfo</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">class</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gmunozfe", "createdAt": "2020-01-29T11:21:14Z", "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/TaskAutoAckErrorCommand.java", "diffHunk": "@@ -38,22 +41,30 @@\n  */\n public class TaskAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(TaskAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Tasks that previously failed but now are in one of the statuses - completed, failed, exited, obsolete, error\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findTaskErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.activityId in (select at.taskId from AuditTaskImpl at where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findTaskErrorsQuery)\n-                .setParameter(\"type\", TaskExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(Status.Completed.toString(), Status.Exited.toString(), Status.Failed.toString(), Status.Obsolete.toString(), Status.Error.toString()))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n         \n+        em.getTransaction().begin();\n+        try {\n+            String findTaskErrorsQuery = \"select error from ExecutionErrorInfo error \" + \"where error.type = :type \" + \"and error.acknowledged =:acknowledged \" +\n+                                         \"and error.activityId in (select at.taskId from AuditTaskImpl at where status in (:status))\";\n+\n+            errorsToAck = em.createQuery(findTaskErrorsQuery)", "originalCommit": "83e4142889ee8e7739e639ab1572a89add8b8b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTMyMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372591321", "body": "this implies you use a resource local entity manager and thus might cause issues when there is actually JTA entity manager being used. Have this been tested on EAP/WAS/WLS?", "bodyText": "this implies you use a resource local entity manager and thus might cause issues when there is actually JTA entity manager being used. Have this been tested on EAP/WAS/WLS?", "bodyHTML": "<p dir=\"auto\">this implies you use a resource local entity manager and thus might cause issues when there is actually JTA entity manager being used. Have this been tested on EAP/WAS/WLS?</p>", "author": "mswiderski", "createdAt": "2020-01-29T19:40:33Z", "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "diffHunk": "@@ -40,22 +43,29 @@\n  */\n public class JobAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(JobAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Jobs that previously failed but now are in one of the statuses - queued, completed or cancelled\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findJobErrorsQuery)\n-                .setParameter(\"type\", JobExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(STATUS.DONE, STATUS.CANCELLED, STATUS.QUEUED))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n+        em.getTransaction().begin();", "originalCommit": "83e4142889ee8e7739e639ab1572a89add8b8b88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxNDQxNg==", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372814416", "bodyText": "just using the transaction manager coming from drools", "author": "elguardian", "createdAt": "2020-01-30T08:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTMyMQ=="}], "type": "inlineReview"}, {"oid": "8e37e1293fd4aa18b89480e87395f76925b71214", "url": "https://github.com/kiegroup/jbpm/commit/8e37e1293fd4aa18b89480e87395f76925b71214", "message": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckErrorCommand\" execution fails on Postgres database\n\ntype conversion are not implicit in postgres db\n@Lob field needs to be in a tx", "committedDate": "2020-01-30T08:30:11Z", "type": "commit"}, {"oid": "8e37e1293fd4aa18b89480e87395f76925b71214", "url": "https://github.com/kiegroup/jbpm/commit/8e37e1293fd4aa18b89480e87395f76925b71214", "message": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckErrorCommand\" execution fails on Postgres database\n\ntype conversion are not implicit in postgres db\n@Lob field needs to be in a tx", "committedDate": "2020-01-30T08:30:11Z", "type": "forcePushed"}]}