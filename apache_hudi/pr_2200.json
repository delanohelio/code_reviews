{"pr_number": 2200, "pr_title": "[HUDI-912]Refactor and relocate KeyGenerator to support more engines", "pr_author": "wangxianghu", "pr_createdAt": "2020-10-22T13:51:53Z", "pr_url": "https://github.com/apache/hudi/pull/2200", "timeline": [{"oid": "6be7a546e1c4ef26be51602c1ce9a08d88250d74", "url": "https://github.com/apache/hudi/commit/6be7a546e1c4ef26be51602c1ce9a08d88250d74", "message": "[HUDI-912] Refactor and relocate KeyGenerator to support more engines", "committedDate": "2020-10-30T08:30:38Z", "type": "commit"}, {"oid": "6be7a546e1c4ef26be51602c1ce9a08d88250d74", "url": "https://github.com/apache/hudi/commit/6be7a546e1c4ef26be51602c1ce9a08d88250d74", "message": "[HUDI-912] Refactor and relocate KeyGenerator to support more engines", "committedDate": "2020-10-30T08:30:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MDMzNw==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r514950337", "body": "Those `CommonKeyGenerator`s can be used for both `flink` and `java` engine. \r\nI will add some flink specific `KeyGenerator`s  when flink implementation(https://github.com/apache/hudi/pull/2176) is  landed", "bodyText": "Those CommonKeyGenerators can be used for both flink and java engine.\nI will add some flink specific KeyGenerators  when flink implementation(#2176) is  landed", "bodyHTML": "<p dir=\"auto\">Those <code>CommonKeyGenerator</code>s can be used for both <code>flink</code> and <code>java</code> engine.<br>\nI will add some flink specific <code>KeyGenerator</code>s  when flink implementation(<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"721551385\" data-permission-text=\"Title is private\" data-url=\"https://github.com/apache/hudi/issues/2176\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/apache/hudi/pull/2176/hovercard\" href=\"https://github.com/apache/hudi/pull/2176\">#2176</a>) is  landed</p>", "author": "wangxianghu", "createdAt": "2020-10-30T08:53:54Z", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/keygen/CommonComplexKeyGenerator.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*", "originalCommit": "6be7a546e1c4ef26be51602c1ce9a08d88250d74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNTEzNg==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r515235136", "body": "rename: HoodieKeyGeneratorException", "bodyText": "rename: HoodieKeyGeneratorException", "bodyHTML": "<p dir=\"auto\">rename: HoodieKeyGeneratorException</p>", "author": "vinothchandar", "createdAt": "2020-10-30T16:48:27Z", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/exception/HoodieKeyGenerateException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.exception;\n+\n+/**\n+ * Exception thrown for any higher level errors when {@link org.apache.hudi.keygen.KeyGeneratorInterface} is generating\n+ * a {@link org.apache.hudi.common.model.HoodieKey}.\n+ */\n+public class HoodieKeyGenerateException extends HoodieException {", "originalCommit": "6be7a546e1c4ef26be51602c1ce9a08d88250d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNDk5OQ==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r515424999", "bodyText": "rename: HoodieKeyGeneratorException\n\ndone", "author": "wangxianghu", "createdAt": "2020-10-30T23:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNTEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NDk4Ng==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r515394986", "body": "what the user sets is is actually `DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()`. So might be good to avoid duplicating this in `KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY` . can we revert? ", "bodyText": "what the user sets is is actually DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(). So might be good to avoid duplicating this in KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY . can we revert?", "bodyHTML": "<p dir=\"auto\">what the user sets is is actually <code>DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY()</code>. So might be good to avoid duplicating this in <code>KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY</code> . can we revert?</p>", "author": "vinothchandar", "createdAt": "2020-10-30T21:40:44Z", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/ComplexKeyGenerator.java", "diffHunk": "@@ -18,38 +17,38 @@\n \n package org.apache.hudi.keygen;\n \n-import org.apache.hudi.DataSourceWriteOptions;\n-import org.apache.hudi.common.config.TypedProperties;\n-\n import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.keygen.constant.KeyGeneratorOptions;\n+import org.apache.spark.sql.Row;\n \n import java.util.Arrays;\n import java.util.stream.Collectors;\n-import org.apache.spark.sql.Row;\n \n /**\n  * Complex key generator, which takes names of fields to be used for recordKey and partitionPath as configs.\n  */\n public class ComplexKeyGenerator extends BuiltinKeyGenerator {\n \n-  public static final String DEFAULT_RECORD_KEY_SEPARATOR = \":\";\n+  private CommonComplexKeyGenerator commonComplexKeyGenerator;\n \n   public ComplexKeyGenerator(TypedProperties props) {\n     super(props);\n-    this.recordKeyFields = Arrays.stream(props.getString(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY())\n+    this.recordKeyFields = Arrays.stream(props.getString(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY)", "originalCommit": "6be7a546e1c4ef26be51602c1ce9a08d88250d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNjg1NQ==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r515426855", "bodyText": "what the user sets is is actually DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(). So might be good to avoid duplicating this in KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY . can we revert?\n\nDataSourceWriteOptions has some hive and spark references in it.  it is a little inconvenient to move to hudi-client-common. should I refactor DataSourceWriteOptions ?", "author": "wangxianghu", "createdAt": "2020-10-30T23:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NDk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI1NjQ5OQ==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r516256499", "bodyText": "ah ok. no problem. this makes sense", "author": "vinothchandar", "createdAt": "2020-11-02T21:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NDk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NTA4OA==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r515395088", "body": "can all these members be final (intellij tip) ", "bodyText": "can all these members be final (intellij tip)", "bodyHTML": "<p dir=\"auto\">can all these members be final (intellij tip)</p>", "author": "vinothchandar", "createdAt": "2020-10-30T21:41:01Z", "path": "hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/ComplexKeyGenerator.java", "diffHunk": "@@ -18,38 +17,38 @@\n \n package org.apache.hudi.keygen;\n \n-import org.apache.hudi.DataSourceWriteOptions;\n-import org.apache.hudi.common.config.TypedProperties;\n-\n import org.apache.avro.generic.GenericRecord;\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.keygen.constant.KeyGeneratorOptions;\n+import org.apache.spark.sql.Row;\n \n import java.util.Arrays;\n import java.util.stream.Collectors;\n-import org.apache.spark.sql.Row;\n \n /**\n  * Complex key generator, which takes names of fields to be used for recordKey and partitionPath as configs.\n  */\n public class ComplexKeyGenerator extends BuiltinKeyGenerator {\n \n-  public static final String DEFAULT_RECORD_KEY_SEPARATOR = \":\";\n+  private CommonComplexKeyGenerator commonComplexKeyGenerator;", "originalCommit": "6be7a546e1c4ef26be51602c1ce9a08d88250d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTAzNg==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r515425036", "bodyText": "can all these members be final (intellij tip)\n\ndone", "author": "wangxianghu", "createdAt": "2020-10-30T23:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NTA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NTg1Ng==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r515395856", "body": "all the `Common` generators. are avro based. So let's name them like `SimpleAvroKeyGenerator` , `TimestampBasedAvroKeyGenerator` ? ", "bodyText": "all the Common generators. are avro based. So let's name them like SimpleAvroKeyGenerator , TimestampBasedAvroKeyGenerator ?", "bodyHTML": "<p dir=\"auto\">all the <code>Common</code> generators. are avro based. So let's name them like <code>SimpleAvroKeyGenerator</code> , <code>TimestampBasedAvroKeyGenerator</code> ?</p>", "author": "vinothchandar", "createdAt": "2020-10-30T21:43:08Z", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/keygen/CommonTimestampBasedKeyGenerator.java", "diffHunk": "@@ -46,15 +42,11 @@\n \n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n import static java.util.concurrent.TimeUnit.SECONDS;\n-import static org.apache.hudi.keygen.KeyGenUtils.DEFAULT_PARTITION_PATH;\n-import static org.apache.hudi.keygen.KeyGenUtils.EMPTY_RECORDKEY_PLACEHOLDER;\n-import static org.apache.hudi.keygen.KeyGenUtils.NULL_RECORDKEY_PLACEHOLDER;\n \n /**\n- * Key generator, that relies on timestamps for partitioning field. Still picks record key by name.\n+ * Common Key generator, that relies on timestamps for partitioning field. Still picks record key by name.\n  */\n-public class TimestampBasedKeyGenerator extends SimpleKeyGenerator {\n-\n+public class CommonTimestampBasedKeyGenerator extends CommonSimpleKeyGenerator {", "originalCommit": "6be7a546e1c4ef26be51602c1ce9a08d88250d74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTA2NA==", "url": "https://github.com/apache/hudi/pull/2200#discussion_r515425064", "bodyText": "all the Common generators. are avro based. So let's name them like SimpleAvroKeyGenerator , TimestampBasedAvroKeyGenerator ?\n\ndone", "author": "wangxianghu", "createdAt": "2020-10-30T23:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NTg1Ng=="}], "type": "inlineReview"}, {"oid": "de8169d1a29552232b7bfb5ebfb22286204260ce", "url": "https://github.com/apache/hudi/commit/de8169d1a29552232b7bfb5ebfb22286204260ce", "message": "Rename KeyGenerators", "committedDate": "2020-10-30T23:39:20Z", "type": "commit"}]}