{"pr_number": 2281, "pr_title": "[HUDI-1418] Set up flink client unit test infra", "pr_author": "garyli1019", "pr_createdAt": "2020-11-25T15:58:35Z", "pr_url": "https://github.com/apache/hudi/pull/2281", "timeline": [{"oid": "e3c9a8d84fe176f7374fa4d6228771e6cce66fa1", "url": "https://github.com/apache/hudi/commit/e3c9a8d84fe176f7374fa4d6228771e6cce66fa1", "message": "[HUDI-1418] set up flink client unit test infra\n\nCo-authored-by: Li Yanjia <liyanjia.gary@bytedance.com>", "committedDate": "2020-12-23T15:43:55Z", "type": "commit"}, {"oid": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "url": "https://github.com/apache/hudi/commit/3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "message": "Move datasource config to HoodieWriteConfig", "committedDate": "2020-12-30T13:26:58Z", "type": "commit"}, {"oid": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "url": "https://github.com/apache/hudi/commit/3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "message": "Move datasource config to HoodieWriteConfig", "committedDate": "2020-12-30T13:26:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxNjI4OQ==", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550216289", "body": "This line is too long, it would be better if we could break it. But it does not matter, let's refactor it next time.", "bodyText": "This line is too long, it would be better if we could break it. But it does not matter, let's refactor it next time.", "bodyHTML": "<p dir=\"auto\">This line is too long, it would be better if we could break it. But it does not matter, let's refactor it next time.</p>", "author": "yanghua", "createdAt": "2020-12-30T14:38:37Z", "path": "hudi-client/hudi-client-common/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -104,29 +80,7 @@ public HoodieWriteableTestTable forCommit(String instantTime) {\n     return (HoodieWriteableTestTable) super.forCommit(instantTime);\n   }\n \n-  public String getFileIdWithInserts(String partition) throws Exception {\n-    return getFileIdWithInserts(partition, new HoodieRecord[0]);\n-  }\n-\n-  public String getFileIdWithInserts(String partition, HoodieRecord... records) throws Exception {\n-    return getFileIdWithInserts(partition, Arrays.asList(records));\n-  }\n-\n-  public String getFileIdWithInserts(String partition, List<HoodieRecord> records) throws Exception {\n-    String fileId = UUID.randomUUID().toString();\n-    withInserts(partition, fileId, records);\n-    return fileId;\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId) throws Exception {\n-    return withInserts(partition, fileId, new HoodieRecord[0]);\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId, HoodieRecord... records) throws Exception {\n-    return withInserts(partition, fileId, Arrays.asList(records));\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId, List<HoodieRecord> records) throws Exception {\n+  public HoodieWriteableTestTable withInserts(String partition, String fileId, List<HoodieRecord> records, TaskContextSupplier contextSupplier) throws Exception {", "originalCommit": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxNjMwNA==", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550216304", "body": "This line is too long, it would be better if we could break it. But it does not matter, let's refactor it next time.", "bodyText": "This line is too long, it would be better if we could break it. But it does not matter, let's refactor it next time.", "bodyHTML": "<p dir=\"auto\">This line is too long, it would be better if we could break it. But it does not matter, let's refactor it next time.</p>", "author": "yanghua", "createdAt": "2020-12-30T14:38:39Z", "path": "hudi-client/hudi-client-common/src/test/java/org/apache/hudi/testutils/HoodieWriteableTestTable.java", "diffHunk": "@@ -104,29 +80,7 @@ public HoodieWriteableTestTable forCommit(String instantTime) {\n     return (HoodieWriteableTestTable) super.forCommit(instantTime);\n   }\n \n-  public String getFileIdWithInserts(String partition) throws Exception {\n-    return getFileIdWithInserts(partition, new HoodieRecord[0]);\n-  }\n-\n-  public String getFileIdWithInserts(String partition, HoodieRecord... records) throws Exception {\n-    return getFileIdWithInserts(partition, Arrays.asList(records));\n-  }\n-\n-  public String getFileIdWithInserts(String partition, List<HoodieRecord> records) throws Exception {\n-    String fileId = UUID.randomUUID().toString();\n-    withInserts(partition, fileId, records);\n-    return fileId;\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId) throws Exception {\n-    return withInserts(partition, fileId, new HoodieRecord[0]);\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId, HoodieRecord... records) throws Exception {\n-    return withInserts(partition, fileId, Arrays.asList(records));\n-  }\n-\n-  public HoodieWriteableTestTable withInserts(String partition, String fileId, List<HoodieRecord> records) throws Exception {\n+  public HoodieWriteableTestTable withInserts(String partition, String fileId, List<HoodieRecord> records, TaskContextSupplier contextSupplier) throws Exception {", "originalCommit": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxNzIzMg==", "url": "https://github.com/apache/hudi/pull/2281#discussion_r550217232", "body": "It would be better to split the non-static and static fields, moreover, it is a logger.", "bodyText": "It would be better to split the non-static and static fields, moreover, it is a logger.", "bodyHTML": "<p dir=\"auto\">It would be better to split the non-static and static fields, moreover, it is a logger.</p>", "author": "yanghua", "createdAt": "2020-12-30T14:41:31Z", "path": "hudi-client/hudi-flink-client/src/test/java/org/apache/hudi/testutils/HoodieFlinkClientTestHarness.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n+import org.apache.hudi.common.testutils.HoodieTestUtils;\n+\n+import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.test.util.MiniClusterWithClientResource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocalFileSystem;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.TestInfo;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class HoodieFlinkClientTestHarness extends HoodieCommonTestHarness implements Serializable {\n+\n+  protected static final Logger LOG = LogManager.getLogger(HoodieFlinkClientTestHarness.class);", "originalCommit": "3f75fa543b1d3b255963fe3f9e15a1ede0f80c66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}