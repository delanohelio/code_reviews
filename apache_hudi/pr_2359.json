{"pr_number": 2359, "pr_title": "[HUDI-1486] Remove inflight rollback in hoodie writer", "pr_author": "n3nash", "pr_createdAt": "2020-12-22T04:42:11Z", "pr_url": "https://github.com/apache/hudi/pull/2359", "timeline": [{"oid": "93572f23e81bb9b79284c6e84164101e0a5b942c", "url": "https://github.com/apache/hudi/commit/93572f23e81bb9b79284c6e84164101e0a5b942c", "message": "[HUDI-1486] Remove inline inflight rollback in hoodie writer\n1. Refactor rollback and move cleaning failed commits logic into cleaner\n2. Introduce hoodie heartbeat to ascertain failed commits\n3. Fix test cases", "committedDate": "2021-02-20T03:25:22Z", "type": "commit"}, {"oid": "93572f23e81bb9b79284c6e84164101e0a5b942c", "url": "https://github.com/apache/hudi/commit/93572f23e81bb9b79284c6e84164101e0a5b942c", "message": "[HUDI-1486] Remove inline inflight rollback in hoodie writer\n1. Refactor rollback and move cleaning failed commits logic into cleaner\n2. Introduce hoodie heartbeat to ascertain failed commits\n3. Fix test cases", "committedDate": "2021-02-20T03:25:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU4OTI2Nw==", "url": "https://github.com/apache/hudi/pull/2359#discussion_r579589267", "body": "to our discussion today, can you add a `TestHeartbeatUtils` in a subsequent PR? ", "bodyText": "to our discussion today, can you add a TestHeartbeatUtils in a subsequent PR?", "bodyHTML": "<p dir=\"auto\">to our discussion today, can you add a <code>TestHeartbeatUtils</code> in a subsequent PR?</p>", "author": "vinothchandar", "createdAt": "2021-02-20T03:51:13Z", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/heartbeat/HeartbeatUtils.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.heartbeat;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class to delete heartbeat for completed or failed instants with expired heartbeats.\n+ */\n+public class HeartbeatUtils {", "originalCommit": "93572f23e81bb9b79284c6e84164101e0a5b942c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU4OTM5Nw==", "url": "https://github.com/apache/hudi/pull/2359#discussion_r579589397", "body": "this deserves its own Exception class. ", "bodyText": "this deserves its own Exception class.", "bodyHTML": "<p dir=\"auto\">this deserves its own Exception class.</p>", "author": "vinothchandar", "createdAt": "2021-02-20T03:52:37Z", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/heartbeat/HeartbeatUtils.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.heartbeat;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class to delete heartbeat for completed or failed instants with expired heartbeats.\n+ */\n+public class HeartbeatUtils {\n+\n+  private static final Logger LOG = LogManager.getLogger(HeartbeatUtils.class);\n+\n+  /**\n+   * Deletes the heartbeat file for the specified instant.\n+   * @param fs\n+   * @param basePath\n+   * @param instantTime\n+   * @return\n+   */\n+  public static boolean deleteHeartbeatFile(FileSystem fs, String basePath, String instantTime) {\n+    boolean deleted = false;\n+    try {\n+      String heartbeatFolderPath = HoodieTableMetaClient.getHeartbeatFolderPath(basePath);\n+      deleted = fs.delete(new Path(heartbeatFolderPath + File.separator + instantTime), false);\n+      if (!deleted) {\n+        LOG.error(\"Failed to delete heartbeat for instant \" + instantTime);\n+      }\n+    } catch (IOException io) {\n+      LOG.error(\"Unable to delete heartbeat for instant \" + instantTime, io);\n+    }\n+    return deleted;\n+  }\n+\n+  /**\n+   * Deletes the heartbeat files for instants with expired heartbeats without any active instant.\n+   * @param allExistingHeartbeatInstants\n+   * @param metaClient\n+   * @param basePath\n+   */\n+  public static void cleanExpiredHeartbeats(List<String> allExistingHeartbeatInstants,\n+                                            HoodieTableMetaClient metaClient, String basePath) {\n+    Set<String> nonExpiredHeartbeatInstants = metaClient.getActiveTimeline()\n+        .filterCompletedInstants().getInstants().map(HoodieInstant::getTimestamp).collect(Collectors.toSet());\n+    allExistingHeartbeatInstants.stream().forEach(instant -> {\n+      if (!nonExpiredHeartbeatInstants.contains(instant)) {\n+        deleteHeartbeatFile(metaClient.getFs(), basePath, instant);\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Check if the heartbeat corresponding to instantTime has expired. If yes, abort by throwing an exception.\n+   * @param instantTime\n+   * @param table\n+   * @param heartbeatClient\n+   * @param config\n+   */\n+  public static void abortIfHeartbeatExpired(String instantTime, HoodieTable table,\n+                                             HoodieHeartbeatClient heartbeatClient, HoodieWriteConfig config) {\n+    ValidationUtils.checkArgument(heartbeatClient != null);\n+    try {\n+      if (config.getFailedWritesCleanPolicy().isLazy() && heartbeatClient.isHeartbeatExpired(instantTime)) {\n+        throw new HoodieException(\"Heartbeat for instant \" + instantTime + \" has expired, last heartbeat \"", "originalCommit": "93572f23e81bb9b79284c6e84164101e0a5b942c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU4OTQyOQ==", "url": "https://github.com/apache/hudi/pull/2359#discussion_r579589429", "body": "Pleas throw `HoodieIOException` whenever there is an IOException being rethrown", "bodyText": "Pleas throw HoodieIOException whenever there is an IOException being rethrown", "bodyHTML": "<p dir=\"auto\">Pleas throw <code>HoodieIOException</code> whenever there is an IOException being rethrown</p>", "author": "vinothchandar", "createdAt": "2021-02-20T03:53:02Z", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/heartbeat/HeartbeatUtils.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.heartbeat;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.table.HoodieTable;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper class to delete heartbeat for completed or failed instants with expired heartbeats.\n+ */\n+public class HeartbeatUtils {\n+\n+  private static final Logger LOG = LogManager.getLogger(HeartbeatUtils.class);\n+\n+  /**\n+   * Deletes the heartbeat file for the specified instant.\n+   * @param fs\n+   * @param basePath\n+   * @param instantTime\n+   * @return\n+   */\n+  public static boolean deleteHeartbeatFile(FileSystem fs, String basePath, String instantTime) {\n+    boolean deleted = false;\n+    try {\n+      String heartbeatFolderPath = HoodieTableMetaClient.getHeartbeatFolderPath(basePath);\n+      deleted = fs.delete(new Path(heartbeatFolderPath + File.separator + instantTime), false);\n+      if (!deleted) {\n+        LOG.error(\"Failed to delete heartbeat for instant \" + instantTime);\n+      }\n+    } catch (IOException io) {\n+      LOG.error(\"Unable to delete heartbeat for instant \" + instantTime, io);\n+    }\n+    return deleted;\n+  }\n+\n+  /**\n+   * Deletes the heartbeat files for instants with expired heartbeats without any active instant.\n+   * @param allExistingHeartbeatInstants\n+   * @param metaClient\n+   * @param basePath\n+   */\n+  public static void cleanExpiredHeartbeats(List<String> allExistingHeartbeatInstants,\n+                                            HoodieTableMetaClient metaClient, String basePath) {\n+    Set<String> nonExpiredHeartbeatInstants = metaClient.getActiveTimeline()\n+        .filterCompletedInstants().getInstants().map(HoodieInstant::getTimestamp).collect(Collectors.toSet());\n+    allExistingHeartbeatInstants.stream().forEach(instant -> {\n+      if (!nonExpiredHeartbeatInstants.contains(instant)) {\n+        deleteHeartbeatFile(metaClient.getFs(), basePath, instant);\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Check if the heartbeat corresponding to instantTime has expired. If yes, abort by throwing an exception.\n+   * @param instantTime\n+   * @param table\n+   * @param heartbeatClient\n+   * @param config\n+   */\n+  public static void abortIfHeartbeatExpired(String instantTime, HoodieTable table,\n+                                             HoodieHeartbeatClient heartbeatClient, HoodieWriteConfig config) {\n+    ValidationUtils.checkArgument(heartbeatClient != null);\n+    try {\n+      if (config.getFailedWritesCleanPolicy().isLazy() && heartbeatClient.isHeartbeatExpired(instantTime)) {\n+        throw new HoodieException(\"Heartbeat for instant \" + instantTime + \" has expired, last heartbeat \"\n+            + heartbeatClient.getLastHeartbeatTime(table.getMetaClient().getFs(), config.getBasePath(), instantTime));\n+      }\n+    } catch (IOException io) {\n+      throw new HoodieException(\"Unable to read heartbeat\", io);", "originalCommit": "93572f23e81bb9b79284c6e84164101e0a5b942c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU4OTU2MQ==", "url": "https://github.com/apache/hudi/pull/2359#discussion_r579589561", "body": "invert the condition?  and avoid the `return ;` ", "bodyText": "invert the condition?  and avoid the return ;", "bodyHTML": "<p dir=\"auto\">invert the condition?  and avoid the <code>return ;</code></p>", "author": "vinothchandar", "createdAt": "2021-02-20T03:54:36Z", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/heartbeat/HoodieHeartbeatClient.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.heartbeat;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.exception.HoodieHeartbeatException;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+/**\n+ * This class creates heartbeat for hudi client. This heartbeat is used to ascertain whether the running job is or not.\n+ * NOTE: Due to CPU contention on the driver/client node, the heartbeats could be delayed, hence it's important to set\n+ *       the value high enough to avoid that possibility.\n+ */\n+@NotThreadSafe\n+public class HoodieHeartbeatClient implements AutoCloseable, Serializable {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieHeartbeatClient.class);\n+\n+  private final transient FileSystem fs;\n+  private final String basePath;\n+  // path to the heartbeat folder where all writers are updating their heartbeats\n+  private String heartbeatFolderPath;\n+  // heartbeat interval in millis\n+  private final Long heartbeatIntervalInMs;\n+  private Integer numTolerableHeartbeatMisses;\n+  private final Long maxAllowableHeartbeatIntervalInMs;\n+  private Map<String, Heartbeat> instantToHeartbeatMap;\n+\n+  public HoodieHeartbeatClient(FileSystem fs, String basePath, Long heartbeatIntervalInMs,\n+                               Integer numTolerableHeartbeatMisses) {\n+    ValidationUtils.checkArgument(heartbeatIntervalInMs >= 1000, \"Cannot set heartbeat lower than 1 second\");\n+    this.fs = fs;\n+    this.basePath = basePath;\n+    this.heartbeatFolderPath = HoodieTableMetaClient.getHeartbeatFolderPath(basePath);\n+    this.heartbeatIntervalInMs = heartbeatIntervalInMs;\n+    this.numTolerableHeartbeatMisses = numTolerableHeartbeatMisses;\n+    this.maxAllowableHeartbeatIntervalInMs = this.heartbeatIntervalInMs * this.numTolerableHeartbeatMisses;\n+    this.instantToHeartbeatMap = new HashMap<>();\n+  }\n+\n+  class Heartbeat {\n+\n+    private String instantTime;\n+    private Boolean isHeartbeatStarted = false;\n+    private Boolean isHeartbeatStopped = false;\n+    private Long lastHeartbeatTime;\n+    private Integer numHeartbeats = 0;\n+    private Timer timer = new Timer();\n+\n+    public String getInstantTime() {\n+      return instantTime;\n+    }\n+\n+    public void setInstantTime(String instantTime) {\n+      this.instantTime = instantTime;\n+    }\n+\n+    public Boolean isHeartbeatStarted() {\n+      return isHeartbeatStarted;\n+    }\n+\n+    public void setHeartbeatStarted(Boolean heartbeatStarted) {\n+      isHeartbeatStarted = heartbeatStarted;\n+    }\n+\n+    public Boolean isHeartbeatStopped() {\n+      return isHeartbeatStopped;\n+    }\n+\n+    public void setHeartbeatStopped(Boolean heartbeatStopped) {\n+      isHeartbeatStopped = heartbeatStopped;\n+    }\n+\n+    public Long getLastHeartbeatTime() {\n+      return lastHeartbeatTime;\n+    }\n+\n+    public void setLastHeartbeatTime(Long lastHeartbeatTime) {\n+      this.lastHeartbeatTime = lastHeartbeatTime;\n+    }\n+\n+    public Integer getNumHeartbeats() {\n+      return numHeartbeats;\n+    }\n+\n+    public void setNumHeartbeats(Integer numHeartbeats) {\n+      this.numHeartbeats = numHeartbeats;\n+    }\n+\n+    public Timer getTimer() {\n+      return timer;\n+    }\n+\n+    public void setTimer(Timer timer) {\n+      this.timer = timer;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"Heartbeat{\"\n+              + \"instantTime='\" + instantTime + '\\''\n+              + \", isHeartbeatStarted=\" + isHeartbeatStarted\n+              + \", isHeartbeatStopped=\" + isHeartbeatStopped\n+              + \", lastHeartbeatTime=\" + lastHeartbeatTime\n+              + \", numHeartbeats=\" + numHeartbeats\n+              + \", timer=\" + timer\n+              + '}';\n+    }\n+  }\n+\n+  class HeartbeatTask extends TimerTask {\n+\n+    private final String instantTime;\n+\n+    HeartbeatTask(String instantTime) {\n+      this.instantTime = instantTime;\n+    }\n+\n+    @Override\n+    public void run() {\n+      updateHeartbeat(instantTime);\n+    }\n+  }\n+\n+  /**\n+   * Start a new heartbeat for the specified instant. If there is already one running, this will be a NO_OP\n+   * @param instantTime\n+   */\n+  public void start(String instantTime) {\n+    LOG.info(\"Received request to start heartbeat for instant time \" + instantTime);\n+    Heartbeat heartbeat = instantToHeartbeatMap.get(instantTime);\n+    ValidationUtils.checkArgument(heartbeat == null || !heartbeat.isHeartbeatStopped(), \"Cannot restart a stopped heartbeat for \" + instantTime);\n+    if (heartbeat != null && heartbeat.isHeartbeatStarted()) {", "originalCommit": "93572f23e81bb9b79284c6e84164101e0a5b942c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU4OTYzMg==", "url": "https://github.com/apache/hudi/pull/2359#discussion_r579589632", "body": "shuld the `Heartbeat()` constructor do this?", "bodyText": "shuld the Heartbeat() constructor do this?", "bodyHTML": "<p dir=\"auto\">shuld the <code>Heartbeat()</code> constructor do this?</p>", "author": "vinothchandar", "createdAt": "2021-02-20T03:55:12Z", "path": "hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/heartbeat/HoodieHeartbeatClient.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.client.heartbeat;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.exception.HoodieHeartbeatException;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+/**\n+ * This class creates heartbeat for hudi client. This heartbeat is used to ascertain whether the running job is or not.\n+ * NOTE: Due to CPU contention on the driver/client node, the heartbeats could be delayed, hence it's important to set\n+ *       the value high enough to avoid that possibility.\n+ */\n+@NotThreadSafe\n+public class HoodieHeartbeatClient implements AutoCloseable, Serializable {\n+\n+  private static final Logger LOG = LogManager.getLogger(HoodieHeartbeatClient.class);\n+\n+  private final transient FileSystem fs;\n+  private final String basePath;\n+  // path to the heartbeat folder where all writers are updating their heartbeats\n+  private String heartbeatFolderPath;\n+  // heartbeat interval in millis\n+  private final Long heartbeatIntervalInMs;\n+  private Integer numTolerableHeartbeatMisses;\n+  private final Long maxAllowableHeartbeatIntervalInMs;\n+  private Map<String, Heartbeat> instantToHeartbeatMap;\n+\n+  public HoodieHeartbeatClient(FileSystem fs, String basePath, Long heartbeatIntervalInMs,\n+                               Integer numTolerableHeartbeatMisses) {\n+    ValidationUtils.checkArgument(heartbeatIntervalInMs >= 1000, \"Cannot set heartbeat lower than 1 second\");\n+    this.fs = fs;\n+    this.basePath = basePath;\n+    this.heartbeatFolderPath = HoodieTableMetaClient.getHeartbeatFolderPath(basePath);\n+    this.heartbeatIntervalInMs = heartbeatIntervalInMs;\n+    this.numTolerableHeartbeatMisses = numTolerableHeartbeatMisses;\n+    this.maxAllowableHeartbeatIntervalInMs = this.heartbeatIntervalInMs * this.numTolerableHeartbeatMisses;\n+    this.instantToHeartbeatMap = new HashMap<>();\n+  }\n+\n+  class Heartbeat {\n+\n+    private String instantTime;\n+    private Boolean isHeartbeatStarted = false;\n+    private Boolean isHeartbeatStopped = false;\n+    private Long lastHeartbeatTime;\n+    private Integer numHeartbeats = 0;\n+    private Timer timer = new Timer();\n+\n+    public String getInstantTime() {\n+      return instantTime;\n+    }\n+\n+    public void setInstantTime(String instantTime) {\n+      this.instantTime = instantTime;\n+    }\n+\n+    public Boolean isHeartbeatStarted() {\n+      return isHeartbeatStarted;\n+    }\n+\n+    public void setHeartbeatStarted(Boolean heartbeatStarted) {\n+      isHeartbeatStarted = heartbeatStarted;\n+    }\n+\n+    public Boolean isHeartbeatStopped() {\n+      return isHeartbeatStopped;\n+    }\n+\n+    public void setHeartbeatStopped(Boolean heartbeatStopped) {\n+      isHeartbeatStopped = heartbeatStopped;\n+    }\n+\n+    public Long getLastHeartbeatTime() {\n+      return lastHeartbeatTime;\n+    }\n+\n+    public void setLastHeartbeatTime(Long lastHeartbeatTime) {\n+      this.lastHeartbeatTime = lastHeartbeatTime;\n+    }\n+\n+    public Integer getNumHeartbeats() {\n+      return numHeartbeats;\n+    }\n+\n+    public void setNumHeartbeats(Integer numHeartbeats) {\n+      this.numHeartbeats = numHeartbeats;\n+    }\n+\n+    public Timer getTimer() {\n+      return timer;\n+    }\n+\n+    public void setTimer(Timer timer) {\n+      this.timer = timer;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"Heartbeat{\"\n+              + \"instantTime='\" + instantTime + '\\''\n+              + \", isHeartbeatStarted=\" + isHeartbeatStarted\n+              + \", isHeartbeatStopped=\" + isHeartbeatStopped\n+              + \", lastHeartbeatTime=\" + lastHeartbeatTime\n+              + \", numHeartbeats=\" + numHeartbeats\n+              + \", timer=\" + timer\n+              + '}';\n+    }\n+  }\n+\n+  class HeartbeatTask extends TimerTask {\n+\n+    private final String instantTime;\n+\n+    HeartbeatTask(String instantTime) {\n+      this.instantTime = instantTime;\n+    }\n+\n+    @Override\n+    public void run() {\n+      updateHeartbeat(instantTime);\n+    }\n+  }\n+\n+  /**\n+   * Start a new heartbeat for the specified instant. If there is already one running, this will be a NO_OP\n+   * @param instantTime\n+   */\n+  public void start(String instantTime) {\n+    LOG.info(\"Received request to start heartbeat for instant time \" + instantTime);\n+    Heartbeat heartbeat = instantToHeartbeatMap.get(instantTime);\n+    ValidationUtils.checkArgument(heartbeat == null || !heartbeat.isHeartbeatStopped(), \"Cannot restart a stopped heartbeat for \" + instantTime);\n+    if (heartbeat != null && heartbeat.isHeartbeatStarted()) {\n+      // heartbeat already started, NO_OP\n+      return;\n+    } else {\n+      Heartbeat newHeartbeat = new Heartbeat();\n+      newHeartbeat.setHeartbeatStarted(true);", "originalCommit": "93572f23e81bb9b79284c6e84164101e0a5b942c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU5MDI5MQ==", "url": "https://github.com/apache/hudi/pull/2359#discussion_r579590291", "body": "can we add a test case for archiving with inflight instants and lazy cleaning?", "bodyText": "can we add a test case for archiving with inflight instants and lazy cleaning?", "bodyHTML": "<p dir=\"auto\">can we add a test case for archiving with inflight instants and lazy cleaning?</p>", "author": "vinothchandar", "createdAt": "2021-02-20T04:00:17Z", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/io/TestHoodieTimelineArchiveLog.java", "diffHunk": "@@ -408,11 +408,11 @@ public void testArchiveCommitCompactionNoHole() throws IOException {\n     HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n     HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n \n-    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsAndCompactionTimeline();\n+    HoodieTimeline timeline = metaClient.getActiveTimeline().getWriteTimeline();", "originalCommit": "93572f23e81bb9b79284c6e84164101e0a5b942c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU5MDM3Nw==", "url": "https://github.com/apache/hudi/pull/2359#discussion_r579590377", "body": "why this change?", "bodyText": "why this change?", "bodyHTML": "<p dir=\"auto\">why this change?</p>", "author": "vinothchandar", "createdAt": "2021-02-20T04:01:15Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/HoodieTableMetaClient.java", "diffHunk": "@@ -71,10 +72,10 @@\n   private static final long serialVersionUID = 1L;\n   private static final Logger LOG = LogManager.getLogger(HoodieTableMetaClient.class);\n   public static final String METAFOLDER_NAME = \".hoodie\";\n-  public static final String TEMPFOLDER_NAME = METAFOLDER_NAME + Path.SEPARATOR + \".temp\";\n-  public static final String AUXILIARYFOLDER_NAME = METAFOLDER_NAME + Path.SEPARATOR + \".aux\";\n-  public static final String BOOTSTRAP_INDEX_ROOT_FOLDER_PATH = AUXILIARYFOLDER_NAME + Path.SEPARATOR + \".bootstrap\";\n-\n+  public static final String TEMPFOLDER_NAME = METAFOLDER_NAME + File.separator + \".temp\";", "originalCommit": "93572f23e81bb9b79284c6e84164101e0a5b942c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU5MDUwMA==", "url": "https://github.com/apache/hudi/pull/2359#discussion_r579590500", "body": "test case for this?\r\n", "bodyText": "test case for this?", "bodyHTML": "<p dir=\"auto\">test case for this?</p>", "author": "vinothchandar", "createdAt": "2021-02-20T04:02:35Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/AbstractHoodieLogRecordScanner.java", "diffHunk": "@@ -145,6 +148,14 @@ public void scan() {\n           // hit a block with instant time greater than should be processed, stop processing further\n           break;\n         }\n+        if (r.getBlockType() != CORRUPT_BLOCK && r.getBlockType() != COMMAND_BLOCK) {", "originalCommit": "93572f23e81bb9b79284c6e84164101e0a5b942c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}