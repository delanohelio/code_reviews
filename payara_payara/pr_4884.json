{"pr_number": 4884, "pr_title": "FISH-315 Implement New Notifier API", "pr_author": "MattGill98", "pr_createdAt": "2020-09-11T16:29:54Z", "pr_url": "https://github.com/payara/Payara/pull/4884", "merge_commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "timeline": [{"oid": "4f9393a1e7c93723465da469dce90c9528fc9ea3", "url": "https://github.com/payara/Payara/commit/4f9393a1e7c93723465da469dce90c9528fc9ea3", "message": "Revert \"FISH-31 Upgrade Grizzly to 2.4.4.payara-p3\"\n\nThis reverts commit 2a0b89bc068ceb6ce93330ee0f822f5afadabdb8.\n\nThe reverted commit breaks a websocket TCK test. QACI-406 will endeavour\nto fix this test without rolling back functionality.", "committedDate": "2020-09-04T11:00:32Z", "type": "commit"}, {"oid": "baf8c002a3fa66e64f26d3e1ab871b37b291db99", "url": "https://github.com/payara/Payara/commit/baf8c002a3fa66e64f26d3e1ab871b37b291db99", "message": "Disable ServerLogTest until Grizzly upgrade\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-04T11:00:32Z", "type": "commit"}, {"oid": "a7391af371594e5326a973b0b645fa53b4f02214", "url": "https://github.com/payara/Payara/commit/a7391af371594e5326a973b0b645fa53b4f02214", "message": "FISH-315 Implement New Notifier API in Sibling Module\n\nA new notification module exists alongside the original notifier\nproject, which it was copied from. This module has then been modified to\nincorporate the new API - which is implemented in a custom example\nmodule as well as the new log notifier.\n\nThe notifiers can now be referenced by name rather than via a core enum.\nThis makes them more modular as services like the request tracing\nservice can discover the notifiers via HK2, and not through a centrally\nregistered enum.\n\nNotifications can now be sent programmatically through HK2 topics.\n\nNotifiers without any configuration can now be implemented, which\nallows dynamic notifiers to be created by users. There is also now much\nless boilerplate required to implement new services, as each notifier\nlistens for the same event type. No factories are required to be\nimplemented by the API user.\n\nThe notification get commands have also been improved to better discover\nthe notifier names, and to print better information when used from the\nconsole.\n\nIssues left to solve:\n - Some dynamic flags may not work\n - Notifier lifecycles aren't fully controlled (when are the initialize\nmethods called?\n - Performance hasn't been tested\n - No queues or thread pools are implemented for notifiers\n - Exceptions aren't handled in notifiers\n - Hasn't been tested in a clustered setup\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-08T10:17:20Z", "type": "commit"}, {"oid": "f95d3dfb4a7702e08b9191567e1c9e44487d440f", "url": "https://github.com/payara/Payara/commit/f95d3dfb4a7702e08b9191567e1c9e44487d440f", "message": "FISH-315 Add Thread Pooling to Notifiers\n\nRedesigned the notification loop to use the PayaraExecutorService. This\nprevents notifications with significant delay from running in the\nnotifying thread.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-08T10:17:52Z", "type": "commit"}, {"oid": "053e5ede6a9bb7a55e2396e35a83284a1feec5fc", "url": "https://github.com/payara/Payara/commit/053e5ede6a9bb7a55e2396e35a83284a1feec5fc", "message": "FISH-315 Fix Notifier Initialisation\n\nThe notifier bootstrap methods were failing if a configuration was\nrequired as it wasn't being configured correctly.\n\nDeleted unused classes.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-08T12:36:14Z", "type": "commit"}, {"oid": "bb5603625698bbbad2b501279c240c6274ad25b1", "url": "https://github.com/payara/Payara/commit/bb5603625698bbbad2b501279c240c6274ad25b1", "message": "FISH-315 Implement Dynamic Notifier Configuration\n\nFixed the notifier implementation so that the --dynamic flag\nfunctionality is respected. This uses a new proxy bean that duplicates\nthe current configuration and can be referenced with a lower cost. This\ncan simply be recreated each time a dynamic configuration change is\nmade.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-09T13:05:39Z", "type": "commit"}, {"oid": "b1df406f8aef0140fb45b7c6e2b0b8b428127a06", "url": "https://github.com/payara/Payara/commit/b1df406f8aef0140fb45b7c6e2b0b8b428127a06", "message": "FISH-315 Request Tracing Use New Notifier API\n\nUpdated the request tracing service to use the new notifier API.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-09T14:32:02Z", "type": "commit"}, {"oid": "12e05bbea0821bae0376f7309de1822a8714d548", "url": "https://github.com/payara/Payara/commit/12e05bbea0821bae0376f7309de1822a8714d548", "message": "FISH-315 HealthCheck Use New Notifier API\n\nUpdated the health check service to use the new notifier API.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-09T15:00:50Z", "type": "commit"}, {"oid": "5205c62cc40fec86b428859502738fefb22988ac", "url": "https://github.com/payara/Payara/commit/5205c62cc40fec86b428859502738fefb22988ac", "message": "FISH-315 Remove Lazy Notifier Loading\n\nBugs were present, so due to time the lazy loading needs removing.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-09T16:01:15Z", "type": "commit"}, {"oid": "3d51be0d96e939636efe9a5170ae40c264231491", "url": "https://github.com/payara/Payara/commit/3d51be0d96e939636efe9a5170ae40c264231491", "message": "FISH-315 Correct Whitelist Behaviour\n\nAn empty whitelist should count as no notifiers.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-09T16:22:30Z", "type": "commit"}, {"oid": "bfddeaefa502a3fe0682fcceabe9e77fe4953934", "url": "https://github.com/payara/Payara/commit/bfddeaefa502a3fe0682fcceabe9e77fe4953934", "message": "FISH-315 Fix Notifier Queue Threading\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-09T16:33:25Z", "type": "commit"}, {"oid": "50096f0bbd357fe37bd30f4fcab9247b89db11cb", "url": "https://github.com/payara/Payara/commit/50096f0bbd357fe37bd30f4fcab9247b89db11cb", "message": "FISH-315 Javadoc Notifier APIs\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-10T11:04:41Z", "type": "commit"}, {"oid": "85a4e795a4a486a206e5ec9a5ece687edaeb5845", "url": "https://github.com/payara/Payara/commit/85a4e795a4a486a206e5ec9a5ece687edaeb5845", "message": "FISH-315 Ensure HK2 Topic Distribution\n\nMake sure HK2 Events are enabled in notification service constructor.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-10T11:17:23Z", "type": "commit"}, {"oid": "83f40cefbff1f286df08b470f7f725e9048adb0b", "url": "https://github.com/payara/Payara/commit/83f40cefbff1f286df08b470f7f725e9048adb0b", "message": "FISH-315 Replace Old Notification Service\n\nRemoved the old notification service and renamed the new notification\nservice. The current notifiers still need revamping.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-10T11:37:38Z", "type": "commit"}, {"oid": "f29021e85e06d2dc807bb32d041a0945c4a5dcd4", "url": "https://github.com/payara/Payara/commit/f29021e85e06d2dc807bb32d041a0945c4a5dcd4", "message": "FISH-315 Update CDI EventBus Notifier to use new API\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-10T15:03:46Z", "type": "commit"}, {"oid": "0d2007f2cc591ba48f636b5f00ff0f93476147c3", "url": "https://github.com/payara/Payara/commit/0d2007f2cc591ba48f636b5f00ff0f93476147c3", "message": "FISH-315 Update Eventbus Notifier to Use New API\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-10T15:16:37Z", "type": "commit"}, {"oid": "add0d9c505550c972322fc5b492b8bf14429fbce", "url": "https://github.com/payara/Payara/commit/add0d9c505550c972322fc5b492b8bf14429fbce", "message": "FISH-315 Update JMS Notifier to Use New API\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-11T14:08:08Z", "type": "commit"}, {"oid": "41309d0ba324835904fc06c4c29a050a5402de3e", "url": "https://github.com/payara/Payara/commit/41309d0ba324835904fc06c4c29a050a5402de3e", "message": "FISH-315 Audit Service Use New Notifier API\n\nUpdated the Audit service to use the new notifier API.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-11T14:08:14Z", "type": "commit"}, {"oid": "10c601476262c39d98b02c91fc5f1fee78229aac", "url": "https://github.com/payara/Payara/commit/10c601476262c39d98b02c91fc5f1fee78229aac", "message": "FISH-315 JMX Monitoring Service Use New Notifier API\n\nUpdated the JMX monitoring service to use the new notifier API\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-11T14:08:14Z", "type": "commit"}, {"oid": "12146e2b315a62970caa33252af50b98e085ce8a", "url": "https://github.com/payara/Payara/commit/12146e2b315a62970caa33252af50b98e085ce8a", "message": "FISH-315 Removed extra notifiers from build\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-11T14:08:14Z", "type": "commit"}, {"oid": "b0dcabadfddaba75091e03eb62190899468588e2", "url": "https://github.com/payara/Payara/commit/b0dcabadfddaba75091e03eb62190899468588e2", "message": "FISH-315 Fix OSGI Error on Loading Payara-API\n\nThe API depended on some core notification services packages which it\ndidn't use.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-11T14:08:14Z", "type": "commit"}, {"oid": "3b12e2b3a64e57ac6a73941384ac4c50527f1cd4", "url": "https://github.com/payara/Payara/commit/3b12e2b3a64e57ac6a73941384ac4c50527f1cd4", "message": "FISH-315 Fix Admin Console Notifier Integrations\n\nThe admin console was broken by the notifier changes, so this change\nmakes all the relevant updates to get it working again.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-11T14:08:14Z", "type": "commit"}, {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "url": "https://github.com/payara/Payara/commit/1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "message": "FISH-315 Fix CDI Eventbus API\n\nThe new Notifier implementation had strayed from the original API (so\nthe Payara API wouldn't work). This change returns the original\nfunctionality.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-11T16:14:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2MjA4Mw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487762083", "body": "Do we want alias names with dash and lower case as well?", "bodyText": "Do we want alias names with dash and lower case as well?", "bodyHTML": "<p dir=\"auto\">Do we want alias names with dash and lower case as well?</p>", "author": "jbee", "createdAt": "2020-09-14T09:06:27Z", "path": "appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java", "diffHunk": "@@ -131,6 +135,15 @@\n     @Param(name = \"target\", optional = true, defaultValue = \"server-config\")\n     protected String target;\n \n+    @Param(name = \"enableNotifiers\", optional = true)\n+    private List<String> enableNotifiers;\n+\n+    @Param(name = \"disableNotifiers\", optional = true)\n+    private List<String> disableNotifiers;\n+\n+    @Param(name = \"setNotifiers\", optional = true)\n+    private List<String> setNotifiers;\n+", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18ba07b7c6a809d077c0511d68149e37e164242f", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java b/appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java\nindex beb84cbdce..a5044474e4 100644\n--- a/appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java\n+++ b/appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java\n", "chunk": "@@ -135,13 +135,13 @@ public class SetJMXMonitoringConfiguration implements AdminCommand {\n     @Param(name = \"target\", optional = true, defaultValue = \"server-config\")\n     protected String target;\n \n-    @Param(name = \"enableNotifiers\", optional = true)\n+    @Param(name = \"enableNotifiers\", alias = \"enable-notifiers\", optional = true)\n     private List<String> enableNotifiers;\n \n-    @Param(name = \"disableNotifiers\", optional = true)\n+    @Param(name = \"disableNotifiers\", alias = \"disable-notifiers\", optional = true)\n     private List<String> disableNotifiers;\n \n-    @Param(name = \"setNotifiers\", optional = true)\n+    @Param(name = \"setNotifiers\", alias = \"set-notifiers\", optional = true)\n     private List<String> setNotifiers;\n \n     @Inject\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java b/appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java\nindex beb84cbdce..a5044474e4 100644\n--- a/appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java\n+++ b/appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java\n", "chunk": "@@ -135,13 +135,13 @@ public class SetJMXMonitoringConfiguration implements AdminCommand {\n     @Param(name = \"target\", optional = true, defaultValue = \"server-config\")\n     protected String target;\n \n-    @Param(name = \"enableNotifiers\", optional = true)\n+    @Param(name = \"enableNotifiers\", alias = \"enable-notifiers\", optional = true)\n     private List<String> enableNotifiers;\n \n-    @Param(name = \"disableNotifiers\", optional = true)\n+    @Param(name = \"disableNotifiers\", alias = \"disable-notifiers\", optional = true)\n     private List<String> disableNotifiers;\n \n-    @Param(name = \"setNotifiers\", optional = true)\n+    @Param(name = \"setNotifiers\", alias = \"set-notifiers\", optional = true)\n     private List<String> setNotifiers;\n \n     @Inject\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "3b0086a8ebd1bdf984a1c295862e352fc4249a0d", "committedDate": "2021-06-09 13:19:10 +0530", "message": "FISH-1321 Copyright year update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3Nzc5Ng==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487777796", "body": "I think we should stick to single character type parameter names to avoid confusing type with actual class names. I'd think `C` works well.", "bodyText": "I think we should stick to single character type parameter names to avoid confusing type with actual class names. I'd think C works well.", "bodyHTML": "<p dir=\"auto\">I think we should stick to single character type parameter names to avoid confusing type with actual class names. I'd think <code>C</code> works well.</p>", "author": "jbee", "createdAt": "2020-09-14T09:32:47Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\nindex 1d6cf9ca37..3c311a29ac 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n", "chunk": "@@ -39,66 +39,31 @@\n  */\n package fish.payara.internal.notification;\n \n-import java.lang.reflect.ParameterizedType;\n-\n-import javax.annotation.PostConstruct;\n-import javax.inject.Inject;\n-\n import org.glassfish.config.support.GlassFishStubBean;\n-import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Contract;\n \n-import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n-\n /**\n  * A notifier that is backed by a configuration in the domain.xml\n  * \n- * @param <NC> the configuration class for the notifier\n+ * @param <C> the configuration class for the notifier\n  */\n @Contract\n-public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n-\n-    private final Class<NC> configClass;\n-\n-    @Inject\n-    private ServiceLocator habitat;\n+public abstract class PayaraConfiguredNotifier<C extends PayaraNotifierConfiguration> implements PayaraNotifier {\n \n-    private NC domainConfiguration;\n+    private final Class<C> configClass;\n \n-    protected NC configuration;\n+    protected C configuration;\n \n     public PayaraConfiguredNotifier() {\n-        this.configClass = getConfigurationClass(getClass());\n+        this.configClass = NotifierUtils.getConfigurationClass(getClass());\n     }\n \n-    @PostConstruct\n-    void injectConfiguration() {\n-        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n-        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    public final void setConfiguration(C configuration) {\n+        this.configuration = GlassFishStubBean.cloneBean(configuration, configClass);\n     }\n \n-    /**\n-     * Bootstrap the notifier and update the configuration from the domain.xml.\n-     */\n-    @Override\n-    public void bootstrap() {\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n-    }\n-\n-    public NC getConfiguration() {\n+    public final C getConfiguration() {\n         return configuration;\n     }\n \n-    /**\n-     * @param <NC>          a generic class of the notifier configuration class\n-     * @param notifierClass the notifier of the class\n-     * @return the class used to configure the configured notifier\n-     */\n-    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(\n-            Class<?> notifierClass) {\n-        final ParameterizedType genericSuperclass = (ParameterizedType) notifierClass.getGenericSuperclass();\n-        return (Class<NC>) genericSuperclass.getActualTypeArguments()[0];\n-    }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\nindex 1d6cf9ca37..3c311a29ac 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n", "chunk": "@@ -39,66 +39,31 @@\n  */\n package fish.payara.internal.notification;\n \n-import java.lang.reflect.ParameterizedType;\n-\n-import javax.annotation.PostConstruct;\n-import javax.inject.Inject;\n-\n import org.glassfish.config.support.GlassFishStubBean;\n-import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Contract;\n \n-import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n-\n /**\n  * A notifier that is backed by a configuration in the domain.xml\n  * \n- * @param <NC> the configuration class for the notifier\n+ * @param <C> the configuration class for the notifier\n  */\n @Contract\n-public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n-\n-    private final Class<NC> configClass;\n-\n-    @Inject\n-    private ServiceLocator habitat;\n+public abstract class PayaraConfiguredNotifier<C extends PayaraNotifierConfiguration> implements PayaraNotifier {\n \n-    private NC domainConfiguration;\n+    private final Class<C> configClass;\n \n-    protected NC configuration;\n+    protected C configuration;\n \n     public PayaraConfiguredNotifier() {\n-        this.configClass = getConfigurationClass(getClass());\n+        this.configClass = NotifierUtils.getConfigurationClass(getClass());\n     }\n \n-    @PostConstruct\n-    void injectConfiguration() {\n-        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n-        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    public final void setConfiguration(C configuration) {\n+        this.configuration = GlassFishStubBean.cloneBean(configuration, configClass);\n     }\n \n-    /**\n-     * Bootstrap the notifier and update the configuration from the domain.xml.\n-     */\n-    @Override\n-    public void bootstrap() {\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n-    }\n-\n-    public NC getConfiguration() {\n+    public final C getConfiguration() {\n         return configuration;\n     }\n \n-    /**\n-     * @param <NC>          a generic class of the notifier configuration class\n-     * @param notifierClass the notifier of the class\n-     * @return the class used to configure the configured notifier\n-     */\n-    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(\n-            Class<?> notifierClass) {\n-        final ParameterizedType genericSuperclass = (ParameterizedType) notifierClass.getGenericSuperclass();\n-        return (Class<NC>) genericSuperclass.getActualTypeArguments()[0];\n-    }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3ODk3OA==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487778978", "body": "isn't `getConfigurationClass(getClass())` available as field `configClass` ?", "bodyText": "isn't getConfigurationClass(getClass()) available as field configClass ?", "bodyHTML": "<p dir=\"auto\">isn't <code>getConfigurationClass(getClass())</code> available as field <code>configClass</code> ?</p>", "author": "jbee", "createdAt": "2020-09-14T09:34:57Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\nindex 1d6cf9ca37..3c311a29ac 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n", "chunk": "@@ -39,66 +39,31 @@\n  */\n package fish.payara.internal.notification;\n \n-import java.lang.reflect.ParameterizedType;\n-\n-import javax.annotation.PostConstruct;\n-import javax.inject.Inject;\n-\n import org.glassfish.config.support.GlassFishStubBean;\n-import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Contract;\n \n-import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n-\n /**\n  * A notifier that is backed by a configuration in the domain.xml\n  * \n- * @param <NC> the configuration class for the notifier\n+ * @param <C> the configuration class for the notifier\n  */\n @Contract\n-public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n-\n-    private final Class<NC> configClass;\n-\n-    @Inject\n-    private ServiceLocator habitat;\n+public abstract class PayaraConfiguredNotifier<C extends PayaraNotifierConfiguration> implements PayaraNotifier {\n \n-    private NC domainConfiguration;\n+    private final Class<C> configClass;\n \n-    protected NC configuration;\n+    protected C configuration;\n \n     public PayaraConfiguredNotifier() {\n-        this.configClass = getConfigurationClass(getClass());\n+        this.configClass = NotifierUtils.getConfigurationClass(getClass());\n     }\n \n-    @PostConstruct\n-    void injectConfiguration() {\n-        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n-        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    public final void setConfiguration(C configuration) {\n+        this.configuration = GlassFishStubBean.cloneBean(configuration, configClass);\n     }\n \n-    /**\n-     * Bootstrap the notifier and update the configuration from the domain.xml.\n-     */\n-    @Override\n-    public void bootstrap() {\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n-    }\n-\n-    public NC getConfiguration() {\n+    public final C getConfiguration() {\n         return configuration;\n     }\n \n-    /**\n-     * @param <NC>          a generic class of the notifier configuration class\n-     * @param notifierClass the notifier of the class\n-     * @return the class used to configure the configured notifier\n-     */\n-    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(\n-            Class<?> notifierClass) {\n-        final ParameterizedType genericSuperclass = (ParameterizedType) notifierClass.getGenericSuperclass();\n-        return (Class<NC>) genericSuperclass.getActualTypeArguments()[0];\n-    }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\nindex 1d6cf9ca37..3c311a29ac 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n", "chunk": "@@ -39,66 +39,31 @@\n  */\n package fish.payara.internal.notification;\n \n-import java.lang.reflect.ParameterizedType;\n-\n-import javax.annotation.PostConstruct;\n-import javax.inject.Inject;\n-\n import org.glassfish.config.support.GlassFishStubBean;\n-import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Contract;\n \n-import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n-\n /**\n  * A notifier that is backed by a configuration in the domain.xml\n  * \n- * @param <NC> the configuration class for the notifier\n+ * @param <C> the configuration class for the notifier\n  */\n @Contract\n-public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n-\n-    private final Class<NC> configClass;\n-\n-    @Inject\n-    private ServiceLocator habitat;\n+public abstract class PayaraConfiguredNotifier<C extends PayaraNotifierConfiguration> implements PayaraNotifier {\n \n-    private NC domainConfiguration;\n+    private final Class<C> configClass;\n \n-    protected NC configuration;\n+    protected C configuration;\n \n     public PayaraConfiguredNotifier() {\n-        this.configClass = getConfigurationClass(getClass());\n+        this.configClass = NotifierUtils.getConfigurationClass(getClass());\n     }\n \n-    @PostConstruct\n-    void injectConfiguration() {\n-        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n-        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    public final void setConfiguration(C configuration) {\n+        this.configuration = GlassFishStubBean.cloneBean(configuration, configClass);\n     }\n \n-    /**\n-     * Bootstrap the notifier and update the configuration from the domain.xml.\n-     */\n-    @Override\n-    public void bootstrap() {\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n-    }\n-\n-    public NC getConfiguration() {\n+    public final C getConfiguration() {\n         return configuration;\n     }\n \n-    /**\n-     * @param <NC>          a generic class of the notifier configuration class\n-     * @param notifierClass the notifier of the class\n-     * @return the class used to configure the configured notifier\n-     */\n-    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(\n-            Class<?> notifierClass) {\n-        final ParameterizedType genericSuperclass = (ParameterizedType) notifierClass.getGenericSuperclass();\n-        return (Class<NC>) genericSuperclass.getActualTypeArguments()[0];\n-    }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MTc0NA==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487781744", "body": "as this must happen to work correctly I'd think `bootstrap` should be `final` and another abstract method is introduced that is called here after configuration is initialised. Possibly passing the configuration as an argument like:\r\n\r\n```java\r\n protected abstract void bootstrap(NC configuration);\r\n```\r\nwhich then is implemented by the extending class - this circumvents wrong extension and spares the developer extending this class to understand the exact mechanics of the configuration bootstrap.", "bodyText": "as this must happen to work correctly I'd think bootstrap should be final and another abstract method is introduced that is called here after configuration is initialised. Possibly passing the configuration as an argument like:\n protected abstract void bootstrap(NC configuration);\nwhich then is implemented by the extending class - this circumvents wrong extension and spares the developer extending this class to understand the exact mechanics of the configuration bootstrap.", "bodyHTML": "<p dir=\"auto\">as this must happen to work correctly I'd think <code>bootstrap</code> should be <code>final</code> and another abstract method is introduced that is called here after configuration is initialised. Possibly passing the configuration as an argument like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" protected abstract void bootstrap(NC configuration);\"><pre> <span class=\"pl-k\">protected</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">void</span> bootstrap(<span class=\"pl-c1\">NC</span> configuration);</pre></div>\n<p dir=\"auto\">which then is implemented by the extending class - this circumvents wrong extension and spares the developer extending this class to understand the exact mechanics of the configuration bootstrap.</p>", "author": "jbee", "createdAt": "2020-09-14T09:39:44Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    /**\n+     * Bootstrap the notifier and update the configuration from the domain.xml.\n+     */\n+    @Override\n+    public void bootstrap() {\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\nindex 1d6cf9ca37..3c311a29ac 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n", "chunk": "@@ -39,66 +39,31 @@\n  */\n package fish.payara.internal.notification;\n \n-import java.lang.reflect.ParameterizedType;\n-\n-import javax.annotation.PostConstruct;\n-import javax.inject.Inject;\n-\n import org.glassfish.config.support.GlassFishStubBean;\n-import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Contract;\n \n-import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n-\n /**\n  * A notifier that is backed by a configuration in the domain.xml\n  * \n- * @param <NC> the configuration class for the notifier\n+ * @param <C> the configuration class for the notifier\n  */\n @Contract\n-public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n-\n-    private final Class<NC> configClass;\n-\n-    @Inject\n-    private ServiceLocator habitat;\n+public abstract class PayaraConfiguredNotifier<C extends PayaraNotifierConfiguration> implements PayaraNotifier {\n \n-    private NC domainConfiguration;\n+    private final Class<C> configClass;\n \n-    protected NC configuration;\n+    protected C configuration;\n \n     public PayaraConfiguredNotifier() {\n-        this.configClass = getConfigurationClass(getClass());\n+        this.configClass = NotifierUtils.getConfigurationClass(getClass());\n     }\n \n-    @PostConstruct\n-    void injectConfiguration() {\n-        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n-        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    public final void setConfiguration(C configuration) {\n+        this.configuration = GlassFishStubBean.cloneBean(configuration, configClass);\n     }\n \n-    /**\n-     * Bootstrap the notifier and update the configuration from the domain.xml.\n-     */\n-    @Override\n-    public void bootstrap() {\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n-    }\n-\n-    public NC getConfiguration() {\n+    public final C getConfiguration() {\n         return configuration;\n     }\n \n-    /**\n-     * @param <NC>          a generic class of the notifier configuration class\n-     * @param notifierClass the notifier of the class\n-     * @return the class used to configure the configured notifier\n-     */\n-    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(\n-            Class<?> notifierClass) {\n-        final ParameterizedType genericSuperclass = (ParameterizedType) notifierClass.getGenericSuperclass();\n-        return (Class<NC>) genericSuperclass.getActualTypeArguments()[0];\n-    }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\nindex 1d6cf9ca37..3c311a29ac 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n", "chunk": "@@ -39,66 +39,31 @@\n  */\n package fish.payara.internal.notification;\n \n-import java.lang.reflect.ParameterizedType;\n-\n-import javax.annotation.PostConstruct;\n-import javax.inject.Inject;\n-\n import org.glassfish.config.support.GlassFishStubBean;\n-import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Contract;\n \n-import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n-\n /**\n  * A notifier that is backed by a configuration in the domain.xml\n  * \n- * @param <NC> the configuration class for the notifier\n+ * @param <C> the configuration class for the notifier\n  */\n @Contract\n-public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n-\n-    private final Class<NC> configClass;\n-\n-    @Inject\n-    private ServiceLocator habitat;\n+public abstract class PayaraConfiguredNotifier<C extends PayaraNotifierConfiguration> implements PayaraNotifier {\n \n-    private NC domainConfiguration;\n+    private final Class<C> configClass;\n \n-    protected NC configuration;\n+    protected C configuration;\n \n     public PayaraConfiguredNotifier() {\n-        this.configClass = getConfigurationClass(getClass());\n+        this.configClass = NotifierUtils.getConfigurationClass(getClass());\n     }\n \n-    @PostConstruct\n-    void injectConfiguration() {\n-        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n-        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    public final void setConfiguration(C configuration) {\n+        this.configuration = GlassFishStubBean.cloneBean(configuration, configClass);\n     }\n \n-    /**\n-     * Bootstrap the notifier and update the configuration from the domain.xml.\n-     */\n-    @Override\n-    public void bootstrap() {\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n-    }\n-\n-    public NC getConfiguration() {\n+    public final C getConfiguration() {\n         return configuration;\n     }\n \n-    /**\n-     * @param <NC>          a generic class of the notifier configuration class\n-     * @param notifierClass the notifier of the class\n-     * @return the class used to configure the configured notifier\n-     */\n-    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(\n-            Class<?> notifierClass) {\n-        final ParameterizedType genericSuperclass = (ParameterizedType) notifierClass.getGenericSuperclass();\n-        return (Class<NC>) genericSuperclass.getActualTypeArguments()[0];\n-    }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MjI5OQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487782299", "body": "Can this be private? It feels like it should to me.", "bodyText": "Can this be private? It feels like it should to me.", "bodyHTML": "<p dir=\"auto\">Can this be private? It feels like it should to me.</p>", "author": "jbee", "createdAt": "2020-09-14T09:40:37Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    /**\n+     * Bootstrap the notifier and update the configuration from the domain.xml.\n+     */\n+    @Override\n+    public void bootstrap() {\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    public NC getConfiguration() {\n+        return configuration;\n+    }\n+\n+    /**\n+     * @param <NC>          a generic class of the notifier configuration class\n+     * @param notifierClass the notifier of the class\n+     * @return the class used to configure the configured notifier\n+     */\n+    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\nindex 1d6cf9ca37..3c311a29ac 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n", "chunk": "@@ -39,66 +39,31 @@\n  */\n package fish.payara.internal.notification;\n \n-import java.lang.reflect.ParameterizedType;\n-\n-import javax.annotation.PostConstruct;\n-import javax.inject.Inject;\n-\n import org.glassfish.config.support.GlassFishStubBean;\n-import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Contract;\n \n-import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n-\n /**\n  * A notifier that is backed by a configuration in the domain.xml\n  * \n- * @param <NC> the configuration class for the notifier\n+ * @param <C> the configuration class for the notifier\n  */\n @Contract\n-public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n-\n-    private final Class<NC> configClass;\n-\n-    @Inject\n-    private ServiceLocator habitat;\n+public abstract class PayaraConfiguredNotifier<C extends PayaraNotifierConfiguration> implements PayaraNotifier {\n \n-    private NC domainConfiguration;\n+    private final Class<C> configClass;\n \n-    protected NC configuration;\n+    protected C configuration;\n \n     public PayaraConfiguredNotifier() {\n-        this.configClass = getConfigurationClass(getClass());\n+        this.configClass = NotifierUtils.getConfigurationClass(getClass());\n     }\n \n-    @PostConstruct\n-    void injectConfiguration() {\n-        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n-        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    public final void setConfiguration(C configuration) {\n+        this.configuration = GlassFishStubBean.cloneBean(configuration, configClass);\n     }\n \n-    /**\n-     * Bootstrap the notifier and update the configuration from the domain.xml.\n-     */\n-    @Override\n-    public void bootstrap() {\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n-    }\n-\n-    public NC getConfiguration() {\n+    public final C getConfiguration() {\n         return configuration;\n     }\n \n-    /**\n-     * @param <NC>          a generic class of the notifier configuration class\n-     * @param notifierClass the notifier of the class\n-     * @return the class used to configure the configured notifier\n-     */\n-    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(\n-            Class<?> notifierClass) {\n-        final ParameterizedType genericSuperclass = (ParameterizedType) notifierClass.getGenericSuperclass();\n-        return (Class<NC>) genericSuperclass.getActualTypeArguments()[0];\n-    }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\nindex 1d6cf9ca37..3c311a29ac 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java\n", "chunk": "@@ -39,66 +39,31 @@\n  */\n package fish.payara.internal.notification;\n \n-import java.lang.reflect.ParameterizedType;\n-\n-import javax.annotation.PostConstruct;\n-import javax.inject.Inject;\n-\n import org.glassfish.config.support.GlassFishStubBean;\n-import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Contract;\n \n-import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n-\n /**\n  * A notifier that is backed by a configuration in the domain.xml\n  * \n- * @param <NC> the configuration class for the notifier\n+ * @param <C> the configuration class for the notifier\n  */\n @Contract\n-public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n-\n-    private final Class<NC> configClass;\n-\n-    @Inject\n-    private ServiceLocator habitat;\n+public abstract class PayaraConfiguredNotifier<C extends PayaraNotifierConfiguration> implements PayaraNotifier {\n \n-    private NC domainConfiguration;\n+    private final Class<C> configClass;\n \n-    protected NC configuration;\n+    protected C configuration;\n \n     public PayaraConfiguredNotifier() {\n-        this.configClass = getConfigurationClass(getClass());\n+        this.configClass = NotifierUtils.getConfigurationClass(getClass());\n     }\n \n-    @PostConstruct\n-    void injectConfiguration() {\n-        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n-        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    public final void setConfiguration(C configuration) {\n+        this.configuration = GlassFishStubBean.cloneBean(configuration, configClass);\n     }\n \n-    /**\n-     * Bootstrap the notifier and update the configuration from the domain.xml.\n-     */\n-    @Override\n-    public void bootstrap() {\n-        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n-    }\n-\n-    public NC getConfiguration() {\n+    public final C getConfiguration() {\n         return configuration;\n     }\n \n-    /**\n-     * @param <NC>          a generic class of the notifier configuration class\n-     * @param notifierClass the notifier of the class\n-     * @return the class used to configure the configured notifier\n-     */\n-    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(\n-            Class<?> notifierClass) {\n-        final ParameterizedType genericSuperclass = (ParameterizedType) notifierClass.getGenericSuperclass();\n-        return (Class<NC>) genericSuperclass.getActualTypeArguments()[0];\n-    }\n-\n }\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzAwMg==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487783002", "body": "Naming makes me wonder _of what?_\r\n\r\nI suggest `receivers` for _whitelist_ and `nonReceivers` for _blacklist_.", "bodyText": "Naming makes me wonder of what?\nI suggest receivers for whitelist and nonReceivers for blacklist.", "bodyHTML": "<p dir=\"auto\">Naming makes me wonder <em>of what?</em></p>\n<p dir=\"auto\">I suggest <code>receivers</code> for <em>whitelist</em> and <code>nonReceivers</code> for <em>blacklist</em>.</p>", "author": "jbee", "createdAt": "2020-09-14T09:41:47Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;\n+\n+    private List<String> whitelist;", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18ba07b7c6a809d077c0511d68149e37e164242f", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..00077896df 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -58,8 +58,8 @@ public class PayaraNotification implements Serializable {\n     private String message;\n     private Serializable data;\n \n-    private List<String> whitelist;\n-    private List<String> blacklist;\n+    private List<String> notifierWhitelist;\n+    private List<String> notifierBlacklist;\n \n     public String getEventType() {\n         return eventType;\n", "next_change": {"commit": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 00077896df..a53c7f3242 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> notifierWhitelist;\n-    private List<String> notifierBlacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n     public List<String> getNotifierWhitelist() {\n         return notifierWhitelist;\n     }\n \n-    protected void setNotifierWhitelist(List<String> whitelist) {\n-        this.notifierWhitelist = whitelist;\n-    }\n-\n     public List<String> getNotifierBlacklist() {\n         return notifierBlacklist;\n     }\n \n-    protected void setNotifierBlacklist(List<String> blacklist) {\n-        this.notifierBlacklist = blacklist;\n-    }\n-\n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..39b9e1ee8d 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> whitelist;\n-    private List<String> blacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = (notifierWhitelist == null) ? null : Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = (notifierBlacklist == null) ? null : Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public List<String> getWhitelist() {\n-        return whitelist;\n-    }\n-\n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n-    }\n-\n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzUwMQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487783501", "body": "Maybe even `final` ?", "bodyText": "Maybe even final ?", "bodyHTML": "<p dir=\"auto\">Maybe even <code>final</code> ?</p>", "author": "jbee", "createdAt": "2020-09-14T09:42:42Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -36,14 +37,17 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.domain;\n+package fish.payara.internal.notification;\n+\n+import java.io.Serializable;\n+import java.util.List;\n \n /**\n- * Base class for notification events.\n- *\n- * @author mertcaliskan\n+ * A notification received by notifiers and the notification service\n  */\n-public abstract class NotificationEvent {\n+public class PayaraNotification implements Serializable {", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNzM1NA==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490207354", "bodyText": "I don't see any problem with extending it - see my comment below", "author": "MattGill98", "createdAt": "2020-09-17T12:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..a53c7f3242 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -40,6 +40,7 @@\n package fish.payara.internal.notification;\n \n import java.io.Serializable;\n+import java.util.Collections;\n import java.util.List;\n \n /**\n", "next_change": null}, {"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..a53c7f3242 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> whitelist;\n-    private List<String> blacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public List<String> getWhitelist() {\n-        return whitelist;\n-    }\n-\n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n-    }\n-\n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..39b9e1ee8d 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -40,6 +40,7 @@\n package fish.payara.internal.notification;\n \n import java.io.Serializable;\n+import java.util.Collections;\n import java.util.List;\n \n /**\n", "next_change": null}, {"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..39b9e1ee8d 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> whitelist;\n-    private List<String> blacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = (notifierWhitelist == null) ? null : Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = (notifierBlacklist == null) ? null : Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public List<String> getWhitelist() {\n-        return whitelist;\n-    }\n-\n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n-    }\n-\n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAzMw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487785033", "body": "I there a good reason for messages to be mutable? I'd think messages in a \"bus\" should be immutable to ensure by construction that every receiver sees the same message. Building messages conveniently is ensured by the builder. ", "bodyText": "I there a good reason for messages to be mutable? I'd think messages in a \"bus\" should be immutable to ensure by construction that every receiver sees the same message. Building messages conveniently is ensured by the builder.", "bodyHTML": "<p dir=\"auto\">I there a good reason for messages to be mutable? I'd think messages in a \"bus\" should be immutable to ensure by construction that every receiver sees the same message. Building messages conveniently is ensured by the builder.</p>", "author": "jbee", "createdAt": "2020-09-14T09:45:19Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;\n+\n+    private List<String> whitelist;\n+    private List<String> blacklist;\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    public void setEventType(String eventType) {\n+    protected void setEventType(String eventType) {\n         this.eventType = eventType;\n     }\n \n     public String getServerName() {\n         return serverName;\n     }\n \n-    public void setServerName(String serverName) {\n+    protected void setServerName(String serverName) {\n         this.serverName = serverName;\n     }\n \n     public String getHostName() {\n         return hostName;\n     }\n \n-    public void setHostName(String hostName) {\n+    protected void setHostName(String hostName) {\n         this.hostName = hostName;\n     }\n \n     public String getDomainName() {\n         return domainName;\n     }\n \n-    public void setDomainName(String domainName) {\n+    protected void setDomainName(String domainName) {\n         this.domainName = domainName;\n     }\n \n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    public void setInstanceName(String instanceName) {\n+    protected void setInstanceName(String instanceName) {\n         this.instanceName = instanceName;\n     }\n \n     public String getSubject() {\n         return subject;\n     }\n \n-    public void setSubject(String subject) {\n+    protected void setSubject(String subject) {\n         this.subject = subject;\n     }\n \n     public String getMessage() {\n         return message;\n     }\n \n-    public void setMessage(String message) {\n+    protected void setMessage(String message) {\n         this.message = message;\n     }\n-}\n\\ No newline at end of file\n+\n+    public List<String> getWhitelist() {\n+        return whitelist;\n+    }\n+\n+    protected void setWhitelist(List<String> whitelist) {\n+        this.whitelist = whitelist;\n+    }\n+\n+    public List<String> getBlacklist() {\n+        return blacklist;\n+    }\n+\n+    protected void setBlacklist(List<String> blacklist) {\n+        this.blacklist = blacklist;\n+    }\n+\n+    public Serializable getData() {\n+        return data;\n+    }\n+\n+    protected void setData(Serializable data) {\n+        this.data = data;\n+    }", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNzE0NQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490207145", "bodyText": "It's immutable outside of the builder API with one notable caveat - if the notification is extended. I figured that since it has to be serializable that's not too much of an issue. The use case would be writing your own notification sender with extra field that your own receiver uses", "author": "MattGill98", "createdAt": "2020-09-17T12:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..a53c7f3242 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> whitelist;\n-    private List<String> blacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public List<String> getWhitelist() {\n-        return whitelist;\n-    }\n-\n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n-    }\n-\n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..39b9e1ee8d 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> whitelist;\n-    private List<String> blacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = (notifierWhitelist == null) ? null : Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = (notifierBlacklist == null) ? null : Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public List<String> getWhitelist() {\n-        return whitelist;\n-    }\n-\n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n-    }\n-\n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NjU5MQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487786591", "body": "I wonder how the data should be useful to notifiers if all we know about it is that it is `Serializable`", "bodyText": "I wonder how the data should be useful to notifiers if all we know about it is that it is Serializable", "bodyHTML": "<p dir=\"auto\">I wonder how the data should be useful to notifiers if all we know about it is that it is <code>Serializable</code></p>", "author": "jbee", "createdAt": "2020-09-14T09:47:54Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNjQ0OA==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490206448", "bodyText": "This is a hangover from before. The API specifies that getData returns a typed version of the string message. I.e. the receiver is supposed to already know what to expect", "author": "MattGill98", "createdAt": "2020-09-17T12:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NjU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "18ba07b7c6a809d077c0511d68149e37e164242f", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..00077896df 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -58,8 +58,8 @@ public class PayaraNotification implements Serializable {\n     private String message;\n     private Serializable data;\n \n-    private List<String> whitelist;\n-    private List<String> blacklist;\n+    private List<String> notifierWhitelist;\n+    private List<String> notifierBlacklist;\n \n     public String getEventType() {\n         return eventType;\n", "next_change": {"commit": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 00077896df..a53c7f3242 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> notifierWhitelist;\n-    private List<String> notifierBlacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n     public List<String> getNotifierWhitelist() {\n         return notifierWhitelist;\n     }\n \n-    protected void setNotifierWhitelist(List<String> whitelist) {\n-        this.notifierWhitelist = whitelist;\n-    }\n-\n     public List<String> getNotifierBlacklist() {\n         return notifierBlacklist;\n     }\n \n-    protected void setNotifierBlacklist(List<String> blacklist) {\n-        this.notifierBlacklist = blacklist;\n-    }\n-\n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 65e54c68a6..39b9e1ee8d 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> whitelist;\n-    private List<String> blacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = (notifierWhitelist == null) ? null : Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = (notifierBlacklist == null) ? null : Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public List<String> getWhitelist() {\n-        return whitelist;\n-    }\n-\n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n-    }\n-\n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NzIzMw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487787233", "body": "As suggested in the notification this IMHO should construct a immutable object on `build()`. ", "bodyText": "As suggested in the notification this IMHO should construct a immutable object on build().", "bodyHTML": "<p dir=\"auto\">As suggested in the notification this IMHO should construct a immutable object on <code>build()</code>.</p>", "author": "jbee", "createdAt": "2020-09-14T09:49:01Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+/**\n+ * A builder object created by a {@link PayaraNotificationFactory} used to\n+ * configure Notifications for sending.\n+ * \n+ * @author Matthew Gill\n+ */\n+public class PayaraNotificationBuilder {\n+\n+    private final PayaraNotification notification;\n+    \n+    protected PayaraNotificationBuilder(PayaraNotification notification) {\n+        this.notification = notification;\n+    }\n+\n+    public PayaraNotificationBuilder subject(String subject) {\n+        notification.setSubject(subject);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder message(String message) {\n+        notification.setMessage(message);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder data(Serializable data) {\n+        notification.setData(data);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder eventType(String eventType) {\n+        notification.setEventType(eventType);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder whitelist(String... notifierNames) {\n+        for (int i = 0; i < notifierNames.length; i++) {\n+            if (notification.getWhitelist() == null) {\n+                notification.setWhitelist(new ArrayList<>());\n+            }\n+            notification.getWhitelist().add(notifierNames[i]);\n+        }\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder blacklist(String... notifierNames) {\n+        for (int i = 0; i < notifierNames.length; i++) {\n+            if (notification.getBlacklist() == null) {\n+                notification.setBlacklist(new ArrayList<>());\n+            }\n+            notification.getBlacklist().add(notifierNames[i]);\n+        }\n+        return this;\n+    }\n+\n+    public PayaraNotification build() {\n+        return notification;", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18ba07b7c6a809d077c0511d68149e37e164242f", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\nindex 89ff0e45fc..e4a9fe15b8 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\n", "chunk": "@@ -78,20 +78,23 @@ public class PayaraNotificationBuilder {\n \n     public PayaraNotificationBuilder whitelist(String... notifierNames) {\n         for (int i = 0; i < notifierNames.length; i++) {\n-            if (notification.getWhitelist() == null) {\n-                notification.setWhitelist(new ArrayList<>());\n+            if (notification.getNotifierWhitelist() == null) {\n+                notification.setNotifierWhitelist(new ArrayList<>());\n             }\n-            notification.getWhitelist().add(notifierNames[i]);\n+            notification.getNotifierWhitelist().add(notifierNames[i]);\n+        }\n+        if (notifierNames.length == 0){\n+            notification.setNotifierWhitelist(null);\n         }\n         return this;\n     }\n \n     public PayaraNotificationBuilder blacklist(String... notifierNames) {\n         for (int i = 0; i < notifierNames.length; i++) {\n-            if (notification.getBlacklist() == null) {\n-                notification.setBlacklist(new ArrayList<>());\n+            if (notification.getNotifierBlacklist() == null) {\n+                notification.setNotifierBlacklist(new ArrayList<>());\n             }\n-            notification.getBlacklist().add(notifierNames[i]);\n+            notification.getNotifierBlacklist().add(notifierNames[i]);\n         }\n         return this;\n     }\n", "next_change": {"commit": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\nindex e4a9fe15b8..430d88968c 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\n", "chunk": "@@ -50,56 +51,93 @@ import java.util.ArrayList;\n  */\n public class PayaraNotificationBuilder {\n \n-    private final PayaraNotification notification;\n-    \n-    protected PayaraNotificationBuilder(PayaraNotification notification) {\n-        this.notification = notification;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String serverName;\n+\n+    private String subject;\n+    private String eventType;\n+\n+    private List<String> notifierWhitelist;\n+    private List<String> notifierBlacklist;\n+\n+    private String message;\n+    private Serializable data;\n+\n+    protected PayaraNotificationBuilder(String hostName, String domainName, String instanceName, String serverName) {\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.serverName = serverName;\n     }\n \n     public PayaraNotificationBuilder subject(String subject) {\n-        notification.setSubject(subject);\n+        this.subject = subject;\n         return this;\n     }\n \n     public PayaraNotificationBuilder message(String message) {\n-        notification.setMessage(message);\n+        this.message = message;\n+        if (this.data == null) {\n+            this.data = message;\n+        }\n         return this;\n     }\n \n     public PayaraNotificationBuilder data(Serializable data) {\n-        notification.setData(data);\n+        this.data = data;\n+        if (this.message == null) {\n+            this.message = data.toString();\n+        }\n         return this;\n     }\n \n     public PayaraNotificationBuilder eventType(String eventType) {\n-        notification.setEventType(eventType);\n+        this.eventType = eventType;\n         return this;\n     }\n \n+    /**\n+     * Add a list of notifiers to the receiver list for this notification. Calling\n+     * this method with an empty list will mean that no notifier receives the\n+     * message.\n+     * \n+     * @param notifierNames a list of notifiers to receive this notification\n+     * @return the builder object\n+     */\n     public PayaraNotificationBuilder whitelist(String... notifierNames) {\n         for (int i = 0; i < notifierNames.length; i++) {\n-            if (notification.getNotifierWhitelist() == null) {\n-                notification.setNotifierWhitelist(new ArrayList<>());\n+            if (notifierWhitelist == null) {\n+                notifierWhitelist = new ArrayList<>();\n             }\n-            notification.getNotifierWhitelist().add(notifierNames[i]);\n+            notifierWhitelist.add(notifierNames[i]);\n         }\n-        if (notifierNames.length == 0){\n-            notification.setNotifierWhitelist(null);\n+        if (notifierNames.length == 0) {\n+            notifierWhitelist = new ArrayList<>();\n         }\n         return this;\n     }\n \n+    /**\n+     * Add a list of notifiers to the non-receiver list for this notification. Calling\n+     * this method with an empty list will have no effect.\n+     * \n+     * @param notifierNames a list of notifiers to receive this notification\n+     * @return the builder object\n+     */\n     public PayaraNotificationBuilder blacklist(String... notifierNames) {\n         for (int i = 0; i < notifierNames.length; i++) {\n-            if (notification.getNotifierBlacklist() == null) {\n-                notification.setNotifierBlacklist(new ArrayList<>());\n+            if (notifierBlacklist == null) {\n+                notifierBlacklist = new ArrayList<>();\n             }\n-            notification.getNotifierBlacklist().add(notifierNames[i]);\n+            notifierBlacklist.add(notifierNames[i]);\n         }\n         return this;\n     }\n \n     public PayaraNotification build() {\n-        return notification;\n+        return new PayaraNotification(eventType, serverName, hostName, domainName, instanceName, subject, message, data,\n+                notifierWhitelist, notifierBlacklist);\n     }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\nindex 89ff0e45fc..430d88968c 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java\n", "chunk": "@@ -50,53 +51,93 @@ import java.util.ArrayList;\n  */\n public class PayaraNotificationBuilder {\n \n-    private final PayaraNotification notification;\n-    \n-    protected PayaraNotificationBuilder(PayaraNotification notification) {\n-        this.notification = notification;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String serverName;\n+\n+    private String subject;\n+    private String eventType;\n+\n+    private List<String> notifierWhitelist;\n+    private List<String> notifierBlacklist;\n+\n+    private String message;\n+    private Serializable data;\n+\n+    protected PayaraNotificationBuilder(String hostName, String domainName, String instanceName, String serverName) {\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.serverName = serverName;\n     }\n \n     public PayaraNotificationBuilder subject(String subject) {\n-        notification.setSubject(subject);\n+        this.subject = subject;\n         return this;\n     }\n \n     public PayaraNotificationBuilder message(String message) {\n-        notification.setMessage(message);\n+        this.message = message;\n+        if (this.data == null) {\n+            this.data = message;\n+        }\n         return this;\n     }\n \n     public PayaraNotificationBuilder data(Serializable data) {\n-        notification.setData(data);\n+        this.data = data;\n+        if (this.message == null) {\n+            this.message = data.toString();\n+        }\n         return this;\n     }\n \n     public PayaraNotificationBuilder eventType(String eventType) {\n-        notification.setEventType(eventType);\n+        this.eventType = eventType;\n         return this;\n     }\n \n+    /**\n+     * Add a list of notifiers to the receiver list for this notification. Calling\n+     * this method with an empty list will mean that no notifier receives the\n+     * message.\n+     * \n+     * @param notifierNames a list of notifiers to receive this notification\n+     * @return the builder object\n+     */\n     public PayaraNotificationBuilder whitelist(String... notifierNames) {\n         for (int i = 0; i < notifierNames.length; i++) {\n-            if (notification.getWhitelist() == null) {\n-                notification.setWhitelist(new ArrayList<>());\n+            if (notifierWhitelist == null) {\n+                notifierWhitelist = new ArrayList<>();\n             }\n-            notification.getWhitelist().add(notifierNames[i]);\n+            notifierWhitelist.add(notifierNames[i]);\n+        }\n+        if (notifierNames.length == 0) {\n+            notifierWhitelist = new ArrayList<>();\n         }\n         return this;\n     }\n \n+    /**\n+     * Add a list of notifiers to the non-receiver list for this notification. Calling\n+     * this method with an empty list will have no effect.\n+     * \n+     * @param notifierNames a list of notifiers to receive this notification\n+     * @return the builder object\n+     */\n     public PayaraNotificationBuilder blacklist(String... notifierNames) {\n         for (int i = 0; i < notifierNames.length; i++) {\n-            if (notification.getBlacklist() == null) {\n-                notification.setBlacklist(new ArrayList<>());\n+            if (notifierBlacklist == null) {\n+                notifierBlacklist = new ArrayList<>();\n             }\n-            notification.getBlacklist().add(notifierNames[i]);\n+            notifierBlacklist.add(notifierNames[i]);\n         }\n         return this;\n     }\n \n     public PayaraNotification build() {\n-        return notification;\n+        return new PayaraNotification(eventType, serverName, hostName, domainName, instanceName, subject, message, data,\n+                notifierWhitelist, notifierBlacklist);\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTI2Mw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487789263", "body": "I understand the historic reason for this to exist and being a `@Service` but I think in the new notifier concept this is/should merely be a utility class with static helpers that are just convenience methods to construct messages. \r\n\r\nIf some of these need bean state I'd think those utilities are maybe better located where the message is created which I'd assume is a service of some sorts with access to HK2 stuff.", "bodyText": "I understand the historic reason for this to exist and being a @Service but I think in the new notifier concept this is/should merely be a utility class with static helpers that are just convenience methods to construct messages.\nIf some of these need bean state I'd think those utilities are maybe better located where the message is created which I'd assume is a service of some sorts with access to HK2 stuff.", "bodyHTML": "<p dir=\"auto\">I understand the historic reason for this to exist and being a <code>@Service</code> but I think in the new notifier concept this is/should merely be a utility class with static helpers that are just convenience methods to construct messages.</p>\n<p dir=\"auto\">If some of these need bean state I'd think those utilities are maybe better located where the message is created which I'd assume is a service of some sorts with access to HK2 stuff.</p>", "author": "jbee", "createdAt": "2020-09-14T09:52:17Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "diffHunk": "@@ -37,95 +37,51 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.domain;\n+package fish.payara.internal.notification;\n \n-import com.sun.enterprise.config.serverbeans.Server;\n-import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n-import fish.payara.notification.requesttracing.RequestTrace;\n-import fish.payara.nucleus.notification.configuration.NotifierType;\n-import fish.payara.nucleus.notification.service.NotificationEventFactoryStore;\n-import org.glassfish.api.admin.ServerEnvironment;\n-import org.glassfish.hk2.api.ServiceLocator;\n-import org.jvnet.hk2.annotations.Contract;\n-\n-import javax.inject.Inject;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n import java.text.MessageFormat;\n-import java.util.List;\n import java.util.logging.Level;\n \n+import javax.inject.Inject;\n+\n+import com.sun.enterprise.config.serverbeans.Server;\n+\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Service;\n+\n /**\n- * Factory for building {@link NotificationEvent}\n+ * Factory for building {@link PayaraNotification} events.\n+ * \n  * @author mertcaliskan\n  * @since 4.1.2.171\n  */\n-@Contract\n-public abstract class NotificationEventFactory<E extends NotificationEvent> {\n-\n-    @Inject\n-    NotificationEventFactoryStore store;\n+@Service\n+public class PayaraNotificationFactory {", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNzk3NQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490207975", "bodyText": "It needs some HK2 services to be injected, and as I'm not a fan of the Globals class usage this seems to be the only clean option unless you can think of another way?", "author": "MattGill98", "createdAt": "2020-09-17T12:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\nindex 41be665c15..3dd1d362e8 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\n", "chunk": "@@ -61,6 +62,8 @@ import org.jvnet.hk2.annotations.Service;\n @Service\n public class PayaraNotificationFactory {\n \n+    private static final Logger LOGGER = Logger.getLogger(PayaraNotificationFactory.class.getName());\n+\n     @Inject\n     private ServerEnvironment environment;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\nindex 41be665c15..3dd1d362e8 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\n", "chunk": "@@ -61,6 +62,8 @@ import org.jvnet.hk2.annotations.Service;\n @Service\n public class PayaraNotificationFactory {\n \n+    private static final Logger LOGGER = Logger.getLogger(PayaraNotificationFactory.class.getName());\n+\n     @Inject\n     private ServerEnvironment environment;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "3b0086a8ebd1bdf984a1c295862e352fc4249a0d", "committedDate": "2021-06-09 13:19:10 +0530", "message": "FISH-1321 Copyright year update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MDI3Nw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487790277", "body": "I think this should be a `static` method in `PayaraNotificationBuilder`. The factory class seems like an artefact of the past that is no longer needed to build and create messages.", "bodyText": "I think this should be a static method in PayaraNotificationBuilder. The factory class seems like an artefact of the past that is no longer needed to build and create messages.", "bodyHTML": "<p dir=\"auto\">I think this should be a <code>static</code> method in <code>PayaraNotificationBuilder</code>. The factory class seems like an artefact of the past that is no longer needed to build and create messages.</p>", "author": "jbee", "createdAt": "2020-09-14T09:54:03Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "diffHunk": "@@ -135,33 +91,34 @@ public E buildNotificationEvent(String name, List<HealthCheckResultEntry> entrie\n      * @param parameters An additional parameters to be formatted as part of the message\n      * @return the resulting {@link NotificationEvent}\n      */\n-    public E buildNotificationEvent(Level level, String subject, String message, Object[] parameters) {\n-        E event = initializeEvent(createEventInstance());\n-        event.setSubject(subject);\n+    public PayaraNotification buildNotificationEvent(Level level, String subject, String message, Object[] parameters) {\n+        PayaraNotification event = buildNotificationEvent(subject, message);\n         if (parameters != null && parameters.length > 0) {\n             message = MessageFormat.format(message, parameters);\n         }\n-        event.setMessage(message);\n+        event.setEventType(level.getName());\n         return event;\n     }\n \n-    public NotificationEventFactoryStore getStore() {\n-        return store;\n-    }\n-\n-    protected String getSubject(Level level) {\n-        return \"Health Check notification with severity level: \" + level.getName();\n+    /**\n+     * @return a builder object used to configure notifiers\n+     */\n+    public PayaraNotificationBuilder newBuilder() {", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\nindex 41be665c15..3dd1d362e8 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\n", "chunk": "@@ -92,33 +94,32 @@ public class PayaraNotificationFactory {\n      * @return the resulting {@link NotificationEvent}\n      */\n     public PayaraNotification buildNotificationEvent(Level level, String subject, String message, Object[] parameters) {\n-        PayaraNotification event = buildNotificationEvent(subject, message);\n         if (parameters != null && parameters.length > 0) {\n             message = MessageFormat.format(message, parameters);\n         }\n-        event.setEventType(level.getName());\n-        return event;\n+        return newBuilder()\n+                .subject(subject)\n+                .message(message)\n+                .eventType(level.getName())\n+                .build();\n     }\n \n     /**\n      * @return a builder object used to configure notifiers\n      */\n     public PayaraNotificationBuilder newBuilder() {\n-        return new PayaraNotificationBuilder(createEvent());\n-    }\n-\n-    protected PayaraNotification createEvent() {\n-        PayaraNotification event = new PayaraNotification();\n+        String hostName;\n         try {\n-            event.setHostName(InetAddress.getLocalHost().getHostName());\n+            hostName = InetAddress.getLocalHost().getHostName();\n         } catch (UnknownHostException ex) {\n-            //No-op\n+            LOGGER.log(Level.WARNING, \"Unable to resolve local hostname\", ex);\n+            hostName = \"?.?.?.?\";\n         }\n-        event.setDomainName(environment.getDomainName());\n-        event.setInstanceName(environment.getInstanceName());\n-        Server server = habitat.getService(Server.class, environment.getInstanceName());\n-        event.setServerName(server.getName());\n-\n-        return event;\n+        final String domainName = environment.getDomainName();\n+        final String instanceName = environment.getInstanceName();\n+        final Server server = habitat.getService(Server.class, environment.getInstanceName());\n+        final String serverName = server.getName();\n+        return new PayaraNotificationBuilder(hostName, domainName, instanceName, serverName);\n     }\n+\n }\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\nindex 41be665c15..3dd1d362e8 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java\n", "chunk": "@@ -92,33 +94,32 @@ public class PayaraNotificationFactory {\n      * @return the resulting {@link NotificationEvent}\n      */\n     public PayaraNotification buildNotificationEvent(Level level, String subject, String message, Object[] parameters) {\n-        PayaraNotification event = buildNotificationEvent(subject, message);\n         if (parameters != null && parameters.length > 0) {\n             message = MessageFormat.format(message, parameters);\n         }\n-        event.setEventType(level.getName());\n-        return event;\n+        return newBuilder()\n+                .subject(subject)\n+                .message(message)\n+                .eventType(level.getName())\n+                .build();\n     }\n \n     /**\n      * @return a builder object used to configure notifiers\n      */\n     public PayaraNotificationBuilder newBuilder() {\n-        return new PayaraNotificationBuilder(createEvent());\n-    }\n-\n-    protected PayaraNotification createEvent() {\n-        PayaraNotification event = new PayaraNotification();\n+        String hostName;\n         try {\n-            event.setHostName(InetAddress.getLocalHost().getHostName());\n+            hostName = InetAddress.getLocalHost().getHostName();\n         } catch (UnknownHostException ex) {\n-            //No-op\n+            LOGGER.log(Level.WARNING, \"Unable to resolve local hostname\", ex);\n+            hostName = \"?.?.?.?\";\n         }\n-        event.setDomainName(environment.getDomainName());\n-        event.setInstanceName(environment.getInstanceName());\n-        Server server = habitat.getService(Server.class, environment.getInstanceName());\n-        event.setServerName(server.getName());\n-\n-        return event;\n+        final String domainName = environment.getDomainName();\n+        final String instanceName = environment.getInstanceName();\n+        final Server server = habitat.getService(Server.class, environment.getInstanceName());\n+        final String serverName = server.getName();\n+        return new PayaraNotificationBuilder(hostName, domainName, instanceName, serverName);\n     }\n+\n }\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "3b0086a8ebd1bdf984a1c295862e352fc4249a0d", "committedDate": "2021-06-09 13:19:10 +0530", "message": "FISH-1321 Copyright year update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NDA1MA==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487794050", "body": "The javadoc should explain when this is called.", "bodyText": "The javadoc should explain when this is called.", "bodyHTML": "<p dir=\"auto\">The javadoc should explain when this is called.</p>", "author": "jbee", "createdAt": "2020-09-14T10:00:00Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java", "diffHunk": "@@ -37,23 +37,32 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.notification.eventbus.core;\n+package fish.payara.internal.notification;\n \n-import fish.payara.notification.NotificationData;\n-import fish.payara.nucleus.notification.domain.NotificationEvent;\n+import org.jvnet.hk2.annotations.Contract;\n \n /**\n- * @author mertcaliskan\n+ * A contract for a service representing a dynamic PayaraNotifier with no\n+ * domain.xml configuration. For a notifier with domain.xml configuration see\n+ * {@link PayaraConfiguredNotifier}.\n  */\n-public class CDIEventbusNotificationEvent extends NotificationEvent {\n+@Contract\n+public interface PayaraNotifier {\n \n-    private NotificationData notificationData;\n+    /**\n+     * Receive notifications from the notification service.\n+     * @param event the notification\n+     */\n+    void handleNotification(PayaraNotification event);\n \n-    public NotificationData getNotificationData() {\n-        return notificationData;\n-    }\n+    /**\n+     * Initialise the object from any configuration values.\n+     */\n+    default void bootstrap() {};", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\nindex 5d2eb4069f..2374556c92 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\n", "chunk": "@@ -56,13 +56,17 @@ public interface PayaraNotifier {\n     void handleNotification(PayaraNotification event);\n \n     /**\n-     * Initialise the object from any configuration values.\n+     * Initialise any required properties. Called when the notifier is initialised,\n+     * or configuration values are changed.\n      */\n-    default void bootstrap() {};\n+    default void bootstrap() {\n+    };\n \n     /**\n-     * Destroy any objects before configuration values are changed.\n+     * Destroy any objects before configuration values are changed. Called when the\n+     * server shuts down or before the notifier is reinitialised.\n      */\n-    default void destroy() {};\n+    default void destroy() {\n+    };\n \n }\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\nindex 5d2eb4069f..2374556c92 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\n", "chunk": "@@ -56,13 +56,17 @@ public interface PayaraNotifier {\n     void handleNotification(PayaraNotification event);\n \n     /**\n-     * Initialise the object from any configuration values.\n+     * Initialise any required properties. Called when the notifier is initialised,\n+     * or configuration values are changed.\n      */\n-    default void bootstrap() {};\n+    default void bootstrap() {\n+    };\n \n     /**\n-     * Destroy any objects before configuration values are changed.\n+     * Destroy any objects before configuration values are changed. Called when the\n+     * server shuts down or before the notifier is reinitialised.\n      */\n-    default void destroy() {};\n+    default void destroy() {\n+    };\n \n }\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjMwMw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487802303", "body": "Wonder why this does not have the `Command` suffix.", "bodyText": "Wonder why this does not have the Command suffix.", "bodyHTML": "<p dir=\"auto\">Wonder why this does not have the <code>Command</code> suffix.</p>", "author": "jbee", "createdAt": "2020-09-14T10:14:15Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java", "diffHunk": "@@ -37,39 +37,54 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.admin;\n+package fish.payara.internal.notification.admin;\n+\n+import static java.lang.Boolean.FALSE;\n+import static java.lang.Boolean.TRUE;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+\n+import javax.inject.Inject;\n \n import com.sun.enterprise.config.serverbeans.Config;\n import com.sun.enterprise.util.SystemPropertyConstants;\n-import fish.payara.nucleus.notification.configuration.NotificationServiceConfiguration;\n+import com.sun.enterprise.util.ColumnFormatter;\n+\n import org.glassfish.api.ActionReport;\n import org.glassfish.api.Param;\n import org.glassfish.api.admin.AdminCommand;\n import org.glassfish.api.admin.AdminCommandContext;\n import org.glassfish.hk2.api.ServiceLocator;\n import org.glassfish.internal.api.Target;\n \n-import javax.inject.Inject;\n-import java.lang.reflect.ParameterizedType;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n \n /**\n+ * The base admin command to get the configuration of a specified notifier.\n+ * Extend this class to fetch custom notifier configuration options.\n+ * \n  * @author mertcaliskan\n+ * @author Matthew Gill\n  */\n-public abstract class BaseGetNotifierConfiguration<NC> implements AdminCommand {\n+public abstract class BaseGetNotifierConfiguration<NC extends PayaraNotifierConfiguration> implements AdminCommand {", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfigurationCommand.java\nsimilarity index 91%\nrename from nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java\nrename to nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfigurationCommand.java\nindex fe7d374c5e..80cd184f59 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfigurationCommand.java\n", "chunk": "@@ -73,7 +73,7 @@ import fish.payara.internal.notification.PayaraNotifierConfiguration;\n  * @author mertcaliskan\n  * @author Matthew Gill\n  */\n-public abstract class BaseGetNotifierConfiguration<NC extends PayaraNotifierConfiguration> implements AdminCommand {\n+public abstract class BaseGetNotifierConfigurationCommand<C extends PayaraNotifierConfiguration> implements AdminCommand {\n \n     @Inject\n     private Target targetUtil;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfigurationCommand.java\nsimilarity index 81%\nrename from nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java\nrename to nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfigurationCommand.java\nindex fe7d374c5e..e86a860d6e 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfigurationCommand.java\n", "chunk": "@@ -73,7 +74,7 @@ import fish.payara.internal.notification.PayaraNotifierConfiguration;\n  * @author mertcaliskan\n  * @author Matthew Gill\n  */\n-public abstract class BaseGetNotifierConfiguration<NC extends PayaraNotifierConfiguration> implements AdminCommand {\n+public abstract class BaseGetNotifierConfigurationCommand<C extends PayaraNotifierConfiguration> implements AdminCommand {\n \n     @Inject\n     private Target targetUtil;\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjQ5MQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487802491", "body": "Wonder why this does not have the `Command` suffix.", "bodyText": "Wonder why this does not have the Command suffix.", "bodyHTML": "<p dir=\"auto\">Wonder why this does not have the <code>Command</code> suffix.</p>", "author": "jbee", "createdAt": "2020-09-14T10:14:35Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java", "diffHunk": "@@ -53,17 +60,19 @@\n import org.jvnet.hk2.config.SingleConfigCode;\n import org.jvnet.hk2.config.TransactionFailure;\n \n-import javax.inject.Inject;\n-import java.beans.PropertyVetoException;\n-import java.lang.reflect.ParameterizedType;\n-import java.util.Properties;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n \n /**\n+ * The base admin command to set the configuration of a specified notifier.\n+ * Extend this class to configure custom notifier configuration options\n+ * from @Param injected fields.\n+ * \n+ * @author Matthew Gill\n  * @author mertcaliskan\n  */\n-public abstract class BaseRequestTracingNotifierConfigurer<C extends Notifier> implements AdminCommand {\n+public abstract class BaseSetNotifierConfiguration<NC extends PayaraNotifierConfiguration, N extends PayaraNotifier> implements AdminCommand {", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfigurationCommand.java\nsimilarity index 83%\nrename from nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java\nrename to nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfigurationCommand.java\nindex 0ca348f074..9ce957a3d8 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfigurationCommand.java\n", "chunk": "@@ -72,7 +70,7 @@ import fish.payara.internal.notification.PayaraNotifierConfiguration;\n  * @author Matthew Gill\n  * @author mertcaliskan\n  */\n-public abstract class BaseSetNotifierConfiguration<NC extends PayaraNotifierConfiguration, N extends PayaraNotifier> implements AdminCommand {\n+public abstract class BaseSetNotifierConfigurationCommand<C extends PayaraNotifierConfiguration> implements AdminCommand {\n \n     @Inject\n     protected Target targetUtil;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfigurationCommand.java\nsimilarity index 83%\nrename from nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java\nrename to nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfigurationCommand.java\nindex 0ca348f074..9ce957a3d8 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfigurationCommand.java\n", "chunk": "@@ -72,7 +70,7 @@ import fish.payara.internal.notification.PayaraNotifierConfiguration;\n  * @author Matthew Gill\n  * @author mertcaliskan\n  */\n-public abstract class BaseSetNotifierConfiguration<NC extends PayaraNotifierConfiguration, N extends PayaraNotifier> implements AdminCommand {\n+public abstract class BaseSetNotifierConfigurationCommand<C extends PayaraNotifierConfiguration> implements AdminCommand {\n \n     @Inject\n     protected Target targetUtil;\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwNTMxNQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487805315", "body": "```suggestion\r\n    <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<T> type);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<?> type);\n          \n          \n            \n                <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<T> type);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">T</span> extends <span class=\"pl-smi\">PayaraNotifierConfiguration</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">T</span> getNotifierConfigurationByType(<span class=\"pl-k\">Class&lt;<span class=\"x x-first x-last\">?</span>&gt;</span> type);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">T</span> extends <span class=\"pl-smi\">PayaraNotifierConfiguration</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">T</span> getNotifierConfigurationByType(<span class=\"pl-k\">Class&lt;<span class=\"pl-smi x x-first x-last\">T</span>&gt;</span> type);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jbee", "createdAt": "2020-09-14T10:19:29Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java", "diffHunk": "@@ -36,41 +35,46 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.configuration;\n-\n-import org.glassfish.api.admin.config.ConfigExtension;\n-import org.jvnet.hk2.config.*;\n+package fish.payara.internal.notification.admin;\n \n import java.beans.PropertyVetoException;\n import java.util.List;\n \n+import org.glassfish.api.admin.config.ConfigExtension;\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+import org.jvnet.hk2.config.DuckTyped;\n+import org.jvnet.hk2.config.Element;\n+\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n /**\n  * @author mertcaliskan\n- *\n  */\n-@Configured\n-public interface NotificationServiceConfiguration extends ConfigBeanProxy, ConfigExtension {\n+@Configured(name = \"notification-service-configuration\")\n+public interface NotificationServiceConfiguration extends ConfigExtension {\n \n     @Attribute(defaultValue = \"false\", dataType = Boolean.class)\n     String getEnabled();\n     void enabled(String value) throws PropertyVetoException;\n \n     @Element(\"*\")\n-    List<NotifierConfiguration> getNotifierConfigurationList();\n+    List<PayaraNotifierConfiguration> getNotifierConfigurationList();\n \n     @DuckTyped\n-    <T extends NotifierConfiguration> T getNotifierConfigurationByType(Class type);\n+    <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<?> type);", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java\nindex a092bd0680..b56c780885 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java\n", "chunk": "@@ -62,7 +62,7 @@ public interface NotificationServiceConfiguration extends ConfigExtension {\n     List<PayaraNotifierConfiguration> getNotifierConfigurationList();\n \n     @DuckTyped\n-    <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<?> type);\n+    <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<T> type);\n \n     class Duck {\n         public static <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(NotificationServiceConfiguration config, Class<T> type) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java\nindex a092bd0680..b56c780885 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java\n", "chunk": "@@ -62,7 +62,7 @@ public interface NotificationServiceConfiguration extends ConfigExtension {\n     List<PayaraNotifierConfiguration> getNotifierConfigurationList();\n \n     @DuckTyped\n-    <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<?> type);\n+    <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<T> type);\n \n     class Duck {\n         public static <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(NotificationServiceConfiguration config, Class<T> type) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNDA0Mw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487814043", "body": "The javadoc should explain when this is called.", "bodyText": "The javadoc should explain when this is called.", "bodyHTML": "<p dir=\"auto\">The javadoc should explain when this is called.</p>", "author": "jbee", "createdAt": "2020-09-14T10:35:57Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java", "diffHunk": "@@ -37,23 +37,32 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.notification.eventbus.core;\n+package fish.payara.internal.notification;\n \n-import fish.payara.notification.NotificationData;\n-import fish.payara.nucleus.notification.domain.NotificationEvent;\n+import org.jvnet.hk2.annotations.Contract;\n \n /**\n- * @author mertcaliskan\n+ * A contract for a service representing a dynamic PayaraNotifier with no\n+ * domain.xml configuration. For a notifier with domain.xml configuration see\n+ * {@link PayaraConfiguredNotifier}.\n  */\n-public class CDIEventbusNotificationEvent extends NotificationEvent {\n+@Contract\n+public interface PayaraNotifier {\n \n-    private NotificationData notificationData;\n+    /**\n+     * Receive notifications from the notification service.\n+     * @param event the notification\n+     */\n+    void handleNotification(PayaraNotification event);\n \n-    public NotificationData getNotificationData() {\n-        return notificationData;\n-    }\n+    /**\n+     * Initialise the object from any configuration values.\n+     */\n+    default void bootstrap() {};\n+\n+    /**\n+     * Destroy any objects before configuration values are changed.\n+     */\n+    default void destroy() {};", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\nindex 5d2eb4069f..2374556c92 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\n", "chunk": "@@ -56,13 +56,17 @@ public interface PayaraNotifier {\n     void handleNotification(PayaraNotification event);\n \n     /**\n-     * Initialise the object from any configuration values.\n+     * Initialise any required properties. Called when the notifier is initialised,\n+     * or configuration values are changed.\n      */\n-    default void bootstrap() {};\n+    default void bootstrap() {\n+    };\n \n     /**\n-     * Destroy any objects before configuration values are changed.\n+     * Destroy any objects before configuration values are changed. Called when the\n+     * server shuts down or before the notifier is reinitialised.\n      */\n-    default void destroy() {};\n+    default void destroy() {\n+    };\n \n }\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\nindex 5d2eb4069f..2374556c92 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java\n", "chunk": "@@ -56,13 +56,17 @@ public interface PayaraNotifier {\n     void handleNotification(PayaraNotification event);\n \n     /**\n-     * Initialise the object from any configuration values.\n+     * Initialise any required properties. Called when the notifier is initialised,\n+     * or configuration values are changed.\n      */\n-    default void bootstrap() {};\n+    default void bootstrap() {\n+    };\n \n     /**\n-     * Destroy any objects before configuration values are changed.\n+     * Destroy any objects before configuration values are changed. Called when the\n+     * server shuts down or before the notifier is reinitialised.\n      */\n-    default void destroy() {};\n+    default void destroy() {\n+    };\n \n }\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487818854", "body": "This will run once every 500ms so there should be a loop sending all messages available at the start of the run. Just one seems delaying message delivery unnecessarily and substantially. ", "bodyText": "This will run once every 500ms so there should be a loop sending all messages available at the start of the run. Just one seems delaying message delivery unnecessarily and substantially.", "bodyHTML": "<p dir=\"auto\">This will run once every 500ms so there should be a loop sending all messages available at the start of the run. Just one seems delaying message delivery unnecessarily and substantially.</p>", "author": "jbee", "createdAt": "2020-09-14T10:45:10Z", "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.getNotifierName;\n+import static java.lang.Boolean.valueOf;\n+import static java.lang.String.format;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.glassfish.hk2.api.ServiceHandle;\n+\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotification;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n+public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n+\n+    private final PayaraNotifier notifier;\n+    private final String notifierName;\n+\n+    private final Queue<PayaraNotification> notificationQueue;\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+        this(notifierHandle, null);\n+    }\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+        this.notifier = notifierHandle.getService();\n+        this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n+        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+    }\n+\n+    protected String getName() {\n+        return notifierName;\n+    }\n+\n+    protected void destroy() {\n+        notifier.destroy();\n+    }\n+\n+    protected void bootstrap() {\n+        notifier.bootstrap();\n+    }\n+\n+    @Override\n+    public void accept(PayaraNotification notification) {\n+        if (isEnabled() && !this.notificationQueue.offer(notification)) {\n+            LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        final PayaraNotification notification = notificationQueue.peek();\n+        try {\n+            if (notification != null && isEnabled()) {\n+                notifier.handleNotification(notification);\n+                notificationQueue.remove();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.log(Level.WARNING,\n+                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        }", "originalCommit": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwOTYyMg==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490209622", "bodyText": "It's worth bearing in mind that each thread run loops through every single notifier, so I wasn't sure if trying to flush every single notification every time might have the potential to stall the other notifiers", "author": "MattGill98", "createdAt": "2020-09-17T12:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MTI5Ng==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490271296", "bodyText": "I understand your concern but I can't see how the notifiers actually would affect each other directly other then competing for CPU in general. If we want to enforce fairness beyond OS multi-threading I suggest to look into a single worker thread multi-dispatch where any message enters a single queue and the worker thread pulls from there and dispatches directly to the PayaraNotifiers. So instead of a NotifierHandler per type of PayaraNotifier there is only the single dispatch for all of them.", "author": "jbee", "createdAt": "2020-09-17T14:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzNzk2Mw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490937963", "bodyText": "Just so I understand properly, are you suggesting that instead of having one task for the entire service that loops through each notifier polling them, we have one thread for each notifier to flush it's queue?", "author": "MattGill98", "createdAt": "2020-09-18T13:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMjQxMQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r491032411", "bodyText": "Oh I wasn't looking close enough and assumed from your comment that the notifiers would each be scheduled so that they actually do compete with each other in some form - Now I had a closer look and saw that there is only a single job scheduled that sequentially works the notifiers. So your concern was that working a single notifier in its entirety could delay working the other notifiers later in the sequence.\nSo what I suggested was more of a round robin. Forget the NotifierHandler class exist. Think that in the service you have a list of notifiers and a (generic) queue of messages to deliver. The method called periodically has a loop that runs until the queue is empty. It pulls one message from the queue and forwards it to each notifier that should receive it. This way all notifier will always see the first message before any can see the second which can be said is quite fair. On the downside a notifier that is very slow in its message processing will slow down message processing for all other notifiers. A problem the current loop has as well just in another form.\nWhich brings me back to what I thought initially the solution was - that each notifier would have its own queue and its own scheduled task. As this would solve \"stalling\" messages for other notifiers. Each would in their task method try to send all messages of the queue. Now the notifiers compete for CPU and co but given we want messages going through the system as fast as possible this is a good thing. But we still might delay message processing because of the scheduling. This makes me think: why do we use scheduled tasks when it can be event-reaction that are asynchronously coupled by a queue.\nI think what we want is:\n\nthe thread creating a message to be send should not be delayed\nnotifiers do not affect each other message delivery\nmessages are delivered as promptly as possible\nmessages are delivered in order they are handed to the service (for each notifier)\n\nWith this in mind I think a queue already decouples a message source from sending the message so the scheduling is just causing unnecessary delay and work. The message processor or processors should just block wait on the queue. A solution that has all the qualities above is a bit more complicated.\n[Edit: realised it can be simpler, changed the text below]\n\nSource puts the message in each receiving notifiers individual queue (via service)\neach notifier specific queue has a own thread block wait - when it awakens from the message offered to the queue it pulls it and forwards the message to the notifier.\nnotifier does its notifier specific thing\n\nOnly downside I see here is that this needs n worker threads for n notifier types. But they mostly be waiting.\nAlso the number of actually enabled and receiving notifiers is low. So if this is build so that the thread for a notifier is only spawned if there is actually a message for that notifier and it is enabled I think this is a good way to meet all the qualities we want.", "author": "jbee", "createdAt": "2020-09-18T15:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxMDI4Mw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r491910283", "bodyText": "I've created a thread for each notifier that runs with a 5ms delay but waits on the queue to fill up - I hope this addresses the threading problems!", "author": "MattGill98", "createdAt": "2020-09-21T09:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex f4d3dcb80e..0106d0bf5c 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -102,15 +143,14 @@ public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n                 notifier.handleNotification(notification);\n                 notificationQueue.remove();\n             }\n-        } catch (Exception ex) {\n+        } catch (final Exception ex) {\n             LOGGER.log(Level.WARNING,\n                     format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n         }\n     }\n \n     private boolean isEnabled() {\n-        if (notifier instanceof PayaraConfiguredNotifier) {\n-            PayaraNotifierConfiguration config = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n+        if (config != null) {\n             return valueOf(config.getEnabled());\n         }\n         return true;\n", "next_change": {"commit": "3bdefc41de83b205edc9ea15deba70ae17dd36a9", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex 0106d0bf5c..67a2ed247a 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -149,9 +155,12 @@ public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n         }\n     }\n \n+    /**\n+     * @return true if the current notifier is enabled, or false otherwise\n+     */\n     private boolean isEnabled() {\n         if (config != null) {\n-            return valueOf(config.getEnabled());\n+            return valueOf(PayaraConfiguredNotifier.class.cast(notifier).getConfiguration().getEnabled());\n         }\n         return true;\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex f4d3dcb80e..6e8908b100 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -56,62 +61,130 @@ import fish.payara.internal.notification.PayaraNotification;\n import fish.payara.internal.notification.PayaraNotifier;\n import fish.payara.internal.notification.PayaraNotifierConfiguration;\n \n-public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+public class NotifierHandler implements Consumer<PayaraNotification> {\n \n     private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n \n     private final PayaraNotifier notifier;\n+    private final PayaraNotifierConfiguration config;\n     private final String notifierName;\n \n-    private final Queue<PayaraNotification> notificationQueue;\n+    private final BlockingQueue<PayaraNotification> notificationQueue;\n+    \n+    private final ScheduledExecutorService executor;\n+    private final AtomicInteger threadNumber = new AtomicInteger(1);\n+    private ScheduledFuture<?> taskResult;\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle) {\n         this(notifierHandle, null);\n     }\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle, final PayaraNotifierConfiguration config) {\n         this.notifier = notifierHandle.getService();\n         this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n-        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+        this.config = config;\n+\n+        this.notificationQueue = new LinkedBlockingDeque<>();\n+        this.executor = Executors.newScheduledThreadPool(1,\n+                r -> new Thread(r, notifierName + \"-\" + threadNumber.getAndIncrement()));\n+    }\n+\n+    protected PayaraNotifierConfiguration getConfig() {\n+        return config;\n     }\n \n     protected String getName() {\n         return notifierName;\n     }\n \n-    protected void destroy() {\n-        notifier.destroy();\n+    protected void reconfigure() {\n+        // Get the current configuration\n+        PayaraNotifierConfiguration currentConfig = null;\n+        if (config != null) {\n+            currentConfig = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n+            if (currentConfig == null) {\n+                currentConfig = config;\n+            }\n+        }\n+\n+        final boolean enabled = config != null && valueOf(config.getEnabled());\n+        final boolean wasEnabled = config != null && valueOf(currentConfig.getEnabled());\n+\n+        if (!enabled) {\n+            if (wasEnabled) {\n+                // If the notifier isn't enabled but was before\n+                destroy();\n+            }\n+        } else {\n+            if (wasEnabled) {\n+                // If the notifier is enabled and was before\n+                destroy();\n+                bootstrap();\n+            } else {\n+                // If the notifier is enabled and wasn't before\n+                bootstrap();\n+            }\n+        }\n     }\n \n-    protected void bootstrap() {\n-        notifier.bootstrap();\n+    protected synchronized void destroy() {\n+        // Should only destroy a notifier if it's enabled before any configuration change\n+        final boolean wasEnabled = isEnabled();\n+\n+        // Set the configuration before destroying the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n+        }\n+        if (taskResult != null) {\n+            taskResult.cancel(true);\n+        }\n+        if (wasEnabled) {\n+            notifier.destroy();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected synchronized void bootstrap() {\n+        // Set the configuration before bootstrapping the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n+        }\n+        if (isEnabled()) {\n+            notifier.bootstrap();\n+            taskResult = executor.scheduleWithFixedDelay(this::run, 0, 5, TimeUnit.MILLISECONDS);\n+        }\n     }\n \n     @Override\n-    public void accept(PayaraNotification notification) {\n+    public void accept(final PayaraNotification notification) {\n         if (isEnabled() && !this.notificationQueue.offer(notification)) {\n             LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n         }\n     }\n \n-    @Override\n-    public void run() {\n-        final PayaraNotification notification = notificationQueue.peek();\n+    private void run() {\n+        assert isEnabled();\n         try {\n-            if (notification != null && isEnabled()) {\n-                notifier.handleNotification(notification);\n-                notificationQueue.remove();\n+            final PayaraNotification notification = notificationQueue.take();\n+            try {\n+                if (notification != null) {\n+                    notifier.handleNotification(notification);\n+                }\n+            } catch (final Exception ex) {\n+                LOGGER.log(Level.WARNING,\n+                        format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n             }\n-        } catch (Exception ex) {\n-            LOGGER.log(Level.WARNING,\n-                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        } catch (InterruptedException ex) {\n+            LOGGER.log(Level.FINE, format(\"Cancelled waiting on queue for notifier \\\"%s\\\".\", notifierName), ex);\n         }\n     }\n \n+    /**\n+     * @return true if the current notifier is enabled, or false otherwise\n+     */\n     private boolean isEnabled() {\n-        if (notifier instanceof PayaraConfiguredNotifier) {\n-            PayaraNotifierConfiguration config = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n-            return valueOf(config.getEnabled());\n+        if (config != null) {\n+            return valueOf(PayaraConfiguredNotifier.class.cast(notifier).getConfiguration().getEnabled());\n         }\n         return true;\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"oid": "d03f03a32374361f4dfc328cea39415211873d4c", "url": "https://github.com/payara/Payara/commit/d03f03a32374361f4dfc328cea39415211873d4c", "message": "FISH-315 Prevent Duplicate Notifiers Enabled\n\nCurrently the log notifier can be enabled repeatedly, meaning the\ndomain.xml fills up with log notifier blocks. This commit prevents\nthis by adding explicit checks to make sure the enabled notifier doesn't\nalready exist.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-16T10:41:37Z", "type": "commit"}, {"oid": "d96904cd509efdb7ff5a0f0a98d1886ebe9b7b82", "url": "https://github.com/payara/Payara/commit/d96904cd509efdb7ff5a0f0a98d1886ebe9b7b82", "message": "FISH-315 Allow Silent Notifications\n\nThere should be a distinct difference between a notification with no\nwhitelist (all notifiers), and a notification with an empty whitelist\n(no notifiers). This commit allows empty whitelists.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-16T10:43:00Z", "type": "commit"}, {"oid": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "url": "https://github.com/payara/Payara/commit/c8cbff0839d8749eda6decd20f0fd24ac18091de", "message": "FISH-315 Address Jan's Review Comments\n\n- Affixed every command class with \"Command\"\n- Renamed 2 letter generics to 1 letter alternative\n- Javadocced and fixed bootstrap and destroy behaviour so that they are\nonly called when appropriate. A bug existed where the destroy method was\ncalled whenever the create method was called.\n- Removed unnecessary extra generic from the set command\n- Changed the REST API properties to the service class names to read\nnicer\n- Fixed bug where the health check admin page didn't correctly recognise\nenabled services\n- Removed configured notifier bootstrap method to remove the possibility\nof invalid method overriding\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-17T12:04:14Z", "type": "commit"}, {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f", "url": "https://github.com/payara/Payara/commit/18ba07b7c6a809d077c0511d68149e37e164242f", "message": "FISH-315 Address Jan's Review Comments\n\n- Add aliases to notifier sender commands\n- Make notification whitelist and blacklist names more specific\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-17T12:30:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NTU0Mw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490275543", "body": "Looking at this I wonder how or where the target notifier is identified. I assume there is something in the `configuration` that allows this. Maybe the javadoc can explain a but how this method is used and what it does.", "bodyText": "Looking at this I wonder how or where the target notifier is identified. I assume there is something in the configuration that allows this. Maybe the javadoc can explain a but how this method is used and what it does.", "bodyHTML": "<p dir=\"auto\">Looking at this I wonder how or where the target notifier is identified. I assume there is something in the <code>configuration</code> that allows this. Maybe the javadoc can explain a but how this method is used and what it does.</p>", "author": "jbee", "createdAt": "2020-09-17T14:07:27Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import org.jvnet.hk2.annotations.Contract;\n+\n+/**\n+ * A contract for the notification service, which allows the internal API to\n+ * send events to the notification service without having a direct reference to\n+ * it.\n+ */\n+@Contract\n+public interface NotifierManager {\n+\n+    void reconfigureNotifier(PayaraNotifierConfiguration configuration);", "originalCommit": "18ba07b7c6a809d077c0511d68149e37e164242f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f3edf3837243e51a37df0ba1ec063bb424d6678", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java\nindex 7522d3dffe..abab8285c2 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java\n", "chunk": "@@ -49,6 +49,12 @@ import org.jvnet.hk2.annotations.Contract;\n @Contract\n public interface NotifierManager {\n \n+    /**\n+     * Alert the notification service that a notifier configuration has been updated\n+     * with the --dynamic flag, so the notifier needs updating dynamically.\n+     * \n+     * @param configuration the configuration that was updated\n+     */\n     void reconfigureNotifier(PayaraNotifierConfiguration configuration);\n \n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java\nindex 7522d3dffe..abab8285c2 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java\n", "chunk": "@@ -49,6 +49,12 @@ import org.jvnet.hk2.annotations.Contract;\n @Contract\n public interface NotifierManager {\n \n+    /**\n+     * Alert the notification service that a notifier configuration has been updated\n+     * with the --dynamic flag, so the notifier needs updating dynamically.\n+     * \n+     * @param configuration the configuration that was updated\n+     */\n     void reconfigureNotifier(PayaraNotifierConfiguration configuration);\n \n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTA0Ng==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490285046", "body": "I see the setters are still in and the builder is mostly a fluent API alias for calling setters on the notification. I really would like to see this using builder with fields for the individual values and a notification with a constructor accepting all the fields called on `build()`.", "bodyText": "I see the setters are still in and the builder is mostly a fluent API alias for calling setters on the notification. I really would like to see this using builder with fields for the individual values and a notification with a constructor accepting all the fields called on build().", "bodyHTML": "<p dir=\"auto\">I see the setters are still in and the builder is mostly a fluent API alias for calling setters on the notification. I really would like to see this using builder with fields for the individual values and a notification with a constructor accepting all the fields called on <code>build()</code>.</p>", "author": "jbee", "createdAt": "2020-09-17T14:19:22Z", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -117,20 +117,20 @@ protected void setMessage(String message) {\n         this.message = message;\n     }\n \n-    public List<String> getWhitelist() {\n-        return whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    protected void setNotifierWhitelist(List<String> whitelist) {\n+        this.notifierWhitelist = whitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    protected void setNotifierBlacklist(List<String> blacklist) {\n+        this.notifierBlacklist = blacklist;", "originalCommit": "18ba07b7c6a809d077c0511d68149e37e164242f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 00077896df..a53c7f3242 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> notifierWhitelist;\n-    private List<String> notifierBlacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n     public List<String> getNotifierWhitelist() {\n         return notifierWhitelist;\n     }\n \n-    protected void setNotifierWhitelist(List<String> whitelist) {\n-        this.notifierWhitelist = whitelist;\n-    }\n-\n     public List<String> getNotifierBlacklist() {\n         return notifierBlacklist;\n     }\n \n-    protected void setNotifierBlacklist(List<String> blacklist) {\n-        this.notifierBlacklist = blacklist;\n-    }\n-\n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\nindex 00077896df..39b9e1ee8d 100644\n--- a/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n+++ b/nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java\n", "chunk": "@@ -49,95 +50,71 @@ public class PayaraNotification implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    private String eventType;\n-    private String serverName;\n-    private String hostName;\n-    private String domainName;\n-    private String instanceName;\n-    private String subject;\n-    private String message;\n-    private Serializable data;\n-\n-    private List<String> notifierWhitelist;\n-    private List<String> notifierBlacklist;\n+    private final String eventType;\n+    private final String serverName;\n+    private final String hostName;\n+    private final String domainName;\n+    private final String instanceName;\n+    private final String subject;\n+    private final String message;\n+    private final Serializable data;\n+\n+    private final List<String> notifierWhitelist;\n+    private final List<String> notifierBlacklist;\n+\n+    public PayaraNotification(String eventType, String serverName, String hostName, String domainName,\n+            String instanceName, String subject, String message, Serializable data, List<String> notifierWhitelist,\n+            List<String> notifierBlacklist) {\n+        this.eventType = eventType;\n+        this.serverName = serverName;\n+        this.hostName = hostName;\n+        this.domainName = domainName;\n+        this.instanceName = instanceName;\n+        this.subject = subject;\n+        this.message = message;\n+        this.data = data;\n+        this.notifierWhitelist = (notifierWhitelist == null) ? null : Collections.unmodifiableList(notifierWhitelist);\n+        this.notifierBlacklist = (notifierBlacklist == null) ? null : Collections.unmodifiableList(notifierBlacklist);\n+    }\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    protected void setEventType(String eventType) {\n-        this.eventType = eventType;\n-    }\n-\n     public String getServerName() {\n         return serverName;\n     }\n \n-    protected void setServerName(String serverName) {\n-        this.serverName = serverName;\n-    }\n-\n     public String getHostName() {\n         return hostName;\n     }\n \n-    protected void setHostName(String hostName) {\n-        this.hostName = hostName;\n-    }\n-\n     public String getDomainName() {\n         return domainName;\n     }\n \n-    protected void setDomainName(String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    protected void setInstanceName(String instanceName) {\n-        this.instanceName = instanceName;\n-    }\n-\n     public String getSubject() {\n         return subject;\n     }\n \n-    protected void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n     public String getMessage() {\n         return message;\n     }\n \n-    protected void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n     public List<String> getNotifierWhitelist() {\n         return notifierWhitelist;\n     }\n \n-    protected void setNotifierWhitelist(List<String> whitelist) {\n-        this.notifierWhitelist = whitelist;\n-    }\n-\n     public List<String> getNotifierBlacklist() {\n         return notifierBlacklist;\n     }\n \n-    protected void setNotifierBlacklist(List<String> blacklist) {\n-        this.notifierBlacklist = blacklist;\n-    }\n-\n     public Serializable getData() {\n         return data;\n     }\n \n-    protected void setData(Serializable data) {\n-        this.data = data;\n-    }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTc4Ng==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490291786", "body": "Just noticed that factory in line below is also still on. Is there a reason to not have the `newBuilder` be a static method in the builder class?", "bodyText": "Just noticed that factory in line below is also still on. Is there a reason to not have the newBuilder be a static method in the builder class?", "bodyHTML": "<p dir=\"auto\">Just noticed that factory in line below is also still on. Is there a reason to not have the <code>newBuilder</code> be a static method in the builder class?</p>", "author": "jbee", "createdAt": "2020-09-17T14:28:04Z", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java", "diffHunk": "@@ -285,7 +286,7 @@ public void sendNotification(String name, HealthCheckResult checkResult, Level l\n         String subject = \"Health Check notification with severity level: \" + level.getName();\n         String messageFormatted = getMessageFormatted(new Object[]{name, getCumulativeMessages(checkResult.getEntries())});\n \n-        List<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();\n+        Collection<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();", "originalCommit": "18ba07b7c6a809d077c0511d68149e37e164242f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNzYzOA==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490907638", "bodyText": "The factory is needed to inject the HK2 properties required in the notification. I've reworked the builder API so it should be more clear now!", "author": "MattGill98", "createdAt": "2020-09-18T12:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTc4Ng=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "6e5843535e9e7a4a6cab5eb7e1e3c41bf9915fab", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java b/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\nindex 9a0141d231..c3d105cef2 100644\n--- a/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\n+++ b/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\n", "chunk": "@@ -284,17 +285,18 @@ public abstract class BaseHealthCheck<O extends HealthCheckExecutionOptions, C e\n     public void sendNotification(String name, HealthCheckResult checkResult, Level level) {\n         String message = \"{0}:{1}\";\n         String subject = \"Health Check notification with severity level: \" + level.getName();\n-        String messageFormatted = getMessageFormatted(new Object[]{name, getCumulativeMessages(checkResult.getEntries())});\n-\n-        Collection<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();\n-        PayaraNotification notification = notificationFactory.newBuilder()\n-            .whitelist(enabledNotifiers.toArray(new String[0]))\n-            .subject(name)\n-            .message(messageFormatted)\n-            .data(new HealthCheckNotificationData(checkResult.getEntries()))\n-            .eventType(level.getName())\n-            .build();\n-        notificationEventBus.publish(notification);\n+\n+        if (healthCheckService.getNotifierExecutionOptionsList() != null) {\n+            for (int i = 0; i < healthCheckService.getNotifierExecutionOptionsList().size(); i++) {\n+                NotifierExecutionOptions notifierExecutionOptions = healthCheckService.getNotifierExecutionOptionsList().get(i);\n+\n+                if (notifierExecutionOptions.isEnabled(level)) {\n+                    NotificationEventFactory notificationEventFactory = eventFactoryStore.get(notifierExecutionOptions.getNotifierType());\n+                    NotificationEvent notificationEvent = notificationEventFactory.buildNotificationEvent(name, checkResult.getEntries(), level);\n+                    notificationService.notify(EventSource.HEALTHCHECK, notificationEvent);\n+                }\n+            }\n+        }\n \n         if (healthCheckService.isHistoricalTraceEnabled()) {\n             healthCheckEventStore.addTrace(new Date().getTime(), level, subject, message,\n", "next_change": {"commit": "5575e12899917dbe9544126e34d3c0af4acf8b26", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java b/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\nindex c3d105cef2..a72d631eca 100644\n--- a/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\n+++ b/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\n", "chunk": "@@ -285,18 +293,17 @@ public abstract class BaseHealthCheck<O extends HealthCheckExecutionOptions, C e\n     public void sendNotification(String name, HealthCheckResult checkResult, Level level) {\n         String message = \"{0}:{1}\";\n         String subject = \"Health Check notification with severity level: \" + level.getName();\n-\n-        if (healthCheckService.getNotifierExecutionOptionsList() != null) {\n-            for (int i = 0; i < healthCheckService.getNotifierExecutionOptionsList().size(); i++) {\n-                NotifierExecutionOptions notifierExecutionOptions = healthCheckService.getNotifierExecutionOptionsList().get(i);\n-\n-                if (notifierExecutionOptions.isEnabled(level)) {\n-                    NotificationEventFactory notificationEventFactory = eventFactoryStore.get(notifierExecutionOptions.getNotifierType());\n-                    NotificationEvent notificationEvent = notificationEventFactory.buildNotificationEvent(name, checkResult.getEntries(), level);\n-                    notificationService.notify(EventSource.HEALTHCHECK, notificationEvent);\n-                }\n-            }\n-        }\n+        String messageFormatted = getMessageFormatted(new Object[]{name, getCumulativeMessages(checkResult.getEntries())});\n+\n+        Collection<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();\n+        PayaraNotification notification = notificationFactory.newBuilder()\n+            .whitelist(enabledNotifiers.toArray(new String[0]))\n+            .subject(name)\n+            .message(messageFormatted)\n+            .data(new HealthCheckNotificationData(checkResult.getEntries()))\n+            .eventType(level.getName())\n+            .build();\n+        notificationEventBus.publish(notification);\n \n         if (healthCheckService.isHistoricalTraceEnabled()) {\n             healthCheckEventStore.addTrace(new Date().getTime(), level, subject, message,\n", "next_change": null}, {"header": "diff --git a/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java b/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\nindex c3d105cef2..a72d631eca 100644\n--- a/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\n+++ b/nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java\n", "chunk": "@@ -304,4 +311,16 @@ public abstract class BaseHealthCheck<O extends HealthCheckExecutionOptions, C e\n         }\n     }\n \n+    private String getMessageFormatted(Object[] parameters) {\n+        String formattedMessage = null;\n+        if (parameters != null && parameters.length > 0) {\n+            formattedMessage = MessageFormat.format(\"{0}:{1}\", parameters);\n+        }\n+        return formattedMessage;\n+    }\n+\n+    private String getCumulativeMessages(List<HealthCheckResultEntry> entries) {\n+        return \"Health Check Result:\" + entries.toString();\n+    }\n+\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}, {"oid": "6e5843535e9e7a4a6cab5eb7e1e3c41bf9915fab", "committedDate": "2020-09-10 17:44:01 +0100", "message": "FISH-333 Add Payara HealthCheck Service checkers to MicroProfile Health Readiness Checks"}, {"oid": "4df50406c6030b313b6ac3d58afa59192164448d", "committedDate": "2020-09-29 15:13:59 +0100", "message": "Now change on the display-on-health-endpoint parameter will trigger register or un-register of Payara HealthCheck Service Checker into Microprofile Health"}, {"oid": "5575e12899917dbe9544126e34d3c0af4acf8b26", "committedDate": "2020-09-29 15:34:02 +0100", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-333"}, {"oid": "3aec4e1e832606a01e83ee49541601029cd4fa88", "committedDate": "2020-10-02 15:29:22 +0100", "message": "Changed flag name form 'displayOnHealthEndpoint' to 'addToMicroProfileHealth' to reflect more accurate description."}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "3b0086a8ebd1bdf984a1c295862e352fc4249a0d", "committedDate": "2021-06-09 13:19:10 +0530", "message": "FISH-1321 Copyright year update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NDQ4MA==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490294480", "body": "Not so sure about this guard. If `notifiers` isn't empty shouldn't the `destroy` run even when not disabled? What if I do the bootstrap, disable the service and then get here, shouldn't we still `destroy`?", "bodyText": "Not so sure about this guard. If notifiers isn't empty shouldn't the destroy run even when not disabled? What if I do the bootstrap, disable the service and then get here, shouldn't we still destroy?", "bodyHTML": "<p dir=\"auto\">Not so sure about this guard. If <code>notifiers</code> isn't empty shouldn't the <code>destroy</code> run even when not disabled? What if I do the bootstrap, disable the service and then get here, shouldn't we still <code>destroy</code>?</p>", "author": "jbee", "createdAt": "2020-09-17T14:31:30Z", "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java", "diffHunk": "@@ -190,7 +192,9 @@ public void shutdownNotificationService() {\n         if (execution != null) {\n             execution.cancel(true);\n         }\n-        notifiers.forEach(NotifierHandler::destroy);\n+        if (enabled) {", "originalCommit": "18ba07b7c6a809d077c0511d68149e37e164242f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f215290af1503130b7eb210a8e566f359fb3bdc3", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java\nindex e6ad714d67..d9a43c94f3 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java\n", "chunk": "@@ -192,13 +192,12 @@ public class NotificationService implements NotifierManager, EventListener, Conf\n         if (execution != null) {\n             execution.cancel(true);\n         }\n-        if (enabled) {\n-            notifiers.forEach(NotifierHandler::destroy);\n-        }\n+        notifiers.forEach(NotifierHandler::destroy);\n     }\n \n     public void bootstrapNotificationService() {\n         if (configuration != null) {\n+            final boolean wasEnabled = this.enabled;\n             this.enabled = Boolean.valueOf(configuration.getEnabled());\n \n             if (this.enabled) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java\nindex e6ad714d67..3f61b493f2 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java\n", "chunk": "@@ -189,16 +182,12 @@ public class NotificationService implements NotifierManager, EventListener, Conf\n     }\n \n     public void shutdownNotificationService() {\n-        if (execution != null) {\n-            execution.cancel(true);\n-        }\n-        if (enabled) {\n-            notifiers.forEach(NotifierHandler::destroy);\n-        }\n+        notifiers.forEach(NotifierHandler::destroy);\n     }\n \n     public void bootstrapNotificationService() {\n         if (configuration != null) {\n+            final boolean wasEnabled = this.enabled;\n             this.enabled = Boolean.valueOf(configuration.getEnabled());\n \n             if (this.enabled) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "3b0086a8ebd1bdf984a1c295862e352fc4249a0d", "committedDate": "2021-06-09 13:19:10 +0530", "message": "FISH-1321 Copyright year update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI1Nw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490297257", "body": "This is the kind of _set_ that you will not see coming should this not behave as expected and you start looking. I wonder if there is a better way where the config and the notifier interact a bit more obvious with each other.", "bodyText": "This is the kind of set that you will not see coming should this not behave as expected and you start looking. I wonder if there is a better way where the config and the notifier interact a bit more obvious with each other.", "bodyHTML": "<p dir=\"auto\">This is the kind of <em>set</em> that you will not see coming should this not behave as expected and you start looking. I wonder if there is a better way where the config and the notifier interact a bit more obvious with each other.</p>", "author": "jbee", "createdAt": "2020-09-17T14:34:37Z", "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -61,34 +61,75 @@\n     private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n \n     private final PayaraNotifier notifier;\n+    private final PayaraNotifierConfiguration config;\n     private final String notifierName;\n \n     private final Queue<PayaraNotification> notificationQueue;\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle) {\n         this(notifierHandle, null);\n     }\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle, final PayaraNotifierConfiguration config) {\n         this.notifier = notifierHandle.getService();\n         this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n         this.notificationQueue = new ConcurrentLinkedQueue<>();\n+        this.config = config;\n+    }\n+\n+    protected PayaraNotifierConfiguration getConfig() {\n+        return config;\n     }\n \n     protected String getName() {\n         return notifierName;\n     }\n \n+    protected void reconfigure() {\n+        // Get the current configuration\n+        PayaraNotifierConfiguration currentConfig = null;\n+        if (config != null) {\n+            currentConfig = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n+            if (currentConfig == null) {\n+                currentConfig = config;\n+            }\n+        }\n+\n+        final boolean enabled = config != null && valueOf(config.getEnabled());\n+        final boolean wasEnabled = config != null && valueOf(currentConfig.getEnabled());\n+\n+        if (!enabled) {\n+            if (wasEnabled) {\n+                // If the notifier isn't enabled but was before\n+                destroy();\n+            }\n+        } else {\n+            if (wasEnabled) {\n+                // If the notifier is enabled and was before\n+                destroy();\n+                bootstrap();\n+            } else {\n+                // If the notifier is enabled and wasn't before\n+                bootstrap();\n+            }\n+        }\n+    }\n+\n     protected void destroy() {\n         notifier.destroy();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected void bootstrap() {\n+        // Set the configuration before bootstrapping the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);", "originalCommit": "18ba07b7c6a809d077c0511d68149e37e164242f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwODg3Mw==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490908873", "bodyText": "I know what you mean, but I can't currently think of a better way. Any ideas?", "author": "MattGill98", "createdAt": "2020-09-18T12:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0NDQyNQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490944425", "bodyText": "No, would need to checkout the codebase and browse around this a little to get a better understanding of the relations involved. But as long as we are aware of this I think we could also just give it some time and at some point in the future a batter way becomes apparent to us - then we just have to also do the change :)", "author": "jbee", "createdAt": "2020-09-18T13:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3bdefc41de83b205edc9ea15deba70ae17dd36a9", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex 0106d0bf5c..67a2ed247a 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -116,6 +116,10 @@ public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n     }\n \n     protected void destroy() {\n+        // Set the configuration before destroying the notifier so that isEnabled() returns false\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n+        }\n         notifier.destroy();\n     }\n \n", "next_change": {"commit": "f215290af1503130b7eb210a8e566f359fb3bdc3", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex 67a2ed247a..5af54f75cf 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -116,11 +116,16 @@ public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n     }\n \n     protected void destroy() {\n-        // Set the configuration before destroying the notifier so that isEnabled() returns false\n+        // Should only destroy a notifier if it's enabled before any configuration change\n+        final boolean wasEnabled = isEnabled();\n+\n+        // Set the configuration before destroying the notifier\n         if (config != null) {\n             PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n         }\n-        notifier.destroy();\n+        if (wasEnabled) {\n+            notifier.destroy();\n+        }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n", "next_change": {"commit": "ef556e7147d613099b4466b3214f4958753dcb6a", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex 5af54f75cf..6e8908b100 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -123,19 +135,23 @@ public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n         if (config != null) {\n             PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n         }\n+        if (taskResult != null) {\n+            taskResult.cancel(true);\n+        }\n         if (wasEnabled) {\n             notifier.destroy();\n         }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void bootstrap() {\n+    protected synchronized void bootstrap() {\n         // Set the configuration before bootstrapping the notifier\n         if (config != null) {\n             PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n         }\n         if (isEnabled()) {\n             notifier.bootstrap();\n+            taskResult = executor.scheduleWithFixedDelay(this::run, 0, 5, TimeUnit.MILLISECONDS);\n         }\n     }\n \n", "next_change": null}]}}]}}, {"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex 0106d0bf5c..67a2ed247a 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -125,7 +129,9 @@ public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n         if (config != null) {\n             PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n         }\n-        notifier.bootstrap();\n+        if (isEnabled()) {\n+            notifier.bootstrap();\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "ef556e7147d613099b4466b3214f4958753dcb6a", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex 67a2ed247a..6e8908b100 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -115,22 +127,31 @@ public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n         }\n     }\n \n-    protected void destroy() {\n-        // Set the configuration before destroying the notifier so that isEnabled() returns false\n+    protected synchronized void destroy() {\n+        // Should only destroy a notifier if it's enabled before any configuration change\n+        final boolean wasEnabled = isEnabled();\n+\n+        // Set the configuration before destroying the notifier\n         if (config != null) {\n             PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n         }\n-        notifier.destroy();\n+        if (taskResult != null) {\n+            taskResult.cancel(true);\n+        }\n+        if (wasEnabled) {\n+            notifier.destroy();\n+        }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void bootstrap() {\n+    protected synchronized void bootstrap() {\n         // Set the configuration before bootstrapping the notifier\n         if (config != null) {\n             PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n         }\n         if (isEnabled()) {\n             notifier.bootstrap();\n+            taskResult = executor.scheduleWithFixedDelay(this::run, 0, 5, TimeUnit.MILLISECONDS);\n         }\n     }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "changed_code": [{"header": "diff --git a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\nindex 0106d0bf5c..6e8908b100 100644\n--- a/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n+++ b/nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java\n", "chunk": "@@ -115,17 +127,32 @@ public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n         }\n     }\n \n-    protected void destroy() {\n-        notifier.destroy();\n+    protected synchronized void destroy() {\n+        // Should only destroy a notifier if it's enabled before any configuration change\n+        final boolean wasEnabled = isEnabled();\n+\n+        // Set the configuration before destroying the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n+        }\n+        if (taskResult != null) {\n+            taskResult.cancel(true);\n+        }\n+        if (wasEnabled) {\n+            notifier.destroy();\n+        }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void bootstrap() {\n+    protected synchronized void bootstrap() {\n         // Set the configuration before bootstrapping the notifier\n         if (config != null) {\n             PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);\n         }\n-        notifier.bootstrap();\n+        if (isEnabled()) {\n+            notifier.bootstrap();\n+            taskResult = executor.scheduleWithFixedDelay(this::run, 0, 5, TimeUnit.MILLISECONDS);\n+        }\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"oid": "a47a0d820fcb63f439ebf8b572a2a64b8783a750", "url": "https://github.com/payara/Payara/commit/a47a0d820fcb63f439ebf8b572a2a64b8783a750", "message": "Merge branch 'master' into FISH-315", "committedDate": "2020-09-17T15:36:39Z", "type": "commit"}, {"oid": "1052dc3f083c3004bf1a1b8714b4157e9ae5b2ed", "url": "https://github.com/payara/Payara/commit/1052dc3f083c3004bf1a1b8714b4157e9ae5b2ed", "message": "FISH-315 Fix Admin Audit Service Console Bug\n\nIn the admin console, the admin audit service would ignore the status of\nthe first recognised notifier. This is a bug existing prior to the\nnotifier rewrite, but came up in testing.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T10:22:25Z", "type": "commit"}, {"oid": "44c6254a2e14a6cb21eb10748a792b9b5ec98d70", "url": "https://github.com/payara/Payara/commit/44c6254a2e14a6cb21eb10748a792b9b5ec98d70", "message": "FISH-315 Enable Log Notifier By Default\n\nWhile the log notifier itself was enabled by default, the notification\nsuppliers had no notifiers whitelisted so would do nothing until\nreconfigured. This change makes sure that by default, the log notifier\nwill be notified from each notification source.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T10:47:37Z", "type": "commit"}, {"oid": "d9f5a67b096ce31a4a6d2ad6898a8ab21ba306a7", "url": "https://github.com/payara/Payara/commit/d9f5a67b096ce31a4a6d2ad6898a8ab21ba306a7", "message": "FISH-315 Fix Notification Testing\n\nThe audit service and healthcheck service had tests for their notifier\nconfiguration that no longer worked.\n\nThe configuration value changing tests have been removed\ne.g. noisyAffectsConfig*. This is because before the refactor each\nservice could override the configuration of the notifier. The refactor\ndoesn't allow this, and only allows specifying the name of the notifiers\nto whitelist.\n\nThe tests have also been altered to disable the log notifier instead of\nenable it, as the log notifier should now be enabled by default.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T10:55:25Z", "type": "commit"}, {"oid": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "url": "https://github.com/payara/Payara/commit/2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "message": "FISH-315 Make PayaraNotification Immutable\n\nThe builder API is now more resilient, and the notifications less\nsusceptible to incorrect extensions which might cause errors.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T11:23:34Z", "type": "commit"}, {"oid": "4f3edf3837243e51a37df0ba1ec063bb424d6678", "url": "https://github.com/payara/Payara/commit/4f3edf3837243e51a37df0ba1ec063bb424d6678", "message": "FISH-315 Expand NotifierManager Javadoc\n\nIt was unclear what the NotifierManager interface was for, so this\ncommit adds better commentary.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T12:12:17Z", "type": "commit"}, {"oid": "3bdefc41de83b205edc9ea15deba70ae17dd36a9", "url": "https://github.com/payara/Payara/commit/3bdefc41de83b205edc9ea15deba70ae17dd36a9", "message": "FISH-315 Fix Dynamic Notifier Status\n\nThis fixes 2 bugs:\n\n- When the notification service is initialised, it would initialise all\nnotifiers regardless of whether they need initialising.\n- When a notifier was disabled dynamically, the configuration of the\nnotifier wouldn't update so it wouldn't be destroyed\n\nThe isEnabled() method now reads the current notifier configuration\nrather than the domain.xml, and destroying a bean will also cause a\nconfig reload before it shuts down.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T12:36:11Z", "type": "commit"}, {"oid": "f215290af1503130b7eb210a8e566f359fb3bdc3", "url": "https://github.com/payara/Payara/commit/f215290af1503130b7eb210a8e566f359fb3bdc3", "message": "FISH-315 Disable Notification Service Properly\n\nWhen the notification service is disabled, none of the notifiers were\nbeing shut down. They are now shutdown, and the destroy() method called\nif any notifiers were available.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T13:02:59Z", "type": "commit"}, {"oid": "5b58c24c04a26458ac2d21730fc07b38b39de246", "url": "https://github.com/payara/Payara/commit/5b58c24c04a26458ac2d21730fc07b38b39de246", "message": "FISH-315 Fix NPE in Notification Initialisation\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T14:41:47Z", "type": "commit"}, {"oid": "e6fc19f67096f199e804028c431e15692c02c616", "url": "https://github.com/payara/Payara/commit/e6fc19f67096f199e804028c431e15692c02c616", "message": "FISH-315 Log Notifier Print Subject\n\nThe subject wasn't being printed in the messages.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-18T15:53:42Z", "type": "commit"}, {"oid": "ef556e7147d613099b4466b3214f4958753dcb6a", "url": "https://github.com/payara/Payara/commit/ef556e7147d613099b4466b3214f4958753dcb6a", "message": "FISH-315 Create New Lazy Thread For Each Notifier\n\nBefore this change, one thread ran for the notification service and\npolled each notifier to handle one notification at a time, before\nwaiting 50ms. This may not keep up with the speed at which the\nnotification queue fills up, and notifiers may blocke each other.\n\nAfter this change, each notifier has it's own thread, which will wait\nindefinitely on the queue to fill up on the take() method, and then\nreschedule itself every 5ms. This will be much more efficient in\nhandling notifications, with hopefully a minimal CPU impact.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-21T09:32:31Z", "type": "commit"}, {"oid": "e29d3f466ae49ed063b5e67e13bc7b666e9ea277", "url": "https://github.com/payara/Payara/commit/e29d3f466ae49ed063b5e67e13bc7b666e9ea277", "message": "Merge branch 'master' into FISH-315", "committedDate": "2020-09-21T09:43:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNDQxMQ==", "url": "https://github.com/payara/Payara/pull/4884#discussion_r491924411", "body": "take() is a blocking operation, and you are calling it every 5 milliseconds, so that will end up with a lot waiting on this if there aren't many notifications being sent, the opposite problem of what was wrong before. I think a better solution would be to flush the queue every 50 milliseconds or something like that.", "bodyText": "take() is a blocking operation, and you are calling it every 5 milliseconds, so that will end up with a lot waiting on this if there aren't many notifications being sent, the opposite problem of what was wrong before. I think a better solution would be to flush the queue every 50 milliseconds or something like that.", "bodyHTML": "<p dir=\"auto\">take() is a blocking operation, and you are calling it every 5 milliseconds, so that will end up with a lot waiting on this if there aren't many notifications being sent, the opposite problem of what was wrong before. I think a better solution would be to flush the queue every 50 milliseconds or something like that.</p>", "author": "Cousjava", "createdAt": "2020-09-21T10:02:02Z", "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -146,17 +162,20 @@ public void accept(final PayaraNotification notification) {\n         }\n     }\n \n-    @Override\n-    public void run() {\n-        final PayaraNotification notification = notificationQueue.peek();\n+    private void run() {\n+        assert isEnabled();\n         try {\n-            if (notification != null && isEnabled()) {\n-                notifier.handleNotification(notification);\n-                notificationQueue.remove();\n+            final PayaraNotification notification = notificationQueue.take();", "originalCommit": "ef556e7147d613099b4466b3214f4958753dcb6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5", "message": "Merge commit", "committedDate": null}]}, {"oid": "39435b41e57191b86367303e87a3f818fddf420e", "url": "https://github.com/payara/Payara/commit/39435b41e57191b86367303e87a3f818fddf420e", "message": "FISH-315 API Fixes to Prevent Admin Console Errors\n\nThe getNotifierProperties method was prone to incorrect extension, which\nwas causing admin console configuration issues to arise. This change\nfixes these errors by removing the requirement to implement this method,\nand fixes the remaining admin console issues.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-21T12:20:30Z", "type": "commit"}, {"oid": "559241a8ed4dae91062dce1466ff5de75625efca", "url": "https://github.com/payara/Payara/commit/559241a8ed4dae91062dce1466ff5de75625efca", "message": "FISH-315 Fix Test Notifier Console Buttons\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-21T12:33:58Z", "type": "commit"}, {"oid": "9373ae7f6b5784a8507eed1db2be0b2f2d342fbe", "url": "https://github.com/payara/Payara/commit/9373ae7f6b5784a8507eed1db2be0b2f2d342fbe", "message": "FISH-315 Fix Module Structure\n\nMoved the example notification module into nucleus, and removed the\nremaining packager modules from the build lifecycle.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-09-21T13:36:35Z", "type": "commit"}]}