{"pr_number": 4758, "pr_title": "FISH-161 OpenAPI Class Data Reading using HK2 Class Model API ", "pr_author": "jGauravGupta", "pr_createdAt": "2020-07-02T07:53:58Z", "pr_url": "https://github.com/payara/Payara/pull/4758", "merge_commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "timeline": [{"oid": "a6103232b2200276346068985e89cf089975d363", "url": "https://github.com/payara/Payara/commit/a6103232b2200276346068985e89cf089975d363", "message": "Merge branch 'master' of git://github.com/payara/Payara", "committedDate": "2020-06-01T04:56:23Z", "type": "commit"}, {"oid": "7bb0df61768af0c6abb2fde4cc0e00214858bba4", "url": "https://github.com/payara/Payara/commit/7bb0df61768af0c6abb2fde4cc0e00214858bba4", "message": "Merge branch 'master' of git://github.com/payara/Payara", "committedDate": "2020-06-11T10:17:50Z", "type": "commit"}, {"oid": "2cd8f6729714ece76426acc6c58d1268a416dd4e", "url": "https://github.com/payara/Payara/commit/2cd8f6729714ece76426acc6c58d1268a416dd4e", "message": "Merge branch 'master' of git://github.com/payara/Payara", "committedDate": "2020-07-02T04:51:55Z", "type": "commit"}, {"oid": "f491727a90f87230faa0a45a256b9ebf979dcf82", "url": "https://github.com/payara/Payara/commit/f491727a90f87230faa0a45a256b9ebf979dcf82", "message": "FISH-161 OpenAPI Class Data Reading using HK2 Class Model API\n\nSigned-off-by: Gaurav Gupta <gaurav.gupta@payara.fish>", "committedDate": "2020-07-02T07:48:40Z", "type": "commit"}, {"oid": "180bf0753d9ccc938438c4af2e5e6df151e55c19", "url": "https://github.com/payara/Payara/commit/180bf0753d9ccc938438c4af2e5e6df151e55c19", "message": "FISH-161 Polish annotation getValue function usage", "committedDate": "2020-07-02T09:21:44Z", "type": "commit"}, {"oid": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "url": "https://github.com/payara/Payara/commit/3a8286944293ce6336db578f05e8a5b58a2ef4d7", "message": "FISH-161/FISH-70 JsonArray as return type breaks the OpenAPI document generation", "committedDate": "2020-07-02T10:49:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTE5Ng==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448939196", "body": "Could this really be types other then `Class` types? As they get loaded from a `String` I'd assume in the end there is a `Class.forName` call behind it. In that case I see no reason to use `Type` here as it creates an unnecessary burden on the caller of the API to deal with all kinds of types.", "bodyText": "Could this really be types other then Class types? As they get loaded from a String I'd assume in the end there is a Class.forName call behind it. In that case I see no reason to use Type here as it creates an unnecessary burden on the caller of the API to deal with all kinds of types.", "bodyHTML": "<p dir=\"auto\">Could this really be types other then <code>Class</code> types? As they get loaded from a <code>String</code> I'd assume in the end there is a <code>Class.forName</code> call behind it. In that case I see no reason to use <code>Type</code> here as it creates an unnecessary burden on the caller of the API to deal with all kinds of types.</p>", "author": "jbee", "createdAt": "2020-07-02T11:38:45Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java", "diffHunk": "@@ -67,7 +68,19 @@\n \n     /**\n      * @param type any class, not null\n-     * @return true, if the give type is a known type in this context, else false\n+     * @return true, if the give type is a known type in this context, else\n+     * false\n      */\n-    boolean isApplicationType(Class<?> type);\n-}\n\\ No newline at end of file\n+    boolean isApplicationType(String type);\n+\n+    /**\n+     * @param type any class, not null\n+     * @return type, if the give type is a known type in this context, else null\n+     */\n+    Type getType(String type);", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3OTg1Nw==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448979857", "bodyText": "org.glassfish.hk2.classmodel.reflect.Type HK2 API wrapped the ASM object and underling all processing is done with the ASM Visitor API by processing the bytecode of classes hence Class.forName is never called.", "author": "jGauravGupta", "createdAt": "2020-07-02T12:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTE5Ng=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "24ab29b87774bda5d3397a62461b4064626f1a1b", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\nindex a74b1323fb..a67df7f392 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\n", "chunk": "@@ -73,6 +73,13 @@ public interface ApiContext {\n      */\n     boolean isApplicationType(String type);\n \n+    /**\n+     * @param type any class, not null\n+     * @return true, if the give type is a filtered class for OpenAPI metadata processing\n+     * otherwise false\n+     */\n+    boolean isAllowedType(Type type);\n+\n     /**\n      * @param type any class, not null\n      * @return type, if the give type is a known type in this context, else null\n", "next_change": {"commit": "b0ab396e168452516474ca0aac6ac377e0e4fa54", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\nindex a67df7f392..0b64deb7cc 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\n", "chunk": "@@ -75,11 +86,18 @@ public interface ApiContext {\n \n     /**\n      * @param type any class, not null\n-     * @return true, if the give type is a filtered class for OpenAPI metadata processing\n-     * otherwise false\n+     * @return true, if the given type is a filtered class for OpenAPI metadata\n+     * processing     * otherwise false\n      */\n     boolean isAllowedType(Type type);\n \n+    /**\n+     * @param type any class, not null\n+     * @return true, if the given type is a part of the WAR file, otherwise\n+     * false (e.g. class in a library)\n+     */\n+    boolean isAllowedResource(Type type);\n+\n     /**\n      * @param type any class, not null\n      * @return type, if the give type is a known type in this context, else null\n", "next_change": {"commit": "992da131b28ede0b3bb686189ce40d74c6ea7d32", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\nindex 0b64deb7cc..5768879351 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/api/visitor/ApiContext.java\n", "chunk": "@@ -91,13 +91,6 @@ public interface ApiContext {\n      */\n     boolean isAllowedType(Type type);\n \n-    /**\n-     * @param type any class, not null\n-     * @return true, if the given type is a part of the WAR file, otherwise\n-     * false (e.g. class in a library)\n-     */\n-    boolean isAllowedResource(Type type);\n-\n     /**\n      * @param type any class, not null\n      * @return type, if the give type is a known type in this context, else null\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "24ab29b87774bda5d3397a62461b4064626f1a1b", "committedDate": "2020-07-06 16:20:37 +0530", "message": "FISH-56 OpenAPI document doesn't use @Schema when class is in jar dependency of the project"}, {"oid": "ea20059847aca5466107e1433ce0032247951fa4", "committedDate": "2020-09-04 14:46:18 +0530", "message": "FISH-391 store AnnotationInfo in OpenAPIContext"}, {"oid": "bd087897c79844d563ba83f21487fe1b52f12d33", "committedDate": "2020-09-04 14:46:18 +0530", "message": "FISH-391 polish"}, {"oid": "b2c358f9405384aacd64bc49443dbd73c751963c", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Parse Exception Mappers"}, {"oid": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "committedDate": "2023-03-17 11:13:17 +0000", "message": "Merge pull request #6223 from jGauravGupta/FISH-7118"}, {"oid": "b0ab396e168452516474ca0aac6ac377e0e4fa54", "committedDate": "2023-04-11 19:35:16 +0200", "message": "FISH-6980 scan ear's lib/*.jar for openapi"}, {"oid": "992da131b28ede0b3bb686189ce40d74c6ea7d32", "committedDate": "2023-04-12 15:12:16 +0200", "message": "FISH-6980 include scanning endpoints of libraries, not only schemas"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NDQ3NA==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448944474", "body": "Looks to me like a repeating pattern that can be extracted, rough sketch:\r\n\r\n```java\r\n<T> List<AnnotationModel> extractAnnotationsModelFrom(AnnotationModel annotation, String type, Map<String, T> map, Function<AnnotationModel, T> factory);\r\n```", "bodyText": "Looks to me like a repeating pattern that can be extracted, rough sketch:\n<T> List<AnnotationModel> extractAnnotationsModelFrom(AnnotationModel annotation, String type, Map<String, T> map, Function<AnnotationModel, T> factory);", "bodyHTML": "<p dir=\"auto\">Looks to me like a repeating pattern that can be extracted, rough sketch:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;T&gt; List&lt;AnnotationModel&gt; extractAnnotationsModelFrom(AnnotationModel annotation, String type, Map&lt;String, T&gt; map, Function&lt;AnnotationModel, T&gt; factory);\n\"><pre><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">AnnotationModel</span>&gt;</span> extractAnnotationsModelFrom(<span class=\"pl-smi\">AnnotationModel</span> annotation, <span class=\"pl-smi\">String</span> type, <span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">T</span>&gt;</span> map, <span class=\"pl-k\">Function&lt;<span class=\"pl-smi\">AnnotationModel</span>, <span class=\"pl-smi\">T</span>&gt;</span> factory);</pre></div>", "author": "jbee", "createdAt": "2020-07-02T11:49:49Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java", "diffHunk": "@@ -76,6 +76,97 @@\n     protected Map<String, Link> links = new TreeMap<>();\n     protected Map<String, Callback> callbacks = new TreeMap<>();\n \n+    public static Components createInstance(AnnotationModel annotation, ApiContext context) {\n+        Components from = new ComponentsImpl();\n+\n+        List<AnnotationModel> schemas = annotation.getValue(\"schemas\", List.class);\n+        if (schemas != null) {\n+            for (AnnotationModel schema : schemas) {\n+                from.getSchemas().put(\n+                        schema.getValue(\"name\", String.class),\n+                        SchemaImpl.createInstance(schema, context)\n+                );\n+            }\n+        }\n+        List<AnnotationModel> responses = annotation.getValue(\"responses\", List.class);\n+        if (responses != null) {\n+            for (AnnotationModel response : responses) {\n+                from.getResponses().put(\n+                        response.getValue(\"name\", String.class),\n+                        APIResponseImpl.createInstance(response, context)\n+                );\n+            }\n+        }\n+        List<AnnotationModel> parameters = annotation.getValue(\"parameters\", List.class);\n+        if (parameters != null) {\n+            for (AnnotationModel parameter : parameters) {\n+                from.getParameters().put(\n+                        parameter.getValue(\"name\", String.class),\n+                        ParameterImpl.createInstance(parameter, context)\n+                );\n+            }\n+        }\n+        List<AnnotationModel> examples = annotation.getValue(\"examples\", List.class);\n+        if (examples != null) {\n+            for (AnnotationModel example : examples) {\n+                from.getExamples().put(\n+                        example.getValue(\"name\", String.class),\n+                        ExampleImpl.createInstance(example)\n+                );\n+            }\n+        }\n+        List<AnnotationModel> requestBodies = annotation.getValue(\"requestBodies\", List.class);\n+        if (requestBodies != null) {\n+            for (AnnotationModel requestBody : requestBodies) {\n+                from.getRequestBodies().put(\n+                        requestBody.getValue(\"name\", String.class),\n+                        RequestBodyImpl.createInstance(requestBody, context)\n+                );\n+            }\n+        }\n+        List<AnnotationModel> headers = annotation.getValue(\"headers\", List.class);\n+        if (headers != null) {\n+            for (AnnotationModel header : headers) {\n+                String headerName = header.getValue(\"name\", String.class);\n+                if(headerName == null) {\n+                    headerName = header.getValue(\"ref\", String.class);\n+                }\n+                from.getHeaders().put(\n+                        headerName,\n+                        HeaderImpl.createInstance(header, context)\n+                );\n+            }\n+        }\n+        List<AnnotationModel> securitySchemes = annotation.getValue(\"securitySchemes\", List.class);\n+        if (securitySchemes != null) {\n+            for (AnnotationModel securityScheme : securitySchemes) {\n+                from.getSecuritySchemes().put(\n+                        securityScheme.getValue(\"securitySchemeName\", String.class),\n+                        SecuritySchemeImpl.createInstance(securityScheme)\n+                );\n+            }\n+        }\n+        List<AnnotationModel> links = annotation.getValue(\"links\", List.class);\n+        if (links != null) {\n+            for (AnnotationModel link : links) {\n+                from.getLinks().put(\n+                        link.getValue(\"name\", String.class),\n+                        LinkImpl.createInstance(link)\n+                );\n+            }\n+        }\n+        List<AnnotationModel> callbacks = annotation.getValue(\"callbacks\", List.class);\n+        if (callbacks != null) {\n+            for (AnnotationModel callback : callbacks) {\n+                from.getCallbacks().put(\n+                        callback.getValue(\"name\", String.class),\n+                        CallbackImpl.createInstance(callback, context)\n+                );\n+            }\n+        }", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b95e214d625edd981bd1573a36a1e647f3103f2f", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\nindex b7c8ee5024..858260f0f3 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n", "chunk": "@@ -78,92 +79,15 @@ public class ComponentsImpl extends ExtensibleImpl<Components> implements Compon\n \n     public static Components createInstance(AnnotationModel annotation, ApiContext context) {\n         Components from = new ComponentsImpl();\n-\n-        List<AnnotationModel> schemas = annotation.getValue(\"schemas\", List.class);\n-        if (schemas != null) {\n-            for (AnnotationModel schema : schemas) {\n-                from.getSchemas().put(\n-                        schema.getValue(\"name\", String.class),\n-                        SchemaImpl.createInstance(schema, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> responses = annotation.getValue(\"responses\", List.class);\n-        if (responses != null) {\n-            for (AnnotationModel response : responses) {\n-                from.getResponses().put(\n-                        response.getValue(\"name\", String.class),\n-                        APIResponseImpl.createInstance(response, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> parameters = annotation.getValue(\"parameters\", List.class);\n-        if (parameters != null) {\n-            for (AnnotationModel parameter : parameters) {\n-                from.getParameters().put(\n-                        parameter.getValue(\"name\", String.class),\n-                        ParameterImpl.createInstance(parameter, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> examples = annotation.getValue(\"examples\", List.class);\n-        if (examples != null) {\n-            for (AnnotationModel example : examples) {\n-                from.getExamples().put(\n-                        example.getValue(\"name\", String.class),\n-                        ExampleImpl.createInstance(example)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> requestBodies = annotation.getValue(\"requestBodies\", List.class);\n-        if (requestBodies != null) {\n-            for (AnnotationModel requestBody : requestBodies) {\n-                from.getRequestBodies().put(\n-                        requestBody.getValue(\"name\", String.class),\n-                        RequestBodyImpl.createInstance(requestBody, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> headers = annotation.getValue(\"headers\", List.class);\n-        if (headers != null) {\n-            for (AnnotationModel header : headers) {\n-                String headerName = header.getValue(\"name\", String.class);\n-                if(headerName == null) {\n-                    headerName = header.getValue(\"ref\", String.class);\n-                }\n-                from.getHeaders().put(\n-                        headerName,\n-                        HeaderImpl.createInstance(header, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> securitySchemes = annotation.getValue(\"securitySchemes\", List.class);\n-        if (securitySchemes != null) {\n-            for (AnnotationModel securityScheme : securitySchemes) {\n-                from.getSecuritySchemes().put(\n-                        securityScheme.getValue(\"securitySchemeName\", String.class),\n-                        SecuritySchemeImpl.createInstance(securityScheme)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> links = annotation.getValue(\"links\", List.class);\n-        if (links != null) {\n-            for (AnnotationModel link : links) {\n-                from.getLinks().put(\n-                        link.getValue(\"name\", String.class),\n-                        LinkImpl.createInstance(link)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> callbacks = annotation.getValue(\"callbacks\", List.class);\n-        if (callbacks != null) {\n-            for (AnnotationModel callback : callbacks) {\n-                from.getCallbacks().put(\n-                        callback.getValue(\"name\", String.class),\n-                        CallbackImpl.createInstance(callback, context)\n-                );\n-            }\n-        }\n+        extractAnnotations(annotation, context, \"schemas\", \"name\", SchemaImpl::createInstance, from.getSchemas());\n+        extractAnnotations(annotation, context, \"responses\", \"name\", APIResponseImpl::createInstance, from.getResponses());\n+        extractAnnotations(annotation, context, \"parameters\", \"name\", ParameterImpl::createInstance, from.getParameters());\n+        extractAnnotations(annotation, context, \"examples\", \"name\", ExampleImpl::createInstance, from.getExamples());\n+        extractAnnotations(annotation, context, \"requestBodies\", \"name\", RequestBodyImpl::createInstance, from.getRequestBodies());\n+        extractAnnotations(annotation, context, \"securitySchemes\", \"securitySchemeName\", SecuritySchemeImpl::createInstance, from.getSecuritySchemes());\n+        extractAnnotations(annotation, context, \"links\", \"name\", LinkImpl::createInstance, from.getLinks());\n+        extractAnnotations(annotation, context, \"callbacks\", \"name\", CallbackImpl::createInstance, from.getCallbacks());\n+        from.getHeaders().putAll(HeaderImpl.createInstances(annotation, context));\n         return from;\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\nindex b7c8ee5024..858260f0f3 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n", "chunk": "@@ -78,92 +79,15 @@ public class ComponentsImpl extends ExtensibleImpl<Components> implements Compon\n \n     public static Components createInstance(AnnotationModel annotation, ApiContext context) {\n         Components from = new ComponentsImpl();\n-\n-        List<AnnotationModel> schemas = annotation.getValue(\"schemas\", List.class);\n-        if (schemas != null) {\n-            for (AnnotationModel schema : schemas) {\n-                from.getSchemas().put(\n-                        schema.getValue(\"name\", String.class),\n-                        SchemaImpl.createInstance(schema, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> responses = annotation.getValue(\"responses\", List.class);\n-        if (responses != null) {\n-            for (AnnotationModel response : responses) {\n-                from.getResponses().put(\n-                        response.getValue(\"name\", String.class),\n-                        APIResponseImpl.createInstance(response, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> parameters = annotation.getValue(\"parameters\", List.class);\n-        if (parameters != null) {\n-            for (AnnotationModel parameter : parameters) {\n-                from.getParameters().put(\n-                        parameter.getValue(\"name\", String.class),\n-                        ParameterImpl.createInstance(parameter, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> examples = annotation.getValue(\"examples\", List.class);\n-        if (examples != null) {\n-            for (AnnotationModel example : examples) {\n-                from.getExamples().put(\n-                        example.getValue(\"name\", String.class),\n-                        ExampleImpl.createInstance(example)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> requestBodies = annotation.getValue(\"requestBodies\", List.class);\n-        if (requestBodies != null) {\n-            for (AnnotationModel requestBody : requestBodies) {\n-                from.getRequestBodies().put(\n-                        requestBody.getValue(\"name\", String.class),\n-                        RequestBodyImpl.createInstance(requestBody, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> headers = annotation.getValue(\"headers\", List.class);\n-        if (headers != null) {\n-            for (AnnotationModel header : headers) {\n-                String headerName = header.getValue(\"name\", String.class);\n-                if(headerName == null) {\n-                    headerName = header.getValue(\"ref\", String.class);\n-                }\n-                from.getHeaders().put(\n-                        headerName,\n-                        HeaderImpl.createInstance(header, context)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> securitySchemes = annotation.getValue(\"securitySchemes\", List.class);\n-        if (securitySchemes != null) {\n-            for (AnnotationModel securityScheme : securitySchemes) {\n-                from.getSecuritySchemes().put(\n-                        securityScheme.getValue(\"securitySchemeName\", String.class),\n-                        SecuritySchemeImpl.createInstance(securityScheme)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> links = annotation.getValue(\"links\", List.class);\n-        if (links != null) {\n-            for (AnnotationModel link : links) {\n-                from.getLinks().put(\n-                        link.getValue(\"name\", String.class),\n-                        LinkImpl.createInstance(link)\n-                );\n-            }\n-        }\n-        List<AnnotationModel> callbacks = annotation.getValue(\"callbacks\", List.class);\n-        if (callbacks != null) {\n-            for (AnnotationModel callback : callbacks) {\n-                from.getCallbacks().put(\n-                        callback.getValue(\"name\", String.class),\n-                        CallbackImpl.createInstance(callback, context)\n-                );\n-            }\n-        }\n+        extractAnnotations(annotation, context, \"schemas\", \"name\", SchemaImpl::createInstance, from.getSchemas());\n+        extractAnnotations(annotation, context, \"responses\", \"name\", APIResponseImpl::createInstance, from.getResponses());\n+        extractAnnotations(annotation, context, \"parameters\", \"name\", ParameterImpl::createInstance, from.getParameters());\n+        extractAnnotations(annotation, context, \"examples\", \"name\", ExampleImpl::createInstance, from.getExamples());\n+        extractAnnotations(annotation, context, \"requestBodies\", \"name\", RequestBodyImpl::createInstance, from.getRequestBodies());\n+        extractAnnotations(annotation, context, \"securitySchemes\", \"securitySchemeName\", SecuritySchemeImpl::createInstance, from.getSecuritySchemes());\n+        extractAnnotations(annotation, context, \"links\", \"name\", LinkImpl::createInstance, from.getLinks());\n+        extractAnnotations(annotation, context, \"callbacks\", \"name\", CallbackImpl::createInstance, from.getCallbacks());\n+        from.getHeaders().putAll(HeaderImpl.createInstances(annotation, context));\n         return from;\n     }\n \n", "next_change": {"commit": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\nindex 858260f0f3..cd90e5be0b 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n", "chunk": "@@ -79,21 +83,21 @@ public class ComponentsImpl extends ExtensibleImpl<Components> implements Compon\n \n     public static Components createInstance(AnnotationModel annotation, ApiContext context) {\n         Components from = new ComponentsImpl();\n-        extractAnnotations(annotation, context, \"schemas\", \"name\", SchemaImpl::createInstance, from.getSchemas());\n-        extractAnnotations(annotation, context, \"responses\", \"name\", APIResponseImpl::createInstance, from.getResponses());\n-        extractAnnotations(annotation, context, \"parameters\", \"name\", ParameterImpl::createInstance, from.getParameters());\n-        extractAnnotations(annotation, context, \"examples\", \"name\", ExampleImpl::createInstance, from.getExamples());\n-        extractAnnotations(annotation, context, \"requestBodies\", \"name\", RequestBodyImpl::createInstance, from.getRequestBodies());\n-        extractAnnotations(annotation, context, \"securitySchemes\", \"securitySchemeName\", SecuritySchemeImpl::createInstance, from.getSecuritySchemes());\n-        extractAnnotations(annotation, context, \"links\", \"name\", LinkImpl::createInstance, from.getLinks());\n-        extractAnnotations(annotation, context, \"callbacks\", \"name\", CallbackImpl::createInstance, from.getCallbacks());\n-        from.getHeaders().putAll(HeaderImpl.createInstances(annotation, context));\n+        extractAnnotations(annotation, context, \"schemas\", \"name\", SchemaImpl::createInstance, from.getSchemas(), from::addSchema);\n+        extractAnnotations(annotation, context, \"responses\", \"name\", APIResponseImpl::createInstance, from.getResponses(), from::addResponse);\n+        extractAnnotations(annotation, context, \"parameters\", \"name\", ParameterImpl::createInstance, from.getParameters(), from::addParameter);\n+        extractAnnotations(annotation, context, \"examples\", \"name\", ExampleImpl::createInstance, from.getExamples(), from::addExample);\n+        extractAnnotations(annotation, context, \"requestBodies\", \"name\", RequestBodyImpl::createInstance, from.getRequestBodies(), from::addRequestBody);\n+        extractAnnotations(annotation, context, \"securitySchemes\", \"securitySchemeName\", SecuritySchemeImpl::createInstance, from.getSecuritySchemes(), from::addSecurityScheme);\n+        extractAnnotations(annotation, context, \"links\", \"name\", LinkImpl::createInstance, from.getLinks(), from::addLink);\n+        extractAnnotations(annotation, context, \"callbacks\", \"name\", CallbackImpl::createInstance, from.getCallbacks(), from::addCallback);\n+        HeaderImpl.createInstances(annotation, context).forEach(from::addHeader);\n         return from;\n     }\n \n     @Override\n     public Map<String, Schema> getSchemas() {\n-        return schemas;\n+        return ModelUtils.readOnlyView(schemas);\n     }\n \n     @Override\n", "next_change": {"commit": "7976a0757acb93d9556d71da0569806da75d682b", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\nindex cd90e5be0b..330c1fda99 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n", "chunk": "@@ -102,7 +102,10 @@ public class ComponentsImpl extends ExtensibleImpl<Components> implements Compon\n \n     @Override\n     public void setSchemas(Map<String, Schema> schemas) {\n-        this.schemas = schemas;\n+        this.schemas.clear();\n+        if (schemas != null) {\n+            this.schemas.putAll(schemas);\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\nindex 330c1fda99..3b4ba3268c 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java\n", "chunk": "@@ -97,20 +97,20 @@ public class ComponentsImpl extends ExtensibleImpl<Components> implements Compon\n \n     @Override\n     public Map<String, Schema> getSchemas() {\n-        return ModelUtils.readOnlyView(schemas);\n+        return readOnlyView(schemas);\n     }\n \n     @Override\n     public void setSchemas(Map<String, Schema> schemas) {\n-        this.schemas.clear();\n-        if (schemas != null) {\n-            this.schemas.putAll(schemas);\n-        }\n+        this.schemas = createOrderedMap(schemas);\n     }\n \n     @Override\n     public Components addSchema(String key, Schema schema) {\n         if (schema != null) {\n+            if (schemas == null) {\n+                schemas = createOrderedMap();\n+            }\n             schemas.put(key, schema);\n         }\n         return this;\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "0d308540bd1867681467886f5bdbc727ca96fe37", "committedDate": "2020-11-27 12:54:58 +0000", "message": "FISH-663 Merge Schema classes correctly"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "7976a0757acb93d9556d71da0569806da75d682b", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix OpenAPI Collection set methods"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix Collection methods"}, {"oid": "f248f137b8913de0d6a1d9c80fb62ba224b05887", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Simplify extractAnnotations Methods"}, {"oid": "e575b9bdd01152aeedae0add0e18caafc757fef9", "committedDate": "2023-02-20 17:49:52 +0100", "message": "FISH-6769 wip - adding partial support for extensions in openapi"}, {"oid": "0419b4e4f32f707f3d5cdc863ad3b53ae71f1750", "committedDate": "2023-02-20 17:49:54 +0100", "message": "FISH-6769 update copyright year"}, {"oid": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "committedDate": "2023-03-17 11:13:17 +0000", "message": "Merge pull request #6223 from jGauravGupta/FISH-7118"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NTUzNA==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448945534", "body": "Can't really see why this would need to be `Object`. Don't we know more about the `from` at this point?\r\n\r\nAlso this seems to break the pattern used for the other model types where the `merge` methods accepts two objects of the same type to merge and has a `createInstance` method to create one of them from the annotation model. I think that pattern helps to understand it and keeps the steps separated nicely so I'd like to see it applied here as well.", "bodyText": "Can't really see why this would need to be Object. Don't we know more about the from at this point?\nAlso this seems to break the pattern used for the other model types where the merge methods accepts two objects of the same type to merge and has a createInstance method to create one of them from the annotation model. I think that pattern helps to understand it and keeps the steps separated nicely so I'd like to see it applied here as well.", "bodyHTML": "<p dir=\"auto\">Can't really see why this would need to be <code>Object</code>. Don't we know more about the <code>from</code> at this point?</p>\n<p dir=\"auto\">Also this seems to break the pattern used for the other model types where the <code>merge</code> methods accepts two objects of the same type to merge and has a <code>createInstance</code> method to create one of them from the annotation model. I think that pattern helps to understand it and keeps the steps separated nicely so I'd like to see it applied here as well.</p>", "author": "jbee", "createdAt": "2020-07-02T11:51:46Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java", "diffHunk": "@@ -94,22 +90,22 @@ public void setExtensions(Map<String, Object> extensions) {\n     public static String extensionName(String name) {\n         if (name != null && !name.startsWith(\"x-\")) {\n             //NB. MP group decided that extension names should not be corrected\n-            LOGGER.warning(\"extension name not starting with `x-` cause invalid Open API documents: \" + name);\n+            LOGGER.log(Level.WARNING, \"extension name not starting with `x-` cause invalid Open API documents: {0}\", name);\n         }\n         return name;\n     }\n \n-    public static void merge(Extension from, Extensible<?> to, boolean override) {\n-        if (isAnnotationNull(from)) {\n+    public static void merge(String extensionName, Object from, Extensible<?> to, boolean override) {", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "461d3c20ff3640a99211272af53195dd5e401721", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\nindex a59a1d6913..7e9359faad 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\n", "chunk": "@@ -95,17 +95,22 @@ public abstract class ExtensibleImpl<T extends Extensible<T>> implements Extensi\n         return name;\n     }\n \n-    public static void merge(String extensionName, Object from, Extensible<?> to, boolean override) {\n+    public static void merge(Extensible<?> from, Extensible<?> to, boolean override) {\n         if (from == null) {\n             return;\n         }\n         if (to.getExtensions() == null) {\n             to.setExtensions(new LinkedHashMap<>());\n         }\n-        if (extensionName != null && !extensionName.isEmpty()) {\n-            Object value = mergeProperty(to.getExtensions().get(extensionName), \n-                    convertExtensionValue((String)from, true), override);//gg from.parseValue(\n-            to.getExtensions().put(extensionName, value);\n+        if (!from.getExtensions().isEmpty()) {\n+            for (String extensionName : from.getExtensions().keySet()) {\n+                Object value = mergeProperty(\n+                        to.getExtensions().get(extensionName),\n+                        from.getExtensions().get(extensionName),\n+                        override\n+                );\n+                to.getExtensions().put(extensionName, value);\n+            }\n         }\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\nindex a59a1d6913..7e9359faad 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\n", "chunk": "@@ -95,17 +95,22 @@ public abstract class ExtensibleImpl<T extends Extensible<T>> implements Extensi\n         return name;\n     }\n \n-    public static void merge(String extensionName, Object from, Extensible<?> to, boolean override) {\n+    public static void merge(Extensible<?> from, Extensible<?> to, boolean override) {\n         if (from == null) {\n             return;\n         }\n         if (to.getExtensions() == null) {\n             to.setExtensions(new LinkedHashMap<>());\n         }\n-        if (extensionName != null && !extensionName.isEmpty()) {\n-            Object value = mergeProperty(to.getExtensions().get(extensionName), \n-                    convertExtensionValue((String)from, true), override);//gg from.parseValue(\n-            to.getExtensions().put(extensionName, value);\n+        if (!from.getExtensions().isEmpty()) {\n+            for (String extensionName : from.getExtensions().keySet()) {\n+                Object value = mergeProperty(\n+                        to.getExtensions().get(extensionName),\n+                        from.getExtensions().get(extensionName),\n+                        override\n+                );\n+                to.getExtensions().put(extensionName, value);\n+            }\n         }\n     }\n \n", "next_change": {"commit": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\nindex 7e9359faad..35f2a0395b 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\n", "chunk": "@@ -109,7 +111,7 @@ public abstract class ExtensibleImpl<T extends Extensible<T>> implements Extensi\n                         from.getExtensions().get(extensionName),\n                         override\n                 );\n-                to.getExtensions().put(extensionName, value);\n+                to.addExtension(extensionName, value);\n             }\n         }\n     }\n", "next_change": {"commit": "f8daa58589cc1a3832baf4b9de4cd93afd4563ba", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\nindex 35f2a0395b..43f50936b9 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java\n", "chunk": "@@ -102,17 +104,18 @@ public abstract class ExtensibleImpl<T extends Extensible<T>> implements Extensi\n             return;\n         }\n         if (to.getExtensions() == null) {\n-            to.setExtensions(new LinkedHashMap<>());\n-        }\n-        if (!from.getExtensions().isEmpty()) {\n-            for (String extensionName : from.getExtensions().keySet()) {\n-                Object value = mergeProperty(\n-                        to.getExtensions().get(extensionName),\n-                        from.getExtensions().get(extensionName),\n-                        override\n-                );\n-                to.addExtension(extensionName, value);\n-            }\n+            to.setExtensions(createMap());\n+        }\n+        if (from.getExtensions().isEmpty()) {\n+            return;\n+        }\n+        for (String extensionName : from.getExtensions().keySet()) {\n+            Object value = mergeProperty(\n+                    to.getExtensions().get(extensionName),\n+                    from.getExtensions().get(extensionName),\n+                    override\n+            );\n+            to.addExtension(extensionName, value);\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "64beea7716b4f73ed61df1fe94a9bf1758e4ead4", "committedDate": "2020-09-10 09:48:29 +0100", "message": "FISH-99 FISH-298 Cleanup of code"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix Collection methods"}, {"oid": "f8daa58589cc1a3832baf4b9de4cd93afd4563ba", "committedDate": "2020-12-22 16:09:50 +0000", "message": "FISH-663 OpenAPI minor PR fixes"}, {"oid": "e575b9bdd01152aeedae0add0e18caafc757fef9", "committedDate": "2023-02-20 17:49:52 +0100", "message": "FISH-6769 wip - adding partial support for extensions in openapi"}, {"oid": "0419b4e4f32f707f3d5cdc863ad3b53ae71f1750", "committedDate": "2023-02-20 17:49:54 +0100", "message": "FISH-6769 update copyright year"}, {"oid": "a173b03697048e129d72aa007d97449526aa83d5", "committedDate": "2023-02-21 16:10:28 +0100", "message": "FISH-6769 propagate extensions from method do api resources"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0ODg0NA==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448948844", "body": "This seems to be a pattern that is needed often here and also in `createInstance` methods of other model types. Would be nice if this became more readable and less duplicating and maybe even more typed by extracting the pattern to a utility function. ", "bodyText": "This seems to be a pattern that is needed often here and also in createInstance methods of other model types. Would be nice if this became more readable and less duplicating and maybe even more typed by extracting the pattern to a utility function.", "bodyHTML": "<p dir=\"auto\">This seems to be a pattern that is needed often here and also in <code>createInstance</code> methods of other model types. Would be nice if this became more readable and less duplicating and maybe even more typed by extracting the pattern to a utility function.</p>", "author": "jbee", "createdAt": "2020-07-02T11:58:14Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java", "diffHunk": "@@ -72,6 +69,41 @@\n     protected Paths paths = new PathsImpl();\n     protected Components components = new ComponentsImpl();\n \n+    public static OpenAPI createInstance(AnnotationModel annotation, ApiContext context) {\n+        OpenAPI from = new OpenAPIImpl();\n+        AnnotationModel info = annotation.getValue(\"info\", AnnotationModel.class);\n+        if (info != null) {\n+            from.setInfo(InfoImpl.createInstance(info));\n+        }\n+        AnnotationModel externalDocs = annotation.getValue(\"externalDocs\", AnnotationModel.class);\n+        if (externalDocs != null) {\n+            from.setExternalDocs(ExternalDocumentationImpl.createInstance(externalDocs));\n+        }\n+        List<AnnotationModel> servers = annotation.getValue(\"servers\", List.class);\n+        if (servers != null) {\n+            for (AnnotationModel server : servers) {\n+                from.getServers().add(ServerImpl.createInstance(server));\n+            }\n+        }\n+        List<AnnotationModel> securityElements = annotation.getValue(\"security\", List.class);\n+        if (securityElements != null) {\n+            for (AnnotationModel security : securityElements) {\n+                from.getSecurity().add(SecurityRequirementImpl.createInstance(security));\n+            }\n+        }\n+        List<AnnotationModel> tags = annotation.getValue(\"tags\", List.class);\n+        if (tags != null) {\n+            for (AnnotationModel tag : tags) {\n+                from.getTags().add(TagImpl.createInstance(tag));\n+            }\n+        }\n+        AnnotationModel components = annotation.getValue(\"components\", AnnotationModel.class);\n+        if (components != null) {\n+            from.setComponents(ComponentsImpl.createInstance(components, context));\n+        }", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MTQ2Mg==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r449391462", "bodyText": "Added util function for List/Map attributes annotation mapping.", "author": "jGauravGupta", "createdAt": "2020-07-03T06:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0ODg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "b95e214d625edd981bd1573a36a1e647f3103f2f", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\nindex 62a35a4dfb..389a4142f6 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n", "chunk": "@@ -79,24 +80,9 @@ public class OpenAPIImpl extends ExtensibleImpl<OpenAPI> implements OpenAPI {\n         if (externalDocs != null) {\n             from.setExternalDocs(ExternalDocumentationImpl.createInstance(externalDocs));\n         }\n-        List<AnnotationModel> servers = annotation.getValue(\"servers\", List.class);\n-        if (servers != null) {\n-            for (AnnotationModel server : servers) {\n-                from.getServers().add(ServerImpl.createInstance(server));\n-            }\n-        }\n-        List<AnnotationModel> securityElements = annotation.getValue(\"security\", List.class);\n-        if (securityElements != null) {\n-            for (AnnotationModel security : securityElements) {\n-                from.getSecurity().add(SecurityRequirementImpl.createInstance(security));\n-            }\n-        }\n-        List<AnnotationModel> tags = annotation.getValue(\"tags\", List.class);\n-        if (tags != null) {\n-            for (AnnotationModel tag : tags) {\n-                from.getTags().add(TagImpl.createInstance(tag));\n-            }\n-        }\n+        extractAnnotations(annotation, context, \"security\", SecurityRequirementImpl::createInstance, from.getSecurity());\n+        extractAnnotations(annotation, context, \"servers\", ServerImpl::createInstance, from.getServers());\n+        extractAnnotations(annotation, context, \"tags\", TagImpl::createInstance, from.getTags());\n         AnnotationModel components = annotation.getValue(\"components\", AnnotationModel.class);\n         if (components != null) {\n             from.setComponents(ComponentsImpl.createInstance(components, context));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\nindex 62a35a4dfb..389a4142f6 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n", "chunk": "@@ -79,24 +80,9 @@ public class OpenAPIImpl extends ExtensibleImpl<OpenAPI> implements OpenAPI {\n         if (externalDocs != null) {\n             from.setExternalDocs(ExternalDocumentationImpl.createInstance(externalDocs));\n         }\n-        List<AnnotationModel> servers = annotation.getValue(\"servers\", List.class);\n-        if (servers != null) {\n-            for (AnnotationModel server : servers) {\n-                from.getServers().add(ServerImpl.createInstance(server));\n-            }\n-        }\n-        List<AnnotationModel> securityElements = annotation.getValue(\"security\", List.class);\n-        if (securityElements != null) {\n-            for (AnnotationModel security : securityElements) {\n-                from.getSecurity().add(SecurityRequirementImpl.createInstance(security));\n-            }\n-        }\n-        List<AnnotationModel> tags = annotation.getValue(\"tags\", List.class);\n-        if (tags != null) {\n-            for (AnnotationModel tag : tags) {\n-                from.getTags().add(TagImpl.createInstance(tag));\n-            }\n-        }\n+        extractAnnotations(annotation, context, \"security\", SecurityRequirementImpl::createInstance, from.getSecurity());\n+        extractAnnotations(annotation, context, \"servers\", ServerImpl::createInstance, from.getServers());\n+        extractAnnotations(annotation, context, \"tags\", TagImpl::createInstance, from.getTags());\n         AnnotationModel components = annotation.getValue(\"components\", AnnotationModel.class);\n         if (components != null) {\n             from.setComponents(ComponentsImpl.createInstance(components, context));\n", "next_change": {"commit": "604bcaa440eb53f87158a0dbb0abec4d75abcccb", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\nindex 389a4142f6..e3e1b0b474 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n", "chunk": "@@ -89,6 +93,10 @@ public class OpenAPIImpl extends ExtensibleImpl<OpenAPI> implements OpenAPI {\n         }\n         return from;\n     }\n+    \n+    public final ApiContext getContext() {\n+        return context;\n+    }\n \n     @Override\n     public String getOpenapi() {\n", "next_change": {"commit": "505c1ae4879d617fcf686beee2145315d0e18867", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\nindex e3e1b0b474..4e0f57c6b4 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n", "chunk": "@@ -84,16 +90,16 @@ public class OpenAPIImpl extends ExtensibleImpl<OpenAPI> implements OpenAPI {\n         if (externalDocs != null) {\n             from.setExternalDocs(ExternalDocumentationImpl.createInstance(externalDocs));\n         }\n-        extractAnnotations(annotation, context, \"security\", SecurityRequirementImpl::createInstance, from.getSecurity());\n-        extractAnnotations(annotation, context, \"servers\", ServerImpl::createInstance, from.getServers());\n-        extractAnnotations(annotation, context, \"tags\", TagImpl::createInstance, from.getTags());\n+        extractAnnotations(annotation, context, \"security\", SecurityRequirementImpl::createInstance, from::addSecurityRequirement);\n+        extractAnnotations(annotation, context, \"servers\", ServerImpl::createInstance, from::addServer);\n+        extractAnnotations(annotation, context, \"tags\", TagImpl::createInstance, from::addTag);\n         AnnotationModel components = annotation.getValue(\"components\", AnnotationModel.class);\n         if (components != null) {\n             from.setComponents(ComponentsImpl.createInstance(components, context));\n         }\n         return from;\n     }\n-    \n+\n     public final ApiContext getContext() {\n         return context;\n     }\n", "next_change": {"commit": "0723c21279dbf40a374551dc55335fa1bb5cab11", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\nindex 4e0f57c6b4..8266560988 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n", "chunk": "@@ -100,6 +103,10 @@ public class OpenAPIImpl extends ExtensibleImpl<OpenAPI> implements OpenAPI, Clo\n         return from;\n     }\n \n+    private void addSecurityRequirements(List<SecurityRequirement> securityRequirements) {\n+        securityRequirements.forEach(this::addSecurityRequirement);\n+    }\n+\n     public final ApiContext getContext() {\n         return context;\n     }\n", "next_change": {"commit": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\nindex 8266560988..7e1baaf147 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java\n", "chunk": "@@ -93,20 +93,17 @@ public class OpenAPIImpl extends ExtensibleImpl<OpenAPI> implements OpenAPI, Clo\n             from.setExternalDocs(ExternalDocumentationImpl.createInstance(externalDocs));\n         }\n         extractAnnotations(annotation, context, \"security\", SecurityRequirementImpl::createInstance, from::addSecurityRequirement);\n-        extractAnnotations(annotation, context, \"securitySets\", SecurityRequirementImpl::createInstances, from::addSecurityRequirements);\n+        extractAnnotations(annotation, context, \"securitySets\", SecurityRequirementImpl::createInstances, from::addSecurityRequirement);\n         extractAnnotations(annotation, context, \"servers\", ServerImpl::createInstance, from::addServer);\n         extractAnnotations(annotation, context, \"tags\", TagImpl::createInstance, from::addTag);\n         AnnotationModel components = annotation.getValue(\"components\", AnnotationModel.class);\n         if (components != null) {\n             from.setComponents(ComponentsImpl.createInstance(components, context));\n         }\n+        from.setExtensions(parseExtensions(annotation));\n         return from;\n     }\n \n-    private void addSecurityRequirements(List<SecurityRequirement> securityRequirements) {\n-        securityRequirements.forEach(this::addSecurityRequirement);\n-    }\n-\n     public final ApiContext getContext() {\n         return context;\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "8d65b9ebcbfd989d06862e1661e10d5385695482", "committedDate": "2020-07-09 19:48:40 +0530", "message": "FISH-162 OpenAPI Class Data Processing"}, {"oid": "604bcaa440eb53f87158a0dbb0abec4d75abcccb", "committedDate": "2020-09-09 16:06:41 +0100", "message": "FISH-298 Utilise @Schema in openapi when pointing to another class"}, {"oid": "bdf639f954d4f31e860cc5849885df08a9c4507a", "committedDate": "2020-11-23 17:35:32 +0000", "message": "FISH-663 OpenAPI 2.0-RC3 Upgrade"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "7976a0757acb93d9556d71da0569806da75d682b", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix OpenAPI Collection set methods"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix Collection methods"}, {"oid": "f248f137b8913de0d6a1d9c80fb62ba224b05887", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Simplify extractAnnotations Methods"}, {"oid": "f8daa58589cc1a3832baf4b9de4cd93afd4563ba", "committedDate": "2020-12-22 16:09:50 +0000", "message": "FISH-663 OpenAPI minor PR fixes"}, {"oid": "45c0c50c22f39e4555103a63bfd7e5dc1982625c", "committedDate": "2021-07-13 16:02:43 +0200", "message": "FISH-1530 allow multiple servers and tags with empty url and name"}, {"oid": "7b7a84f0553836ac3e93a22c41fecf3759a814ff", "committedDate": "2021-12-22 02:12:13 +0530", "message": "FISH-1530 allow multiple servers and tags with empty url and name"}, {"oid": "bf4fcd36c83005789f3467a7934b6a3fefd1de25", "committedDate": "2022-07-24 13:38:36 -0300", "message": "FISH-6298 adjusting parameter order and cloning result"}, {"oid": "882a5fb554fd0347885309f28a173b828b89cd9a", "committedDate": "2022-07-24 13:47:24 -0300", "message": "FISH-6298 copyright year updated"}, {"oid": "7d618762a03038f29071c2bb42d4fe7cb8456588", "committedDate": "2022-07-26 16:25:30 -0300", "message": "FISH-6298 setting externalDocs"}, {"oid": "11f308438175d0b5002c1d5657fde0dd6b93ea13", "committedDate": "2022-07-27 19:22:12 -0300", "message": "FISH-6298 setting endpoints"}, {"oid": "0c7e39632ba1939b6b9267861924d1dd5e912011", "committedDate": "2022-07-27 21:37:21 -0300", "message": "FISH-6298 merging endpoints"}, {"oid": "3c28c2e3b9f96adb39c1fd936df9b383bf42c62e", "committedDate": "2022-07-28 07:59:30 -0300", "message": "FISH-6298 fix bug in merging endpoints"}, {"oid": "abdcf44f6fbe89ab3ec08422fd68b34790c53339", "committedDate": "2022-08-01 08:05:48 -0300", "message": "FISH-6298 setting/merging endpoints"}, {"oid": "505c1ae4879d617fcf686beee2145315d0e18867", "committedDate": "2023-01-16 12:19:32 +0000", "message": "FISH-6816 Merge Payara6 into master"}, {"oid": "0723c21279dbf40a374551dc55335fa1bb5cab11", "committedDate": "2023-02-03 18:00:57 -0300", "message": "FISH-6766 : Handling securitySets in annotation OpenAPIDefinition"}, {"oid": "e575b9bdd01152aeedae0add0e18caafc757fef9", "committedDate": "2023-02-20 17:49:52 +0100", "message": "FISH-6769 wip - adding partial support for extensions in openapi"}, {"oid": "26d319fecfdd6e5408959dd1be7d66f68ccb87f0", "committedDate": "2023-02-24 16:17:50 +0100", "message": "FISH-6769 handle openapi extensions in @OpenAPIDefinition"}, {"oid": "33aab352d52f0fa3793f6838081ee03a967ed199", "committedDate": "2023-03-13 12:14:07 +0000", "message": "Merge remote-tracking branch 'Payara/FISH-6599' into FISH-7117"}, {"oid": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "committedDate": "2023-03-17 11:13:17 +0000", "message": "Merge pull request #6223 from jGauravGupta/FISH-7118"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1MDU3OQ==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448950579", "body": "I am surprised to see addition of these fields. Is this adding a feature that wasn't there before?\r\n\r\nCC @MattGill98 ", "bodyText": "I am surprised to see addition of these fields. Is this adding a feature that wasn't there before?\nCC @MattGill98", "bodyHTML": "<p dir=\"auto\">I am surprised to see addition of these fields. Is this adding a feature that wasn't there before?</p>\n<p dir=\"auto\">CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/MattGill98/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MattGill98\">@MattGill98</a></p>", "author": "jbee", "createdAt": "2020-07-02T12:01:29Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java", "diffHunk": "@@ -39,29 +39,52 @@\n  */\n package fish.payara.microprofile.openapi.impl.model.callbacks;\n \n+import fish.payara.microprofile.openapi.api.visitor.ApiContext;\n+import fish.payara.microprofile.openapi.impl.model.ExtensibleTreeMap;\n+import fish.payara.microprofile.openapi.impl.model.OperationImpl;\n+import fish.payara.microprofile.openapi.impl.model.PathItemImpl;\n import static fish.payara.microprofile.openapi.impl.model.util.ModelUtils.applyReference;\n import static fish.payara.microprofile.openapi.impl.model.util.ModelUtils.getHttpMethod;\n import static fish.payara.microprofile.openapi.impl.model.util.ModelUtils.getOrCreateOperation;\n-import static fish.payara.microprofile.openapi.impl.model.util.ModelUtils.isAnnotationNull;\n-\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n-\n-import org.eclipse.microprofile.openapi.annotations.callbacks.CallbackOperation;\n import org.eclipse.microprofile.openapi.models.Operation;\n import org.eclipse.microprofile.openapi.models.PathItem;\n import org.eclipse.microprofile.openapi.models.PathItem.HttpMethod;\n import org.eclipse.microprofile.openapi.models.callbacks.Callback;\n-import org.eclipse.microprofile.openapi.models.media.Schema;\n-\n-import fish.payara.microprofile.openapi.impl.model.ExtensibleTreeMap;\n-import fish.payara.microprofile.openapi.impl.model.OperationImpl;\n-import fish.payara.microprofile.openapi.impl.model.PathItemImpl;\n+import org.glassfish.hk2.classmodel.reflect.AnnotationModel;\n \n public class CallbackImpl extends ExtensibleTreeMap<PathItem, Callback> implements Callback {\n \n     private static final long serialVersionUID = 5549098533131353142L;\n \n     private String ref;\n+    \n+    private String urlExpression;\n+\n+    private List<Operation> operations;", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MzkyMw==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r449393923", "bodyText": "Few OpenAPI Annotations and Models class  (e.g Callback, Content, etc) differ in attributes but not the end results.\nAs earlier merge operation performed from Annotation (from) instance to Model (to), these attributes storage is not required. But with this PR HK2 types converted to Model (from) and merge operation is performed, hence locally these additional attributes are required.", "author": "jGauravGupta", "createdAt": "2020-07-03T06:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1MDU3OQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "7976a0757acb93d9556d71da0569806da75d682b", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\nindex 69122449f8..86353abba1 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\n", "chunk": "@@ -63,7 +66,7 @@ public class CallbackImpl extends ExtensibleTreeMap<PathItem, Callback> implemen\n     \n     private String urlExpression;\n \n-    private List<Operation> operations;\n+    private List<Operation> operations = new ArrayList<>();\n \n     public static Callback createInstance(AnnotationModel annotation, ApiContext context) {\n         CallbackImpl from = new CallbackImpl();\n", "next_change": {"commit": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\nindex 86353abba1..4b94d86a09 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\n", "chunk": "@@ -66,7 +66,7 @@ public class CallbackImpl extends ExtensibleTreeMap<PathItem, Callback> implemen\n     \n     private String urlExpression;\n \n-    private List<Operation> operations = new ArrayList<>();\n+    private List<Operation> operations = createList();\n \n     public static Callback createInstance(AnnotationModel annotation, ApiContext context) {\n         CallbackImpl from = new CallbackImpl();\n", "next_change": {"commit": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\nindex 4b94d86a09..05a323a7a5 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/callbacks/CallbackImpl.java\n", "chunk": "@@ -70,6 +72,7 @@ public class CallbackImpl extends ExtensibleTreeMap<PathItem, Callback> implemen\n \n     public static Callback createInstance(AnnotationModel annotation, ApiContext context) {\n         CallbackImpl from = new CallbackImpl();\n+        from.setExtensions(parseExtensions(annotation));\n         String ref = annotation.getValue(\"ref\", String.class);\n         if (ref != null && !ref.isEmpty()) {\n             from.setRef(ref);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "bdf639f954d4f31e860cc5849885df08a9c4507a", "committedDate": "2020-11-23 17:35:32 +0000", "message": "FISH-663 OpenAPI 2.0-RC3 Upgrade"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "7976a0757acb93d9556d71da0569806da75d682b", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix OpenAPI Collection set methods"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix Collection methods"}, {"oid": "f248f137b8913de0d6a1d9c80fb62ba224b05887", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Simplify extractAnnotations Methods"}, {"oid": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "committedDate": "2023-03-17 11:13:17 +0000", "message": "Merge pull request #6223 from jGauravGupta/FISH-7118"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1Mzg2OQ==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448953869", "body": "If this method only works with `ContentImpl` passed it maybe should demand it in is signature? If `createInstance` would return `ContentImpl` the caller joining the two maybe has all necessary type data?", "bodyText": "If this method only works with ContentImpl passed it maybe should demand it in is signature? If createInstance would return ContentImpl the caller joining the two maybe has all necessary type data?", "bodyHTML": "<p dir=\"auto\">If this method only works with <code>ContentImpl</code> passed it maybe should demand it in is signature? If <code>createInstance</code> would return <code>ContentImpl</code> the caller joining the two maybe has all necessary type data?</p>", "author": "jbee", "createdAt": "2020-07-02T12:07:40Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java", "diffHunk": "@@ -88,42 +120,49 @@ public void setMediaTypes(Map<String, MediaType> mediaTypes) {\n         putAll(mediaTypes);\n     }\n \n-    public static void merge(org.eclipse.microprofile.openapi.annotations.media.Content from, Content to,\n-            boolean override, Map<String, Schema> currentSchemas) {\n+    public static void merge(Content from, Content to,", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b95e214d625edd981bd1573a36a1e647f3103f2f", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\nindex 794e6dd91b..ad299304b6 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\n", "chunk": "@@ -120,49 +104,43 @@ public class ContentImpl extends LinkedHashMap<String, MediaType> implements Con\n         putAll(mediaTypes);\n     }\n \n-    public static void merge(Content from, Content to,\n-            boolean override,\n-            ApiContext context) {\n+    public static void merge(ContentImpl from, Content to, boolean override, ApiContext context) {\n \n         if (from == null) {\n             return;\n         }\n \n-        if (from instanceof ContentImpl) {\n-\n-            for (String typeName : ((ContentImpl) from).getMediaTypes().keySet()) {\n+        for (String typeName : from.getMediaTypes().keySet()) {\n \n-                MediaType fromMediaType = ((ContentImpl) from).getMediaType(typeName);\n+            MediaType fromMediaType = from.getMediaType(typeName);\n \n-                // Get or create the corresponding media type\n-                MediaType toMediaType = to.getOrDefault(typeName, new MediaTypeImpl());\n-                to.addMediaType(typeName, toMediaType);\n+            // Get or create the corresponding media type\n+            MediaType toMediaType = to.getOrDefault(typeName, new MediaTypeImpl());\n+            to.addMediaType(typeName, toMediaType);\n \n-                // Merge encoding\n-                for (String encodingName : fromMediaType.getEncoding().keySet()) {\n-                    EncodingImpl.merge(encodingName,\n-                            fromMediaType.getEncoding().get(encodingName),\n-                            to.getMediaType(typeName).getEncoding(), override, context);\n-                }\n+            // Merge encoding\n+            for (String encodingName : fromMediaType.getEncoding().keySet()) {\n+                EncodingImpl.merge(encodingName,\n+                        fromMediaType.getEncoding().get(encodingName),\n+                        to.getMediaType(typeName).getEncoding(), override, context);\n+            }\n \n-                // Merge examples\n-                for (String exampleName : fromMediaType.getExamples().keySet()) {\n-                    ExampleImpl.merge(exampleName, fromMediaType.getExamples().get(exampleName), to.getMediaType(typeName).getExamples(), override);\n-                }\n-                if (fromMediaType.getExample() != null) {\n-                    to.getMediaType(typeName).setExample(fromMediaType.getExample());\n-                }\n+            // Merge examples\n+            for (String exampleName : fromMediaType.getExamples().keySet()) {\n+                ExampleImpl.merge(exampleName, fromMediaType.getExamples().get(exampleName), to.getMediaType(typeName).getExamples(), override);\n+            }\n+            if (fromMediaType.getExample() != null) {\n+                to.getMediaType(typeName).setExample(fromMediaType.getExample());\n+            }\n \n-                // Merge schema\n-                if (fromMediaType.getSchema() != null) {\n-                    if (toMediaType.getSchema() == null) {\n-                        toMediaType.setSchema(new SchemaImpl());\n-                    }\n-                    Schema schema = toMediaType.getSchema();\n-                    SchemaImpl.merge(fromMediaType.getSchema(), schema, true, context);\n+            // Merge schema\n+            if (fromMediaType.getSchema() != null) {\n+                if (toMediaType.getSchema() == null) {\n+                    toMediaType.setSchema(new SchemaImpl());\n                 }\n+                Schema schema = toMediaType.getSchema();\n+                SchemaImpl.merge(fromMediaType.getSchema(), schema, true, context);\n             }\n-\n         }\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\nindex 794e6dd91b..ad299304b6 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\n", "chunk": "@@ -120,49 +104,43 @@ public class ContentImpl extends LinkedHashMap<String, MediaType> implements Con\n         putAll(mediaTypes);\n     }\n \n-    public static void merge(Content from, Content to,\n-            boolean override,\n-            ApiContext context) {\n+    public static void merge(ContentImpl from, Content to, boolean override, ApiContext context) {\n \n         if (from == null) {\n             return;\n         }\n \n-        if (from instanceof ContentImpl) {\n-\n-            for (String typeName : ((ContentImpl) from).getMediaTypes().keySet()) {\n+        for (String typeName : from.getMediaTypes().keySet()) {\n \n-                MediaType fromMediaType = ((ContentImpl) from).getMediaType(typeName);\n+            MediaType fromMediaType = from.getMediaType(typeName);\n \n-                // Get or create the corresponding media type\n-                MediaType toMediaType = to.getOrDefault(typeName, new MediaTypeImpl());\n-                to.addMediaType(typeName, toMediaType);\n+            // Get or create the corresponding media type\n+            MediaType toMediaType = to.getOrDefault(typeName, new MediaTypeImpl());\n+            to.addMediaType(typeName, toMediaType);\n \n-                // Merge encoding\n-                for (String encodingName : fromMediaType.getEncoding().keySet()) {\n-                    EncodingImpl.merge(encodingName,\n-                            fromMediaType.getEncoding().get(encodingName),\n-                            to.getMediaType(typeName).getEncoding(), override, context);\n-                }\n+            // Merge encoding\n+            for (String encodingName : fromMediaType.getEncoding().keySet()) {\n+                EncodingImpl.merge(encodingName,\n+                        fromMediaType.getEncoding().get(encodingName),\n+                        to.getMediaType(typeName).getEncoding(), override, context);\n+            }\n \n-                // Merge examples\n-                for (String exampleName : fromMediaType.getExamples().keySet()) {\n-                    ExampleImpl.merge(exampleName, fromMediaType.getExamples().get(exampleName), to.getMediaType(typeName).getExamples(), override);\n-                }\n-                if (fromMediaType.getExample() != null) {\n-                    to.getMediaType(typeName).setExample(fromMediaType.getExample());\n-                }\n+            // Merge examples\n+            for (String exampleName : fromMediaType.getExamples().keySet()) {\n+                ExampleImpl.merge(exampleName, fromMediaType.getExamples().get(exampleName), to.getMediaType(typeName).getExamples(), override);\n+            }\n+            if (fromMediaType.getExample() != null) {\n+                to.getMediaType(typeName).setExample(fromMediaType.getExample());\n+            }\n \n-                // Merge schema\n-                if (fromMediaType.getSchema() != null) {\n-                    if (toMediaType.getSchema() == null) {\n-                        toMediaType.setSchema(new SchemaImpl());\n-                    }\n-                    Schema schema = toMediaType.getSchema();\n-                    SchemaImpl.merge(fromMediaType.getSchema(), schema, true, context);\n+            // Merge schema\n+            if (fromMediaType.getSchema() != null) {\n+                if (toMediaType.getSchema() == null) {\n+                    toMediaType.setSchema(new SchemaImpl());\n                 }\n+                Schema schema = toMediaType.getSchema();\n+                SchemaImpl.merge(fromMediaType.getSchema(), schema, true, context);\n             }\n-\n         }\n     }\n \n", "next_change": {"commit": "e575b9bdd01152aeedae0add0e18caafc757fef9", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\nindex ad299304b6..373ea6af8b 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/ContentImpl.java\n", "chunk": "@@ -144,4 +167,12 @@ public class ContentImpl extends LinkedHashMap<String, MediaType> implements Con\n         }\n     }\n \n+    public Map<String, Object> getExtensions() {\n+        return extensions;\n+    }\n+\n+    public void setExtensions(Map<String, Object> extensions) {\n+        this.extensions = extensions;\n+    }\n+\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "bdf639f954d4f31e860cc5849885df08a9c4507a", "committedDate": "2020-11-23 17:35:32 +0000", "message": "FISH-663 OpenAPI 2.0-RC3 Upgrade"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix Collection methods"}, {"oid": "f248f137b8913de0d6a1d9c80fb62ba224b05887", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Simplify extractAnnotations Methods"}, {"oid": "e060d3bdf3b9bc26d516bad433fadb35cb051cfa", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Fix OpenAPI @Parameters parsing"}, {"oid": "01567d775d23b896c652593f7a49ab71bd4a7d63", "committedDate": "2020-12-21 13:51:54 +0000", "message": "FISH-663 MP OpenAPI 2.0 @APIResponseSchema support"}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "e56cb68416046c937269a28291c9d47d275516c3", "committedDate": "2021-10-08 16:10:59 +0100", "message": "Merge pull request #5342 from jGauravGupta/FISH-1312"}, {"oid": "e575b9bdd01152aeedae0add0e18caafc757fef9", "committedDate": "2023-02-20 17:49:52 +0100", "message": "FISH-6769 wip - adding partial support for extensions in openapi"}, {"oid": "0419b4e4f32f707f3d5cdc863ad3b53ae71f1750", "committedDate": "2023-02-20 17:49:54 +0100", "message": "FISH-6769 update copyright year"}, {"oid": "988a2ddd91cd3a76abbb1f5732521f78e56a277d", "committedDate": "2023-02-20 17:49:55 +0100", "message": "FISH-6769 add support for extensions to openapi Content annotation"}, {"oid": "ee991d12f3eeacb4abd8efc9debf847474a05098", "committedDate": "2023-02-23 16:27:59 +0100", "message": "FISH-6769 don't expect empty extensions in content, use null"}, {"oid": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "committedDate": "2023-03-17 11:13:17 +0000", "message": "Merge pull request #6223 from jGauravGupta/FISH-7118"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NTQxMg==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448955412", "body": "`return` avoids mutable state", "bodyText": "return avoids mutable state", "bodyHTML": "<p dir=\"auto\"><code>return</code> avoids mutable state</p>", "author": "jbee", "createdAt": "2020-07-02T12:10:35Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java", "diffHunk": "@@ -108,6 +110,133 @@\n \n     private Object additionalProperties;\n     private Schema items;\n+    private String implementation;\n+\n+    public static Schema createInstance(AnnotationModel annotation, ApiContext context) {\n+        SchemaImpl from = new SchemaImpl();\n+        from.setDefaultValue(annotation.getValue(\"defaultValue\", Object.class));\n+        from.setTitle(annotation.getValue(\"title\", String.class));\n+        Double multipleOf = annotation.getValue(\"multipleOf\", Double.class);\n+        if (multipleOf != null) {\n+            from.setMultipleOf(BigDecimal.valueOf(multipleOf));\n+        }\n+        String maximum = annotation.getValue(\"maximum\", String.class);\n+        if (maximum != null && !maximum.isEmpty()) {\n+            from.setMaximum(new BigDecimal(maximum));\n+        }\n+        from.setExclusiveMaximum(annotation.getValue(\"exclusiveMaximum\", Boolean.class));\n+        String minimum = annotation.getValue(\"minimum\", String.class);\n+        if (minimum != null && !minimum.isEmpty()) {\n+            from.setMinimum(new BigDecimal(minimum));\n+        }\n+        from.setExclusiveMinimum(annotation.getValue(\"exclusiveMinimum\", Boolean.class));\n+        from.setMaxLength(annotation.getValue(\"maxLength\", Integer.class));\n+        from.setMinLength(annotation.getValue(\"minLength\", Integer.class));\n+        from.setPattern(annotation.getValue(\"pattern\", String.class));\n+        from.setMaxItems(annotation.getValue(\"maxItems\", Integer.class));\n+        from.setMinItems(annotation.getValue(\"minItems\", Integer.class));\n+        from.setUniqueItems(annotation.getValue(\"uniqueItems\", Boolean.class));\n+        from.setMaxProperties(annotation.getValue(\"maxProperties\", Integer.class));\n+        from.setMinProperties(annotation.getValue(\"minProperties\", Integer.class));\n+        from.setRequired(annotation.getValue(\"requiredProperties\", List.class));\n+        EnumModel typeEnum = annotation.getValue(\"type\", EnumModel.class);\n+        if (typeEnum != null) {\n+            from.setType(SchemaType.valueOf(typeEnum.getValue()));\n+        }\n+        from.setDescription(annotation.getValue(\"description\", String.class));\n+        from.setFormat(annotation.getValue(\"format\", String.class));\n+        String ref = annotation.getValue(\"ref\", String.class);\n+        if (ref != null && !ref.isEmpty()) {\n+            from.setRef(ref);\n+        }\n+        from.setNullable(annotation.getValue(\"nullable\", Boolean.class));\n+        from.setReadOnly(annotation.getValue(\"readOnly\", Boolean.class));\n+        from.setWriteOnly(annotation.getValue(\"writeOnly\", Boolean.class));\n+        from.setExample(annotation.getValue(\"example\", Object.class));\n+        AnnotationModel externalDocs = annotation.getValue(\"externalDocs\", AnnotationModel.class);\n+        if (externalDocs != null) {\n+            from.setExternalDocs(ExternalDocumentationImpl.createInstance(externalDocs));\n+        }\n+        from.setDeprecated(annotation.getValue(\"deprecated\", Boolean.class));\n+        from.setEnumeration(annotation.getValue(\"enumeration\", List.class));\n+        String discriminatorProperty = annotation.getValue(\"discriminatorProperty\", String.class);\n+        List<AnnotationModel> discriminatorMapping = annotation.getValue(\"discriminatorMapping\", List.class);\n+        if (discriminatorMapping != null && !discriminatorProperty.isEmpty()) {\n+            DiscriminatorImpl discriminator = new DiscriminatorImpl();\n+            discriminator.setPropertyName(discriminatorProperty);\n+            for (AnnotationModel mapping : discriminatorMapping) {\n+                String value = mapping.getValue(\"value\", String.class);\n+                String schema = mapping.getValue(\"schema\", String.class);\n+                discriminator.addMapping(value, ModelUtils.getSimpleName(schema));\n+            }\n+            from.setDiscriminator(discriminator);\n+        }\n+\n+        String not = annotation.getValue(\"not\", String.class);\n+        if (not != null) {\n+            Schema schema = from.getSchemaInstance(not, context);\n+            if (schema != null) {\n+                from.setNot(schema);\n+            }\n+        }\n+        List<String> anyOf = annotation.getValue(\"anyOf\", List.class);\n+        if (anyOf != null) {\n+            if (from.getAnyOf() == null) {\n+                from.setAnyOf(new ArrayList<>());\n+            }\n+            from.getAnyOf().addAll(from.getSchemaInstances(anyOf, context));\n+        }\n+        List<String> allOf = annotation.getValue(\"allOf\", List.class);\n+        if (allOf != null) {\n+            if (from.getAllOf() == null) {\n+                from.setAllOf(new ArrayList<>());\n+            }\n+            from.getAllOf().addAll(from.getSchemaInstances(allOf, context));\n+        }\n+        List<String> oneOf = annotation.getValue(\"oneOf\", List.class);\n+        if (oneOf != null) {\n+            if (from.getOneOf() == null) {\n+                from.setOneOf(new ArrayList<>());\n+            }\n+            from.getOneOf().addAll(from.getSchemaInstances(oneOf, context));\n+        }\n+\n+        from.setImplementation(annotation.getValue(\"implementation\", String.class));\n+        return from;\n+    }\n+\n+    private List<Schema> getSchemaInstances(List<String> fromList, ApiContext context) {\n+        List<Schema> to = new ArrayList<>();\n+        if (fromList != null) {\n+            for (String from : fromList) {\n+                Schema schema = getSchemaInstance(from, context);\n+                if (schema != null) {\n+                    to.add(schema);\n+                }\n+            }\n+        }\n+        return to;\n+    }\n+\n+    private Schema getSchemaInstance(String schemaClassName, ApiContext context) {\n+        Schema to = null;\n+        if (schemaClassName != null\n+                && !schemaClassName.equals(\"java.lang.Void\")) {\n+            Type schemaType = context.getType(schemaClassName);\n+            if (schemaType instanceof ClassModel) {\n+                ClassModel schemaClassModel = (ClassModel) schemaType;\n+                if (schemaClassModel.isInstanceOf(Schema.class.getName())) {\n+                    try {\n+                        Class<?> oneOfClass = context.getApplicationClassLoader().loadClass(schemaClassName);\n+                        to = (Schema) oneOfClass.newInstance();", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b95e214d625edd981bd1573a36a1e647f3103f2f", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\nindex d2962d290c..688701a756 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n", "chunk": "@@ -228,14 +227,14 @@ public class SchemaImpl extends ExtensibleImpl<Schema> implements Schema {\n                 if (schemaClassModel.isInstanceOf(Schema.class.getName())) {\n                     try {\n                         Class<?> oneOfClass = context.getApplicationClassLoader().loadClass(schemaClassName);\n-                        to = (Schema) oneOfClass.newInstance();\n+                        return (Schema) oneOfClass.newInstance();\n                     } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {\n                         LOGGER.log(WARNING, \"Unable to create Schema class instance.\", ex);\n                     }\n                 }\n             }\n         }\n-        return to;\n+        return null;\n     }\n \n     @Override\n", "next_change": null}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\nindex d2962d290c..688701a756 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n", "chunk": "@@ -228,14 +227,14 @@ public class SchemaImpl extends ExtensibleImpl<Schema> implements Schema {\n                 if (schemaClassModel.isInstanceOf(Schema.class.getName())) {\n                     try {\n                         Class<?> oneOfClass = context.getApplicationClassLoader().loadClass(schemaClassName);\n-                        to = (Schema) oneOfClass.newInstance();\n+                        return (Schema) oneOfClass.newInstance();\n                     } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {\n                         LOGGER.log(WARNING, \"Unable to create Schema class instance.\", ex);\n                     }\n                 }\n             }\n         }\n-        return to;\n+        return null;\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "8d65b9ebcbfd989d06862e1661e10d5385695482", "committedDate": "2020-07-09 19:48:40 +0530", "message": "FISH-162 OpenAPI Class Data Processing"}, {"oid": "ea20059847aca5466107e1433ce0032247951fa4", "committedDate": "2020-09-04 14:46:18 +0530", "message": "FISH-391 store AnnotationInfo in OpenAPIContext"}, {"oid": "604bcaa440eb53f87158a0dbb0abec4d75abcccb", "committedDate": "2020-09-09 16:06:41 +0100", "message": "FISH-298 Utilise @Schema in openapi when pointing to another class"}, {"oid": "97d07b105f59959a0f7831a4e70fcf1705583482", "committedDate": "2020-09-09 16:23:36 +0100", "message": "FISH-99 Full results are shown, multiple applications now work"}, {"oid": "bdf639f954d4f31e860cc5849885df08a9c4507a", "committedDate": "2020-11-23 17:35:32 +0000", "message": "FISH-663 OpenAPI 2.0-RC3 Upgrade"}, {"oid": "10862a0dda5c346cddc888cafa0ba3c4d4f19bb4", "committedDate": "2020-11-23 17:35:40 +0000", "message": "FISH-660 Order all HashMaps"}, {"oid": "0d308540bd1867681467886f5bdbc727ca96fe37", "committedDate": "2020-11-27 12:54:58 +0000", "message": "FISH-663 Merge Schema classes correctly"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "7976a0757acb93d9556d71da0569806da75d682b", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix OpenAPI Collection set methods"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix Collection methods"}, {"oid": "4a820594f1a460f839acd00c54db2dab0c5675b4", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Add Config Property Schema Processing"}, {"oid": "f248f137b8913de0d6a1d9c80fb62ba224b05887", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Simplify extractAnnotations Methods"}, {"oid": "e060d3bdf3b9bc26d516bad433fadb35cb051cfa", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Fix OpenAPI @Parameters parsing"}, {"oid": "e22efc66abcbf783f8092ecae9d0ae7da8acfd47", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Fix OpenAPI Callback Schema Creation"}, {"oid": "01567d775d23b896c652593f7a49ab71bd4a7d63", "committedDate": "2020-12-21 13:51:54 +0000", "message": "FISH-663 MP OpenAPI 2.0 @APIResponseSchema support"}, {"oid": "fca79aee0c41c6754edb037e08d4355318b611fe", "committedDate": "2020-12-21 13:54:03 +0000", "message": "FISH-663 MP OpenAPI add required properties"}, {"oid": "936002c64b8e23e7e5107f93eba8526c6394209d", "committedDate": "2020-12-21 13:54:07 +0000", "message": "FISH-663 MP OpenAPI use method schema annotations"}, {"oid": "cb78882409eb173aefd858cc42e1eae6aeda90eb", "committedDate": "2020-12-21 17:23:49 +0000", "message": "FISH-760 Fix OpenAPI Enum parsing"}, {"oid": "e0c842ceb17951423eb5f993cca51c7984bb7dce", "committedDate": "2021-10-08 15:15:46 +0100", "message": "Merge pull request #5331 from aubi/FISH-1204"}, {"oid": "babf9d3f98611ef70374523cadd08ea99ad34514", "committedDate": "2023-01-27 18:18:53 +0100", "message": "FISH-6768 show additionalProperties in OpenApi if explicitly specified"}, {"oid": "cb5c2054c3e4e788dee0c47c0dc571b40946d7c0", "committedDate": "2023-01-27 18:21:01 +0100", "message": "FISH-6768 fix call of all deprecated methods"}, {"oid": "75d3427437138cf6dcb33d6833e91bb7f7fccb69", "committedDate": "2023-02-16 13:49:52 +0100", "message": "FISH-6975 refactoring: wrap long lines caused by newInstance exceptions"}, {"oid": "e575b9bdd01152aeedae0add0e18caafc757fef9", "committedDate": "2023-02-20 17:49:52 +0100", "message": "FISH-6769 wip - adding partial support for extensions in openapi"}, {"oid": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "committedDate": "2023-03-17 11:13:17 +0000", "message": "Merge pull request #6223 from jGauravGupta/FISH-7118"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NTc3MQ==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448955771", "body": "Would it hurt to instead initialise the `properties` field with an empty map?", "bodyText": "Would it hurt to instead initialise the properties field with an empty map?", "bodyHTML": "<p dir=\"auto\">Would it hurt to instead initialise the <code>properties</code> field with an empty map?</p>", "author": "jbee", "createdAt": "2020-07-02T12:11:18Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java", "diffHunk": "@@ -346,6 +475,9 @@ public void setProperties(Map<String, Schema> properties) {\n \n     @Override\n     public Schema addProperty(String key, Schema propertiesItem) {\n+        if (this.properties == null) {\n+            this.properties = new HashMap<>();", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "461d3c20ff3640a99211272af53195dd5e401721", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\nindex d2962d290c..a2f5730af1 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n", "chunk": "@@ -475,9 +475,6 @@ public class SchemaImpl extends ExtensibleImpl<Schema> implements Schema {\n \n     @Override\n     public Schema addProperty(String key, Schema propertiesItem) {\n-        if (this.properties == null) {\n-            this.properties = new HashMap<>();\n-        }\n         if (propertiesItem != null) {\n             this.properties.put(key, propertiesItem);\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\nindex d2962d290c..688701a756 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n", "chunk": "@@ -475,9 +474,6 @@ public class SchemaImpl extends ExtensibleImpl<Schema> implements Schema {\n \n     @Override\n     public Schema addProperty(String key, Schema propertiesItem) {\n-        if (this.properties == null) {\n-            this.properties = new HashMap<>();\n-        }\n         if (propertiesItem != null) {\n             this.properties.put(key, propertiesItem);\n         }\n", "next_change": {"commit": "7976a0757acb93d9556d71da0569806da75d682b", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\nindex 688701a756..08edd55ba2 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n", "chunk": "@@ -464,12 +473,15 @@ public class SchemaImpl extends ExtensibleImpl<Schema> implements Schema {\n \n     @Override\n     public Map<String, Schema> getProperties() {\n-        return properties;\n+        return ModelUtils.readOnlyView(properties);\n     }\n \n     @Override\n     public void setProperties(Map<String, Schema> properties) {\n-        this.properties = properties;\n+        this.properties.clear();\n+        if (properties != null) {\n+            this.properties.putAll(properties);\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\nindex 08edd55ba2..8fe7fbde99 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/media/SchemaImpl.java\n", "chunk": "@@ -473,20 +480,20 @@ public class SchemaImpl extends ExtensibleImpl<Schema> implements Schema {\n \n     @Override\n     public Map<String, Schema> getProperties() {\n-        return ModelUtils.readOnlyView(properties);\n+        return readOnlyView(properties);\n     }\n \n     @Override\n     public void setProperties(Map<String, Schema> properties) {\n-        this.properties.clear();\n-        if (properties != null) {\n-            this.properties.putAll(properties);\n-        }\n+        this.properties = createMap(properties);\n     }\n \n     @Override\n     public Schema addProperty(String key, Schema propertiesItem) {\n         if (propertiesItem != null) {\n+            if (this.properties == null) {\n+                this.properties = createMap();\n+            }\n             this.properties.put(key, propertiesItem);\n         }\n         return this;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "8d65b9ebcbfd989d06862e1661e10d5385695482", "committedDate": "2020-07-09 19:48:40 +0530", "message": "FISH-162 OpenAPI Class Data Processing"}, {"oid": "ea20059847aca5466107e1433ce0032247951fa4", "committedDate": "2020-09-04 14:46:18 +0530", "message": "FISH-391 store AnnotationInfo in OpenAPIContext"}, {"oid": "604bcaa440eb53f87158a0dbb0abec4d75abcccb", "committedDate": "2020-09-09 16:06:41 +0100", "message": "FISH-298 Utilise @Schema in openapi when pointing to another class"}, {"oid": "97d07b105f59959a0f7831a4e70fcf1705583482", "committedDate": "2020-09-09 16:23:36 +0100", "message": "FISH-99 Full results are shown, multiple applications now work"}, {"oid": "bdf639f954d4f31e860cc5849885df08a9c4507a", "committedDate": "2020-11-23 17:35:32 +0000", "message": "FISH-663 OpenAPI 2.0-RC3 Upgrade"}, {"oid": "10862a0dda5c346cddc888cafa0ba3c4d4f19bb4", "committedDate": "2020-11-23 17:35:40 +0000", "message": "FISH-660 Order all HashMaps"}, {"oid": "0d308540bd1867681467886f5bdbc727ca96fe37", "committedDate": "2020-11-27 12:54:58 +0000", "message": "FISH-663 Merge Schema classes correctly"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "7976a0757acb93d9556d71da0569806da75d682b", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix OpenAPI Collection set methods"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix Collection methods"}, {"oid": "4a820594f1a460f839acd00c54db2dab0c5675b4", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Add Config Property Schema Processing"}, {"oid": "f248f137b8913de0d6a1d9c80fb62ba224b05887", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Simplify extractAnnotations Methods"}, {"oid": "e060d3bdf3b9bc26d516bad433fadb35cb051cfa", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Fix OpenAPI @Parameters parsing"}, {"oid": "e22efc66abcbf783f8092ecae9d0ae7da8acfd47", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Fix OpenAPI Callback Schema Creation"}, {"oid": "01567d775d23b896c652593f7a49ab71bd4a7d63", "committedDate": "2020-12-21 13:51:54 +0000", "message": "FISH-663 MP OpenAPI 2.0 @APIResponseSchema support"}, {"oid": "fca79aee0c41c6754edb037e08d4355318b611fe", "committedDate": "2020-12-21 13:54:03 +0000", "message": "FISH-663 MP OpenAPI add required properties"}, {"oid": "936002c64b8e23e7e5107f93eba8526c6394209d", "committedDate": "2020-12-21 13:54:07 +0000", "message": "FISH-663 MP OpenAPI use method schema annotations"}, {"oid": "cb78882409eb173aefd858cc42e1eae6aeda90eb", "committedDate": "2020-12-21 17:23:49 +0000", "message": "FISH-760 Fix OpenAPI Enum parsing"}, {"oid": "e0c842ceb17951423eb5f993cca51c7984bb7dce", "committedDate": "2021-10-08 15:15:46 +0100", "message": "Merge pull request #5331 from aubi/FISH-1204"}, {"oid": "babf9d3f98611ef70374523cadd08ea99ad34514", "committedDate": "2023-01-27 18:18:53 +0100", "message": "FISH-6768 show additionalProperties in OpenApi if explicitly specified"}, {"oid": "cb5c2054c3e4e788dee0c47c0dc571b40946d7c0", "committedDate": "2023-01-27 18:21:01 +0100", "message": "FISH-6768 fix call of all deprecated methods"}, {"oid": "75d3427437138cf6dcb33d6833e91bb7f7fccb69", "committedDate": "2023-02-16 13:49:52 +0100", "message": "FISH-6975 refactoring: wrap long lines caused by newInstance exceptions"}, {"oid": "e575b9bdd01152aeedae0add0e18caafc757fef9", "committedDate": "2023-02-20 17:49:52 +0100", "message": "FISH-6769 wip - adding partial support for extensions in openapi"}, {"oid": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "committedDate": "2023-03-17 11:13:17 +0000", "message": "Merge pull request #6223 from jGauravGupta/FISH-7118"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NDk2MQ==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448964961", "body": "`ExtensibleType<?>` I think", "bodyText": "ExtensibleType<?> I think", "bodyHTML": "<p dir=\"auto\"><code>ExtensibleType&lt;?&gt;</code> I think</p>", "author": "jbee", "createdAt": "2020-07-02T12:28:49Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java", "diffHunk": "@@ -40,53 +40,61 @@\n package fish.payara.microprofile.openapi.impl.model.util;\n \n import java.lang.annotation.Annotation;\n-import java.lang.reflect.AnnotatedElement;\n-import java.lang.reflect.Executable;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Parameter;\n+import java.util.Collection;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n+import org.glassfish.hk2.classmodel.reflect.AnnotatedElement;\n+import org.glassfish.hk2.classmodel.reflect.AnnotationModel;\n+import org.glassfish.hk2.classmodel.reflect.ClassModel;\n+import org.glassfish.hk2.classmodel.reflect.ExtensibleType;\n+import org.glassfish.hk2.classmodel.reflect.FieldModel;\n+import org.glassfish.hk2.classmodel.reflect.InterfaceModel;\n+import org.glassfish.hk2.classmodel.reflect.MethodModel;\n+import org.glassfish.hk2.classmodel.reflect.Parameter;\n \n /**\n  * Represents the aggregated annotations on a type, its fields and methods including annotations \"inherited\" from\n  * super-classes and implemented interfaces. Should a field or method from a super-class be overridden the\n  * {@link Annotation} closest to the represented type (the overriding one) is kept.\n  */\n-public final class AnnotationInfo<T> {\n+public final class AnnotationInfo {\n \n-    private static final Map<Class<?>, AnnotationInfo<?>> TYPES = new ConcurrentHashMap<>();\n+    private static final Map<ExtensibleType, AnnotationInfo> TYPES = new ConcurrentHashMap<>();", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "461d3c20ff3640a99211272af53195dd5e401721", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java\nindex ddb241a8f1..c045e75009 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java\n", "chunk": "@@ -61,7 +61,7 @@ import org.glassfish.hk2.classmodel.reflect.Parameter;\n  */\n public final class AnnotationInfo {\n \n-    private static final Map<ExtensibleType, AnnotationInfo> TYPES = new ConcurrentHashMap<>();\n+    private static final Map<ExtensibleType<? extends ExtensibleType>, AnnotationInfo> TYPES = new ConcurrentHashMap<>();\n \n     @SuppressWarnings(\"unchecked\")\n     public static AnnotationInfo valueOf(ExtensibleType<? extends ExtensibleType> type) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java\nindex ddb241a8f1..c045e75009 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java\n", "chunk": "@@ -61,7 +61,7 @@ import org.glassfish.hk2.classmodel.reflect.Parameter;\n  */\n public final class AnnotationInfo {\n \n-    private static final Map<ExtensibleType, AnnotationInfo> TYPES = new ConcurrentHashMap<>();\n+    private static final Map<ExtensibleType<? extends ExtensibleType>, AnnotationInfo> TYPES = new ConcurrentHashMap<>();\n \n     @SuppressWarnings(\"unchecked\")\n     public static AnnotationInfo valueOf(ExtensibleType<? extends ExtensibleType> type) {\n", "next_change": {"commit": "ea20059847aca5466107e1433ce0032247951fa4", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/visitor/AnnotationInfo.java\nsimilarity index 96%\nrename from appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java\nrename to appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/visitor/AnnotationInfo.java\nindex c045e75009..471593abcd 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/AnnotationInfo.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/visitor/AnnotationInfo.java\n", "chunk": "@@ -61,20 +61,13 @@ import org.glassfish.hk2.classmodel.reflect.Parameter;\n  */\n public final class AnnotationInfo {\n \n-    private static final Map<ExtensibleType<? extends ExtensibleType>, AnnotationInfo> TYPES = new ConcurrentHashMap<>();\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static AnnotationInfo valueOf(ExtensibleType<? extends ExtensibleType> type) {\n-        return (AnnotationInfo) TYPES.computeIfAbsent(type, key -> new AnnotationInfo(key));\n-    }\n-\n     private final ExtensibleType<? extends ExtensibleType> type;\n     private final Map<String, AnnotationModel> typeAnnotations = new ConcurrentHashMap<>();\n     private final Map<String, Map<String, AnnotationModel>> fieldAnnotations = new ConcurrentHashMap<>();\n     private final Map<String, Map<String, AnnotationModel>> methodAnnotations = new ConcurrentHashMap<>();\n     private final Map<String, Map<String, AnnotationModel>> methodParameterAnnotations = new ConcurrentHashMap<>();\n \n-    private AnnotationInfo(ExtensibleType<? extends ExtensibleType> type) {\n+    AnnotationInfo(ExtensibleType<? extends ExtensibleType> type) {\n         this.type = type;\n         init(type);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "ea20059847aca5466107e1433ce0032247951fa4", "committedDate": "2020-09-04 14:46:18 +0530", "message": "FISH-391 store AnnotationInfo in OpenAPIContext"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NzE0NA==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448967144", "body": "Moving from `Class` to `String` does take away a lot of the context. Maybe this should be using a wrapper type on `String` to become more typed again.", "bodyText": "Moving from Class to String does take away a lot of the context. Maybe this should be using a wrapper type on String to become more typed again.", "bodyHTML": "<p dir=\"auto\">Moving from <code>Class</code> to <code>String</code> does take away a lot of the context. Maybe this should be using a wrapper type on <code>String</code> to become more typed again.</p>", "author": "jbee", "createdAt": "2020-07-02T12:32:53Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java", "diffHunk": "@@ -552,30 +577,44 @@ public static String getResourcePath(GenericDeclaration declaration, Map<String,\n         return null;\n     }\n \n-    private static String getResourcePath(Class<?> clazz, Map<String, Set<Class<?>>> resourceMapping) {\n+    public static String getResourcePath(Type declaration, Map<String, Set<String>> resourceMapping) {\n+        if (declaration instanceof MethodModel) {\n+            return getResourcePath((MethodModel) declaration, resourceMapping);\n+        } else if (declaration instanceof ClassModel) {\n+            return getResourcePath((ClassModel) declaration, resourceMapping);\n+        }\n+        return null;\n+    }\n+\n+    public static String getResourcePath(ClassModel clazz, Map<String, Set<String>> resourceMapping) {\n         // If the class is a resource and contains a mapping\n-        AnnotationInfo<?> annotations = AnnotationInfo.valueOf(clazz);\n+        AnnotationInfo annotations = AnnotationInfo.valueOf(clazz);\n         if (annotations.isAnnotationPresent(Path.class)) {\n-            for (Map.Entry<String, Set<Class<?>>> entry : resourceMapping.entrySet()) {\n-                if (entry.getValue() != null && entry.getValue().contains(clazz)) {\n-                    return normaliseUrl(entry.getKey() + \"/\" + annotations.getAnnotation(Path.class).value());\n+            for (Map.Entry<String, Set<String>> entry : resourceMapping.entrySet()) {\n+                if (entry.getValue() != null && entry.getValue().contains(clazz.getName())) {\n+                    return normaliseUrl(entry.getKey() + \"/\" + annotations.getAnnotationValue(Path.class));\n                 }\n             }\n         }\n         return null;\n     }\n \n-    private static String getResourcePath(Method method, Map<String, Set<Class<?>>> resourceMapping) {\n-        AnnotationInfo<?> annotations = AnnotationInfo.valueOf(method.getDeclaringClass());\n+    public static String getResourcePath(MethodModel method, Map<String, Set<String>> resourceMapping) {", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "208365812ca5db89d15166db35b3e2a3f59bbb13", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 9830eb2a7e..bc438084b8 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -586,12 +624,12 @@ public final class ModelUtils {\n         return null;\n     }\n \n-    public static String getResourcePath(ClassModel clazz, Map<String, Set<String>> resourceMapping) {\n+    public static String getResourcePath(ClassModel clazz, Map<String, Set<Type>> resourceMapping) {\n         // If the class is a resource and contains a mapping\n         AnnotationInfo annotations = AnnotationInfo.valueOf(clazz);\n         if (annotations.isAnnotationPresent(Path.class)) {\n-            for (Map.Entry<String, Set<String>> entry : resourceMapping.entrySet()) {\n-                if (entry.getValue() != null && entry.getValue().contains(clazz.getName())) {\n+            for (Map.Entry<String, Set<Type>> entry : resourceMapping.entrySet()) {\n+                if (entry.getValue() != null && entry.getValue().contains(clazz)) {\n                     return normaliseUrl(entry.getKey() + \"/\" + annotations.getAnnotationValue(Path.class));\n                 }\n             }\n", "next_change": null}, {"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 9830eb2a7e..bc438084b8 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -599,7 +637,7 @@ public final class ModelUtils {\n         return null;\n     }\n \n-    public static String getResourcePath(MethodModel method, Map<String, Set<String>> resourceMapping) {\n+    public static String getResourcePath(MethodModel method, Map<String, Set<Type>> resourceMapping) {\n         AnnotationInfo annotations = AnnotationInfo.valueOf(method.getDeclaringType());\n         if (annotations.isAnyAnnotationPresent(method,\n                 GET.class, POST.class, PUT.class, DELETE.class, HEAD.class, OPTIONS.class, PATCH.class)) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 9830eb2a7e..bc438084b8 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -586,12 +624,12 @@ public final class ModelUtils {\n         return null;\n     }\n \n-    public static String getResourcePath(ClassModel clazz, Map<String, Set<String>> resourceMapping) {\n+    public static String getResourcePath(ClassModel clazz, Map<String, Set<Type>> resourceMapping) {\n         // If the class is a resource and contains a mapping\n         AnnotationInfo annotations = AnnotationInfo.valueOf(clazz);\n         if (annotations.isAnnotationPresent(Path.class)) {\n-            for (Map.Entry<String, Set<String>> entry : resourceMapping.entrySet()) {\n-                if (entry.getValue() != null && entry.getValue().contains(clazz.getName())) {\n+            for (Map.Entry<String, Set<Type>> entry : resourceMapping.entrySet()) {\n+                if (entry.getValue() != null && entry.getValue().contains(clazz)) {\n                     return normaliseUrl(entry.getKey() + \"/\" + annotations.getAnnotationValue(Path.class));\n                 }\n             }\n", "next_change": {"commit": "8d65b9ebcbfd989d06862e1661e10d5385695482", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex bc438084b8..995c1ec8be 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -600,57 +598,6 @@ public final class ModelUtils {\n         }\n     }\n \n-    public static org.eclipse.microprofile.openapi.models.Operation getOperation(\n-            MethodModel method,\n-            OpenAPI api,\n-            Map<String, Set<Type>> resourceMapping) {\n-        String path = getResourcePath(method, resourceMapping);\n-        if (path != null) {\n-            PathItem pathItem = api.getPaths().getPathItem(path);\n-            if (pathItem != null) {\n-                PathItem.HttpMethod httpMethod = getHttpMethod(method);\n-                return pathItem.getOperations().get(httpMethod);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static String getResourcePath(Type declaration, Map<String, Set<Type>> resourceMapping) {\n-        if (declaration instanceof MethodModel) {\n-            return getResourcePath((MethodModel) declaration, resourceMapping);\n-        } else if (declaration instanceof ClassModel) {\n-            return getResourcePath((ClassModel) declaration, resourceMapping);\n-        }\n-        return null;\n-    }\n-\n-    public static String getResourcePath(ClassModel clazz, Map<String, Set<Type>> resourceMapping) {\n-        // If the class is a resource and contains a mapping\n-        AnnotationInfo annotations = AnnotationInfo.valueOf(clazz);\n-        if (annotations.isAnnotationPresent(Path.class)) {\n-            for (Map.Entry<String, Set<Type>> entry : resourceMapping.entrySet()) {\n-                if (entry.getValue() != null && entry.getValue().contains(clazz)) {\n-                    return normaliseUrl(entry.getKey() + \"/\" + annotations.getAnnotationValue(Path.class));\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static String getResourcePath(MethodModel method, Map<String, Set<Type>> resourceMapping) {\n-        AnnotationInfo annotations = AnnotationInfo.valueOf(method.getDeclaringType());\n-        if (annotations.isAnyAnnotationPresent(method,\n-                GET.class, POST.class, PUT.class, DELETE.class, HEAD.class, OPTIONS.class, PATCH.class)) {\n-            if (annotations.isAnnotationPresent(Path.class, method)) {\n-                // If the method is a valid resource\n-                return normaliseUrl(getResourcePath(method.getDeclaringType(), resourceMapping) + \"/\"\n-                        + annotations.getAnnotationValue(Path.class, method));\n-            }\n-            return normaliseUrl(getResourcePath(method.getDeclaringType(), resourceMapping));\n-        }\n-        return null;\n-    }\n-\n     public static String getSimpleName(String fqn) {\n         String simpleName = fqn.substring(fqn.lastIndexOf('.') + 1);\n         return simpleName.substring(simpleName.lastIndexOf('$') + 1);\n", "next_change": {"commit": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 995c1ec8be..5cd30d8a46 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -602,4 +634,18 @@ public final class ModelUtils {\n         String simpleName = fqn.substring(fqn.lastIndexOf('.') + 1);\n         return simpleName.substring(simpleName.lastIndexOf('$') + 1);\n     }\n+\n+    public static <K, V> Map<K, V> readOnlyView(Map<K, V> map) {\n+        if (map == null) {\n+            map = new HashMap<>();\n+        }\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n+    public static <T> List<T> readOnlyView(List<T> list) {\n+        if (list == null) {\n+            return null;\n+        }\n+        return Collections.unmodifiableList(list);\n+    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 5cd30d8a46..4bd2ba365a 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -648,4 +650,37 @@ public final class ModelUtils {\n         }\n         return Collections.unmodifiableList(list);\n     }\n+\n+    public static <T> List<T> createList() {\n+        return new ArrayList<>();\n+    }\n+\n+    public static <T> List<T> createList(Collection<? extends T> items) {\n+        if (items == null) {\n+            return null;\n+        }\n+        return new ArrayList<>(items);\n+    }\n+\n+    public static <K, V> Map<K, V> createMap() {\n+        return new LinkedHashMap<>();\n+    }\n+\n+    public static <K, V> Map<K, V> createMap(Map<? extends K, ? extends V> items) {\n+        if (items == null) {\n+            return null;\n+        }\n+        return new LinkedHashMap<>(items);\n+    }\n+\n+    public static <K, V> Map<K, V> createOrderedMap() {\n+        return new TreeMap<>();\n+    }\n+\n+    public static <K, V> Map<K, V> createOrderedMap(Map<? extends K, ? extends V> items) {\n+        if (items == null) {\n+            return null;\n+        }\n+        return new TreeMap<>(items);\n+    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "abdcf44f6fbe89ab3ec08422fd68b34790c53339", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 4bd2ba365a..bd0862da7f 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -683,4 +771,14 @@ public final class ModelUtils {\n         }\n         return new TreeMap<>(items);\n     }\n+\n+    public static Map<String, Set<String>> buildEndpoints(Map<String, Set<String>> original, String contextRoot, Set<String> paths) {\n+        if (original == null || original.isEmpty()) {\n+            original = createOrderedMap();\n+        }\n+        if (!original.containsKey(contextRoot)) {\n+            original.put(contextRoot, paths);\n+        }\n+        return original;\n+    }\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 9830eb2a7e..bc438084b8 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -599,7 +637,7 @@ public final class ModelUtils {\n         return null;\n     }\n \n-    public static String getResourcePath(MethodModel method, Map<String, Set<String>> resourceMapping) {\n+    public static String getResourcePath(MethodModel method, Map<String, Set<Type>> resourceMapping) {\n         AnnotationInfo annotations = AnnotationInfo.valueOf(method.getDeclaringType());\n         if (annotations.isAnyAnnotationPresent(method,\n                 GET.class, POST.class, PUT.class, DELETE.class, HEAD.class, OPTIONS.class, PATCH.class)) {\n", "next_change": {"commit": "8d65b9ebcbfd989d06862e1661e10d5385695482", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex bc438084b8..995c1ec8be 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -600,57 +598,6 @@ public final class ModelUtils {\n         }\n     }\n \n-    public static org.eclipse.microprofile.openapi.models.Operation getOperation(\n-            MethodModel method,\n-            OpenAPI api,\n-            Map<String, Set<Type>> resourceMapping) {\n-        String path = getResourcePath(method, resourceMapping);\n-        if (path != null) {\n-            PathItem pathItem = api.getPaths().getPathItem(path);\n-            if (pathItem != null) {\n-                PathItem.HttpMethod httpMethod = getHttpMethod(method);\n-                return pathItem.getOperations().get(httpMethod);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static String getResourcePath(Type declaration, Map<String, Set<Type>> resourceMapping) {\n-        if (declaration instanceof MethodModel) {\n-            return getResourcePath((MethodModel) declaration, resourceMapping);\n-        } else if (declaration instanceof ClassModel) {\n-            return getResourcePath((ClassModel) declaration, resourceMapping);\n-        }\n-        return null;\n-    }\n-\n-    public static String getResourcePath(ClassModel clazz, Map<String, Set<Type>> resourceMapping) {\n-        // If the class is a resource and contains a mapping\n-        AnnotationInfo annotations = AnnotationInfo.valueOf(clazz);\n-        if (annotations.isAnnotationPresent(Path.class)) {\n-            for (Map.Entry<String, Set<Type>> entry : resourceMapping.entrySet()) {\n-                if (entry.getValue() != null && entry.getValue().contains(clazz)) {\n-                    return normaliseUrl(entry.getKey() + \"/\" + annotations.getAnnotationValue(Path.class));\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static String getResourcePath(MethodModel method, Map<String, Set<Type>> resourceMapping) {\n-        AnnotationInfo annotations = AnnotationInfo.valueOf(method.getDeclaringType());\n-        if (annotations.isAnyAnnotationPresent(method,\n-                GET.class, POST.class, PUT.class, DELETE.class, HEAD.class, OPTIONS.class, PATCH.class)) {\n-            if (annotations.isAnnotationPresent(Path.class, method)) {\n-                // If the method is a valid resource\n-                return normaliseUrl(getResourcePath(method.getDeclaringType(), resourceMapping) + \"/\"\n-                        + annotations.getAnnotationValue(Path.class, method));\n-            }\n-            return normaliseUrl(getResourcePath(method.getDeclaringType(), resourceMapping));\n-        }\n-        return null;\n-    }\n-\n     public static String getSimpleName(String fqn) {\n         String simpleName = fqn.substring(fqn.lastIndexOf('.') + 1);\n         return simpleName.substring(simpleName.lastIndexOf('$') + 1);\n", "next_change": {"commit": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 995c1ec8be..5cd30d8a46 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -602,4 +634,18 @@ public final class ModelUtils {\n         String simpleName = fqn.substring(fqn.lastIndexOf('.') + 1);\n         return simpleName.substring(simpleName.lastIndexOf('$') + 1);\n     }\n+\n+    public static <K, V> Map<K, V> readOnlyView(Map<K, V> map) {\n+        if (map == null) {\n+            map = new HashMap<>();\n+        }\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n+    public static <T> List<T> readOnlyView(List<T> list) {\n+        if (list == null) {\n+            return null;\n+        }\n+        return Collections.unmodifiableList(list);\n+    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 5cd30d8a46..4bd2ba365a 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -648,4 +650,37 @@ public final class ModelUtils {\n         }\n         return Collections.unmodifiableList(list);\n     }\n+\n+    public static <T> List<T> createList() {\n+        return new ArrayList<>();\n+    }\n+\n+    public static <T> List<T> createList(Collection<? extends T> items) {\n+        if (items == null) {\n+            return null;\n+        }\n+        return new ArrayList<>(items);\n+    }\n+\n+    public static <K, V> Map<K, V> createMap() {\n+        return new LinkedHashMap<>();\n+    }\n+\n+    public static <K, V> Map<K, V> createMap(Map<? extends K, ? extends V> items) {\n+        if (items == null) {\n+            return null;\n+        }\n+        return new LinkedHashMap<>(items);\n+    }\n+\n+    public static <K, V> Map<K, V> createOrderedMap() {\n+        return new TreeMap<>();\n+    }\n+\n+    public static <K, V> Map<K, V> createOrderedMap(Map<? extends K, ? extends V> items) {\n+        if (items == null) {\n+            return null;\n+        }\n+        return new TreeMap<>(items);\n+    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "abdcf44f6fbe89ab3ec08422fd68b34790c53339", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\nindex 4bd2ba365a..bd0862da7f 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/util/ModelUtils.java\n", "chunk": "@@ -683,4 +771,14 @@ public final class ModelUtils {\n         }\n         return new TreeMap<>(items);\n     }\n+\n+    public static Map<String, Set<String>> buildEndpoints(Map<String, Set<String>> original, String contextRoot, Set<String> paths) {\n+        if (original == null || original.isEmpty()) {\n+            original = createOrderedMap();\n+        }\n+        if (!original.containsKey(contextRoot)) {\n+            original.put(contextRoot, paths);\n+        }\n+        return original;\n+    }\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "8d65b9ebcbfd989d06862e1661e10d5385695482", "committedDate": "2020-07-09 19:48:40 +0530", "message": "FISH-162 OpenAPI Class Data Processing"}, {"oid": "1d7d3b24900a418bb95e30041a9720a973e3b401", "committedDate": "2020-08-12 16:09:29 +0530", "message": "FISH-48 OpenAPI document failed to use Generics within @Schema"}, {"oid": "ea20059847aca5466107e1433ce0032247951fa4", "committedDate": "2020-09-04 14:46:18 +0530", "message": "FISH-391 store AnnotationInfo in OpenAPIContext"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "7976a0757acb93d9556d71da0569806da75d682b", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix OpenAPI Collection set methods"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Fix Collection methods"}, {"oid": "4a820594f1a460f839acd00c54db2dab0c5675b4", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Add Config Property Schema Processing"}, {"oid": "f248f137b8913de0d6a1d9c80fb62ba224b05887", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Simplify extractAnnotations Methods"}, {"oid": "b2c358f9405384aacd64bc49443dbd73c751963c", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Parse Exception Mappers"}, {"oid": "01567d775d23b896c652593f7a49ab71bd4a7d63", "committedDate": "2020-12-21 13:51:54 +0000", "message": "FISH-663 MP OpenAPI 2.0 @APIResponseSchema support"}, {"oid": "936002c64b8e23e7e5107f93eba8526c6394209d", "committedDate": "2020-12-21 13:54:07 +0000", "message": "FISH-663 MP OpenAPI use method schema annotations"}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "3b0086a8ebd1bdf984a1c295862e352fc4249a0d", "committedDate": "2021-06-09 13:19:10 +0530", "message": "FISH-1321 Copyright year update"}, {"oid": "abdcf44f6fbe89ab3ec08422fd68b34790c53339", "committedDate": "2022-08-01 08:05:48 -0300", "message": "FISH-6298 setting/merging endpoints"}, {"oid": "cb5c2054c3e4e788dee0c47c0dc571b40946d7c0", "committedDate": "2023-01-27 18:21:01 +0100", "message": "FISH-6768 fix call of all deprecated methods"}, {"oid": "75d3427437138cf6dcb33d6833e91bb7f7fccb69", "committedDate": "2023-02-16 13:49:52 +0100", "message": "FISH-6975 refactoring: wrap long lines caused by newInstance exceptions"}, {"oid": "33644f6a11dd4279b2dd2ac377640c02e357f6fb", "committedDate": "2023-02-22 15:25:38 +0100", "message": "FISH-6769 fix variable name"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NzY0OQ==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448967649", "body": "Should use the other constructor to set the fields.", "bodyText": "Should use the other constructor to set the fields.", "bodyHTML": "<p dir=\"auto\">Should use the other constructor to set the fields.</p>", "author": "jbee", "createdAt": "2020-07-02T12:33:54Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -141,29 +114,65 @@\n     /**\n      * A list of all classes in the given application.\n      */\n-    private final Set<Class<?>> classes;\n+    private final Set<Type> types;\n \n     /**\n+     * A list of allowed classes for scanning\n+     */\n+    private final Set<Type> allowedTypes;\n+\n+    private final ClassLoader appClassLoader;\n+\n+    public ApplicationProcessor(ApplicationInfo appInfo) {\n+        this.types = new HashSet<>(appInfo.getTypes().getAllTypes());", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "461d3c20ff3640a99211272af53195dd5e401721", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex 644535a2c3..b712bd4e74 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n", "chunk": "@@ -124,9 +124,7 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n     private final ClassLoader appClassLoader;\n \n     public ApplicationProcessor(ApplicationInfo appInfo) {\n-        this.types = new HashSet<>(appInfo.getTypes().getAllTypes());\n-        this.allowedTypes = filterTypes(appInfo);\n-        this.appClassLoader = appInfo.getAppClassLoader();\n+        this(new HashSet<>(appInfo.getTypes().getAllTypes()), filterTypes(appInfo), appInfo.getAppClassLoader());\n     }\n \n     /**\n", "next_change": {"commit": "208365812ca5db89d15166db35b3e2a3f59bbb13", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex b712bd4e74..24fe16d955 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n", "chunk": "@@ -124,15 +125,15 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n     private final ClassLoader appClassLoader;\n \n     public ApplicationProcessor(ApplicationInfo appInfo) {\n-        this(new HashSet<>(appInfo.getTypes().getAllTypes()), filterTypes(appInfo), appInfo.getAppClassLoader());\n+        this(appInfo.getTypes(), filterTypes(appInfo), appInfo.getAppClassLoader());\n     }\n \n     /**\n      * @param types parsed application classes\n      * @param appClassLoader the class loader for the application.\n      */\n-    public ApplicationProcessor(Set<Type> types, Set<Type> allowedTypes, ClassLoader appClassLoader) {\n-        this.types = types;\n+    public ApplicationProcessor(Types allTypes, Set<Type> allowedTypes, ClassLoader appClassLoader) {\n+        this.allTypes = allTypes;\n         this.allowedTypes = allowedTypes;\n         this.appClassLoader = appClassLoader;\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex 644535a2c3..24fe16d955 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n", "chunk": "@@ -124,17 +125,15 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n     private final ClassLoader appClassLoader;\n \n     public ApplicationProcessor(ApplicationInfo appInfo) {\n-        this.types = new HashSet<>(appInfo.getTypes().getAllTypes());\n-        this.allowedTypes = filterTypes(appInfo);\n-        this.appClassLoader = appInfo.getAppClassLoader();\n+        this(appInfo.getTypes(), filterTypes(appInfo), appInfo.getAppClassLoader());\n     }\n \n     /**\n      * @param types parsed application classes\n      * @param appClassLoader the class loader for the application.\n      */\n-    public ApplicationProcessor(Set<Type> types, Set<Type> allowedTypes, ClassLoader appClassLoader) {\n-        this.types = types;\n+    public ApplicationProcessor(Types allTypes, Set<Type> allowedTypes, ClassLoader appClassLoader) {\n+        this.allTypes = allTypes;\n         this.allowedTypes = allowedTypes;\n         this.appClassLoader = appClassLoader;\n     }\n", "next_change": {"commit": "d171596b014b09c61d40798d9381b0a29d1e1b60", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex 24fe16d955..3531895fe9 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n", "chunk": "@@ -138,23 +137,6 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n         this.appClassLoader = appClassLoader;\n     }\n \n-    /**\n-     * @return a list of all classes in the archive.\n-     */\n-    private static Set<Type> filterTypes(ApplicationInfo appInfo) {\n-        ReadableArchive archive = appInfo.getSource();\n-        return Collections.list(archive.entries()).stream()\n-                // Only use the classes\n-                .filter(clazz -> clazz.endsWith(\".class\"))\n-                // Remove the WEB-INF/classes and return the proper class name format\n-                .map(clazz -> clazz.replaceAll(\"WEB-INF/classes/\", \"\").replace(\"/\", \".\").replace(\".class\", \"\"))\n-                // Fetch class type\n-                .map(clazz -> appInfo.getTypes().getBy(clazz))\n-                // Don't return null classes\n-                .filter(Objects::nonNull)\n-                .collect(toSet());\n-    }\n-\n     @Override\n     public OpenAPI process(OpenAPI api, OpenApiConfiguration config) {\n         if (config == null || !config.getScanDisable()) {\n", "next_change": {"commit": "374c590346c7a991e070905273a49c1559102a28", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex 3531895fe9..ec4103aa69 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n", "chunk": "@@ -140,7 +145,7 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n     @Override\n     public OpenAPI process(OpenAPI api, OpenApiConfiguration config) {\n         if (config == null || !config.getScanDisable()) {\n-            ApiWalker apiWalker = new OpenApiWalker(\n+            this.apiWalker = new OpenApiWalker(\n                     api,\n                     allTypes,\n                     config == null ? allowedTypes : config.getValidClasses(allowedTypes),\n", "next_change": {"commit": "01567d775d23b896c652593f7a49ab71bd4a7d63", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex ec4103aa69..1f985ec722 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n", "chunk": "@@ -145,7 +154,7 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n     @Override\n     public OpenAPI process(OpenAPI api, OpenApiConfiguration config) {\n         if (config == null || !config.getScanDisable()) {\n-            this.apiWalker = new OpenApiWalker(\n+            this.apiWalker = new OpenApiWalker<>(\n                     api,\n                     allTypes,\n                     config == null ? allowedTypes : config.getValidClasses(allowedTypes),\n", "next_change": {"commit": "b0ab396e168452516474ca0aac6ac377e0e4fa54", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex 1f985ec722..a16af8e3e5 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n", "chunk": "@@ -158,6 +156,7 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n                     api,\n                     allTypes,\n                     config == null ? allowedTypes : config.getValidClasses(allowedTypes),\n+                    allowedResourceTypes,\n                     appClassLoader\n             );\n             apiWalker.accept(this);\n", "next_change": {"commit": "992da131b28ede0b3bb686189ce40d74c6ea7d32", "changed_code": [{"header": "diff --git a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\nindex a16af8e3e5..ab73ea2061 100644\n--- a/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n+++ b/appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java\n", "chunk": "@@ -156,7 +156,6 @@ public class ApplicationProcessor implements OASProcessor, ApiVisitor {\n                     api,\n                     allTypes,\n                     config == null ? allowedTypes : config.getValidClasses(allowedTypes),\n-                    allowedResourceTypes,\n                     appClassLoader\n             );\n             apiWalker.accept(this);\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "24ab29b87774bda5d3397a62461b4064626f1a1b", "committedDate": "2020-07-06 16:20:37 +0530", "message": "FISH-56 OpenAPI document doesn't use @Schema when class is in jar dependency of the project"}, {"oid": "d171596b014b09c61d40798d9381b0a29d1e1b60", "committedDate": "2020-07-07 13:50:21 +0530", "message": "FISH-128 OpenAPI does not include APIs from jars within a war (other jars)"}, {"oid": "374c590346c7a991e070905273a49c1559102a28", "committedDate": "2020-07-07 14:25:55 +0530", "message": "Merge branch 'master' into FISH-128"}, {"oid": "8d65b9ebcbfd989d06862e1661e10d5385695482", "committedDate": "2020-07-09 19:48:40 +0530", "message": "FISH-162 OpenAPI Class Data Processing"}, {"oid": "0e198a35a6da401c09117e601cb5bb3d12edb119", "committedDate": "2020-07-09 20:45:09 +0530", "message": "FISH-162 PR Review changes"}, {"oid": "1d7d3b24900a418bb95e30041a9720a973e3b401", "committedDate": "2020-08-12 16:09:29 +0530", "message": "FISH-48 OpenAPI document failed to use Generics within @Schema"}, {"oid": "ea20059847aca5466107e1433ce0032247951fa4", "committedDate": "2020-09-04 14:46:18 +0530", "message": "FISH-391 store AnnotationInfo in OpenAPIContext"}, {"oid": "604bcaa440eb53f87158a0dbb0abec4d75abcccb", "committedDate": "2020-09-09 16:06:41 +0100", "message": "FISH-298 Utilise @Schema in openapi when pointing to another class"}, {"oid": "64beea7716b4f73ed61df1fe94a9bf1758e4ead4", "committedDate": "2020-09-10 09:48:29 +0100", "message": "FISH-99 FISH-298 Cleanup of code"}, {"oid": "bdf639f954d4f31e860cc5849885df08a9c4507a", "committedDate": "2020-11-23 17:35:32 +0000", "message": "FISH-663 OpenAPI 2.0-RC3 Upgrade"}, {"oid": "e4b28d7181b1d1a74b65fb0c2ceff1f147d594df", "committedDate": "2020-11-27 12:54:53 +0000", "message": "FISH-663 Fix Runtime Exceptions"}, {"oid": "0d308540bd1867681467886f5bdbc727ca96fe37", "committedDate": "2020-11-27 12:54:58 +0000", "message": "FISH-663 Merge Schema classes correctly"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "committedDate": "2020-12-16 11:56:03 +0000", "message": "FISH-663 Make OpenAPI Collection Types Immutable"}, {"oid": "71930fee134cd7c95215b2bc5e6f545c05e5f642", "committedDate": "2020-12-16 11:56:07 +0000", "message": "FISH-663 Prevent types being added to references"}, {"oid": "4a820594f1a460f839acd00c54db2dab0c5675b4", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Add Config Property Schema Processing"}, {"oid": "b2c358f9405384aacd64bc49443dbd73c751963c", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Parse Exception Mappers"}, {"oid": "e060d3bdf3b9bc26d516bad433fadb35cb051cfa", "committedDate": "2020-12-16 11:56:08 +0000", "message": "FISH-663 Fix OpenAPI @Parameters parsing"}, {"oid": "01567d775d23b896c652593f7a49ab71bd4a7d63", "committedDate": "2020-12-21 13:51:54 +0000", "message": "FISH-663 MP OpenAPI 2.0 @APIResponseSchema support"}, {"oid": "fca79aee0c41c6754edb037e08d4355318b611fe", "committedDate": "2020-12-21 13:54:03 +0000", "message": "FISH-663 MP OpenAPI add required properties"}, {"oid": "936002c64b8e23e7e5107f93eba8526c6394209d", "committedDate": "2020-12-21 13:54:07 +0000", "message": "FISH-663 MP OpenAPI use method schema annotations"}, {"oid": "c96f44cfb36f6dcc80d4ecc37b20b78ceeb7b301", "committedDate": "2020-12-21 13:54:07 +0000", "message": "FISH-663 MP OpenAPI 2.0 @RequestBodySchema support"}, {"oid": "cb78882409eb173aefd858cc42e1eae6aeda90eb", "committedDate": "2020-12-21 17:23:49 +0000", "message": "FISH-760 Fix OpenAPI Enum parsing"}, {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c", "committedDate": "2020-12-22 12:57:16 +0000", "message": "FISH-663 OpenAPI Fix exception mapping order"}, {"oid": "0c190743530dc587873b1bc8e4873b22d91f468e", "committedDate": "2021-03-02 18:07:19 +0000", "message": "Added neccessery nullcheck"}, {"oid": "fd9dd02f2919817993cc615f65aa991cfdb8efcb", "committedDate": "2021-03-08 09:40:41 +0000", "message": "Update License Header"}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "8c23f2a027fd67761759d353458f9dd725898b1d", "committedDate": "2021-04-22 23:15:25 +0530", "message": "FISH-1282 Enable OpenAPI#testMappedException test case"}, {"oid": "e0c842ceb17951423eb5f993cca51c7984bb7dce", "committedDate": "2021-10-08 15:15:46 +0100", "message": "Merge pull request #5331 from aubi/FISH-1204"}, {"oid": "d83e56804319299dd5e23a6a9fd9288408fede98", "committedDate": "2021-10-08 15:17:43 +0100", "message": "Merge pull request #5335 from aubi/FISH-1068"}, {"oid": "e56cb68416046c937269a28291c9d47d275516c3", "committedDate": "2021-10-08 16:10:59 +0100", "message": "Merge pull request #5342 from jGauravGupta/FISH-1312"}, {"oid": "e410ebbbb5de269339a217593995cb92c226f0e4", "committedDate": "2021-12-22 02:21:16 +0530", "message": "FISH-5866 @SchemaProperty annotation overrides implementation class attributes."}, {"oid": "6d70f1304bcf68b5bd48134168ab6b20a6aa3944", "committedDate": "2022-01-19 17:55:02 +0000", "message": "Merge branch 'FISH-5672' of https://github.com/JamesHillyard/Payara into FISH-5672"}, {"oid": "fadcde0e737b7046a15403f5bccd47fcedce54f0", "committedDate": "2022-11-16 13:44:46 -0300", "message": "FISH-5778 : handling duplicated field when annotated with @Schema"}, {"oid": "a20002aaf97490273acf256d1c8e65cae3680ece", "committedDate": "2023-02-02 15:59:31 -0300", "message": "FISH-6766 : Handling annotation SecurityRequirementsSet"}, {"oid": "7bae5ec6cb66aac5f275ce9ab3e7da381fe5a292", "committedDate": "2023-02-07 11:03:59 -0300", "message": "FISH-6767 : verifying hidden property in param"}, {"oid": "eecb2af2b70261227bdc05df053e03ec326f523e", "committedDate": "2023-02-07 12:27:01 -0300", "message": "FISH-6767 : application/json as default media"}, {"oid": "d1e165111fc4bad222c5485093006d1817f10021", "committedDate": "2023-02-07 18:35:23 -0300", "message": "FISH-6767 : verifying hidden property in addParameter method"}, {"oid": "ddba21f42a23ff9b0bea941647d932c46ed9b9b1", "committedDate": "2023-02-08 13:04:33 -0300", "message": "FISH-6767 : string replaced by class"}, {"oid": "3eb34d32574679c90b4172eb6de541201fe9790e", "committedDate": "2023-02-09 12:26:32 -0300", "message": "FISH-6767 : tck test fixed"}, {"oid": "e575b9bdd01152aeedae0add0e18caafc757fef9", "committedDate": "2023-02-20 17:49:52 +0100", "message": "FISH-6769 wip - adding partial support for extensions in openapi"}, {"oid": "56675d187b00aa05112bd42e683dd3b4b0d35203", "committedDate": "2023-02-20 17:49:53 +0100", "message": "FISH-6769 wip - extensions in openapi, on APIResponses level"}, {"oid": "988a2ddd91cd3a76abbb1f5732521f78e56a277d", "committedDate": "2023-02-20 17:49:55 +0100", "message": "FISH-6769 add support for extensions to openapi Content annotation"}, {"oid": "599a6075dffb7805a9331d809bf30574d9f112ff", "committedDate": "2023-02-22 15:24:31 +0100", "message": "FISH-6769 optimize logging, use functional syntax"}, {"oid": "316b3b6acf2a2b7fd2097272afced0093866cc1a", "committedDate": "2023-03-17 11:13:17 +0000", "message": "Merge pull request #6223 from jGauravGupta/FISH-7118"}, {"oid": "b0ab396e168452516474ca0aac6ac377e0e4fa54", "committedDate": "2023-04-11 19:35:16 +0200", "message": "FISH-6980 scan ear's lib/*.jar for openapi"}, {"oid": "992da131b28ede0b3bb686189ce40d74c6ea7d32", "committedDate": "2023-04-12 15:12:16 +0200", "message": "FISH-6980 include scanning endpoints of libraries, not only schemas"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3Mzk2NQ==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448973965", "body": "This should be lazily done on demand. If OpenAPI is requesting the types we still could compute this data from the sources used here or am I missing something?", "bodyText": "This should be lazily done on demand. If OpenAPI is requesting the types we still could compute this data from the sources used here or am I missing something?", "bodyHTML": "<p dir=\"auto\">This should be lazily done on demand. If OpenAPI is requesting the types we still could compute this data from the sources used here or am I missing something?</p>", "author": "jbee", "createdAt": "2020-07-02T12:45:08Z", "path": "nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java", "diffHunk": "@@ -548,6 +548,7 @@ public void actOn(Logger logger) {\n             // first, then register the real one\n             appRegistry.remove(appName);\n             appInfo.setIsJavaEEApp(sortedEngineInfos);\n+            appInfo.setTypes(context.getTransientAppMetaData(Types.class.getName(), Types.class));", "originalCommit": "3a8286944293ce6336db578f05e8a5b58a2ef4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4NDQxOA==", "url": "https://github.com/payara/Payara/pull/4758#discussion_r448984418", "bodyText": "org.glassfish.hk2.classmodel.reflect.Types data was always created and loaded during application deployment and removed after deployments completed.\nNow Types info is stored in the ApplicationInfo for further processing by other modules like OpneAPI.", "author": "jGauravGupta", "createdAt": "2020-07-02T13:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3Mzk2NQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "6c7908c6c4c543ffe800933b93ab0f4ab2a530d9", "changed_code": [{"header": "diff --git a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java\nindex a94ce943c7..e63b54042f 100644\n--- a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java\n+++ b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java\n", "chunk": "@@ -548,7 +550,7 @@ public class ApplicationLifecycle implements Deployment, PostConstruct {\n             // first, then register the real one\n             appRegistry.remove(appName);\n             appInfo.setIsJavaEEApp(sortedEngineInfos);\n-            appInfo.setTypes(context.getTransientAppMetaData(Types.class.getName(), Types.class));\n+            appInfo.addTransientAppMetaData(Types.class.getName(), getDeployableTypes(context));\n             appRegistry.add(appName, appInfo);\n \n             notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE, context);\n", "next_change": {"commit": "66e9aa9c944c83fc6c8bdd65eecea8033bbe1baf", "changed_code": [{"header": "diff --git a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java\nindex e63b54042f..ffc5c93a64 100644\n--- a/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java\n+++ b/nucleus/core/kernel/src/main/java/com/sun/enterprise/v3/server/ApplicationLifecycle.java\n", "chunk": "@@ -550,7 +550,6 @@ public class ApplicationLifecycle implements Deployment, PostConstruct {\n             // first, then register the real one\n             appRegistry.remove(appName);\n             appInfo.setIsJavaEEApp(sortedEngineInfos);\n-            appInfo.addTransientAppMetaData(Types.class.getName(), getDeployableTypes(context));\n             appRegistry.add(appName, appInfo);\n \n             notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE, context);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "416ee1ee535bef0a7eda2f40f803c32d120ce241", "message": "Merge commit", "committedDate": null}, {"oid": "41fea56f9d9fe7d1423b428a293d4d31d3afb81b", "committedDate": "2020-08-07 09:07:38 +0100", "message": "FISH-68 Support MP Config properties in DataSourceDefinitions"}, {"oid": "1d7d3b24900a418bb95e30041a9720a973e3b401", "committedDate": "2020-08-12 16:09:29 +0530", "message": "FISH-48 OpenAPI document failed to use Generics within @Schema"}, {"oid": "3f0577959e59b102e9616eb1763b09dd9597da8f", "committedDate": "2020-08-21 15:47:52 +0530", "message": "Merge pull request #4832 from jGauravGupta/FISH-48"}, {"oid": "fa51601d77f6f48a225c61611fba5210ecca9187", "committedDate": "2020-09-02 11:24:57 +0100", "message": "FISH-407 List of enabled application targets is not always correct"}, {"oid": "6c7908c6c4c543ffe800933b93ab0f4ab2a530d9", "committedDate": "2020-09-04 14:46:18 +0530", "message": "FISH-391 Discard HK2 Types after OpenAPI document creation"}, {"oid": "7bf03cf10a850130b6b39b98af8993502df43ab1", "committedDate": "2020-09-04 14:46:19 +0530", "message": "FISH-391 Lazily initialize openapi document"}, {"oid": "66e9aa9c944c83fc6c8bdd65eecea8033bbe1baf", "committedDate": "2020-09-04 14:46:19 +0530", "message": "FISH-391 Remove types from transient metadata of application"}, {"oid": "ee97386ee043f75a1a9544e6685f2f82655c29fc", "committedDate": "2020-09-05 15:26:10 +0530", "message": "Merge pull request #4868 from MeroRai/FISH-407-final"}, {"oid": "bb96e1d936a9a99fed92f6190048d063e454a7ab", "committedDate": "2021-01-25 20:53:07 -0600", "message": "[FISH-1018] Out of memory redeploy leaks (#5081)"}, {"oid": "dbba8a86c0f535c4a1e916714b4834cfd1121733", "committedDate": "2021-04-08 10:55:52 +0530", "message": "FISH-1280 Jakarta EE9: Compile Payara 6 artifact with Jakarta EE namespace"}, {"oid": "3b0086a8ebd1bdf984a1c295862e352fc4249a0d", "committedDate": "2021-06-09 13:19:10 +0530", "message": "FISH-1321 Copyright year update"}, {"oid": "ff38fbfa063a0ee827f93ea2e8d0505f771af5a4", "committedDate": "2021-10-11 11:11:07 +0100", "message": "Merge pull request #5394 from jGauravGupta/FISH-5687-2"}, {"oid": "b7ad3fce9c361960d22e74042d0761c99357a313", "committedDate": "2022-05-31 23:18:52 -0500", "message": "Merge branch 'Payara6' into payara6-cdi-4.0-backup"}, {"oid": "40824db15f82b81e1a6b4e46e3deffb6a2160a36", "committedDate": "2022-06-10 12:19:29 -0500", "message": "FISH-6081: trying fix for ext-libs from manifest"}, {"oid": "482e17235380c506661d173a4c6a7a4f6a9572eb", "committedDate": "2022-06-10 13:40:13 -0500", "message": "FISH-6081: missing cycle to get libs"}, {"oid": "3279d54abc9695d22d475505278d633446f888c6", "committedDate": "2022-06-14 17:22:25 -0500", "message": "FISH-6081: adding formatting and changes to improve manage of inputstream"}, {"oid": "eb7c790bb2cf6b9be33b8e84f59c21e2110254d3", "committedDate": "2022-09-20 10:37:47 +0200", "message": "FISH-6501 initialize listening services before application startup"}]}, {"oid": "461d3c20ff3640a99211272af53195dd5e401721", "url": "https://github.com/payara/Payara/commit/461d3c20ff3640a99211272af53195dd5e401721", "message": "FISH-161 PR review changes", "committedDate": "2020-07-02T13:43:34Z", "type": "commit"}, {"oid": "b95e214d625edd981bd1573a36a1e647f3103f2f", "url": "https://github.com/payara/Payara/commit/b95e214d625edd981bd1573a36a1e647f3103f2f", "message": "PR review changes - extractAnnotations util", "committedDate": "2020-07-03T05:09:21Z", "type": "commit"}, {"oid": "208365812ca5db89d15166db35b3e2a3f59bbb13", "url": "https://github.com/payara/Payara/commit/208365812ca5db89d15166db35b3e2a3f59bbb13", "message": "FISH-161 PR review changes - typed resource mapping", "committedDate": "2020-07-03T06:00:16Z", "type": "commit"}, {"oid": "96dda2aa6a1903768f99e7f747e00655bf5788df", "url": "https://github.com/payara/Payara/commit/96dda2aa6a1903768f99e7f747e00655bf5788df", "message": "FISH-161 Upgrade HK2 to 2.6.1.payara-p2\n\nSigned-off-by: Gaurav Gupta <gaurav.gupta@payara.fish>", "committedDate": "2020-07-06T09:41:28Z", "type": "commit"}]}