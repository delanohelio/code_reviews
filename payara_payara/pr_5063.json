{"pr_number": 5063, "pr_title": "[QACI-410] - Classloader Leak Tracking", "pr_author": "cubastanley", "pr_createdAt": "2020-12-18T17:14:24Z", "pr_url": "https://github.com/payara/Payara/pull/5063", "timeline": [{"oid": "2a5c9453a0060c363fb662482a0ee0942c352276", "url": "https://github.com/payara/Payara/commit/2a5c9453a0060c363fb662482a0ee0942c352276", "message": "Add static instance count increment to WebappClassLoader", "committedDate": "2020-12-14T16:23:32Z", "type": "commit"}, {"oid": "309f331ecd0c63fbff441de27fef70b382e9c650", "url": "https://github.com/payara/Payara/commit/309f331ecd0c63fbff441de27fef70b382e9c650", "message": "Update Year", "committedDate": "2020-12-15T10:44:43Z", "type": "commit"}, {"oid": "ae0526a3da9e6e11c8f0b48036c25b25b4e6c2df", "url": "https://github.com/payara/Payara/commit/ae0526a3da9e6e11c8f0b48036c25b25b4e6c2df", "message": "Create access api", "committedDate": "2020-12-17T12:09:10Z", "type": "commit"}, {"oid": "b1801435a551e484160e8324b772790cdbb95e6a", "url": "https://github.com/payara/Payara/commit/b1801435a551e484160e8324b772790cdbb95e6a", "message": "Store previous instance count", "committedDate": "2020-12-17T15:21:44Z", "type": "commit"}, {"oid": "990420cda2b37bbe8a4e9e00a6ecf8fd544d7db4", "url": "https://github.com/payara/Payara/commit/990420cda2b37bbe8a4e9e00a6ecf8fd544d7db4", "message": "Introduce initial classloader leak test", "committedDate": "2020-12-17T15:22:14Z", "type": "commit"}, {"oid": "0cbaf3fc9c09b789b9c1444470a6b8151bcc5105", "url": "https://github.com/payara/Payara/commit/0cbaf3fc9c09b789b9c1444470a6b8151bcc5105", "message": "Final value getter", "committedDate": "2020-12-18T16:50:13Z", "type": "commit"}, {"oid": "2d4ced8d6a2cb025bb3818dc79ed01af27c19ef4", "url": "https://github.com/payara/Payara/commit/2d4ced8d6a2cb025bb3818dc79ed01af27c19ef4", "message": "Remove Samples Intergrations", "committedDate": "2020-12-18T16:53:33Z", "type": "commit"}, {"oid": "824ee780de3fe07c4d7259124f6cbd3869b0b272", "url": "https://github.com/payara/Payara/commit/824ee780de3fe07c4d7259124f6cbd3869b0b272", "message": "WebappClassloader Init failures", "committedDate": "2020-12-18T16:53:55Z", "type": "commit"}, {"oid": "e81e7c40026baa8834e7f30cf1a2dd5b19a0a22a", "url": "https://github.com/payara/Payara/commit/e81e7c40026baa8834e7f30cf1a2dd5b19a0a22a", "message": "Remove module from samples", "committedDate": "2020-12-18T16:55:45Z", "type": "commit"}, {"oid": "dcd22959da6183456a38b8a1a2609428e8a34b57", "url": "https://github.com/payara/Payara/commit/dcd22959da6183456a38b8a1a2609428e8a34b57", "message": "POM Formatting", "committedDate": "2020-12-18T17:07:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxOTMxNw==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r546019317", "body": "full Payara copyright", "bodyText": "full Payara copyright", "bodyHTML": "<p dir=\"auto\">full Payara copyright</p>", "author": "lprimak", "createdAt": "2020-12-18T18:41:31Z", "path": "appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*", "originalCommit": "dcd22959da6183456a38b8a1a2609428e8a34b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17fc3412444a9ce2c14fe11db08f5d5b81e13539", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\nindex ff02a10e23..0a94913fc7 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\n", "chunk": "@@ -1,13 +1,47 @@\n /*\n- * To change this license header, choose License Headers in Project Properties.\n- * To change this template file, choose Tools | Templates\n- * and open the template in the editor.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n  */\n package fish.payara.samples.classloaderdata;\n \n /**\n  *\n- * @author cuba\n+ * @author Cuba Stanley\n  */\n public class InstanceCountService {\n     \n", "next_change": {"commit": "6168ccf33f5a3dc07d89e85c28d1b77a37bf338c", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\ndeleted file mode 100644\nindex 0a94913fc7..0000000000\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\n+++ /dev/null\n", "chunk": "@@ -1,59 +0,0 @@\n-/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- *\n- * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n- *\n- * The contents of this file are subject to the terms of either the GNU\n- * General Public License Version 2 only (\"GPL\") or the Common Development\n- * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n- * may not use this file except in compliance with the License.  You can\n- * obtain a copy of the License at\n- * https://github.com/payara/Payara/blob/master/LICENSE.txt\n- * See the License for the specific\n- * language governing permissions and limitations under the License.\n- *\n- * When distributing the software, include this License Header Notice in each\n- * file and include the License file at glassfish/legal/LICENSE.txt.\n- *\n- * GPL Classpath Exception:\n- * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n- * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n- * file that accompanied this code.\n- *\n- * Modifications:\n- * If applicable, add the following below the License Header, with the fields\n- * enclosed by brackets [] replaced by your own identifying information:\n- * \"Portions Copyright [year] [name of copyright owner]\"\n- *\n- * Contributor(s):\n- * If you wish your version of this file to be governed by only the CDDL or\n- * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n- * elects to include this software in this distribution under the [CDDL or GPL\n- * Version 2] license.\"  If you don't indicate a single choice of license, a\n- * recipient has the option to distribute your version of this file under\n- * either the CDDL, the GPL Version 2 or to extend the choice of license to\n- * its licensees as provided above.  However, if you add GPL Version 2 code\n- * and therefore, elected the GPL Version 2 license, then the option applies\n- * only if the new code is made subject to such option by the copyright\n- * holder.\n- */\n-package fish.payara.samples.classloaderdata;\n-\n-/**\n- *\n- * @author Cuba Stanley\n- */\n-public class InstanceCountService {\n-    \n-    private int previousCount = InstanceCountTracker.getPreviousInstanceCount();\n-    private int currentCount = InstanceCountTracker.getInstanceCount();\n-    \n-    public int getCurrentCount() {\n-        return currentCount;\n-    }\n-    \n-    public int getPreviousCount() {\n-        return previousCount;\n-    }\n-    \n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxOTU1Ng==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r546019556", "body": "Not sure this is necessary at all", "bodyText": "Not sure this is necessary at all", "bodyHTML": "<p dir=\"auto\">Not sure this is necessary at all</p>", "author": "lprimak", "createdAt": "2020-12-18T18:42:00Z", "path": "appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package fish.payara.samples.classloaderdata;\n+\n+/**\n+ *\n+ * @author cuba\n+ */\n+public class InstanceCountService {", "originalCommit": "dcd22959da6183456a38b8a1a2609428e8a34b57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NDYwOA==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r547074608", "bodyText": "I still see no point in this class, it does nothing.\nInstanceCountTracker can be used directly.", "author": "lprimak", "createdAt": "2020-12-22T05:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxOTU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "17fc3412444a9ce2c14fe11db08f5d5b81e13539", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\nindex ff02a10e23..0a94913fc7 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\n", "chunk": "@@ -1,13 +1,47 @@\n /*\n- * To change this license header, choose License Headers in Project Properties.\n- * To change this template file, choose Tools | Templates\n- * and open the template in the editor.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n  */\n package fish.payara.samples.classloaderdata;\n \n /**\n  *\n- * @author cuba\n+ * @author Cuba Stanley\n  */\n public class InstanceCountService {\n     \n", "next_change": {"commit": "6168ccf33f5a3dc07d89e85c28d1b77a37bf338c", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\ndeleted file mode 100644\nindex 0a94913fc7..0000000000\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountService.java\n+++ /dev/null\n", "chunk": "@@ -1,59 +0,0 @@\n-/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- *\n- * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n- *\n- * The contents of this file are subject to the terms of either the GNU\n- * General Public License Version 2 only (\"GPL\") or the Common Development\n- * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n- * may not use this file except in compliance with the License.  You can\n- * obtain a copy of the License at\n- * https://github.com/payara/Payara/blob/master/LICENSE.txt\n- * See the License for the specific\n- * language governing permissions and limitations under the License.\n- *\n- * When distributing the software, include this License Header Notice in each\n- * file and include the License file at glassfish/legal/LICENSE.txt.\n- *\n- * GPL Classpath Exception:\n- * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n- * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n- * file that accompanied this code.\n- *\n- * Modifications:\n- * If applicable, add the following below the License Header, with the fields\n- * enclosed by brackets [] replaced by your own identifying information:\n- * \"Portions Copyright [year] [name of copyright owner]\"\n- *\n- * Contributor(s):\n- * If you wish your version of this file to be governed by only the CDDL or\n- * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n- * elects to include this software in this distribution under the [CDDL or GPL\n- * Version 2] license.\"  If you don't indicate a single choice of license, a\n- * recipient has the option to distribute your version of this file under\n- * either the CDDL, the GPL Version 2 or to extend the choice of license to\n- * its licensees as provided above.  However, if you add GPL Version 2 code\n- * and therefore, elected the GPL Version 2 license, then the option applies\n- * only if the new code is made subject to such option by the copyright\n- * holder.\n- */\n-package fish.payara.samples.classloaderdata;\n-\n-/**\n- *\n- * @author Cuba Stanley\n- */\n-public class InstanceCountService {\n-    \n-    private int previousCount = InstanceCountTracker.getPreviousInstanceCount();\n-    private int currentCount = InstanceCountTracker.getInstanceCount();\n-    \n-    public int getCurrentCount() {\n-        return currentCount;\n-    }\n-    \n-    public int getPreviousCount() {\n-        return previousCount;\n-    }\n-    \n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMDQwOQ==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r546020409", "body": "I would move instance count into own class, not have instance counts in different classes.\r\nMinimize changes to WebappClassLoader\r\n\r\nAlso, this doesn't touch non-webapp (jar, ear etc) class loaders", "bodyText": "I would move instance count into own class, not have instance counts in different classes.\nMinimize changes to WebappClassLoader\nAlso, this doesn't touch non-webapp (jar, ear etc) class loaders", "bodyHTML": "<p dir=\"auto\">I would move instance count into own class, not have instance counts in different classes.<br>\nMinimize changes to WebappClassLoader</p>\n<p dir=\"auto\">Also, this doesn't touch non-webapp (jar, ear etc) class loaders</p>", "author": "lprimak", "createdAt": "2020-12-18T18:43:52Z", "path": "appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package fish.payara.samples.classloaderdata;\n+\n+import java.lang.ref.Reference;\n+import org.glassfish.web.loader.WebappClassLoader;\n+import org.glassfish.web.loader.WebappClassLoaderFinalizer;\n+\n+/**\n+ *\n+ * @author Cuba Stanley\n+ */\n+public class InstanceCountTracker {", "originalCommit": "dcd22959da6183456a38b8a1a2609428e8a34b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d06040ab969aa8add2aefd3334c128e3a006daa7", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nindex 072970527d..0e8f3c041c 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n", "chunk": "@@ -1,13 +1,46 @@\n /*\n- * To change this license header, choose License Headers in Project Properties.\n- * To change this template file, choose Tools | Templates\n- * and open the template in the editor.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n  */\n package fish.payara.samples.classloaderdata;\n \n import java.lang.ref.Reference;\n import org.glassfish.web.loader.WebappClassLoader;\n-import org.glassfish.web.loader.WebappClassLoaderFinalizer;\n \n /**\n  *\n", "next_change": {"commit": "c108c89fdd46434fdb1179be09bbd157be17be7f", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nindex 0e8f3c041c..8c9473287c 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n", "chunk": "@@ -41,6 +41,7 @@ package fish.payara.samples.classloaderdata;\n \n import java.lang.ref.Reference;\n import org.glassfish.web.loader.WebappClassLoader;\n+import com.sun.enterprise.loader.ASURLClassLoader;\n \n /**\n  *\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\nsimilarity index 50%\nrename from appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nrename to nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\nindex 8c9473287c..0dc558caad 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\n", "chunk": "@@ -37,63 +37,74 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.samples.classloaderdata;\n+package org.glassfish.common.util;\n \n+import java.lang.ref.PhantomReference;\n import java.lang.ref.Reference;\n-import org.glassfish.web.loader.WebappClassLoader;\n-import com.sun.enterprise.loader.ASURLClassLoader;\n+import java.lang.ref.ReferenceQueue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Test;\n \n /**\n  *\n- * @author Cuba Stanley\n+ * @author lprimak\n  */\n-public class InstanceCountTracker {\n-    \n-    private static int previousWebappInstanceCount;\n-    private static int previousASURLInstanceCount;\n-    \n-    // WebappClassLoader starts\n-    \n-    public static int getWebappInstanceCount() {\n-        \n-        previousWebappInstanceCount = WebappClassLoader.getInstanceCount(); // Store the previous count\n-        System.gc();\n-        int removedInstances = 0;\n-        Reference<?> reference;\n-        while((reference = WebappClassLoader.referenceQueue.poll()) != null) {\n-            removedInstances++;\n-            \n-            reference.clear();\n+public class InstanceCounterTest {\n+    private static class Counted {\n+        int field;\n+        private final InstanceCounter<Counted> counter = new InstanceCounter<>(this);\n+\n+        Counted(int field) {\n+            this.field = field;\n         }\n \n-        WebappClassLoader.setInstanceCount(previousWebappInstanceCount - removedInstances); // Update the instance count with removed instances\n-        return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n-    }\n-    \n-    public static int getPreviousWebappInstanceCount() {\n-        return previousWebappInstanceCount;\n+        @Override\n+        public String toString() {\n+            return String.format(\"Counted: %d\", field);\n+        }\n     }\n-    \n-    // ASURLClassLoader stats\n-    \n-    public static int getASURLInstanceCount() {\n-        \n-        previousASURLInstanceCount = ASURLClassLoader.getInstanceCount(); // Store the previous count\n+\n+    @Test\n+    public void simplestFantom() throws InterruptedException {\n+        Object s = new Object();\n+\n+        ReferenceQueue<Object> queue = new ReferenceQueue<>();\n+        PhantomReference<Object> ref = new PhantomReference<>(s, queue);\n+\n+        s = null;\n         System.gc();\n-        int removedInstances = 0;\n-        Reference<?> reference;\n-        while((reference = ASURLClassLoader.referenceQueue.poll()) != null) {\n-            removedInstances++;\n-            \n-            reference.clear();\n-        }\n+        assertNotNull(queue.remove(1));\n+    }\n \n-        ASURLClassLoader.setInstanceCount(previousASURLInstanceCount - removedInstances); // Update the instance count with removed instances\n-        return ASURLClassLoader.getInstanceCount(); // Return the new updated instance count\n+    @Test\n+    public void phantom() throws InterruptedException {\n+        ReferenceQueue<Counted> queue = new ReferenceQueue<>();\n+        Counted counted1 = new Counted(1);\n+        PhantomReference<Counted> ref1 = new PhantomReference<>(counted1, queue);\n+        counted1 = null;\n+        System.gc();\n+        Reference<?> ref2 = queue.remove(1);\n+        assertNotNull(ref2);\n+        ref2.clear();\n     }\n-    \n-    public static int getPreviousASURLInstanceCount() {\n-        return previousASURLInstanceCount;\n+\n+    @Test\n+    public void counter() {\n+        assertEquals(0, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        Counted counted1 = new Counted(1);\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        System.gc();\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        Counted counted2 = new Counted(2);\n+        assertEquals(2, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        System.gc();\n+        assertEquals(2, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        counted2 = null;\n+        System.gc();\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        counted1 = null;\n+        System.gc();\n+        assertEquals(0, InstanceCounter.getInstanceCount(Counted.class, 1));\n     }\n-    \n }\n", "next_change": null}]}}, {"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nindex 0e8f3c041c..8c9473287c 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n", "chunk": "@@ -48,22 +49,51 @@ import org.glassfish.web.loader.WebappClassLoader;\n  */\n public class InstanceCountTracker {\n     \n-    private static int previousInstanceCount;\n+    private static int previousWebappInstanceCount;\n+    private static int previousASURLInstanceCount;\n     \n-    public static int getInstanceCount() {\n+    // WebappClassLoader starts\n+    \n+    public static int getWebappInstanceCount() {\n+        \n+        previousWebappInstanceCount = WebappClassLoader.getInstanceCount(); // Store the previous count\n         System.gc();\n-        int newCount = 0;\n+        int removedInstances = 0;\n         Reference<?> reference;\n         while((reference = WebappClassLoader.referenceQueue.poll()) != null) {\n-            newCount++;\n+            removedInstances++;\n+            \n+            reference.clear();\n+        }\n+\n+        WebappClassLoader.setInstanceCount(previousWebappInstanceCount - removedInstances); // Update the instance count with removed instances\n+        return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n+    }\n+    \n+    public static int getPreviousWebappInstanceCount() {\n+        return previousWebappInstanceCount;\n+    }\n+    \n+    // ASURLClassLoader stats\n+    \n+    public static int getASURLInstanceCount() {\n+        \n+        previousASURLInstanceCount = ASURLClassLoader.getInstanceCount(); // Store the previous count\n+        System.gc();\n+        int removedInstances = 0;\n+        Reference<?> reference;\n+        while((reference = ASURLClassLoader.referenceQueue.poll()) != null) {\n+            removedInstances++;\n+            \n             reference.clear();\n         }\n-        previousInstanceCount = newCount;\n-        return newCount;\n+\n+        ASURLClassLoader.setInstanceCount(previousASURLInstanceCount - removedInstances); // Update the instance count with removed instances\n+        return ASURLClassLoader.getInstanceCount(); // Return the new updated instance count\n     }\n     \n-    public static int getPreviousInstanceCount() {\n-        return previousInstanceCount;\n+    public static int getPreviousASURLInstanceCount() {\n+        return previousASURLInstanceCount;\n     }\n     \n }\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\nsimilarity index 50%\nrename from appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nrename to nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\nindex 8c9473287c..0dc558caad 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\n", "chunk": "@@ -37,63 +37,74 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.samples.classloaderdata;\n+package org.glassfish.common.util;\n \n+import java.lang.ref.PhantomReference;\n import java.lang.ref.Reference;\n-import org.glassfish.web.loader.WebappClassLoader;\n-import com.sun.enterprise.loader.ASURLClassLoader;\n+import java.lang.ref.ReferenceQueue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Test;\n \n /**\n  *\n- * @author Cuba Stanley\n+ * @author lprimak\n  */\n-public class InstanceCountTracker {\n-    \n-    private static int previousWebappInstanceCount;\n-    private static int previousASURLInstanceCount;\n-    \n-    // WebappClassLoader starts\n-    \n-    public static int getWebappInstanceCount() {\n-        \n-        previousWebappInstanceCount = WebappClassLoader.getInstanceCount(); // Store the previous count\n-        System.gc();\n-        int removedInstances = 0;\n-        Reference<?> reference;\n-        while((reference = WebappClassLoader.referenceQueue.poll()) != null) {\n-            removedInstances++;\n-            \n-            reference.clear();\n+public class InstanceCounterTest {\n+    private static class Counted {\n+        int field;\n+        private final InstanceCounter<Counted> counter = new InstanceCounter<>(this);\n+\n+        Counted(int field) {\n+            this.field = field;\n         }\n \n-        WebappClassLoader.setInstanceCount(previousWebappInstanceCount - removedInstances); // Update the instance count with removed instances\n-        return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n-    }\n-    \n-    public static int getPreviousWebappInstanceCount() {\n-        return previousWebappInstanceCount;\n+        @Override\n+        public String toString() {\n+            return String.format(\"Counted: %d\", field);\n+        }\n     }\n-    \n-    // ASURLClassLoader stats\n-    \n-    public static int getASURLInstanceCount() {\n-        \n-        previousASURLInstanceCount = ASURLClassLoader.getInstanceCount(); // Store the previous count\n+\n+    @Test\n+    public void simplestFantom() throws InterruptedException {\n+        Object s = new Object();\n+\n+        ReferenceQueue<Object> queue = new ReferenceQueue<>();\n+        PhantomReference<Object> ref = new PhantomReference<>(s, queue);\n+\n+        s = null;\n         System.gc();\n-        int removedInstances = 0;\n-        Reference<?> reference;\n-        while((reference = ASURLClassLoader.referenceQueue.poll()) != null) {\n-            removedInstances++;\n-            \n-            reference.clear();\n-        }\n+        assertNotNull(queue.remove(1));\n+    }\n \n-        ASURLClassLoader.setInstanceCount(previousASURLInstanceCount - removedInstances); // Update the instance count with removed instances\n-        return ASURLClassLoader.getInstanceCount(); // Return the new updated instance count\n+    @Test\n+    public void phantom() throws InterruptedException {\n+        ReferenceQueue<Counted> queue = new ReferenceQueue<>();\n+        Counted counted1 = new Counted(1);\n+        PhantomReference<Counted> ref1 = new PhantomReference<>(counted1, queue);\n+        counted1 = null;\n+        System.gc();\n+        Reference<?> ref2 = queue.remove(1);\n+        assertNotNull(ref2);\n+        ref2.clear();\n     }\n-    \n-    public static int getPreviousASURLInstanceCount() {\n-        return previousASURLInstanceCount;\n+\n+    @Test\n+    public void counter() {\n+        assertEquals(0, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        Counted counted1 = new Counted(1);\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        System.gc();\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        Counted counted2 = new Counted(2);\n+        assertEquals(2, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        System.gc();\n+        assertEquals(2, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        counted2 = null;\n+        System.gc();\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        counted1 = null;\n+        System.gc();\n+        assertEquals(0, InstanceCounter.getInstanceCount(Counted.class, 1));\n     }\n-    \n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMTA1OA==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r546021058", "body": "possible race condition, should be AtomicInteger", "bodyText": "possible race condition, should be AtomicInteger", "bodyHTML": "<p dir=\"auto\">possible race condition, should be AtomicInteger</p>", "author": "lprimak", "createdAt": "2020-12-18T18:45:13Z", "path": "appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java", "diffHunk": "@@ -408,9 +409,25 @@\n     private static final boolean IS_JDK_VERSION_HIGHER_THAN_8 = JDK.getMajor() > 8;\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n+    \n+    private static int INSTANCE_COUNT;", "originalCommit": "dcd22959da6183456a38b8a1a2609428e8a34b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d06040ab969aa8add2aefd3334c128e3a006daa7", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex 8759a86669..a23f743ee8 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -409,22 +410,12 @@ public class WebappClassLoader\n     private static final boolean IS_JDK_VERSION_HIGHER_THAN_8 = JDK.getMajor() > 8;\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n-    \n-    private static int INSTANCE_COUNT;\n+\n     public static ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n     public static ArrayList<WebappClassLoaderFinalizer> list = new ArrayList<WebappClassLoaderFinalizer>();\n     {\n-        INSTANCE_COUNT++;\n         list.add(new WebappClassLoaderFinalizer(this, referenceQueue));\n     }\n-    \n-    public static int getInstanceCount() {\n-        return INSTANCE_COUNT;\n-    }\n-    \n-    public static void decreaseInstanceCount() {\n-        INSTANCE_COUNT--;\n-    }\n \n     static {\n         \n", "next_change": {"commit": "bbf2016c766e9b5c7646fcb42fb60275511d1562", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex a23f743ee8..49bee94f3c 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -411,10 +412,16 @@ public class WebappClassLoader\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    public static ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n-    public static ArrayList<WebappClassLoaderFinalizer> list = new ArrayList<WebappClassLoaderFinalizer>();\n-    {\n-        list.add(new WebappClassLoaderFinalizer(this, referenceQueue));\n+    public static final ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n+    public static final ArrayList<PhantomReference<WebappClassLoader>> list = new ArrayList<PhantomReference<WebappClassLoader>>();\n+    private static final AtomicInteger INSTANCE_COUNT = new AtomicInteger();\n+    \n+    public static int getInstanceCount() {\n+        return INSTANCE_COUNT.get();\n+    }\n+    \n+    public static void setInstanceCount(int newValue) {\n+        INSTANCE_COUNT.set(newValue);\n     }\n \n     static {\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex 49bee94f3c..9af3711d1e 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -405,27 +403,16 @@ public class WebappClassLoader\n     private final Application application;\n     private final Date creationTime = new Date();\n     private boolean hotDeploy = false;\n-    \n+    private final InstanceCounter<WebappClassLoader> instanceCounter = new InstanceCounter<>(this);\n+\n     private static Class[] CONSTRUCTOR_ARGS_TYPES;\n     private static Object CONSTRUCTOR_ARGUMENTS;\n     private static final boolean IS_JDK_VERSION_HIGHER_THAN_8 = JDK.getMajor() > 8;\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    public static final ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n-    public static final ArrayList<PhantomReference<WebappClassLoader>> list = new ArrayList<PhantomReference<WebappClassLoader>>();\n-    private static final AtomicInteger INSTANCE_COUNT = new AtomicInteger();\n-    \n-    public static int getInstanceCount() {\n-        return INSTANCE_COUNT.get();\n-    }\n-    \n-    public static void setInstanceCount(int newValue) {\n-        INSTANCE_COUNT.set(newValue);\n-    }\n-\n     static {\n-        \n+\n         if (!IS_JDK_VERSION_HIGHER_THAN_8) {\n             isMultiReleaseJar = false;\n         } else {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMTI5NQ==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r546021295", "body": "this cast is a code smell, this needs to be refactored", "bodyText": "this cast is a code smell, this needs to be refactored", "bodyHTML": "<p dir=\"auto\">this cast is a code smell, this needs to be refactored</p>", "author": "lprimak", "createdAt": "2020-12-18T18:45:41Z", "path": "appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package fish.payara.samples.classloaderdata;\n+\n+import java.lang.ref.Reference;\n+import org.glassfish.web.loader.WebappClassLoader;\n+import org.glassfish.web.loader.WebappClassLoaderFinalizer;\n+\n+/**\n+ *\n+ * @author Cuba Stanley\n+ */\n+public class InstanceCountTracker {\n+    \n+    private static int previousInstanceCount;\n+    \n+    public static int getInstanceCount() {\n+        System.gc();\n+        Reference<? extends WebappClassLoader> referenceFromQueue;\n+        while((referenceFromQueue = WebappClassLoader.referenceQueue.poll()) != null) {\n+            ((WebappClassLoaderFinalizer)referenceFromQueue).cleanupAction();", "originalCommit": "dcd22959da6183456a38b8a1a2609428e8a34b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d06040ab969aa8add2aefd3334c128e3a006daa7", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nindex 072970527d..0e8f3c041c 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n", "chunk": "@@ -19,14 +52,14 @@ public class InstanceCountTracker {\n     \n     public static int getInstanceCount() {\n         System.gc();\n-        Reference<? extends WebappClassLoader> referenceFromQueue;\n-        while((referenceFromQueue = WebappClassLoader.referenceQueue.poll()) != null) {\n-            ((WebappClassLoaderFinalizer)referenceFromQueue).cleanupAction();\n-            referenceFromQueue.clear();\n+        int newCount = 0;\n+        Reference<?> reference;\n+        while((reference = WebappClassLoader.referenceQueue.poll()) != null) {\n+            newCount++;\n+            reference.clear();\n         }\n-        int newCount = WebappClassLoader.getInstanceCount();\n         previousInstanceCount = newCount;\n-        return previousInstanceCount;\n+        return newCount;\n     }\n     \n     public static int getPreviousInstanceCount() {\n", "next_change": {"commit": "871dea3ea89c867f1c493a48915744863039c733", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nindex 0e8f3c041c..58fc4bce5f 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n", "chunk": "@@ -51,15 +51,19 @@ public class InstanceCountTracker {\n     private static int previousInstanceCount;\n     \n     public static int getInstanceCount() {\n+        \n+        previousInstanceCount = WebappClassLoader.getInstanceCount(); // Store the previous count\n         System.gc();\n-        int newCount = 0;\n+        int removedInstances = 0;\n         Reference<?> reference;\n         while((reference = WebappClassLoader.referenceQueue.poll()) != null) {\n-            newCount++;\n+            removedInstances++;\n+            \n             reference.clear();\n         }\n-        previousInstanceCount = newCount;\n-        return newCount;\n+\n+        WebappClassLoader.setInstanceCount(previousInstanceCount - removedInstances); // Update the instance count with removed instances\n+        return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n     }\n     \n     public static int getPreviousInstanceCount() {\n", "next_change": {"commit": "c108c89fdd46434fdb1179be09bbd157be17be7f", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nindex 58fc4bce5f..8c9473287c 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n", "chunk": "@@ -62,12 +66,34 @@ public class InstanceCountTracker {\n             reference.clear();\n         }\n \n-        WebappClassLoader.setInstanceCount(previousInstanceCount - removedInstances); // Update the instance count with removed instances\n+        WebappClassLoader.setInstanceCount(previousWebappInstanceCount - removedInstances); // Update the instance count with removed instances\n         return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n     }\n     \n-    public static int getPreviousInstanceCount() {\n-        return previousInstanceCount;\n+    public static int getPreviousWebappInstanceCount() {\n+        return previousWebappInstanceCount;\n+    }\n+    \n+    // ASURLClassLoader stats\n+    \n+    public static int getASURLInstanceCount() {\n+        \n+        previousASURLInstanceCount = ASURLClassLoader.getInstanceCount(); // Store the previous count\n+        System.gc();\n+        int removedInstances = 0;\n+        Reference<?> reference;\n+        while((reference = ASURLClassLoader.referenceQueue.poll()) != null) {\n+            removedInstances++;\n+            \n+            reference.clear();\n+        }\n+\n+        ASURLClassLoader.setInstanceCount(previousASURLInstanceCount - removedInstances); // Update the instance count with removed instances\n+        return ASURLClassLoader.getInstanceCount(); // Return the new updated instance count\n+    }\n+    \n+    public static int getPreviousASURLInstanceCount() {\n+        return previousASURLInstanceCount;\n     }\n     \n }\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\nsimilarity index 50%\nrename from appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nrename to nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\nindex 8c9473287c..0dc558caad 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\n", "chunk": "@@ -37,63 +37,74 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.samples.classloaderdata;\n+package org.glassfish.common.util;\n \n+import java.lang.ref.PhantomReference;\n import java.lang.ref.Reference;\n-import org.glassfish.web.loader.WebappClassLoader;\n-import com.sun.enterprise.loader.ASURLClassLoader;\n+import java.lang.ref.ReferenceQueue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Test;\n \n /**\n  *\n- * @author Cuba Stanley\n+ * @author lprimak\n  */\n-public class InstanceCountTracker {\n-    \n-    private static int previousWebappInstanceCount;\n-    private static int previousASURLInstanceCount;\n-    \n-    // WebappClassLoader starts\n-    \n-    public static int getWebappInstanceCount() {\n-        \n-        previousWebappInstanceCount = WebappClassLoader.getInstanceCount(); // Store the previous count\n-        System.gc();\n-        int removedInstances = 0;\n-        Reference<?> reference;\n-        while((reference = WebappClassLoader.referenceQueue.poll()) != null) {\n-            removedInstances++;\n-            \n-            reference.clear();\n+public class InstanceCounterTest {\n+    private static class Counted {\n+        int field;\n+        private final InstanceCounter<Counted> counter = new InstanceCounter<>(this);\n+\n+        Counted(int field) {\n+            this.field = field;\n         }\n \n-        WebappClassLoader.setInstanceCount(previousWebappInstanceCount - removedInstances); // Update the instance count with removed instances\n-        return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n-    }\n-    \n-    public static int getPreviousWebappInstanceCount() {\n-        return previousWebappInstanceCount;\n+        @Override\n+        public String toString() {\n+            return String.format(\"Counted: %d\", field);\n+        }\n     }\n-    \n-    // ASURLClassLoader stats\n-    \n-    public static int getASURLInstanceCount() {\n-        \n-        previousASURLInstanceCount = ASURLClassLoader.getInstanceCount(); // Store the previous count\n+\n+    @Test\n+    public void simplestFantom() throws InterruptedException {\n+        Object s = new Object();\n+\n+        ReferenceQueue<Object> queue = new ReferenceQueue<>();\n+        PhantomReference<Object> ref = new PhantomReference<>(s, queue);\n+\n+        s = null;\n         System.gc();\n-        int removedInstances = 0;\n-        Reference<?> reference;\n-        while((reference = ASURLClassLoader.referenceQueue.poll()) != null) {\n-            removedInstances++;\n-            \n-            reference.clear();\n-        }\n+        assertNotNull(queue.remove(1));\n+    }\n \n-        ASURLClassLoader.setInstanceCount(previousASURLInstanceCount - removedInstances); // Update the instance count with removed instances\n-        return ASURLClassLoader.getInstanceCount(); // Return the new updated instance count\n+    @Test\n+    public void phantom() throws InterruptedException {\n+        ReferenceQueue<Counted> queue = new ReferenceQueue<>();\n+        Counted counted1 = new Counted(1);\n+        PhantomReference<Counted> ref1 = new PhantomReference<>(counted1, queue);\n+        counted1 = null;\n+        System.gc();\n+        Reference<?> ref2 = queue.remove(1);\n+        assertNotNull(ref2);\n+        ref2.clear();\n     }\n-    \n-    public static int getPreviousASURLInstanceCount() {\n-        return previousASURLInstanceCount;\n+\n+    @Test\n+    public void counter() {\n+        assertEquals(0, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        Counted counted1 = new Counted(1);\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        System.gc();\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        Counted counted2 = new Counted(2);\n+        assertEquals(2, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        System.gc();\n+        assertEquals(2, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        counted2 = null;\n+        System.gc();\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        counted1 = null;\n+        System.gc();\n+        assertEquals(0, InstanceCounter.getInstanceCount(Counted.class, 1));\n     }\n-    \n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMjA0NQ==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r546022045", "body": "oracle copyrights should not be changed", "bodyText": "oracle copyrights should not be changed", "bodyHTML": "<p dir=\"auto\">oracle copyrights should not be changed</p>", "author": "lprimak", "createdAt": "2020-12-18T18:47:12Z", "path": "appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java", "diffHunk": "@@ -1,7 +1,7 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n- * Copyright (c) 1997-2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997-2020 Oracle and/or its affiliates. All rights reserved.", "originalCommit": "dcd22959da6183456a38b8a1a2609428e8a34b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17fc3412444a9ce2c14fe11db08f5d5b81e13539", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex 8759a86669..4d3041db7d 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -1,7 +1,7 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n- * Copyright (c) 1997-2020 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997-2019 Oracle and/or its affiliates. All rights reserved.\n  *\n  * The contents of this file are subject to the terms of either the GNU\n  * General Public License Version 2 only (\"GPL\") or the Common Development\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMjEzMw==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r546022133", "body": "needs full copyright, not just portions", "bodyText": "needs full copyright, not just portions", "bodyHTML": "<p dir=\"auto\">needs full copyright, not just portions</p>", "author": "lprimak", "createdAt": "2020-12-18T18:47:25Z", "path": "appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoaderFinalizer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Portions Copyright [2020] [Payara Foundation and/or its affiliates]", "originalCommit": "dcd22959da6183456a38b8a1a2609428e8a34b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17fc3412444a9ce2c14fe11db08f5d5b81e13539", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoaderFinalizer.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoaderFinalizer.java\nindex 7c5c4774d7..470c51fc17 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoaderFinalizer.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoaderFinalizer.java\n", "chunk": "@@ -1,4 +1,42 @@\n-// Portions Copyright [2020] [Payara Foundation and/or its affiliates]\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n package org.glassfish.web.loader;\n \n import java.lang.ref.PhantomReference;\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoaderFinalizer.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoaderFinalizer.java\ndeleted file mode 100644\nindex 470c51fc17..0000000000\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoaderFinalizer.java\n+++ /dev/null\n", "chunk": "@@ -1,59 +0,0 @@\n-/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- *\n- * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n- *\n- * The contents of this file are subject to the terms of either the GNU\n- * General Public License Version 2 only (\"GPL\") or the Common Development\n- * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n- * may not use this file except in compliance with the License.  You can\n- * obtain a copy of the License at\n- * https://github.com/payara/Payara/blob/master/LICENSE.txt\n- * See the License for the specific\n- * language governing permissions and limitations under the License.\n- *\n- * When distributing the software, include this License Header Notice in each\n- * file and include the License file at glassfish/legal/LICENSE.txt.\n- *\n- * GPL Classpath Exception:\n- * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n- * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n- * file that accompanied this code.\n- *\n- * Modifications:\n- * If applicable, add the following below the License Header, with the fields\n- * enclosed by brackets [] replaced by your own identifying information:\n- * \"Portions Copyright [year] [name of copyright owner]\"\n- *\n- * Contributor(s):\n- * If you wish your version of this file to be governed by only the CDDL or\n- * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n- * elects to include this software in this distribution under the [CDDL or GPL\n- * Version 2] license.\"  If you don't indicate a single choice of license, a\n- * recipient has the option to distribute your version of this file under\n- * either the CDDL, the GPL Version 2 or to extend the choice of license to\n- * its licensees as provided above.  However, if you add GPL Version 2 code\n- * and therefore, elected the GPL Version 2 license, then the option applies\n- * only if the new code is made subject to such option by the copyright\n- * holder.\n- */\n-package org.glassfish.web.loader;\n-\n-import java.lang.ref.PhantomReference;\n-import java.lang.ref.ReferenceQueue;\n-\n-/**\n- *\n- * @author Cuba Stanley\n- */\n-public class WebappClassLoaderFinalizer extends PhantomReference<WebappClassLoader> {\n-    \n-    public WebappClassLoaderFinalizer(WebappClassLoader t, ReferenceQueue<? super WebappClassLoader> rq) {\n-        super(t, rq);\n-    }\n-    \n-    public void cleanupAction() {\n-        WebappClassLoader.decreaseInstanceCount();\n-    }\n-    \n-}\n", "next_change": null}]}}]}}, {"oid": "cbbf4712cc827f9ec5ca2e9aca8e8f2ba02d3050", "url": "https://github.com/payara/Payara/commit/cbbf4712cc827f9ec5ca2e9aca8e8f2ba02d3050", "message": "Use basic jax-rs", "committedDate": "2020-12-21T11:14:11Z", "type": "commit"}, {"oid": "0f33befc1d32cd6b1fa52743314ed5f2b3718752", "url": "https://github.com/payara/Payara/commit/0f33befc1d32cd6b1fa52743314ed5f2b3718752", "message": "Revert samples pom tweaks", "committedDate": "2020-12-21T13:48:53Z", "type": "commit"}, {"oid": "17fc3412444a9ce2c14fe11db08f5d5b81e13539", "url": "https://github.com/payara/Payara/commit/17fc3412444a9ce2c14fe11db08f5d5b81e13539", "message": "Update license headers", "committedDate": "2020-12-21T13:58:02Z", "type": "commit"}, {"oid": "74b2b93f7b991b661caa7ce224060c57a21be06d", "url": "https://github.com/payara/Payara/commit/74b2b93f7b991b661caa7ce224060c57a21be06d", "message": "Reset samples pom", "committedDate": "2020-12-21T14:10:04Z", "type": "commit"}, {"oid": "d06040ab969aa8add2aefd3334c128e3a006daa7", "url": "https://github.com/payara/Payara/commit/d06040ab969aa8add2aefd3334c128e3a006daa7", "message": "Refactor casting", "committedDate": "2020-12-21T16:51:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NDkzMg==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r547074932", "body": "needs intent javadoc", "bodyText": "needs intent javadoc", "bodyHTML": "<p dir=\"auto\">needs intent javadoc</p>", "author": "lprimak", "createdAt": "2020-12-22T05:25:13Z", "path": "appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.samples.classloaderdata;\n+\n+import java.lang.ref.Reference;\n+import org.glassfish.web.loader.WebappClassLoader;\n+\n+/**\n+ *\n+ * @author Cuba Stanley\n+ */\n+public class InstanceCountTracker {\n+    \n+    private static int previousInstanceCount;\n+    \n+    public static int getInstanceCount() {", "originalCommit": "d06040ab969aa8add2aefd3334c128e3a006daa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "871dea3ea89c867f1c493a48915744863039c733", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nindex 0e8f3c041c..58fc4bce5f 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n", "chunk": "@@ -51,15 +51,19 @@ public class InstanceCountTracker {\n     private static int previousInstanceCount;\n     \n     public static int getInstanceCount() {\n+        \n+        previousInstanceCount = WebappClassLoader.getInstanceCount(); // Store the previous count\n         System.gc();\n-        int newCount = 0;\n+        int removedInstances = 0;\n         Reference<?> reference;\n         while((reference = WebappClassLoader.referenceQueue.poll()) != null) {\n-            newCount++;\n+            removedInstances++;\n+            \n             reference.clear();\n         }\n-        previousInstanceCount = newCount;\n-        return newCount;\n+\n+        WebappClassLoader.setInstanceCount(previousInstanceCount - removedInstances); // Update the instance count with removed instances\n+        return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n     }\n     \n     public static int getPreviousInstanceCount() {\n", "next_change": {"commit": "c108c89fdd46434fdb1179be09bbd157be17be7f", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nindex 58fc4bce5f..8c9473287c 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n", "chunk": "@@ -62,12 +66,34 @@ public class InstanceCountTracker {\n             reference.clear();\n         }\n \n-        WebappClassLoader.setInstanceCount(previousInstanceCount - removedInstances); // Update the instance count with removed instances\n+        WebappClassLoader.setInstanceCount(previousWebappInstanceCount - removedInstances); // Update the instance count with removed instances\n         return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n     }\n     \n-    public static int getPreviousInstanceCount() {\n-        return previousInstanceCount;\n+    public static int getPreviousWebappInstanceCount() {\n+        return previousWebappInstanceCount;\n+    }\n+    \n+    // ASURLClassLoader stats\n+    \n+    public static int getASURLInstanceCount() {\n+        \n+        previousASURLInstanceCount = ASURLClassLoader.getInstanceCount(); // Store the previous count\n+        System.gc();\n+        int removedInstances = 0;\n+        Reference<?> reference;\n+        while((reference = ASURLClassLoader.referenceQueue.poll()) != null) {\n+            removedInstances++;\n+            \n+            reference.clear();\n+        }\n+\n+        ASURLClassLoader.setInstanceCount(previousASURLInstanceCount - removedInstances); // Update the instance count with removed instances\n+        return ASURLClassLoader.getInstanceCount(); // Return the new updated instance count\n+    }\n+    \n+    public static int getPreviousASURLInstanceCount() {\n+        return previousASURLInstanceCount;\n     }\n     \n }\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java b/nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\nsimilarity index 50%\nrename from appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\nrename to nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\nindex 8c9473287c..0dc558caad 100644\n--- a/appserver/tests/payara-samples/classloader-data-api/src/main/java/fish/payara/samples/classloaderdata/InstanceCountTracker.java\n+++ b/nucleus/common/common-util/src/test/java/org/glassfish/common/util/InstanceCounterTest.java\n", "chunk": "@@ -37,63 +37,74 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.samples.classloaderdata;\n+package org.glassfish.common.util;\n \n+import java.lang.ref.PhantomReference;\n import java.lang.ref.Reference;\n-import org.glassfish.web.loader.WebappClassLoader;\n-import com.sun.enterprise.loader.ASURLClassLoader;\n+import java.lang.ref.ReferenceQueue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Test;\n \n /**\n  *\n- * @author Cuba Stanley\n+ * @author lprimak\n  */\n-public class InstanceCountTracker {\n-    \n-    private static int previousWebappInstanceCount;\n-    private static int previousASURLInstanceCount;\n-    \n-    // WebappClassLoader starts\n-    \n-    public static int getWebappInstanceCount() {\n-        \n-        previousWebappInstanceCount = WebappClassLoader.getInstanceCount(); // Store the previous count\n-        System.gc();\n-        int removedInstances = 0;\n-        Reference<?> reference;\n-        while((reference = WebappClassLoader.referenceQueue.poll()) != null) {\n-            removedInstances++;\n-            \n-            reference.clear();\n+public class InstanceCounterTest {\n+    private static class Counted {\n+        int field;\n+        private final InstanceCounter<Counted> counter = new InstanceCounter<>(this);\n+\n+        Counted(int field) {\n+            this.field = field;\n         }\n \n-        WebappClassLoader.setInstanceCount(previousWebappInstanceCount - removedInstances); // Update the instance count with removed instances\n-        return WebappClassLoader.getInstanceCount(); // Return the new updated instance count\n-    }\n-    \n-    public static int getPreviousWebappInstanceCount() {\n-        return previousWebappInstanceCount;\n+        @Override\n+        public String toString() {\n+            return String.format(\"Counted: %d\", field);\n+        }\n     }\n-    \n-    // ASURLClassLoader stats\n-    \n-    public static int getASURLInstanceCount() {\n-        \n-        previousASURLInstanceCount = ASURLClassLoader.getInstanceCount(); // Store the previous count\n+\n+    @Test\n+    public void simplestFantom() throws InterruptedException {\n+        Object s = new Object();\n+\n+        ReferenceQueue<Object> queue = new ReferenceQueue<>();\n+        PhantomReference<Object> ref = new PhantomReference<>(s, queue);\n+\n+        s = null;\n         System.gc();\n-        int removedInstances = 0;\n-        Reference<?> reference;\n-        while((reference = ASURLClassLoader.referenceQueue.poll()) != null) {\n-            removedInstances++;\n-            \n-            reference.clear();\n-        }\n+        assertNotNull(queue.remove(1));\n+    }\n \n-        ASURLClassLoader.setInstanceCount(previousASURLInstanceCount - removedInstances); // Update the instance count with removed instances\n-        return ASURLClassLoader.getInstanceCount(); // Return the new updated instance count\n+    @Test\n+    public void phantom() throws InterruptedException {\n+        ReferenceQueue<Counted> queue = new ReferenceQueue<>();\n+        Counted counted1 = new Counted(1);\n+        PhantomReference<Counted> ref1 = new PhantomReference<>(counted1, queue);\n+        counted1 = null;\n+        System.gc();\n+        Reference<?> ref2 = queue.remove(1);\n+        assertNotNull(ref2);\n+        ref2.clear();\n     }\n-    \n-    public static int getPreviousASURLInstanceCount() {\n-        return previousASURLInstanceCount;\n+\n+    @Test\n+    public void counter() {\n+        assertEquals(0, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        Counted counted1 = new Counted(1);\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        System.gc();\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        Counted counted2 = new Counted(2);\n+        assertEquals(2, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        System.gc();\n+        assertEquals(2, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        counted2 = null;\n+        System.gc();\n+        assertEquals(1, InstanceCounter.getInstanceCount(Counted.class, 1));\n+        counted1 = null;\n+        System.gc();\n+        assertEquals(0, InstanceCounter.getInstanceCount(Counted.class, 1));\n     }\n-    \n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NTIxOQ==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r547075219", "body": "should be final", "bodyText": "should be final", "bodyHTML": "<p dir=\"auto\">should be final</p>", "author": "lprimak", "createdAt": "2020-12-22T05:26:12Z", "path": "appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java", "diffHunk": "@@ -409,8 +411,14 @@\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    static {\n+    public static ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();", "originalCommit": "d06040ab969aa8add2aefd3334c128e3a006daa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbf2016c766e9b5c7646fcb42fb60275511d1562", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex a23f743ee8..49bee94f3c 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -411,10 +412,16 @@ public class WebappClassLoader\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    public static ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n-    public static ArrayList<WebappClassLoaderFinalizer> list = new ArrayList<WebappClassLoaderFinalizer>();\n-    {\n-        list.add(new WebappClassLoaderFinalizer(this, referenceQueue));\n+    public static final ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n+    public static final ArrayList<PhantomReference<WebappClassLoader>> list = new ArrayList<PhantomReference<WebappClassLoader>>();\n+    private static final AtomicInteger INSTANCE_COUNT = new AtomicInteger();\n+    \n+    public static int getInstanceCount() {\n+        return INSTANCE_COUNT.get();\n+    }\n+    \n+    public static void setInstanceCount(int newValue) {\n+        INSTANCE_COUNT.set(newValue);\n     }\n \n     static {\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex 49bee94f3c..9af3711d1e 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -405,27 +403,16 @@ public class WebappClassLoader\n     private final Application application;\n     private final Date creationTime = new Date();\n     private boolean hotDeploy = false;\n-    \n+    private final InstanceCounter<WebappClassLoader> instanceCounter = new InstanceCounter<>(this);\n+\n     private static Class[] CONSTRUCTOR_ARGS_TYPES;\n     private static Object CONSTRUCTOR_ARGUMENTS;\n     private static final boolean IS_JDK_VERSION_HIGHER_THAN_8 = JDK.getMajor() > 8;\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    public static final ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n-    public static final ArrayList<PhantomReference<WebappClassLoader>> list = new ArrayList<PhantomReference<WebappClassLoader>>();\n-    private static final AtomicInteger INSTANCE_COUNT = new AtomicInteger();\n-    \n-    public static int getInstanceCount() {\n-        return INSTANCE_COUNT.get();\n-    }\n-    \n-    public static void setInstanceCount(int newValue) {\n-        INSTANCE_COUNT.set(newValue);\n-    }\n-\n     static {\n-        \n+\n         if (!IS_JDK_VERSION_HIGHER_THAN_8) {\n             isMultiReleaseJar = false;\n         } else {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NTI3Mw==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r547075273", "body": "should be final", "bodyText": "should be final", "bodyHTML": "<p dir=\"auto\">should be final</p>", "author": "lprimak", "createdAt": "2020-12-22T05:26:24Z", "path": "appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java", "diffHunk": "@@ -409,8 +411,14 @@\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    static {\n+    public static ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n+    public static ArrayList<WebappClassLoaderFinalizer> list = new ArrayList<WebappClassLoaderFinalizer>();", "originalCommit": "d06040ab969aa8add2aefd3334c128e3a006daa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbf2016c766e9b5c7646fcb42fb60275511d1562", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex a23f743ee8..49bee94f3c 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -411,10 +412,16 @@ public class WebappClassLoader\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    public static ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n-    public static ArrayList<WebappClassLoaderFinalizer> list = new ArrayList<WebappClassLoaderFinalizer>();\n-    {\n-        list.add(new WebappClassLoaderFinalizer(this, referenceQueue));\n+    public static final ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n+    public static final ArrayList<PhantomReference<WebappClassLoader>> list = new ArrayList<PhantomReference<WebappClassLoader>>();\n+    private static final AtomicInteger INSTANCE_COUNT = new AtomicInteger();\n+    \n+    public static int getInstanceCount() {\n+        return INSTANCE_COUNT.get();\n+    }\n+    \n+    public static void setInstanceCount(int newValue) {\n+        INSTANCE_COUNT.set(newValue);\n     }\n \n     static {\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex 49bee94f3c..9af3711d1e 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -405,27 +403,16 @@ public class WebappClassLoader\n     private final Application application;\n     private final Date creationTime = new Date();\n     private boolean hotDeploy = false;\n-    \n+    private final InstanceCounter<WebappClassLoader> instanceCounter = new InstanceCounter<>(this);\n+\n     private static Class[] CONSTRUCTOR_ARGS_TYPES;\n     private static Object CONSTRUCTOR_ARGUMENTS;\n     private static final boolean IS_JDK_VERSION_HIGHER_THAN_8 = JDK.getMajor() > 8;\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    public static final ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n-    public static final ArrayList<PhantomReference<WebappClassLoader>> list = new ArrayList<PhantomReference<WebappClassLoader>>();\n-    private static final AtomicInteger INSTANCE_COUNT = new AtomicInteger();\n-    \n-    public static int getInstanceCount() {\n-        return INSTANCE_COUNT.get();\n-    }\n-    \n-    public static void setInstanceCount(int newValue) {\n-        INSTANCE_COUNT.set(newValue);\n-    }\n-\n     static {\n-        \n+\n         if (!IS_JDK_VERSION_HIGHER_THAN_8) {\n             isMultiReleaseJar = false;\n         } else {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NTM5MA==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r547075390", "body": "is isn't really standard, you should move it down into the `static` block", "bodyText": "is isn't really standard, you should move it down into the static block", "bodyHTML": "<p dir=\"auto\">is isn't really standard, you should move it down into the <code>static</code> block</p>", "author": "lprimak", "createdAt": "2020-12-22T05:26:45Z", "path": "appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java", "diffHunk": "@@ -409,8 +411,14 @@\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    static {\n+    public static ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n+    public static ArrayList<WebappClassLoaderFinalizer> list = new ArrayList<WebappClassLoaderFinalizer>();\n+    {", "originalCommit": "d06040ab969aa8add2aefd3334c128e3a006daa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbf2016c766e9b5c7646fcb42fb60275511d1562", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex a23f743ee8..49bee94f3c 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -411,10 +412,16 @@ public class WebappClassLoader\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    public static ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n-    public static ArrayList<WebappClassLoaderFinalizer> list = new ArrayList<WebappClassLoaderFinalizer>();\n-    {\n-        list.add(new WebappClassLoaderFinalizer(this, referenceQueue));\n+    public static final ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n+    public static final ArrayList<PhantomReference<WebappClassLoader>> list = new ArrayList<PhantomReference<WebappClassLoader>>();\n+    private static final AtomicInteger INSTANCE_COUNT = new AtomicInteger();\n+    \n+    public static int getInstanceCount() {\n+        return INSTANCE_COUNT.get();\n+    }\n+    \n+    public static void setInstanceCount(int newValue) {\n+        INSTANCE_COUNT.set(newValue);\n     }\n \n     static {\n", "next_change": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex 49bee94f3c..9af3711d1e 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -405,27 +403,16 @@ public class WebappClassLoader\n     private final Application application;\n     private final Date creationTime = new Date();\n     private boolean hotDeploy = false;\n-    \n+    private final InstanceCounter<WebappClassLoader> instanceCounter = new InstanceCounter<>(this);\n+\n     private static Class[] CONSTRUCTOR_ARGS_TYPES;\n     private static Object CONSTRUCTOR_ARGUMENTS;\n     private static final boolean IS_JDK_VERSION_HIGHER_THAN_8 = JDK.getMajor() > 8;\n     private static Boolean isMultiReleaseJar;\n     private static final Name MULTI_RELEASE = new Name(\"Multi-Release\");\n \n-    public static final ReferenceQueue<WebappClassLoader> referenceQueue = new ReferenceQueue<WebappClassLoader>();\n-    public static final ArrayList<PhantomReference<WebappClassLoader>> list = new ArrayList<PhantomReference<WebappClassLoader>>();\n-    private static final AtomicInteger INSTANCE_COUNT = new AtomicInteger();\n-    \n-    public static int getInstanceCount() {\n-        return INSTANCE_COUNT.get();\n-    }\n-    \n-    public static void setInstanceCount(int newValue) {\n-        INSTANCE_COUNT.set(newValue);\n-    }\n-\n     static {\n-        \n+\n         if (!IS_JDK_VERSION_HIGHER_THAN_8) {\n             isMultiReleaseJar = false;\n         } else {\n", "next_change": null}]}}]}}, {"oid": "6168ccf33f5a3dc07d89e85c28d1b77a37bf338c", "url": "https://github.com/payara/Payara/commit/6168ccf33f5a3dc07d89e85c28d1b77a37bf338c", "message": "Remove InstanceCountService", "committedDate": "2020-12-22T09:40:07Z", "type": "commit"}, {"oid": "bbf2016c766e9b5c7646fcb42fb60275511d1562", "url": "https://github.com/payara/Payara/commit/bbf2016c766e9b5c7646fcb42fb60275511d1562", "message": "Updates to WebappClassLoader", "committedDate": "2020-12-23T15:32:22Z", "type": "commit"}, {"oid": "871dea3ea89c867f1c493a48915744863039c733", "url": "https://github.com/payara/Payara/commit/871dea3ea89c867f1c493a48915744863039c733", "message": "Improve functionality and usibility of api", "committedDate": "2020-12-23T15:32:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMDM1Nw==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r548030357", "body": "This does not seem to be thread safe too.", "bodyText": "This does not seem to be thread safe too.", "bodyHTML": "<p dir=\"auto\">This does not seem to be thread safe too.</p>", "author": "sgflt", "createdAt": "2020-12-23T16:06:03Z", "path": "appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java", "diffHunk": "@@ -1887,8 +1894,11 @@ protected PermissionCollection getPermissions(CodeSource codeSource) {\n \n \n     private void init() {\n-\n+        \n         this.parent = getParent();\n+        \n+        list.add(new PhantomReference(this, referenceQueue));\n+        INSTANCE_COUNT.set(INSTANCE_COUNT.get() + 1);", "originalCommit": "871dea3ea89c867f1c493a48915744863039c733", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "changed_code": [{"header": "diff --git a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\nindex 49bee94f3c..9af3711d1e 100644\n--- a/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n+++ b/appserver/web/war-util/src/main/java/org/glassfish/web/loader/WebappClassLoader.java\n", "chunk": "@@ -1894,11 +1883,8 @@ public class WebappClassLoader\n \n \n     private void init() {\n-        \n+\n         this.parent = getParent();\n-        \n-        list.add(new PhantomReference(this, referenceQueue));\n-        INSTANCE_COUNT.set(INSTANCE_COUNT.get() + 1);\n \n         /* SJSAS 6317864\n         system = getSystemClassLoader();\n", "next_change": null}]}}, {"oid": "c108c89fdd46434fdb1179be09bbd157be17be7f", "url": "https://github.com/payara/Payara/commit/c108c89fdd46434fdb1179be09bbd157be17be7f", "message": "Include ASURL counter", "committedDate": "2020-12-23T16:18:14Z", "type": "commit"}, {"oid": "deb058d864b29ca003cbcdf35e343bba5a42d471", "url": "https://github.com/payara/Payara/commit/deb058d864b29ca003cbcdf35e343bba5a42d471", "message": "Merge branch 'master' into QACI-410-classloader-test", "committedDate": "2020-12-24T18:41:15Z", "type": "commit"}, {"oid": "824ad47bc75a122c24c090cdcc2e8f87c20bb185", "url": "https://github.com/payara/Payara/commit/824ad47bc75a122c24c090cdcc2e8f87c20bb185", "message": "refactored, added ability to see active classloaders in real time", "committedDate": "2020-12-25T05:30:01Z", "type": "commit"}, {"oid": "f0430778c6d13df47206fa98bbe35ebc42ae9b99", "url": "https://github.com/payara/Payara/commit/f0430778c6d13df47206fa98bbe35ebc42ae9b99", "message": "removed unnecessary generics", "committedDate": "2020-12-25T05:58:16Z", "type": "commit"}, {"oid": "a98332734a79f81cee97fe4cf17b115288f21048", "url": "https://github.com/payara/Payara/commit/a98332734a79f81cee97fe4cf17b115288f21048", "message": "stablized, added additional unit tests", "committedDate": "2020-12-25T06:39:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkwNTY5Mw==", "url": "https://github.com/payara/Payara/pull/5063#discussion_r548905693", "body": "I would use ConcurrentMap interface to point that there is expected concurrency.\r\n\r\n```suggestion\r\n    private static final ConcurrentMap<Class<?>, Count> INSTANCE_COUNT = new ConcurrentHashMap<>();\r\n```", "bodyText": "I would use ConcurrentMap interface to point that there is expected concurrency.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Map<Class<?>, Count> INSTANCE_COUNT = new ConcurrentHashMap<>();\n          \n          \n            \n                private static final ConcurrentMap<Class<?>, Count> INSTANCE_COUNT = new ConcurrentHashMap<>();", "bodyHTML": "<p dir=\"auto\">I would use ConcurrentMap interface to point that there is expected concurrency.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\"><span class=\"x x-first x-last\">Map</span>&lt;<span class=\"pl-k\">Class&lt;?&gt;</span>, <span class=\"pl-smi\">Count</span>&gt;</span> <span class=\"pl-c1\">INSTANCE_COUNT</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ConcurrentHashMap&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\"><span class=\"x x-first x-last\">ConcurrentMap</span>&lt;<span class=\"pl-k\">Class&lt;?&gt;</span>, <span class=\"pl-smi\">Count</span>&gt;</span> <span class=\"pl-c1\">INSTANCE_COUNT</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ConcurrentHashMap&lt;&gt;</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "sgflt", "createdAt": "2020-12-25T19:43:05Z", "path": "nucleus/common/common-util/src/main/java/org/glassfish/common/util/InstanceCounter.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.common.util;\n+\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Counts instances of a particular class, helpful in leak detection\n+ * <p>\n+ * Example: Put the following line into the class you want counted:\n+ * <p>\n+ * {@code\n+ *     private final InstanceCounter<MyClass> instanceCounter = new InstanceCounter<>(this);\n+ * }\n+ *\n+ * @author Cuba Stanley\n+ */\n+public class InstanceCounter {\n+    private static class Count {\n+        int instanceCount;\n+        private final ReferenceQueue<Object> referenceQueue = new ReferenceQueue<>();\n+        private final Set<WeakReference<?>> references = Collections.newSetFromMap(new IdentityHashMap<>());\n+\n+        public Count() {\n+            instanceCount = 1;\n+        }\n+\n+        public Count(int instanceCount) {\n+            this.instanceCount = instanceCount;\n+        }\n+    }\n+\n+    private static final Map<Class<?>, Count> INSTANCE_COUNT = new ConcurrentHashMap<>();", "originalCommit": "a98332734a79f81cee97fe4cf17b115288f21048", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb459f96231eae9da70019a780b7ee5c9cd6a103", "changed_code": [{"header": "diff --git a/nucleus/common/common-util/src/main/java/org/glassfish/common/util/InstanceCounter.java b/nucleus/common/common-util/src/main/java/org/glassfish/common/util/InstanceCounter.java\nindex fc9ab8cc6f..ca86dbfac0 100644\n--- a/nucleus/common/common-util/src/main/java/org/glassfish/common/util/InstanceCounter.java\n+++ b/nucleus/common/common-util/src/main/java/org/glassfish/common/util/InstanceCounter.java\n", "chunk": "@@ -74,7 +74,7 @@ public class InstanceCounter {\n         }\n     }\n \n-    private static final Map<Class<?>, Count> INSTANCE_COUNT = new ConcurrentHashMap<>();\n+    private static final ConcurrentMap<Class<?>, Count> INSTANCE_COUNT = new ConcurrentHashMap<>();\n \n     /**\n      * triggers instance counting of the specified\n", "next_change": null}]}}, {"oid": "fb459f96231eae9da70019a780b7ee5c9cd6a103", "url": "https://github.com/payara/Payara/commit/fb459f96231eae9da70019a780b7ee5c9cd6a103", "message": "Update nucleus/common/common-util/src/main/java/org/glassfish/common/util/InstanceCounter.java\n\nCo-authored-by: Luk\u00e1\u0161 Kv\u00eddera <lukas.kvidera@seznam.cz>", "committedDate": "2020-12-26T00:53:43Z", "type": "commit"}, {"oid": "5d9b0eba30deb5a92a16b330664d275027987f32", "url": "https://github.com/payara/Payara/commit/5d9b0eba30deb5a92a16b330664d275027987f32", "message": "import fix", "committedDate": "2020-12-26T01:16:06Z", "type": "commit"}]}