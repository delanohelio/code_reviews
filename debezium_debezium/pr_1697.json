{"pr_number": 1697, "pr_title": "DBZ-2288 Events in exported snapshot no longer filtered by LSN", "pr_author": "jpechane", "pr_createdAt": "2020-07-14T10:40:02Z", "pr_url": "https://github.com/debezium/debezium/pull/1697", "timeline": [{"oid": "1d7af47295444c35da19b60ef91683af32aa40b8", "url": "https://github.com/debezium/debezium/commit/1d7af47295444c35da19b60ef91683af32aa40b8", "message": "DBZ-2288 Events in exported snapshot no longer filtered by LSN", "committedDate": "2020-07-14T10:39:23Z", "type": "commit"}, {"oid": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b", "url": "https://github.com/debezium/debezium/commit/e6379ff5cb42828bd9951531c5ac0c09b1447c8b", "message": "DBZ-2288 Test for pgoutput", "committedDate": "2020-07-14T12:51:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MDAxMw==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454870013", "body": "```suggestion\r\n     * @param doSnapshot            whether the connector is doing snapshot\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param exportSnapshot            whether the connector is doing snapshot\n          \n          \n            \n                 * @param doSnapshot            whether the connector is doing snapshot", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> <span class=\"x x-first x-last\">exportSnapshot</span>            whether the connector is doing snapshot</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> <span class=\"x x-first x-last\">doSnapshot</span>            whether the connector is doing snapshot</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gunnarmorling", "createdAt": "2020-07-15T08:09:06Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/PostgresReplicationConnection.java", "diffHunk": "@@ -88,6 +88,7 @@\n      * @param dropSlotOnClose           whether the replication slot should be dropped once the connection is closed\n      * @param statusUpdateInterval      the interval at which the replication connection should periodically send status\n      * @param exportSnapshot            whether the replication should export a snapshot when created\n+     * @param exportSnapshot            whether the connector is doing snapshot", "originalCommit": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MDM5Nw==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454870397", "body": "```suggestion\r\n         * @param doSnapshot true if a snapshot is going to be executed, false if otherwise\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param doSnapshot true if a snapshot should is going to be executed, false if otherwise\n          \n          \n            \n                     * @param doSnapshot true if a snapshot is going to be executed, false if otherwise", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">         <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> doSnapshot <span class=\"pl-c1\">true</span> <span class=\"pl-k\">if</span> a snapshot <span class=\"x x-first x-last\">should </span>is going to be executed, <span class=\"pl-c1\">false</span> <span class=\"pl-k\">if</span> otherwise</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">         <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> doSnapshot <span class=\"pl-c1\">true</span> <span class=\"pl-k\">if</span> a snapshot is going to be executed, <span class=\"pl-c1\">false</span> <span class=\"pl-k\">if</span> otherwise</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gunnarmorling", "createdAt": "2020-07-15T08:09:45Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/ReplicationConnection.java", "diffHunk": "@@ -206,6 +206,14 @@ static String format(long lsn) {\n          */\n         Builder exportSnapshotOnCreate(final boolean exportSnapshot);\n \n+        /**\n+         * Whether or not the snapshot is executed\n+         * @param doSnapshot true if a snapshot should is going to be executed, false if otherwise", "originalCommit": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NTQ0MA==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454875440", "body": "But _are_ you skipping it in this case?", "bodyText": "But are you skipping it in this case?", "bodyHTML": "<p dir=\"auto\">But <em>are</em> you skipping it in this case?</p>", "author": "gunnarmorling", "createdAt": "2020-07-15T08:18:21Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/AbstractMessageDecoder.java", "diffHunk": "@@ -42,8 +51,13 @@ public boolean shouldMessageBeSkipped(ByteBuffer buffer, Long lastReceivedLsn, L\n         // the lsn we started from is inclusive, so we need to avoid sending back the same message twice\n         // but for the first record seen ever it is possible we received the same LSN as the one obtained from replication slot\n         if (startLsn.compareTo(lastReceivedLsn) > 0 || (startLsn.equals(lastReceivedLsn) && skipFirstFlushRecord)) {\n-            LOGGER.info(\"Streaming requested from LSN {} but received LSN {} that is same or smaller so skipping the message\", startLsn, lastReceivedLsn);\n-            return true;\n+            if (filterBasedOnLsn) {\n+                LOGGER.info(\"Streaming requested from LSN {} but received LSN {} that is same or smaller so skipping the message\", startLsn, lastReceivedLsn);\n+                return true;\n+            }\n+            else {\n+                LOGGER.trace(\"Streaming requested from LSN {} but received LSN {} that is same or smaller so skipping the message\", startLsn, lastReceivedLsn);", "originalCommit": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NjMxOQ==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454876319", "body": "Couldn't you just create the publication always, and it only would be used when running the test for pgoutput? That way we'd keep a single test.", "bodyText": "Couldn't you just create the publication always, and it only would be used when running the test for pgoutput? That way we'd keep a single test.", "bodyHTML": "<p dir=\"auto\">Couldn't you just create the publication always, and it only would be used when running the test for pgoutput? That way we'd keep a single test.</p>", "author": "gunnarmorling", "createdAt": "2020-07-15T08:19:47Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -1118,6 +1119,110 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n         VerifyRecord.isValidInsert(s2recs.get(0), PK_FIELD, 3);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                inserted.set(true);\n+            }\n+        });\n+        assertConnectorIsRunning();\n+\n+        // Consume records from the snapshot\n+        SourceRecords actualRecords = consumeRecordsByTopic(4);\n+\n+        // Consume records from concurrent transactions\n+        actualRecords = consumeRecordsByTopic(4);\n+\n+        List<SourceRecord> s1recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        List<SourceRecord> s2recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n+        assertThat(s1recs.size()).isEqualTo(2);\n+        assertThat(s2recs.size()).isEqualTo(2);\n+\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication not supported\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTxPgoutput() throws Exception {", "originalCommit": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4ODgwNA==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454888804", "bodyText": "No, as postgres 9 dows not support publications. So it is either based on postgres version or plugin used.", "author": "jpechane", "createdAt": "2020-07-15T08:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NjMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjA0NQ==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454996045", "bodyText": "Gotcha, makes sense.", "author": "gunnarmorling", "createdAt": "2020-07-15T11:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NjMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NDIwMw==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r454884203", "body": "This shouldn't apply here?", "bodyText": "This shouldn't apply here?", "bodyHTML": "<p dir=\"auto\">This shouldn't apply here?</p>", "author": "gunnarmorling", "createdAt": "2020-07-15T08:33:00Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/connection/ReplicationConnection.java", "diffHunk": "@@ -206,6 +206,14 @@ static String format(long lsn) {\n          */\n         Builder exportSnapshotOnCreate(final boolean exportSnapshot);\n \n+        /**\n+         * Whether or not the snapshot is executed\n+         * @param doSnapshot true if a snapshot should is going to be executed, false if otherwise\n+         * @return this instance\n+         * @see #DEFAULT_EXPORT_SNAPSHOT", "originalCommit": "e6379ff5cb42828bd9951531c5ac0c09b1447c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2fc4a6558f7771ccb2074f2e78ac7003bfccefb", "url": "https://github.com/debezium/debezium/commit/a2fc4a6558f7771ccb2074f2e78ac7003bfccefb", "message": "DBZ-2288 Fix copy/paste errors", "committedDate": "2020-07-15T08:44:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzOTkwMQ==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r455539901", "body": "Rather rethrow it?", "bodyText": "Rather rethrow it?", "bodyHTML": "<p dir=\"auto\">Rather rethrow it?</p>", "author": "gunnarmorling", "createdAt": "2020-07-16T06:32:42Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -1118,6 +1119,110 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n         VerifyRecord.isValidInsert(s2recs.get(0), PK_FIELD, 3);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();", "originalCommit": "a2fc4a6558f7771ccb2074f2e78ac7003bfccefb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzOTk1NA==", "url": "https://github.com/debezium/debezium/pull/1697#discussion_r455539954", "body": "As above.", "bodyText": "As above.", "bodyHTML": "<p dir=\"auto\">As above.</p>", "author": "gunnarmorling", "createdAt": "2020-07-16T06:32:52Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresConnectorIT.java", "diffHunk": "@@ -1118,6 +1119,110 @@ public void shouldAllowForExportedSnapshot() throws Exception {\n         VerifyRecord.isValidInsert(s2recs.get(0), PK_FIELD, 3);\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIs(value = SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT, reason = \"PgOutput needs publication for manually created slot\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                inserted.set(true);\n+            }\n+        });\n+        assertConnectorIsRunning();\n+\n+        // Consume records from the snapshot\n+        SourceRecords actualRecords = consumeRecordsByTopic(4);\n+\n+        // Consume records from concurrent transactions\n+        actualRecords = consumeRecordsByTopic(4);\n+\n+        List<SourceRecord> s1recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        List<SourceRecord> s2recs = actualRecords.recordsForTopic(topicName(\"s1.a\"));\n+        s2recs = actualRecords.recordsForTopic(topicName(\"s2.a\"));\n+        assertThat(s1recs.size()).isEqualTo(2);\n+        assertThat(s2recs.size()).isEqualTo(2);\n+\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2288\")\n+    @SkipWhenDecoderPluginNameIsNot(value = SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT, reason = \"Publication not supported\")\n+    public void exportedSnapshotShouldNotSkipRecordOfParallelTxPgoutput() throws Exception {\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.createDefaultReplicationSlot();\n+        TestHelper.execute(\"CREATE PUBLICATION dbz_publication FOR ALL TABLES;\");\n+\n+        // Testing.Print.enable();\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        TestHelper.execute(INSERT_STMT);\n+\n+        Configuration config = TestHelper.defaultConfig()\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.EXPORTED.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, Boolean.FALSE)\n+                .with(PostgresConnectorConfig.MAX_QUEUE_SIZE, 2)\n+                .with(PostgresConnectorConfig.MAX_BATCH_SIZE, 1)\n+                .build();\n+        final PostgresConnection pgConnection = TestHelper.create();\n+        pgConnection.setAutoCommit(false);\n+        pgConnection.executeWithoutCommitting(INSERT_STMT);\n+        final AtomicBoolean inserted = new AtomicBoolean();\n+        start(PostgresConnector.class, config, loggingCompletion(), x -> false, x -> {\n+            if (!inserted.get()) {\n+                TestHelper.execute(INSERT_STMT);\n+                try {\n+                    pgConnection.commit();\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();", "originalCommit": "a2fc4a6558f7771ccb2074f2e78ac7003bfccefb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c4e0a1f12b17a101c82e57454bce9da001c587a7", "url": "https://github.com/debezium/debezium/commit/c4e0a1f12b17a101c82e57454bce9da001c587a7", "message": "DBZ-2288 Rethrow exception in test", "committedDate": "2020-07-16T06:51:09Z", "type": "commit"}, {"oid": "12c94216e3ed3f63a1728f3b865ac4dbda36bd4b", "url": "https://github.com/debezium/debezium/commit/12c94216e3ed3f63a1728f3b865ac4dbda36bd4b", "message": "DBZ-2288 Add documentation", "committedDate": "2020-07-16T07:00:12Z", "type": "commit"}]}