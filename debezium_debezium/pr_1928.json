{"pr_number": 1928, "pr_title": "DBZ-2724 DBZ-2602 Add integration tests for DBZ-2617 and migrate Testcontainers related changes on DebeziumContainer from UI PoC backend", "pr_author": "rk3rn3r", "pr_createdAt": "2020-11-04T10:07:56Z", "pr_url": "https://github.com/debezium/debezium/pull/1928", "merge_commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "timeline": [{"oid": "d6c78642191ad9400717bdaa4466ea2e14c8c0be", "url": "https://github.com/debezium/debezium/commit/d6c78642191ad9400717bdaa4466ea2e14c8c0be", "message": "DBZ-2724 Add integration tests for DBZ-2617 (fix Postgres was not able to shutdown with shutdown mode \"fast\")\nDBZ-2602 Migrate Testcontainers related changes on DebeziumContainer from UI PoC backend to Debezium main repo", "committedDate": "2020-11-04T10:00:38Z", "type": "commit"}, {"oid": "4475f92765aea2e4943d4ea9edabf85ddd07f2fa", "url": "https://github.com/debezium/debezium/commit/4475f92765aea2e4943d4ea9edabf85ddd07f2fa", "message": "DBZ-2724 unrelated cleanup", "committedDate": "2020-11-04T10:02:16Z", "type": "commit"}, {"oid": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "url": "https://github.com/debezium/debezium/commit/0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "message": "DBZ-2724 add missing license file header and class doc", "committedDate": "2020-11-04T10:23:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NDkzMg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517284932", "body": "I think you should read the property value and set it to the previous one not making any assumptions", "bodyText": "I think you should read the property value and set it to the previous one not making any assumptions", "bodyHTML": "<p dir=\"auto\">I think you should read the property value and set it to the previous one not making any assumptions</p>", "author": "jpechane", "createdAt": "2020-11-04T11:42:42Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MTA1Mw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517351053", "bodyText": "Good point.", "author": "rk3rn3r", "createdAt": "2020-11-04T13:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NDkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -72,7 +75,7 @@ public void tearDown() {\n         TestHelper.dropDefaultReplicationSlot();\n         TestHelper.dropPublication();\n         infrastructure.getPostgresContainer().stop();\n-        System.setProperty(\"database.port\", \"5432\");\n+        System.setProperty(\"database.port\", oldContainerPort);\n     }\n \n     @Test\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -72,7 +75,7 @@ public void tearDown() {\n         TestHelper.dropDefaultReplicationSlot();\n         TestHelper.dropPublication();\n         infrastructure.getPostgresContainer().stop();\n-        System.setProperty(\"database.port\", \"5432\");\n+        System.setProperty(\"database.port\", oldContainerPort);\n     }\n \n     @Test\n", "next_change": {"commit": "bd427786e99e29078586d8d6efda9797596184ed", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 9f35ad93c..ad86335d6 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -74,7 +91,7 @@ public void tearDown() {\n         stopConnector();\n         TestHelper.dropDefaultReplicationSlot();\n         TestHelper.dropPublication();\n-        infrastructure.getPostgresContainer().stop();\n+        postgresContainer.stop();\n         System.setProperty(\"database.port\", oldContainerPort);\n     }\n \n", "next_change": {"commit": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex ad86335d6..2d2f3e14d 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -89,8 +87,6 @@ public void setUp() {\n     @After\n     public void tearDown() {\n         stopConnector();\n-        TestHelper.dropDefaultReplicationSlot();\n-        TestHelper.dropPublication();\n         postgresContainer.stop();\n         System.setProperty(\"database.port\", oldContainerPort);\n     }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "bd427786e99e29078586d8d6efda9797596184ed", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Avoiding some log noise"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "967432ad08711d596c3dadc45775ca083cf97285", "committedDate": "2021-12-17 13:57:53 +0100", "message": "DBZ-4469 Test should run with any Postgres version"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NTQ2OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517285469", "body": "Check `io.debezium.jdbc.JdbcConnection.singleResultMapper(ResultSetExtractor<T>, String)`", "bodyText": "Check io.debezium.jdbc.JdbcConnection.singleResultMapper(ResultSetExtractor<T>, String)", "bodyHTML": "<p dir=\"auto\">Check <code>io.debezium.jdbc.JdbcConnection.singleResultMapper(ResultSetExtractor&lt;T&gt;, String)</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:43:45Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2OTY5NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517369695", "bodyText": "That makes it easier! Thx", "author": "rk3rn3r", "createdAt": "2020-11-04T14:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NTQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": {"commit": "bd427786e99e29078586d8d6efda9797596184ed", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 9f35ad93c..ad86335d6 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -119,7 +136,7 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                         postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n \n         logger.info(\"Execute Postgres shutdown...\");\n-        Container.ExecResult result = infrastructure.getPostgresContainer()\n+        Container.ExecResult result = postgresContainer\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex ad86335d6..d900c97ad 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -140,10 +138,11 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n-        logger.info(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shut down...\");\n         waitForPostgresShutdown();\n \n-        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n+        logger.info(\"Waiting for connector to shut down...\");\n+        waitForConnectorShutdown(\"postgres\", TestHelper.TEST_SERVER);\n     }\n \n     private void waitForPostgresShutdown() {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "bd427786e99e29078586d8d6efda9797596184ed", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Avoiding some log noise"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "967432ad08711d596c3dadc45775ca083cf97285", "committedDate": "2021-12-17 13:57:53 +0100", "message": "DBZ-4469 Test should run with any Postgres version"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NTg1Mw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517285853", "body": "Please derive it from `io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()`", "bodyText": "Please derive it from io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()", "bodyHTML": "<p dir=\"auto\">Please derive it from <code>io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:44:30Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": {"commit": "bd427786e99e29078586d8d6efda9797596184ed", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 9f35ad93c..ad86335d6 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -119,7 +136,7 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                         postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n \n         logger.info(\"Execute Postgres shutdown...\");\n-        Container.ExecResult result = infrastructure.getPostgresContainer()\n+        Container.ExecResult result = postgresContainer\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex ad86335d6..d900c97ad 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -140,10 +138,11 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n-        logger.info(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shut down...\");\n         waitForPostgresShutdown();\n \n-        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n+        logger.info(\"Waiting for connector to shut down...\");\n+        waitForConnectorShutdown(\"postgres\", TestHelper.TEST_SERVER);\n     }\n \n     private void waitForPostgresShutdown() {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "bd427786e99e29078586d8d6efda9797596184ed", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Avoiding some log noise"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "967432ad08711d596c3dadc45775ca083cf97285", "committedDate": "2021-12-17 13:57:53 +0100", "message": "DBZ-4469 Test should run with any Postgres version"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjA0Mg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286042", "body": "`System.out` should not be used", "bodyText": "System.out should not be used", "bodyHTML": "<p dir=\"auto\"><code>System.out</code> should not be used</p>", "author": "jpechane", "createdAt": "2020-11-04T11:44:54Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MjcyMA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517372720", "bodyText": "Ooops!", "author": "rk3rn3r", "createdAt": "2020-11-04T14:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": {"commit": "bd427786e99e29078586d8d6efda9797596184ed", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 9f35ad93c..ad86335d6 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -119,7 +136,7 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                         postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n \n         logger.info(\"Execute Postgres shutdown...\");\n-        Container.ExecResult result = infrastructure.getPostgresContainer()\n+        Container.ExecResult result = postgresContainer\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex ad86335d6..d900c97ad 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -140,10 +138,11 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n-        logger.info(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shut down...\");\n         waitForPostgresShutdown();\n \n-        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n+        logger.info(\"Waiting for connector to shut down...\");\n+        waitForConnectorShutdown(\"postgres\", TestHelper.TEST_SERVER);\n     }\n \n     private void waitForPostgresShutdown() {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "bd427786e99e29078586d8d6efda9797596184ed", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Avoiding some log noise"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "967432ad08711d596c3dadc45775ca083cf97285", "committedDate": "2021-12-17 13:57:53 +0100", "message": "DBZ-4469 Test should run with any Postgres version"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjIzMw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286233", "body": "See mapper above", "bodyText": "See mapper above", "bodyHTML": "<p dir=\"auto\">See mapper above</p>", "author": "jpechane", "createdAt": "2020-11-04T11:45:16Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": {"commit": "bd427786e99e29078586d8d6efda9797596184ed", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 9f35ad93c..ad86335d6 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -119,7 +136,7 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                         postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n \n         logger.info(\"Execute Postgres shutdown...\");\n-        Container.ExecResult result = infrastructure.getPostgresContainer()\n+        Container.ExecResult result = postgresContainer\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex ad86335d6..d900c97ad 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -140,10 +138,11 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n-        logger.info(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shut down...\");\n         waitForPostgresShutdown();\n \n-        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n+        logger.info(\"Waiting for connector to shut down...\");\n+        waitForConnectorShutdown(\"postgres\", TestHelper.TEST_SERVER);\n     }\n \n     private void waitForPostgresShutdown() {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "bd427786e99e29078586d8d6efda9797596184ed", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Avoiding some log noise"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "967432ad08711d596c3dadc45775ca083cf97285", "committedDate": "2021-12-17 13:57:53 +0100", "message": "DBZ-4469 Test should run with any Postgres version"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjM2NA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286364", "body": "`System.out`", "bodyText": "System.out", "bodyHTML": "<p dir=\"auto\"><code>System.out</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:45:36Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                }));\n+\n+        System.out.println(\"Execute Postgres shutdown...\");", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": {"commit": "bd427786e99e29078586d8d6efda9797596184ed", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 9f35ad93c..ad86335d6 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -119,7 +136,7 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                         postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n \n         logger.info(\"Execute Postgres shutdown...\");\n-        Container.ExecResult result = infrastructure.getPostgresContainer()\n+        Container.ExecResult result = postgresContainer\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex ad86335d6..d900c97ad 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -140,10 +138,11 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n-        logger.info(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shut down...\");\n         waitForPostgresShutdown();\n \n-        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n+        logger.info(\"Waiting for connector to shut down...\");\n+        waitForConnectorShutdown(\"postgres\", TestHelper.TEST_SERVER);\n     }\n \n     private void waitForPostgresShutdown() {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "bd427786e99e29078586d8d6efda9797596184ed", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Avoiding some log noise"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "967432ad08711d596c3dadc45775ca083cf97285", "committedDate": "2021-12-17 13:57:53 +0100", "message": "DBZ-4469 Test should run with any Postgres version"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NjQ4Nw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286487", "body": "`System.out`", "bodyText": "System.out", "bodyHTML": "<p dir=\"auto\"><code>System.out</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:45:50Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                }));\n+\n+        System.out.println(\"Execute Postgres shutdown...\");\n+        Container.ExecResult result = infrastructure.getPostgresContainer()\n+                .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n+        System.out.println(result.toString());", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -93,36 +96,34 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n \n         Testing.Print.enable();\n-        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-            rs.next();\n-            return rs.getString(\"ts\");\n-        });\n+        PostgresConnection postgresConnection = TestHelper.create();\n+        String initialHeartbeat = postgresConnection.queryAndMap(\n+                \"SELECT ts FROM s1.heartbeat;\",\n+                postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"));\n         start(PostgresConnector.class, configBuilder.build());\n         assertConnectorIsRunning();\n \n         waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n         waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n \n-        System.out.println(\"Waiting for heartbeats...\");\n+        logger.info(\"Waiting for heartbeats...\");\n         Awaitility.await()\n                 .pollInterval(250, TimeUnit.MILLISECONDS)\n-                .atMost(10, TimeUnit.SECONDS)\n-                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                })));\n-        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n-                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n-                    rs.next();\n-                    return rs.getString(\"ts\");\n-                }));\n-\n-        System.out.println(\"Execute Postgres shutdown...\");\n+                .atMost(5 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\"))));\n+        logger.info(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + postgresConnection.queryAndMap(\n+                        \"SELECT ts FROM s1.heartbeat;\",\n+                        postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n+\n+        logger.info(\"Execute Postgres shutdown...\");\n         Container.ExecResult result = infrastructure.getPostgresContainer()\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n-        System.out.println(result.toString());\n+        logger.info(result.toString());\n \n-        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shutdown...\");\n         waitForPostgresShutdown();\n \n         assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n", "next_change": {"commit": "bd427786e99e29078586d8d6efda9797596184ed", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 9f35ad93c..ad86335d6 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -119,7 +136,7 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                         postgresConnection.singleResultMapper(rs -> rs.getString(\"ts\"), \"Could not fetch keepalive info\")));\n \n         logger.info(\"Execute Postgres shutdown...\");\n-        Container.ExecResult result = infrastructure.getPostgresContainer()\n+        Container.ExecResult result = postgresContainer\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex ad86335d6..d900c97ad 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -140,10 +138,11 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n                 .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n         logger.info(result.toString());\n \n-        logger.info(\"Waiting for Postgres to shutdown...\");\n+        logger.info(\"Waiting for Postgres to shut down...\");\n         waitForPostgresShutdown();\n \n-        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n+        logger.info(\"Waiting for connector to shut down...\");\n+        waitForConnectorShutdown(\"postgres\", TestHelper.TEST_SERVER);\n     }\n \n     private void waitForPostgresShutdown() {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "bd427786e99e29078586d8d6efda9797596184ed", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Avoiding some log noise"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "967432ad08711d596c3dadc45775ca083cf97285", "committedDate": "2021-12-17 13:57:53 +0100", "message": "DBZ-4469 Test should run with any Postgres version"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4Njk5OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517286999", "body": "Please derive it from `io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()`", "bodyText": "Please derive it from io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()", "bodyHTML": "<p dir=\"auto\">Please derive it from <code>io.debezium.connector.postgresql.TestHelper.waitTimeForRecords()</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:46:46Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package io.debezium.connector.postgresql;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.containers.Container;\n+\n+import io.debezium.config.CommonConnectorConfig;\n+import io.debezium.config.Configuration;\n+import io.debezium.connector.postgresql.PostgresConnectorConfig.SnapshotMode;\n+import io.debezium.doc.FixFor;\n+import io.debezium.embedded.AbstractConnectorTest;\n+import io.debezium.embedded.EmbeddedEngine;\n+import io.debezium.heartbeat.DatabaseHeartbeatImpl;\n+import io.debezium.heartbeat.Heartbeat;\n+import io.debezium.jdbc.JdbcConfiguration;\n+import io.debezium.testing.testcontainers.PostgresInfrastructure;\n+import io.debezium.util.Testing;\n+\n+/**\n+ * Integration test for {@link PostgresConnector} using an {@link EmbeddedEngine} and Testcontainers infrastructure for when Postgres is shutdown during streaming\n+ */\n+public class PostgresShutdownIT extends AbstractConnectorTest {\n+\n+    /*\n+     * Specific tests that need to extend the initial DDL set should do it in a form of\n+     * TestHelper.execute(SETUP_TABLES_STMT + ADDITIONAL_STATEMENTS)\n+     */\n+    private static final String INSERT_STMT = \"INSERT INTO s1.a (aa) VALUES (1);\" +\n+            \"INSERT INTO s2.a (aa) VALUES (1);\";\n+    private static final String CREATE_TABLES_STMT = \"DROP SCHEMA IF EXISTS s1 CASCADE;\" +\n+            \"DROP SCHEMA IF EXISTS s2 CASCADE;\" +\n+            \"CREATE SCHEMA s1; \" +\n+            \"CREATE SCHEMA s2; \" +\n+            \"CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s2.a (pk SERIAL, aa integer, bb varchar(20), PRIMARY KEY(pk));\" +\n+            \"CREATE TABLE s1.heartbeat (ts TIMESTAMP WITH TIME ZONE PRIMARY KEY);\" +\n+            \"INSERT INTO s1.heartbeat (ts) VALUES (NOW());\";\n+    private static final String SETUP_TABLES_STMT = CREATE_TABLES_STMT + INSERT_STMT;\n+\n+    private PostgresInfrastructure infrastructure;\n+\n+    @Before\n+    public void setUp() {\n+        infrastructure = PostgresInfrastructure.getDebeziumPostgresInfrastructure();\n+        infrastructure.startContainer();\n+        System.setProperty(\"database.port\", String.valueOf(infrastructure.getPostgresContainer().getMappedPort(5432)));\n+        try {\n+            TestHelper.dropAllSchemas();\n+        }\n+        catch (SQLException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+        initializeConnectorTestFramework();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        stopConnector();\n+        TestHelper.dropDefaultReplicationSlot();\n+        TestHelper.dropPublication();\n+        infrastructure.getPostgresContainer().stop();\n+        System.setProperty(\"database.port\", \"5432\");\n+    }\n+\n+    @Test\n+    @FixFor(\"DBZ-2617\")\n+    public void shouldStopOnPostgresFastShutdown() throws Exception {\n+        TestHelper.execute(SETUP_TABLES_STMT);\n+        final int recordCount = 100;\n+\n+        for (int i = 0; i < recordCount - 1; i++) {\n+            TestHelper.execute(INSERT_STMT);\n+        }\n+        Configuration.Builder configBuilder = TestHelper.defaultConfig()\n+                .with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT, infrastructure.getPostgresContainer().getMappedPort(5432))\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, SnapshotMode.ALWAYS.getValue())\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST, \"s1\")\n+                .with(Heartbeat.HEARTBEAT_INTERVAL, 500)\n+                .with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY, \"UPDATE s1.heartbeat SET ts=NOW();\");\n+\n+        Testing.Print.enable();\n+        String initialHeartbeat = TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+            rs.next();\n+            return rs.getString(\"ts\");\n+        });\n+        start(PostgresConnector.class, configBuilder.build());\n+        assertConnectorIsRunning();\n+\n+        waitForSnapshotToBeCompleted(\"postgres\", TestHelper.TEST_SERVER);\n+        waitForStreamingRunning(\"postgres\", TestHelper.TEST_SERVER);\n+\n+        System.out.println(\"Waiting for heartbeats...\");\n+        Awaitility.await()\n+                .pollInterval(250, TimeUnit.MILLISECONDS)\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> !initialHeartbeat.equals(TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                })));\n+        System.out.println(\"INTIAL Heartbeat: \" + initialHeartbeat + \" ; CURRENT heartbeat: \"\n+                + TestHelper.create().queryAndMap(\"SELECT ts FROM s1.heartbeat;\", rs -> {\n+                    rs.next();\n+                    return rs.getString(\"ts\");\n+                }));\n+\n+        System.out.println(\"Execute Postgres shutdown...\");\n+        Container.ExecResult result = infrastructure.getPostgresContainer()\n+                .execInContainer(\"su\", \"-\", \"postgres\", \"-c\", \"/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop\");\n+        System.out.println(result.toString());\n+\n+        System.out.println(\"Waiting for Postgres to shutdown...\");\n+        waitForPostgresShutdown();\n+\n+        assertFalse(isStreamingRunning(\"postgres\", TestHelper.TEST_SERVER));\n+    }\n+\n+    private void waitForPostgresShutdown() {\n+        Awaitility.await()\n+                .pollInterval(200, TimeUnit.MILLISECONDS)\n+                .atMost(2, TimeUnit.MINUTES)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -131,7 +132,7 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n     private void waitForPostgresShutdown() {\n         Awaitility.await()\n                 .pollInterval(200, TimeUnit.MILLISECONDS)\n-                .atMost(2, TimeUnit.MINUTES)\n+                .atMost(60 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n                 .until(() -> !infrastructure.getPostgresContainer().isRunning());\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 0f99352e9..9f35ad93c 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -131,7 +132,7 @@ public void shouldStopOnPostgresFastShutdown() throws Exception {\n     private void waitForPostgresShutdown() {\n         Awaitility.await()\n                 .pollInterval(200, TimeUnit.MILLISECONDS)\n-                .atMost(2, TimeUnit.MINUTES)\n+                .atMost(60 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n                 .until(() -> !infrastructure.getPostgresContainer().isRunning());\n     }\n \n", "next_change": {"commit": "bd427786e99e29078586d8d6efda9797596184ed", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex 9f35ad93c..ad86335d6 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -133,7 +150,7 @@ private void waitForPostgresShutdown() {\n         Awaitility.await()\n                 .pollInterval(200, TimeUnit.MILLISECONDS)\n                 .atMost(60 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n-                .until(() -> !infrastructure.getPostgresContainer().isRunning());\n+                .until(() -> !postgresContainer.isRunning());\n     }\n \n }\n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\nindex ad86335d6..d900c97ad 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/PostgresShutdownIT.java\n", "chunk": "@@ -152,5 +151,4 @@ private void waitForPostgresShutdown() {\n                 .atMost(60 * TestHelper.waitTimeForRecords(), TimeUnit.SECONDS)\n                 .until(() -> !postgresContainer.isRunning());\n     }\n-\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "bd427786e99e29078586d8d6efda9797596184ed", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Postgres image for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "0fedadd77edc591fb028d13a7d9c6c41681629b2", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Avoiding some log noise"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "967432ad08711d596c3dadc45775ca083cf97285", "committedDate": "2021-12-17 13:57:53 +0100", "message": "DBZ-4469 Test should run with any Postgres version"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4ODI2OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517288269", "body": "As you are doing the unrelated changes please again replace it with a value derived from configurable timeout", "bodyText": "As you are doing the unrelated changes please again replace it with a value derived from configurable timeout", "bodyHTML": "<p dir=\"auto\">As you are doing the unrelated changes please again replace it with a value derived from configurable timeout</p>", "author": "jpechane", "createdAt": "2020-11-04T11:49:14Z", "path": "debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java", "diffHunk": "@@ -1052,12 +1053,23 @@ public static void waitForStreamingRunning(String connector, String server, Stri\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n                 .atMost(60, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NjAxOA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518686018", "bodyText": "will do", "author": "rk3rn3r", "createdAt": "2020-11-06T11:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4ODI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\nindex 993f42ec9..9fb9ec103 100644\n--- a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n+++ b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n", "chunk": "@@ -1045,16 +1050,13 @@ public static void waitForStreamingRunning(String connector, String server) thro\n         waitForStreamingRunning(connector, server, \"streaming\");\n     }\n \n-    public static void waitForStreamingRunning(String connector, String server, String contextName) throws InterruptedException {\n-        final MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n-\n+    public static void waitForStreamingRunning(String connector, String server, String contextName) {\n         Awaitility.await()\n                 .alias(\"Streaming was not started on time\")\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n-                .atMost(60, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 30, TimeUnit.SECONDS)\n                 .ignoreException(InstanceNotFoundException.class)\n-                .until(() -> (boolean) mbeanServer\n-                        .getAttribute(getStreamingMetricsObjectName(connector, server, contextName), \"Connected\"));\n+                .until(() -> isStreamingRunning(connector, server, contextName));\n     }\n \n     public static boolean isStreamingRunning(String connector, String server) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\nindex 993f42ec9..9fb9ec103 100644\n--- a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n+++ b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n", "chunk": "@@ -1045,16 +1050,13 @@ public static void waitForStreamingRunning(String connector, String server) thro\n         waitForStreamingRunning(connector, server, \"streaming\");\n     }\n \n-    public static void waitForStreamingRunning(String connector, String server, String contextName) throws InterruptedException {\n-        final MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n-\n+    public static void waitForStreamingRunning(String connector, String server, String contextName) {\n         Awaitility.await()\n                 .alias(\"Streaming was not started on time\")\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n-                .atMost(60, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 30, TimeUnit.SECONDS)\n                 .ignoreException(InstanceNotFoundException.class)\n-                .until(() -> (boolean) mbeanServer\n-                        .getAttribute(getStreamingMetricsObjectName(connector, server, contextName), \"Connected\"));\n+                .until(() -> isStreamingRunning(connector, server, contextName));\n     }\n \n     public static boolean isStreamingRunning(String connector, String server) {\n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\nindex 9fb9ec103..b6fc9aabc 100644\n--- a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n+++ b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n", "chunk": "@@ -1059,6 +1064,13 @@ public static void waitForStreamingRunning(String connector, String server, Stri\n                 .until(() -> isStreamingRunning(connector, server, contextName));\n     }\n \n+    public static void waitForConnectorShutdown(String connector, String server) {\n+        Awaitility.await()\n+                .pollInterval(200, TimeUnit.MILLISECONDS)\n+                .atMost(waitTimeForRecords() * 30, TimeUnit.SECONDS)\n+                .until(() -> !isStreamingRunning(connector, server));\n+    }\n+\n     public static boolean isStreamingRunning(String connector, String server) {\n         return isStreamingRunning(connector, server, \"streaming\");\n     }\n", "next_change": {"commit": "7394ecfd62ceaf8f0c01ed4301d5d80cf9b9f6cb", "changed_code": [{"header": "diff --git a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\nindex b6fc9aabc..da9fd1ce0 100644\n--- a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n+++ b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n", "chunk": "@@ -1072,7 +1072,7 @@ public static void waitForConnectorShutdown(String connector, String server) {\n     }\n \n     public static boolean isStreamingRunning(String connector, String server) {\n-        return isStreamingRunning(connector, server, \"streaming\");\n+        return isStreamingRunning(connector, server, getStreamingNamespace());\n     }\n \n     public static boolean isStreamingRunning(String connector, String server, String contextName) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "aff1df75738c8f0353bf83bbb95080a801f63ace", "committedDate": "2020-11-16 07:47:25 +0100", "message": "DBZ-2637 fix unit test timeouts"}, {"oid": "b7fede7d53bda04a779d29e80e9ccaf499674619", "committedDate": "2020-11-27 17:33:23 +0100", "message": "DBZ-735 Verify Avro serialization"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "7394ecfd62ceaf8f0c01ed4301d5d80cf9b9f6cb", "committedDate": "2021-02-16 10:02:17 +0100", "message": "DBZ-3099 Make streaming MBean name configurable in tests"}, {"oid": "260c32cf0efeec695f51be07ec3559d780d36aea", "committedDate": "2021-05-06 05:37:36 +0200", "message": "DBZ-3473 Resume parallel snapshot after connector restart"}, {"oid": "58fbf88a4aab4f2fcd8d95812a9ff150f00b8c03", "committedDate": "2021-05-31 10:05:44 +0200", "message": "DBZ-400 Add a system property for number of allowed runs when no records are consumed"}, {"oid": "2140ff51be3c9414b8d1b91b3e800e84743446f9", "committedDate": "2021-10-26 18:13:16 +0200", "message": "DBZ-435 Aligned MongoDbConnectorIT test"}, {"oid": "955afddd5662be0f1f6092a55aeeb9a8d1dea52b", "committedDate": "2021-10-26 18:13:16 +0200", "message": "DBZ-435 Converting FieldBlacklistIT and MongoMetricsIT tests"}, {"oid": "d13a1635d7e00a30843000459d75bf0d06e956d5", "committedDate": "2022-02-17 07:41:00 +0100", "message": "DBZ-3952 Store schema for tables not in schema collection list"}, {"oid": "d6efe20826bbe4e18a695003b9d63705b797d08f", "committedDate": "2022-05-26 12:40:02 +0200", "message": "DBZ-5052 Move test event consumer to dedicated method."}, {"oid": "d6447a91c99a4ace745a86f8c978e3517ab2bde7", "committedDate": "2022-05-26 12:40:02 +0200", "message": "DBZ-5052 Add option to start embedded engine with custom change handler"}, {"oid": "65bfeeccead0cab8bef45843b57a8fecb16f49b4", "committedDate": "2022-07-29 12:41:58 -0400", "message": "DBZ-4727 Make wait for snapshot event generic"}, {"oid": "fc9de10a0e0fa66dd4d66928538948f998545187", "committedDate": "2022-08-19 12:55:58 +0200", "message": "DBZ-4733 adjusting poll interval in mongodb tests"}, {"oid": "09b99840d80f9735ab7bf2b0de474fc17c219c61", "committedDate": "2022-09-14 12:49:30 +0200", "message": "DBZ-4617 Deprecate internal key/value converter options"}, {"oid": "20d56734d4efeeb09e79bc74faae82a42c703df8", "committedDate": "2022-09-19 17:15:29 +0200", "message": "DBZ-5585 Modify the Instantiator to not require classloader"}, {"oid": "820b9d10d5c7c81d1f8f11abd58d65d7cf667f8d", "committedDate": "2022-10-11 15:38:33 +0200", "message": "DBZ-5329 Add LSN to Postgres transation ID"}, {"oid": "ee6d3ea6d619a79bd652128a96df7581ed12a185", "committedDate": "2022-11-02 08:50:26 +0100", "message": "DBZ-5779 Migrated debezium-embedded to AssertJ"}, {"oid": "0510102db57c3b86785082e01a4128f78faf48f5", "committedDate": "2022-11-09 08:44:45 +0100", "message": "DBZ-2131 Don't skip Avro validation"}, {"oid": "7754163c5de312424042640d704bf3b89c931d2e", "committedDate": "2022-12-08 13:10:26 +0100", "message": "DBZ-2432: Fixing misuse of assertj"}, {"oid": "8ca5e0a9b51e5a14ac9e8fd342ffae3e12052428", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-4669 Reformat after plugin version consolidation"}, {"oid": "553cb9b1dd7beb8fa131ebe019dac874fdb30ea9", "committedDate": "2023-01-18 14:46:14 +0100", "message": "DBZ-5879 Add wait to tests in order to maintain expectations of existing integration tests"}, {"oid": "1ec41fa12049f34c3461563fa572f68d82481477", "committedDate": "2023-01-18 14:46:14 +0100", "message": "DBZ-5879 Added logging; removed commented out code"}, {"oid": "2fea067cca87ab4891af46f4f2456b8be1362381", "committedDate": "2023-05-26 05:48:34 +0200", "message": "DBZ-5252 Allow skipping records in test consumer"}, {"oid": "7338fde84e9b0e280b946059f378dcfd3384864d", "committedDate": "2023-06-07 07:36:58 +0200", "message": "DBZ-6424 Emit JMX Notification when Debezium generate its own notification"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4ODgwNA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517288804", "body": "Channge to call of `isStreamingRunning`", "bodyText": "Channge to call of isStreamingRunning", "bodyHTML": "<p dir=\"auto\">Channge to call of <code>isStreamingRunning</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:50:16Z", "path": "debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java", "diffHunk": "@@ -1052,12 +1053,23 @@ public static void waitForStreamingRunning(String connector, String server, Stri\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n                 .atMost(60, TimeUnit.SECONDS)\n                 .ignoreException(InstanceNotFoundException.class)\n-                .until(() -> {\n-                    boolean connected = (boolean) mbeanServer\n-                            .getAttribute(getStreamingMetricsObjectName(connector, server, contextName), \"Connected\");\n+                .until(() -> (boolean) mbeanServer", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\nindex 993f42ec9..9fb9ec103 100644\n--- a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n+++ b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n", "chunk": "@@ -1045,16 +1050,13 @@ public static void waitForStreamingRunning(String connector, String server) thro\n         waitForStreamingRunning(connector, server, \"streaming\");\n     }\n \n-    public static void waitForStreamingRunning(String connector, String server, String contextName) throws InterruptedException {\n-        final MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n-\n+    public static void waitForStreamingRunning(String connector, String server, String contextName) {\n         Awaitility.await()\n                 .alias(\"Streaming was not started on time\")\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n-                .atMost(60, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 30, TimeUnit.SECONDS)\n                 .ignoreException(InstanceNotFoundException.class)\n-                .until(() -> (boolean) mbeanServer\n-                        .getAttribute(getStreamingMetricsObjectName(connector, server, contextName), \"Connected\"));\n+                .until(() -> isStreamingRunning(connector, server, contextName));\n     }\n \n     public static boolean isStreamingRunning(String connector, String server) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\nindex 993f42ec9..9fb9ec103 100644\n--- a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n+++ b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n", "chunk": "@@ -1045,16 +1050,13 @@ public static void waitForStreamingRunning(String connector, String server) thro\n         waitForStreamingRunning(connector, server, \"streaming\");\n     }\n \n-    public static void waitForStreamingRunning(String connector, String server, String contextName) throws InterruptedException {\n-        final MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n-\n+    public static void waitForStreamingRunning(String connector, String server, String contextName) {\n         Awaitility.await()\n                 .alias(\"Streaming was not started on time\")\n                 .pollInterval(100, TimeUnit.MILLISECONDS)\n-                .atMost(60, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 30, TimeUnit.SECONDS)\n                 .ignoreException(InstanceNotFoundException.class)\n-                .until(() -> (boolean) mbeanServer\n-                        .getAttribute(getStreamingMetricsObjectName(connector, server, contextName), \"Connected\"));\n+                .until(() -> isStreamingRunning(connector, server, contextName));\n     }\n \n     public static boolean isStreamingRunning(String connector, String server) {\n", "next_change": {"commit": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "changed_code": [{"header": "diff --git a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\nindex 9fb9ec103..b6fc9aabc 100644\n--- a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n+++ b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n", "chunk": "@@ -1059,6 +1064,13 @@ public static void waitForStreamingRunning(String connector, String server, Stri\n                 .until(() -> isStreamingRunning(connector, server, contextName));\n     }\n \n+    public static void waitForConnectorShutdown(String connector, String server) {\n+        Awaitility.await()\n+                .pollInterval(200, TimeUnit.MILLISECONDS)\n+                .atMost(waitTimeForRecords() * 30, TimeUnit.SECONDS)\n+                .until(() -> !isStreamingRunning(connector, server));\n+    }\n+\n     public static boolean isStreamingRunning(String connector, String server) {\n         return isStreamingRunning(connector, server, \"streaming\");\n     }\n", "next_change": {"commit": "7394ecfd62ceaf8f0c01ed4301d5d80cf9b9f6cb", "changed_code": [{"header": "diff --git a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\nindex b6fc9aabc..da9fd1ce0 100644\n--- a/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n+++ b/debezium-embedded/src/test/java/io/debezium/embedded/AbstractConnectorTest.java\n", "chunk": "@@ -1072,7 +1072,7 @@ public static void waitForConnectorShutdown(String connector, String server) {\n     }\n \n     public static boolean isStreamingRunning(String connector, String server) {\n-        return isStreamingRunning(connector, server, \"streaming\");\n+        return isStreamingRunning(connector, server, getStreamingNamespace());\n     }\n \n     public static boolean isStreamingRunning(String connector, String server, String contextName) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "aff1df75738c8f0353bf83bbb95080a801f63ace", "committedDate": "2020-11-16 07:47:25 +0100", "message": "DBZ-2637 fix unit test timeouts"}, {"oid": "b7fede7d53bda04a779d29e80e9ccaf499674619", "committedDate": "2020-11-27 17:33:23 +0100", "message": "DBZ-735 Verify Avro serialization"}, {"oid": "aa674842a3c65610aea1d8793c1ea452d67b35c8", "committedDate": "2021-01-14 17:02:04 +0100", "message": "DBZ-2923 Improving test stability"}, {"oid": "7394ecfd62ceaf8f0c01ed4301d5d80cf9b9f6cb", "committedDate": "2021-02-16 10:02:17 +0100", "message": "DBZ-3099 Make streaming MBean name configurable in tests"}, {"oid": "260c32cf0efeec695f51be07ec3559d780d36aea", "committedDate": "2021-05-06 05:37:36 +0200", "message": "DBZ-3473 Resume parallel snapshot after connector restart"}, {"oid": "58fbf88a4aab4f2fcd8d95812a9ff150f00b8c03", "committedDate": "2021-05-31 10:05:44 +0200", "message": "DBZ-400 Add a system property for number of allowed runs when no records are consumed"}, {"oid": "2140ff51be3c9414b8d1b91b3e800e84743446f9", "committedDate": "2021-10-26 18:13:16 +0200", "message": "DBZ-435 Aligned MongoDbConnectorIT test"}, {"oid": "955afddd5662be0f1f6092a55aeeb9a8d1dea52b", "committedDate": "2021-10-26 18:13:16 +0200", "message": "DBZ-435 Converting FieldBlacklistIT and MongoMetricsIT tests"}, {"oid": "d13a1635d7e00a30843000459d75bf0d06e956d5", "committedDate": "2022-02-17 07:41:00 +0100", "message": "DBZ-3952 Store schema for tables not in schema collection list"}, {"oid": "d6efe20826bbe4e18a695003b9d63705b797d08f", "committedDate": "2022-05-26 12:40:02 +0200", "message": "DBZ-5052 Move test event consumer to dedicated method."}, {"oid": "d6447a91c99a4ace745a86f8c978e3517ab2bde7", "committedDate": "2022-05-26 12:40:02 +0200", "message": "DBZ-5052 Add option to start embedded engine with custom change handler"}, {"oid": "65bfeeccead0cab8bef45843b57a8fecb16f49b4", "committedDate": "2022-07-29 12:41:58 -0400", "message": "DBZ-4727 Make wait for snapshot event generic"}, {"oid": "fc9de10a0e0fa66dd4d66928538948f998545187", "committedDate": "2022-08-19 12:55:58 +0200", "message": "DBZ-4733 adjusting poll interval in mongodb tests"}, {"oid": "09b99840d80f9735ab7bf2b0de474fc17c219c61", "committedDate": "2022-09-14 12:49:30 +0200", "message": "DBZ-4617 Deprecate internal key/value converter options"}, {"oid": "20d56734d4efeeb09e79bc74faae82a42c703df8", "committedDate": "2022-09-19 17:15:29 +0200", "message": "DBZ-5585 Modify the Instantiator to not require classloader"}, {"oid": "820b9d10d5c7c81d1f8f11abd58d65d7cf667f8d", "committedDate": "2022-10-11 15:38:33 +0200", "message": "DBZ-5329 Add LSN to Postgres transation ID"}, {"oid": "ee6d3ea6d619a79bd652128a96df7581ed12a185", "committedDate": "2022-11-02 08:50:26 +0100", "message": "DBZ-5779 Migrated debezium-embedded to AssertJ"}, {"oid": "0510102db57c3b86785082e01a4128f78faf48f5", "committedDate": "2022-11-09 08:44:45 +0100", "message": "DBZ-2131 Don't skip Avro validation"}, {"oid": "7754163c5de312424042640d704bf3b89c931d2e", "committedDate": "2022-12-08 13:10:26 +0100", "message": "DBZ-2432: Fixing misuse of assertj"}, {"oid": "8ca5e0a9b51e5a14ac9e8fd342ffae3e12052428", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-4669 Reformat after plugin version consolidation"}, {"oid": "553cb9b1dd7beb8fa131ebe019dac874fdb30ea9", "committedDate": "2023-01-18 14:46:14 +0100", "message": "DBZ-5879 Add wait to tests in order to maintain expectations of existing integration tests"}, {"oid": "1ec41fa12049f34c3461563fa572f68d82481477", "committedDate": "2023-01-18 14:46:14 +0100", "message": "DBZ-5879 Added logging; removed commented out code"}, {"oid": "2fea067cca87ab4891af46f4f2456b8be1362381", "committedDate": "2023-05-26 05:48:34 +0200", "message": "DBZ-5252 Allow skipping records in test consumer"}, {"oid": "7338fde84e9b0e280b946059f378dcfd3384864d", "committedDate": "2023-06-07 07:36:58 +0200", "message": "DBZ-6424 Emit JMX Notification when Debezium generate its own notification"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4OTgwMg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517289802", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:52:14Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java", "diffHunk": "@@ -18,11 +18,11 @@\n  */\n public class ConnectorConfiguration {\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n     private final ObjectNode configNode;\n \n     protected ConnectorConfiguration() {\n-        this.configNode = this.mapper.createObjectNode();\n+        ObjectMapper mapper = new ObjectMapper();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java\nindex e22fbfe47..5154bf47c 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java\n", "chunk": "@@ -21,7 +21,7 @@ public class ConnectorConfiguration {\n     private final ObjectNode configNode;\n \n     protected ConnectorConfiguration() {\n-        ObjectMapper mapper = new ObjectMapper();\n+        final ObjectMapper mapper = new ObjectMapper();\n         this.configNode = mapper.createObjectNode();\n         this.configNode.put(\"tasks.max\", 1);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java\nindex e22fbfe47..5154bf47c 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/ConnectorConfiguration.java\n", "chunk": "@@ -21,7 +21,7 @@ public class ConnectorConfiguration {\n     private final ObjectNode configNode;\n \n     protected ConnectorConfiguration() {\n-        ObjectMapper mapper = new ObjectMapper();\n+        final ObjectMapper mapper = new ObjectMapper();\n         this.configNode = mapper.createObjectNode();\n         this.configNode.put(\"tasks.max\", 1);\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "e85ae93fbc553f849f8d63c92d210eff36379af9", "committedDate": "2020-12-08 11:06:49 +0100", "message": "DBZ-2808 Add Mongo DB default config helper to ConnectorConfiguration"}, {"oid": "c762143178a829eee9c7ef33f01794006c8c79c1", "committedDate": "2022-05-18 08:52:29 +0200", "message": "DBZ-4867 Do not set `database.dbname` for SQL Server"}, {"oid": "24fe8fe57279e3af0af9e8542a713a976c60e12d", "committedDate": "2023-02-21 18:31:57 +0100", "message": "DBZ-6136 Add toJson to TestContainers ConnectorConfiguration impl"}, {"oid": "434833e179caf32b9d8ca1c87eb2c9a304c1ed59", "committedDate": "2023-04-11 22:57:35 +0200", "message": "DBZ-6306 Use connection string configuration in ConnectorConfiguration#forMongoDbContainer"}, {"oid": "21e3c144912fb60041a2ee4b1e63d64d6169b2f6", "committedDate": "2023-05-01 11:35:47 -0400", "message": "DBZ-6363 Support for MongoDB tests in UI build with Debezium 2.2"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MDE2OA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517290168", "body": "Should be `KAFKA_CONNECT_PORT`?", "bodyText": "Should be KAFKA_CONNECT_PORT?", "bodyHTML": "<p dir=\"auto\">Should be <code>KAFKA_CONNECT_PORT</code>?</p>", "author": "jpechane", "createdAt": "2020-11-04T11:53:05Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -68,10 +77,42 @@ public DebeziumContainer withKafka(final Network network, final String bootstrap\n         return self();\n     }\n \n+    public String getTarget() {\n+        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5MTM1Nw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517391357", "bodyText": "That's the same method as before it just moved up. the env var is container specific. this code uses the Testcontainers API to get the correct values.", "author": "rk3rn3r", "createdAt": "2020-11-04T14:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MDE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -77,6 +77,10 @@ public DebeziumContainer withKafka(final Network network, final String bootstrap\n         return self();\n     }\n \n+    public static int waitTimeForRecords() {\n+        return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"2\"));\n+    }\n+\n     public String getTarget() {\n         return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -77,6 +77,10 @@ public DebeziumContainer withKafka(final Network network, final String bootstrap\n         return self();\n     }\n \n+    public static int waitTimeForRecords() {\n+        return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"2\"));\n+    }\n+\n     public String getTarget() {\n         return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n     }\n", "next_change": {"commit": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..ea0592169 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -77,6 +77,11 @@ public DebeziumContainer withKafka(final Network network, final String bootstrap\n         return self();\n     }\n \n+    public DebeziumContainer enableApicurioConverters() {\n+        withEnv(\"ENABLE_APICURIO_CONVERTERS\", \"true\");\n+        return self();\n+    }\n+\n     public static int waitTimeForRecords() {\n         return Integer.parseInt(System.getProperty(TEST_PROPERTY_PREFIX + \"records.waittime\", \"2\"));\n     }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex ea0592169..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -87,49 +95,73 @@ public static int waitTimeForRecords() {\n     }\n \n     public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(KAFKA_CONNECT_PORT);\n     }\n \n     /**\n      * Returns the \"/connectors/<connector>\" endpoint.\n      */\n-    public String getConnectorsURI() {\n+    public String getConnectorsUri() {\n         return getTarget() + \"/connectors/\";\n     }\n \n     /**\n      * Returns the \"/connectors/<connector>\" endpoint.\n      */\n-    public String getConnectorURI(String connectorName) {\n-        return getConnectorsURI() + connectorName;\n+    public String getConnectorUri(String connectorName) {\n+        return getConnectorsUri() + connectorName;\n+    }\n+\n+    /**\n+     * Returns the \"/connectors/<connector>/pause\" endpoint.\n+     */\n+    public String getPauseConnectorUri(String connectorName) {\n+        return getConnectorUri(connectorName) + \"/pause\";\n     }\n \n     /**\n      * Returns the \"/connectors/<connector>/pause\" endpoint.\n      */\n-    public String getPauseConnectorURI(String connectorName) {\n-        return getConnectorURI(connectorName) + \"/pause\";\n+    public String getResumeConnectorUri(String connectorName) {\n+        return getConnectorUri(connectorName) + \"/resume\";\n     }\n \n     /**\n      * Returns the \"/connectors/<connector>/status\" endpoint.\n      */\n-    public String getConnectorStatusURI(String connectorName) {\n-        return getConnectorURI(connectorName) + \"/status\";\n+    public String getConnectorStatusUri(String connectorName) {\n+        return getConnectorUri(connectorName) + \"/status\";\n+    }\n+\n+    /**\n+     * Returns the \"/connectors/<connector>/config\" endpoint.\n+     */\n+    public String getConnectorConfigUri(String connectorName) {\n+        return getConnectorUri(connectorName) + \"/config\";\n     }\n \n     public void registerConnector(String name, ConnectorConfiguration configuration) {\n         final Connector connector = Connector.from(name, configuration);\n \n-        registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n+        executePOSTRequestSuccessfully(connector.toJson(), getConnectorsUri());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n+    public void updateOrCreateConnector(String name, ConnectorConfiguration newConfiguration) {\n+        executePUTRequestSuccessfully(newConfiguration.getConfiguration().toString(), getConnectorConfigUri(name));\n+\n+        // To avoid a 409 error code meanwhile connector is being configured.\n+        // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(name));\n+    }\n+\n     private static void handleFailedResponse(Response response) {\n         String responseBodyContent = \"{empty response body}\";\n         try (final ResponseBody responseBody = response.body()) {\n", "next_change": {"commit": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a447c4143..2fce5a6e8 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -164,7 +173,7 @@ public void updateOrCreateConnector(String name, ConnectorConfiguration newConfi\n \n     private static void handleFailedResponse(Response response) {\n         String responseBodyContent = \"{empty response body}\";\n-        try (final ResponseBody responseBody = response.body()) {\n+        try (ResponseBody responseBody = response.body()) {\n             if (null != responseBody) {\n                 responseBodyContent = responseBody.string();\n             }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MDk5MA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517290990", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:54:40Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MTUwOA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517291508", "body": "Is it necessary? You use try with resources. Then you can also use only `return` without helper variable.", "bodyText": "Is it necessary? You use try with resources. Then you can also use only return without helper variable.", "bodyHTML": "<p dir=\"auto\">Is it necessary? You use try with resources. Then you can also use only <code>return</code> without helper variable.</p>", "author": "jpechane", "createdAt": "2020-11-04T11:55:39Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwNjgzMQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517406831", "bodyText": "I thought that as well, but there were warnings when I introduced it without the manual closing about not closing it properly (with quarkus + resteasy) and they were gone after adding it everywhere.", "author": "rk3rn3r", "createdAt": "2020-11-04T15:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MjE5MQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517292191", "body": "Make it configurable - mind CI", "bodyText": "Make it configurable - mind CI", "bodyHTML": "<p dir=\"auto\">Make it configurable - mind CI</p>", "author": "jpechane", "createdAt": "2020-11-04T11:56:56Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzE2OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517293169", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "jpechane", "createdAt": "2020-11-04T11:58:47Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzUwOQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517293509", "body": "Method signature contains `IOException` - why do you encapsulate it?", "bodyText": "Method signature contains IOException - why do you encapsulate it?", "bodyHTML": "<p dir=\"auto\">Method signature contains <code>IOException</code> - why do you encapsulate it?</p>", "author": "jpechane", "createdAt": "2020-11-04T11:59:23Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MjQ5MA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518642490", "bodyText": "The signature was old code, I removed the exception on the signature now. This is used for integration testing. When we are not able to talk to the Container it should imo be a RuntimeException and fail because the reason can only be a wrong state created by the testing code.", "author": "rk3rn3r", "createdAt": "2020-11-06T09:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Mzc2NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517293765", "body": "Try with resources", "bodyText": "Try with resources", "bodyHTML": "<p dir=\"auto\">Try with resources</p>", "author": "jpechane", "createdAt": "2020-11-04T11:59:51Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxMDIzNw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517410237", "bodyText": "see above", "author": "rk3rn3r", "createdAt": "2020-11-04T15:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Mzc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Mzk1NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517293955", "body": "Try with resources", "bodyText": "Try with resources", "bodyHTML": "<p dir=\"auto\">Try with resources</p>", "author": "jpechane", "createdAt": "2020-11-04T12:00:12Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDE0MQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517294141", "body": "Configurable timeout", "bodyText": "Configurable timeout", "bodyHTML": "<p dir=\"auto\">Configurable timeout</p>", "author": "jpechane", "createdAt": "2020-11-04T12:00:34Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MDQ2Mw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518690463", "bodyText": "Done", "author": "rk3rn3r", "createdAt": "2020-11-06T11:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDMzMw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517294333", "body": "Configurable timeout", "bodyText": "Configurable timeout", "bodyHTML": "<p dir=\"auto\">Configurable timeout</p>", "author": "jpechane", "createdAt": "2020-11-04T12:00:57Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NDI3Mg==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518644272", "bodyText": "same as above", "author": "rk3rn3r", "createdAt": "2020-11-06T10:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDc0Nw==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517294747", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "jpechane", "createdAt": "2020-11-04T12:01:47Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDkxMQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517294911", "body": "Use try witf resorces", "bodyText": "Use try witf resorces", "bodyHTML": "<p dir=\"auto\">Use try witf resorces</p>", "author": "jpechane", "createdAt": "2020-11-04T12:02:05Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTA1OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295059", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "jpechane", "createdAt": "2020-11-04T12:02:23Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTE4NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295185", "body": "try with resources", "bodyText": "try with resources", "bodyHTML": "<p dir=\"auto\">try with resources</p>", "author": "jpechane", "createdAt": "2020-11-04T12:02:39Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTM2OQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295369", "body": "Configurable timeout", "bodyText": "Configurable timeout", "bodyHTML": "<p dir=\"auto\">Configurable timeout</p>", "author": "jpechane", "createdAt": "2020-11-04T12:03:00Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public void pauseConnector(String connectorName) throws IOException {\n+        final Request request = new Request.Builder()\n+                .url(getPauseConnectorURI(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeRequestSuccessful(request).close();\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTM5OA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295398", "body": "Configurable timeout", "bodyText": "Configurable timeout", "bodyHTML": "<p dir=\"auto\">Configurable timeout</p>", "author": "jpechane", "createdAt": "2020-11-04T12:03:05Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public void pauseConnector(String connectorName) throws IOException {\n+        final Request request = new Request.Builder()\n+                .url(getPauseConnectorURI(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeRequestSuccessful(request).close();\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n+    }\n+\n+    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NDc1Ng==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518644756", "bodyText": "same here as well", "author": "rk3rn3r", "createdAt": "2020-11-06T10:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTQ4OA==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r517295488", "body": "Configurable timeout", "bodyText": "Configurable timeout", "bodyHTML": "<p dir=\"auto\">Configurable timeout</p>", "author": "jpechane", "createdAt": "2020-11-04T12:03:16Z", "path": "debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java", "diffHunk": "@@ -84,45 +125,137 @@ private void registerConnectorToDebezium(final String payload, final String full\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = client.newCall(request).execute()) {\n+        try (Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + response.body().string());\n+                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n             }\n         }\n     }\n \n-    private boolean isConnectorConfigured(String connectorName) throws IOException {\n-        final Request request = new Request.Builder()\n-                .url(getConnector(connectorName))\n-                .build();\n+    protected static Response executeRequest(Request request) throws IOException {\n+        return CLIENT.newCall(request).execute();\n+    }\n \n-        try (Response response = client.newCall(request).execute()) {\n-            return response.isSuccessful();\n+    protected static Response executeRequestSuccessful(Request request) throws IOException {\n+        Response response = executeRequest(request);\n+        String responseBodyContent = \"{empty response body}\";\n+        if (!response.isSuccessful()) {\n+            ResponseBody responseBody = response.body();\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+                responseBody.close();\n+            }\n+            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n         }\n+        return response;\n     }\n \n-    /**\n-     * Returns the \"/connectors\" endpoint.\n-     */\n-    public String getConnectors() {\n-        return getTarget() + \"/connectors/\";\n+    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n+        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n+            boolean connectorIsNotRegistered = response.code() == 404;\n+            response.close();\n+            return connectorIsNotRegistered;\n+        }\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>\" endpoint.\n-     */\n-    public String getConnector(String connectorName) {\n-        return getConnectors() + connectorName;\n+    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n+        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n     }\n \n-    /**\n-     * Returns the \"/connectors/<connector>/status\" endpoint.\n-     */\n-    public String getConnectorStatus(String connectorName) {\n-        return getConnectors() + connectorName + \"/status\";\n+    public void deleteConnector(String connectorName) throws IOException {\n+        deleteDebeziumConnector(connectorName);\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public String getTarget() {\n-        return \"http://\" + getContainerIpAddress() + \":\" + getMappedPort(8083);\n+    public List<String> getRegisteredConnectors() throws IOException {\n+        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n+        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+            if (null != responseBody) {\n+                String string = responseBody.string();\n+                responseBody.close();\n+                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                });\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean isConnectorConfigured(String connectorName) throws IOException {\n+        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n+        try (Response response = executeRequest(request)) {\n+            boolean isConnectorConfigured = response.isSuccessful();\n+            response.close();\n+            return isConnectorConfigured;\n+        }\n+    }\n+\n+    public void ensureConnectorRegistered(String connectorName) {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> isConnectorConfigured(connectorName));\n+    }\n+\n+    public void deleteAllConnectors() throws IOException {\n+        List<String> connectorNames = getRegisteredConnectors();\n+\n+        for (String connectorName : connectorNames) {\n+            deleteDebeziumConnector(connectorName);\n+        }\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getRegisteredConnectors().size() == 0);\n+    }\n+\n+    public Connector.State getConnectorState(String connectorName) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n+        ResponseBody responseBody = executeRequestSuccessful(request).body();\n+        if (null != responseBody) {\n+            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+            responseBody.close();\n+            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        }\n+        return null;\n+    }\n+\n+    public void pauseConnector(String connectorName) throws IOException {\n+        final Request request = new Request.Builder()\n+                .url(getPauseConnectorURI(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeRequestSuccessful(request).close();\n+\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n+    }\n+\n+    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == status);\n+    }\n+\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+        Awaitility.await()\n+                .atMost(10, TimeUnit.SECONDS)", "originalCommit": "0a1fe2c0a0eb880a376a1e2574f76e347ef69766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NTE1NQ==", "url": "https://github.com/debezium/debezium/pull/1928#discussion_r518645155", "bodyText": "same here", "author": "rk3rn3r", "createdAt": "2020-11-06T10:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "db1013080455093ef5190c940a0da6c9d94132a1", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 22c4089a8..a1d098b63 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -109,153 +113,172 @@ public String getConnectorStatusURI(String connectorName) {\n         return getConnectorURI(connectorName) + \"/status\";\n     }\n \n-    public void registerConnector(String name, ConnectorConfiguration configuration) throws IOException {\n-        Connector connector = Connector.from(name, configuration);\n+    public void registerConnector(String name, ConnectorConfiguration configuration) {\n+        final Connector connector = Connector.from(name, configuration);\n \n         registerConnectorToDebezium(connector.toJson(), getConnectorsURI());\n \n         // To avoid a 409 error code meanwhile connector is being configured.\n         // This is just a guard, probably in most of use cases you won't need that as preparation time of the test might be enough to configure connector.\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connector.getName()));\n     }\n \n-    private void registerConnectorToDebezium(final String payload, final String fullUrl) throws IOException {\n+    private static void handleFailedResponse(Response response) {\n+        String responseBodyContent = \"{empty response body}\";\n+        try (final ResponseBody responseBody = response.body()) {\n+            if (null != responseBody) {\n+                responseBodyContent = responseBody.string();\n+            }\n+            throw new IllegalStateException(\"Unexpected response: \" + response + \" ; Response Body: \" + responseBodyContent);\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n+    }\n+\n+    private void registerConnectorToDebezium(final String payload, final String fullUrl) {\n         final RequestBody body = RequestBody.create(payload, JSON);\n         final Request request = new Request.Builder().url(fullUrl).post(body).build();\n \n-        try (Response response = CLIENT.newCall(request).execute()) {\n+        try (final Response response = CLIENT.newCall(request).execute()) {\n             if (!response.isSuccessful()) {\n-                throw new IOException(\"Unexpected code \" + response + \"Message: \" + Objects.requireNonNull(response.body()).string());\n+                handleFailedResponse(response);\n             }\n         }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequest(Request request) throws IOException {\n-        return CLIENT.newCall(request).execute();\n+    protected static Response executeGETRequest(Request request) {\n+        try {\n+            return CLIENT.newCall(request).execute();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(\"Error connecting to Debezium container\", e);\n+        }\n     }\n \n-    protected static Response executeRequestSuccessful(Request request) throws IOException {\n-        Response response = executeRequest(request);\n-        String responseBodyContent = \"{empty response body}\";\n-        if (!response.isSuccessful()) {\n-            ResponseBody responseBody = response.body();\n-            if (null != responseBody) {\n-                responseBodyContent = responseBody.string();\n-                responseBody.close();\n+    protected static Response executeGETRequestSuccessfully(Request request) {\n+        try (final Response response = executeGETRequest(request)) {\n+            if (!response.isSuccessful()) {\n+                handleFailedResponse(response);\n             }\n-            throw new IOException(\"Unexpected response: \" + response + \" Response Body: \" + responseBodyContent);\n+            return response;\n         }\n-        return response;\n     }\n \n-    public boolean connectorIsNotRegistered(String connectorName) throws IOException {\n-        try (Response response = executeRequest(new Request.Builder().url(getConnectorURI(connectorName)).get().build())) {\n-            boolean connectorIsNotRegistered = response.code() == 404;\n-            response.close();\n-            return connectorIsNotRegistered;\n+    public boolean connectorIsNotRegistered(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.code() == 404;\n         }\n     }\n \n-    protected void deleteDebeziumConnector(String connectorName) throws IOException {\n-        executeRequestSuccessful(new Request.Builder().url(getConnectorURI(connectorName)).delete().build()).close();\n+    protected void deleteDebeziumConnector(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).delete().build();\n+        executeGETRequestSuccessfully(request).close();\n     }\n \n-    public void deleteConnector(String connectorName) throws IOException {\n+    public void deleteConnector(String connectorName) {\n         deleteDebeziumConnector(connectorName);\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> connectorIsNotRegistered(connectorName));\n     }\n \n-    public List<String> getRegisteredConnectors() throws IOException {\n-        Request request = new Request.Builder().url(getConnectorsURI()).get().build();\n-        try (ResponseBody responseBody = executeRequestSuccessful(request).body()) {\n+    public List<String> getRegisteredConnectors() {\n+        final Request request = new Request.Builder().url(getConnectorsURI()).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n             if (null != responseBody) {\n-                String string = responseBody.string();\n-                responseBody.close();\n-                return MAPPER.readValue(string, new TypeReference<List<String>>() {\n+                return MAPPER.readValue(responseBody.string(), new TypeReference<List<String>>() {\n                 });\n             }\n         }\n         catch (IOException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalStateException(\"Error fetching list of registered connectors\", e);\n         }\n         return Collections.emptyList();\n     }\n \n-    public boolean isConnectorConfigured(String connectorName) throws IOException {\n-        Request request = new Request.Builder().url(getConnectorURI(connectorName)).get().build();\n-        try (Response response = executeRequest(request)) {\n-            boolean isConnectorConfigured = response.isSuccessful();\n-            response.close();\n-            return isConnectorConfigured;\n+    public boolean isConnectorConfigured(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorURI(connectorName)).build();\n+        try (final Response response = executeGETRequest(request)) {\n+            return response.isSuccessful();\n         }\n     }\n \n     public void ensureConnectorRegistered(String connectorName) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> isConnectorConfigured(connectorName));\n     }\n \n-    public void deleteAllConnectors() throws IOException {\n-        List<String> connectorNames = getRegisteredConnectors();\n+    public void deleteAllConnectors() {\n+        final List<String> connectorNames = getRegisteredConnectors();\n \n         for (String connectorName : connectorNames) {\n             deleteDebeziumConnector(connectorName);\n         }\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getRegisteredConnectors().size() == 0);\n     }\n \n-    public Connector.State getConnectorState(String connectorName) throws IOException {\n-        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+    public Connector.State getConnectorState(String connectorName) {\n+        final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).build();\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"connector\").get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector state for connector: \" + connectorName, e);\n         }\n-        return null;\n     }\n \n-    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) throws IOException {\n+    public Connector.State getConnectorTaskState(String connectorName, int taskNumber) {\n         final Request request = new Request.Builder().url(getConnectorStatusURI(connectorName)).get().build();\n-        ResponseBody responseBody = executeRequestSuccessful(request).body();\n-        if (null != responseBody) {\n-            ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n-            responseBody.close();\n-            return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return Connector.State.valueOf(parsedObject.get(\"tasks\").get(taskNumber).get(\"state\").asText());\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector task state for connector task: \"\n+                    + connectorName + \"#\" + taskNumber, e);\n         }\n-        return null;\n     }\n \n-    public void pauseConnector(String connectorName) throws IOException {\n+    public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n                 .url(getPauseConnectorURI(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n-        executeRequestSuccessful(request).close();\n+        executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n-    public void ensureConnectorState(String connectorName, Connector.State status) throws IOException {\n+    public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n-    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) throws IOException {\n+    public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(10, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n }\n", "next_change": {"commit": "954790e0ebda37669d9daada6472c57befd3a8be", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex a1d098b63..665cdf011 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -281,4 +293,40 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public static String getDebeziumStableVersion() {\n+        String DEBEZIUM_VERSION = \"\";\n+        try {\n+            URL url = new URL(\"https://hub.docker.com/v2/repositories/debezium/connect/tags/\");\n+            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n+            httpsURLConnection.setRequestMethod(\"GET\");\n+\n+            int responseCode = httpsURLConnection.getResponseCode();\n+\n+            if (responseCode == HttpsURLConnection.HTTP_OK) {\n+                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n+                String content;\n+                StringBuilder response = new StringBuilder();\n+\n+                while ((content = bufferedReader.readLine()) != null) {\n+                    response.append(content);\n+                }\n+\n+                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n+                Matcher matcher = pattern.matcher(response);\n+\n+                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n+\n+                while(matcher.find()) {\n+                    STABLE_VERSION_LIST.add(matcher.group());\n+                }\n+\n+                Collections.sort(STABLE_VERSION_LIST);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return DEBEZIUM_VERSION;\n+    }\n }\n", "next_change": {"commit": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 665cdf011..9bae2be12 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -317,15 +316,16 @@ public static String getDebeziumStableVersion() {\n \n                 List<String> STABLE_VERSION_LIST = new ArrayList<>();\n \n-                while(matcher.find()) {\n+                while (matcher.find()) {\n                     STABLE_VERSION_LIST.add(matcher.group());\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size()-1);\n+                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n         }\n         return DEBEZIUM_VERSION;\n     }\n", "next_change": {"commit": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 9bae2be12..585b01b07 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -321,12 +321,12 @@ public static String getDebeziumStableVersion() {\n                 }\n \n                 Collections.sort(STABLE_VERSION_LIST);\n-                DEBEZIUM_VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n+                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n             }\n         }\n         catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n-        return DEBEZIUM_VERSION;\n+        return VERSION;\n     }\n }\n", "next_change": {"commit": "2b76063368bea485c4163b318a9a68ee7b63704a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 585b01b07..4a63ca280 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -292,41 +284,4 @@ public void ensureConnectorTaskState(String connectorName, int taskNumber, Conne\n                 .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n-\n-    public static String getStableVersion(String endpoint) {\n-        String VERSION = \"\";\n-        try {\n-            URL url = new URL(endpoint);\n-            HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();\n-            httpsURLConnection.setRequestMethod(\"GET\");\n-\n-            int responseCode = httpsURLConnection.getResponseCode();\n-\n-            if (responseCode == HttpsURLConnection.HTTP_OK) {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpsURLConnection.getInputStream()));\n-                String content;\n-                StringBuilder response = new StringBuilder();\n-\n-                while ((content = bufferedReader.readLine()) != null) {\n-                    response.append(content);\n-                }\n-\n-                Pattern pattern = Pattern.compile(\"\\\\d.\\\\d.\\\\d.Final\");\n-                Matcher matcher = pattern.matcher(response);\n-\n-                List<String> STABLE_VERSION_LIST = new ArrayList<>();\n-\n-                while (matcher.find()) {\n-                    STABLE_VERSION_LIST.add(matcher.group());\n-                }\n-\n-                Collections.sort(STABLE_VERSION_LIST);\n-                VERSION = STABLE_VERSION_LIST.get(STABLE_VERSION_LIST.size() - 1);\n-            }\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return VERSION;\n-    }\n }\n", "next_change": {"commit": "f026f962f278cf95e44cc0ea2364de2d1469002a", "changed_code": [{"header": "diff --git a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\nindex 4a63ca280..a447c4143 100644\n--- a/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n+++ b/debezium-testing/debezium-testing-testcontainers/src/main/java/io/debezium/testing/testcontainers/DebeziumContainer.java\n", "chunk": "@@ -261,27 +308,73 @@ public Connector.State getConnectorTaskState(String connectorName, int taskNumbe\n         }\n     }\n \n+    public String getConnectorConfigProperty(String connectorName, String configPropertyName) {\n+        final Request request = new Request.Builder().url(getConnectorConfigUri(connectorName)).get().build();\n+\n+        try (final ResponseBody responseBody = executeGETRequestSuccessfully(request).body()) {\n+            if (null != responseBody) {\n+                final ObjectNode parsedObject = (ObjectNode) MAPPER.readTree(responseBody.string());\n+                return parsedObject.get(configPropertyName).asText();\n+            }\n+            return null;\n+        }\n+        catch (IOException e) {\n+            throw new IllegalStateException(\"Error fetching connector config property for connector: \" + connectorName, e);\n+        }\n+    }\n+\n     public void pauseConnector(String connectorName) {\n         final Request request = new Request.Builder()\n-                .url(getPauseConnectorURI(connectorName))\n+                .url(getPauseConnectorUri(connectorName))\n                 .put(RequestBody.create(\"\", JSON))\n                 .build();\n         executeGETRequestSuccessfully(request).close();\n \n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == Connector.State.PAUSED);\n     }\n \n+    public void resumeConnector(String connectorName) {\n+        final Request request = new Request.Builder()\n+                .url(getResumeConnectorUri(connectorName))\n+                .put(RequestBody.create(\"\", JSON))\n+                .build();\n+        executeGETRequestSuccessfully(request).close();\n+\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> getConnectorState(connectorName) == Connector.State.RUNNING);\n+    }\n+\n     public void ensureConnectorState(String connectorName, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorState(connectorName) == status);\n     }\n \n     public void ensureConnectorTaskState(String connectorName, int taskNumber, Connector.State status) {\n         Awaitility.await()\n-                .atMost(waitTimeForRecords() * 5, TimeUnit.SECONDS)\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n                 .until(() -> getConnectorTaskState(connectorName, taskNumber) == status);\n     }\n+\n+    public void ensureConnectorConfigProperty(String connectorName, String propertyName, String expectedValue) {\n+        Awaitility.await()\n+                .atMost(waitTimeForRecords() * 5L, TimeUnit.SECONDS)\n+                .until(() -> Objects.equals(expectedValue, getConnectorConfigProperty(connectorName, propertyName)));\n+    }\n+\n+    public static ConnectorConfiguration getPostgresConnectorConfiguration(PostgreSQLContainer<?> postgresContainer, int id, String... options) {\n+        final ConnectorConfiguration config = ConnectorConfiguration.forJdbcContainer(postgresContainer)\n+                .with(\"database.server.name\", \"dbserver\" + id)\n+                .with(\"slot.name\", \"debezium_\" + id);\n+\n+        if (options != null && options.length > 0) {\n+            for (int i = 0; i < options.length; i += 2) {\n+                config.with(options[i], options[i + 1]);\n+            }\n+        }\n+        return config;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f291b07b6b12a02861bdc0cea1025759beeaa4e7", "message": "Merge commit", "committedDate": null}, {"oid": "24e7502796baf0daf77f807570a74561f079552d", "committedDate": "2020-12-04 13:51:23 +0100", "message": "DBZ-2827 fix try-with-resources block should not be used when OkHttp Response object is returned in DebeziumContainer"}, {"oid": "c5c29e1c0434395511aadc72e64935bdfcd655d2", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Centralize Apicurio image for Testcontainers"}, {"oid": "954790e0ebda37669d9daada6472c57befd3a8be", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Fetch stable Debezium version for Testcontainers"}, {"oid": "b5b8ef358b3cd03ea4dcf5a59b78fcbfaf63e2ab", "committedDate": "2021-01-08 13:19:57 +0100", "message": "DBZ-2764 Misc. clean-up"}, {"oid": "8fb835f17ff114c3e8ba63cc908f9b62a6b0667e", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Fetch correct latest apicurio version for testcontainers"}, {"oid": "2b76063368bea485c4163b318a9a68ee7b63704a", "committedDate": "2021-01-19 16:27:35 +0100", "message": "DBZ-2945 Extracting versions helper"}, {"oid": "f026f962f278cf95e44cc0ea2364de2d1469002a", "committedDate": "2021-02-03 15:21:50 +0100", "message": "DBZ-3024 Migrate DebeziumContainer enhancements for DBZ-2950 and DBZ-2952 into main repository * apply PR feedback"}, {"oid": "96fc521f85dc840e523362bd70968add0af6abaf", "committedDate": "2021-06-15 14:16:25 +0200", "message": "DBZ-3171 Use Apicurio 2.0"}, {"oid": "36af61b7890c8a4d58b5cb3a2371b94f3e6aaf98", "committedDate": "2021-08-23 12:34:03 +0200", "message": "DBZ-3889 Moving ContainerImageVersions to core for broader re-use and using it in two more places"}, {"oid": "b92dd83c44e42a1bf76c7aed9a95f8038f6330e0", "committedDate": "2022-05-23 17:23:53 +0200", "message": "DBZ-5159 Fix possible NPE when checking connector task state"}, {"oid": "0823cedf2541b276753c6754a5181ccf81ff8ae2", "committedDate": "2022-09-07 12:57:31 +0200", "message": "DBZ-5043 Replace database.server.name with topic.prefix"}, {"oid": "59f6df822835b27207393b96e0a13393217dd703", "committedDate": "2022-09-13 08:59:21 +0200", "message": "DBZ-5601 Switch Debezium test containers to nightly"}, {"oid": "82e37a68d4d1a4f4375875c5bc47ced120ddfc2d", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 More reliable wait strategy for DebeziumContainer"}, {"oid": "6ec3472a578e75db10eb41459a6a275fe23e2d88", "committedDate": "2022-09-29 05:38:43 +0200", "message": "DBZ-5651 Reduce default wait and make it configurable"}, {"oid": "e5d16b14a65d25d0c0e23c9ee076b8d9c640f02e", "committedDate": "2023-01-11 06:44:53 +0100", "message": "DBZ-2439 Remove redundant modifiers"}, {"oid": "9307019441a5dc8a2b786e049862c5908c8ce41c", "committedDate": "2023-03-22 19:58:48 +0100", "message": "DBZ-6244 Support ImageFromDockerfile syntax with testcontainers"}, {"oid": "44f2f40c56643728dc38ab61ae03e5b56da09ab9", "committedDate": "2023-04-12 14:07:35 +0200", "message": "DBZ-6216 Update testcontainers to use quay.io images"}, {"oid": "e91f483062b16dbf8ed75fbc8679a5295c9fd319", "committedDate": "2023-05-18 11:08:03 -0400", "message": "DBZ-5339 Enable Jolokia using DebeziumContainer class"}]}, {"oid": "db1013080455093ef5190c940a0da6c9d94132a1", "url": "https://github.com/debezium/debezium/commit/db1013080455093ef5190c940a0da6c9d94132a1", "message": "DBZ-2724 cleanup code and apply PR feedback", "committedDate": "2020-11-09T12:49:10Z", "type": "commit"}, {"oid": "db1013080455093ef5190c940a0da6c9d94132a1", "url": "https://github.com/debezium/debezium/commit/db1013080455093ef5190c940a0da6c9d94132a1", "message": "DBZ-2724 cleanup code and apply PR feedback", "committedDate": "2020-11-09T12:49:10Z", "type": "forcePushed"}]}