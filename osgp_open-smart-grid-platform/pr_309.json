{"pr_number": 309, "pr_title": "Feature/flex 5174 kafka tests", "pr_author": "robindenadel", "pr_createdAt": "2020-05-05T07:46:44Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/309", "timeline": [{"oid": "b817768314734793eb5711c7046e7659c5ba675a", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b817768314734793eb5711c7046e7659c5ba675a", "message": "FLEX-5174: Adds a producer test.", "committedDate": "2020-05-05T07:39:59Z", "type": "commit"}, {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bb9d29807a3308e84d810cb2e61df932b9491b31", "message": "FLEX-5174: Adds license header; removes unnecessary call.", "committedDate": "2020-05-05T07:44:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyODU3Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r419928576", "body": "![INFO](https://sonarsource.github.io/sonar-github/severity-info.png 'Severity: INFO') Complete the task associated to this TODO comment. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](http://ci.opensmartgridplatform.org/sonarqube/coding_rules#rule_key=squid%3AS1135)\n", "bodyText": "Complete the task associated to this TODO comment.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/a59bbc935b09d221e76be76443469ac9de22f19c879fed4fa25b4eb03ad53f5a/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d696e666f2e706e67\"><img src=\"https://camo.githubusercontent.com/a59bbc935b09d221e76be76443469ac9de22f19c879fed4fa25b4eb03ad53f5a/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d696e666f2e706e67\" alt=\"INFO\" title=\"Severity: INFO\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/severity-info.png\" style=\"max-width: 100%;\"></a> Complete the task associated to this TODO comment. <a href=\"http://ci.opensmartgridplatform.org/sonarqube/coding_rules#rule_key=squid%3AS1135\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/90a66c56e56d5e4647676830313fa0693466067889c4c7dc2d7519da5a924230/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f72756c652e706e67\" alt=\"rule\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/rule.png\" style=\"max-width: 100%;\"></a></p>", "author": "jenkins-ip-10-4-24-184", "createdAt": "2020-05-05T07:59:35Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -11,12 +11,18 @@\n // TODO - Rename class once AVRO message format is known", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3Nzc5MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420077790", "body": "I'm always forgetting this injection functionality of Spring. Better then injecting the properties! \ud83d\udc4d ", "bodyText": "I'm always forgetting this injection functionality of Spring. Better then injecting the properties! \ud83d\udc4d", "bodyHTML": "<p dir=\"auto\">I'm always forgetting this injection functionality of Spring. Better then injecting the properties! <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "rlemmers", "createdAt": "2020-05-05T12:41:58Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -11,12 +11,18 @@\n // TODO - Rename class once AVRO message format is known\n @Service\n public class MeterReadingProducer {\n-    @Autowired\n-    @Qualifier(\"distributionAutomationKafkaTemplate\")\n-    private KafkaTemplate<String, MeterReading> kafkaTemplate;\n+\n+    private final KafkaTemplate<String, MeterReading> kafkaTemplate;\n+\n+    private final DistributionAutomationMapper mapper;\n \n     @Autowired\n-    private DistributionAutomationMapper mapper;\n+    public MeterReadingProducer(", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3OTEzNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420079134", "body": "Can we throw a runtime exception instead? It will help to end the test right away, instead of proceeding with corrupt data.", "bodyText": "Can we throw a runtime exception instead? It will help to end the test right away, instead of proceeding with corrupt data.", "bodyHTML": "<p dir=\"auto\">Can we throw a runtime exception instead? It will help to end the test right away, instead of proceeding with corrupt data.</p>", "author": "rlemmers", "createdAt": "2020-05-05T12:44:12Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingDeserializer.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+\n+public class MeterReadingDeserializer implements Deserializer<MeterReading> {\n+\n+    @Override\n+    public MeterReading deserialize(final String topic, final byte[] data) {\n+        try {\n+            return MeterReading.fromByteBuffer(ByteBuffer.wrap(data));\n+        } catch (final IOException e) {\n+            e.printStackTrace();\n+            return null;", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzMjE0Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420132146", "bodyText": "done so", "author": "robindenadel", "createdAt": "2020-05-05T14:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3OTEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MjMxNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420082314", "body": "What folder is ../kafka-logs/ on my local system or on a test server?", "bodyText": "What folder is ../kafka-logs/ on my local system or on a test server?", "bodyHTML": "<p dir=\"auto\">What folder is ../kafka-logs/ on my local system or on a test server?</p>", "author": "rlemmers", "createdAt": "2020-05-05T12:49:21Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwOTg3OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420109879", "bodyText": "osgp/platform/", "author": "robindenadel", "createdAt": "2020-05-05T13:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MjMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjQwNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420086406", "body": "Isn't it possible to leave out the listeners property somehow? It would be nice if the embedded broker could find a free port on its own.", "bodyText": "Isn't it possible to leave out the listeners property somehow? It would be nice if the embedded broker could find a free port on its own.", "bodyHTML": "<p dir=\"auto\">Isn't it possible to leave out the listeners property somehow? It would be nice if the embedded broker could find a free port on its own.</p>", "author": "rlemmers", "createdAt": "2020-05-05T12:56:02Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMjEwOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420112109", "bodyText": "tried that, didn't work", "author": "robindenadel", "createdAt": "2020-05-05T13:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4ODIyMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420088220", "body": "Do we need this property, when having \"auto.create.topics.enable=true\"?", "bodyText": "Do we need this property, when having \"auto.create.topics.enable=true\"?", "bodyHTML": "<p dir=\"auto\">Do we need this property, when having \"auto.create.topics.enable=true\"?</p>", "author": "rlemmers", "createdAt": "2020-05-05T12:58:54Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMjU4Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420112586", "bodyText": "tried omitting it, didn't work", "author": "robindenadel", "createdAt": "2020-05-05T13:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4ODIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4ODUxMQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420088511", "body": "Remove this empty line.", "bodyText": "Remove this empty line.", "bodyHTML": "<p dir=\"auto\">Remove this empty line.</p>", "author": "rlemmers", "createdAt": "2020-05-05T12:59:17Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",\n+                \"auto.create.topics.enable=true\" })\n+class MeterReadingProducerTest {\n+\n+    @Value(\"${distributionautomation.kafka.producer.topic}\")\n+    private String topic;\n+\n+    @Autowired\n+    private EmbeddedKafkaBroker embeddedKafka;\n+\n+    @Mock\n+    private DistributionAutomationMapper mapper;\n+\n+    @Autowired\n+    private KafkaTemplate<String, MeterReading> template;\n+\n+    private MeterReadingProducer producer;\n+    private MeterReading message;\n+\n+    @BeforeEach\n+    @SuppressWarnings(\"unchecked\")\n+    public void setup() {\n+        this.message = this.createMessage();\n+        when(this.mapper.map(any(MeasurementReport.class), any(Class.class))).thenReturn(this.message);\n+        this.producer = new MeterReadingProducer(this.template, this.mapper);\n+    }\n+\n+    @Test\n+    void sendTest() {\n+", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMjk4MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420112981", "bodyText": "if you really want that, you should modify the formatter", "author": "robindenadel", "createdAt": "2020-05-05T13:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4ODUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5MTUzMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420091532", "body": "Sander uses Arrange / Act / Assert as parts in a test. I think it's a good approach to structure a test.", "bodyText": "Sander uses Arrange / Act / Assert as parts in a test. I think it's a good approach to structure a test.", "bodyHTML": "<p dir=\"auto\">Sander uses Arrange / Act / Assert as parts in a test. I think it's a good approach to structure a test.</p>", "author": "rlemmers", "createdAt": "2020-05-05T13:04:08Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",\n+                \"auto.create.topics.enable=true\" })\n+class MeterReadingProducerTest {\n+\n+    @Value(\"${distributionautomation.kafka.producer.topic}\")\n+    private String topic;\n+\n+    @Autowired\n+    private EmbeddedKafkaBroker embeddedKafka;\n+\n+    @Mock\n+    private DistributionAutomationMapper mapper;\n+\n+    @Autowired\n+    private KafkaTemplate<String, MeterReading> template;\n+\n+    private MeterReadingProducer producer;\n+    private MeterReading message;\n+\n+    @BeforeEach\n+    @SuppressWarnings(\"unchecked\")\n+    public void setup() {\n+        this.message = this.createMessage();\n+        when(this.mapper.map(any(MeasurementReport.class), any(Class.class))).thenReturn(this.message);\n+        this.producer = new MeterReadingProducer(this.template, this.mapper);\n+    }\n+\n+    @Test\n+    void sendTest() {\n+\n+        // send a message to the kafka bus", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMzE1MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420113150", "bodyText": "for newbies it is", "author": "robindenadel", "createdAt": "2020-05-05T13:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5MTUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NzU1NA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420097554", "body": "When we receive a message, it is always mapped to the result of createMessage(), regardless of the message sent by the producer. Was this intended by this test?\r\nWith some more work, we could construct a specific MeasurementReport, which maps to the result of createMessage().", "bodyText": "When we receive a message, it is always mapped to the result of createMessage(), regardless of the message sent by the producer. Was this intended by this test?\nWith some more work, we could construct a specific MeasurementReport, which maps to the result of createMessage().", "bodyHTML": "<p dir=\"auto\">When we receive a message, it is always mapped to the result of createMessage(), regardless of the message sent by the producer. Was this intended by this test?<br>\nWith some more work, we could construct a specific MeasurementReport, which maps to the result of createMessage().</p>", "author": "rlemmers", "createdAt": "2020-05-05T13:13:13Z", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",\n+                \"auto.create.topics.enable=true\" })\n+class MeterReadingProducerTest {\n+\n+    @Value(\"${distributionautomation.kafka.producer.topic}\")\n+    private String topic;\n+\n+    @Autowired\n+    private EmbeddedKafkaBroker embeddedKafka;\n+\n+    @Mock\n+    private DistributionAutomationMapper mapper;\n+\n+    @Autowired\n+    private KafkaTemplate<String, MeterReading> template;\n+\n+    private MeterReadingProducer producer;\n+    private MeterReading message;\n+\n+    @BeforeEach\n+    @SuppressWarnings(\"unchecked\")\n+    public void setup() {\n+        this.message = this.createMessage();\n+        when(this.mapper.map(any(MeasurementReport.class), any(Class.class))).thenReturn(this.message);\n+        this.producer = new MeterReadingProducer(this.template, this.mapper);\n+    }\n+\n+    @Test\n+    void sendTest() {\n+\n+        // send a message to the kafka bus\n+        this.producer.send(new MeasurementReport.Builder().build());\n+\n+        // consume the message with embeddedKafka\n+        final Map<String, Object> consumerProps = KafkaTestUtils.consumerProps(\"testGroup\", \"true\", this.embeddedKafka);\n+        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        final ConsumerFactory<String, MeterReading> consumerFactory = new DefaultKafkaConsumerFactory<>(consumerProps,\n+                new StringDeserializer(), new MeterReadingDeserializer());\n+        final Consumer<String, MeterReading> consumer = consumerFactory.createConsumer();\n+        this.embeddedKafka.consumeFromAnEmbeddedTopic(consumer, this.topic);\n+        final ConsumerRecord<String, MeterReading> received = KafkaTestUtils.getSingleRecord(consumer, this.topic);\n+\n+        // check the consumed message\n+        assertThat(received).has(value(this.message));", "originalCommit": "bb9d29807a3308e84d810cb2e61df932b9491b31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNTM4Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420115383", "bodyText": "I think that mapping should be tested in another class.", "author": "robindenadel", "createdAt": "2020-05-05T13:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NzU1NA=="}], "type": "inlineReview"}, {"oid": "4372357940674ebde2dfb701f2aa9f96568fc451", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4372357940674ebde2dfb701f2aa9f96568fc451", "message": "FLEX-5174: Addresses review comments.", "committedDate": "2020-05-05T13:39:17Z", "type": "commit"}]}