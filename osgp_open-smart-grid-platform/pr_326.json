{"pr_number": 326, "pr_title": "FLEX-5084: Filters events on description.", "pr_author": "robindenadel", "pr_createdAt": "2020-05-15T12:16:37Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/326", "merge_commit": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "timeline": [{"oid": "3dfb8cc2c352863966303d801a74453e6b9e69e1", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3dfb8cc2c352863966303d801a74453e6b9e69e1", "message": "FLEX-5084: Filters events on description.", "committedDate": "2020-05-15T12:11:59Z", "type": "commit"}, {"oid": "a39e1a0c647413c97113514b290e986ec86d2bcc", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a39e1a0c647413c97113514b290e986ec86d2bcc", "message": "FLEX-5084: Adds cucumber tests.", "committedDate": "2020-05-18T08:57:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjY3MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426612671", "body": "Why is the index field no longer compared?", "bodyText": "Why is the index field no longer compared?", "bodyHTML": "<p dir=\"auto\">Why is the index field no longer compared?</p>", "author": "rlemmers", "createdAt": "2020-05-18T13:08:53Z", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/devicemanagement/RetrieveReceivedEventNotifications.java", "diffHunk": "@@ -113,24 +123,29 @@ public void aRetrieveEventNotificationRequestIsSent(final Map<String, String> se\n \n     @Then(\"^the retrieve event notification response contains$\")\n     public void theRetrieveEventNotificationResponseContains(final Map<String, String> expectedResponse) {\n+        final String deviceIdentification = getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+                PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION);\n         final FindEventsResponse response = (FindEventsResponse) ScenarioContext.current()\n-                .get(getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n-                        PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION).concat(\"_\").concat(PlatformKeys.RESPONSE));\n+                .get(deviceIdentification.concat(\"_\").concat(PlatformKeys.RESPONSE));\n \n         final List<org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event> events = response\n                 .getEvents();\n \n-        assertThat(events.isEmpty()).isFalse();\n+        assertThat(events).isNotEmpty();\n+        final org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event expected = this\n+                .expectedEvent(expectedResponse, deviceIdentification);\n \n-        for (final org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event e : events) {\n-            assertThat(e.getTimestamp()).isNotNull();\n-            assertThat(e.getDeviceIdentification()).isEqualTo(getString(expectedResponse,\n-                    PlatformKeys.KEY_DEVICE_IDENTIFICATION, PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION));\n-            assertThat(e.getEventType().value()).isEqualTo(getString(expectedResponse, PlatformKeys.EVENT_TYPE));\n-            assertThat(e.getDescription()).isEqualTo(getString(expectedResponse, PlatformKeys.KEY_DESCRIPTION));\n-            assertThat(e.getIndex())\n-                    .isEqualTo(getInteger(expectedResponse, PlatformKeys.KEY_INDEX, PlatformDefaults.DEFAULT_INDEX));\n-        }\n+        assertThat(events).usingElementComparatorIgnoringFields(\"timestamp\", \"index\").contains(expected);", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NDA1OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r427254059", "bodyText": "There are no scenarios where a check on index is done", "author": "robindenadel", "createdAt": "2020-05-19T12:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjY3MQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "changed_code": [{"header": "diff --git a/integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/devicemanagement/RetrieveReceivedEventNotifications.java b/integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/devicemanagement/RetrieveReceivedEventNotifications.java\nindex 83c7bad9fc..f73af75af5 100644\n--- a/integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/devicemanagement/RetrieveReceivedEventNotifications.java\n+++ b/integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/devicemanagement/RetrieveReceivedEventNotifications.java\n", "chunk": "@@ -37,196 +38,250 @@ import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityExce\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.ws.soap.client.SoapFaultClientException;\n \n-import io.cucumber.java.en.Given;\n-import io.cucumber.java.en.Then;\n-import io.cucumber.java.en.When;\n-\n-/**\n- * Class with all the create organization requests steps\n- */\n+/** Class with all the create organization requests steps */\n public class RetrieveReceivedEventNotifications {\n \n-    @Autowired\n-    private DeviceRepository deviceRepository;\n-\n-    @Autowired\n-    private EventRepository eventRepository;\n-\n-    @Autowired\n-    private CoreDeviceManagementClient client;\n-\n-    /**\n-     * There are 47 events enumerated by\n-     * {@link org.opensmartgridplatform.domain.core.valueobjects.EventType}.\n-     * This step will create an event record for every event type.\n-     */\n-    @Given(\"^all events are present for device$\")\n-    public void allEvents(final Map<String, String> data) {\n-        final Device device = this.deviceRepository\n-                .findByDeviceIdentification(getString(data, PlatformKeys.KEY_DEVICE_IDENTIFICATION));\n-\n-        for (final EventType eventType : EventType.values()) {\n-            final Event event = new Event(device, getDateTime(PlatformDefaults.TIMESTAMP).toDate(), eventType,\n-                    PlatformDefaults.DEFAULT_EVENT_DESCRIPTION, PlatformDefaults.DEFAULT_INDEX);\n-            this.eventRepository.save(event);\n-        }\n+  @Autowired private DeviceRepository deviceRepository;\n+\n+  @Autowired private EventRepository eventRepository;\n+\n+  @Autowired private CoreDeviceManagementClient client;\n+\n+  /**\n+   * There are 47 events enumerated by {@link\n+   * org.opensmartgridplatform.domain.core.valueobjects.EventType}. This step will create an event\n+   * record for every event type.\n+   */\n+  @Given(\"^all events are present for device$\")\n+  public void allEvents(final Map<String, String> data) {\n+    final String deviceIdentification = getString(data, PlatformKeys.KEY_DEVICE_IDENTIFICATION);\n+\n+    for (final EventType eventType : EventType.values()) {\n+      final Event event =\n+          new Event(\n+              deviceIdentification,\n+              getDateTime(PlatformDefaults.TIMESTAMP).toDate(),\n+              eventType,\n+              PlatformDefaults.DEFAULT_EVENT_DESCRIPTION,\n+              PlatformDefaults.DEFAULT_INDEX);\n+      this.eventRepository.save(event);\n     }\n-\n-    @Given(\"^(\\\\d+) events?$\")\n-    public void anEvent(final int amount, final Map<String, String> data) throws Exception {\n-        final Device device = this.deviceRepository\n-                .findByDeviceIdentification(getString(data, PlatformKeys.KEY_DEVICE_IDENTIFICATION));\n-\n-        for (int i = 0; i < amount; i++) {\n-            final Event event = new Event(device,\n-                    getDateTime(getString(data, PlatformKeys.TIMESTAMP, PlatformDefaults.TIMESTAMP)).toDate(),\n-                    getEnum(data, PlatformKeys.EVENT_TYPE, EventType.class, EventType.ALARM_NOTIFICATION),\n-                    getString(data, PlatformKeys.KEY_DESCRIPTION, PlatformDefaults.DEFAULT_EVENT_DESCRIPTION),\n-                    getInteger(data, PlatformKeys.KEY_INDEX, PlatformDefaults.DEFAULT_INDEX));\n-\n-            this.eventRepository.save(event);\n-        }\n+  }\n+\n+  @Given(\"^(\\\\d+) events?$\")\n+  public void anEvent(final int amount, final Map<String, String> data) throws Exception {\n+    final String deviceIdentification = getString(data, PlatformKeys.KEY_DEVICE_IDENTIFICATION);\n+\n+    for (int i = 0; i < amount; i++) {\n+      final Event event =\n+          new Event(\n+              deviceIdentification,\n+              getDateTime(getString(data, PlatformKeys.TIMESTAMP, PlatformDefaults.TIMESTAMP))\n+                  .toDate(),\n+              getEnum(data, PlatformKeys.EVENT_TYPE, EventType.class, EventType.ALARM_NOTIFICATION),\n+              getString(\n+                  data, PlatformKeys.KEY_DESCRIPTION, PlatformDefaults.DEFAULT_EVENT_DESCRIPTION),\n+              getInteger(data, PlatformKeys.KEY_INDEX, PlatformDefaults.DEFAULT_INDEX));\n+\n+      this.eventRepository.save(event);\n     }\n-\n-    @When(\"^a retrieve event notification request is sent$\")\n-    public void aRetrieveEventNotificationRequestIsSent(final Map<String, String> settings)\n-            throws WebServiceSecurityException, GeneralSecurityException, IOException {\n-\n-        final FindEventsRequest request = new FindEventsRequest();\n-        request.setDeviceIdentification(getString(settings, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n-                PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION));\n-        request.setPageSize(getInteger(settings, PlatformKeys.KEY_PAGE_SIZE, PlatformDefaults.DEFAULT_PAGE_SIZE));\n-        request.setPage(getInteger(settings, PlatformKeys.REQUESTED_PAGE, PlatformDefaults.REQUESTED_PAGE));\n-\n-        final String description = getString(settings, PlatformKeys.KEY_DESCRIPTION, null);\n-        if (description != null) {\n-            request.setDescription(description);\n-        }\n-\n-        final String descriptionStartsWith = getString(settings, PlatformKeys.KEY_DESCRIPTION_STARTS_WITH, null);\n-        if (descriptionStartsWith != null) {\n-            request.setDescriptionStartsWith(descriptionStartsWith);\n-        }\n-\n-        try {\n-            ScenarioContext.current()\n-                    .put(getString(settings, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n-                            PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION).concat(\"_\").concat(PlatformKeys.RESPONSE),\n-                            this.client.findEventsResponse(request));\n-        } catch (final SoapFaultClientException ex) {\n-            ScenarioContext.current()\n-                    .put(getString(settings, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n-                            PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION).concat(\"_\").concat(PlatformKeys.RESPONSE),\n-                            ex);\n-        }\n+  }\n+\n+  @When(\"^a retrieve event notification request is sent$\")\n+  public void aRetrieveEventNotificationRequestIsSent(final Map<String, String> settings)\n+      throws WebServiceSecurityException, GeneralSecurityException, IOException {\n+\n+    final FindEventsRequest request = new FindEventsRequest();\n+    request.setDeviceIdentification(\n+        getString(\n+            settings,\n+            PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+            PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION));\n+    request.setPageSize(\n+        getInteger(settings, PlatformKeys.KEY_PAGE_SIZE, PlatformDefaults.DEFAULT_PAGE_SIZE));\n+    request.setPage(\n+        getInteger(settings, PlatformKeys.REQUESTED_PAGE, PlatformDefaults.REQUESTED_PAGE));\n+\n+    final String description = getString(settings, PlatformKeys.KEY_DESCRIPTION, null);\n+    if (description != null) {\n+      request.setDescription(description);\n     }\n \n-    @Then(\"^the retrieve event notification response contains$\")\n-    public void theRetrieveEventNotificationResponseContains(final Map<String, String> expectedResponse) {\n-        final String deviceIdentification = getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n-                PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION);\n-        final FindEventsResponse response = (FindEventsResponse) ScenarioContext.current()\n-                .get(deviceIdentification.concat(\"_\").concat(PlatformKeys.RESPONSE));\n-\n-        final List<org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event> events = response\n-                .getEvents();\n-\n-        assertThat(events).isNotEmpty();\n-        final org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event expected = this\n-                .expectedEvent(expectedResponse, deviceIdentification);\n-\n-        assertThat(events).usingElementComparatorIgnoringFields(\"timestamp\", \"index\").contains(expected);\n+    final String descriptionStartsWith =\n+        getString(settings, PlatformKeys.KEY_DESCRIPTION_STARTS_WITH, null);\n+    if (descriptionStartsWith != null) {\n+      request.setDescriptionStartsWith(descriptionStartsWith);\n     }\n \n-    private org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event expectedEvent(\n-            final Map<String, String> expectedResponse, final String deviceIdentification) {\n-        final org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event expected = new org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event();\n-        expected.setDeviceIdentification(deviceIdentification);\n-        expected.setEventType(org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.EventType\n-                .fromValue(getString(expectedResponse, PlatformKeys.EVENT_TYPE)));\n-        expected.setDescription(getString(expectedResponse, PlatformKeys.KEY_DESCRIPTION));\n-        return expected;\n+    try {\n+      ScenarioContext.current()\n+          .put(\n+              getString(\n+                      settings,\n+                      PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+                      PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION)\n+                  .concat(\"_\")\n+                  .concat(PlatformKeys.RESPONSE),\n+              this.client.findEventsResponse(request));\n+    } catch (final SoapFaultClientException ex) {\n+      ScenarioContext.current()\n+          .put(\n+              getString(\n+                      settings,\n+                      PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+                      PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION)\n+                  .concat(\"_\")\n+                  .concat(PlatformKeys.RESPONSE),\n+              ex);\n     }\n+  }\n+\n+  @Then(\"^the retrieve event notification response contains$\")\n+  public void theRetrieveEventNotificationResponseContains(\n+      final Map<String, String> expectedResponse) {\n+    final String deviceIdentification =\n+        getString(\n+            expectedResponse,\n+            PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+            PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION);\n+    final FindEventsResponse response =\n+        (FindEventsResponse)\n+            ScenarioContext.current()\n+                .get(deviceIdentification.concat(\"_\").concat(PlatformKeys.RESPONSE));\n \n-    @Then(\"^the retrieve event notification request response should contain (\\\\d+) pages$\")\n-    public void theRetrieveEventNotificationRequestIsReceived(final int totalPages,\n-            final Map<String, String> expectedResponse) {\n-        final FindEventsResponse response = (FindEventsResponse) ScenarioContext.current()\n-                .get(getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n-                        PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION).concat(\"_\").concat(PlatformKeys.RESPONSE));\n-\n-        assertThat(response.getPage().getTotalPages()).isEqualTo(totalPages);\n+    final List<org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event> events =\n+        response.getEvents();\n+\n+    assertThat(events).isNotEmpty();\n+    final org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event expected =\n+        this.expectedEvent(expectedResponse, deviceIdentification);\n+\n+    assertThat(events)\n+        .usingElementComparatorIgnoringFields(\"timestamp\", \"index\")\n+        .contains(expected);\n+  }\n+\n+  private org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event expectedEvent(\n+      final Map<String, String> expectedResponse, final String deviceIdentification) {\n+    final org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event expected =\n+        new org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.Event();\n+    expected.setDeviceIdentification(deviceIdentification);\n+    expected.setEventType(\n+        org.opensmartgridplatform.adapter.ws.schema.core.devicemanagement.EventType.fromValue(\n+            getString(expectedResponse, PlatformKeys.EVENT_TYPE)));\n+    expected.setDescription(getString(expectedResponse, PlatformKeys.KEY_DESCRIPTION));\n+    return expected;\n+  }\n+\n+  @Then(\"^the retrieve event notification request response should contain (\\\\d+) pages$\")\n+  public void theRetrieveEventNotificationRequestIsReceived(\n+      final int totalPages, final Map<String, String> expectedResponse) {\n+    final FindEventsResponse response =\n+        (FindEventsResponse)\n+            ScenarioContext.current()\n+                .get(\n+                    getString(\n+                            expectedResponse,\n+                            PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+                            PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION)\n+                        .concat(\"_\")\n+                        .concat(PlatformKeys.RESPONSE));\n+\n+    assertThat(response.getPage().getTotalPages()).isEqualTo(totalPages);\n+  }\n+\n+  @Then(\n+      \"^the retrieve event notifications response should contain (\\\\d+) events on the current page and a total of (\\\\d+) pages$\")\n+  public void theRetrieveEventNotificationResponseShouldContainNumberOfEventsAndTotalPages(\n+      final int numberOfEvents, final int totalPages, final Map<String, String> expectedResponse) {\n+\n+    final FindEventsResponse response =\n+        (FindEventsResponse)\n+            ScenarioContext.current()\n+                .get(\n+                    getString(\n+                            expectedResponse,\n+                            PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+                            PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION)\n+                        .concat(\"_\")\n+                        .concat(PlatformKeys.RESPONSE));\n+\n+    assertThat(response.getPage().getTotalPages()).isEqualTo(totalPages);\n+    assertThat(response.getEvents().size()).isEqualTo(numberOfEvents);\n+  }\n+\n+  @Then(\"^the stored events from \\\"([^\\\"]*)\\\" are filtered and retrieved$\")\n+  public void theStoredEventsFromADeviceAreFilteredAndRetrieved(\n+      final String deviceIdentification, final Map<String, String> expectedResponse)\n+      throws Throwable {\n+    final List<Event> events = new ArrayList<>();\n+    final List<Event> eventIterator = this.retrieveStoredEvents(deviceIdentification);\n+    final DateTime\n+        fromTimestamp = getDateTime(getString(expectedResponse, PlatformKeys.FROM_TIMESTAMP)),\n+        toTimestamp = getDateTime(getString(expectedResponse, PlatformKeys.TO_TIMESTAMP));\n+\n+    for (final Event e : eventIterator) {\n+      if (fromTimestamp.isBefore(e.getDateTime().getTime())\n+          && toTimestamp.isAfter(e.getDateTime().getTime())) {\n+        events.add(e);\n+      }\n     }\n \n-    @Then(\"^the retrieve event notifications response should contain (\\\\d+) events on the current page and a total of (\\\\d+) pages$\")\n-    public void theRetrieveEventNotificationResponseShouldContainNumberOfEventsAndTotalPages(final int numberOfEvents,\n-            final int totalPages, final Map<String, String> expectedResponse) {\n-\n-        final FindEventsResponse response = (FindEventsResponse) ScenarioContext.current()\n-                .get(getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n-                        PlatformDefaults.DEFAULT_DEVICE_IDENTIFICATION).concat(\"_\").concat(PlatformKeys.RESPONSE));\n-\n-        assertThat(response.getPage().getTotalPages()).isEqualTo(totalPages);\n-        assertThat(response.getEvents().size()).isEqualTo(numberOfEvents);\n+    assertThat(events.size())\n+        .isEqualTo((int) getInteger(expectedResponse, PlatformKeys.KEY_RESULT));\n+  }\n+\n+  @Then(\"^the stored events from \\\"([^\\\"]*)\\\" are retrieved and contain$\")\n+  public void theStoredEventsAreRetrieved(\n+      final String deviceIdentification, final Map<String, String> expectedResponse)\n+      throws Throwable {\n+\n+    final List<Event> events =\n+        Wait.untilAndReturn(\n+            () -> {\n+              final List<Event> retval = this.retrieveStoredEvents(deviceIdentification);\n+              assertThat(retval).isNotNull();\n+              assertThat(retval.size() > 0).isTrue();\n+              return retval;\n+            });\n+\n+    for (final Event e : events) {\n+      assertThat(e.getEventType())\n+          .isEqualTo(getEnum(expectedResponse, PlatformKeys.EVENT_TYPE, EventType.class));\n+\n+      assertThat(e.getDescription())\n+          .isEqualTo(getString(expectedResponse, PlatformKeys.KEY_DESCRIPTION));\n+\n+      assertThat((int) e.getIndex())\n+          .isEqualTo(\n+              (int)\n+                  getInteger(\n+                      expectedResponse, PlatformKeys.KEY_INDEX, PlatformDefaults.DEFAULT_INDEX));\n     }\n-\n-    @Then(\"^the stored events from \\\"([^\\\"]*)\\\" are filtered and retrieved$\")\n-    public void theStoredEventsFromADeviceAreFilteredAndRetrieved(final String deviceIdentification,\n-            final Map<String, String> expectedResponse) throws Throwable {\n-        final List<Event> events = new ArrayList<>();\n-        final List<Event> eventIterator = this.retrieveStoredEvents(deviceIdentification);\n-        final DateTime fromTimestamp = getDateTime(getString(expectedResponse, PlatformKeys.FROM_TIMESTAMP)),\n-                toTimestamp = getDateTime(getString(expectedResponse, PlatformKeys.TO_TIMESTAMP));\n-\n-        for (final Event e : eventIterator) {\n-            if (fromTimestamp.isBefore(e.getDateTime().getTime()) && toTimestamp.isAfter(e.getDateTime().getTime())) {\n-                events.add(e);\n-            }\n-        }\n-\n-        assertThat(events.size()).isEqualTo((int) getInteger(expectedResponse, PlatformKeys.KEY_RESULT));\n+  }\n+\n+  @Then(\"^the stored events are filtered and retrieved$\")\n+  public void theStoredEventsAreFilteredAndRetrieved(final Map<String, String> expectedResponse)\n+      throws Throwable {\n+    List<Event> events;\n+\n+    if (getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION).isEmpty()) {\n+      events = this.retrieveStoredEvents();\n+    } else {\n+      events =\n+          this.retrieveStoredEvents(\n+              getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION));\n     }\n \n-    @Then(\"^the stored events from \\\"([^\\\"]*)\\\" are retrieved and contain$\")\n-    public void theStoredEventsAreRetrieved(final String deviceIdentification,\n-            final Map<String, String> expectedResponse) throws Throwable {\n-\n-        final List<Event> events = Wait.untilAndReturn(() -> {\n-            final List<Event> retval = this.retrieveStoredEvents(deviceIdentification);\n-            assertThat(retval).isNotNull();\n-            assertThat(retval.size() > 0).isTrue();\n-            return retval;\n-        });\n+    assertThat(events.size())\n+        .isEqualTo((int) getInteger(expectedResponse, PlatformKeys.KEY_RESULT));\n+  }\n \n-        for (final Event e : events) {\n-            assertThat(e.getEventType()).isEqualTo(getEnum(expectedResponse, PlatformKeys.EVENT_TYPE, EventType.class));\n+  public List<Event> retrieveStoredEvents(final String deviceIdentification) {\n+    return this.eventRepository.findByDeviceIdentification(deviceIdentification);\n+  }\n \n-            assertThat(e.getDescription()).isEqualTo(getString(expectedResponse, PlatformKeys.KEY_DESCRIPTION));\n-\n-            assertThat((int) e.getIndex()).isEqualTo(\n-                    (int) getInteger(expectedResponse, PlatformKeys.KEY_INDEX, PlatformDefaults.DEFAULT_INDEX));\n-        }\n-    }\n-\n-    @Then(\"^the stored events are filtered and retrieved$\")\n-    public void theStoredEventsAreFilteredAndRetrieved(final Map<String, String> expectedResponse) throws Throwable {\n-        List<Event> events;\n-\n-        if (getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION).isEmpty()) {\n-            events = this.retrieveStoredEvents();\n-        } else {\n-            events = this.retrieveStoredEvents(getString(expectedResponse, PlatformKeys.KEY_DEVICE_IDENTIFICATION));\n-        }\n-\n-        assertThat(events.size()).isEqualTo((int) getInteger(expectedResponse, PlatformKeys.KEY_RESULT));\n-    }\n-\n-    public List<Event> retrieveStoredEvents(final String deviceIdentification) {\n-        final Device device = this.deviceRepository.findByDeviceIdentification(deviceIdentification);\n-        return this.eventRepository.findByDevice(device);\n-    }\n-\n-    public List<Event> retrieveStoredEvents() {\n-        return this.eventRepository.findAll();\n-    }\n+  public List<Event> retrieveStoredEvents() {\n+    return this.eventRepository.findAll();\n+  }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "message": "Merge commit", "committedDate": null}, {"oid": "960edf5624e0e097ea28fc19afb1b2eab32e25d7", "committedDate": "2020-10-30 18:48:43 +0100", "message": "FLEX-5534 ~ Improves archiving performance (#475)"}, {"oid": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "committedDate": "2021-04-16 08:37:27 +0200", "message": "Apply GXF styled Google Java Format conventions to the code base (#610)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwNDc1Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426704752", "body": "We now supply both \"description\" en \"descriptionStartsWith\". The code uses an \"or\" operator for those fields. This isn't obvious to the users. To keep it simple and clear, we could offer just the \"descriptionStartsWith\". We can probably live without the exact match.\r\n\r\nAnother option would be to use wildcards, but that would be extending the scope of the story. It would extend the scope, because to be consistent you would have to support wildcards for the deviceIdentification (and possibly the organisationIdentification) as well.", "bodyText": "We now supply both \"description\" en \"descriptionStartsWith\". The code uses an \"or\" operator for those fields. This isn't obvious to the users. To keep it simple and clear, we could offer just the \"descriptionStartsWith\". We can probably live without the exact match.\nAnother option would be to use wildcards, but that would be extending the scope of the story. It would extend the scope, because to be consistent you would have to support wildcards for the deviceIdentification (and possibly the organisationIdentification) as well.", "bodyHTML": "<p dir=\"auto\">We now supply both \"description\" en \"descriptionStartsWith\". The code uses an \"or\" operator for those fields. This isn't obvious to the users. To keep it simple and clear, we could offer just the \"descriptionStartsWith\". We can probably live without the exact match.</p>\n<p dir=\"auto\">Another option would be to use wildcards, but that would be extending the scope of the story. It would extend the scope, because to be consistent you would have to support wildcards for the deviceIdentification (and possibly the organisationIdentification) as well.</p>", "author": "rlemmers", "createdAt": "2020-05-18T15:20:02Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java", "diffHunk": "@@ -186,7 +186,8 @@ public Organisation findOrganisation(@Identification final String organisationId\n     @Transactional(value = \"transactionManager\")\n     public Page<Event> findEvents(@Identification final String organisationIdentification,\n             final String deviceIdentification, final PageSpecifier pageSpecifier, final DateTime from,\n-            final DateTime until, final List<EventType> eventTypes) throws FunctionalException {\n+            final DateTime until, final List<EventType> eventTypes, final String description,\n+            final String descriptionStartsWith) throws FunctionalException {", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NjczMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r427256732", "bodyText": "this destroys the whole idea that we could do with one call", "author": "robindenadel", "createdAt": "2020-05-19T12:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwNDc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2ca5b6924d74416c64781aaa0bd964679231be97", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -184,49 +185,45 @@ public class DeviceManagementService {\n     }\n \n     @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final PageSpecifier pageSpecifier, final DateTime from,\n-            final DateTime until, final List<EventType> eventTypes, final String description,\n-            final String descriptionStartsWith) throws FunctionalException {\n+    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n+        final String organisationIdentification = criteria.getOrganisationIdentification();\n+        final String deviceIdentification = criteria.getDeviceIdentification();\n         LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n                 deviceIdentification);\n \n         final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n \n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n+        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n         final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n                 this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n \n         Specification<Event> specification;\n \n-        try {\n-            if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-                final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-                this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n-\n-                specification = where(this.eventSpecifications.isFromDevice(device));\n-            } else {\n-                specification = where(this.eventSpecifications.isAuthorized(organisation));\n-            }\n+        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-            if (from != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-            }\n+            specification = where(this.eventSpecifications.isFromDevice(device));\n+        } else {\n+            specification = where(this.eventSpecifications.isAuthorized(organisation));\n+        }\n \n-            if (until != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-            }\n+        final DateTime from = criteria.getFrom();\n+        if (from != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+        }\n \n-            if (eventTypes != null && !eventTypes.isEmpty()) {\n-                specification = specification.and(this.eventSpecifications.hasEventTypes(eventTypes));\n-            }\n-            specification = handleDescription(description, descriptionStartsWith, specification);\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            throw new FunctionalException(FunctionalExceptionType.ARGUMENT_NULL, ComponentType.WS_CORE, e);\n+        final DateTime until = criteria.getUntil();\n+        if (until != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n         }\n \n+        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+        specification = this.handleDescription(SearchUtil.getCleanedInput(criteria.getDescription()),\n+                SearchUtil.getCleanedInput(criteria.getDescriptionStartsWith()), specification);\n+\n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n         LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -184,49 +185,45 @@ public class DeviceManagementService {\n     }\n \n     @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final PageSpecifier pageSpecifier, final DateTime from,\n-            final DateTime until, final List<EventType> eventTypes, final String description,\n-            final String descriptionStartsWith) throws FunctionalException {\n+    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n+        final String organisationIdentification = criteria.getOrganisationIdentification();\n+        final String deviceIdentification = criteria.getDeviceIdentification();\n         LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n                 deviceIdentification);\n \n         final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n \n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n+        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n         final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n                 this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n \n         Specification<Event> specification;\n \n-        try {\n-            if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-                final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-                this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n-\n-                specification = where(this.eventSpecifications.isFromDevice(device));\n-            } else {\n-                specification = where(this.eventSpecifications.isAuthorized(organisation));\n-            }\n+        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-            if (from != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-            }\n+            specification = where(this.eventSpecifications.isFromDevice(device));\n+        } else {\n+            specification = where(this.eventSpecifications.isAuthorized(organisation));\n+        }\n \n-            if (until != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-            }\n+        final DateTime from = criteria.getFrom();\n+        if (from != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+        }\n \n-            if (eventTypes != null && !eventTypes.isEmpty()) {\n-                specification = specification.and(this.eventSpecifications.hasEventTypes(eventTypes));\n-            }\n-            specification = handleDescription(description, descriptionStartsWith, specification);\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            throw new FunctionalException(FunctionalExceptionType.ARGUMENT_NULL, ComponentType.WS_CORE, e);\n+        final DateTime until = criteria.getUntil();\n+        if (until != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n         }\n \n+        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+        specification = this.handleDescription(SearchUtil.getCleanedInput(criteria.getDescription()),\n+                SearchUtil.getCleanedInput(criteria.getDescriptionStartsWith()), specification);\n+\n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n         LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n", "next_change": {"commit": "c5712fb2525d44de739996fd758cf5b940269bb8", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 18948839b1..989013dd45 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -221,8 +219,8 @@ public class DeviceManagementService {\n         }\n \n         specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.getCleanedInput(criteria.getDescription()),\n-                SearchUtil.getCleanedInput(criteria.getDescriptionStartsWith()), specification);\n+        specification = this.handleDescription(SearchUtil.replaceWildcards(criteria.getDescription()),\n+                SearchUtil.replaceWildcards(criteria.getDescriptionStartsWith()), specification);\n \n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n", "next_change": {"commit": "8ff3ffc0b3444d0ff476689803ced85c326d6aed", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 989013dd45..a2036e867c 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -219,8 +219,8 @@ public class DeviceManagementService {\n         }\n \n         specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceWildcards(criteria.getDescription()),\n-                SearchUtil.replaceWildcards(criteria.getDescriptionStartsWith()), specification);\n+        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n+                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n \n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n", "next_change": {"commit": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex a2036e867c..78e9982ac8 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -219,8 +219,8 @@ public class DeviceManagementService {\n         }\n \n         specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n-                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n+        specification = this.handleDescription(SearchUtil.replaceWildcards(criteria.getDescription()),\n+                SearchUtil.replaceWildcards(criteria.getDescriptionStartsWith()), specification);\n \n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n", "next_change": {"commit": "960edf5624e0e097ea28fc19afb1b2eab32e25d7", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 78e9982ac8..d356ff420e 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -219,8 +219,8 @@ public class DeviceManagementService {\n         }\n \n         specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceWildcards(criteria.getDescription()),\n-                SearchUtil.replaceWildcards(criteria.getDescriptionStartsWith()), specification);\n+        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n+                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n \n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n", "next_change": {"commit": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex d356ff420e..254e3cad23 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -83,825 +82,997 @@ import org.springframework.validation.annotation.Validated;\n @Service(value = \"wsCoreDeviceManagementService\")\n @Validated\n public class DeviceManagementService {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DeviceManagementService.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DeviceManagementService.class);\n \n-    @Autowired\n-    private PagingSettings pagingSettings;\n+  @Autowired private PagingSettings pagingSettings;\n \n-    @Autowired\n-    private DomainHelperService domainHelperService;\n+  @Autowired private DomainHelperService domainHelperService;\n \n-    @Autowired\n-    private OrganisationRepository organisationRepository;\n+  @Autowired private OrganisationRepository organisationRepository;\n \n-    @Autowired\n-    private EventSpecifications eventSpecifications;\n+  @Autowired private EventSpecifications eventSpecifications;\n \n-    @Autowired\n-    private DeviceRepository deviceRepository;\n+  @Autowired private DeviceRepository deviceRepository;\n \n-    @Autowired\n-    private DeviceSpecifications deviceSpecifications;\n+  @Autowired private DeviceSpecifications deviceSpecifications;\n \n-    @Autowired\n-    private FirmwareManagementService firmwareManagementService;\n+  @Autowired private FirmwareManagementService firmwareManagementService;\n \n-    @Autowired\n-    private EventRepository eventRepository;\n+  @Autowired private EventRepository eventRepository;\n \n-    @Autowired\n-    private CorrelationIdProviderService correlationIdProviderService;\n+  @Autowired private CorrelationIdProviderService correlationIdProviderService;\n \n-    @Autowired\n-    private CommonRequestMessageSender commonRequestMessageSender;\n+  @Autowired private CommonRequestMessageSender commonRequestMessageSender;\n \n-    @Autowired\n-    private CommonResponseMessageFinder commonResponseMessageFinder;\n+  @Autowired private CommonResponseMessageFinder commonResponseMessageFinder;\n \n-    @Autowired\n-    private ScheduledTaskWithoutDataRepository scheduledTaskRepository;\n+  @Autowired private ScheduledTaskWithoutDataRepository scheduledTaskRepository;\n \n-    @Autowired\n-    private WritableDeviceAuthorizationRepository writableAuthorizationRepository;\n+  @Autowired private WritableDeviceAuthorizationRepository writableAuthorizationRepository;\n \n-    @Autowired\n-    private WritableDeviceRepository writableDeviceRepository;\n+  @Autowired private WritableDeviceRepository writableDeviceRepository;\n \n-    @Autowired\n-    private WritableSsldRepository writableSsldRepository;\n+  @Autowired private WritableSsldRepository writableSsldRepository;\n \n-    @Autowired\n-    private DeviceDomainService deviceDomainService;\n+  @Autowired private DeviceDomainService deviceDomainService;\n \n-    @Autowired\n-    @Qualifier(\"wsCoreDeviceManagementNetManagementOrganisation\")\n-    private String netManagementOrganisation;\n+  @Autowired\n+  @Qualifier(\"wsCoreDeviceManagementNetManagementOrganisation\")\n+  private String netManagementOrganisation;\n \n-    /**\n-     * Constructor\n-     */\n-    public DeviceManagementService() {\n-        // Parameterless constructor required for transactions...\n-    }\n+  /** Constructor */\n+  public DeviceManagementService() {\n+    // Parameterless constructor required for transactions...\n+  }\n \n-    @Transactional(value = \"transactionManager\")\n-    public Organisation findOrganisation(@Identification final String organisationIdentification,\n-            @Identification final String organisationIdentificationToFind) throws FunctionalException {\n+  @Transactional(value = \"transactionManager\")\n+  public Organisation findOrganisation(\n+      @Identification final String organisationIdentification,\n+      @Identification final String organisationIdentificationToFind)\n+      throws FunctionalException {\n \n-        LOGGER.debug(\"findOrganisation called with organisation {} and trying to find {}\", organisationIdentification,\n-                organisationIdentificationToFind);\n+    LOGGER.debug(\n+        \"findOrganisation called with organisation {} and trying to find {}\",\n+        organisationIdentification,\n+        organisationIdentificationToFind);\n \n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n \n-        if (this.netManagementOrganisation.equals(organisationIdentification)\n-                || organisationIdentification.equals(organisationIdentificationToFind)) {\n-            return this.organisationRepository.findByOrganisationIdentification(organisationIdentificationToFind);\n-        } else {\n-            return null;\n-        }\n+    if (this.netManagementOrganisation.equals(organisationIdentification)\n+        || organisationIdentification.equals(organisationIdentificationToFind)) {\n+      return this.organisationRepository.findByOrganisationIdentification(\n+          organisationIdentificationToFind);\n+    } else {\n+      return null;\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public List<Organisation> findAllOrganisations(@Identification final String organisationIdentification)\n-            throws FunctionalException {\n-\n-        LOGGER.debug(\"findAllOrganisations called with organisation {}\", organisationIdentification);\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n-\n-        if (this.netManagementOrganisation.equals(organisationIdentification)) {\n-            return this.organisationRepository.findByOrderByOrganisationIdentification();\n-        } else {\n-            final Organisation org = this.organisationRepository\n-                    .findByOrganisationIdentification(organisationIdentification);\n-            final List<Organisation> organisations = new ArrayList<>();\n-            organisations.add(org);\n-            return organisations;\n-        }\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public List<Organisation> findAllOrganisations(\n+      @Identification final String organisationIdentification) throws FunctionalException {\n+\n+    LOGGER.debug(\"findAllOrganisations called with organisation {}\", organisationIdentification);\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n+\n+    if (this.netManagementOrganisation.equals(organisationIdentification)) {\n+      return this.organisationRepository.findByOrderByOrganisationIdentification();\n+    } else {\n+      final Organisation org =\n+          this.organisationRepository.findByOrganisationIdentification(organisationIdentification);\n+      final List<Organisation> organisations = new ArrayList<>();\n+      organisations.add(org);\n+      return organisations;\n     }\n+  }\n \n-    @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n-\n-        final String organisationIdentification = criteria.getOrganisationIdentification();\n-        final String deviceIdentification = criteria.getDeviceIdentification();\n-        LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n-                deviceIdentification);\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-\n-        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n-\n-        final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n-                this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n-        Specification<Event> specification;\n+    final String organisationIdentification = criteria.getOrganisationIdentification();\n+    final String deviceIdentification = criteria.getDeviceIdentification();\n+    LOGGER.debug(\n+        \"findEvents called for organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n \n-        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n \n-            specification = where(this.eventSpecifications.isFromDevice(deviceIdentification));\n-        } else {\n-            specification = where(this.eventSpecifications.isAuthorized(organisation));\n-        }\n+    this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n-        final DateTime from = criteria.getFrom();\n-        if (from != null) {\n-            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-        }\n-\n-        final DateTime until = criteria.getUntil();\n-        if (until != null) {\n-            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-        }\n+    final PageRequest request =\n+        PageRequest.of(\n+            this.pagingSettings.getPageNumber(),\n+            this.pagingSettings.getPageSize(),\n+            Sort.Direction.DESC,\n+            \"dateTime\");\n \n-        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n-                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n+    Specification<Event> specification;\n \n-        LOGGER.debug(\"request offset     : {}\", request.getOffset());\n-        LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n-        LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n-        LOGGER.debug(\"        sort       : {}\", request.getSort());\n+    if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+      final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+      this.domainHelperService.isAllowed(\n+          organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-        return this.eventRepository.findAll(specification, request);\n+      specification = where(this.eventSpecifications.isFromDevice(deviceIdentification));\n+    } else {\n+      specification = where(this.eventSpecifications.isAuthorized(organisation));\n     }\n \n-    private Specification<Event> handleDescription(final String description, final String descriptionStartsWith,\n-            final Specification<Event> specification) {\n-\n-        final Specification<Event> descriptionSpecification = this.eventSpecifications.withDescription(description);\n-        final Specification<Event> descriptionStartsWithSpecification = this.eventSpecifications\n-                .startsWithDescription(descriptionStartsWith);\n-\n-        if (description == null && descriptionStartsWith == null) {\n-            return specification;\n-        }\n-        if (description == null && descriptionStartsWith != null) {\n-            return specification.and(descriptionStartsWithSpecification);\n-        }\n-        if (description != null && descriptionStartsWith == null) {\n-            return specification.and(descriptionSpecification);\n-        }\n-        return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n-    }\n-\n-    /**\n-     * Find all devices\n-     *\n-     * @param organisationIdentification\n-     *            The organisation who performed the action\n-     * @param pageSpecifier\n-     *            The page to be returned\n-     * @param deviceFilter\n-     *            the filter object\n-     *\n-     * @return A page with devices\n-     *\n-     * @throws FunctionalException\n-     */\n-    @Transactional(value = \"transactionManager\")\n-    public Page<Device> findDevices(@Identification final String organisationIdentification,\n-            final PageSpecifier pageSpecifier, final DeviceFilter deviceFilter) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_DEVICES);\n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n-        Sort.Direction sortDir = Sort.Direction.DESC;\n-        String sortedBy = \"creationTime\";\n-        if (deviceFilter != null) {\n-            if (!StringUtils.isEmpty(deviceFilter.getSortDir()) && deviceFilter.getSortDir().contains(\"asc\")) {\n-                sortDir = Sort.Direction.ASC;\n-            }\n-            if (!StringUtils.isEmpty(deviceFilter.getSortedBy())) {\n-                sortedBy = deviceFilter.getSortedBy();\n-            }\n-        }\n-\n-        final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n-                this.pagingSettings.getPageSize(), sortDir, sortedBy);\n-\n-        final Page<Device> devices = this.findDevices(organisationIdentification, deviceFilter, organisation, request);\n-\n-        if (devices == null) {\n-            LOGGER.info(\"No devices found\");\n-            return null;\n-        }\n-\n-        for (final Device device : devices.getContent()) {\n-            for (final DeviceAuthorization deviceAutorization : device.getAuthorizations()) {\n-                device.addOrganisation(deviceAutorization.getOrganisation().getOrganisationIdentification());\n-            }\n-        }\n+    final DateTime from = criteria.getFrom();\n+    if (from != null) {\n+      specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+    }\n \n-        return devices;\n-    }\n-\n-    private Page<Device> findDevices(final String organisationIdentification, final DeviceFilter deviceFilter,\n-            final Organisation organisation, final PageRequest request) {\n-        Page<Device> devices;\n-        try {\n-            if (!this.netManagementOrganisation.equals(organisationIdentification)) {\n-                // Municipality organization.\n-                if (deviceFilter == null) {\n-                    final DeviceFilter df = new DeviceFilter();\n-                    df.setOrganisationIdentification(organisationIdentification);\n-                    df.setDeviceExternalManaged(DeviceExternalManagedFilterType.BOTH);\n-                    df.setDeviceActivated(DeviceActivatedFilterType.BOTH);\n-                    df.setDeviceInMaintenance(DeviceInMaintenanceFilterType.BOTH);\n-                    df.setHasTechnicalInstallation(false);\n-                    df.setExactMatch(false);\n-                    devices = this.applyFilter(df, organisation, request);\n-                } else {\n-                    deviceFilter.setOrganisationIdentification(organisationIdentification);\n-                    devices = this.applyFilter(deviceFilter, organisation, request);\n-                }\n-            } else {\n-                // Net management organization.\n-                devices = this.applyFilter(deviceFilter, organisation, request);\n-            }\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            /*\n-             * The implementation of applyFilter should check everything passed\n-             * on to DeviceSpecifications for not being empty, thus avoiding\n-             * ArgumentNullOrEmptyException. If something is missed (which\n-             * should not occur) pass it on as IllegalArgumentException to avoid\n-             * multiple checked exceptions being thrown.\n-             */\n-            throw new IllegalArgumentException(\"Null or empty input provided to DeviceSpecifications\", e);\n-        }\n-        return devices;\n-    }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public Page<Device> applyFilter(final DeviceFilter deviceFilter, final Organisation organisation,\n-            final PageRequest request) throws ArgumentNullOrEmptyException {\n-        Page<Device> devices = null;\n-\n-        try {\n-            if (deviceFilter != null) {\n-                final Specification<Device> specification = this.doApplyFilter(deviceFilter, organisation);\n-                devices = this.deviceRepository.findAll(specification, request);\n-            } else {\n-                if (organisation != null) {\n-                    final Specification<Device> specification = Specification\n-                            .where(this.deviceSpecifications.forOrganisation(organisation));\n-                    devices = this.deviceRepository.findAll(specification, request);\n-                } else {\n-                    devices = this.deviceRepository.findAll(request);\n-                }\n-            }\n-        } catch (final FunctionalException functionalException) {\n-            LOGGER.error(\"FunctionalException\", functionalException);\n-        } catch (final QueryException e) {\n-            LOGGER.error(\"QueryException\", e);\n-        }\n+    final DateTime until = criteria.getUntil();\n+    if (until != null) {\n+      specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n+    }\n \n-        return devices;\n+    specification =\n+        specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+    specification =\n+        this.handleDescription(\n+            SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n+            SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()),\n+            specification);\n+\n+    LOGGER.debug(\"request offset     : {}\", request.getOffset());\n+    LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n+    LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n+    LOGGER.debug(\"        sort       : {}\", request.getSort());\n+\n+    return this.eventRepository.findAll(specification, request);\n+  }\n+\n+  private Specification<Event> handleDescription(\n+      final String description,\n+      final String descriptionStartsWith,\n+      final Specification<Event> specification) {\n+\n+    final Specification<Event> descriptionSpecification =\n+        this.eventSpecifications.withDescription(description);\n+    final Specification<Event> descriptionStartsWithSpecification =\n+        this.eventSpecifications.startsWithDescription(descriptionStartsWith);\n+\n+    if (description == null && descriptionStartsWith == null) {\n+      return specification;\n+    }\n+    if (description == null) {\n+      return specification.and(descriptionStartsWithSpecification);\n+    }\n+    if (descriptionStartsWith == null) {\n+      return specification.and(descriptionSpecification);\n+    }\n+    return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n+  }\n+\n+  /**\n+   * Find all devices\n+   *\n+   * @param organisationIdentification The organisation who performed the action\n+   * @param pageSpecifier The page to be returned\n+   * @param deviceFilter the filter object\n+   * @return A page with devices\n+   * @throws FunctionalException\n+   */\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Device> findDevices(\n+      @Identification final String organisationIdentification,\n+      final PageSpecifier pageSpecifier,\n+      final DeviceFilter deviceFilter)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_DEVICES);\n+    this.pagingSettings.updatePagingSettings(pageSpecifier);\n+    Sort.Direction sortDir = Sort.Direction.DESC;\n+    String sortedBy = \"creationTime\";\n+    if (deviceFilter != null) {\n+      if (!StringUtils.isEmpty(deviceFilter.getSortDir())\n+          && deviceFilter.getSortDir().contains(\"asc\")) {\n+        sortDir = Sort.Direction.ASC;\n+      }\n+      if (!StringUtils.isEmpty(deviceFilter.getSortedBy())) {\n+        sortedBy = deviceFilter.getSortedBy();\n+      }\n     }\n \n-    private Specification<Device> doApplyFilter(final DeviceFilter deviceFilter, final Organisation organisation)\n-            throws FunctionalException, ArgumentNullOrEmptyException {\n+    final PageRequest request =\n+        PageRequest.of(\n+            this.pagingSettings.getPageNumber(),\n+            this.pagingSettings.getPageSize(),\n+            sortDir,\n+            sortedBy);\n \n-        Specification<Device> specification = this.doFilterOnOrganisationIdentification(deviceFilter, organisation);\n-        specification = this.doFilterOnDeviceIdentification(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceAlias(deviceFilter, specification);\n-        specification = this.doFilterOnAddress(deviceFilter, specification);\n-        specification = this.doFilterOnExternalManaged(deviceFilter, specification);\n-        specification = this.doFilterOnActivated(deviceFilter, specification);\n-        specification = this.doFilterOnInMaintenance(deviceFilter, specification);\n-        specification = this.doFilterOnHasTechnicalInstallationDate(deviceFilter, specification);\n-        specification = this.doFilterOnOwner(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceType(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceModel(deviceFilter, specification);\n-        specification = this.doFilterOnManufacturer(deviceFilter, specification);\n-        specification = this.doFilterOnFirmwareModuleVersion(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceIdentificationsToUse(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceIdentificationsToExclude(deviceFilter, specification);\n+    final Page<Device> devices =\n+        this.findDevices(organisationIdentification, deviceFilter, organisation, request);\n \n-        return specification;\n+    if (devices == null) {\n+      LOGGER.info(\"No devices found\");\n+      return null;\n     }\n \n-    private Specification<Device> doFilterOnDeviceIdentificationsToExclude(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceIdentificationsToExclude() != null\n-                && !deviceFilter.getDeviceIdentificationsToExclude().isEmpty()) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .excludeDeviceIdentificationList(deviceFilter.getDeviceIdentificationsToExclude()));\n-\n-        }\n-        return specification;\n+    for (final Device device : devices.getContent()) {\n+      for (final DeviceAuthorization deviceAutorization : device.getAuthorizations()) {\n+        device.addOrganisation(\n+            deviceAutorization.getOrganisation().getOrganisationIdentification());\n+      }\n     }\n \n-    private Specification<Device> doFilterOnDeviceIdentificationsToUse(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceIdentificationsToUse() != null\n-                && !deviceFilter.getDeviceIdentificationsToUse().isEmpty()) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .existsInDeviceIdentificationList(deviceFilter.getDeviceIdentificationsToUse()));\n-\n+    return devices;\n+  }\n+\n+  private Page<Device> findDevices(\n+      final String organisationIdentification,\n+      final DeviceFilter deviceFilter,\n+      final Organisation organisation,\n+      final PageRequest request) {\n+    final Page<Device> devices;\n+    try {\n+      if (!this.netManagementOrganisation.equals(organisationIdentification)) {\n+        // Municipality organization.\n+        if (deviceFilter == null) {\n+          final DeviceFilter df = new DeviceFilter();\n+          df.setOrganisationIdentification(organisationIdentification);\n+          df.setDeviceExternalManaged(DeviceExternalManagedFilterType.BOTH);\n+          df.setDeviceActivated(DeviceActivatedFilterType.BOTH);\n+          df.setDeviceInMaintenance(DeviceInMaintenanceFilterType.BOTH);\n+          df.setHasTechnicalInstallation(false);\n+          df.setExactMatch(false);\n+          devices = this.applyFilter(df, organisation, request);\n+        } else {\n+          deviceFilter.setOrganisationIdentification(organisationIdentification);\n+          devices = this.applyFilter(deviceFilter, organisation, request);\n         }\n-        return specification;\n+      } else {\n+        // Net management organization.\n+        devices = this.applyFilter(deviceFilter, organisation, request);\n+      }\n+    } catch (final ArgumentNullOrEmptyException e) {\n+      /*\n+       * The implementation of applyFilter should check everything passed\n+       * on to DeviceSpecifications for not being empty, thus avoiding\n+       * ArgumentNullOrEmptyException. If something is missed (which\n+       * should not occur) pass it on as IllegalArgumentException to avoid\n+       * multiple checked exceptions being thrown.\n+       */\n+      throw new IllegalArgumentException(\"Null or empty input provided to DeviceSpecifications\", e);\n     }\n-\n-    private Specification<Device> doFilterOnFirmwareModuleVersion(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getFirmwareModuleVersion())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.forFirmwareModuleVersion(deviceFilter.getFirmwareModuleType(),\n-                            replaceAndEscapeWildcards(deviceFilter.getFirmwareModuleVersion()).toUpperCase()));\n+    return devices;\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Device> applyFilter(\n+      final DeviceFilter deviceFilter, final Organisation organisation, final PageRequest request)\n+      throws ArgumentNullOrEmptyException {\n+    Page<Device> devices = null;\n+\n+    try {\n+      if (deviceFilter != null) {\n+        final Specification<Device> specification = this.doApplyFilter(deviceFilter, organisation);\n+        devices = this.deviceRepository.findAll(specification, request);\n+      } else {\n+        if (organisation != null) {\n+          final Specification<Device> specification =\n+              Specification.where(this.deviceSpecifications.forOrganisation(organisation));\n+          devices = this.deviceRepository.findAll(specification, request);\n+        } else {\n+          devices = this.deviceRepository.findAll(request);\n         }\n-        return specification;\n+      }\n+    } catch (final FunctionalException functionalException) {\n+      LOGGER.error(\"FunctionalException\", functionalException);\n+    } catch (final QueryException e) {\n+      LOGGER.error(\"QueryException\", e);\n     }\n \n-    private Specification<Device> doFilterOnManufacturer(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getManufacturer())) {\n-            final Manufacturer manufacturer = this.firmwareManagementService\n-                    .findManufacturer(deviceFilter.getManufacturer());\n-            specification = specification.and(this.deviceSpecifications.forManufacturer(manufacturer));\n-        }\n-        return specification;\n+    return devices;\n+  }\n+\n+  private Specification<Device> doApplyFilter(\n+      final DeviceFilter deviceFilter, final Organisation organisation)\n+      throws FunctionalException, ArgumentNullOrEmptyException {\n+\n+    Specification<Device> specification =\n+        this.doFilterOnOrganisationIdentification(deviceFilter, organisation);\n+    specification = this.doFilterOnDeviceIdentification(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceAlias(deviceFilter, specification);\n+    specification = this.doFilterOnAddress(deviceFilter, specification);\n+    specification = this.doFilterOnExternalManaged(deviceFilter, specification);\n+    specification = this.doFilterOnActivated(deviceFilter, specification);\n+    specification = this.doFilterOnInMaintenance(deviceFilter, specification);\n+    specification = this.doFilterOnHasTechnicalInstallationDate(deviceFilter, specification);\n+    specification = this.doFilterOnOwner(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceType(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceModel(deviceFilter, specification);\n+    specification = this.doFilterOnManufacturer(deviceFilter, specification);\n+    specification = this.doFilterOnFirmwareModuleVersion(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceIdentificationsToUse(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceIdentificationsToExclude(deviceFilter, specification);\n+\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentificationsToExclude(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceIdentificationsToExclude() != null\n+        && !deviceFilter.getDeviceIdentificationsToExclude().isEmpty()) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.excludeDeviceIdentificationList(\n+                  deviceFilter.getDeviceIdentificationsToExclude()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceModel(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getModel())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forDeviceModel(replaceAndEscapeWildcards(deviceFilter.getModel()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentificationsToUse(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceIdentificationsToUse() != null\n+        && !deviceFilter.getDeviceIdentificationsToUse().isEmpty()) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.existsInDeviceIdentificationList(\n+                  deviceFilter.getDeviceIdentificationsToUse()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceType(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getDeviceType())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forDeviceType(replaceAndEscapeWildcards(deviceFilter.getDeviceType()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnFirmwareModuleVersion(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getFirmwareModuleVersion())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forFirmwareModuleVersion(\n+                  deviceFilter.getFirmwareModuleType(),\n+                  replaceAndEscapeWildcards(deviceFilter.getFirmwareModuleVersion())\n+                      .toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnOwner(final DeviceFilter deviceFilter, Specification<Device> specification)\n-            throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getOwner())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forOwner(replaceAndEscapeWildcards(deviceFilter.getOwner()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnManufacturer(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getManufacturer())) {\n+      final Manufacturer manufacturer =\n+          this.firmwareManagementService.findManufacturer(deviceFilter.getManufacturer());\n+      specification = specification.and(this.deviceSpecifications.forManufacturer(manufacturer));\n     }\n-\n-    private Specification<Device> doFilterOnHasTechnicalInstallationDate(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.isHasTechnicalInstallation()) {\n-            specification = specification.and(this.deviceSpecifications.hasTechnicalInstallationDate());\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceModel(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getModel())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forDeviceModel(\n+                  replaceAndEscapeWildcards(deviceFilter.getModel()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnInMaintenance(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceInMaintenance() != null\n-                && !DeviceInMaintenanceFilterType.BOTH.equals(deviceFilter.getDeviceInMaintenance())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.isInMaintenance(deviceFilter.getDeviceInMaintenance().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceType(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getDeviceType())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forDeviceType(\n+                  replaceAndEscapeWildcards(deviceFilter.getDeviceType()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnActivated(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceActivated() != null\n-                && !DeviceActivatedFilterType.BOTH.equals(deviceFilter.getDeviceActivated())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.isActived(deviceFilter.getDeviceActivated().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnOwner(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getOwner())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forOwner(\n+                  replaceAndEscapeWildcards(deviceFilter.getOwner()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnExternalManaged(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceExternalManaged() != null\n-                && !DeviceExternalManagedFilterType.BOTH.equals(deviceFilter.getDeviceExternalManaged())) {\n-            specification = specification.and(\n-                    this.deviceSpecifications.isManagedExternally(deviceFilter.getDeviceExternalManaged().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnHasTechnicalInstallationDate(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.isHasTechnicalInstallation()) {\n+      specification = specification.and(this.deviceSpecifications.hasTechnicalInstallationDate());\n     }\n-\n-    private Specification<Device> doFilterOnAddress(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getCity())) {\n-            specification = specification.and(\n-                    this.deviceSpecifications.hasCity(replaceAndEscapeWildcards(deviceFilter.getCity()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getPostalCode())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasPostalCode(replaceAndEscapeWildcards(deviceFilter.getPostalCode()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getStreet())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasStreet(replaceAndEscapeWildcards(deviceFilter.getStreet()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getNumber())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasNumber(replaceAndEscapeWildcards(deviceFilter.getNumber()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getMunicipality())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasMunicipality(replaceAndEscapeWildcards(deviceFilter.getMunicipality()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnInMaintenance(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceInMaintenance() != null\n+        && !DeviceInMaintenanceFilterType.BOTH.equals(deviceFilter.getDeviceInMaintenance())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isInMaintenance(\n+                  deviceFilter.getDeviceInMaintenance().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceAlias(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getAlias())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasAlias(replaceAndEscapeWildcards(deviceFilter.getAlias()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnActivated(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceActivated() != null\n+        && !DeviceActivatedFilterType.BOTH.equals(deviceFilter.getDeviceActivated())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isActived(deviceFilter.getDeviceActivated().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceIdentification(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getDeviceIdentification())) {\n-            String searchString = deviceFilter.getDeviceIdentification();\n-\n-            if (!deviceFilter.isExactMatch()) {\n-                searchString = replaceAndEscapeWildcards(searchString).toUpperCase();\n-            }\n-\n-            specification = specification\n-                    .and(this.deviceSpecifications.hasDeviceIdentification(searchString, deviceFilter.isExactMatch()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnExternalManaged(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceExternalManaged() != null\n+        && !DeviceExternalManagedFilterType.BOTH.equals(deviceFilter.getDeviceExternalManaged())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isManagedExternally(\n+                  deviceFilter.getDeviceExternalManaged().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnOrganisationIdentification(final DeviceFilter deviceFilter,\n-            final Organisation organisation) throws FunctionalException, ArgumentNullOrEmptyException {\n-        Specification<Device> specification;\n-        if (!StringUtils.isEmpty(deviceFilter.getOrganisationIdentification())) {\n-            final Organisation org = this.domainHelperService\n-                    .findOrganisation(deviceFilter.getOrganisationIdentification());\n-            specification = where(this.deviceSpecifications.forOrganisation(org));\n-        } else {\n-            // dummy for 'not initialized'\n-            specification = where(this.deviceSpecifications.forOrganisation(organisation));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnAddress(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getCity())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasCity(\n+                  replaceAndEscapeWildcards(deviceFilter.getCity()).toUpperCase()));\n     }\n-\n-    // === SET EVENT NOTIFICATIONS ===\n-    @Transactional(value = \"transactionManager\")\n-    public String enqueueSetEventNotificationsRequest(@Identification final String organisationIdentification,\n-            @Identification final String deviceIdentification, final List<EventNotificationType> eventNotifications,\n-            final int messagePriority) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_EVENT_NOTIFICATIONS);\n-        this.domainHelperService.isInMaintenance(device);\n-\n-        LOGGER.debug(\"enqueueSetEventNotificationsRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final EventNotificationMessageDataContainer eventNotificationMessageDataContainer = new EventNotificationMessageDataContainer(\n-                eventNotifications);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_EVENT_NOTIFICATIONS.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(eventNotificationMessageDataContainer)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    if (!StringUtils.isEmpty(deviceFilter.getPostalCode())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasPostalCode(\n+                  replaceAndEscapeWildcards(deviceFilter.getPostalCode()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public ResponseMessage dequeueSetEventNotificationsResponse(final String correlationUid) throws OsgpException {\n-\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (!StringUtils.isEmpty(deviceFilter.getStreet())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasStreet(\n+                  replaceAndEscapeWildcards(deviceFilter.getStreet()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    // === RETRIEVE SCHEDULED TASKS LIST FOR SPECIFIC DEVICE ===\n-    public List<ScheduledTaskWithoutData> findScheduledTasks(@Identification final String organisationIdentification,\n-            @Identification final String deviceIdentification) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.FIND_SCHEDULED_TASKS);\n-\n-        return this.scheduledTaskRepository.findByDeviceIdentification(deviceIdentification);\n+    if (!StringUtils.isEmpty(deviceFilter.getNumber())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasNumber(\n+                  replaceAndEscapeWildcards(deviceFilter.getNumber()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    // === RETRIEVE SCHEDULED TASKS LIST FOR ALL DEVICES ===\n-    public List<ScheduledTaskWithoutData> findScheduledTasks(@Identification final String organisationIdentification)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_SCHEDULED_TASKS);\n-        return this.scheduledTaskRepository.findByOrganisationIdentification(organisationIdentification);\n+    if (!StringUtils.isEmpty(deviceFilter.getMunicipality())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasMunicipality(\n+                  replaceAndEscapeWildcards(deviceFilter.getMunicipality()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void updateDevice(@Identification final String organisationIdentification,\n-            final String deviceToUpdateIdentification, @Valid final Ssld updateDevice) throws FunctionalException {\n-\n-        final Device existingDevice = this.writableDeviceRepository\n-                .findByDeviceIdentification(deviceToUpdateIdentification);\n-        if (existingDevice == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, nothing to update.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceToUpdateIdentification));\n-        }\n-\n-        final List<DeviceAuthorization> owners = this.writableAuthorizationRepository\n-                .findByDeviceAndFunctionGroup(existingDevice, DeviceFunctionGroup.OWNER);\n-\n-        // Check organisation against owner of device\n-        boolean isOwner = false;\n-        for (final DeviceAuthorization owner : owners) {\n-            if (owner.getOrganisation().getOrganisationIdentification().equalsIgnoreCase(organisationIdentification)) {\n-                isOwner = true;\n-            }\n-        }\n-\n-        if (!isOwner) {\n-            LOGGER.info(\"Device has no owner yet, or organisation is not the owner.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNAUTHORIZED, ComponentType.WS_CORE,\n-                    new NotAuthorizedException(organisationIdentification));\n-        }\n-\n-        // Update the device\n-        existingDevice.updateMetaData(updateDevice.getAlias(), updateDevice.getContainerAddress(),\n-                updateDevice.getGpsCoordinates());\n-\n-        existingDevice.setActivated(updateDevice.isActivated());\n-\n-        if (updateDevice.getDeviceLifecycleStatus() != null) {\n-            existingDevice.setDeviceLifecycleStatus(updateDevice.getDeviceLifecycleStatus());\n-        }\n-\n-        if (updateDevice.getTechnicalInstallationDate() != null) {\n-            existingDevice.setTechnicalInstallationDate(updateDevice.getTechnicalInstallationDate());\n-        }\n-\n-        final Ssld ssld = this.writableSsldRepository.findById(existingDevice.getId())\n-                .orElseThrow(\n-                        () -> new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE));\n-        ssld.updateOutputSettings(updateDevice.receiveOutputSettings());\n-        ssld.setEans(updateDevice.getEans());\n-\n-        for (final Ean ean : updateDevice.getEans()) {\n-            ean.setDevice(ssld);\n-        }\n-\n-        this.writableSsldRepository.save(ssld);\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceAlias(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getAlias())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasAlias(\n+                  replaceAndEscapeWildcards(deviceFilter.getAlias()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void setDeviceAlias(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final String deviceAlias,\n-            final List<DeviceOutputSetting> newDeviceOutputSettings) throws FunctionalException {\n-\n-        final Ssld existingSsld = this.writableSsldRepository.findByDeviceIdentification(deviceIdentification);\n-\n-        if (existingSsld == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, cannot set Alias.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceIdentification));\n-        }\n-\n-        // Check to see if the organization is authorized for SET_DEVICE_ALIASES\n-        final Organisation organisation = this.organisationRepository\n-                .findByOrganisationIdentification(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, existingSsld, DeviceFunction.SET_DEVICE_ALIASES);\n-\n-        if (deviceAlias != null) {\n-            existingSsld.setAlias(deviceAlias);\n-            this.writableDeviceRepository.save(existingSsld);\n-        }\n-\n-        if (newDeviceOutputSettings != null && !newDeviceOutputSettings.isEmpty()) {\n-            this.updateRelayAliases(newDeviceOutputSettings, existingSsld);\n-        }\n-\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentification(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getDeviceIdentification())) {\n+      String searchString = deviceFilter.getDeviceIdentification();\n+\n+      if (!deviceFilter.isExactMatch()) {\n+        searchString = replaceAndEscapeWildcards(searchString).toUpperCase();\n+      }\n+\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasDeviceIdentification(\n+                  searchString, deviceFilter.isExactMatch()));\n     }\n-\n-    private void updateRelayAliases(final List<DeviceOutputSetting> newDeviceOutputSettings, final Ssld ssld)\n-            throws FunctionalException {\n-\n-        final List<org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting> currentOutputSettings = ssld\n-                .getOutputSettings();\n-\n-        if (currentOutputSettings == null || currentOutputSettings.isEmpty()) {\n-            LOGGER.info(\"Trying to set relay alias(es) for a device without output settings\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS,\n-                    ComponentType.WS_CORE);\n-        }\n-\n-        for (final DeviceOutputSetting newSetting : newDeviceOutputSettings) {\n-            boolean outputSettingFound = false;\n-            for (final org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting oldSetting : currentOutputSettings) {\n-                if (oldSetting.getExternalId() == newSetting.getExternalId()) {\n-                    oldSetting.setAlias(newSetting.getAlias());\n-                    outputSettingFound = true;\n-                }\n-            }\n-            if (!outputSettingFound) {\n-                LOGGER.info(\"Trying to set alias {} for internal relay {}, which has no output settings\",\n-                        newSetting.getAlias(), newSetting.getInternalId());\n-                throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS,\n-                        ComponentType.WS_CORE);\n-            }\n-        }\n-\n-        this.writableSsldRepository.save(ssld);\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnOrganisationIdentification(\n+      final DeviceFilter deviceFilter, final Organisation organisation)\n+      throws FunctionalException, ArgumentNullOrEmptyException {\n+    final Specification<Device> specification;\n+    if (!StringUtils.isEmpty(deviceFilter.getOrganisationIdentification())) {\n+      final Organisation org =\n+          this.domainHelperService.findOrganisation(deviceFilter.getOrganisationIdentification());\n+      specification = where(this.deviceSpecifications.forOrganisation(org));\n+    } else {\n+      // dummy for 'not initialized'\n+      specification = where(this.deviceSpecifications.forOrganisation(organisation));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void setMaintenanceStatus(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final boolean status) throws FunctionalException {\n-\n-        final Device existingDevice = this.writableDeviceRepository.findByDeviceIdentification(deviceIdentification);\n-\n-        if (existingDevice == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, cannot set maintenance status.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceIdentification));\n-        } else {\n-\n-            // Check to see if the organisation is CONFIGURATION or OWNER\n-            // authorized\n-            boolean isAuthorized = false;\n-            for (final DeviceAuthorization authorizations : existingDevice.getAuthorizations()) {\n-                if (organisationIdentification.equals(authorizations.getOrganisation().getOrganisationIdentification())\n-                        && (DeviceFunctionGroup.OWNER.equals(authorizations.getFunctionGroup())\n-                                || DeviceFunctionGroup.CONFIGURATION.equals(authorizations.getFunctionGroup()))) {\n-                    isAuthorized = true;\n-                    existingDevice.updateInMaintenance(status);\n-                    this.writableDeviceRepository.save(existingDevice);\n-                    break;\n-                }\n-            }\n-\n-            if (!isAuthorized) {\n-                // unauthorized, throwing exception.\n-                throw new FunctionalException(FunctionalExceptionType.UNAUTHORIZED, ComponentType.WS_CORE,\n-                        new NotAuthorizedException(organisationIdentification));\n-            }\n-        }\n+    return specification;\n+  }\n+\n+  // === SET EVENT NOTIFICATIONS ===\n+  @Transactional(value = \"transactionManager\")\n+  public String enqueueSetEventNotificationsRequest(\n+      @Identification final String organisationIdentification,\n+      @Identification final String deviceIdentification,\n+      final List<EventNotificationType> eventNotifications,\n+      final int messagePriority)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_EVENT_NOTIFICATIONS);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueSetEventNotificationsRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final EventNotificationMessageDataContainer eventNotificationMessageDataContainer =\n+        new EventNotificationMessageDataContainer(eventNotifications);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_EVENT_NOTIFICATIONS.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(eventNotificationMessageDataContainer)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public ResponseMessage dequeueSetEventNotificationsResponse(final String correlationUid)\n+      throws OsgpException {\n+\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  // === RETRIEVE SCHEDULED TASKS LIST FOR SPECIFIC DEVICE ===\n+  public List<ScheduledTaskWithoutData> findScheduledTasks(\n+      @Identification final String organisationIdentification,\n+      @Identification final String deviceIdentification)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(organisation, device, DeviceFunction.FIND_SCHEDULED_TASKS);\n+\n+    return this.scheduledTaskRepository.findByDeviceIdentification(deviceIdentification);\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  // === RETRIEVE SCHEDULED TASKS LIST FOR ALL DEVICES ===\n+  public List<ScheduledTaskWithoutData> findScheduledTasks(\n+      @Identification final String organisationIdentification) throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_SCHEDULED_TASKS);\n+    return this.scheduledTaskRepository.findByOrganisationIdentification(\n+        organisationIdentification);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void updateDevice(\n+      @Identification final String organisationIdentification,\n+      final String deviceToUpdateIdentification,\n+      @Valid final Ssld updateDevice)\n+      throws FunctionalException {\n+\n+    final Device existingDevice =\n+        this.writableDeviceRepository.findByDeviceIdentification(deviceToUpdateIdentification);\n+    if (existingDevice == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, nothing to update.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceToUpdateIdentification));\n     }\n \n-    public String enqueueUpdateDeviceSslCertificationRequest(final String organisationIdentification,\n-            final String deviceIdentification, final Certification certification, final int messagePriority)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.UPDATE_DEVICE_SSL_CERTIFICATION);\n-        this.domainHelperService.isInMaintenance(device);\n-\n-        LOGGER.debug(\"enqueueUpdateDeviceSslCertificationRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.UPDATE_DEVICE_SSL_CERTIFICATION.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(certification)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    final List<DeviceAuthorization> owners =\n+        this.writableAuthorizationRepository.findByDeviceAndFunctionGroup(\n+            existingDevice, DeviceFunctionGroup.OWNER);\n+\n+    // Check organisation against owner of device\n+    boolean isOwner = false;\n+    for (final DeviceAuthorization owner : owners) {\n+      if (owner\n+          .getOrganisation()\n+          .getOrganisationIdentification()\n+          .equalsIgnoreCase(organisationIdentification)) {\n+        isOwner = true;\n+      }\n     }\n \n-    public ResponseMessage dequeueUpdateDeviceSslCertificationResponse(final String correlationUid)\n-            throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (!isOwner) {\n+      LOGGER.info(\"Device has no owner yet, or organisation is not the owner.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNAUTHORIZED,\n+          ComponentType.WS_CORE,\n+          new NotAuthorizedException(organisationIdentification));\n     }\n \n-    public String enqueueSetDeviceVerificationKeyRequest(final String organisationIdentification,\n-            final String deviceIdentification, final String verificationKey, final int messagePriority)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+    // Update the device\n+    existingDevice.updateMetaData(\n+        updateDevice.getAlias(),\n+        updateDevice.getContainerAddress(),\n+        updateDevice.getGpsCoordinates());\n \n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_DEVICE_VERIFICATION_KEY);\n-        this.domainHelperService.isInMaintenance(device);\n+    existingDevice.setActivated(updateDevice.isActivated());\n \n-        LOGGER.debug(\"enqueueSetDeviceVerificationKeyRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_DEVICE_VERIFICATION_KEY.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(verificationKey)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    if (updateDevice.getDeviceLifecycleStatus() != null) {\n+      existingDevice.setDeviceLifecycleStatus(updateDevice.getDeviceLifecycleStatus());\n     }\n \n-    public ResponseMessage dequeueSetDeviceVerificationKeyResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (updateDevice.getTechnicalInstallationDate() != null) {\n+      existingDevice.setTechnicalInstallationDate(updateDevice.getTechnicalInstallationDate());\n     }\n \n-    public String enqueueSetDeviceLifecycleStatusRequest(final String organisationIdentification,\n-            final String deviceIdentification, final DeviceLifecycleStatus deviceLifecycleStatus)\n-            throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_DEVICE_LIFECYCLE_STATUS);\n-\n-        LOGGER.debug(\n-                \"enqueueSetDeviceLifecycleStatusRequest called with organisation {}, deviceLifecycleStatus {} and deviceIdentifcation {}\",\n-                organisationIdentification, deviceLifecycleStatus.name(), deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus newDeviceLifecycleStatus = org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus\n-                .valueOf(deviceLifecycleStatus.name());\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_DEVICE_LIFECYCLE_STATUS.name());\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(newDeviceLifecycleStatus)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    final Ssld ssld =\n+        this.writableSsldRepository\n+            .findById(existingDevice.getId())\n+            .orElseThrow(\n+                () ->\n+                    new FunctionalException(\n+                        FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE));\n+    ssld.updateOutputSettings(updateDevice.receiveOutputSettings());\n+    ssld.setEans(updateDevice.getEans());\n+\n+    for (final Ean ean : updateDevice.getEans()) {\n+      ean.setDevice(ssld);\n     }\n \n-    public ResponseMessage dequeueSetDeviceLifecycleStatusResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    this.writableSsldRepository.save(ssld);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void setDeviceAlias(\n+      @Identification final String organisationIdentification,\n+      final String deviceIdentification,\n+      final String deviceAlias,\n+      final List<DeviceOutputSetting> newDeviceOutputSettings)\n+      throws FunctionalException {\n+\n+    final Ssld existingSsld =\n+        this.writableSsldRepository.findByDeviceIdentification(deviceIdentification);\n+\n+    if (existingSsld == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, cannot set Alias.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceIdentification));\n     }\n \n-    public String enqueueUpdateDeviceCdmaSettingsRequest(final String organisationIdentification,\n-            final String deviceIdentification, final CdmaSettings cdmaSettings) throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.UPDATE_DEVICE_CDMA_SETTINGS);\n+    // Check to see if the organization is authorized for SET_DEVICE_ALIASES\n+    final Organisation organisation =\n+        this.organisationRepository.findByOrganisationIdentification(organisationIdentification);\n+    this.domainHelperService.isAllowed(\n+        organisation, existingSsld, DeviceFunction.SET_DEVICE_ALIASES);\n \n-        LOGGER.debug(\n-                \"enqueueUpdateDeviceCdmaSettingsRequest called with organisation {}, deviceIdentification {}, and {}\",\n-                organisationIdentification, deviceIdentification, cdmaSettings);\n+    if (deviceAlias != null) {\n+      existingSsld.setAlias(deviceAlias);\n+      this.writableDeviceRepository.save(existingSsld);\n+    }\n \n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n+    if (newDeviceOutputSettings != null && !newDeviceOutputSettings.isEmpty()) {\n+      this.updateRelayAliases(newDeviceOutputSettings, existingSsld);\n+    }\n+  }\n \n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.UPDATE_DEVICE_CDMA_SETTINGS.name());\n+  private void updateRelayAliases(\n+      final List<DeviceOutputSetting> newDeviceOutputSettings, final Ssld ssld)\n+      throws FunctionalException {\n \n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(cdmaSettings)\n-                .build();\n+    final List<org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting>\n+        currentOutputSettings = ssld.getOutputSettings();\n \n-        this.commonRequestMessageSender.send(message);\n+    if (currentOutputSettings == null || currentOutputSettings.isEmpty()) {\n+      LOGGER.info(\"Trying to set relay alias(es) for a device without output settings\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS, ComponentType.WS_CORE);\n+    }\n \n-        return correlationUid;\n+    for (final DeviceOutputSetting newSetting : newDeviceOutputSettings) {\n+      boolean outputSettingFound = false;\n+      for (final org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting oldSetting :\n+          currentOutputSettings) {\n+        if (oldSetting.getExternalId() == newSetting.getExternalId()) {\n+          oldSetting.setAlias(newSetting.getAlias());\n+          outputSettingFound = true;\n+        }\n+      }\n+      if (!outputSettingFound) {\n+        LOGGER.info(\n+            \"Trying to set alias {} for internal relay {}, which has no output settings\",\n+            newSetting.getAlias(),\n+            newSetting.getInternalId());\n+        throw new FunctionalException(\n+            FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS, ComponentType.WS_CORE);\n+      }\n     }\n \n-    public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    this.writableSsldRepository.save(ssld);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void setMaintenanceStatus(\n+      @Identification final String organisationIdentification,\n+      final String deviceIdentification,\n+      final boolean status)\n+      throws FunctionalException {\n+\n+    final Device existingDevice =\n+        this.writableDeviceRepository.findByDeviceIdentification(deviceIdentification);\n+\n+    if (existingDevice == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, cannot set maintenance status.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceIdentification));\n+    } else {\n+\n+      // Check to see if the organisation is CONFIGURATION or OWNER\n+      // authorized\n+      boolean isAuthorized = false;\n+      for (final DeviceAuthorization authorizations : existingDevice.getAuthorizations()) {\n+        if (organisationIdentification.equals(\n+                authorizations.getOrganisation().getOrganisationIdentification())\n+            && (DeviceFunctionGroup.OWNER.equals(authorizations.getFunctionGroup())\n+                || DeviceFunctionGroup.CONFIGURATION.equals(authorizations.getFunctionGroup()))) {\n+          isAuthorized = true;\n+          existingDevice.updateInMaintenance(status);\n+          this.writableDeviceRepository.save(existingDevice);\n+          break;\n+        }\n+      }\n+\n+      if (!isAuthorized) {\n+        // unauthorized, throwing exception.\n+        throw new FunctionalException(\n+            FunctionalExceptionType.UNAUTHORIZED,\n+            ComponentType.WS_CORE,\n+            new NotAuthorizedException(organisationIdentification));\n+      }\n     }\n+  }\n+\n+  public String enqueueUpdateDeviceSslCertificationRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final Certification certification,\n+      final int messagePriority)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.UPDATE_DEVICE_SSL_CERTIFICATION);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueUpdateDeviceSslCertificationRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.UPDATE_DEVICE_SSL_CERTIFICATION.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(certification)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueUpdateDeviceSslCertificationResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueSetDeviceVerificationKeyRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final String verificationKey,\n+      final int messagePriority)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_DEVICE_VERIFICATION_KEY);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueSetDeviceVerificationKeyRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_DEVICE_VERIFICATION_KEY.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(verificationKey)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueSetDeviceVerificationKeyResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueSetDeviceLifecycleStatusRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final DeviceLifecycleStatus deviceLifecycleStatus)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_DEVICE_LIFECYCLE_STATUS);\n+\n+    LOGGER.debug(\n+        \"enqueueSetDeviceLifecycleStatusRequest called with organisation {}, deviceLifecycleStatus {} and deviceIdentifcation {}\",\n+        organisationIdentification,\n+        deviceLifecycleStatus.name(),\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus\n+        newDeviceLifecycleStatus =\n+            org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus.valueOf(\n+                deviceLifecycleStatus.name());\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_DEVICE_LIFECYCLE_STATUS.name());\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(newDeviceLifecycleStatus)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueSetDeviceLifecycleStatusResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueUpdateDeviceCdmaSettingsRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final CdmaSettings cdmaSettings)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.UPDATE_DEVICE_CDMA_SETTINGS);\n+\n+    LOGGER.debug(\n+        \"enqueueUpdateDeviceCdmaSettingsRequest called with organisation {}, deviceIdentification {}, and {}\",\n+        organisationIdentification,\n+        deviceIdentification,\n+        cdmaSettings);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.UPDATE_DEVICE_CDMA_SETTINGS.name());\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(cdmaSettings)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n }\n", "next_change": {"commit": "9af4082fbd35cba98eeb0eaf4263d60f12af1bf3", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 254e3cad23..35e6e79728 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -1070,9 +1048,4 @@ public class DeviceManagementService {\n \n     return correlationUid;\n   }\n-\n-  public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid)\n-      throws OsgpException {\n-    return this.commonResponseMessageFinder.findMessage(correlationUid);\n-  }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "message": "Merge commit", "committedDate": null}, {"oid": "557f6aac0180340d79051073c6c959beb23e8ba4", "committedDate": "2020-06-24 17:25:29 +0200", "message": "Make the wildcard functionality consistent inside the operator application (#354)"}, {"oid": "38f5f2f067dee4744ef59b25caf2ea2dca097546", "committedDate": "2020-07-02 16:21:00 +0200", "message": "FLEX-5413 ~ Orders organisations by identification (#360)"}, {"oid": "c5712fb2525d44de739996fd758cf5b940269bb8", "committedDate": "2020-07-28 16:41:59 +0200", "message": "Feature/flex 5402 sorting filtering messages page (#368)"}, {"oid": "4021af7008addf1d043b8b167cb22dd8822a5fc0", "committedDate": "2020-09-02 10:49:08 +0000", "message": "Removing of devicemodel from UpdateDeviceRequest"}, {"oid": "8c0969f6d464e9be6129c3168367847c6b1423fe", "committedDate": "2020-09-08 15:10:09 +0200", "message": "FLEX-5335 ~ Removes unused import"}, {"oid": "5e579938146e585390b9bcd48ca0a7d32d9e32c0", "committedDate": "2020-10-08 09:53:46 +0200", "message": "Fixed several SonarQube issues"}, {"oid": "6f04a97e7b104ad6a7128ae92493ec538a9c52e3", "committedDate": "2020-10-08 18:04:11 +0200", "message": "FLEX-5335 ~ Use UpdatedDevice in xsd"}, {"oid": "c10966151cf88854d89c5636223d14563fef76c5", "committedDate": "2020-10-16 00:30:15 +0200", "message": "FLEX-5335 ~ Processes review comments"}, {"oid": "8ff3ffc0b3444d0ff476689803ced85c326d6aed", "committedDate": "2020-10-20 12:06:11 +0200", "message": "Feature/flex 5495 add wildcard for search username (#453)"}, {"oid": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "committedDate": "2020-10-27 13:33:10 +0100", "message": "Several changes based on the feedback provided to earlier changes."}, {"oid": "960edf5624e0e097ea28fc19afb1b2eab32e25d7", "committedDate": "2020-10-30 18:48:43 +0100", "message": "FLEX-5534 ~ Improves archiving performance (#475)"}, {"oid": "f6287f9436eb47661064a5f197d1dd04945ec83f", "committedDate": "2020-11-17 10:42:46 +0100", "message": "Merge branch 'development' into code_quality/Solving_SonarQube_Issues"}, {"oid": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "committedDate": "2021-04-16 08:37:27 +0200", "message": "Apply GXF styled Google Java Format conventions to the code base (#610)"}, {"oid": "08043d128031a66909018eb617ff3f713666b3be", "committedDate": "2021-07-12 15:33:55 +0200", "message": "FDP-111: Removed DeviceMessageMetadata and replaced all occurences with MessageMetadata"}, {"oid": "9af4082fbd35cba98eeb0eaf4263d60f12af1bf3", "committedDate": "2022-01-08 08:52:35 +0100", "message": "Add notifications to osgp-adapter-ws-core"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODQxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426708413", "body": "It would be more consistent to create method \"this.eventSpecifications.hasDescription(...)\".", "bodyText": "It would be more consistent to create method \"this.eventSpecifications.hasDescription(...)\".", "bodyHTML": "<p dir=\"auto\">It would be more consistent to create method \"this.eventSpecifications.hasDescription(...)\".</p>", "author": "rlemmers", "createdAt": "2020-05-18T15:25:10Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java", "diffHunk": "@@ -221,6 +222,7 @@ public Organisation findOrganisation(@Identification final String organisationId\n             if (eventTypes != null && !eventTypes.isEmpty()) {\n                 specification = specification.and(this.eventSpecifications.hasEventTypes(eventTypes));\n             }\n+            specification = handleDescription(description, descriptionStartsWith, specification);", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI2NzczMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r427267730", "bodyText": "description is special, an thus handled in a special way", "author": "robindenadel", "createdAt": "2020-05-19T12:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "2ca5b6924d74416c64781aaa0bd964679231be97", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -184,49 +185,45 @@ public class DeviceManagementService {\n     }\n \n     @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final PageSpecifier pageSpecifier, final DateTime from,\n-            final DateTime until, final List<EventType> eventTypes, final String description,\n-            final String descriptionStartsWith) throws FunctionalException {\n+    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n+        final String organisationIdentification = criteria.getOrganisationIdentification();\n+        final String deviceIdentification = criteria.getDeviceIdentification();\n         LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n                 deviceIdentification);\n \n         final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n \n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n+        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n         final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n                 this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n \n         Specification<Event> specification;\n \n-        try {\n-            if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-                final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-                this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n-\n-                specification = where(this.eventSpecifications.isFromDevice(device));\n-            } else {\n-                specification = where(this.eventSpecifications.isAuthorized(organisation));\n-            }\n+        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-            if (from != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-            }\n+            specification = where(this.eventSpecifications.isFromDevice(device));\n+        } else {\n+            specification = where(this.eventSpecifications.isAuthorized(organisation));\n+        }\n \n-            if (until != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-            }\n+        final DateTime from = criteria.getFrom();\n+        if (from != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+        }\n \n-            if (eventTypes != null && !eventTypes.isEmpty()) {\n-                specification = specification.and(this.eventSpecifications.hasEventTypes(eventTypes));\n-            }\n-            specification = handleDescription(description, descriptionStartsWith, specification);\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            throw new FunctionalException(FunctionalExceptionType.ARGUMENT_NULL, ComponentType.WS_CORE, e);\n+        final DateTime until = criteria.getUntil();\n+        if (until != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n         }\n \n+        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+        specification = this.handleDescription(SearchUtil.getCleanedInput(criteria.getDescription()),\n+                SearchUtil.getCleanedInput(criteria.getDescriptionStartsWith()), specification);\n+\n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n         LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -184,49 +185,45 @@ public class DeviceManagementService {\n     }\n \n     @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final PageSpecifier pageSpecifier, final DateTime from,\n-            final DateTime until, final List<EventType> eventTypes, final String description,\n-            final String descriptionStartsWith) throws FunctionalException {\n+    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n+        final String organisationIdentification = criteria.getOrganisationIdentification();\n+        final String deviceIdentification = criteria.getDeviceIdentification();\n         LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n                 deviceIdentification);\n \n         final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n \n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n+        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n         final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n                 this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n \n         Specification<Event> specification;\n \n-        try {\n-            if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-                final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-                this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n-\n-                specification = where(this.eventSpecifications.isFromDevice(device));\n-            } else {\n-                specification = where(this.eventSpecifications.isAuthorized(organisation));\n-            }\n+        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-            if (from != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-            }\n+            specification = where(this.eventSpecifications.isFromDevice(device));\n+        } else {\n+            specification = where(this.eventSpecifications.isAuthorized(organisation));\n+        }\n \n-            if (until != null) {\n-                specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-            }\n+        final DateTime from = criteria.getFrom();\n+        if (from != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+        }\n \n-            if (eventTypes != null && !eventTypes.isEmpty()) {\n-                specification = specification.and(this.eventSpecifications.hasEventTypes(eventTypes));\n-            }\n-            specification = handleDescription(description, descriptionStartsWith, specification);\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            throw new FunctionalException(FunctionalExceptionType.ARGUMENT_NULL, ComponentType.WS_CORE, e);\n+        final DateTime until = criteria.getUntil();\n+        if (until != null) {\n+            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n         }\n \n+        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+        specification = this.handleDescription(SearchUtil.getCleanedInput(criteria.getDescription()),\n+                SearchUtil.getCleanedInput(criteria.getDescriptionStartsWith()), specification);\n+\n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n         LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n", "next_change": {"commit": "c5712fb2525d44de739996fd758cf5b940269bb8", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 18948839b1..989013dd45 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -221,8 +219,8 @@ public class DeviceManagementService {\n         }\n \n         specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.getCleanedInput(criteria.getDescription()),\n-                SearchUtil.getCleanedInput(criteria.getDescriptionStartsWith()), specification);\n+        specification = this.handleDescription(SearchUtil.replaceWildcards(criteria.getDescription()),\n+                SearchUtil.replaceWildcards(criteria.getDescriptionStartsWith()), specification);\n \n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n", "next_change": {"commit": "8ff3ffc0b3444d0ff476689803ced85c326d6aed", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 989013dd45..a2036e867c 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -219,8 +219,8 @@ public class DeviceManagementService {\n         }\n \n         specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceWildcards(criteria.getDescription()),\n-                SearchUtil.replaceWildcards(criteria.getDescriptionStartsWith()), specification);\n+        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n+                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n \n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n", "next_change": {"commit": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex a2036e867c..78e9982ac8 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -219,8 +219,8 @@ public class DeviceManagementService {\n         }\n \n         specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n-                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n+        specification = this.handleDescription(SearchUtil.replaceWildcards(criteria.getDescription()),\n+                SearchUtil.replaceWildcards(criteria.getDescriptionStartsWith()), specification);\n \n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n", "next_change": {"commit": "960edf5624e0e097ea28fc19afb1b2eab32e25d7", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 78e9982ac8..d356ff420e 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -219,8 +219,8 @@ public class DeviceManagementService {\n         }\n \n         specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceWildcards(criteria.getDescription()),\n-                SearchUtil.replaceWildcards(criteria.getDescriptionStartsWith()), specification);\n+        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n+                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n \n         LOGGER.debug(\"request offset     : {}\", request.getOffset());\n         LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n", "next_change": {"commit": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex d356ff420e..254e3cad23 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -83,825 +82,997 @@ import org.springframework.validation.annotation.Validated;\n @Service(value = \"wsCoreDeviceManagementService\")\n @Validated\n public class DeviceManagementService {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DeviceManagementService.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DeviceManagementService.class);\n \n-    @Autowired\n-    private PagingSettings pagingSettings;\n+  @Autowired private PagingSettings pagingSettings;\n \n-    @Autowired\n-    private DomainHelperService domainHelperService;\n+  @Autowired private DomainHelperService domainHelperService;\n \n-    @Autowired\n-    private OrganisationRepository organisationRepository;\n+  @Autowired private OrganisationRepository organisationRepository;\n \n-    @Autowired\n-    private EventSpecifications eventSpecifications;\n+  @Autowired private EventSpecifications eventSpecifications;\n \n-    @Autowired\n-    private DeviceRepository deviceRepository;\n+  @Autowired private DeviceRepository deviceRepository;\n \n-    @Autowired\n-    private DeviceSpecifications deviceSpecifications;\n+  @Autowired private DeviceSpecifications deviceSpecifications;\n \n-    @Autowired\n-    private FirmwareManagementService firmwareManagementService;\n+  @Autowired private FirmwareManagementService firmwareManagementService;\n \n-    @Autowired\n-    private EventRepository eventRepository;\n+  @Autowired private EventRepository eventRepository;\n \n-    @Autowired\n-    private CorrelationIdProviderService correlationIdProviderService;\n+  @Autowired private CorrelationIdProviderService correlationIdProviderService;\n \n-    @Autowired\n-    private CommonRequestMessageSender commonRequestMessageSender;\n+  @Autowired private CommonRequestMessageSender commonRequestMessageSender;\n \n-    @Autowired\n-    private CommonResponseMessageFinder commonResponseMessageFinder;\n+  @Autowired private CommonResponseMessageFinder commonResponseMessageFinder;\n \n-    @Autowired\n-    private ScheduledTaskWithoutDataRepository scheduledTaskRepository;\n+  @Autowired private ScheduledTaskWithoutDataRepository scheduledTaskRepository;\n \n-    @Autowired\n-    private WritableDeviceAuthorizationRepository writableAuthorizationRepository;\n+  @Autowired private WritableDeviceAuthorizationRepository writableAuthorizationRepository;\n \n-    @Autowired\n-    private WritableDeviceRepository writableDeviceRepository;\n+  @Autowired private WritableDeviceRepository writableDeviceRepository;\n \n-    @Autowired\n-    private WritableSsldRepository writableSsldRepository;\n+  @Autowired private WritableSsldRepository writableSsldRepository;\n \n-    @Autowired\n-    private DeviceDomainService deviceDomainService;\n+  @Autowired private DeviceDomainService deviceDomainService;\n \n-    @Autowired\n-    @Qualifier(\"wsCoreDeviceManagementNetManagementOrganisation\")\n-    private String netManagementOrganisation;\n+  @Autowired\n+  @Qualifier(\"wsCoreDeviceManagementNetManagementOrganisation\")\n+  private String netManagementOrganisation;\n \n-    /**\n-     * Constructor\n-     */\n-    public DeviceManagementService() {\n-        // Parameterless constructor required for transactions...\n-    }\n+  /** Constructor */\n+  public DeviceManagementService() {\n+    // Parameterless constructor required for transactions...\n+  }\n \n-    @Transactional(value = \"transactionManager\")\n-    public Organisation findOrganisation(@Identification final String organisationIdentification,\n-            @Identification final String organisationIdentificationToFind) throws FunctionalException {\n+  @Transactional(value = \"transactionManager\")\n+  public Organisation findOrganisation(\n+      @Identification final String organisationIdentification,\n+      @Identification final String organisationIdentificationToFind)\n+      throws FunctionalException {\n \n-        LOGGER.debug(\"findOrganisation called with organisation {} and trying to find {}\", organisationIdentification,\n-                organisationIdentificationToFind);\n+    LOGGER.debug(\n+        \"findOrganisation called with organisation {} and trying to find {}\",\n+        organisationIdentification,\n+        organisationIdentificationToFind);\n \n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n \n-        if (this.netManagementOrganisation.equals(organisationIdentification)\n-                || organisationIdentification.equals(organisationIdentificationToFind)) {\n-            return this.organisationRepository.findByOrganisationIdentification(organisationIdentificationToFind);\n-        } else {\n-            return null;\n-        }\n+    if (this.netManagementOrganisation.equals(organisationIdentification)\n+        || organisationIdentification.equals(organisationIdentificationToFind)) {\n+      return this.organisationRepository.findByOrganisationIdentification(\n+          organisationIdentificationToFind);\n+    } else {\n+      return null;\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public List<Organisation> findAllOrganisations(@Identification final String organisationIdentification)\n-            throws FunctionalException {\n-\n-        LOGGER.debug(\"findAllOrganisations called with organisation {}\", organisationIdentification);\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n-\n-        if (this.netManagementOrganisation.equals(organisationIdentification)) {\n-            return this.organisationRepository.findByOrderByOrganisationIdentification();\n-        } else {\n-            final Organisation org = this.organisationRepository\n-                    .findByOrganisationIdentification(organisationIdentification);\n-            final List<Organisation> organisations = new ArrayList<>();\n-            organisations.add(org);\n-            return organisations;\n-        }\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public List<Organisation> findAllOrganisations(\n+      @Identification final String organisationIdentification) throws FunctionalException {\n+\n+    LOGGER.debug(\"findAllOrganisations called with organisation {}\", organisationIdentification);\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n+\n+    if (this.netManagementOrganisation.equals(organisationIdentification)) {\n+      return this.organisationRepository.findByOrderByOrganisationIdentification();\n+    } else {\n+      final Organisation org =\n+          this.organisationRepository.findByOrganisationIdentification(organisationIdentification);\n+      final List<Organisation> organisations = new ArrayList<>();\n+      organisations.add(org);\n+      return organisations;\n     }\n+  }\n \n-    @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n-\n-        final String organisationIdentification = criteria.getOrganisationIdentification();\n-        final String deviceIdentification = criteria.getDeviceIdentification();\n-        LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n-                deviceIdentification);\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-\n-        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n-\n-        final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n-                this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n-        Specification<Event> specification;\n+    final String organisationIdentification = criteria.getOrganisationIdentification();\n+    final String deviceIdentification = criteria.getDeviceIdentification();\n+    LOGGER.debug(\n+        \"findEvents called for organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n \n-        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n \n-            specification = where(this.eventSpecifications.isFromDevice(deviceIdentification));\n-        } else {\n-            specification = where(this.eventSpecifications.isAuthorized(organisation));\n-        }\n+    this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n-        final DateTime from = criteria.getFrom();\n-        if (from != null) {\n-            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-        }\n-\n-        final DateTime until = criteria.getUntil();\n-        if (until != null) {\n-            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-        }\n+    final PageRequest request =\n+        PageRequest.of(\n+            this.pagingSettings.getPageNumber(),\n+            this.pagingSettings.getPageSize(),\n+            Sort.Direction.DESC,\n+            \"dateTime\");\n \n-        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n-                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n+    Specification<Event> specification;\n \n-        LOGGER.debug(\"request offset     : {}\", request.getOffset());\n-        LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n-        LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n-        LOGGER.debug(\"        sort       : {}\", request.getSort());\n+    if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+      final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+      this.domainHelperService.isAllowed(\n+          organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-        return this.eventRepository.findAll(specification, request);\n+      specification = where(this.eventSpecifications.isFromDevice(deviceIdentification));\n+    } else {\n+      specification = where(this.eventSpecifications.isAuthorized(organisation));\n     }\n \n-    private Specification<Event> handleDescription(final String description, final String descriptionStartsWith,\n-            final Specification<Event> specification) {\n-\n-        final Specification<Event> descriptionSpecification = this.eventSpecifications.withDescription(description);\n-        final Specification<Event> descriptionStartsWithSpecification = this.eventSpecifications\n-                .startsWithDescription(descriptionStartsWith);\n-\n-        if (description == null && descriptionStartsWith == null) {\n-            return specification;\n-        }\n-        if (description == null && descriptionStartsWith != null) {\n-            return specification.and(descriptionStartsWithSpecification);\n-        }\n-        if (description != null && descriptionStartsWith == null) {\n-            return specification.and(descriptionSpecification);\n-        }\n-        return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n-    }\n-\n-    /**\n-     * Find all devices\n-     *\n-     * @param organisationIdentification\n-     *            The organisation who performed the action\n-     * @param pageSpecifier\n-     *            The page to be returned\n-     * @param deviceFilter\n-     *            the filter object\n-     *\n-     * @return A page with devices\n-     *\n-     * @throws FunctionalException\n-     */\n-    @Transactional(value = \"transactionManager\")\n-    public Page<Device> findDevices(@Identification final String organisationIdentification,\n-            final PageSpecifier pageSpecifier, final DeviceFilter deviceFilter) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_DEVICES);\n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n-        Sort.Direction sortDir = Sort.Direction.DESC;\n-        String sortedBy = \"creationTime\";\n-        if (deviceFilter != null) {\n-            if (!StringUtils.isEmpty(deviceFilter.getSortDir()) && deviceFilter.getSortDir().contains(\"asc\")) {\n-                sortDir = Sort.Direction.ASC;\n-            }\n-            if (!StringUtils.isEmpty(deviceFilter.getSortedBy())) {\n-                sortedBy = deviceFilter.getSortedBy();\n-            }\n-        }\n-\n-        final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n-                this.pagingSettings.getPageSize(), sortDir, sortedBy);\n-\n-        final Page<Device> devices = this.findDevices(organisationIdentification, deviceFilter, organisation, request);\n-\n-        if (devices == null) {\n-            LOGGER.info(\"No devices found\");\n-            return null;\n-        }\n-\n-        for (final Device device : devices.getContent()) {\n-            for (final DeviceAuthorization deviceAutorization : device.getAuthorizations()) {\n-                device.addOrganisation(deviceAutorization.getOrganisation().getOrganisationIdentification());\n-            }\n-        }\n+    final DateTime from = criteria.getFrom();\n+    if (from != null) {\n+      specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+    }\n \n-        return devices;\n-    }\n-\n-    private Page<Device> findDevices(final String organisationIdentification, final DeviceFilter deviceFilter,\n-            final Organisation organisation, final PageRequest request) {\n-        Page<Device> devices;\n-        try {\n-            if (!this.netManagementOrganisation.equals(organisationIdentification)) {\n-                // Municipality organization.\n-                if (deviceFilter == null) {\n-                    final DeviceFilter df = new DeviceFilter();\n-                    df.setOrganisationIdentification(organisationIdentification);\n-                    df.setDeviceExternalManaged(DeviceExternalManagedFilterType.BOTH);\n-                    df.setDeviceActivated(DeviceActivatedFilterType.BOTH);\n-                    df.setDeviceInMaintenance(DeviceInMaintenanceFilterType.BOTH);\n-                    df.setHasTechnicalInstallation(false);\n-                    df.setExactMatch(false);\n-                    devices = this.applyFilter(df, organisation, request);\n-                } else {\n-                    deviceFilter.setOrganisationIdentification(organisationIdentification);\n-                    devices = this.applyFilter(deviceFilter, organisation, request);\n-                }\n-            } else {\n-                // Net management organization.\n-                devices = this.applyFilter(deviceFilter, organisation, request);\n-            }\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            /*\n-             * The implementation of applyFilter should check everything passed\n-             * on to DeviceSpecifications for not being empty, thus avoiding\n-             * ArgumentNullOrEmptyException. If something is missed (which\n-             * should not occur) pass it on as IllegalArgumentException to avoid\n-             * multiple checked exceptions being thrown.\n-             */\n-            throw new IllegalArgumentException(\"Null or empty input provided to DeviceSpecifications\", e);\n-        }\n-        return devices;\n-    }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public Page<Device> applyFilter(final DeviceFilter deviceFilter, final Organisation organisation,\n-            final PageRequest request) throws ArgumentNullOrEmptyException {\n-        Page<Device> devices = null;\n-\n-        try {\n-            if (deviceFilter != null) {\n-                final Specification<Device> specification = this.doApplyFilter(deviceFilter, organisation);\n-                devices = this.deviceRepository.findAll(specification, request);\n-            } else {\n-                if (organisation != null) {\n-                    final Specification<Device> specification = Specification\n-                            .where(this.deviceSpecifications.forOrganisation(organisation));\n-                    devices = this.deviceRepository.findAll(specification, request);\n-                } else {\n-                    devices = this.deviceRepository.findAll(request);\n-                }\n-            }\n-        } catch (final FunctionalException functionalException) {\n-            LOGGER.error(\"FunctionalException\", functionalException);\n-        } catch (final QueryException e) {\n-            LOGGER.error(\"QueryException\", e);\n-        }\n+    final DateTime until = criteria.getUntil();\n+    if (until != null) {\n+      specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n+    }\n \n-        return devices;\n+    specification =\n+        specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+    specification =\n+        this.handleDescription(\n+            SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n+            SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()),\n+            specification);\n+\n+    LOGGER.debug(\"request offset     : {}\", request.getOffset());\n+    LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n+    LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n+    LOGGER.debug(\"        sort       : {}\", request.getSort());\n+\n+    return this.eventRepository.findAll(specification, request);\n+  }\n+\n+  private Specification<Event> handleDescription(\n+      final String description,\n+      final String descriptionStartsWith,\n+      final Specification<Event> specification) {\n+\n+    final Specification<Event> descriptionSpecification =\n+        this.eventSpecifications.withDescription(description);\n+    final Specification<Event> descriptionStartsWithSpecification =\n+        this.eventSpecifications.startsWithDescription(descriptionStartsWith);\n+\n+    if (description == null && descriptionStartsWith == null) {\n+      return specification;\n+    }\n+    if (description == null) {\n+      return specification.and(descriptionStartsWithSpecification);\n+    }\n+    if (descriptionStartsWith == null) {\n+      return specification.and(descriptionSpecification);\n+    }\n+    return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n+  }\n+\n+  /**\n+   * Find all devices\n+   *\n+   * @param organisationIdentification The organisation who performed the action\n+   * @param pageSpecifier The page to be returned\n+   * @param deviceFilter the filter object\n+   * @return A page with devices\n+   * @throws FunctionalException\n+   */\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Device> findDevices(\n+      @Identification final String organisationIdentification,\n+      final PageSpecifier pageSpecifier,\n+      final DeviceFilter deviceFilter)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_DEVICES);\n+    this.pagingSettings.updatePagingSettings(pageSpecifier);\n+    Sort.Direction sortDir = Sort.Direction.DESC;\n+    String sortedBy = \"creationTime\";\n+    if (deviceFilter != null) {\n+      if (!StringUtils.isEmpty(deviceFilter.getSortDir())\n+          && deviceFilter.getSortDir().contains(\"asc\")) {\n+        sortDir = Sort.Direction.ASC;\n+      }\n+      if (!StringUtils.isEmpty(deviceFilter.getSortedBy())) {\n+        sortedBy = deviceFilter.getSortedBy();\n+      }\n     }\n \n-    private Specification<Device> doApplyFilter(final DeviceFilter deviceFilter, final Organisation organisation)\n-            throws FunctionalException, ArgumentNullOrEmptyException {\n+    final PageRequest request =\n+        PageRequest.of(\n+            this.pagingSettings.getPageNumber(),\n+            this.pagingSettings.getPageSize(),\n+            sortDir,\n+            sortedBy);\n \n-        Specification<Device> specification = this.doFilterOnOrganisationIdentification(deviceFilter, organisation);\n-        specification = this.doFilterOnDeviceIdentification(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceAlias(deviceFilter, specification);\n-        specification = this.doFilterOnAddress(deviceFilter, specification);\n-        specification = this.doFilterOnExternalManaged(deviceFilter, specification);\n-        specification = this.doFilterOnActivated(deviceFilter, specification);\n-        specification = this.doFilterOnInMaintenance(deviceFilter, specification);\n-        specification = this.doFilterOnHasTechnicalInstallationDate(deviceFilter, specification);\n-        specification = this.doFilterOnOwner(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceType(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceModel(deviceFilter, specification);\n-        specification = this.doFilterOnManufacturer(deviceFilter, specification);\n-        specification = this.doFilterOnFirmwareModuleVersion(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceIdentificationsToUse(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceIdentificationsToExclude(deviceFilter, specification);\n+    final Page<Device> devices =\n+        this.findDevices(organisationIdentification, deviceFilter, organisation, request);\n \n-        return specification;\n+    if (devices == null) {\n+      LOGGER.info(\"No devices found\");\n+      return null;\n     }\n \n-    private Specification<Device> doFilterOnDeviceIdentificationsToExclude(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceIdentificationsToExclude() != null\n-                && !deviceFilter.getDeviceIdentificationsToExclude().isEmpty()) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .excludeDeviceIdentificationList(deviceFilter.getDeviceIdentificationsToExclude()));\n-\n-        }\n-        return specification;\n+    for (final Device device : devices.getContent()) {\n+      for (final DeviceAuthorization deviceAutorization : device.getAuthorizations()) {\n+        device.addOrganisation(\n+            deviceAutorization.getOrganisation().getOrganisationIdentification());\n+      }\n     }\n \n-    private Specification<Device> doFilterOnDeviceIdentificationsToUse(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceIdentificationsToUse() != null\n-                && !deviceFilter.getDeviceIdentificationsToUse().isEmpty()) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .existsInDeviceIdentificationList(deviceFilter.getDeviceIdentificationsToUse()));\n-\n+    return devices;\n+  }\n+\n+  private Page<Device> findDevices(\n+      final String organisationIdentification,\n+      final DeviceFilter deviceFilter,\n+      final Organisation organisation,\n+      final PageRequest request) {\n+    final Page<Device> devices;\n+    try {\n+      if (!this.netManagementOrganisation.equals(organisationIdentification)) {\n+        // Municipality organization.\n+        if (deviceFilter == null) {\n+          final DeviceFilter df = new DeviceFilter();\n+          df.setOrganisationIdentification(organisationIdentification);\n+          df.setDeviceExternalManaged(DeviceExternalManagedFilterType.BOTH);\n+          df.setDeviceActivated(DeviceActivatedFilterType.BOTH);\n+          df.setDeviceInMaintenance(DeviceInMaintenanceFilterType.BOTH);\n+          df.setHasTechnicalInstallation(false);\n+          df.setExactMatch(false);\n+          devices = this.applyFilter(df, organisation, request);\n+        } else {\n+          deviceFilter.setOrganisationIdentification(organisationIdentification);\n+          devices = this.applyFilter(deviceFilter, organisation, request);\n         }\n-        return specification;\n+      } else {\n+        // Net management organization.\n+        devices = this.applyFilter(deviceFilter, organisation, request);\n+      }\n+    } catch (final ArgumentNullOrEmptyException e) {\n+      /*\n+       * The implementation of applyFilter should check everything passed\n+       * on to DeviceSpecifications for not being empty, thus avoiding\n+       * ArgumentNullOrEmptyException. If something is missed (which\n+       * should not occur) pass it on as IllegalArgumentException to avoid\n+       * multiple checked exceptions being thrown.\n+       */\n+      throw new IllegalArgumentException(\"Null or empty input provided to DeviceSpecifications\", e);\n     }\n-\n-    private Specification<Device> doFilterOnFirmwareModuleVersion(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getFirmwareModuleVersion())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.forFirmwareModuleVersion(deviceFilter.getFirmwareModuleType(),\n-                            replaceAndEscapeWildcards(deviceFilter.getFirmwareModuleVersion()).toUpperCase()));\n+    return devices;\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Device> applyFilter(\n+      final DeviceFilter deviceFilter, final Organisation organisation, final PageRequest request)\n+      throws ArgumentNullOrEmptyException {\n+    Page<Device> devices = null;\n+\n+    try {\n+      if (deviceFilter != null) {\n+        final Specification<Device> specification = this.doApplyFilter(deviceFilter, organisation);\n+        devices = this.deviceRepository.findAll(specification, request);\n+      } else {\n+        if (organisation != null) {\n+          final Specification<Device> specification =\n+              Specification.where(this.deviceSpecifications.forOrganisation(organisation));\n+          devices = this.deviceRepository.findAll(specification, request);\n+        } else {\n+          devices = this.deviceRepository.findAll(request);\n         }\n-        return specification;\n+      }\n+    } catch (final FunctionalException functionalException) {\n+      LOGGER.error(\"FunctionalException\", functionalException);\n+    } catch (final QueryException e) {\n+      LOGGER.error(\"QueryException\", e);\n     }\n \n-    private Specification<Device> doFilterOnManufacturer(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getManufacturer())) {\n-            final Manufacturer manufacturer = this.firmwareManagementService\n-                    .findManufacturer(deviceFilter.getManufacturer());\n-            specification = specification.and(this.deviceSpecifications.forManufacturer(manufacturer));\n-        }\n-        return specification;\n+    return devices;\n+  }\n+\n+  private Specification<Device> doApplyFilter(\n+      final DeviceFilter deviceFilter, final Organisation organisation)\n+      throws FunctionalException, ArgumentNullOrEmptyException {\n+\n+    Specification<Device> specification =\n+        this.doFilterOnOrganisationIdentification(deviceFilter, organisation);\n+    specification = this.doFilterOnDeviceIdentification(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceAlias(deviceFilter, specification);\n+    specification = this.doFilterOnAddress(deviceFilter, specification);\n+    specification = this.doFilterOnExternalManaged(deviceFilter, specification);\n+    specification = this.doFilterOnActivated(deviceFilter, specification);\n+    specification = this.doFilterOnInMaintenance(deviceFilter, specification);\n+    specification = this.doFilterOnHasTechnicalInstallationDate(deviceFilter, specification);\n+    specification = this.doFilterOnOwner(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceType(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceModel(deviceFilter, specification);\n+    specification = this.doFilterOnManufacturer(deviceFilter, specification);\n+    specification = this.doFilterOnFirmwareModuleVersion(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceIdentificationsToUse(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceIdentificationsToExclude(deviceFilter, specification);\n+\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentificationsToExclude(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceIdentificationsToExclude() != null\n+        && !deviceFilter.getDeviceIdentificationsToExclude().isEmpty()) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.excludeDeviceIdentificationList(\n+                  deviceFilter.getDeviceIdentificationsToExclude()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceModel(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getModel())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forDeviceModel(replaceAndEscapeWildcards(deviceFilter.getModel()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentificationsToUse(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceIdentificationsToUse() != null\n+        && !deviceFilter.getDeviceIdentificationsToUse().isEmpty()) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.existsInDeviceIdentificationList(\n+                  deviceFilter.getDeviceIdentificationsToUse()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceType(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getDeviceType())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forDeviceType(replaceAndEscapeWildcards(deviceFilter.getDeviceType()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnFirmwareModuleVersion(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getFirmwareModuleVersion())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forFirmwareModuleVersion(\n+                  deviceFilter.getFirmwareModuleType(),\n+                  replaceAndEscapeWildcards(deviceFilter.getFirmwareModuleVersion())\n+                      .toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnOwner(final DeviceFilter deviceFilter, Specification<Device> specification)\n-            throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getOwner())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forOwner(replaceAndEscapeWildcards(deviceFilter.getOwner()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnManufacturer(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getManufacturer())) {\n+      final Manufacturer manufacturer =\n+          this.firmwareManagementService.findManufacturer(deviceFilter.getManufacturer());\n+      specification = specification.and(this.deviceSpecifications.forManufacturer(manufacturer));\n     }\n-\n-    private Specification<Device> doFilterOnHasTechnicalInstallationDate(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.isHasTechnicalInstallation()) {\n-            specification = specification.and(this.deviceSpecifications.hasTechnicalInstallationDate());\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceModel(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getModel())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forDeviceModel(\n+                  replaceAndEscapeWildcards(deviceFilter.getModel()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnInMaintenance(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceInMaintenance() != null\n-                && !DeviceInMaintenanceFilterType.BOTH.equals(deviceFilter.getDeviceInMaintenance())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.isInMaintenance(deviceFilter.getDeviceInMaintenance().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceType(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getDeviceType())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forDeviceType(\n+                  replaceAndEscapeWildcards(deviceFilter.getDeviceType()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnActivated(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceActivated() != null\n-                && !DeviceActivatedFilterType.BOTH.equals(deviceFilter.getDeviceActivated())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.isActived(deviceFilter.getDeviceActivated().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnOwner(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getOwner())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forOwner(\n+                  replaceAndEscapeWildcards(deviceFilter.getOwner()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnExternalManaged(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceExternalManaged() != null\n-                && !DeviceExternalManagedFilterType.BOTH.equals(deviceFilter.getDeviceExternalManaged())) {\n-            specification = specification.and(\n-                    this.deviceSpecifications.isManagedExternally(deviceFilter.getDeviceExternalManaged().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnHasTechnicalInstallationDate(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.isHasTechnicalInstallation()) {\n+      specification = specification.and(this.deviceSpecifications.hasTechnicalInstallationDate());\n     }\n-\n-    private Specification<Device> doFilterOnAddress(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getCity())) {\n-            specification = specification.and(\n-                    this.deviceSpecifications.hasCity(replaceAndEscapeWildcards(deviceFilter.getCity()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getPostalCode())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasPostalCode(replaceAndEscapeWildcards(deviceFilter.getPostalCode()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getStreet())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasStreet(replaceAndEscapeWildcards(deviceFilter.getStreet()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getNumber())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasNumber(replaceAndEscapeWildcards(deviceFilter.getNumber()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getMunicipality())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasMunicipality(replaceAndEscapeWildcards(deviceFilter.getMunicipality()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnInMaintenance(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceInMaintenance() != null\n+        && !DeviceInMaintenanceFilterType.BOTH.equals(deviceFilter.getDeviceInMaintenance())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isInMaintenance(\n+                  deviceFilter.getDeviceInMaintenance().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceAlias(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getAlias())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasAlias(replaceAndEscapeWildcards(deviceFilter.getAlias()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnActivated(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceActivated() != null\n+        && !DeviceActivatedFilterType.BOTH.equals(deviceFilter.getDeviceActivated())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isActived(deviceFilter.getDeviceActivated().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceIdentification(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getDeviceIdentification())) {\n-            String searchString = deviceFilter.getDeviceIdentification();\n-\n-            if (!deviceFilter.isExactMatch()) {\n-                searchString = replaceAndEscapeWildcards(searchString).toUpperCase();\n-            }\n-\n-            specification = specification\n-                    .and(this.deviceSpecifications.hasDeviceIdentification(searchString, deviceFilter.isExactMatch()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnExternalManaged(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceExternalManaged() != null\n+        && !DeviceExternalManagedFilterType.BOTH.equals(deviceFilter.getDeviceExternalManaged())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isManagedExternally(\n+                  deviceFilter.getDeviceExternalManaged().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnOrganisationIdentification(final DeviceFilter deviceFilter,\n-            final Organisation organisation) throws FunctionalException, ArgumentNullOrEmptyException {\n-        Specification<Device> specification;\n-        if (!StringUtils.isEmpty(deviceFilter.getOrganisationIdentification())) {\n-            final Organisation org = this.domainHelperService\n-                    .findOrganisation(deviceFilter.getOrganisationIdentification());\n-            specification = where(this.deviceSpecifications.forOrganisation(org));\n-        } else {\n-            // dummy for 'not initialized'\n-            specification = where(this.deviceSpecifications.forOrganisation(organisation));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnAddress(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getCity())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasCity(\n+                  replaceAndEscapeWildcards(deviceFilter.getCity()).toUpperCase()));\n     }\n-\n-    // === SET EVENT NOTIFICATIONS ===\n-    @Transactional(value = \"transactionManager\")\n-    public String enqueueSetEventNotificationsRequest(@Identification final String organisationIdentification,\n-            @Identification final String deviceIdentification, final List<EventNotificationType> eventNotifications,\n-            final int messagePriority) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_EVENT_NOTIFICATIONS);\n-        this.domainHelperService.isInMaintenance(device);\n-\n-        LOGGER.debug(\"enqueueSetEventNotificationsRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final EventNotificationMessageDataContainer eventNotificationMessageDataContainer = new EventNotificationMessageDataContainer(\n-                eventNotifications);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_EVENT_NOTIFICATIONS.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(eventNotificationMessageDataContainer)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    if (!StringUtils.isEmpty(deviceFilter.getPostalCode())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasPostalCode(\n+                  replaceAndEscapeWildcards(deviceFilter.getPostalCode()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public ResponseMessage dequeueSetEventNotificationsResponse(final String correlationUid) throws OsgpException {\n-\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (!StringUtils.isEmpty(deviceFilter.getStreet())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasStreet(\n+                  replaceAndEscapeWildcards(deviceFilter.getStreet()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    // === RETRIEVE SCHEDULED TASKS LIST FOR SPECIFIC DEVICE ===\n-    public List<ScheduledTaskWithoutData> findScheduledTasks(@Identification final String organisationIdentification,\n-            @Identification final String deviceIdentification) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.FIND_SCHEDULED_TASKS);\n-\n-        return this.scheduledTaskRepository.findByDeviceIdentification(deviceIdentification);\n+    if (!StringUtils.isEmpty(deviceFilter.getNumber())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasNumber(\n+                  replaceAndEscapeWildcards(deviceFilter.getNumber()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    // === RETRIEVE SCHEDULED TASKS LIST FOR ALL DEVICES ===\n-    public List<ScheduledTaskWithoutData> findScheduledTasks(@Identification final String organisationIdentification)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_SCHEDULED_TASKS);\n-        return this.scheduledTaskRepository.findByOrganisationIdentification(organisationIdentification);\n+    if (!StringUtils.isEmpty(deviceFilter.getMunicipality())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasMunicipality(\n+                  replaceAndEscapeWildcards(deviceFilter.getMunicipality()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void updateDevice(@Identification final String organisationIdentification,\n-            final String deviceToUpdateIdentification, @Valid final Ssld updateDevice) throws FunctionalException {\n-\n-        final Device existingDevice = this.writableDeviceRepository\n-                .findByDeviceIdentification(deviceToUpdateIdentification);\n-        if (existingDevice == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, nothing to update.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceToUpdateIdentification));\n-        }\n-\n-        final List<DeviceAuthorization> owners = this.writableAuthorizationRepository\n-                .findByDeviceAndFunctionGroup(existingDevice, DeviceFunctionGroup.OWNER);\n-\n-        // Check organisation against owner of device\n-        boolean isOwner = false;\n-        for (final DeviceAuthorization owner : owners) {\n-            if (owner.getOrganisation().getOrganisationIdentification().equalsIgnoreCase(organisationIdentification)) {\n-                isOwner = true;\n-            }\n-        }\n-\n-        if (!isOwner) {\n-            LOGGER.info(\"Device has no owner yet, or organisation is not the owner.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNAUTHORIZED, ComponentType.WS_CORE,\n-                    new NotAuthorizedException(organisationIdentification));\n-        }\n-\n-        // Update the device\n-        existingDevice.updateMetaData(updateDevice.getAlias(), updateDevice.getContainerAddress(),\n-                updateDevice.getGpsCoordinates());\n-\n-        existingDevice.setActivated(updateDevice.isActivated());\n-\n-        if (updateDevice.getDeviceLifecycleStatus() != null) {\n-            existingDevice.setDeviceLifecycleStatus(updateDevice.getDeviceLifecycleStatus());\n-        }\n-\n-        if (updateDevice.getTechnicalInstallationDate() != null) {\n-            existingDevice.setTechnicalInstallationDate(updateDevice.getTechnicalInstallationDate());\n-        }\n-\n-        final Ssld ssld = this.writableSsldRepository.findById(existingDevice.getId())\n-                .orElseThrow(\n-                        () -> new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE));\n-        ssld.updateOutputSettings(updateDevice.receiveOutputSettings());\n-        ssld.setEans(updateDevice.getEans());\n-\n-        for (final Ean ean : updateDevice.getEans()) {\n-            ean.setDevice(ssld);\n-        }\n-\n-        this.writableSsldRepository.save(ssld);\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceAlias(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getAlias())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasAlias(\n+                  replaceAndEscapeWildcards(deviceFilter.getAlias()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void setDeviceAlias(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final String deviceAlias,\n-            final List<DeviceOutputSetting> newDeviceOutputSettings) throws FunctionalException {\n-\n-        final Ssld existingSsld = this.writableSsldRepository.findByDeviceIdentification(deviceIdentification);\n-\n-        if (existingSsld == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, cannot set Alias.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceIdentification));\n-        }\n-\n-        // Check to see if the organization is authorized for SET_DEVICE_ALIASES\n-        final Organisation organisation = this.organisationRepository\n-                .findByOrganisationIdentification(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, existingSsld, DeviceFunction.SET_DEVICE_ALIASES);\n-\n-        if (deviceAlias != null) {\n-            existingSsld.setAlias(deviceAlias);\n-            this.writableDeviceRepository.save(existingSsld);\n-        }\n-\n-        if (newDeviceOutputSettings != null && !newDeviceOutputSettings.isEmpty()) {\n-            this.updateRelayAliases(newDeviceOutputSettings, existingSsld);\n-        }\n-\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentification(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getDeviceIdentification())) {\n+      String searchString = deviceFilter.getDeviceIdentification();\n+\n+      if (!deviceFilter.isExactMatch()) {\n+        searchString = replaceAndEscapeWildcards(searchString).toUpperCase();\n+      }\n+\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasDeviceIdentification(\n+                  searchString, deviceFilter.isExactMatch()));\n     }\n-\n-    private void updateRelayAliases(final List<DeviceOutputSetting> newDeviceOutputSettings, final Ssld ssld)\n-            throws FunctionalException {\n-\n-        final List<org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting> currentOutputSettings = ssld\n-                .getOutputSettings();\n-\n-        if (currentOutputSettings == null || currentOutputSettings.isEmpty()) {\n-            LOGGER.info(\"Trying to set relay alias(es) for a device without output settings\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS,\n-                    ComponentType.WS_CORE);\n-        }\n-\n-        for (final DeviceOutputSetting newSetting : newDeviceOutputSettings) {\n-            boolean outputSettingFound = false;\n-            for (final org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting oldSetting : currentOutputSettings) {\n-                if (oldSetting.getExternalId() == newSetting.getExternalId()) {\n-                    oldSetting.setAlias(newSetting.getAlias());\n-                    outputSettingFound = true;\n-                }\n-            }\n-            if (!outputSettingFound) {\n-                LOGGER.info(\"Trying to set alias {} for internal relay {}, which has no output settings\",\n-                        newSetting.getAlias(), newSetting.getInternalId());\n-                throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS,\n-                        ComponentType.WS_CORE);\n-            }\n-        }\n-\n-        this.writableSsldRepository.save(ssld);\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnOrganisationIdentification(\n+      final DeviceFilter deviceFilter, final Organisation organisation)\n+      throws FunctionalException, ArgumentNullOrEmptyException {\n+    final Specification<Device> specification;\n+    if (!StringUtils.isEmpty(deviceFilter.getOrganisationIdentification())) {\n+      final Organisation org =\n+          this.domainHelperService.findOrganisation(deviceFilter.getOrganisationIdentification());\n+      specification = where(this.deviceSpecifications.forOrganisation(org));\n+    } else {\n+      // dummy for 'not initialized'\n+      specification = where(this.deviceSpecifications.forOrganisation(organisation));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void setMaintenanceStatus(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final boolean status) throws FunctionalException {\n-\n-        final Device existingDevice = this.writableDeviceRepository.findByDeviceIdentification(deviceIdentification);\n-\n-        if (existingDevice == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, cannot set maintenance status.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceIdentification));\n-        } else {\n-\n-            // Check to see if the organisation is CONFIGURATION or OWNER\n-            // authorized\n-            boolean isAuthorized = false;\n-            for (final DeviceAuthorization authorizations : existingDevice.getAuthorizations()) {\n-                if (organisationIdentification.equals(authorizations.getOrganisation().getOrganisationIdentification())\n-                        && (DeviceFunctionGroup.OWNER.equals(authorizations.getFunctionGroup())\n-                                || DeviceFunctionGroup.CONFIGURATION.equals(authorizations.getFunctionGroup()))) {\n-                    isAuthorized = true;\n-                    existingDevice.updateInMaintenance(status);\n-                    this.writableDeviceRepository.save(existingDevice);\n-                    break;\n-                }\n-            }\n-\n-            if (!isAuthorized) {\n-                // unauthorized, throwing exception.\n-                throw new FunctionalException(FunctionalExceptionType.UNAUTHORIZED, ComponentType.WS_CORE,\n-                        new NotAuthorizedException(organisationIdentification));\n-            }\n-        }\n+    return specification;\n+  }\n+\n+  // === SET EVENT NOTIFICATIONS ===\n+  @Transactional(value = \"transactionManager\")\n+  public String enqueueSetEventNotificationsRequest(\n+      @Identification final String organisationIdentification,\n+      @Identification final String deviceIdentification,\n+      final List<EventNotificationType> eventNotifications,\n+      final int messagePriority)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_EVENT_NOTIFICATIONS);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueSetEventNotificationsRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final EventNotificationMessageDataContainer eventNotificationMessageDataContainer =\n+        new EventNotificationMessageDataContainer(eventNotifications);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_EVENT_NOTIFICATIONS.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(eventNotificationMessageDataContainer)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public ResponseMessage dequeueSetEventNotificationsResponse(final String correlationUid)\n+      throws OsgpException {\n+\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  // === RETRIEVE SCHEDULED TASKS LIST FOR SPECIFIC DEVICE ===\n+  public List<ScheduledTaskWithoutData> findScheduledTasks(\n+      @Identification final String organisationIdentification,\n+      @Identification final String deviceIdentification)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(organisation, device, DeviceFunction.FIND_SCHEDULED_TASKS);\n+\n+    return this.scheduledTaskRepository.findByDeviceIdentification(deviceIdentification);\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  // === RETRIEVE SCHEDULED TASKS LIST FOR ALL DEVICES ===\n+  public List<ScheduledTaskWithoutData> findScheduledTasks(\n+      @Identification final String organisationIdentification) throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_SCHEDULED_TASKS);\n+    return this.scheduledTaskRepository.findByOrganisationIdentification(\n+        organisationIdentification);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void updateDevice(\n+      @Identification final String organisationIdentification,\n+      final String deviceToUpdateIdentification,\n+      @Valid final Ssld updateDevice)\n+      throws FunctionalException {\n+\n+    final Device existingDevice =\n+        this.writableDeviceRepository.findByDeviceIdentification(deviceToUpdateIdentification);\n+    if (existingDevice == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, nothing to update.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceToUpdateIdentification));\n     }\n \n-    public String enqueueUpdateDeviceSslCertificationRequest(final String organisationIdentification,\n-            final String deviceIdentification, final Certification certification, final int messagePriority)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.UPDATE_DEVICE_SSL_CERTIFICATION);\n-        this.domainHelperService.isInMaintenance(device);\n-\n-        LOGGER.debug(\"enqueueUpdateDeviceSslCertificationRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.UPDATE_DEVICE_SSL_CERTIFICATION.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(certification)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    final List<DeviceAuthorization> owners =\n+        this.writableAuthorizationRepository.findByDeviceAndFunctionGroup(\n+            existingDevice, DeviceFunctionGroup.OWNER);\n+\n+    // Check organisation against owner of device\n+    boolean isOwner = false;\n+    for (final DeviceAuthorization owner : owners) {\n+      if (owner\n+          .getOrganisation()\n+          .getOrganisationIdentification()\n+          .equalsIgnoreCase(organisationIdentification)) {\n+        isOwner = true;\n+      }\n     }\n \n-    public ResponseMessage dequeueUpdateDeviceSslCertificationResponse(final String correlationUid)\n-            throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (!isOwner) {\n+      LOGGER.info(\"Device has no owner yet, or organisation is not the owner.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNAUTHORIZED,\n+          ComponentType.WS_CORE,\n+          new NotAuthorizedException(organisationIdentification));\n     }\n \n-    public String enqueueSetDeviceVerificationKeyRequest(final String organisationIdentification,\n-            final String deviceIdentification, final String verificationKey, final int messagePriority)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+    // Update the device\n+    existingDevice.updateMetaData(\n+        updateDevice.getAlias(),\n+        updateDevice.getContainerAddress(),\n+        updateDevice.getGpsCoordinates());\n \n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_DEVICE_VERIFICATION_KEY);\n-        this.domainHelperService.isInMaintenance(device);\n+    existingDevice.setActivated(updateDevice.isActivated());\n \n-        LOGGER.debug(\"enqueueSetDeviceVerificationKeyRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_DEVICE_VERIFICATION_KEY.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(verificationKey)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    if (updateDevice.getDeviceLifecycleStatus() != null) {\n+      existingDevice.setDeviceLifecycleStatus(updateDevice.getDeviceLifecycleStatus());\n     }\n \n-    public ResponseMessage dequeueSetDeviceVerificationKeyResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (updateDevice.getTechnicalInstallationDate() != null) {\n+      existingDevice.setTechnicalInstallationDate(updateDevice.getTechnicalInstallationDate());\n     }\n \n-    public String enqueueSetDeviceLifecycleStatusRequest(final String organisationIdentification,\n-            final String deviceIdentification, final DeviceLifecycleStatus deviceLifecycleStatus)\n-            throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_DEVICE_LIFECYCLE_STATUS);\n-\n-        LOGGER.debug(\n-                \"enqueueSetDeviceLifecycleStatusRequest called with organisation {}, deviceLifecycleStatus {} and deviceIdentifcation {}\",\n-                organisationIdentification, deviceLifecycleStatus.name(), deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus newDeviceLifecycleStatus = org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus\n-                .valueOf(deviceLifecycleStatus.name());\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_DEVICE_LIFECYCLE_STATUS.name());\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(newDeviceLifecycleStatus)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    final Ssld ssld =\n+        this.writableSsldRepository\n+            .findById(existingDevice.getId())\n+            .orElseThrow(\n+                () ->\n+                    new FunctionalException(\n+                        FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE));\n+    ssld.updateOutputSettings(updateDevice.receiveOutputSettings());\n+    ssld.setEans(updateDevice.getEans());\n+\n+    for (final Ean ean : updateDevice.getEans()) {\n+      ean.setDevice(ssld);\n     }\n \n-    public ResponseMessage dequeueSetDeviceLifecycleStatusResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    this.writableSsldRepository.save(ssld);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void setDeviceAlias(\n+      @Identification final String organisationIdentification,\n+      final String deviceIdentification,\n+      final String deviceAlias,\n+      final List<DeviceOutputSetting> newDeviceOutputSettings)\n+      throws FunctionalException {\n+\n+    final Ssld existingSsld =\n+        this.writableSsldRepository.findByDeviceIdentification(deviceIdentification);\n+\n+    if (existingSsld == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, cannot set Alias.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceIdentification));\n     }\n \n-    public String enqueueUpdateDeviceCdmaSettingsRequest(final String organisationIdentification,\n-            final String deviceIdentification, final CdmaSettings cdmaSettings) throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.UPDATE_DEVICE_CDMA_SETTINGS);\n+    // Check to see if the organization is authorized for SET_DEVICE_ALIASES\n+    final Organisation organisation =\n+        this.organisationRepository.findByOrganisationIdentification(organisationIdentification);\n+    this.domainHelperService.isAllowed(\n+        organisation, existingSsld, DeviceFunction.SET_DEVICE_ALIASES);\n \n-        LOGGER.debug(\n-                \"enqueueUpdateDeviceCdmaSettingsRequest called with organisation {}, deviceIdentification {}, and {}\",\n-                organisationIdentification, deviceIdentification, cdmaSettings);\n+    if (deviceAlias != null) {\n+      existingSsld.setAlias(deviceAlias);\n+      this.writableDeviceRepository.save(existingSsld);\n+    }\n \n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n+    if (newDeviceOutputSettings != null && !newDeviceOutputSettings.isEmpty()) {\n+      this.updateRelayAliases(newDeviceOutputSettings, existingSsld);\n+    }\n+  }\n \n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.UPDATE_DEVICE_CDMA_SETTINGS.name());\n+  private void updateRelayAliases(\n+      final List<DeviceOutputSetting> newDeviceOutputSettings, final Ssld ssld)\n+      throws FunctionalException {\n \n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(cdmaSettings)\n-                .build();\n+    final List<org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting>\n+        currentOutputSettings = ssld.getOutputSettings();\n \n-        this.commonRequestMessageSender.send(message);\n+    if (currentOutputSettings == null || currentOutputSettings.isEmpty()) {\n+      LOGGER.info(\"Trying to set relay alias(es) for a device without output settings\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS, ComponentType.WS_CORE);\n+    }\n \n-        return correlationUid;\n+    for (final DeviceOutputSetting newSetting : newDeviceOutputSettings) {\n+      boolean outputSettingFound = false;\n+      for (final org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting oldSetting :\n+          currentOutputSettings) {\n+        if (oldSetting.getExternalId() == newSetting.getExternalId()) {\n+          oldSetting.setAlias(newSetting.getAlias());\n+          outputSettingFound = true;\n+        }\n+      }\n+      if (!outputSettingFound) {\n+        LOGGER.info(\n+            \"Trying to set alias {} for internal relay {}, which has no output settings\",\n+            newSetting.getAlias(),\n+            newSetting.getInternalId());\n+        throw new FunctionalException(\n+            FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS, ComponentType.WS_CORE);\n+      }\n     }\n \n-    public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    this.writableSsldRepository.save(ssld);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void setMaintenanceStatus(\n+      @Identification final String organisationIdentification,\n+      final String deviceIdentification,\n+      final boolean status)\n+      throws FunctionalException {\n+\n+    final Device existingDevice =\n+        this.writableDeviceRepository.findByDeviceIdentification(deviceIdentification);\n+\n+    if (existingDevice == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, cannot set maintenance status.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceIdentification));\n+    } else {\n+\n+      // Check to see if the organisation is CONFIGURATION or OWNER\n+      // authorized\n+      boolean isAuthorized = false;\n+      for (final DeviceAuthorization authorizations : existingDevice.getAuthorizations()) {\n+        if (organisationIdentification.equals(\n+                authorizations.getOrganisation().getOrganisationIdentification())\n+            && (DeviceFunctionGroup.OWNER.equals(authorizations.getFunctionGroup())\n+                || DeviceFunctionGroup.CONFIGURATION.equals(authorizations.getFunctionGroup()))) {\n+          isAuthorized = true;\n+          existingDevice.updateInMaintenance(status);\n+          this.writableDeviceRepository.save(existingDevice);\n+          break;\n+        }\n+      }\n+\n+      if (!isAuthorized) {\n+        // unauthorized, throwing exception.\n+        throw new FunctionalException(\n+            FunctionalExceptionType.UNAUTHORIZED,\n+            ComponentType.WS_CORE,\n+            new NotAuthorizedException(organisationIdentification));\n+      }\n     }\n+  }\n+\n+  public String enqueueUpdateDeviceSslCertificationRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final Certification certification,\n+      final int messagePriority)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.UPDATE_DEVICE_SSL_CERTIFICATION);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueUpdateDeviceSslCertificationRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.UPDATE_DEVICE_SSL_CERTIFICATION.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(certification)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueUpdateDeviceSslCertificationResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueSetDeviceVerificationKeyRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final String verificationKey,\n+      final int messagePriority)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_DEVICE_VERIFICATION_KEY);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueSetDeviceVerificationKeyRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_DEVICE_VERIFICATION_KEY.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(verificationKey)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueSetDeviceVerificationKeyResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueSetDeviceLifecycleStatusRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final DeviceLifecycleStatus deviceLifecycleStatus)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_DEVICE_LIFECYCLE_STATUS);\n+\n+    LOGGER.debug(\n+        \"enqueueSetDeviceLifecycleStatusRequest called with organisation {}, deviceLifecycleStatus {} and deviceIdentifcation {}\",\n+        organisationIdentification,\n+        deviceLifecycleStatus.name(),\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus\n+        newDeviceLifecycleStatus =\n+            org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus.valueOf(\n+                deviceLifecycleStatus.name());\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_DEVICE_LIFECYCLE_STATUS.name());\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(newDeviceLifecycleStatus)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueSetDeviceLifecycleStatusResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueUpdateDeviceCdmaSettingsRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final CdmaSettings cdmaSettings)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.UPDATE_DEVICE_CDMA_SETTINGS);\n+\n+    LOGGER.debug(\n+        \"enqueueUpdateDeviceCdmaSettingsRequest called with organisation {}, deviceIdentification {}, and {}\",\n+        organisationIdentification,\n+        deviceIdentification,\n+        cdmaSettings);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.UPDATE_DEVICE_CDMA_SETTINGS.name());\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(cdmaSettings)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n }\n", "next_change": {"commit": "9af4082fbd35cba98eeb0eaf4263d60f12af1bf3", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 254e3cad23..35e6e79728 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -1070,9 +1048,4 @@ public class DeviceManagementService {\n \n     return correlationUid;\n   }\n-\n-  public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid)\n-      throws OsgpException {\n-    return this.commonResponseMessageFinder.findMessage(correlationUid);\n-  }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "message": "Merge commit", "committedDate": null}, {"oid": "557f6aac0180340d79051073c6c959beb23e8ba4", "committedDate": "2020-06-24 17:25:29 +0200", "message": "Make the wildcard functionality consistent inside the operator application (#354)"}, {"oid": "38f5f2f067dee4744ef59b25caf2ea2dca097546", "committedDate": "2020-07-02 16:21:00 +0200", "message": "FLEX-5413 ~ Orders organisations by identification (#360)"}, {"oid": "c5712fb2525d44de739996fd758cf5b940269bb8", "committedDate": "2020-07-28 16:41:59 +0200", "message": "Feature/flex 5402 sorting filtering messages page (#368)"}, {"oid": "4021af7008addf1d043b8b167cb22dd8822a5fc0", "committedDate": "2020-09-02 10:49:08 +0000", "message": "Removing of devicemodel from UpdateDeviceRequest"}, {"oid": "8c0969f6d464e9be6129c3168367847c6b1423fe", "committedDate": "2020-09-08 15:10:09 +0200", "message": "FLEX-5335 ~ Removes unused import"}, {"oid": "5e579938146e585390b9bcd48ca0a7d32d9e32c0", "committedDate": "2020-10-08 09:53:46 +0200", "message": "Fixed several SonarQube issues"}, {"oid": "6f04a97e7b104ad6a7128ae92493ec538a9c52e3", "committedDate": "2020-10-08 18:04:11 +0200", "message": "FLEX-5335 ~ Use UpdatedDevice in xsd"}, {"oid": "c10966151cf88854d89c5636223d14563fef76c5", "committedDate": "2020-10-16 00:30:15 +0200", "message": "FLEX-5335 ~ Processes review comments"}, {"oid": "8ff3ffc0b3444d0ff476689803ced85c326d6aed", "committedDate": "2020-10-20 12:06:11 +0200", "message": "Feature/flex 5495 add wildcard for search username (#453)"}, {"oid": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "committedDate": "2020-10-27 13:33:10 +0100", "message": "Several changes based on the feedback provided to earlier changes."}, {"oid": "960edf5624e0e097ea28fc19afb1b2eab32e25d7", "committedDate": "2020-10-30 18:48:43 +0100", "message": "FLEX-5534 ~ Improves archiving performance (#475)"}, {"oid": "f6287f9436eb47661064a5f197d1dd04945ec83f", "committedDate": "2020-11-17 10:42:46 +0100", "message": "Merge branch 'development' into code_quality/Solving_SonarQube_Issues"}, {"oid": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "committedDate": "2021-04-16 08:37:27 +0200", "message": "Apply GXF styled Google Java Format conventions to the code base (#610)"}, {"oid": "08043d128031a66909018eb617ff3f713666b3be", "committedDate": "2021-07-12 15:33:55 +0200", "message": "FDP-111: Removed DeviceMessageMetadata and replaced all occurences with MessageMetadata"}, {"oid": "9af4082fbd35cba98eeb0eaf4263d60f12af1bf3", "committedDate": "2022-01-08 08:52:35 +0100", "message": "Add notifications to osgp-adapter-ws-core"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMjgyMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426712822", "body": " like this (also see the closed source JpaDeviceSpecifications class for similar code), in case the \"or\" remains:\r\nSpecification<Event> descriptionSpecification = this.eventSpecifications(...);\r\nSpecification<Event> descriptionStartsWithSpecification = this.eventSpecifications(...);\r\n\r\nreturn specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\r\n\r\nAnd in the eventSpecifications methods:\r\nif (description == null) {\r\n return (eventRoot, query, cb) -> cb.and();\r\n}\r\n\r\nreturn ((eventRoot, query, cb) -> cb.equal(eventRoot.<String> get(DESCRIPTION), description));\r\n\r\nWhen using the \"cb.and()\" construction, you can also remove the \"throws ArgumentNullOrEmptyException\" clause.", "bodyText": "like this (also see the closed source JpaDeviceSpecifications class for similar code), in case the \"or\" remains:\nSpecification descriptionSpecification = this.eventSpecifications(...);\nSpecification descriptionStartsWithSpecification = this.eventSpecifications(...);\nreturn specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\nAnd in the eventSpecifications methods:\nif (description == null) {\nreturn (eventRoot, query, cb) -> cb.and();\n}\nreturn ((eventRoot, query, cb) -> cb.equal(eventRoot. get(DESCRIPTION), description));\nWhen using the \"cb.and()\" construction, you can also remove the \"throws ArgumentNullOrEmptyException\" clause.", "bodyHTML": "<p dir=\"auto\">like this (also see the closed source JpaDeviceSpecifications class for similar code), in case the \"or\" remains:<br>\nSpecification descriptionSpecification = this.eventSpecifications(...);<br>\nSpecification descriptionStartsWithSpecification = this.eventSpecifications(...);</p>\n<p dir=\"auto\">return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));</p>\n<p dir=\"auto\">And in the eventSpecifications methods:<br>\nif (description == null) {<br>\nreturn (eventRoot, query, cb) -&gt; cb.and();<br>\n}</p>\n<p dir=\"auto\">return ((eventRoot, query, cb) -&gt; cb.equal(eventRoot. get(DESCRIPTION), description));</p>\n<p dir=\"auto\">When using the \"cb.and()\" construction, you can also remove the \"throws ArgumentNullOrEmptyException\" clause.</p>", "author": "rlemmers", "createdAt": "2020-05-18T15:31:29Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java", "diffHunk": "@@ -233,6 +235,25 @@ public Organisation findOrganisation(@Identification final String organisationId\n         return this.eventRepository.findAll(specification, request);\n     }\n \n+    private Specification<Event> handleDescription(final String description, final String descriptionStartsWith,\n+            Specification<Event> specification) throws ArgumentNullOrEmptyException {\n+        if (description == null) {", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MjY5Mg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r429072692", "bodyText": "tried this\nwhen filtering only on Description or only on DescriptionStartsWith i did not get the correct results.\nTherefor I had to use a different construction", "author": "robindenadel", "createdAt": "2020-05-22T06:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMjgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2ca5b6924d74416c64781aaa0bd964679231be97", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -236,22 +233,21 @@ public class DeviceManagementService {\n     }\n \n     private Specification<Event> handleDescription(final String description, final String descriptionStartsWith,\n-            Specification<Event> specification) throws ArgumentNullOrEmptyException {\n-        if (description == null) {\n-            if (descriptionStartsWith != null) {\n-                specification = specification\n-                        .and((this.eventSpecifications.startsWithDescription(descriptionStartsWith)));\n-            }\n-        } else {\n-            final Specification<Event> descriptionSpec = this.eventSpecifications.withDescription(description);\n-            if (descriptionStartsWith == null) {\n-                specification = specification.and(descriptionSpec);\n-            } else {\n-                specification = specification.and(\n-                        descriptionSpec.or(this.eventSpecifications.startsWithDescription(descriptionStartsWith)));\n-            }\n+            final Specification<Event> specification) {\n+\n+        final Specification<Event> descriptionSpecification = this.eventSpecifications.withDescription(description);\n+        final Specification<Event> descriptionStartsWithSpecification = this.eventSpecifications\n+                .startsWithDescription(descriptionStartsWith);\n+        if (description == null && descriptionStartsWith == null) {\n+            return specification;\n         }\n-        return specification;\n+        if (description == null && descriptionStartsWith != null) {\n+            return specification.and(descriptionStartsWithSpecification);\n+        }\n+        if (description != null && descriptionStartsWith == null) {\n+            return specification.and(descriptionSpecification);\n+        }\n+        return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 0b53448eb7..18948839b1 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -236,22 +233,21 @@ public class DeviceManagementService {\n     }\n \n     private Specification<Event> handleDescription(final String description, final String descriptionStartsWith,\n-            Specification<Event> specification) throws ArgumentNullOrEmptyException {\n-        if (description == null) {\n-            if (descriptionStartsWith != null) {\n-                specification = specification\n-                        .and((this.eventSpecifications.startsWithDescription(descriptionStartsWith)));\n-            }\n-        } else {\n-            final Specification<Event> descriptionSpec = this.eventSpecifications.withDescription(description);\n-            if (descriptionStartsWith == null) {\n-                specification = specification.and(descriptionSpec);\n-            } else {\n-                specification = specification.and(\n-                        descriptionSpec.or(this.eventSpecifications.startsWithDescription(descriptionStartsWith)));\n-            }\n+            final Specification<Event> specification) {\n+\n+        final Specification<Event> descriptionSpecification = this.eventSpecifications.withDescription(description);\n+        final Specification<Event> descriptionStartsWithSpecification = this.eventSpecifications\n+                .startsWithDescription(descriptionStartsWith);\n+        if (description == null && descriptionStartsWith == null) {\n+            return specification;\n         }\n-        return specification;\n+        if (description == null && descriptionStartsWith != null) {\n+            return specification.and(descriptionStartsWithSpecification);\n+        }\n+        if (description != null && descriptionStartsWith == null) {\n+            return specification.and(descriptionSpecification);\n+        }\n+        return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n     }\n \n     /**\n", "next_change": {"commit": "5e579938146e585390b9bcd48ca0a7d32d9e32c0", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 18948839b1..e3621f76b9 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -238,13 +236,14 @@ public class DeviceManagementService {\n         final Specification<Event> descriptionSpecification = this.eventSpecifications.withDescription(description);\n         final Specification<Event> descriptionStartsWithSpecification = this.eventSpecifications\n                 .startsWithDescription(descriptionStartsWith);\n+\n         if (description == null && descriptionStartsWith == null) {\n             return specification;\n         }\n-        if (description == null && descriptionStartsWith != null) {\n+        if (description == null) {\n             return specification.and(descriptionStartsWithSpecification);\n         }\n-        if (description != null && descriptionStartsWith == null) {\n+        if (descriptionStartsWith == null) {\n             return specification.and(descriptionSpecification);\n         }\n         return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n", "next_change": {"commit": "6f04a97e7b104ad6a7128ae92493ec538a9c52e3", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex e3621f76b9..f215fe1b43 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -240,10 +240,10 @@ public class DeviceManagementService {\n         if (description == null && descriptionStartsWith == null) {\n             return specification;\n         }\n-        if (description == null) {\n+        if (description == null && descriptionStartsWith != null) {\n             return specification.and(descriptionStartsWithSpecification);\n         }\n-        if (descriptionStartsWith == null) {\n+        if (description != null && descriptionStartsWith == null) {\n             return specification.and(descriptionSpecification);\n         }\n         return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n", "next_change": {"commit": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex f215fe1b43..78e9982ac8 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -240,10 +240,10 @@ public class DeviceManagementService {\n         if (description == null && descriptionStartsWith == null) {\n             return specification;\n         }\n-        if (description == null && descriptionStartsWith != null) {\n+        if (description == null) {\n             return specification.and(descriptionStartsWithSpecification);\n         }\n-        if (description != null && descriptionStartsWith == null) {\n+        if (descriptionStartsWith == null) {\n             return specification.and(descriptionSpecification);\n         }\n         return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n", "next_change": {"commit": "960edf5624e0e097ea28fc19afb1b2eab32e25d7", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 78e9982ac8..d356ff420e 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -240,10 +240,10 @@ public class DeviceManagementService {\n         if (description == null && descriptionStartsWith == null) {\n             return specification;\n         }\n-        if (description == null) {\n+        if (description == null && descriptionStartsWith != null) {\n             return specification.and(descriptionStartsWithSpecification);\n         }\n-        if (descriptionStartsWith == null) {\n+        if (description != null && descriptionStartsWith == null) {\n             return specification.and(descriptionSpecification);\n         }\n         return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n", "next_change": {"commit": "f6287f9436eb47661064a5f197d1dd04945ec83f", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex d356ff420e..36b1d051dd 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -240,10 +240,10 @@ public class DeviceManagementService {\n         if (description == null && descriptionStartsWith == null) {\n             return specification;\n         }\n-        if (description == null && descriptionStartsWith != null) {\n+        if (description == null) {\n             return specification.and(descriptionStartsWithSpecification);\n         }\n-        if (description != null && descriptionStartsWith == null) {\n+        if (descriptionStartsWith == null) {\n             return specification.and(descriptionSpecification);\n         }\n         return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n", "next_change": {"commit": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 36b1d051dd..254e3cad23 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -83,825 +82,997 @@ import org.springframework.validation.annotation.Validated;\n @Service(value = \"wsCoreDeviceManagementService\")\n @Validated\n public class DeviceManagementService {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DeviceManagementService.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DeviceManagementService.class);\n \n-    @Autowired\n-    private PagingSettings pagingSettings;\n+  @Autowired private PagingSettings pagingSettings;\n \n-    @Autowired\n-    private DomainHelperService domainHelperService;\n+  @Autowired private DomainHelperService domainHelperService;\n \n-    @Autowired\n-    private OrganisationRepository organisationRepository;\n+  @Autowired private OrganisationRepository organisationRepository;\n \n-    @Autowired\n-    private EventSpecifications eventSpecifications;\n+  @Autowired private EventSpecifications eventSpecifications;\n \n-    @Autowired\n-    private DeviceRepository deviceRepository;\n+  @Autowired private DeviceRepository deviceRepository;\n \n-    @Autowired\n-    private DeviceSpecifications deviceSpecifications;\n+  @Autowired private DeviceSpecifications deviceSpecifications;\n \n-    @Autowired\n-    private FirmwareManagementService firmwareManagementService;\n+  @Autowired private FirmwareManagementService firmwareManagementService;\n \n-    @Autowired\n-    private EventRepository eventRepository;\n+  @Autowired private EventRepository eventRepository;\n \n-    @Autowired\n-    private CorrelationIdProviderService correlationIdProviderService;\n+  @Autowired private CorrelationIdProviderService correlationIdProviderService;\n \n-    @Autowired\n-    private CommonRequestMessageSender commonRequestMessageSender;\n+  @Autowired private CommonRequestMessageSender commonRequestMessageSender;\n \n-    @Autowired\n-    private CommonResponseMessageFinder commonResponseMessageFinder;\n+  @Autowired private CommonResponseMessageFinder commonResponseMessageFinder;\n \n-    @Autowired\n-    private ScheduledTaskWithoutDataRepository scheduledTaskRepository;\n+  @Autowired private ScheduledTaskWithoutDataRepository scheduledTaskRepository;\n \n-    @Autowired\n-    private WritableDeviceAuthorizationRepository writableAuthorizationRepository;\n+  @Autowired private WritableDeviceAuthorizationRepository writableAuthorizationRepository;\n \n-    @Autowired\n-    private WritableDeviceRepository writableDeviceRepository;\n+  @Autowired private WritableDeviceRepository writableDeviceRepository;\n \n-    @Autowired\n-    private WritableSsldRepository writableSsldRepository;\n+  @Autowired private WritableSsldRepository writableSsldRepository;\n \n-    @Autowired\n-    private DeviceDomainService deviceDomainService;\n+  @Autowired private DeviceDomainService deviceDomainService;\n \n-    @Autowired\n-    @Qualifier(\"wsCoreDeviceManagementNetManagementOrganisation\")\n-    private String netManagementOrganisation;\n+  @Autowired\n+  @Qualifier(\"wsCoreDeviceManagementNetManagementOrganisation\")\n+  private String netManagementOrganisation;\n \n-    /**\n-     * Constructor\n-     */\n-    public DeviceManagementService() {\n-        // Parameterless constructor required for transactions...\n-    }\n+  /** Constructor */\n+  public DeviceManagementService() {\n+    // Parameterless constructor required for transactions...\n+  }\n \n-    @Transactional(value = \"transactionManager\")\n-    public Organisation findOrganisation(@Identification final String organisationIdentification,\n-            @Identification final String organisationIdentificationToFind) throws FunctionalException {\n+  @Transactional(value = \"transactionManager\")\n+  public Organisation findOrganisation(\n+      @Identification final String organisationIdentification,\n+      @Identification final String organisationIdentificationToFind)\n+      throws FunctionalException {\n \n-        LOGGER.debug(\"findOrganisation called with organisation {} and trying to find {}\", organisationIdentification,\n-                organisationIdentificationToFind);\n+    LOGGER.debug(\n+        \"findOrganisation called with organisation {} and trying to find {}\",\n+        organisationIdentification,\n+        organisationIdentificationToFind);\n \n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n \n-        if (this.netManagementOrganisation.equals(organisationIdentification)\n-                || organisationIdentification.equals(organisationIdentificationToFind)) {\n-            return this.organisationRepository.findByOrganisationIdentification(organisationIdentificationToFind);\n-        } else {\n-            return null;\n-        }\n+    if (this.netManagementOrganisation.equals(organisationIdentification)\n+        || organisationIdentification.equals(organisationIdentificationToFind)) {\n+      return this.organisationRepository.findByOrganisationIdentification(\n+          organisationIdentificationToFind);\n+    } else {\n+      return null;\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public List<Organisation> findAllOrganisations(@Identification final String organisationIdentification)\n-            throws FunctionalException {\n-\n-        LOGGER.debug(\"findAllOrganisations called with organisation {}\", organisationIdentification);\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n-\n-        if (this.netManagementOrganisation.equals(organisationIdentification)) {\n-            return this.organisationRepository.findByOrderByOrganisationIdentification();\n-        } else {\n-            final Organisation org = this.organisationRepository\n-                    .findByOrganisationIdentification(organisationIdentification);\n-            final List<Organisation> organisations = new ArrayList<>();\n-            organisations.add(org);\n-            return organisations;\n-        }\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public List<Organisation> findAllOrganisations(\n+      @Identification final String organisationIdentification) throws FunctionalException {\n+\n+    LOGGER.debug(\"findAllOrganisations called with organisation {}\", organisationIdentification);\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.GET_ORGANISATIONS);\n+\n+    if (this.netManagementOrganisation.equals(organisationIdentification)) {\n+      return this.organisationRepository.findByOrderByOrganisationIdentification();\n+    } else {\n+      final Organisation org =\n+          this.organisationRepository.findByOrganisationIdentification(organisationIdentification);\n+      final List<Organisation> organisations = new ArrayList<>();\n+      organisations.add(org);\n+      return organisations;\n     }\n+  }\n \n-    @Transactional(value = \"transactionManager\")\n-    public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n-\n-        final String organisationIdentification = criteria.getOrganisationIdentification();\n-        final String deviceIdentification = criteria.getDeviceIdentification();\n-        LOGGER.debug(\"findEvents called for organisation {} and device {}\", organisationIdentification,\n-                deviceIdentification);\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-\n-        this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n-\n-        final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n-                this.pagingSettings.getPageSize(), Sort.Direction.DESC, \"dateTime\");\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Event> findEvents(final SearchEventsCriteria criteria) throws FunctionalException {\n \n-        Specification<Event> specification;\n+    final String organisationIdentification = criteria.getOrganisationIdentification();\n+    final String deviceIdentification = criteria.getDeviceIdentification();\n+    LOGGER.debug(\n+        \"findEvents called for organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n \n-        if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n-            final Device device = this.domainHelperService.findDevice(deviceIdentification);\n-            this.domainHelperService.isAllowed(organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n \n-            specification = where(this.eventSpecifications.isFromDevice(deviceIdentification));\n-        } else {\n-            specification = where(this.eventSpecifications.isAuthorized(organisation));\n-        }\n+    this.pagingSettings.updatePagingSettings(criteria.getPageSpecifier());\n \n-        final DateTime from = criteria.getFrom();\n-        if (from != null) {\n-            specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n-        }\n-\n-        final DateTime until = criteria.getUntil();\n-        if (until != null) {\n-            specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n-        }\n+    final PageRequest request =\n+        PageRequest.of(\n+            this.pagingSettings.getPageNumber(),\n+            this.pagingSettings.getPageSize(),\n+            Sort.Direction.DESC,\n+            \"dateTime\");\n \n-        specification = specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n-        specification = this.handleDescription(SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n-                SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()), specification);\n+    Specification<Event> specification;\n \n-        LOGGER.debug(\"request offset     : {}\", request.getOffset());\n-        LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n-        LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n-        LOGGER.debug(\"        sort       : {}\", request.getSort());\n+    if (deviceIdentification != null && !deviceIdentification.isEmpty()) {\n+      final Device device = this.domainHelperService.findDevice(deviceIdentification);\n+      this.domainHelperService.isAllowed(\n+          organisation, device, DeviceFunction.GET_EVENT_NOTIFICATIONS);\n \n-        return this.eventRepository.findAll(specification, request);\n+      specification = where(this.eventSpecifications.isFromDevice(deviceIdentification));\n+    } else {\n+      specification = where(this.eventSpecifications.isAuthorized(organisation));\n     }\n \n-    private Specification<Event> handleDescription(final String description, final String descriptionStartsWith,\n-            final Specification<Event> specification) {\n-\n-        final Specification<Event> descriptionSpecification = this.eventSpecifications.withDescription(description);\n-        final Specification<Event> descriptionStartsWithSpecification = this.eventSpecifications\n-                .startsWithDescription(descriptionStartsWith);\n-\n-        if (description == null && descriptionStartsWith == null) {\n-            return specification;\n-        }\n-        if (description == null) {\n-            return specification.and(descriptionStartsWithSpecification);\n-        }\n-        if (descriptionStartsWith == null) {\n-            return specification.and(descriptionSpecification);\n-        }\n-        return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n-    }\n-\n-    /**\n-     * Find all devices\n-     *\n-     * @param organisationIdentification\n-     *            The organisation who performed the action\n-     * @param pageSpecifier\n-     *            The page to be returned\n-     * @param deviceFilter\n-     *            the filter object\n-     *\n-     * @return A page with devices\n-     *\n-     * @throws FunctionalException\n-     */\n-    @Transactional(value = \"transactionManager\")\n-    public Page<Device> findDevices(@Identification final String organisationIdentification,\n-            final PageSpecifier pageSpecifier, final DeviceFilter deviceFilter) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_DEVICES);\n-        this.pagingSettings.updatePagingSettings(pageSpecifier);\n-        Sort.Direction sortDir = Sort.Direction.DESC;\n-        String sortedBy = \"creationTime\";\n-        if (deviceFilter != null) {\n-            if (!StringUtils.isEmpty(deviceFilter.getSortDir()) && deviceFilter.getSortDir().contains(\"asc\")) {\n-                sortDir = Sort.Direction.ASC;\n-            }\n-            if (!StringUtils.isEmpty(deviceFilter.getSortedBy())) {\n-                sortedBy = deviceFilter.getSortedBy();\n-            }\n-        }\n-\n-        final PageRequest request = PageRequest.of(this.pagingSettings.getPageNumber(),\n-                this.pagingSettings.getPageSize(), sortDir, sortedBy);\n-\n-        final Page<Device> devices = this.findDevices(organisationIdentification, deviceFilter, organisation, request);\n-\n-        if (devices == null) {\n-            LOGGER.info(\"No devices found\");\n-            return null;\n-        }\n-\n-        for (final Device device : devices.getContent()) {\n-            for (final DeviceAuthorization deviceAutorization : device.getAuthorizations()) {\n-                device.addOrganisation(deviceAutorization.getOrganisation().getOrganisationIdentification());\n-            }\n-        }\n+    final DateTime from = criteria.getFrom();\n+    if (from != null) {\n+      specification = specification.and(this.eventSpecifications.isCreatedAfter(from.toDate()));\n+    }\n \n-        return devices;\n-    }\n-\n-    private Page<Device> findDevices(final String organisationIdentification, final DeviceFilter deviceFilter,\n-            final Organisation organisation, final PageRequest request) {\n-        final Page<Device> devices;\n-        try {\n-            if (!this.netManagementOrganisation.equals(organisationIdentification)) {\n-                // Municipality organization.\n-                if (deviceFilter == null) {\n-                    final DeviceFilter df = new DeviceFilter();\n-                    df.setOrganisationIdentification(organisationIdentification);\n-                    df.setDeviceExternalManaged(DeviceExternalManagedFilterType.BOTH);\n-                    df.setDeviceActivated(DeviceActivatedFilterType.BOTH);\n-                    df.setDeviceInMaintenance(DeviceInMaintenanceFilterType.BOTH);\n-                    df.setHasTechnicalInstallation(false);\n-                    df.setExactMatch(false);\n-                    devices = this.applyFilter(df, organisation, request);\n-                } else {\n-                    deviceFilter.setOrganisationIdentification(organisationIdentification);\n-                    devices = this.applyFilter(deviceFilter, organisation, request);\n-                }\n-            } else {\n-                // Net management organization.\n-                devices = this.applyFilter(deviceFilter, organisation, request);\n-            }\n-        } catch (final ArgumentNullOrEmptyException e) {\n-            /*\n-             * The implementation of applyFilter should check everything passed\n-             * on to DeviceSpecifications for not being empty, thus avoiding\n-             * ArgumentNullOrEmptyException. If something is missed (which\n-             * should not occur) pass it on as IllegalArgumentException to avoid\n-             * multiple checked exceptions being thrown.\n-             */\n-            throw new IllegalArgumentException(\"Null or empty input provided to DeviceSpecifications\", e);\n-        }\n-        return devices;\n-    }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public Page<Device> applyFilter(final DeviceFilter deviceFilter, final Organisation organisation,\n-            final PageRequest request) throws ArgumentNullOrEmptyException {\n-        Page<Device> devices = null;\n-\n-        try {\n-            if (deviceFilter != null) {\n-                final Specification<Device> specification = this.doApplyFilter(deviceFilter, organisation);\n-                devices = this.deviceRepository.findAll(specification, request);\n-            } else {\n-                if (organisation != null) {\n-                    final Specification<Device> specification = Specification\n-                            .where(this.deviceSpecifications.forOrganisation(organisation));\n-                    devices = this.deviceRepository.findAll(specification, request);\n-                } else {\n-                    devices = this.deviceRepository.findAll(request);\n-                }\n-            }\n-        } catch (final FunctionalException functionalException) {\n-            LOGGER.error(\"FunctionalException\", functionalException);\n-        } catch (final QueryException e) {\n-            LOGGER.error(\"QueryException\", e);\n-        }\n+    final DateTime until = criteria.getUntil();\n+    if (until != null) {\n+      specification = specification.and(this.eventSpecifications.isCreatedBefore(until.toDate()));\n+    }\n \n-        return devices;\n+    specification =\n+        specification.and(this.eventSpecifications.hasEventTypes(criteria.getEventTypes()));\n+    specification =\n+        this.handleDescription(\n+            SearchUtil.replaceAndEscapeWildcards(criteria.getDescription()),\n+            SearchUtil.replaceAndEscapeWildcards(criteria.getDescriptionStartsWith()),\n+            specification);\n+\n+    LOGGER.debug(\"request offset     : {}\", request.getOffset());\n+    LOGGER.debug(\"        pageNumber : {}\", request.getPageNumber());\n+    LOGGER.debug(\"        pageSize   : {}\", request.getPageSize());\n+    LOGGER.debug(\"        sort       : {}\", request.getSort());\n+\n+    return this.eventRepository.findAll(specification, request);\n+  }\n+\n+  private Specification<Event> handleDescription(\n+      final String description,\n+      final String descriptionStartsWith,\n+      final Specification<Event> specification) {\n+\n+    final Specification<Event> descriptionSpecification =\n+        this.eventSpecifications.withDescription(description);\n+    final Specification<Event> descriptionStartsWithSpecification =\n+        this.eventSpecifications.startsWithDescription(descriptionStartsWith);\n+\n+    if (description == null && descriptionStartsWith == null) {\n+      return specification;\n+    }\n+    if (description == null) {\n+      return specification.and(descriptionStartsWithSpecification);\n+    }\n+    if (descriptionStartsWith == null) {\n+      return specification.and(descriptionSpecification);\n+    }\n+    return specification.and(descriptionSpecification.or(descriptionStartsWithSpecification));\n+  }\n+\n+  /**\n+   * Find all devices\n+   *\n+   * @param organisationIdentification The organisation who performed the action\n+   * @param pageSpecifier The page to be returned\n+   * @param deviceFilter the filter object\n+   * @return A page with devices\n+   * @throws FunctionalException\n+   */\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Device> findDevices(\n+      @Identification final String organisationIdentification,\n+      final PageSpecifier pageSpecifier,\n+      final DeviceFilter deviceFilter)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_DEVICES);\n+    this.pagingSettings.updatePagingSettings(pageSpecifier);\n+    Sort.Direction sortDir = Sort.Direction.DESC;\n+    String sortedBy = \"creationTime\";\n+    if (deviceFilter != null) {\n+      if (!StringUtils.isEmpty(deviceFilter.getSortDir())\n+          && deviceFilter.getSortDir().contains(\"asc\")) {\n+        sortDir = Sort.Direction.ASC;\n+      }\n+      if (!StringUtils.isEmpty(deviceFilter.getSortedBy())) {\n+        sortedBy = deviceFilter.getSortedBy();\n+      }\n     }\n \n-    private Specification<Device> doApplyFilter(final DeviceFilter deviceFilter, final Organisation organisation)\n-            throws FunctionalException, ArgumentNullOrEmptyException {\n+    final PageRequest request =\n+        PageRequest.of(\n+            this.pagingSettings.getPageNumber(),\n+            this.pagingSettings.getPageSize(),\n+            sortDir,\n+            sortedBy);\n \n-        Specification<Device> specification = this.doFilterOnOrganisationIdentification(deviceFilter, organisation);\n-        specification = this.doFilterOnDeviceIdentification(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceAlias(deviceFilter, specification);\n-        specification = this.doFilterOnAddress(deviceFilter, specification);\n-        specification = this.doFilterOnExternalManaged(deviceFilter, specification);\n-        specification = this.doFilterOnActivated(deviceFilter, specification);\n-        specification = this.doFilterOnInMaintenance(deviceFilter, specification);\n-        specification = this.doFilterOnHasTechnicalInstallationDate(deviceFilter, specification);\n-        specification = this.doFilterOnOwner(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceType(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceModel(deviceFilter, specification);\n-        specification = this.doFilterOnManufacturer(deviceFilter, specification);\n-        specification = this.doFilterOnFirmwareModuleVersion(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceIdentificationsToUse(deviceFilter, specification);\n-        specification = this.doFilterOnDeviceIdentificationsToExclude(deviceFilter, specification);\n+    final Page<Device> devices =\n+        this.findDevices(organisationIdentification, deviceFilter, organisation, request);\n \n-        return specification;\n+    if (devices == null) {\n+      LOGGER.info(\"No devices found\");\n+      return null;\n     }\n \n-    private Specification<Device> doFilterOnDeviceIdentificationsToExclude(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceIdentificationsToExclude() != null\n-                && !deviceFilter.getDeviceIdentificationsToExclude().isEmpty()) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .excludeDeviceIdentificationList(deviceFilter.getDeviceIdentificationsToExclude()));\n-\n-        }\n-        return specification;\n+    for (final Device device : devices.getContent()) {\n+      for (final DeviceAuthorization deviceAutorization : device.getAuthorizations()) {\n+        device.addOrganisation(\n+            deviceAutorization.getOrganisation().getOrganisationIdentification());\n+      }\n     }\n \n-    private Specification<Device> doFilterOnDeviceIdentificationsToUse(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceIdentificationsToUse() != null\n-                && !deviceFilter.getDeviceIdentificationsToUse().isEmpty()) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .existsInDeviceIdentificationList(deviceFilter.getDeviceIdentificationsToUse()));\n-\n+    return devices;\n+  }\n+\n+  private Page<Device> findDevices(\n+      final String organisationIdentification,\n+      final DeviceFilter deviceFilter,\n+      final Organisation organisation,\n+      final PageRequest request) {\n+    final Page<Device> devices;\n+    try {\n+      if (!this.netManagementOrganisation.equals(organisationIdentification)) {\n+        // Municipality organization.\n+        if (deviceFilter == null) {\n+          final DeviceFilter df = new DeviceFilter();\n+          df.setOrganisationIdentification(organisationIdentification);\n+          df.setDeviceExternalManaged(DeviceExternalManagedFilterType.BOTH);\n+          df.setDeviceActivated(DeviceActivatedFilterType.BOTH);\n+          df.setDeviceInMaintenance(DeviceInMaintenanceFilterType.BOTH);\n+          df.setHasTechnicalInstallation(false);\n+          df.setExactMatch(false);\n+          devices = this.applyFilter(df, organisation, request);\n+        } else {\n+          deviceFilter.setOrganisationIdentification(organisationIdentification);\n+          devices = this.applyFilter(deviceFilter, organisation, request);\n         }\n-        return specification;\n+      } else {\n+        // Net management organization.\n+        devices = this.applyFilter(deviceFilter, organisation, request);\n+      }\n+    } catch (final ArgumentNullOrEmptyException e) {\n+      /*\n+       * The implementation of applyFilter should check everything passed\n+       * on to DeviceSpecifications for not being empty, thus avoiding\n+       * ArgumentNullOrEmptyException. If something is missed (which\n+       * should not occur) pass it on as IllegalArgumentException to avoid\n+       * multiple checked exceptions being thrown.\n+       */\n+      throw new IllegalArgumentException(\"Null or empty input provided to DeviceSpecifications\", e);\n     }\n-\n-    private Specification<Device> doFilterOnFirmwareModuleVersion(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getFirmwareModuleVersion())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.forFirmwareModuleVersion(deviceFilter.getFirmwareModuleType(),\n-                            replaceAndEscapeWildcards(deviceFilter.getFirmwareModuleVersion()).toUpperCase()));\n+    return devices;\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public Page<Device> applyFilter(\n+      final DeviceFilter deviceFilter, final Organisation organisation, final PageRequest request)\n+      throws ArgumentNullOrEmptyException {\n+    Page<Device> devices = null;\n+\n+    try {\n+      if (deviceFilter != null) {\n+        final Specification<Device> specification = this.doApplyFilter(deviceFilter, organisation);\n+        devices = this.deviceRepository.findAll(specification, request);\n+      } else {\n+        if (organisation != null) {\n+          final Specification<Device> specification =\n+              Specification.where(this.deviceSpecifications.forOrganisation(organisation));\n+          devices = this.deviceRepository.findAll(specification, request);\n+        } else {\n+          devices = this.deviceRepository.findAll(request);\n         }\n-        return specification;\n+      }\n+    } catch (final FunctionalException functionalException) {\n+      LOGGER.error(\"FunctionalException\", functionalException);\n+    } catch (final QueryException e) {\n+      LOGGER.error(\"QueryException\", e);\n     }\n \n-    private Specification<Device> doFilterOnManufacturer(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getManufacturer())) {\n-            final Manufacturer manufacturer = this.firmwareManagementService\n-                    .findManufacturer(deviceFilter.getManufacturer());\n-            specification = specification.and(this.deviceSpecifications.forManufacturer(manufacturer));\n-        }\n-        return specification;\n+    return devices;\n+  }\n+\n+  private Specification<Device> doApplyFilter(\n+      final DeviceFilter deviceFilter, final Organisation organisation)\n+      throws FunctionalException, ArgumentNullOrEmptyException {\n+\n+    Specification<Device> specification =\n+        this.doFilterOnOrganisationIdentification(deviceFilter, organisation);\n+    specification = this.doFilterOnDeviceIdentification(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceAlias(deviceFilter, specification);\n+    specification = this.doFilterOnAddress(deviceFilter, specification);\n+    specification = this.doFilterOnExternalManaged(deviceFilter, specification);\n+    specification = this.doFilterOnActivated(deviceFilter, specification);\n+    specification = this.doFilterOnInMaintenance(deviceFilter, specification);\n+    specification = this.doFilterOnHasTechnicalInstallationDate(deviceFilter, specification);\n+    specification = this.doFilterOnOwner(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceType(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceModel(deviceFilter, specification);\n+    specification = this.doFilterOnManufacturer(deviceFilter, specification);\n+    specification = this.doFilterOnFirmwareModuleVersion(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceIdentificationsToUse(deviceFilter, specification);\n+    specification = this.doFilterOnDeviceIdentificationsToExclude(deviceFilter, specification);\n+\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentificationsToExclude(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceIdentificationsToExclude() != null\n+        && !deviceFilter.getDeviceIdentificationsToExclude().isEmpty()) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.excludeDeviceIdentificationList(\n+                  deviceFilter.getDeviceIdentificationsToExclude()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceModel(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getModel())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forDeviceModel(replaceAndEscapeWildcards(deviceFilter.getModel()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentificationsToUse(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceIdentificationsToUse() != null\n+        && !deviceFilter.getDeviceIdentificationsToUse().isEmpty()) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.existsInDeviceIdentificationList(\n+                  deviceFilter.getDeviceIdentificationsToUse()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceType(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getDeviceType())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forDeviceType(replaceAndEscapeWildcards(deviceFilter.getDeviceType()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnFirmwareModuleVersion(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getFirmwareModuleVersion())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forFirmwareModuleVersion(\n+                  deviceFilter.getFirmwareModuleType(),\n+                  replaceAndEscapeWildcards(deviceFilter.getFirmwareModuleVersion())\n+                      .toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnOwner(final DeviceFilter deviceFilter, Specification<Device> specification)\n-            throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getOwner())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .forOwner(replaceAndEscapeWildcards(deviceFilter.getOwner()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnManufacturer(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getManufacturer())) {\n+      final Manufacturer manufacturer =\n+          this.firmwareManagementService.findManufacturer(deviceFilter.getManufacturer());\n+      specification = specification.and(this.deviceSpecifications.forManufacturer(manufacturer));\n     }\n-\n-    private Specification<Device> doFilterOnHasTechnicalInstallationDate(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.isHasTechnicalInstallation()) {\n-            specification = specification.and(this.deviceSpecifications.hasTechnicalInstallationDate());\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceModel(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getModel())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forDeviceModel(\n+                  replaceAndEscapeWildcards(deviceFilter.getModel()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnInMaintenance(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceInMaintenance() != null\n-                && !DeviceInMaintenanceFilterType.BOTH.equals(deviceFilter.getDeviceInMaintenance())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.isInMaintenance(deviceFilter.getDeviceInMaintenance().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceType(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getDeviceType())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forDeviceType(\n+                  replaceAndEscapeWildcards(deviceFilter.getDeviceType()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnActivated(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceActivated() != null\n-                && !DeviceActivatedFilterType.BOTH.equals(deviceFilter.getDeviceActivated())) {\n-            specification = specification\n-                    .and(this.deviceSpecifications.isActived(deviceFilter.getDeviceActivated().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnOwner(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getOwner())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.forOwner(\n+                  replaceAndEscapeWildcards(deviceFilter.getOwner()).toUpperCase()));\n     }\n-\n-    private Specification<Device> doFilterOnExternalManaged(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (deviceFilter.getDeviceExternalManaged() != null\n-                && !DeviceExternalManagedFilterType.BOTH.equals(deviceFilter.getDeviceExternalManaged())) {\n-            specification = specification.and(\n-                    this.deviceSpecifications.isManagedExternally(deviceFilter.getDeviceExternalManaged().getValue()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnHasTechnicalInstallationDate(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.isHasTechnicalInstallation()) {\n+      specification = specification.and(this.deviceSpecifications.hasTechnicalInstallationDate());\n     }\n-\n-    private Specification<Device> doFilterOnAddress(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getCity())) {\n-            specification = specification.and(\n-                    this.deviceSpecifications.hasCity(replaceAndEscapeWildcards(deviceFilter.getCity()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getPostalCode())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasPostalCode(replaceAndEscapeWildcards(deviceFilter.getPostalCode()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getStreet())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasStreet(replaceAndEscapeWildcards(deviceFilter.getStreet()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getNumber())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasNumber(replaceAndEscapeWildcards(deviceFilter.getNumber()).toUpperCase()));\n-        }\n-        if (!StringUtils.isEmpty(deviceFilter.getMunicipality())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasMunicipality(replaceAndEscapeWildcards(deviceFilter.getMunicipality()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnInMaintenance(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceInMaintenance() != null\n+        && !DeviceInMaintenanceFilterType.BOTH.equals(deviceFilter.getDeviceInMaintenance())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isInMaintenance(\n+                  deviceFilter.getDeviceInMaintenance().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceAlias(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getAlias())) {\n-            specification = specification.and(this.deviceSpecifications\n-                    .hasAlias(replaceAndEscapeWildcards(deviceFilter.getAlias()).toUpperCase()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnActivated(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceActivated() != null\n+        && !DeviceActivatedFilterType.BOTH.equals(deviceFilter.getDeviceActivated())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isActived(deviceFilter.getDeviceActivated().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnDeviceIdentification(final DeviceFilter deviceFilter,\n-            Specification<Device> specification) throws ArgumentNullOrEmptyException {\n-        if (!StringUtils.isEmpty(deviceFilter.getDeviceIdentification())) {\n-            String searchString = deviceFilter.getDeviceIdentification();\n-\n-            if (!deviceFilter.isExactMatch()) {\n-                searchString = replaceAndEscapeWildcards(searchString).toUpperCase();\n-            }\n-\n-            specification = specification\n-                    .and(this.deviceSpecifications.hasDeviceIdentification(searchString, deviceFilter.isExactMatch()));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnExternalManaged(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (deviceFilter.getDeviceExternalManaged() != null\n+        && !DeviceExternalManagedFilterType.BOTH.equals(deviceFilter.getDeviceExternalManaged())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.isManagedExternally(\n+                  deviceFilter.getDeviceExternalManaged().getValue()));\n     }\n-\n-    private Specification<Device> doFilterOnOrganisationIdentification(final DeviceFilter deviceFilter,\n-            final Organisation organisation) throws FunctionalException, ArgumentNullOrEmptyException {\n-        final Specification<Device> specification;\n-        if (!StringUtils.isEmpty(deviceFilter.getOrganisationIdentification())) {\n-            final Organisation org = this.domainHelperService\n-                    .findOrganisation(deviceFilter.getOrganisationIdentification());\n-            specification = where(this.deviceSpecifications.forOrganisation(org));\n-        } else {\n-            // dummy for 'not initialized'\n-            specification = where(this.deviceSpecifications.forOrganisation(organisation));\n-        }\n-        return specification;\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnAddress(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getCity())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasCity(\n+                  replaceAndEscapeWildcards(deviceFilter.getCity()).toUpperCase()));\n     }\n-\n-    // === SET EVENT NOTIFICATIONS ===\n-    @Transactional(value = \"transactionManager\")\n-    public String enqueueSetEventNotificationsRequest(@Identification final String organisationIdentification,\n-            @Identification final String deviceIdentification, final List<EventNotificationType> eventNotifications,\n-            final int messagePriority) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_EVENT_NOTIFICATIONS);\n-        this.domainHelperService.isInMaintenance(device);\n-\n-        LOGGER.debug(\"enqueueSetEventNotificationsRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final EventNotificationMessageDataContainer eventNotificationMessageDataContainer = new EventNotificationMessageDataContainer(\n-                eventNotifications);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_EVENT_NOTIFICATIONS.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(eventNotificationMessageDataContainer)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    if (!StringUtils.isEmpty(deviceFilter.getPostalCode())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasPostalCode(\n+                  replaceAndEscapeWildcards(deviceFilter.getPostalCode()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    public ResponseMessage dequeueSetEventNotificationsResponse(final String correlationUid) throws OsgpException {\n-\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (!StringUtils.isEmpty(deviceFilter.getStreet())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasStreet(\n+                  replaceAndEscapeWildcards(deviceFilter.getStreet()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    // === RETRIEVE SCHEDULED TASKS LIST FOR SPECIFIC DEVICE ===\n-    public List<ScheduledTaskWithoutData> findScheduledTasks(@Identification final String organisationIdentification,\n-            @Identification final String deviceIdentification) throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.FIND_SCHEDULED_TASKS);\n-\n-        return this.scheduledTaskRepository.findByDeviceIdentification(deviceIdentification);\n+    if (!StringUtils.isEmpty(deviceFilter.getNumber())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasNumber(\n+                  replaceAndEscapeWildcards(deviceFilter.getNumber()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"transactionManager\")\n-    // === RETRIEVE SCHEDULED TASKS LIST FOR ALL DEVICES ===\n-    public List<ScheduledTaskWithoutData> findScheduledTasks(@Identification final String organisationIdentification)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_SCHEDULED_TASKS);\n-        return this.scheduledTaskRepository.findByOrganisationIdentification(organisationIdentification);\n+    if (!StringUtils.isEmpty(deviceFilter.getMunicipality())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasMunicipality(\n+                  replaceAndEscapeWildcards(deviceFilter.getMunicipality()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void updateDevice(@Identification final String organisationIdentification,\n-            final String deviceToUpdateIdentification, @Valid final Ssld updateDevice) throws FunctionalException {\n-\n-        final Device existingDevice = this.writableDeviceRepository\n-                .findByDeviceIdentification(deviceToUpdateIdentification);\n-        if (existingDevice == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, nothing to update.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceToUpdateIdentification));\n-        }\n-\n-        final List<DeviceAuthorization> owners = this.writableAuthorizationRepository\n-                .findByDeviceAndFunctionGroup(existingDevice, DeviceFunctionGroup.OWNER);\n-\n-        // Check organisation against owner of device\n-        boolean isOwner = false;\n-        for (final DeviceAuthorization owner : owners) {\n-            if (owner.getOrganisation().getOrganisationIdentification().equalsIgnoreCase(organisationIdentification)) {\n-                isOwner = true;\n-            }\n-        }\n-\n-        if (!isOwner) {\n-            LOGGER.info(\"Device has no owner yet, or organisation is not the owner.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNAUTHORIZED, ComponentType.WS_CORE,\n-                    new NotAuthorizedException(organisationIdentification));\n-        }\n-\n-        // Update the device\n-        existingDevice.updateMetaData(updateDevice.getAlias(), updateDevice.getContainerAddress(),\n-                updateDevice.getGpsCoordinates());\n-\n-        existingDevice.setActivated(updateDevice.isActivated());\n-\n-        if (updateDevice.getDeviceLifecycleStatus() != null) {\n-            existingDevice.setDeviceLifecycleStatus(updateDevice.getDeviceLifecycleStatus());\n-        }\n-\n-        if (updateDevice.getTechnicalInstallationDate() != null) {\n-            existingDevice.setTechnicalInstallationDate(updateDevice.getTechnicalInstallationDate());\n-        }\n-\n-        final Ssld ssld = this.writableSsldRepository.findById(existingDevice.getId())\n-                .orElseThrow(\n-                        () -> new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE));\n-        ssld.updateOutputSettings(updateDevice.receiveOutputSettings());\n-        ssld.setEans(updateDevice.getEans());\n-\n-        for (final Ean ean : updateDevice.getEans()) {\n-            ean.setDevice(ssld);\n-        }\n-\n-        this.writableSsldRepository.save(ssld);\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceAlias(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getAlias())) {\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasAlias(\n+                  replaceAndEscapeWildcards(deviceFilter.getAlias()).toUpperCase()));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void setDeviceAlias(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final String deviceAlias,\n-            final List<DeviceOutputSetting> newDeviceOutputSettings) throws FunctionalException {\n-\n-        final Ssld existingSsld = this.writableSsldRepository.findByDeviceIdentification(deviceIdentification);\n-\n-        if (existingSsld == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, cannot set Alias.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceIdentification));\n-        }\n-\n-        // Check to see if the organization is authorized for SET_DEVICE_ALIASES\n-        final Organisation organisation = this.organisationRepository\n-                .findByOrganisationIdentification(organisationIdentification);\n-        this.domainHelperService.isAllowed(organisation, existingSsld, DeviceFunction.SET_DEVICE_ALIASES);\n-\n-        if (deviceAlias != null) {\n-            existingSsld.setAlias(deviceAlias);\n-            this.writableDeviceRepository.save(existingSsld);\n-        }\n-\n-        if (newDeviceOutputSettings != null && !newDeviceOutputSettings.isEmpty()) {\n-            this.updateRelayAliases(newDeviceOutputSettings, existingSsld);\n-        }\n-\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnDeviceIdentification(\n+      final DeviceFilter deviceFilter, Specification<Device> specification)\n+      throws ArgumentNullOrEmptyException {\n+    if (!StringUtils.isEmpty(deviceFilter.getDeviceIdentification())) {\n+      String searchString = deviceFilter.getDeviceIdentification();\n+\n+      if (!deviceFilter.isExactMatch()) {\n+        searchString = replaceAndEscapeWildcards(searchString).toUpperCase();\n+      }\n+\n+      specification =\n+          specification.and(\n+              this.deviceSpecifications.hasDeviceIdentification(\n+                  searchString, deviceFilter.isExactMatch()));\n     }\n-\n-    private void updateRelayAliases(final List<DeviceOutputSetting> newDeviceOutputSettings, final Ssld ssld)\n-            throws FunctionalException {\n-\n-        final List<org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting> currentOutputSettings = ssld\n-                .getOutputSettings();\n-\n-        if (currentOutputSettings == null || currentOutputSettings.isEmpty()) {\n-            LOGGER.info(\"Trying to set relay alias(es) for a device without output settings\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS,\n-                    ComponentType.WS_CORE);\n-        }\n-\n-        for (final DeviceOutputSetting newSetting : newDeviceOutputSettings) {\n-            boolean outputSettingFound = false;\n-            for (final org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting oldSetting : currentOutputSettings) {\n-                if (oldSetting.getExternalId() == newSetting.getExternalId()) {\n-                    oldSetting.setAlias(newSetting.getAlias());\n-                    outputSettingFound = true;\n-                }\n-            }\n-            if (!outputSettingFound) {\n-                LOGGER.info(\"Trying to set alias {} for internal relay {}, which has no output settings\",\n-                        newSetting.getAlias(), newSetting.getInternalId());\n-                throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS,\n-                        ComponentType.WS_CORE);\n-            }\n-        }\n-\n-        this.writableSsldRepository.save(ssld);\n+    return specification;\n+  }\n+\n+  private Specification<Device> doFilterOnOrganisationIdentification(\n+      final DeviceFilter deviceFilter, final Organisation organisation)\n+      throws FunctionalException, ArgumentNullOrEmptyException {\n+    final Specification<Device> specification;\n+    if (!StringUtils.isEmpty(deviceFilter.getOrganisationIdentification())) {\n+      final Organisation org =\n+          this.domainHelperService.findOrganisation(deviceFilter.getOrganisationIdentification());\n+      specification = where(this.deviceSpecifications.forOrganisation(org));\n+    } else {\n+      // dummy for 'not initialized'\n+      specification = where(this.deviceSpecifications.forOrganisation(organisation));\n     }\n-\n-    @Transactional(value = \"writableTransactionManager\")\n-    public void setMaintenanceStatus(@Identification final String organisationIdentification,\n-            final String deviceIdentification, final boolean status) throws FunctionalException {\n-\n-        final Device existingDevice = this.writableDeviceRepository.findByDeviceIdentification(deviceIdentification);\n-\n-        if (existingDevice == null) {\n-            // device does not exist\n-            LOGGER.info(\"Device does not exist, cannot set maintenance status.\");\n-            throw new FunctionalException(FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE,\n-                    new UnknownEntityException(Device.class, deviceIdentification));\n-        } else {\n-\n-            // Check to see if the organisation is CONFIGURATION or OWNER\n-            // authorized\n-            boolean isAuthorized = false;\n-            for (final DeviceAuthorization authorizations : existingDevice.getAuthorizations()) {\n-                if (organisationIdentification.equals(authorizations.getOrganisation().getOrganisationIdentification())\n-                        && (DeviceFunctionGroup.OWNER.equals(authorizations.getFunctionGroup())\n-                                || DeviceFunctionGroup.CONFIGURATION.equals(authorizations.getFunctionGroup()))) {\n-                    isAuthorized = true;\n-                    existingDevice.updateInMaintenance(status);\n-                    this.writableDeviceRepository.save(existingDevice);\n-                    break;\n-                }\n-            }\n-\n-            if (!isAuthorized) {\n-                // unauthorized, throwing exception.\n-                throw new FunctionalException(FunctionalExceptionType.UNAUTHORIZED, ComponentType.WS_CORE,\n-                        new NotAuthorizedException(organisationIdentification));\n-            }\n-        }\n+    return specification;\n+  }\n+\n+  // === SET EVENT NOTIFICATIONS ===\n+  @Transactional(value = \"transactionManager\")\n+  public String enqueueSetEventNotificationsRequest(\n+      @Identification final String organisationIdentification,\n+      @Identification final String deviceIdentification,\n+      final List<EventNotificationType> eventNotifications,\n+      final int messagePriority)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_EVENT_NOTIFICATIONS);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueSetEventNotificationsRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final EventNotificationMessageDataContainer eventNotificationMessageDataContainer =\n+        new EventNotificationMessageDataContainer(eventNotifications);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_EVENT_NOTIFICATIONS.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(eventNotificationMessageDataContainer)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  public ResponseMessage dequeueSetEventNotificationsResponse(final String correlationUid)\n+      throws OsgpException {\n+\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  // === RETRIEVE SCHEDULED TASKS LIST FOR SPECIFIC DEVICE ===\n+  public List<ScheduledTaskWithoutData> findScheduledTasks(\n+      @Identification final String organisationIdentification,\n+      @Identification final String deviceIdentification)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(organisation, device, DeviceFunction.FIND_SCHEDULED_TASKS);\n+\n+    return this.scheduledTaskRepository.findByDeviceIdentification(deviceIdentification);\n+  }\n+\n+  @Transactional(value = \"transactionManager\")\n+  // === RETRIEVE SCHEDULED TASKS LIST FOR ALL DEVICES ===\n+  public List<ScheduledTaskWithoutData> findScheduledTasks(\n+      @Identification final String organisationIdentification) throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    this.domainHelperService.isAllowed(organisation, PlatformFunction.FIND_SCHEDULED_TASKS);\n+    return this.scheduledTaskRepository.findByOrganisationIdentification(\n+        organisationIdentification);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void updateDevice(\n+      @Identification final String organisationIdentification,\n+      final String deviceToUpdateIdentification,\n+      @Valid final Ssld updateDevice)\n+      throws FunctionalException {\n+\n+    final Device existingDevice =\n+        this.writableDeviceRepository.findByDeviceIdentification(deviceToUpdateIdentification);\n+    if (existingDevice == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, nothing to update.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceToUpdateIdentification));\n     }\n \n-    public String enqueueUpdateDeviceSslCertificationRequest(final String organisationIdentification,\n-            final String deviceIdentification, final Certification certification, final int messagePriority)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.UPDATE_DEVICE_SSL_CERTIFICATION);\n-        this.domainHelperService.isInMaintenance(device);\n-\n-        LOGGER.debug(\"enqueueUpdateDeviceSslCertificationRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.UPDATE_DEVICE_SSL_CERTIFICATION.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(certification)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    final List<DeviceAuthorization> owners =\n+        this.writableAuthorizationRepository.findByDeviceAndFunctionGroup(\n+            existingDevice, DeviceFunctionGroup.OWNER);\n+\n+    // Check organisation against owner of device\n+    boolean isOwner = false;\n+    for (final DeviceAuthorization owner : owners) {\n+      if (owner\n+          .getOrganisation()\n+          .getOrganisationIdentification()\n+          .equalsIgnoreCase(organisationIdentification)) {\n+        isOwner = true;\n+      }\n     }\n \n-    public ResponseMessage dequeueUpdateDeviceSslCertificationResponse(final String correlationUid)\n-            throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (!isOwner) {\n+      LOGGER.info(\"Device has no owner yet, or organisation is not the owner.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNAUTHORIZED,\n+          ComponentType.WS_CORE,\n+          new NotAuthorizedException(organisationIdentification));\n     }\n \n-    public String enqueueSetDeviceVerificationKeyRequest(final String organisationIdentification,\n-            final String deviceIdentification, final String verificationKey, final int messagePriority)\n-            throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+    // Update the device\n+    existingDevice.updateMetaData(\n+        updateDevice.getAlias(),\n+        updateDevice.getContainerAddress(),\n+        updateDevice.getGpsCoordinates());\n \n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_DEVICE_VERIFICATION_KEY);\n-        this.domainHelperService.isInMaintenance(device);\n+    existingDevice.setActivated(updateDevice.isActivated());\n \n-        LOGGER.debug(\"enqueueSetDeviceVerificationKeyRequest called with organisation {} and device {}\",\n-                organisationIdentification, deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_DEVICE_VERIFICATION_KEY.name(),\n-                messagePriority);\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(verificationKey)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    if (updateDevice.getDeviceLifecycleStatus() != null) {\n+      existingDevice.setDeviceLifecycleStatus(updateDevice.getDeviceLifecycleStatus());\n     }\n \n-    public ResponseMessage dequeueSetDeviceVerificationKeyResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    if (updateDevice.getTechnicalInstallationDate() != null) {\n+      existingDevice.setTechnicalInstallationDate(updateDevice.getTechnicalInstallationDate());\n     }\n \n-    public String enqueueSetDeviceLifecycleStatusRequest(final String organisationIdentification,\n-            final String deviceIdentification, final DeviceLifecycleStatus deviceLifecycleStatus)\n-            throws FunctionalException {\n-\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.SET_DEVICE_LIFECYCLE_STATUS);\n-\n-        LOGGER.debug(\n-                \"enqueueSetDeviceLifecycleStatusRequest called with organisation {}, deviceLifecycleStatus {} and deviceIdentifcation {}\",\n-                organisationIdentification, deviceLifecycleStatus.name(), deviceIdentification);\n-\n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n-\n-        final org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus newDeviceLifecycleStatus = org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus\n-                .valueOf(deviceLifecycleStatus.name());\n-\n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.SET_DEVICE_LIFECYCLE_STATUS.name());\n-\n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(newDeviceLifecycleStatus)\n-                .build();\n-\n-        this.commonRequestMessageSender.send(message);\n-\n-        return correlationUid;\n+    final Ssld ssld =\n+        this.writableSsldRepository\n+            .findById(existingDevice.getId())\n+            .orElseThrow(\n+                () ->\n+                    new FunctionalException(\n+                        FunctionalExceptionType.UNKNOWN_DEVICE, ComponentType.WS_CORE));\n+    ssld.updateOutputSettings(updateDevice.receiveOutputSettings());\n+    ssld.setEans(updateDevice.getEans());\n+\n+    for (final Ean ean : updateDevice.getEans()) {\n+      ean.setDevice(ssld);\n     }\n \n-    public ResponseMessage dequeueSetDeviceLifecycleStatusResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    this.writableSsldRepository.save(ssld);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void setDeviceAlias(\n+      @Identification final String organisationIdentification,\n+      final String deviceIdentification,\n+      final String deviceAlias,\n+      final List<DeviceOutputSetting> newDeviceOutputSettings)\n+      throws FunctionalException {\n+\n+    final Ssld existingSsld =\n+        this.writableSsldRepository.findByDeviceIdentification(deviceIdentification);\n+\n+    if (existingSsld == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, cannot set Alias.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceIdentification));\n     }\n \n-    public String enqueueUpdateDeviceCdmaSettingsRequest(final String organisationIdentification,\n-            final String deviceIdentification, final CdmaSettings cdmaSettings) throws FunctionalException {\n-        final Organisation organisation = this.domainHelperService.findOrganisation(organisationIdentification);\n-        final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n-\n-        this.domainHelperService.isAllowed(organisation, device, DeviceFunction.UPDATE_DEVICE_CDMA_SETTINGS);\n+    // Check to see if the organization is authorized for SET_DEVICE_ALIASES\n+    final Organisation organisation =\n+        this.organisationRepository.findByOrganisationIdentification(organisationIdentification);\n+    this.domainHelperService.isAllowed(\n+        organisation, existingSsld, DeviceFunction.SET_DEVICE_ALIASES);\n \n-        LOGGER.debug(\n-                \"enqueueUpdateDeviceCdmaSettingsRequest called with organisation {}, deviceIdentification {}, and {}\",\n-                organisationIdentification, deviceIdentification, cdmaSettings);\n+    if (deviceAlias != null) {\n+      existingSsld.setAlias(deviceAlias);\n+      this.writableDeviceRepository.save(existingSsld);\n+    }\n \n-        final String correlationUid = this.correlationIdProviderService.getCorrelationId(organisationIdentification,\n-                deviceIdentification);\n+    if (newDeviceOutputSettings != null && !newDeviceOutputSettings.isEmpty()) {\n+      this.updateRelayAliases(newDeviceOutputSettings, existingSsld);\n+    }\n+  }\n \n-        final DeviceMessageMetadata deviceMessageMetadata = new DeviceMessageMetadata(deviceIdentification,\n-                organisationIdentification, correlationUid, MessageType.UPDATE_DEVICE_CDMA_SETTINGS.name());\n+  private void updateRelayAliases(\n+      final List<DeviceOutputSetting> newDeviceOutputSettings, final Ssld ssld)\n+      throws FunctionalException {\n \n-        final CommonRequestMessage message = new CommonRequestMessage.Builder()\n-                .deviceMessageMetadata(deviceMessageMetadata)\n-                .request(cdmaSettings)\n-                .build();\n+    final List<org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting>\n+        currentOutputSettings = ssld.getOutputSettings();\n \n-        this.commonRequestMessageSender.send(message);\n+    if (currentOutputSettings == null || currentOutputSettings.isEmpty()) {\n+      LOGGER.info(\"Trying to set relay alias(es) for a device without output settings\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS, ComponentType.WS_CORE);\n+    }\n \n-        return correlationUid;\n+    for (final DeviceOutputSetting newSetting : newDeviceOutputSettings) {\n+      boolean outputSettingFound = false;\n+      for (final org.opensmartgridplatform.domain.core.entities.DeviceOutputSetting oldSetting :\n+          currentOutputSettings) {\n+        if (oldSetting.getExternalId() == newSetting.getExternalId()) {\n+          oldSetting.setAlias(newSetting.getAlias());\n+          outputSettingFound = true;\n+        }\n+      }\n+      if (!outputSettingFound) {\n+        LOGGER.info(\n+            \"Trying to set alias {} for internal relay {}, which has no output settings\",\n+            newSetting.getAlias(),\n+            newSetting.getInternalId());\n+        throw new FunctionalException(\n+            FunctionalExceptionType.UNKNOWN_DEVICE_OUTPUT_SETTINGS, ComponentType.WS_CORE);\n+      }\n     }\n \n-    public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid) throws OsgpException {\n-        return this.commonResponseMessageFinder.findMessage(correlationUid);\n+    this.writableSsldRepository.save(ssld);\n+  }\n+\n+  @Transactional(value = \"writableTransactionManager\")\n+  public void setMaintenanceStatus(\n+      @Identification final String organisationIdentification,\n+      final String deviceIdentification,\n+      final boolean status)\n+      throws FunctionalException {\n+\n+    final Device existingDevice =\n+        this.writableDeviceRepository.findByDeviceIdentification(deviceIdentification);\n+\n+    if (existingDevice == null) {\n+      // device does not exist\n+      LOGGER.info(\"Device does not exist, cannot set maintenance status.\");\n+      throw new FunctionalException(\n+          FunctionalExceptionType.UNKNOWN_DEVICE,\n+          ComponentType.WS_CORE,\n+          new UnknownEntityException(Device.class, deviceIdentification));\n+    } else {\n+\n+      // Check to see if the organisation is CONFIGURATION or OWNER\n+      // authorized\n+      boolean isAuthorized = false;\n+      for (final DeviceAuthorization authorizations : existingDevice.getAuthorizations()) {\n+        if (organisationIdentification.equals(\n+                authorizations.getOrganisation().getOrganisationIdentification())\n+            && (DeviceFunctionGroup.OWNER.equals(authorizations.getFunctionGroup())\n+                || DeviceFunctionGroup.CONFIGURATION.equals(authorizations.getFunctionGroup()))) {\n+          isAuthorized = true;\n+          existingDevice.updateInMaintenance(status);\n+          this.writableDeviceRepository.save(existingDevice);\n+          break;\n+        }\n+      }\n+\n+      if (!isAuthorized) {\n+        // unauthorized, throwing exception.\n+        throw new FunctionalException(\n+            FunctionalExceptionType.UNAUTHORIZED,\n+            ComponentType.WS_CORE,\n+            new NotAuthorizedException(organisationIdentification));\n+      }\n     }\n+  }\n+\n+  public String enqueueUpdateDeviceSslCertificationRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final Certification certification,\n+      final int messagePriority)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.UPDATE_DEVICE_SSL_CERTIFICATION);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueUpdateDeviceSslCertificationRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.UPDATE_DEVICE_SSL_CERTIFICATION.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(certification)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueUpdateDeviceSslCertificationResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueSetDeviceVerificationKeyRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final String verificationKey,\n+      final int messagePriority)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.domainHelperService.findActiveDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_DEVICE_VERIFICATION_KEY);\n+    this.domainHelperService.isInMaintenance(device);\n+\n+    LOGGER.debug(\n+        \"enqueueSetDeviceVerificationKeyRequest called with organisation {} and device {}\",\n+        organisationIdentification,\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_DEVICE_VERIFICATION_KEY.name(),\n+            messagePriority);\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(verificationKey)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueSetDeviceVerificationKeyResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueSetDeviceLifecycleStatusRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final DeviceLifecycleStatus deviceLifecycleStatus)\n+      throws FunctionalException {\n+\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.SET_DEVICE_LIFECYCLE_STATUS);\n+\n+    LOGGER.debug(\n+        \"enqueueSetDeviceLifecycleStatusRequest called with organisation {}, deviceLifecycleStatus {} and deviceIdentifcation {}\",\n+        organisationIdentification,\n+        deviceLifecycleStatus.name(),\n+        deviceIdentification);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus\n+        newDeviceLifecycleStatus =\n+            org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus.valueOf(\n+                deviceLifecycleStatus.name());\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.SET_DEVICE_LIFECYCLE_STATUS.name());\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(newDeviceLifecycleStatus)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueSetDeviceLifecycleStatusResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n+\n+  public String enqueueUpdateDeviceCdmaSettingsRequest(\n+      final String organisationIdentification,\n+      final String deviceIdentification,\n+      final CdmaSettings cdmaSettings)\n+      throws FunctionalException {\n+    final Organisation organisation =\n+        this.domainHelperService.findOrganisation(organisationIdentification);\n+    final Device device = this.deviceDomainService.searchDevice(deviceIdentification);\n+\n+    this.domainHelperService.isAllowed(\n+        organisation, device, DeviceFunction.UPDATE_DEVICE_CDMA_SETTINGS);\n+\n+    LOGGER.debug(\n+        \"enqueueUpdateDeviceCdmaSettingsRequest called with organisation {}, deviceIdentification {}, and {}\",\n+        organisationIdentification,\n+        deviceIdentification,\n+        cdmaSettings);\n+\n+    final String correlationUid =\n+        this.correlationIdProviderService.getCorrelationId(\n+            organisationIdentification, deviceIdentification);\n+\n+    final DeviceMessageMetadata deviceMessageMetadata =\n+        new DeviceMessageMetadata(\n+            deviceIdentification,\n+            organisationIdentification,\n+            correlationUid,\n+            MessageType.UPDATE_DEVICE_CDMA_SETTINGS.name());\n+\n+    final CommonRequestMessage message =\n+        new CommonRequestMessage.Builder()\n+            .deviceMessageMetadata(deviceMessageMetadata)\n+            .request(cdmaSettings)\n+            .build();\n+\n+    this.commonRequestMessageSender.send(message);\n+\n+    return correlationUid;\n+  }\n+\n+  public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid)\n+      throws OsgpException {\n+    return this.commonResponseMessageFinder.findMessage(correlationUid);\n+  }\n }\n", "next_change": {"commit": "9af4082fbd35cba98eeb0eaf4263d60f12af1bf3", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\nindex 254e3cad23..35e6e79728 100644\n--- a/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n+++ b/osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/services/DeviceManagementService.java\n", "chunk": "@@ -1070,9 +1048,4 @@ public class DeviceManagementService {\n \n     return correlationUid;\n   }\n-\n-  public ResponseMessage dequeueUpdateDeviceCdmaSettingsResponse(final String correlationUid)\n-      throws OsgpException {\n-    return this.commonResponseMessageFinder.findMessage(correlationUid);\n-  }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "message": "Merge commit", "committedDate": null}, {"oid": "557f6aac0180340d79051073c6c959beb23e8ba4", "committedDate": "2020-06-24 17:25:29 +0200", "message": "Make the wildcard functionality consistent inside the operator application (#354)"}, {"oid": "38f5f2f067dee4744ef59b25caf2ea2dca097546", "committedDate": "2020-07-02 16:21:00 +0200", "message": "FLEX-5413 ~ Orders organisations by identification (#360)"}, {"oid": "c5712fb2525d44de739996fd758cf5b940269bb8", "committedDate": "2020-07-28 16:41:59 +0200", "message": "Feature/flex 5402 sorting filtering messages page (#368)"}, {"oid": "4021af7008addf1d043b8b167cb22dd8822a5fc0", "committedDate": "2020-09-02 10:49:08 +0000", "message": "Removing of devicemodel from UpdateDeviceRequest"}, {"oid": "8c0969f6d464e9be6129c3168367847c6b1423fe", "committedDate": "2020-09-08 15:10:09 +0200", "message": "FLEX-5335 ~ Removes unused import"}, {"oid": "5e579938146e585390b9bcd48ca0a7d32d9e32c0", "committedDate": "2020-10-08 09:53:46 +0200", "message": "Fixed several SonarQube issues"}, {"oid": "6f04a97e7b104ad6a7128ae92493ec538a9c52e3", "committedDate": "2020-10-08 18:04:11 +0200", "message": "FLEX-5335 ~ Use UpdatedDevice in xsd"}, {"oid": "c10966151cf88854d89c5636223d14563fef76c5", "committedDate": "2020-10-16 00:30:15 +0200", "message": "FLEX-5335 ~ Processes review comments"}, {"oid": "8ff3ffc0b3444d0ff476689803ced85c326d6aed", "committedDate": "2020-10-20 12:06:11 +0200", "message": "Feature/flex 5495 add wildcard for search username (#453)"}, {"oid": "352e04b3a9b59f4a45f433df81e9b30de30ff912", "committedDate": "2020-10-27 13:33:10 +0100", "message": "Several changes based on the feedback provided to earlier changes."}, {"oid": "960edf5624e0e097ea28fc19afb1b2eab32e25d7", "committedDate": "2020-10-30 18:48:43 +0100", "message": "FLEX-5534 ~ Improves archiving performance (#475)"}, {"oid": "f6287f9436eb47661064a5f197d1dd04945ec83f", "committedDate": "2020-11-17 10:42:46 +0100", "message": "Merge branch 'development' into code_quality/Solving_SonarQube_Issues"}, {"oid": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "committedDate": "2021-04-16 08:37:27 +0200", "message": "Apply GXF styled Google Java Format conventions to the code base (#610)"}, {"oid": "08043d128031a66909018eb617ff3f713666b3be", "committedDate": "2021-07-12 15:33:55 +0200", "message": "FDP-111: Removed DeviceMessageMetadata and replaced all occurences with MessageMetadata"}, {"oid": "9af4082fbd35cba98eeb0eaf4263d60f12af1bf3", "committedDate": "2022-01-08 08:52:35 +0100", "message": "Add notifications to osgp-adapter-ws-core"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxODY3MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r426718670", "body": "General remark: have we cleaned the _description_ and _descriptionStartsWith_ values?\r\nSpecific remark: we do a \"like\" here, make sure there are no wildcards (percentage or underscore) in the descriptionStartsWith parameter.", "bodyText": "General remark: have we cleaned the description and descriptionStartsWith values?\nSpecific remark: we do a \"like\" here, make sure there are no wildcards (percentage or underscore) in the descriptionStartsWith parameter.", "bodyHTML": "<p dir=\"auto\">General remark: have we cleaned the <em>description</em> and <em>descriptionStartsWith</em> values?<br>\nSpecific remark: we do a \"like\" here, make sure there are no wildcards (percentage or underscore) in the descriptionStartsWith parameter.</p>", "author": "rlemmers", "createdAt": "2020-05-18T15:40:01Z", "path": "osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java", "diffHunk": "@@ -98,4 +99,23 @@ private Predicate createPredicateForHasEventTypes(final Root<Event> eventRoot, f\n \n         return eventType.in(eventTypes);\n     }\n+\n+    @Override\n+    public Specification<Event> withDescription(final String description) throws ArgumentNullOrEmptyException {\n+        if (description == null) {\n+            throw new ArgumentNullOrEmptyException(DESCRIPTION);\n+        }\n+\n+        return ((eventRoot, query, cb) -> cb.equal(eventRoot.<String> get(DESCRIPTION), description));\n+    }\n+\n+    @Override\n+    public Specification<Event> startsWithDescription(final String descriptionStartsWith)\n+            throws ArgumentNullOrEmptyException {\n+        if (descriptionStartsWith == null) {\n+            throw new ArgumentNullOrEmptyException(\"descriptionStartsWith\");\n+        }\n+\n+        return ((eventRoot, query, cb) -> cb.like(eventRoot.<String> get(DESCRIPTION), descriptionStartsWith + \"%\"));", "originalCommit": "a39e1a0c647413c97113514b290e986ec86d2bcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NDg3Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/326#discussion_r429084876", "bodyText": "wrote a getCleanedInput method", "author": "robindenadel", "createdAt": "2020-05-22T07:23:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxODY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "2ca5b6924d74416c64781aaa0bd964679231be97", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java b/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\nindex 1b8b58b1c5..4518006436 100644\n--- a/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\n+++ b/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\n", "chunk": "@@ -101,19 +102,18 @@ public class JpaEventSpecifications implements EventSpecifications {\n     }\n \n     @Override\n-    public Specification<Event> withDescription(final String description) throws ArgumentNullOrEmptyException {\n+    public Specification<Event> withDescription(final String description) {\n         if (description == null) {\n-            throw new ArgumentNullOrEmptyException(DESCRIPTION);\n+            return NO_FILTER;\n         }\n \n         return ((eventRoot, query, cb) -> cb.equal(eventRoot.<String> get(DESCRIPTION), description));\n     }\n \n     @Override\n-    public Specification<Event> startsWithDescription(final String descriptionStartsWith)\n-            throws ArgumentNullOrEmptyException {\n+    public Specification<Event> startsWithDescription(final String descriptionStartsWith) {\n         if (descriptionStartsWith == null) {\n-            throw new ArgumentNullOrEmptyException(\"descriptionStartsWith\");\n+            return NO_FILTER;\n         }\n \n         return ((eventRoot, query, cb) -> cb.like(eventRoot.<String> get(DESCRIPTION), descriptionStartsWith + \"%\"));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java b/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\nindex 1b8b58b1c5..4518006436 100644\n--- a/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\n+++ b/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\n", "chunk": "@@ -101,19 +102,18 @@ public class JpaEventSpecifications implements EventSpecifications {\n     }\n \n     @Override\n-    public Specification<Event> withDescription(final String description) throws ArgumentNullOrEmptyException {\n+    public Specification<Event> withDescription(final String description) {\n         if (description == null) {\n-            throw new ArgumentNullOrEmptyException(DESCRIPTION);\n+            return NO_FILTER;\n         }\n \n         return ((eventRoot, query, cb) -> cb.equal(eventRoot.<String> get(DESCRIPTION), description));\n     }\n \n     @Override\n-    public Specification<Event> startsWithDescription(final String descriptionStartsWith)\n-            throws ArgumentNullOrEmptyException {\n+    public Specification<Event> startsWithDescription(final String descriptionStartsWith) {\n         if (descriptionStartsWith == null) {\n-            throw new ArgumentNullOrEmptyException(\"descriptionStartsWith\");\n+            return NO_FILTER;\n         }\n \n         return ((eventRoot, query, cb) -> cb.like(eventRoot.<String> get(DESCRIPTION), descriptionStartsWith + \"%\"));\n", "next_change": {"commit": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "changed_code": [{"header": "diff --git a/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java b/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\nindex 4518006436..d523b05b78 100644\n--- a/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\n+++ b/osgp/platform/osgp-adapter-ws-shared/src/main/java/org/opensmartgridplatform/adapter/ws/infra/specifications/JpaEventSpecifications.java\n", "chunk": "@@ -28,94 +26,113 @@ import org.springframework.data.jpa.domain.Specification;\n \n public class JpaEventSpecifications implements EventSpecifications {\n \n-    private static final String DEVICE = \"device\";\n-    private static final String DESCRIPTION = \"description\";\n-    private static final Specification<Event> NO_FILTER = (deviceRoot, query, cb) -> cb.and();\n+  private static final String DEVICE = \"device\";\n+  private static final String DEVICE_IDENTIFICATION = \"deviceIdentification\";\n+  private static final String DESCRIPTION = \"description\";\n+  private static final Specification<Event> NO_FILTER = (eventRoot, query, cb) -> cb.and();\n \n-    @Override\n-    public Specification<Event> isCreatedAfter(final Date dateFrom) {\n+  @Override\n+  public Specification<Event> isCreatedAfter(final Date dateFrom) {\n \n-        if (dateFrom == null) {\n-            return NO_FILTER;\n-        }\n-\n-        return ((eventRoot, query, cb) -> cb.greaterThanOrEqualTo(eventRoot.<Date> get(\"dateTime\"), dateFrom));\n+    if (dateFrom == null) {\n+      return NO_FILTER;\n     }\n \n-    @Override\n-    public Specification<Event> isCreatedBefore(final Date dateUntil) {\n+    return ((eventRoot, query, cb) ->\n+        cb.greaterThanOrEqualTo(eventRoot.<Date>get(\"dateTime\"), dateFrom));\n+  }\n \n-        if (dateUntil == null) {\n-            return NO_FILTER;\n-        }\n+  @Override\n+  public Specification<Event> isCreatedBefore(final Date dateUntil) {\n \n-        return ((eventRoot, query, cb) -> cb.lessThanOrEqualTo(eventRoot.<Date> get(\"dateTime\"), dateUntil));\n+    if (dateUntil == null) {\n+      return NO_FILTER;\n     }\n \n-    @Override\n-    public Specification<Event> isFromDevice(final Device device) {\n+    return ((eventRoot, query, cb) ->\n+        cb.lessThanOrEqualTo(eventRoot.<Date>get(\"dateTime\"), dateUntil));\n+  }\n \n-        if (device == null) {\n-            return NO_FILTER;\n-        }\n+  @Override\n+  public Specification<Event> isFromDevice(final String deviceIdentification) {\n \n-        return ((eventRoot, query, cb) -> cb.equal(eventRoot.<Integer> get(DEVICE), device.getId()));\n+    if (deviceIdentification == null) {\n+      return NO_FILTER;\n     }\n \n-    @Override\n-    public Specification<Event> isAuthorized(final Organisation organisation) {\n+    return ((eventRoot, query, cb) ->\n+        cb.equal(eventRoot.<String>get(DEVICE_IDENTIFICATION), deviceIdentification));\n+  }\n \n-        if (organisation == null) {\n-            return NO_FILTER;\n-        }\n+  @Override\n+  public Specification<Event> isAuthorized(final Organisation organisation) {\n \n-        return ((eventRoot, query, cb) -> this.createPredicateForIsAuthorized(eventRoot, query, cb, organisation));\n+    if (organisation == null) {\n+      return NO_FILTER;\n     }\n \n-    private Predicate createPredicateForIsAuthorized(final Root<Event> eventRoot, final CriteriaQuery<?> query,\n-            final CriteriaBuilder cb, final Organisation organisation) {\n-\n-        final Subquery<Long> subquery = query.subquery(Long.class);\n-        final Root<DeviceAuthorization> deviceAuthorizationRoot = subquery.from(DeviceAuthorization.class);\n-        subquery.select(deviceAuthorizationRoot.get(DEVICE).get(\"id\").as(Long.class));\n-        subquery.where(cb.and(cb.equal(deviceAuthorizationRoot.get(\"organisation\"), organisation.getId()), cb.or(\n-                cb.equal(deviceAuthorizationRoot.get(\"functionGroup\"), DeviceFunctionGroup.OWNER.ordinal()),\n-                cb.equal(deviceAuthorizationRoot.get(\"functionGroup\"), DeviceFunctionGroup.MANAGEMENT.ordinal()))));\n-\n-        return cb.in(eventRoot.get(DEVICE)).value(subquery);\n+    return ((eventRoot, query, cb) ->\n+        this.createPredicateForIsAuthorized(eventRoot, query, cb, organisation));\n+  }\n+\n+  private Predicate createPredicateForIsAuthorized(\n+      final Root<Event> eventRoot,\n+      final CriteriaQuery<?> query,\n+      final CriteriaBuilder cb,\n+      final Organisation organisation) {\n+\n+    final Subquery<String> subquery = query.subquery(String.class);\n+    final Root<DeviceAuthorization> deviceAuthorizationRoot =\n+        subquery.from(DeviceAuthorization.class);\n+    subquery.select(\n+        deviceAuthorizationRoot.get(DEVICE).get(DEVICE_IDENTIFICATION).as(String.class));\n+    subquery.where(\n+        cb.and(\n+            cb.equal(deviceAuthorizationRoot.get(\"organisation\"), organisation.getId()),\n+            cb.or(\n+                cb.equal(\n+                    deviceAuthorizationRoot.get(\"functionGroup\"),\n+                    DeviceFunctionGroup.OWNER.ordinal()),\n+                cb.equal(\n+                    deviceAuthorizationRoot.get(\"functionGroup\"),\n+                    DeviceFunctionGroup.MANAGEMENT.ordinal()))));\n+\n+    return cb.in(eventRoot.get(DEVICE_IDENTIFICATION)).value(subquery);\n+  }\n+\n+  @Override\n+  public Specification<Event> hasEventTypes(final List<EventType> eventTypes) {\n+    if (eventTypes == null || eventTypes.isEmpty()) {\n+      return NO_FILTER;\n     }\n \n-    @Override\n-    public Specification<Event> hasEventTypes(final List<EventType> eventTypes) {\n-        if (eventTypes == null || eventTypes.isEmpty()) {\n-            return NO_FILTER;\n-        }\n+    return ((eventRoot, query, cb) -> this.createPredicateForHasEventTypes(eventRoot, eventTypes));\n+  }\n \n-        return ((eventRoot, query, cb) -> this.createPredicateForHasEventTypes(eventRoot, eventTypes));\n-    }\n+  private Predicate createPredicateForHasEventTypes(\n+      final Root<Event> eventRoot, final List<EventType> eventTypes) {\n \n-    private Predicate createPredicateForHasEventTypes(final Root<Event> eventRoot, final List<EventType> eventTypes) {\n+    final Path<Event> eventType = eventRoot.<Event>get(\"eventType\");\n \n-        final Path<Event> eventType = eventRoot.<Event> get(\"eventType\");\n+    return eventType.in(eventTypes);\n+  }\n \n-        return eventType.in(eventTypes);\n+  @Override\n+  public Specification<Event> withDescription(final String description) {\n+    if (description == null) {\n+      return NO_FILTER;\n     }\n \n-    @Override\n-    public Specification<Event> withDescription(final String description) {\n-        if (description == null) {\n-            return NO_FILTER;\n-        }\n+    return ((eventRoot, query, cb) -> cb.equal(eventRoot.<String>get(DESCRIPTION), description));\n+  }\n \n-        return ((eventRoot, query, cb) -> cb.equal(eventRoot.<String> get(DESCRIPTION), description));\n+  @Override\n+  public Specification<Event> startsWithDescription(final String descriptionStartsWith) {\n+    if (descriptionStartsWith == null) {\n+      return NO_FILTER;\n     }\n \n-    @Override\n-    public Specification<Event> startsWithDescription(final String descriptionStartsWith) {\n-        if (descriptionStartsWith == null) {\n-            return NO_FILTER;\n-        }\n-\n-        return ((eventRoot, query, cb) -> cb.like(eventRoot.<String> get(DESCRIPTION), descriptionStartsWith + \"%\"));\n-    }\n+    return ((eventRoot, query, cb) ->\n+        cb.like(eventRoot.<String>get(DESCRIPTION), descriptionStartsWith + \"%\"));\n+  }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "1956b28cc2695a0ef39d4b18ed5bc1046b1a9355", "message": "Merge commit", "committedDate": null}, {"oid": "960edf5624e0e097ea28fc19afb1b2eab32e25d7", "committedDate": "2020-10-30 18:48:43 +0100", "message": "FLEX-5534 ~ Improves archiving performance (#475)"}, {"oid": "36feaca54c5e99582494adaf37c1bd4c95ba7c69", "committedDate": "2020-10-31 21:01:55 +0100", "message": "FLEX-5534 ~ Fixes error in find events."}, {"oid": "1df95f5dc74fd2e8790382994a6b26c9e2938900", "committedDate": "2021-04-16 08:37:27 +0200", "message": "Apply GXF styled Google Java Format conventions to the code base (#610)"}]}, {"oid": "2ca5b6924d74416c64781aaa0bd964679231be97", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2ca5b6924d74416c64781aaa0bd964679231be97", "message": "FLEX-5084: Addresses review comments.", "committedDate": "2020-05-22T08:21:28Z", "type": "commit"}]}