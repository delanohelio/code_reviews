{"pr_number": 423, "pr_title": "[Data Plane Mgr] New Message Contract and Handling ", "pr_author": "Gzure", "pr_createdAt": "2020-10-16T07:53:06Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/423", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5OTkzOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r506399939", "body": "Which interface is in use? DataPlaneService or DataPlaneServiceNew :-)", "bodyText": "Which interface is in use? DataPlaneService or DataPlaneServiceNew :-)", "bodyHTML": "<p dir=\"auto\">Which interface is in use? DataPlaneService or DataPlaneServiceNew :-)</p>", "author": "xieus", "createdAt": "2020-10-16T13:12:00Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.service;\n+\n+import com.futurewei.alcor.web.entity.dataplane.InternalDPMResultList;\n+import com.futurewei.alcor.web.entity.dataplane.refactor.NetworkConfiguration;\n+\n+public interface DataPlaneServiceNew {", "originalCommit": "ff6e04e5e7cbb52b168d287d66db4364815f9a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDMwNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r507324306", "bodyText": "DataPlaneService is in use now.", "author": "Gzure", "createdAt": "2020-10-19T01:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5OTkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c06d4fbf635884c1fd7c34aa919aec30ca61361e", "changed_code": [{"header": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\nindex ad5872682..3f684f761 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\n", "chunk": "@@ -19,7 +19,31 @@ import com.futurewei.alcor.web.entity.dataplane.InternalDPMResultList;\n import com.futurewei.alcor.web.entity.dataplane.refactor.NetworkConfiguration;\n \n public interface DataPlaneServiceNew {\n+\n+    /**\n+     * process create network configuration message and send to ACA nodes\n+     *\n+     * @param networkConfiguration network configuration details\n+     * @return InternalDPMResultList result list\n+     * @throws Exception throw any Exception\n+     */\n     InternalDPMResultList createNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n+\n+    /**\n+     * process update network configuration message and send to ACA nodes\n+     *\n+     * @param networkConfiguration network configuration details\n+     * @return InternalDPMResultList result list\n+     * @throws Exception throw any Exception\n+     */\n     InternalDPMResultList updateNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n+\n+    /**\n+     * process delete network configuration message and send to ACA nodes\n+     *\n+     * @param networkConfiguration network configuration details\n+     * @return InternalDPMResultList result list\n+     * @throws Exception throw any Exception\n+     */\n     InternalDPMResultList deleteNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n }\n", "next_change": {"commit": "d1395b6c477c060489989e357e1f4b851bcddf50", "changed_code": [{"header": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\nindex 3f684f761..ad5872682 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\n", "chunk": "@@ -19,31 +19,7 @@ import com.futurewei.alcor.web.entity.dataplane.InternalDPMResultList;\n import com.futurewei.alcor.web.entity.dataplane.refactor.NetworkConfiguration;\n \n public interface DataPlaneServiceNew {\n-\n-    /**\n-     * process create network configuration message and send to ACA nodes\n-     *\n-     * @param networkConfiguration network configuration details\n-     * @return InternalDPMResultList result list\n-     * @throws Exception throw any Exception\n-     */\n     InternalDPMResultList createNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n-\n-    /**\n-     * process update network configuration message and send to ACA nodes\n-     *\n-     * @param networkConfiguration network configuration details\n-     * @return InternalDPMResultList result list\n-     * @throws Exception throw any Exception\n-     */\n     InternalDPMResultList updateNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n-\n-    /**\n-     * process delete network configuration message and send to ACA nodes\n-     *\n-     * @param networkConfiguration network configuration details\n-     * @return InternalDPMResultList result list\n-     * @throws Exception throw any Exception\n-     */\n     InternalDPMResultList deleteNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n }\n", "next_change": {"commit": "315f1699a19c6c519b9932cd88a8d209c4f67790", "changed_code": [{"header": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\nindex ad5872682..3f684f761 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneServiceNew.java\n", "chunk": "@@ -19,7 +19,31 @@ import com.futurewei.alcor.web.entity.dataplane.InternalDPMResultList;\n import com.futurewei.alcor.web.entity.dataplane.refactor.NetworkConfiguration;\n \n public interface DataPlaneServiceNew {\n+\n+    /**\n+     * process create network configuration message and send to ACA nodes\n+     *\n+     * @param networkConfiguration network configuration details\n+     * @return InternalDPMResultList result list\n+     * @throws Exception throw any Exception\n+     */\n     InternalDPMResultList createNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n+\n+    /**\n+     * process update network configuration message and send to ACA nodes\n+     *\n+     * @param networkConfiguration network configuration details\n+     * @return InternalDPMResultList result list\n+     * @throws Exception throw any Exception\n+     */\n     InternalDPMResultList updateNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n+\n+    /**\n+     * process delete network configuration message and send to ACA nodes\n+     *\n+     * @param networkConfiguration network configuration details\n+     * @return InternalDPMResultList result list\n+     * @throws Exception throw any Exception\n+     */\n     InternalDPMResultList deleteNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMDU1OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r506400558", "body": "This is important interface? Can we add some brief comment? ", "bodyText": "This is important interface? Can we add some brief comment?", "bodyHTML": "<p dir=\"auto\">This is important interface? Can we add some brief comment?</p>", "author": "xieus", "createdAt": "2020-10-16T13:12:33Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/DataPlaneService.java", "diffHunk": "@@ -15,10 +15,11 @@\n */\n package com.futurewei.alcor.dataplane.service;\n \n+import com.futurewei.alcor.web.entity.dataplane.InternalDPMResultList;\n import com.futurewei.alcor.web.entity.dataplane.NetworkConfiguration;\n \n public interface DataPlaneService {\n-    NetworkConfiguration createNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n-    NetworkConfiguration updateNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n-    NetworkConfiguration deleteNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;\n+    InternalDPMResultList createNetworkConfiguration(NetworkConfiguration networkConfiguration) throws Exception;", "originalCommit": "ff6e04e5e7cbb52b168d287d66db4364815f9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMjEwOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r506402109", "body": "refactor => v2", "bodyText": "refactor => v2", "bodyHTML": "<p dir=\"auto\">refactor =&gt; v2</p>", "author": "xieus", "createdAt": "2020-10-16T13:14:20Z", "path": "web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+        http://www.apache.org/licenses/LICENSE-2.0\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.dataplane.refactor;", "originalCommit": "ff6e04e5e7cbb52b168d287d66db4364815f9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1146ba257612c780944483b20c625d3c3008e903", "changed_code": [{"header": "diff --git a/web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java b/web/src/main/java/com/futurewei/alcor/web/entity/dataplane/v2/NetworkConfiguration.java\nsimilarity index 97%\nrename from web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java\nrename to web/src/main/java/com/futurewei/alcor/web/entity/dataplane/v2/NetworkConfiguration.java\nindex 39b001afb..07624a646 100644\n--- a/web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java\n+++ b/web/src/main/java/com/futurewei/alcor/web/entity/dataplane/v2/NetworkConfiguration.java\n", "chunk": "@@ -10,7 +10,7 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n         See the License for the specific language governing permissions and\n         limitations under the License.\n */\n-package com.futurewei.alcor.web.entity.dataplane.refactor;\n+package com.futurewei.alcor.web.entity.dataplane.v2;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.futurewei.alcor.schema.Common.OperationType;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMzc2NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r506403765", "body": "routerTable => routerInfo", "bodyText": "routerTable => routerInfo", "bodyHTML": "<p dir=\"auto\">routerTable =&gt; routerInfo</p>", "author": "xieus", "createdAt": "2020-10-16T13:15:34Z", "path": "web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+        http://www.apache.org/licenses/LICENSE-2.0\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.dataplane.refactor;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.schema.Common.OperationType;\n+import com.futurewei.alcor.schema.Common.ResourceType;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.NeighborEntry;\n+import com.futurewei.alcor.web.entity.dataplane.NeighborInfo;\n+import com.futurewei.alcor.web.entity.route.InternalRouterInfo;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import lombok.Data;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+public class NetworkConfiguration {\n+\n+  private ResourceType rsType;\n+  private OperationType opType;\n+\n+  @JsonProperty(\"ports_internal\")\n+  private List<InternalPortEntity> portEntities;\n+\n+  @JsonProperty(\"vpcs_internal\")\n+  private List<VpcEntity> vpcs;\n+\n+  @JsonProperty(\"subnets_internal\")\n+  private List<InternalSubnetEntity> subnets;\n+\n+  @JsonProperty(\"security_groups_internal\")\n+  private List<SecurityGroup> securityGroups;\n+\n+  @JsonProperty(\"neighbor_info\")\n+  private Map<String, NeighborInfo> neighborInfos;\n+\n+  @JsonProperty(\"neighbor_table\")\n+  private Map<String, List<NeighborEntry>> neighborTable;\n+\n+  @JsonProperty(\"routers_internal\")\n+  private List<InternalRouterInfo> internalRouterInfos;\n+\n+  @Override\n+  public String toString() {\n+    return \"NetworkConfiguration{\" + \"rsType=\" + rsType + \", opType=\" + opType + \", portEntities=\" + portEntities + \", vpcs=\" + vpcs + \", subnets=\" + subnets + \", securityGroups=\" + securityGroups + \", neighborInfos=\" + neighborInfos + \", neighborTable=\" + neighborTable + \", routerTable=\" + internalRouterInfos + '}';", "originalCommit": "ff6e04e5e7cbb52b168d287d66db4364815f9a2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1146ba257612c780944483b20c625d3c3008e903", "changed_code": [{"header": "diff --git a/web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java b/web/src/main/java/com/futurewei/alcor/web/entity/dataplane/v2/NetworkConfiguration.java\nsimilarity index 97%\nrename from web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java\nrename to web/src/main/java/com/futurewei/alcor/web/entity/dataplane/v2/NetworkConfiguration.java\nindex 39b001afb..07624a646 100644\n--- a/web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java\n+++ b/web/src/main/java/com/futurewei/alcor/web/entity/dataplane/v2/NetworkConfiguration.java\n", "chunk": "@@ -55,11 +55,6 @@ public class NetworkConfiguration {\n   @JsonProperty(\"routers_internal\")\n   private List<InternalRouterInfo> internalRouterInfos;\n \n-  @Override\n-  public String toString() {\n-    return \"NetworkConfiguration{\" + \"rsType=\" + rsType + \", opType=\" + opType + \", portEntities=\" + portEntities + \", vpcs=\" + vpcs + \", subnets=\" + subnets + \", securityGroups=\" + securityGroups + \", neighborInfos=\" + neighborInfos + \", neighborTable=\" + neighborTable + \", routerTable=\" + internalRouterInfos + '}';\n-  }\n-\n   public List<InternalRouterInfo> getInternalRouterInfos() {\n     return internalRouterInfos;\n   }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxMzIzNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r506413236", "body": "As discussed in the open-source meeting, let us use Alcor Thread pool if possible. Please refer to PR #424 for details.", "bodyText": "As discussed in the open-source meeting, let us use Alcor Thread pool if possible. Please refer to PR #424 for details.", "bodyHTML": "<p dir=\"auto\">As discussed in the open-source meeting, let us use Alcor Thread pool if possible. Please refer to PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"723217869\" data-permission-text=\"Title is private\" data-url=\"https://github.com/futurewei-cloud/alcor/issues/424\" data-hovercard-type=\"issue\" data-hovercard-url=\"/futurewei-cloud/alcor/issues/424/hovercard\" href=\"https://github.com/futurewei-cloud/alcor/issues/424\">#424</a> for details.</p>", "author": "xieus", "createdAt": "2020-10-16T13:22:58Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java", "diffHunk": "@@ -19,44 +19,97 @@\n import com.futurewei.alcor.dataplane.config.grpc.GoalStateProvisionerClient;\n import com.futurewei.alcor.dataplane.entity.HostGoalState;\n import com.futurewei.alcor.schema.Goalstate;\n+import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n \n @Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n \n     private int grpcPort;\n \n+    private static ExecutorService executor = new ThreadPoolExecutor(100, 200, 50, TimeUnit.SECONDS,", "originalCommit": "ff6e04e5e7cbb52b168d287d66db4364815f9a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMzNDcwMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r507334700", "bodyText": "It's only test code. And the original thread pool provides more flexibility.", "author": "Gzure", "createdAt": "2020-10-19T01:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxMzIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1NjI3MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r508256270", "bodyText": "Well. Which kinds of features are available in original thread pool but not in Alcor thread pool?\nMeanwhile, we plan to make this more than test code :-)", "author": "xieus", "createdAt": "2020-10-20T07:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxMzIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c06d4fbf635884c1fd7c34aa919aec30ca61361e", "changed_code": [{"header": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\nindex 3ccbb9ed2..100afcc4e 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n", "chunk": "@@ -16,34 +16,46 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n package com.futurewei.alcor.dataplane.client.grpc;\n \n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n+import com.futurewei.alcor.dataplane.config.Config;\n import com.futurewei.alcor.dataplane.config.grpc.GoalStateProvisionerClient;\n import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.schema.GoalStateProvisionerGrpc;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n import io.netty.util.concurrent.DefaultThreadFactory;\n+import org.apache.catalina.Manager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n import java.util.concurrent.*;\n import java.util.stream.Collectors;\n \n @Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n+\n     private int grpcPort;\n \n-    private static ExecutorService executor = new ThreadPoolExecutor(100, 200, 50, TimeUnit.SECONDS,\n-            new LinkedBlockingDeque<>(),\n-            new DefaultThreadFactory(\"grpc send pool\"));\n+    @Autowired\n+    private Config globalConfig;\n+\n+    private final ExecutorService executor;\n \n     @Autowired\n-    public DataPlaneClientImpl(@Value(\"${dataplane.grpc.port}\")int grpcPort) {\n-        this.grpcPort = grpcPort;\n+    public DataPlaneClientImpl() {\n+        this.grpcPort = globalConfig.port;\n+        executor = new ThreadPoolExecutor(globalConfig.grpcMinThreads,\n+                globalConfig.grpcMaxThreads, 50, TimeUnit.SECONDS,\n+                new LinkedBlockingDeque<>(),\n+                new DefaultThreadFactory(globalConfig.grpThreadsName));\n     }\n \n     @Override\n", "next_change": {"commit": "d1395b6c477c060489989e357e1f4b851bcddf50", "changed_code": [{"header": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\nindex 100afcc4e..3ccbb9ed2 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n", "chunk": "@@ -16,46 +16,34 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n package com.futurewei.alcor.dataplane.client.grpc;\n \n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n-import com.futurewei.alcor.dataplane.config.Config;\n import com.futurewei.alcor.dataplane.config.grpc.GoalStateProvisionerClient;\n import com.futurewei.alcor.dataplane.entity.HostGoalState;\n-import com.futurewei.alcor.schema.GoalStateProvisionerGrpc;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n-import io.grpc.ManagedChannel;\n-import io.grpc.ManagedChannelBuilder;\n-import io.grpc.stub.StreamObserver;\n import io.netty.util.concurrent.DefaultThreadFactory;\n-import org.apache.catalina.Manager;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.*;\n import java.util.stream.Collectors;\n \n @Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n-\n     private int grpcPort;\n \n-    @Autowired\n-    private Config globalConfig;\n-\n-    private final ExecutorService executor;\n+    private static ExecutorService executor = new ThreadPoolExecutor(100, 200, 50, TimeUnit.SECONDS,\n+            new LinkedBlockingDeque<>(),\n+            new DefaultThreadFactory(\"grpc send pool\"));\n \n     @Autowired\n-    public DataPlaneClientImpl() {\n-        this.grpcPort = globalConfig.port;\n-        executor = new ThreadPoolExecutor(globalConfig.grpcMinThreads,\n-                globalConfig.grpcMaxThreads, 50, TimeUnit.SECONDS,\n-                new LinkedBlockingDeque<>(),\n-                new DefaultThreadFactory(globalConfig.grpThreadsName));\n+    public DataPlaneClientImpl(@Value(\"${dataplane.grpc.port}\")int grpcPort) {\n+        this.grpcPort = grpcPort;\n     }\n \n     @Override\n", "next_change": {"commit": "315f1699a19c6c519b9932cd88a8d209c4f67790", "changed_code": [{"header": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\nindex 3ccbb9ed2..100afcc4e 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n", "chunk": "@@ -16,34 +16,46 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n package com.futurewei.alcor.dataplane.client.grpc;\n \n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n+import com.futurewei.alcor.dataplane.config.Config;\n import com.futurewei.alcor.dataplane.config.grpc.GoalStateProvisionerClient;\n import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.schema.GoalStateProvisionerGrpc;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n import io.netty.util.concurrent.DefaultThreadFactory;\n+import org.apache.catalina.Manager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n import java.util.concurrent.*;\n import java.util.stream.Collectors;\n \n @Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n+\n     private int grpcPort;\n \n-    private static ExecutorService executor = new ThreadPoolExecutor(100, 200, 50, TimeUnit.SECONDS,\n-            new LinkedBlockingDeque<>(),\n-            new DefaultThreadFactory(\"grpc send pool\"));\n+    @Autowired\n+    private Config globalConfig;\n+\n+    private final ExecutorService executor;\n \n     @Autowired\n-    public DataPlaneClientImpl(@Value(\"${dataplane.grpc.port}\")int grpcPort) {\n-        this.grpcPort = grpcPort;\n+    public DataPlaneClientImpl() {\n+        this.grpcPort = globalConfig.port;\n+        executor = new ThreadPoolExecutor(globalConfig.grpcMinThreads,\n+                globalConfig.grpcMaxThreads, 50, TimeUnit.SECONDS,\n+                new LinkedBlockingDeque<>(),\n+                new DefaultThreadFactory(globalConfig.grpThreadsName));\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ0NDIyMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r506444222", "body": "Could we have a brief comment here to explain each method, as well as the map (e.g., what the key is)? ", "bodyText": "Could we have a brief comment here to explain each method, as well as the map (e.g., what the key is)?", "bodyHTML": "<p dir=\"auto\">Could we have a brief comment here to explain each method, as well as the map (e.g., what the key is)?</p>", "author": "xieus", "createdAt": "2020-10-16T13:50:15Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java", "diffHunk": "@@ -17,14 +17,23 @@\n \n import com.futurewei.alcor.dataplane.entity.HostGoalState;\n import com.futurewei.alcor.schema.Goalstate.GoalState;\n+import com.futurewei.alcor.schema.Goalstateprovisioner;\n import org.springframework.stereotype.Component;\n \n import java.util.List;\n+import java.util.Map;\n \n @Component\n public interface DataPlaneClient {\n-    void createGoalState(GoalState goalState, String hostIp) throws Exception;\n-    void createGoalState(List<HostGoalState> hostGoalStates) throws Exception;\n-    void updateGoalState(List<HostGoalState> hostGoalStates) throws Exception;\n-    void deleteGoalState(List<HostGoalState> hostGoalStates) throws Exception;\n+    Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>>", "originalCommit": "ff6e04e5e7cbb52b168d287d66db4364815f9a2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyODMxMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r513928313", "bodyText": "The map key is the Host IP, the value is Host ACA handled result statuses.", "author": "Gzure", "createdAt": "2020-10-29T03:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ0NDIyMg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c06d4fbf635884c1fd7c34aa919aec30ca61361e", "url": "https://github.com/futurewei-cloud/alcor/commit/c06d4fbf635884c1fd7c34aa919aec30ca61361e", "message": "add grpc async send goalstate\nexport grpc thread pool", "committedDate": "2020-10-22T08:38:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwMzU0NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r510003545", "body": "In v2 NetworkConfiguration, could we get rid of rsType and OpType, which are supposed to be DPM internal and not part of the contract.", "bodyText": "In v2 NetworkConfiguration, could we get rid of rsType and OpType, which are supposed to be DPM internal and not part of the contract.", "bodyHTML": "<p dir=\"auto\">In v2 NetworkConfiguration, could we get rid of rsType and OpType, which are supposed to be DPM internal and not part of the contract.</p>", "author": "xieus", "createdAt": "2020-10-22T09:10:29Z", "path": "web/src/main/java/com/futurewei/alcor/web/entity/dataplane/refactor/NetworkConfiguration.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+        http://www.apache.org/licenses/LICENSE-2.0\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.dataplane.refactor;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.schema.Common.OperationType;\n+import com.futurewei.alcor.schema.Common.ResourceType;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.NeighborEntry;\n+import com.futurewei.alcor.web.entity.dataplane.NeighborInfo;\n+import com.futurewei.alcor.web.entity.route.InternalRouterInfo;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import lombok.Data;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+public class NetworkConfiguration {\n+\n+  private ResourceType rsType;", "originalCommit": "c06d4fbf635884c1fd7c34aa919aec30ca61361e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyNjE1OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r513926159", "bodyText": "If we remove rsType and OpType, DPM should add more rest APIS to identity which resource and operation should update.", "author": "Gzure", "createdAt": "2020-10-29T03:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwMzU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk5NTA2NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r513995065", "bodyText": "rsType and OpType are resource-level fields, not on the message level. That being said, there will be OpType inside each top-level resource. For example, router_internal always has field already, and we will add to more top-level resources.", "author": "xieus", "createdAt": "2020-10-29T05:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwMzU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NjAxNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r514056015", "bodyText": "Well, I think we can keep these two fields, and add OpType in top-level resources in the future.", "author": "Gzure", "createdAt": "2020-10-29T07:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwMzU0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwOTQ0OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/423#discussion_r510009449", "body": "Looks like supporting thread pool is something missing in our Alcor async executor. Could you evaluate with @chenpiaoping to see what need to add into our own executor. \r\n\r\nIdeally we would like to replace it with our own implementation. I understand it may take some time but we will need to know what the gap is so that we could plan for it.", "bodyText": "Looks like supporting thread pool is something missing in our Alcor async executor. Could you evaluate with @chenpiaoping to see what need to add into our own executor.\nIdeally we would like to replace it with our own implementation. I understand it may take some time but we will need to know what the gap is so that we could plan for it.", "bodyHTML": "<p dir=\"auto\">Looks like supporting thread pool is something missing in our Alcor async executor. Could you evaluate with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/chenpiaoping/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/chenpiaoping\">@chenpiaoping</a> to see what need to add into our own executor.</p>\n<p dir=\"auto\">Ideally we would like to replace it with our own implementation. I understand it may take some time but we will need to know what the gap is so that we could plan for it.</p>", "author": "xieus", "createdAt": "2020-10-22T09:19:16Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java", "diffHunk": "@@ -16,47 +16,182 @@\n package com.futurewei.alcor.dataplane.client.grpc;\n \n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n+import com.futurewei.alcor.dataplane.config.Config;\n import com.futurewei.alcor.dataplane.config.grpc.GoalStateProvisionerClient;\n import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.schema.GoalStateProvisionerGrpc;\n import com.futurewei.alcor.schema.Goalstate;\n+import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+import io.netty.util.concurrent.DefaultThreadFactory;\n+import org.apache.catalina.Manager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n-import java.util.List;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.util.stream.Collectors;\n \n @Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n+\n     private int grpcPort;\n \n     @Autowired\n-    public DataPlaneClientImpl(@Value(\"${dataplane.grpc.port}\")int grpcPort) {\n-        this.grpcPort = grpcPort;\n+    private Config globalConfig;\n+\n+    private final ExecutorService executor;\n+\n+    @Autowired\n+    public DataPlaneClientImpl() {\n+        this.grpcPort = globalConfig.port;\n+        executor = new ThreadPoolExecutor(globalConfig.grpcMinThreads,\n+                globalConfig.grpcMaxThreads, 50, TimeUnit.SECONDS,\n+                new LinkedBlockingDeque<>(),\n+                new DefaultThreadFactory(globalConfig.grpThreadsName));", "originalCommit": "c06d4fbf635884c1fd7c34aa919aec30ca61361e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1395b6c477c060489989e357e1f4b851bcddf50", "changed_code": [{"header": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\nindex 100afcc4e..3ccbb9ed2 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n", "chunk": "@@ -16,46 +16,34 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n package com.futurewei.alcor.dataplane.client.grpc;\n \n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n-import com.futurewei.alcor.dataplane.config.Config;\n import com.futurewei.alcor.dataplane.config.grpc.GoalStateProvisionerClient;\n import com.futurewei.alcor.dataplane.entity.HostGoalState;\n-import com.futurewei.alcor.schema.GoalStateProvisionerGrpc;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n-import io.grpc.ManagedChannel;\n-import io.grpc.ManagedChannelBuilder;\n-import io.grpc.stub.StreamObserver;\n import io.netty.util.concurrent.DefaultThreadFactory;\n-import org.apache.catalina.Manager;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.*;\n import java.util.stream.Collectors;\n \n @Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n-\n     private int grpcPort;\n \n-    @Autowired\n-    private Config globalConfig;\n-\n-    private final ExecutorService executor;\n+    private static ExecutorService executor = new ThreadPoolExecutor(100, 200, 50, TimeUnit.SECONDS,\n+            new LinkedBlockingDeque<>(),\n+            new DefaultThreadFactory(\"grpc send pool\"));\n \n     @Autowired\n-    public DataPlaneClientImpl() {\n-        this.grpcPort = globalConfig.port;\n-        executor = new ThreadPoolExecutor(globalConfig.grpcMinThreads,\n-                globalConfig.grpcMaxThreads, 50, TimeUnit.SECONDS,\n-                new LinkedBlockingDeque<>(),\n-                new DefaultThreadFactory(globalConfig.grpThreadsName));\n+    public DataPlaneClientImpl(@Value(\"${dataplane.grpc.port}\")int grpcPort) {\n+        this.grpcPort = grpcPort;\n     }\n \n     @Override\n", "next_change": {"commit": "315f1699a19c6c519b9932cd88a8d209c4f67790", "changed_code": [{"header": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\nindex 3ccbb9ed2..100afcc4e 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/grpc/DataPlaneClientImpl.java\n", "chunk": "@@ -16,34 +16,46 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n package com.futurewei.alcor.dataplane.client.grpc;\n \n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n+import com.futurewei.alcor.dataplane.config.Config;\n import com.futurewei.alcor.dataplane.config.grpc.GoalStateProvisionerClient;\n import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.schema.GoalStateProvisionerGrpc;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n import io.netty.util.concurrent.DefaultThreadFactory;\n+import org.apache.catalina.Manager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n import java.util.concurrent.*;\n import java.util.stream.Collectors;\n \n @Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n+\n     private int grpcPort;\n \n-    private static ExecutorService executor = new ThreadPoolExecutor(100, 200, 50, TimeUnit.SECONDS,\n-            new LinkedBlockingDeque<>(),\n-            new DefaultThreadFactory(\"grpc send pool\"));\n+    @Autowired\n+    private Config globalConfig;\n+\n+    private final ExecutorService executor;\n \n     @Autowired\n-    public DataPlaneClientImpl(@Value(\"${dataplane.grpc.port}\")int grpcPort) {\n-        this.grpcPort = grpcPort;\n+    public DataPlaneClientImpl() {\n+        this.grpcPort = globalConfig.port;\n+        executor = new ThreadPoolExecutor(globalConfig.grpcMinThreads,\n+                globalConfig.grpcMaxThreads, 50, TimeUnit.SECONDS,\n+                new LinkedBlockingDeque<>(),\n+                new DefaultThreadFactory(globalConfig.grpThreadsName));\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"oid": "d1395b6c477c060489989e357e1f4b851bcddf50", "url": "https://github.com/futurewei-cloud/alcor/commit/d1395b6c477c060489989e357e1f4b851bcddf50", "message": "add new dpm msg handle", "committedDate": "2020-10-29T06:07:50Z", "type": "commit"}, {"oid": "84ac7e5a3d09fa70b45d22f719bbbc7a7e5f10db", "url": "https://github.com/futurewei-cloud/alcor/commit/84ac7e5a3d09fa70b45d22f719bbbc7a7e5f10db", "message": "add new dpm msg handle", "committedDate": "2020-10-29T06:07:51Z", "type": "commit"}, {"oid": "315f1699a19c6c519b9932cd88a8d209c4f67790", "url": "https://github.com/futurewei-cloud/alcor/commit/315f1699a19c6c519b9932cd88a8d209c4f67790", "message": "add grpc async send goalstate\nexport grpc thread pool", "committedDate": "2020-10-29T06:07:51Z", "type": "commit"}, {"oid": "378291c07cd21bcd3b5a0e596c2ea3b8f43a40f1", "url": "https://github.com/futurewei-cloud/alcor/commit/378291c07cd21bcd3b5a0e596c2ea3b8f43a40f1", "message": "fix ut fail", "committedDate": "2020-10-29T06:07:51Z", "type": "commit"}, {"oid": "1146ba257612c780944483b20c625d3c3008e903", "url": "https://github.com/futurewei-cloud/alcor/commit/1146ba257612c780944483b20c625d3c3008e903", "message": "rename refactor to v2", "committedDate": "2020-10-29T06:07:51Z", "type": "commit"}, {"oid": "1146ba257612c780944483b20c625d3c3008e903", "url": "https://github.com/futurewei-cloud/alcor/commit/1146ba257612c780944483b20c625d3c3008e903", "message": "rename refactor to v2", "committedDate": "2020-10-29T06:07:51Z", "type": "forcePushed"}]}