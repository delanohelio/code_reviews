{"pr_number": 164, "pr_title": "[Micro-service] Private IP manager", "pr_author": "chenpiaoping", "pr_createdAt": "2020-04-15T14:01:33Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/164", "merge_commit": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "timeline": [{"oid": "093440a0e001194fadf456943d1a81c7de7dd3d5", "url": "https://github.com/futurewei-cloud/alcor/commit/093440a0e001194fadf456943d1a81c7de7dd3d5", "message": "[Micro-service] Private IP manager", "committedDate": "2020-04-15T13:50:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTk3MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r408889971", "body": "Seems the first iteration focuses on IPv4, which is totally fine. IPv6 will also be supported, right? ", "bodyText": "Seems the first iteration focuses on IPv4, which is totally fine. IPv6 will also be supported, right?", "bodyHTML": "<p dir=\"auto\">Seems the first iteration focuses on IPv4, which is totally fine. IPv6 will also be supported, right?</p>", "author": "xieus", "createdAt": "2020-04-15T14:33:38Z", "path": "services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.ipmanager.controller;\n+import com.futurewei.alcor.ipmanager.entity.Ipv4AddrState;\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequest;\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRangeRequest;\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequestBulk;\n+import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrInvalidException;\n+import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrRangeInvalidException;\n+import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrStateInvalidException;\n+import com.futurewei.alcor.ipmanager.http.status.SubnetIdInvalidException;\n+import com.futurewei.alcor.ipmanager.service.Ipv4AddrService;\n+import com.futurewei.alcor.utils.Ipv4AddrUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.Map;\n+\n+\n+@RestController\n+public class Ipv4AddrController {\n+    @Autowired\n+    Ipv4AddrService ipv4AddrService;", "originalCommit": "093440a0e001194fadf456943d1a81c7de7dd3d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6df3f8b15f54428c25655e68c727d07fd1439cd", "changed_code": [{"header": "diff --git a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/Ipv4AddrController.java\nsimilarity index 74%\nrename from services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java\nrename to services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/Ipv4AddrController.java\nindex dc43ee6e..4941bbdc 100644\n--- a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/Ipv4AddrController.java\n", "chunk": "@@ -34,7 +34,7 @@ import java.util.Map;\n @RestController\n public class Ipv4AddrController {\n     @Autowired\n-    Ipv4AddrService ipv4AddrService;\n+    Ipv4AddrServiceImpl ipv4AddrServiceImpl;\n \n     private void checkSubnetId(String subnetId) throws SubnetIdInvalidException {\n         if (subnetId == null || \"\".equals(subnetId)) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "changed_code": [{"header": "diff --git a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java b/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java\ndeleted file mode 100644\nindex dc43ee6e..00000000\n--- a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java\n+++ /dev/null\n", "chunk": "@@ -1,168 +0,0 @@\n-/*\n-Copyright 2019 The Alcor Authors.\n-\n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License.\n-        You may obtain a copy of the License at\n-\n-        http://www.apache.org/licenses/LICENSE-2.0\n-\n-        Unless required by applicable law or agreed to in writing, software\n-        distributed under the License is distributed on an \"AS IS\" BASIS,\n-        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-        See the License for the specific language governing permissions and\n-        limitations under the License.\n-*/\n-\n-package com.futurewei.alcor.ipmanager.controller;\n-import com.futurewei.alcor.ipmanager.entity.Ipv4AddrState;\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequest;\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRangeRequest;\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequestBulk;\n-import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrInvalidException;\n-import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrRangeInvalidException;\n-import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrStateInvalidException;\n-import com.futurewei.alcor.ipmanager.http.status.SubnetIdInvalidException;\n-import com.futurewei.alcor.ipmanager.service.Ipv4AddrService;\n-import com.futurewei.alcor.utils.Ipv4AddrUtil;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.*;\n-\n-import java.util.Map;\n-\n-\n-@RestController\n-public class Ipv4AddrController {\n-    @Autowired\n-    Ipv4AddrService ipv4AddrService;\n-\n-    private void checkSubnetId(String subnetId) throws SubnetIdInvalidException {\n-        if (subnetId == null || \"\".equals(subnetId)) {\n-            throw new SubnetIdInvalidException();\n-        }\n-    }\n-\n-    private void checkIpv4Addr(String ipv4Addr) throws Ipv4AddrInvalidException {\n-        if (!Ipv4AddrUtil.formatCheck(ipv4Addr)) {\n-            throw new Ipv4AddrInvalidException();\n-        }\n-    }\n-\n-    private void checkIpv4AddrState(String state) throws Ipv4AddrStateInvalidException {\n-        if (!Ipv4AddrState.ACTIVATED.getState().equals(state) &&\n-                !Ipv4AddrState.DEACTIVATED.getState().equals(state)) {\n-            throw new Ipv4AddrStateInvalidException();\n-        }\n-    }\n-\n-    @PostMapping(\"/v4/ips\")\n-    @ResponseBody\n-    public Ipv4AddrRequest allocateIpv4Addr(@RequestBody Ipv4AddrRequest request) throws Exception {\n-        checkSubnetId(request.getSubnetId());\n-\n-        return ipv4AddrService.allocateIpv4Addr(request);\n-    }\n-\n-    @PostMapping(\"/v4/ips/bulk\")\n-    @ResponseBody\n-    public Ipv4AddrRequestBulk allocateIpv4AddrBulk(@RequestBody Ipv4AddrRequestBulk requestBulk) throws Exception {\n-        for(Ipv4AddrRequest request : requestBulk.getIpv4AddrRequests()) {\n-            checkSubnetId(request.getSubnetId());\n-        }\n-\n-        return ipv4AddrService.allocateIpv4AddrBulk(requestBulk);\n-    }\n-\n-    @PutMapping(\"/v4/ips\")\n-    @ResponseBody\n-    public Ipv4AddrRequest modifyIpv4AddrState(@RequestBody Ipv4AddrRequest request) throws Exception {\n-        checkSubnetId(request.getSubnetId());\n-        checkIpv4Addr(request.getIpv4Addr());\n-        checkIpv4AddrState(request.getState());\n-\n-        return ipv4AddrService.modifyIpv4AddrState(request);\n-    }\n-\n-    @PutMapping(\"/v4/ips/bulk\")\n-    @ResponseBody\n-    public Ipv4AddrRequestBulk modifyIpv4AddrStateBulk(@RequestBody Ipv4AddrRequestBulk requestBulk) throws Exception {\n-        for(Ipv4AddrRequest request : requestBulk.getIpv4AddrRequests()) {\n-            checkSubnetId(request.getSubnetId());\n-            checkSubnetId(request.getIpv4Addr());\n-            checkSubnetId(request.getState());\n-        }\n-\n-        return ipv4AddrService.modifyIpv4AddrStateBulk(requestBulk);\n-    }\n-\n-    @DeleteMapping(\"/v4/ips/{subnet_id}/{ip}\")\n-    @ResponseBody\n-    public Ipv4AddrRequest releaseIpv4Addr(@PathVariable(\"subnet_id\") String subnetId, @PathVariable(\"ip\") String ipv4Addr) throws Exception {\n-        checkSubnetId(subnetId);\n-        checkIpv4Addr(ipv4Addr);\n-\n-        return ipv4AddrService.releaseIpv4Addr(subnetId, ipv4Addr);\n-    }\n-\n-    @DeleteMapping(\"/v4/ips/bulk\")\n-    @ResponseBody\n-    public Ipv4AddrRequestBulk releaseIpv4AddrBulk(@RequestBody Ipv4AddrRequestBulk requestBulk) throws Exception {\n-        for(Ipv4AddrRequest request : requestBulk.getIpv4AddrRequests()) {\n-            checkSubnetId(request.getSubnetId());\n-        }\n-\n-        return ipv4AddrService.releaseIpv4AddrBulk(requestBulk);\n-    }\n-\n-    @GetMapping(\"/v4/ips/{subnet_id}/{ip}\")\n-    @ResponseBody\n-    public Ipv4AddrRequest getIpv4Addr(@PathVariable(\"subnet_id\") String subnetId, @PathVariable(\"ip\") String ipv4Addr) throws Exception {\n-        checkSubnetId(subnetId);\n-        checkIpv4Addr(ipv4Addr);\n-\n-        return ipv4AddrService.getIpv4Addr(subnetId, ipv4Addr);\n-    }\n-\n-    @GetMapping(\"/v4/ips\")\n-    @ResponseBody\n-    public Map listAllocatedIpv4Addr() {\n-        return ipv4AddrService.listAllocatedIpv4Addr();\n-    }\n-\n-    @PostMapping(\"/v4/ips/range\")\n-    @ResponseBody\n-    public Ipv4AddrRangeRequest createIpv4AddrRange(@RequestBody Ipv4AddrRangeRequest request) throws Exception {\n-        checkSubnetId(request.getSubnetId());\n-        checkIpv4Addr(request.getFirstAddr());\n-        checkIpv4Addr(request.getLastAddr());\n-\n-        //Check if first < last\n-        long firstAddrLong = Ipv4AddrUtil.ipToLong(request.getFirstAddr());\n-        long lastAddrLong = Ipv4AddrUtil.ipToLong(request.getLastAddr());\n-        if (firstAddrLong >= lastAddrLong) {\n-            throw new Ipv4AddrRangeInvalidException();\n-        }\n-\n-        return ipv4AddrService.createIpv4AddrRange(request);\n-    }\n-\n-    @DeleteMapping(\"/v4/ips/range/{subnet_id}\")\n-    @ResponseBody\n-    public Ipv4AddrRangeRequest deleteIpv4AddrRange(@PathVariable(\"subnet_id\") String subnetId) throws Exception {\n-        return ipv4AddrService.deleteIpv4AddrRange(subnetId);\n-    }\n-\n-    @GetMapping(\"/v4/ips/range/{subnet_id}\")\n-    @ResponseBody\n-    public Ipv4AddrRangeRequest getIpv4AddrRange(@PathVariable(\"subnet_id\") String subnetId) throws Exception {\n-        checkSubnetId(subnetId);\n-\n-        return ipv4AddrService.getIpv4AddrRange(subnetId);\n-    }\n-\n-    @GetMapping(\"/v4/ips/range\")\n-    @ResponseBody\n-    public Map listIpv4AddrRange() {\n-        return ipv4AddrService.listIpv4AddrRange();\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MDYwMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r408890601", "body": "When you get a chance, please include the design doc in the PR as well. Thanks. ", "bodyText": "When you get a chance, please include the design doc in the PR as well. Thanks.", "bodyHTML": "<p dir=\"auto\">When you get a chance, please include the design doc in the PR as well. Thanks.</p>", "author": "xieus", "createdAt": "2020-04-15T14:34:25Z", "path": "services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.ipmanager.controller;\n+import com.futurewei.alcor.ipmanager.entity.Ipv4AddrState;\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequest;\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRangeRequest;\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequestBulk;\n+import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrInvalidException;\n+import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrRangeInvalidException;\n+import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrStateInvalidException;\n+import com.futurewei.alcor.ipmanager.http.status.SubnetIdInvalidException;\n+import com.futurewei.alcor.ipmanager.service.Ipv4AddrService;\n+import com.futurewei.alcor.utils.Ipv4AddrUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.Map;\n+\n+\n+@RestController\n+public class Ipv4AddrController {\n+    @Autowired\n+    Ipv4AddrService ipv4AddrService;\n+\n+    private void checkSubnetId(String subnetId) throws SubnetIdInvalidException {", "originalCommit": "093440a0e001194fadf456943d1a81c7de7dd3d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTI0NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r410021244", "bodyText": "Can you update concurrency handling section? When multiple clients try to allocate IPs from the same subnet, it could potentially get the same IPs. how do you handle this situation?", "author": "xieus", "createdAt": "2020-04-17T06:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MDYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f6df3f8b15f54428c25655e68c727d07fd1439cd", "changed_code": [{"header": "diff --git a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/Ipv4AddrController.java\nsimilarity index 74%\nrename from services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java\nrename to services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/Ipv4AddrController.java\nindex dc43ee6e..4941bbdc 100644\n--- a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/Ipv4AddrController.java\n", "chunk": "@@ -34,7 +34,7 @@ import java.util.Map;\n @RestController\n public class Ipv4AddrController {\n     @Autowired\n-    Ipv4AddrService ipv4AddrService;\n+    Ipv4AddrServiceImpl ipv4AddrServiceImpl;\n \n     private void checkSubnetId(String subnetId) throws SubnetIdInvalidException {\n         if (subnetId == null || \"\".equals(subnetId)) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "changed_code": [{"header": "diff --git a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java b/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java\ndeleted file mode 100644\nindex dc43ee6e..00000000\n--- a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/controller/Ipv4AddrController.java\n+++ /dev/null\n", "chunk": "@@ -1,168 +0,0 @@\n-/*\n-Copyright 2019 The Alcor Authors.\n-\n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License.\n-        You may obtain a copy of the License at\n-\n-        http://www.apache.org/licenses/LICENSE-2.0\n-\n-        Unless required by applicable law or agreed to in writing, software\n-        distributed under the License is distributed on an \"AS IS\" BASIS,\n-        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-        See the License for the specific language governing permissions and\n-        limitations under the License.\n-*/\n-\n-package com.futurewei.alcor.ipmanager.controller;\n-import com.futurewei.alcor.ipmanager.entity.Ipv4AddrState;\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequest;\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRangeRequest;\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequestBulk;\n-import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrInvalidException;\n-import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrRangeInvalidException;\n-import com.futurewei.alcor.ipmanager.http.status.Ipv4AddrStateInvalidException;\n-import com.futurewei.alcor.ipmanager.http.status.SubnetIdInvalidException;\n-import com.futurewei.alcor.ipmanager.service.Ipv4AddrService;\n-import com.futurewei.alcor.utils.Ipv4AddrUtil;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.*;\n-\n-import java.util.Map;\n-\n-\n-@RestController\n-public class Ipv4AddrController {\n-    @Autowired\n-    Ipv4AddrService ipv4AddrService;\n-\n-    private void checkSubnetId(String subnetId) throws SubnetIdInvalidException {\n-        if (subnetId == null || \"\".equals(subnetId)) {\n-            throw new SubnetIdInvalidException();\n-        }\n-    }\n-\n-    private void checkIpv4Addr(String ipv4Addr) throws Ipv4AddrInvalidException {\n-        if (!Ipv4AddrUtil.formatCheck(ipv4Addr)) {\n-            throw new Ipv4AddrInvalidException();\n-        }\n-    }\n-\n-    private void checkIpv4AddrState(String state) throws Ipv4AddrStateInvalidException {\n-        if (!Ipv4AddrState.ACTIVATED.getState().equals(state) &&\n-                !Ipv4AddrState.DEACTIVATED.getState().equals(state)) {\n-            throw new Ipv4AddrStateInvalidException();\n-        }\n-    }\n-\n-    @PostMapping(\"/v4/ips\")\n-    @ResponseBody\n-    public Ipv4AddrRequest allocateIpv4Addr(@RequestBody Ipv4AddrRequest request) throws Exception {\n-        checkSubnetId(request.getSubnetId());\n-\n-        return ipv4AddrService.allocateIpv4Addr(request);\n-    }\n-\n-    @PostMapping(\"/v4/ips/bulk\")\n-    @ResponseBody\n-    public Ipv4AddrRequestBulk allocateIpv4AddrBulk(@RequestBody Ipv4AddrRequestBulk requestBulk) throws Exception {\n-        for(Ipv4AddrRequest request : requestBulk.getIpv4AddrRequests()) {\n-            checkSubnetId(request.getSubnetId());\n-        }\n-\n-        return ipv4AddrService.allocateIpv4AddrBulk(requestBulk);\n-    }\n-\n-    @PutMapping(\"/v4/ips\")\n-    @ResponseBody\n-    public Ipv4AddrRequest modifyIpv4AddrState(@RequestBody Ipv4AddrRequest request) throws Exception {\n-        checkSubnetId(request.getSubnetId());\n-        checkIpv4Addr(request.getIpv4Addr());\n-        checkIpv4AddrState(request.getState());\n-\n-        return ipv4AddrService.modifyIpv4AddrState(request);\n-    }\n-\n-    @PutMapping(\"/v4/ips/bulk\")\n-    @ResponseBody\n-    public Ipv4AddrRequestBulk modifyIpv4AddrStateBulk(@RequestBody Ipv4AddrRequestBulk requestBulk) throws Exception {\n-        for(Ipv4AddrRequest request : requestBulk.getIpv4AddrRequests()) {\n-            checkSubnetId(request.getSubnetId());\n-            checkSubnetId(request.getIpv4Addr());\n-            checkSubnetId(request.getState());\n-        }\n-\n-        return ipv4AddrService.modifyIpv4AddrStateBulk(requestBulk);\n-    }\n-\n-    @DeleteMapping(\"/v4/ips/{subnet_id}/{ip}\")\n-    @ResponseBody\n-    public Ipv4AddrRequest releaseIpv4Addr(@PathVariable(\"subnet_id\") String subnetId, @PathVariable(\"ip\") String ipv4Addr) throws Exception {\n-        checkSubnetId(subnetId);\n-        checkIpv4Addr(ipv4Addr);\n-\n-        return ipv4AddrService.releaseIpv4Addr(subnetId, ipv4Addr);\n-    }\n-\n-    @DeleteMapping(\"/v4/ips/bulk\")\n-    @ResponseBody\n-    public Ipv4AddrRequestBulk releaseIpv4AddrBulk(@RequestBody Ipv4AddrRequestBulk requestBulk) throws Exception {\n-        for(Ipv4AddrRequest request : requestBulk.getIpv4AddrRequests()) {\n-            checkSubnetId(request.getSubnetId());\n-        }\n-\n-        return ipv4AddrService.releaseIpv4AddrBulk(requestBulk);\n-    }\n-\n-    @GetMapping(\"/v4/ips/{subnet_id}/{ip}\")\n-    @ResponseBody\n-    public Ipv4AddrRequest getIpv4Addr(@PathVariable(\"subnet_id\") String subnetId, @PathVariable(\"ip\") String ipv4Addr) throws Exception {\n-        checkSubnetId(subnetId);\n-        checkIpv4Addr(ipv4Addr);\n-\n-        return ipv4AddrService.getIpv4Addr(subnetId, ipv4Addr);\n-    }\n-\n-    @GetMapping(\"/v4/ips\")\n-    @ResponseBody\n-    public Map listAllocatedIpv4Addr() {\n-        return ipv4AddrService.listAllocatedIpv4Addr();\n-    }\n-\n-    @PostMapping(\"/v4/ips/range\")\n-    @ResponseBody\n-    public Ipv4AddrRangeRequest createIpv4AddrRange(@RequestBody Ipv4AddrRangeRequest request) throws Exception {\n-        checkSubnetId(request.getSubnetId());\n-        checkIpv4Addr(request.getFirstAddr());\n-        checkIpv4Addr(request.getLastAddr());\n-\n-        //Check if first < last\n-        long firstAddrLong = Ipv4AddrUtil.ipToLong(request.getFirstAddr());\n-        long lastAddrLong = Ipv4AddrUtil.ipToLong(request.getLastAddr());\n-        if (firstAddrLong >= lastAddrLong) {\n-            throw new Ipv4AddrRangeInvalidException();\n-        }\n-\n-        return ipv4AddrService.createIpv4AddrRange(request);\n-    }\n-\n-    @DeleteMapping(\"/v4/ips/range/{subnet_id}\")\n-    @ResponseBody\n-    public Ipv4AddrRangeRequest deleteIpv4AddrRange(@PathVariable(\"subnet_id\") String subnetId) throws Exception {\n-        return ipv4AddrService.deleteIpv4AddrRange(subnetId);\n-    }\n-\n-    @GetMapping(\"/v4/ips/range/{subnet_id}\")\n-    @ResponseBody\n-    public Ipv4AddrRangeRequest getIpv4AddrRange(@PathVariable(\"subnet_id\") String subnetId) throws Exception {\n-        checkSubnetId(subnetId);\n-\n-        return ipv4AddrService.getIpv4AddrRange(subnetId);\n-    }\n-\n-    @GetMapping(\"/v4/ips/range\")\n-    @ResponseBody\n-    public Map listIpv4AddrRange() {\n-        return ipv4AddrService.listIpv4AddrRange();\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MTQ1Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r408891456", "body": "Let us plan to add more UTs as well. ", "bodyText": "Let us plan to add more UTs as well.", "bodyHTML": "<p dir=\"auto\">Let us plan to add more UTs as well.</p>", "author": "xieus", "createdAt": "2020-04-15T14:35:33Z", "path": "services/ip_manager/src/test/java/com/futurewei/alcor/ipmanager/IpManagerApplicationTests.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.futurewei.alcor.ipmanager;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class IpManagerApplicationTests {", "originalCommit": "093440a0e001194fadf456943d1a81c7de7dd3d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMTI5Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r410021293", "bodyText": "+1", "author": "xieus", "createdAt": "2020-04-17T06:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MTQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY0Mzk3Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r412643976", "bodyText": "One general comment: We will need to verify the response as well. We could do it later.", "author": "xieus", "createdAt": "2020-04-22T03:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MTQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f6df3f8b15f54428c25655e68c727d07fd1439cd", "changed_code": [{"header": "diff --git a/services/ip_manager/src/test/java/com/futurewei/alcor/ipmanager/IpManagerApplicationTests.java b/services/private_ip_manager/src/test/java/com/futurewei/alcor/privateipmanager/IpManagerApplicationTests.java\nsimilarity index 80%\nrename from services/ip_manager/src/test/java/com/futurewei/alcor/ipmanager/IpManagerApplicationTests.java\nrename to services/private_ip_manager/src/test/java/com/futurewei/alcor/privateipmanager/IpManagerApplicationTests.java\nindex b3018ca1..88fe62e5 100644\n--- a/services/ip_manager/src/test/java/com/futurewei/alcor/ipmanager/IpManagerApplicationTests.java\n+++ b/services/private_ip_manager/src/test/java/com/futurewei/alcor/privateipmanager/IpManagerApplicationTests.java\n", "chunk": "@@ -1,4 +1,4 @@\n-package com.futurewei.alcor.ipmanager;\n+package com.futurewei.alcor.privateipmanager;\n \n import org.junit.jupiter.api.Test;\n import org.springframework.boot.test.context.SpringBootTest;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "changed_code": [{"header": "diff --git a/services/ip_manager/src/test/java/com/futurewei/alcor/ipmanager/IpManagerApplicationTests.java b/services/private_ip_manager/src/test/java/com/futurewei/alcor/privateipmanager/PrivateIpManagerApplicationTests.java\nsimilarity index 64%\nrename from services/ip_manager/src/test/java/com/futurewei/alcor/ipmanager/IpManagerApplicationTests.java\nrename to services/private_ip_manager/src/test/java/com/futurewei/alcor/privateipmanager/PrivateIpManagerApplicationTests.java\nindex b3018ca1..60b27edb 100644\n--- a/services/ip_manager/src/test/java/com/futurewei/alcor/ipmanager/IpManagerApplicationTests.java\n+++ b/services/private_ip_manager/src/test/java/com/futurewei/alcor/privateipmanager/PrivateIpManagerApplicationTests.java\n", "chunk": "@@ -1,10 +1,10 @@\n-package com.futurewei.alcor.ipmanager;\n+package com.futurewei.alcor.privateipmanager;\n \n import org.junit.jupiter.api.Test;\n import org.springframework.boot.test.context.SpringBootTest;\n \n @SpringBootTest\n-class IpManagerApplicationTests {\n+class PrivateIpManagerApplicationTests {\n \n     @Test\n     void contextLoads() {\n", "next_change": null}]}, "commits_in_main": [{"oid": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MjQ1MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r408892450", "body": "For IPv4AddrService, I would suggest to split into two layers, service layer and service impl layer.\r\n\r\nService Layer: Show the interface\r\nService Impl Layer: Show the implementation of the interface. This design allows different implementations later on.\r\n\r\nOne example of the above design is SubnetManager:\r\n\r\nhttps://github.com/kevin-zhonghao/alcor/tree/feature/route_manager/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service", "bodyText": "For IPv4AddrService, I would suggest to split into two layers, service layer and service impl layer.\nService Layer: Show the interface\nService Impl Layer: Show the implementation of the interface. This design allows different implementations later on.\nOne example of the above design is SubnetManager:\nhttps://github.com/kevin-zhonghao/alcor/tree/feature/route_manager/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service", "bodyHTML": "<p dir=\"auto\">For IPv4AddrService, I would suggest to split into two layers, service layer and service impl layer.</p>\n<p dir=\"auto\">Service Layer: Show the interface<br>\nService Impl Layer: Show the implementation of the interface. This design allows different implementations later on.</p>\n<p dir=\"auto\">One example of the above design is SubnetManager:</p>\n<p dir=\"auto\"><a href=\"https://github.com/kevin-zhonghao/alcor/tree/feature/route_manager/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service\">https://github.com/kevin-zhonghao/alcor/tree/feature/route_manager/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service</a></p>", "author": "xieus", "createdAt": "2020-04-15T14:36:55Z", "path": "services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/service/Ipv4AddrService.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.ipmanager.service;\n+\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequest;\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRangeRequest;\n+import com.futurewei.alcor.ipmanager.entity.Ipv4AddrState;\n+import com.futurewei.alcor.ipmanager.entity.Ipv4AddrAlloc;\n+import com.futurewei.alcor.ipmanager.entity.Ipv4AddrRange;\n+import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequestBulk;\n+import com.futurewei.alcor.ipmanager.http.status.*;\n+import com.futurewei.alcor.ipmanager.repo.Ipv4AddrRangeRepo;\n+import com.futurewei.alcor.ipmanager.repo.Ipv4AddrRepo;\n+import com.futurewei.alcor.utils.Ipv4AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+\n+@Service\n+public class Ipv4AddrService {", "originalCommit": "093440a0e001194fadf456943d1a81c7de7dd3d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6df3f8b15f54428c25655e68c727d07fd1439cd", "changed_code": [{"header": "diff --git a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/service/Ipv4AddrService.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/service/implement/Ipv4AddrServiceImpl.java\nsimilarity index 94%\nrename from services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/service/Ipv4AddrService.java\nrename to services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/service/implement/Ipv4AddrServiceImpl.java\nindex 17ae3e0b..3d214fa9 100644\n--- a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/service/Ipv4AddrService.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/service/implement/Ipv4AddrServiceImpl.java\n", "chunk": "@@ -36,8 +37,8 @@ import java.util.stream.Collectors;\n \n \n @Service\n-public class Ipv4AddrService {\n-    private static final Logger LOG = LoggerFactory.getLogger(Ipv4AddrService.class);\n+public class Ipv4AddrServiceImpl implements Ipv4AddrService {\n+    private static final Logger LOG = LoggerFactory.getLogger(Ipv4AddrServiceImpl.class);\n \n     @Autowired\n     Ipv4AddrRepo ipv4AddrRepo;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "changed_code": [{"header": "diff --git a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/service/Ipv4AddrService.java b/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/service/Ipv4AddrService.java\ndeleted file mode 100644\nindex 17ae3e0b..00000000\n--- a/services/ip_manager/src/main/java/com/futurewei/alcor/ipmanager/service/Ipv4AddrService.java\n+++ /dev/null\n", "chunk": "@@ -1,420 +0,0 @@\n-/*\n-Copyright 2019 The Alcor Authors.\n-\n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License.\n-        You may obtain a copy of the License at\n-\n-        http://www.apache.org/licenses/LICENSE-2.0\n-\n-        Unless required by applicable law or agreed to in writing, software\n-        distributed under the License is distributed on an \"AS IS\" BASIS,\n-        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-        See the License for the specific language governing permissions and\n-        limitations under the License.\n-*/\n-\n-package com.futurewei.alcor.ipmanager.service;\n-\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequest;\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRangeRequest;\n-import com.futurewei.alcor.ipmanager.entity.Ipv4AddrState;\n-import com.futurewei.alcor.ipmanager.entity.Ipv4AddrAlloc;\n-import com.futurewei.alcor.ipmanager.entity.Ipv4AddrRange;\n-import com.futurewei.alcor.ipmanager.http.Ipv4AddrRequestBulk;\n-import com.futurewei.alcor.ipmanager.http.status.*;\n-import com.futurewei.alcor.ipmanager.repo.Ipv4AddrRangeRepo;\n-import com.futurewei.alcor.ipmanager.repo.Ipv4AddrRepo;\n-import com.futurewei.alcor.utils.Ipv4AddrUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n-\n-@Service\n-public class Ipv4AddrService {\n-    private static final Logger LOG = LoggerFactory.getLogger(Ipv4AddrService.class);\n-\n-    @Autowired\n-    Ipv4AddrRepo ipv4AddrRepo;\n-\n-    @Autowired\n-    Ipv4AddrRangeRepo ipv4AddrRangeRepo;\n-\n-    private List<String> getRangeAvailableIps(Ipv4AddrRange ipv4AddrRange) {\n-        List<String> availableIps = new ArrayList<>();\n-\n-        Set<String> rangeIps = new HashSet<>();\n-\n-        long firsAddrLong = Ipv4AddrUtil.ipToLong(ipv4AddrRange.getFirstAddr());\n-        long lastAddrLong = Ipv4AddrUtil.ipToLong(ipv4AddrRange.getLastAddr());\n-\n-        long i = firsAddrLong;\n-        while (i <= lastAddrLong) {\n-            rangeIps.add(Ipv4AddrUtil.longToIp(i));\n-            i++;\n-        }\n-\n-        String subnetId = ipv4AddrRange.getSubnetId();\n-        Map<String, Ipv4AddrAlloc> ipv4AddressAllocMap = ipv4AddrRepo.findAllItems();\n-\n-        Set<String> allocatedIps = ipv4AddressAllocMap.values().stream()\n-                .filter(alloc -> alloc.getSubnetId().equals(subnetId))\n-                .map(alloc -> alloc.getIpv4Addr())\n-                .collect(Collectors.toSet());\n-\n-        if (allocatedIps.size() > (lastAddrLong - firsAddrLong)) {\n-            return availableIps;\n-        }\n-\n-        availableIps = rangeIps.stream()\n-                .filter(ip -> !allocatedIps.contains(ip))\n-                .collect(Collectors.toList());\n-\n-        return availableIps;\n-    }\n-\n-    public Ipv4AddrRequest allocateIpv4Addr(Ipv4AddrRequest request) throws Exception {\n-        LOG.debug(\"Allocate ipv4 address, request: {}\", request);\n-\n-        Ipv4AddrRange ipv4AddrRange = ipv4AddrRangeRepo.findItem(request.getSubnetId());\n-        if (ipv4AddrRange == null) {\n-            LOG.error(\"Allocate ipv4 address failed: Ipv4 address range not found\");\n-            throw new Ipv4AddrRangeNotFoundException();\n-        }\n-\n-        List<String> availableIps = getRangeAvailableIps(ipv4AddrRange);\n-        if (availableIps.size() == 0) {\n-            LOG.error(\"Allocate ipv4 address failed: No available ipv4 address\");\n-            throw new Ipv4AddrNotEnoughException();\n-        }\n-\n-        int index = new Random().ints(0, (availableIps.size()))\n-                .limit(1).findFirst().getAsInt();\n-\n-        String ipv4Addr = availableIps.get(index);\n-\n-        Ipv4AddrAlloc ipv4AddrAlloc = new Ipv4AddrAlloc();\n-        ipv4AddrAlloc.setSubnetId(request.getSubnetId());\n-        ipv4AddrAlloc.setIpv4Addr(ipv4Addr);\n-        ipv4AddrAlloc.setState(Ipv4AddrState.ACTIVATED.getState());\n-\n-        ipv4AddrRepo.addItem(ipv4AddrAlloc);\n-        String key = ipv4AddrAlloc.getSubnetId() + ipv4AddrAlloc.getIpv4Addr();\n-        if (ipv4AddrRepo.findItem(key) == null) {\n-            LOG.error(\"Allocate ipv4 address failed: Internal db operation error\");\n-            throw new InternalDbOperationException();\n-        }\n-\n-        LOG.info(\"Allocate ipv4 address success, ipv4AddrAlloc: {}\", ipv4AddrAlloc);\n-\n-        request.setIpv4Addr(ipv4Addr);\n-        request.setState(Ipv4AddrState.ACTIVATED.getState());\n-\n-        return request;\n-    }\n-\n-    private List<Ipv4AddrRequest> allocateIpv4AddrFromRange(String subnetId, long requestNum) {\n-        List<Ipv4AddrRequest> ipv4AddrRequests = new ArrayList<>();\n-\n-        Ipv4AddrRange ipv4AddrRange = ipv4AddrRangeRepo.findItem(subnetId);\n-        if (ipv4AddrRange == null) {\n-            LOG.warn(\"Allocate ipv4 address from range failed: Ipv4 address range not found\");\n-            return ipv4AddrRequests;\n-        }\n-\n-        List<String> availableIps = getRangeAvailableIps(ipv4AddrRange);\n-\n-        if (availableIps.size() == 0) {\n-            LOG.warn(\"Allocate ipv4 address from range failed: No available ipv4 address\");\n-            return ipv4AddrRequests;\n-        }\n-\n-        for (String ipv4Addr: availableIps) {\n-            if (requestNum <= 0) {\n-                break;\n-            }\n-\n-            Ipv4AddrAlloc ipv4AddrAlloc = new Ipv4AddrAlloc();\n-            ipv4AddrAlloc.setSubnetId(subnetId);\n-            ipv4AddrAlloc.setIpv4Addr(ipv4Addr);\n-            ipv4AddrAlloc.setState(Ipv4AddrState.ACTIVATED.getState());\n-\n-            ipv4AddrRepo.addItem(ipv4AddrAlloc);\n-            if (ipv4AddrRepo.findItem(subnetId + ipv4Addr) == null) {\n-                LOG.warn(\"Allocate ipv4 address from range failed: Internal db operation error\");\n-                break;\n-            }\n-\n-            Ipv4AddrRequest ipv4AddrRequest = new Ipv4AddrRequest();\n-            ipv4AddrRequest.setSubnetId(subnetId);\n-            ipv4AddrRequest.setIpv4Addr(ipv4Addr);\n-            ipv4AddrRequest.setState(Ipv4AddrState.ACTIVATED.getState());\n-            ipv4AddrRequests.add(ipv4AddrRequest);\n-\n-            requestNum--;\n-        }\n-\n-        return ipv4AddrRequests;\n-    }\n-\n-    public Ipv4AddrRequestBulk allocateIpv4AddrBulk(Ipv4AddrRequestBulk requestBulk) {\n-        LOG.debug(\"Allocate ipv4 address bulk, requestBulk: {}\", requestBulk);\n-\n-        Map<String, Integer> subnetAddrNumMap = new HashMap<>();\n-        List<Ipv4AddrRequest> ipv4AddrRequests = new ArrayList<>();\n-\n-        for (Ipv4AddrRequest request : requestBulk.getIpv4AddrRequests()) {\n-            Integer num = 1;\n-\n-            if (subnetAddrNumMap.containsKey(request.getSubnetId())) {\n-                num = subnetAddrNumMap.get(request.getSubnetId()) + 1;\n-            }\n-\n-            subnetAddrNumMap.put(request.getSubnetId(), num);\n-        }\n-\n-        for (Map.Entry<String, Integer> entry: subnetAddrNumMap.entrySet()) {\n-            ipv4AddrRequests.addAll(allocateIpv4AddrFromRange(entry.getKey(), entry.getValue()));\n-        }\n-\n-        requestBulk.setIpv4AddrRequests(ipv4AddrRequests);\n-\n-        LOG.info(\"Allocate ipv4 address bulk done, requestBulk: {}\", requestBulk);\n-\n-        return requestBulk;\n-    }\n-\n-    public Ipv4AddrRequest modifyIpv4AddrState(Ipv4AddrRequest request) throws Exception {\n-        LOG.debug(\"Modify ipv4 address state, request: {}\", request);\n-\n-        String key = request.getSubnetId() + request.getIpv4Addr();\n-\n-        Ipv4AddrAlloc ipv4AddrAlloc = ipv4AddrRepo.findItem(key);\n-        if (ipv4AddrAlloc == null) {\n-            LOG.warn(\"Modify ipv4 address state failed: Ipv4 address allocation not found\");\n-            throw new Ipv4AddrAllocNotFoundException();\n-        }\n-\n-        if (!request.getState().equals(ipv4AddrAlloc.getState())) {\n-            ipv4AddrAlloc.setState(request.getState());\n-            ipv4AddrRepo.addItem(ipv4AddrAlloc);\n-\n-            ipv4AddrAlloc = ipv4AddrRepo.findItem(key);\n-            if (ipv4AddrAlloc == null || !request.getState().equals(ipv4AddrAlloc.getState())) {\n-                LOG.warn(\"Modify ipv4 address state failed: Internal db operation error\");\n-                throw new InternalDbOperationException();\n-            }\n-        }\n-\n-        LOG.info(\"Modify ipv4 address state success, request: {}\", request);\n-\n-        return request;\n-    }\n-\n-    public Ipv4AddrRequestBulk modifyIpv4AddrStateBulk(Ipv4AddrRequestBulk requestBulk) {\n-        LOG.debug(\"Modify ipv4 address state bulk, requestBulk: {}\", requestBulk);\n-\n-        List<Ipv4AddrRequest> ipv4AddrRequests = new ArrayList<>();\n-        for (Ipv4AddrRequest request: requestBulk.getIpv4AddrRequests()) {\n-            try {\n-                ipv4AddrRequests.add(modifyIpv4AddrState(request));\n-            } catch (Exception e) {\n-                LOG.warn(\"Modify ipv4 address state failed, request: {}\", request);\n-            }\n-        }\n-\n-        requestBulk.setIpv4AddrRequests(ipv4AddrRequests);\n-\n-        LOG.info(\"Modify ipv4 address state bulk done, requestBulk: {}\", requestBulk);\n-\n-        return requestBulk;\n-    }\n-\n-    public Ipv4AddrRequest releaseIpv4Addr(String subnetId, String ipv4Addr) throws Exception {\n-        LOG.debug(\"Release ipv4 address, ipv4Addr: {}\", ipv4Addr);\n-\n-        String key = subnetId + ipv4Addr;\n-\n-        Ipv4AddrAlloc ipv4AddrAlloc = ipv4AddrRepo.findItem(key);\n-        if (ipv4AddrAlloc == null) {\n-            LOG.warn(\"Release ipv4 address failed: Ipv4 address allocation not found\");\n-            throw new Ipv4AddrAllocNotFoundException();\n-        }\n-\n-        ipv4AddrRepo.deleteItem(key);\n-\n-        Ipv4AddrRequest result = new Ipv4AddrRequest();\n-        result.setSubnetId(ipv4AddrAlloc.getSubnetId());\n-        result.setIpv4Addr(ipv4AddrAlloc.getIpv4Addr());\n-        result.setState(Ipv4AddrState.FREE.getState());\n-\n-        LOG.info(\"Release ipv4 address success, ipv4AddrAlloc: {}\", ipv4AddrAlloc);\n-\n-        return result;\n-    }\n-\n-    public Ipv4AddrRequestBulk releaseIpv4AddrBulk(Ipv4AddrRequestBulk requestBulk) {\n-        LOG.debug(\"Release ipv4 address bulk, requestBulk: {}\", requestBulk);\n-\n-        List<Ipv4AddrRequest> ipv4AddrRequests = new ArrayList<>();\n-        for (Ipv4AddrRequest request: requestBulk.getIpv4AddrRequests()) {\n-            try {\n-                ipv4AddrRequests.add(releaseIpv4Addr(request.getSubnetId(), request.getIpv4Addr()));\n-            } catch (Exception e) {\n-                LOG.warn(\"Release ipv4 address failed, request: {}\", request);\n-            }\n-        }\n-\n-        requestBulk.setIpv4AddrRequests(ipv4AddrRequests);\n-\n-        LOG.info(\"Release ipv4 address bulk done, requestBulk: {}\", requestBulk);\n-\n-        return requestBulk;\n-    }\n-\n-    public Ipv4AddrRequest getIpv4Addr(String subnetId, String ipv4Addr) throws Exception {\n-        LOG.debug(\"Get ipv4 address, subnetId: {}, ipv4Addr: {}\", subnetId, ipv4Addr);\n-\n-        String key = subnetId + ipv4Addr;\n-        Ipv4AddrAlloc ipv4AddrAlloc = ipv4AddrRepo.findItem(key);\n-        if (ipv4AddrAlloc == null) {\n-            Ipv4AddrRange ipv4AddrRange = ipv4AddrRangeRepo.findItem(subnetId);\n-            if (ipv4AddrRange == null) {\n-                LOG.warn(\"Get ipv4 address failed: Ipv4 address not found\");\n-                throw new Ipv4AddrNotFoundException();\n-            }\n-\n-            long ipv4AddrLong = Ipv4AddrUtil.ipToLong(ipv4Addr);\n-            long firstAddrLong = Ipv4AddrUtil.ipToLong(ipv4AddrRange.getFirstAddr());\n-            long lastAddrLong = Ipv4AddrUtil.ipToLong(ipv4AddrRange.getLastAddr());\n-            if (ipv4AddrLong < firstAddrLong || ipv4AddrLong > lastAddrLong) {\n-                LOG.warn(\"Get ipv4 address failed: Ipv4 address not found\");\n-                throw new Ipv4AddrNotFoundException();\n-            }\n-        }\n-\n-        Ipv4AddrRequest result = new Ipv4AddrRequest();\n-\n-        if (ipv4AddrAlloc != null) {\n-            result.setSubnetId(ipv4AddrAlloc.getSubnetId());\n-            result.setIpv4Addr(ipv4AddrAlloc.getIpv4Addr());\n-            result.setState(ipv4AddrAlloc.getState());\n-        } else {\n-            result.setSubnetId(subnetId);\n-            result.setIpv4Addr(ipv4Addr);\n-            result.setState(Ipv4AddrState.FREE.getState());\n-        }\n-\n-        LOG.info(\"Get ipv4 address success, result: {}\", result);\n-\n-        return result;\n-    }\n-\n-    public Map listAllocatedIpv4Addr() {\n-        LOG.debug(\"List ipv4 address\");\n-\n-        Map<String, Ipv4AddrAlloc> ipv4AddrMap = ipv4AddrRepo.findAllItems();\n-\n-        Map<String, Ipv4AddrRequest> result = new HashMap<>();\n-        ipv4AddrMap.forEach((k,v) -> {\n-            Ipv4AddrRequest ipv4Addr = new Ipv4AddrRequest();\n-            ipv4Addr.setSubnetId(v.getSubnetId());\n-            ipv4Addr.setIpv4Addr(v.getIpv4Addr());\n-            ipv4Addr.setState(v.getState().toString());\n-            result.put(k, ipv4Addr);\n-        });\n-\n-        LOG.info(\"List ipv4 address success, result: {}\", result);\n-\n-        return result;\n-    }\n-\n-    public Ipv4AddrRangeRequest createIpv4AddrRange(Ipv4AddrRangeRequest request) throws Exception {\n-        LOG.debug(\"Create ipv4 address range, request: {}\", request);\n-\n-        if (ipv4AddrRangeRepo.findItem(request.getSubnetId()) != null) {\n-            LOG.warn(\"Create ipv4 address range failed: Ipv4AddressRange already exists\");\n-            throw new Ipv4AddrRangeExistException();\n-        }\n-\n-        Ipv4AddrRange ipv4AddrRange = new Ipv4AddrRange();\n-        ipv4AddrRange.setSubnetId(request.getSubnetId());\n-        ipv4AddrRange.setFirstAddr(request.getFirstAddr());\n-        ipv4AddrRange.setLastAddr(request.getLastAddr());\n-\n-        ipv4AddrRangeRepo.addItem(ipv4AddrRange);\n-\n-        ipv4AddrRange = ipv4AddrRangeRepo.findItem(request.getSubnetId());\n-        if (ipv4AddrRange == null) {\n-            LOG.warn(\"Create ipv4 address range failed: Internal db operation error\");\n-            throw new InternalDbOperationException();\n-        }\n-\n-        LOG.info(\"Create ipv4 address range success, ipv4AddrRange: {}\", ipv4AddrRange);\n-\n-        return request;\n-    }\n-\n-    public Ipv4AddrRangeRequest deleteIpv4AddrRange(String subnetId) throws Exception {\n-        LOG.debug(\"Delete ipv4 address range, subnetId: {}\", subnetId);\n-\n-        Ipv4AddrRange ipv4AddrRange = ipv4AddrRangeRepo.findItem(subnetId);\n-        if (ipv4AddrRange == null) {\n-            LOG.warn(\"Delete ipv4 address range failed: Ipv4 address range not found\");\n-            throw new Ipv4AddrRangeNotFoundException();\n-        }\n-\n-        ipv4AddrRangeRepo.deleteItem(subnetId);\n-\n-        Ipv4AddrRangeRequest request = new Ipv4AddrRangeRequest();\n-        request.setSubnetId(ipv4AddrRange.getSubnetId());\n-        request.setFirstAddr(ipv4AddrRange.getFirstAddr());\n-        request.setLastAddr(ipv4AddrRange.getLastAddr());\n-\n-        LOG.info(\"Delete ipv4 address range success, request: {}\", request);\n-\n-        return request;\n-    }\n-\n-    public Ipv4AddrRangeRequest getIpv4AddrRange(String subnetId) throws Exception {\n-        LOG.debug(\"Get ipv4 address range, subnetId: {}\", subnetId);\n-\n-        Ipv4AddrRange ipv4AddrRange = ipv4AddrRangeRepo.findItem(subnetId);\n-        if (ipv4AddrRange == null) {\n-            throw new Ipv4AddrRangeNotFoundException();\n-        }\n-\n-        LOG.info(\"Get ipv4 address range success, ipv4AddressRange: {}\", ipv4AddrRange);\n-\n-        Ipv4AddrRangeRequest result = new Ipv4AddrRangeRequest();\n-        result.setSubnetId(ipv4AddrRange.getSubnetId());\n-        result.setFirstAddr(ipv4AddrRange.getFirstAddr());\n-        result.setLastAddr(ipv4AddrRange.getLastAddr());\n-\n-        return result;\n-    }\n-\n-    public Map listIpv4AddrRange() {\n-        LOG.debug(\"List ipv4 address range\");\n-\n-        Map<String, Ipv4AddrRange> ipv4AddrRangeMap = ipv4AddrRangeRepo.findAllItems();\n-\n-        Map<String, Ipv4AddrRangeRequest> result = new HashMap<>();\n-        ipv4AddrRangeMap.forEach((k,v) -> {\n-            Ipv4AddrRangeRequest range = new Ipv4AddrRangeRequest();\n-            range.setSubnetId(v.getSubnetId());\n-            range.setFirstAddr(v.getFirstAddr());\n-            range.setLastAddr(v.getLastAddr());\n-            result.put(k, range);\n-        });\n-\n-        LOG.info(\"List ipv4 address range success, result: {}\", result);\n-\n-        return result;\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "message": "Merge commit", "committedDate": null}]}, {"oid": "f6df3f8b15f54428c25655e68c727d07fd1439cd", "url": "https://github.com/futurewei-cloud/alcor/commit/f6df3f8b15f54428c25655e68c727d07fd1439cd", "message": "Change the microservice name ip_manager to private_ip_manager", "committedDate": "2020-04-16T04:33:21Z", "type": "commit"}, {"oid": "f9993581f8f4dfeb5862adeceb6c2bf1cca253e4", "url": "https://github.com/futurewei-cloud/alcor/commit/f9993581f8f4dfeb5862adeceb6c2bf1cca253e4", "message": "design doc for private ip manager", "committedDate": "2020-04-16T09:33:11Z", "type": "commit"}, {"oid": "22184e601a8b5b64a3c4dec5d33d36554f4e4047", "url": "https://github.com/futurewei-cloud/alcor/commit/22184e601a8b5b64a3c4dec5d33d36554f4e4047", "message": "rename IpManagerApplication.java to PrivateIpManagerApplication.java", "committedDate": "2020-04-17T01:58:24Z", "type": "commit"}, {"oid": "652e6122f517cffecfa66993d2e20e1bf13282ff", "url": "https://github.com/futurewei-cloud/alcor/commit/652e6122f517cffecfa66993d2e20e1bf13282ff", "message": "modify ip allocation algorithm", "committedDate": "2020-04-18T10:07:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc3OTAxMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r410779010", "body": "Let us add a section on the design doc about the allocation algorithm :-)", "bodyText": "Let us add a section on the design doc about the allocation algorithm :-)", "bodyHTML": "<p dir=\"auto\">Let us add a section on the design doc about the allocation algorithm :-)</p>", "author": "xieus", "createdAt": "2020-04-19T00:25:37Z", "path": "services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/Ipv4AddrAllocator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.privateipmanager.allocator;\n+\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrNotEnoughException;\n+import com.futurewei.alcor.privateipmanager.utils.Ipv4AddrUtil;\n+\n+import java.util.*;\n+\n+public class Ipv4AddrAllocator implements IpAddrAllocator {", "originalCommit": "652e6122f517cffecfa66993d2e20e1bf13282ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0MjAzOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r411042038", "bodyText": "okay\uff0cI will do that.", "author": "chenpiaoping", "createdAt": "2020-04-20T01:40:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc3OTAxMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "message": "Merge commit", "committedDate": null}, {"oid": "bfc9d9d0ab3ff7bb75f095ef6aa17592f50a9c13", "committedDate": "2020-05-14 08:44:10 -0700", "message": "[Microservice] Port Manager (#180)"}, {"oid": "1ca1d915e2bb4dcab2081a9cb6b0538749adb4c1", "committedDate": "2021-04-10 10:31:46 -0700", "message": "[License] Fill legal statements (#592)"}, {"oid": "d040632057f4d09a2268503c48398d134d7cabcd", "committedDate": "2021-10-22 14:14:30 -0700", "message": "Improve caching performance for port/ip/vpc manager (#690)"}]}, {"oid": "9d6b6cec936aa2766490eebff725e00fac927196", "url": "https://github.com/futurewei-cloud/alcor/commit/9d6b6cec936aa2766490eebff725e00fac927196", "message": "add some test cases for private ip manager", "committedDate": "2020-04-19T00:38:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4MDMzNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r410780334", "body": "The key here is the subnet Id. How about multiple ip ranges per subnet?", "bodyText": "The key here is the subnet Id. How about multiple ip ranges per subnet?", "bodyHTML": "<p dir=\"auto\">The key here is the subnet Id. How about multiple ip ranges per subnet?</p>", "author": "xieus", "createdAt": "2020-04-19T00:35:12Z", "path": "services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.privateipmanager.repo;\n+\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.repo.ICacheRepository;\n+import com.futurewei.alcor.privateipmanager.entity.IpAddrAlloc;\n+import com.futurewei.alcor.privateipmanager.entity.IpAddrRange;\n+import com.futurewei.alcor.privateipmanager.entity.IpAddrRangeRequest;\n+import com.futurewei.alcor.privateipmanager.exception.InternalDbOperationException;\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrRangeNotFoundException;\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrRangeExistException;\n+import com.futurewei.alcor.privateipmanager.exception.SubnetNotFoundException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Repository;\n+import com.futurewei.alcor.common.db.CacheException;\n+import javax.annotation.PostConstruct;\n+import java.util.*;\n+\n+@ComponentScan(value=\"com.futurewei.alcor.common.db\")\n+@Repository\n+public class IpAddrRangeRepo implements ICacheRepository<IpAddrRange> {\n+    private static final Logger LOG = LoggerFactory.getLogger(IpAddrRangeRepo.class);\n+    private ICache<String, IpAddrRange> ipAddrRangeCache;", "originalCommit": "652e6122f517cffecfa66993d2e20e1bf13282ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzNzU1Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r411037557", "bodyText": "I think an ip range is actually a subnet , maybe i should called it rangeId instead of subnetId?", "author": "chenpiaoping", "createdAt": "2020-04-20T01:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4MDMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3Nzc2OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r411877769", "bodyText": "Hmm, a subnet could have at least one Ipv4 range and one Ipv6 range.", "author": "xieus", "createdAt": "2020-04-21T05:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4MDMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MjY3NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r411882675", "bodyText": "Use RangeId as the key sounds better. We could add an ID field in the IpAddrRange class.", "author": "xieus", "createdAt": "2020-04-21T05:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4MDMzNA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "b6bcc078480884686b51a176ec7befa3fff2529e", "changed_code": [{"header": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\nindex 9ca0f5af..cde24b40 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n", "chunk": "@@ -38,7 +38,7 @@ import java.util.*;\n \n @ComponentScan(value=\"com.futurewei.alcor.common.db\")\n @Repository\n-public class IpAddrRangeRepo implements ICacheRepository<IpAddrRange> {\n+public class  IpAddrRangeRepo implements ICacheRepository<IpAddrRange> {\n     private static final Logger LOG = LoggerFactory.getLogger(IpAddrRangeRepo.class);\n     private ICache<String, IpAddrRange> ipAddrRangeCache;\n \n", "next_change": {"commit": "bfc9d9d0ab3ff7bb75f095ef6aa17592f50a9c13", "changed_code": [{"header": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\nindex cde24b40..d603ebc1 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n", "chunk": "@@ -41,10 +39,12 @@ import java.util.*;\n public class  IpAddrRangeRepo implements ICacheRepository<IpAddrRange> {\n     private static final Logger LOG = LoggerFactory.getLogger(IpAddrRangeRepo.class);\n     private ICache<String, IpAddrRange> ipAddrRangeCache;\n+    private ICache<String, VpcIpRange> vpcIpRangeCache;\n \n     @Autowired\n     public IpAddrRangeRepo(CacheFactory cacheFactory) {\n         ipAddrRangeCache = cacheFactory.getCache(IpAddrRange.class);\n+        vpcIpRangeCache = cacheFactory.getCache(VpcIpRange.class);\n     }\n \n     @PostConstruct\n", "next_change": {"commit": "0b5c23de435d8815d88c0bf41d5399f892ce70a4", "changed_code": [{"header": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\nindex d603ebc1..f5ab91ca 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n", "chunk": "@@ -47,6 +47,12 @@ public class  IpAddrRangeRepo implements ICacheRepository<IpAddrRange> {\n         vpcIpRangeCache = cacheFactory.getCache(VpcIpRange.class);\n     }\n \n+    public IpAddrRangeRepo(ICache<String, IpAddrRange> ipAddrRangeCache,\n+                           ICache<String, VpcIpRange> vpcIpRangeCache) {\n+        this.ipAddrRangeCache = ipAddrRangeCache;\n+        this.vpcIpRangeCache = vpcIpRangeCache;\n+    }\n+\n     @PostConstruct\n     private void init() {\n         LOG.info(\"IpRangeRepository init done\");\n", "next_change": {"commit": "76707cfdcea91bfcb2c7b34815a3892a03309dfd", "changed_code": [{"header": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\nindex f5ab91ca..85dc6cbc 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n", "chunk": "@@ -53,12 +58,17 @@ public class  IpAddrRangeRepo implements ICacheRepository<IpAddrRange> {\n         this.vpcIpRangeCache = vpcIpRangeCache;\n     }\n \n+    private String getIpAddrCacheName(String suffix) {\n+        return IP_ADDR_CACHE_NAME_PREFIX + suffix;\n+    }\n+\n     @PostConstruct\n     private void init() {\n         LOG.info(\"IpRangeRepository init done\");\n     }\n \n     @Override\n+    @DurationStatistics\n     public synchronized IpAddrRange findItem(String rangeId) {\n         try {\n             return ipAddrRangeCache.get(rangeId);\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "message": "Merge commit", "committedDate": null}, {"oid": "b6bcc078480884686b51a176ec7befa3fff2529e", "committedDate": "2020-04-23 11:37:33 -0700", "message": "[Micro-service] Subnet Manager - implementation and deployment in K8s (#154)"}, {"oid": "bfc9d9d0ab3ff7bb75f095ef6aa17592f50a9c13", "committedDate": "2020-05-14 08:44:10 -0700", "message": "[Microservice] Port Manager (#180)"}, {"oid": "0b5c23de435d8815d88c0bf41d5399f892ce70a4", "committedDate": "2020-07-01 00:00:10 -0700", "message": "[Private IP Manager] Add UTs to Cover IpAddrRangeRepo interfaces (#272)"}, {"oid": "0276c273e91de79e6b603687810afa730e5a4117", "committedDate": "2020-07-02 21:10:52 -0700", "message": "[AlcorLib] Support Multi-Params Query (#252)"}, {"oid": "baf938076df6372ee8a9137d1ee6d70c63e2a6ae", "committedDate": "2020-08-03 21:40:08 -0700", "message": "[Database] Refactor DB Component Scan (#337)"}, {"oid": "76707cfdcea91bfcb2c7b34815a3892a03309dfd", "committedDate": "2020-08-10 16:48:01 -0700", "message": "[Microservice] Port Manager 2.0 Implementation (#301)"}, {"oid": "bc818bdc691af9cbfd62d29bc6fa873cb93a115e", "committedDate": "2021-01-07 09:50:12 -0800", "message": "Private IP Manager to Support IP Address Replacement (#520)"}, {"oid": "1ca1d915e2bb4dcab2081a9cb6b0538749adb4c1", "committedDate": "2021-04-10 10:31:46 -0700", "message": "[License] Fill legal statements (#592)"}, {"oid": "2cc0269dd9102c4d2c9a6c37397e7f4a5b3dbfed", "committedDate": "2021-09-10 14:26:13 -0700", "message": "Fix race condition for subnet, port and ip APIs (#685)"}, {"oid": "d040632057f4d09a2268503c48398d134d7cabcd", "committedDate": "2021-10-22 14:14:30 -0700", "message": "Improve caching performance for port/ip/vpc manager (#690)"}, {"oid": "7f19a4e6f38a4275e19d6888b320badb4c3aa55f", "committedDate": "2021-11-25 13:13:03 -0800", "message": "Improve ip manger performance (#702)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4MTcxNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r410781715", "body": "validate?", "bodyText": "validate?", "bodyHTML": "<p dir=\"auto\">validate?</p>", "author": "xieus", "createdAt": "2020-04-19T00:44:15Z", "path": "services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.privateipmanager.allocator;\n+\n+\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrNotEnoughException;\n+\n+import java.util.List;\n+\n+public interface IpAddrAllocator {\n+\n+    String allocate() throws Exception;\n+\n+    List<String> allocateBulk(int num) throws IpAddrNotEnoughException, Exception;\n+\n+    void release(String ipAddr) throws Exception;\n+\n+    void releaseBulk(List<String> ipAddrList) throws Exception;\n+\n+    boolean valid(String ipv4Addr);", "originalCommit": "9d6b6cec936aa2766490eebff725e00fac927196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzOTY4Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r411039686", "bodyText": "This method checks whether the  ipv4Addr is valid in this ip range, which means greater than or equal to firstAddr and less than or equal to lastAddr.", "author": "chenpiaoping", "createdAt": "2020-04-20T01:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4MTcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3MTE1OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/164#discussion_r411871158", "bodyText": "Correct. I meant to use the verb \"validate\" as the method name to be consistent with other names.", "author": "xieus", "createdAt": "2020-04-21T05:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4MTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "32b31928898fb483831150a3eb515518ee036ef3", "changed_code": [{"header": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\nindex fbc9ff37..e9736a05 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\n", "chunk": "@@ -24,11 +24,11 @@ public interface IpAddrAllocator {\n \n     String allocate() throws Exception;\n \n-    List<String> allocateBulk(int num) throws IpAddrNotEnoughException, Exception;\n+    List<String> allocateBulk(int num) throws Exception;\n \n     void release(String ipAddr) throws Exception;\n \n     void releaseBulk(List<String> ipAddrList) throws Exception;\n \n-    boolean valid(String ipv4Addr);\n+    boolean valid(String ipAddr);\n }\n", "next_change": {"commit": "abf46a5597161288ad8e79a902f085e1caf40d90", "changed_code": [{"header": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\nindex e9736a05..4c5712bc 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\n", "chunk": "@@ -30,5 +30,5 @@ public interface IpAddrAllocator {\n \n     void releaseBulk(List<String> ipAddrList) throws Exception;\n \n-    boolean valid(String ipAddr);\n+    boolean validate(String ipAddr);\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "changed_code": [{"header": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\nindex fbc9ff37..e9300925 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\n", "chunk": "@@ -15,20 +15,17 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n */\n package com.futurewei.alcor.privateipmanager.allocator;\n \n-\n-import com.futurewei.alcor.privateipmanager.exception.IpAddrNotEnoughException;\n-\n import java.util.List;\n \n public interface IpAddrAllocator {\n \n     String allocate() throws Exception;\n \n-    List<String> allocateBulk(int num) throws IpAddrNotEnoughException, Exception;\n+    List<String> allocateBulk(int num) throws Exception;\n \n     void release(String ipAddr) throws Exception;\n \n     void releaseBulk(List<String> ipAddrList) throws Exception;\n \n-    boolean valid(String ipv4Addr);\n+    boolean validate(String ipAddr);\n }\n", "next_change": {"commit": "d040632057f4d09a2268503c48398d134d7cabcd", "changed_code": [{"header": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\nindex e9300925..d7ea4e80 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/allocator/IpAddrAllocator.java\n", "chunk": "@@ -19,10 +19,14 @@ import java.util.List;\n \n public interface IpAddrAllocator {\n \n-    String allocate() throws Exception;\n+    String allocate(String ipAddr) throws Exception;\n \n     List<String> allocateBulk(int num) throws Exception;\n \n+    int getIpIndex(String ip) throws Exception;\n+\n+    String getIp(int index) throws Exception;\n+\n     void release(String ipAddr) throws Exception;\n \n     void releaseBulk(List<String> ipAddrList) throws Exception;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b33be1f8b9b74ac5122b122982bd0feb576b4c82", "message": "Merge commit", "committedDate": null}, {"oid": "bfc9d9d0ab3ff7bb75f095ef6aa17592f50a9c13", "committedDate": "2020-05-14 08:44:10 -0700", "message": "[Microservice] Port Manager (#180)"}, {"oid": "1ca1d915e2bb4dcab2081a9cb6b0538749adb4c1", "committedDate": "2021-04-10 10:31:46 -0700", "message": "[License] Fill legal statements (#592)"}, {"oid": "d040632057f4d09a2268503c48398d134d7cabcd", "committedDate": "2021-10-22 14:14:30 -0700", "message": "Improve caching performance for port/ip/vpc manager (#690)"}]}, {"oid": "32b31928898fb483831150a3eb515518ee036ef3", "url": "https://github.com/futurewei-cloud/alcor/commit/32b31928898fb483831150a3eb515518ee036ef3", "message": "add concurrency handling and IP allocation algorithm to the design doc", "committedDate": "2020-04-20T07:01:40Z", "type": "commit"}, {"oid": "b1d1207e07edc9ceec1fd1510a5889e50753f506", "url": "https://github.com/futurewei-cloud/alcor/commit/b1d1207e07edc9ceec1fd1510a5889e50753f506", "message": "Update private ip manager design doc and add an entry in Toc", "committedDate": "2020-04-21T05:32:03Z", "type": "commit"}, {"oid": "abf46a5597161288ad8e79a902f085e1caf40d90", "url": "https://github.com/futurewei-cloud/alcor/commit/abf46a5597161288ad8e79a902f085e1caf40d90", "message": "rename subnet_id to range_id", "committedDate": "2020-04-21T07:33:15Z", "type": "forcePushed"}, {"oid": "d1a163e62f57fd32080af6c2046a2ec75595bc5f", "url": "https://github.com/futurewei-cloud/alcor/commit/d1a163e62f57fd32080af6c2046a2ec75595bc5f", "message": "rename subnet_id to range_id", "committedDate": "2020-04-21T07:38:43Z", "type": "forcePushed"}, {"oid": "d1a163e62f57fd32080af6c2046a2ec75595bc5f", "url": "https://github.com/futurewei-cloud/alcor/commit/d1a163e62f57fd32080af6c2046a2ec75595bc5f", "message": "rename subnet_id to range_id", "committedDate": "2020-04-21T07:38:43Z", "type": "commit"}, {"oid": "2add9b84f7041615b1fe2bdf690f4d58fd8d5225", "url": "https://github.com/futurewei-cloud/alcor/commit/2add9b84f7041615b1fe2bdf690f4d58fd8d5225", "message": "add ip availability to ip range", "committedDate": "2020-04-21T08:46:21Z", "type": "forcePushed"}, {"oid": "2add9b84f7041615b1fe2bdf690f4d58fd8d5225", "url": "https://github.com/futurewei-cloud/alcor/commit/2add9b84f7041615b1fe2bdf690f4d58fd8d5225", "message": "add ip availability to ip range", "committedDate": "2020-04-21T08:46:21Z", "type": "commit"}, {"oid": "a477e0b4444e4ba503d15a9afcabfc757d220993", "url": "https://github.com/futurewei-cloud/alcor/commit/a477e0b4444e4ba503d15a9afcabfc757d220993", "message": "rename first_addr to first_ip", "committedDate": "2020-04-21T10:04:04Z", "type": "forcePushed"}, {"oid": "a477e0b4444e4ba503d15a9afcabfc757d220993", "url": "https://github.com/futurewei-cloud/alcor/commit/a477e0b4444e4ba503d15a9afcabfc757d220993", "message": "rename first_addr to first_ip", "committedDate": "2020-04-21T10:04:04Z", "type": "commit"}, {"oid": "25bdb42f17b8172f435efa098ec512ed374be9d5", "url": "https://github.com/futurewei-cloud/alcor/commit/25bdb42f17b8172f435efa098ec512ed374be9d5", "message": "Merge branch 'ip_manager' of https://github.com/chenpiaoping/alcor into ip_manager", "committedDate": "2020-04-22T03:21:07Z", "type": "commit"}]}