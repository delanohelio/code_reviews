{"pr_number": 1002, "pr_title": "Add option to download MTAR from url", "pr_author": "radito3", "pr_createdAt": "2020-12-01T11:00:13Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002", "timeline": [{"oid": "4e628f4c2d2de898f4a30903b17b78272b0eee1f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/4e628f4c2d2de898f4a30903b17b78272b0eee1f", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2020-12-10T13:35:25Z", "type": "forcePushed"}, {"oid": "9031a8b6685ab6f7ecc0a3631038e2cb473715e4", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9031a8b6685ab6f7ecc0a3631038e2cb473715e4", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2020-12-15T11:17:49Z", "type": "forcePushed"}, {"oid": "ed270f7c4b2dc3e306b804bd3387184fa1e7d10a", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ed270f7c4b2dc3e306b804bd3387184fa1e7d10a", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-12T13:58:36Z", "type": "forcePushed"}, {"oid": "baaa2537536362c9e090e63b0cecec0452d51853", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/baaa2537536362c9e090e63b0cecec0452d51853", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-15T17:11:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3MjI3NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561872274", "body": "Add the URL to the exception and make sure that the response contains the error message, so that users will be able to see what went wrong.", "bodyText": "Add the URL to the exception and make sure that the response contains the error message, so that users will be able to see what went wrong.", "bodyHTML": "<p dir=\"auto\">Add the URL to the exception and make sure that the response contains the error message, so that users will be able to see what went wrong.</p>", "author": "nictas", "createdAt": "2021-01-21T13:17:35Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 8bf71a0ca..894217299 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -156,11 +158,9 @@ public class FilesApiServiceImpl implements FilesApiService {\n     }\n \n     private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n-        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n-            throw new SLException(\"Invalid URL\");\n-        }\n+        UriUtil.validateUrl(mtarEndpoint);\n         String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n-        WebClient client = new RestUtil().createWebClient(false);\n+        WebClient client = new WebClientFactory().getWebClient();\n \n         ClientResponse response = client.get()\n                                         .uri(decodedUrl)\n", "next_change": {"commit": "39ec22e184282b85f435967e4df4b8370b877ed3", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 894217299..e1dc16835 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -157,18 +154,23 @@ public class FilesApiServiceImpl implements FilesApiService {\n                                     .build();\n     }\n \n-    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint)\n+        throws FileStorageException, IOException, InterruptedException {\n         UriUtil.validateUrl(mtarEndpoint);\n         String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n-        WebClient client = new WebClientFactory().getWebClient();\n+        HttpClient client = HttpClient.newBuilder()\n+                                      //ssl and authentication configuration can be done here\n+                                      .version(HttpClient.Version.HTTP_1_1)\n+                                      .connectTimeout(Duration.ofMinutes(10))\n+                                      .followRedirects(HttpClient.Redirect.NORMAL)\n+                                      .build();\n+\n+        HttpResponse<InputStream> response = client.send(buildFetchArchiveRequest(decodedUrl), HttpResponse.BodyHandlers.ofInputStream());\n \n-        ClientResponse response = client.get()\n-                                        .uri(decodedUrl)\n-                                        .exchange()\n-                                        .block();\n         long fileSize = response.headers()\n-                                .contentLength()\n+                                .firstValueAsLong(\"Content-Length\")\n                                 .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+\n         long maxUploadSize = new Configuration().getMaxUploadSize();\n         if (fileSize > maxUploadSize) {\n             throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n", "next_change": {"commit": "a49596462e0dc628016d178a63d661c795085bb8", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex e1dc16835..58aebf44f 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -154,22 +157,17 @@ public class FilesApiServiceImpl implements FilesApiService {\n                                     .build();\n     }\n \n-    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint)\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String fileUrl)\n         throws FileStorageException, IOException, InterruptedException {\n-        UriUtil.validateUrl(mtarEndpoint);\n-        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n-        HttpClient client = HttpClient.newBuilder()\n-                                      //ssl and authentication configuration can be done here\n-                                      .version(HttpClient.Version.HTTP_1_1)\n-                                      .connectTimeout(Duration.ofMinutes(10))\n-                                      .followRedirects(HttpClient.Redirect.NORMAL)\n-                                      .build();\n+        UriUtil.validateUrl(fileUrl);\n+        String decodedUrl = URLDecoder.decode(fileUrl, StandardCharsets.UTF_8);\n+        HttpClient client = buildHttpClient();\n \n-        HttpResponse<InputStream> response = client.send(buildFetchArchiveRequest(decodedUrl), HttpResponse.BodyHandlers.ofInputStream());\n+        HttpResponse<InputStream> response = client.send(buildFetchFileRequest(decodedUrl), BodyHandlers.ofInputStream());\n \n         long fileSize = response.headers()\n-                                .firstValueAsLong(\"Content-Length\")\n-                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+                                .firstValueAsLong(Constants.CONTENT_LENGTH)\n+                                .orElseThrow(() -> new SLException(Messages.FILE_URL_RESPONSE_DID_NOT_RETURN_CONTENT_LENGTH));\n \n         long maxUploadSize = new Configuration().getMaxUploadSize();\n         if (fileSize > maxUploadSize) {\n", "next_change": null}, {"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex e1dc16835..58aebf44f 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -177,13 +175,22 @@ public class FilesApiServiceImpl implements FilesApiService {\n         }\n \n         String fileName = extractFileName(decodedUrl);\n-        FileUtils.validatePath(fileName);\n+        FileUtils.validateFileHasExtension(fileName);\n         try (InputStream content = createLimitedInputStream(response.body(), maxUploadSize)) {\n             return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n         }\n     }\n \n-    private HttpRequest buildFetchArchiveRequest(String decodedUrl) {\n+    protected HttpClient buildHttpClient() {\n+        return HttpClient.newBuilder()\n+                         //ssl and authentication configuration can be done here\n+                         .version(HttpClient.Version.HTTP_1_1)\n+                         .connectTimeout(Duration.ofMinutes(10))\n+                         .followRedirects(Redirect.NORMAL)\n+                         .build();\n+    }\n+\n+    private HttpRequest buildFetchFileRequest(String decodedUrl) {\n         return HttpRequest.newBuilder()\n                           .GET()\n                           .uri(URI.create(decodedUrl))\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3MzMyMg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561873322", "body": "Wouldn't it be better to call the method `validateUrl` and throw an exception if the URl is invalid, so that the error message shown to the user contains some additional details?", "bodyText": "Wouldn't it be better to call the method validateUrl and throw an exception if the URl is invalid, so that the error message shown to the user contains some additional details?", "bodyHTML": "<p dir=\"auto\">Wouldn't it be better to call the method <code>validateUrl</code> and throw an exception if the URl is invalid, so that the error message shown to the user contains some additional details?</p>", "author": "nictas", "createdAt": "2021-01-21T13:19:00Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java", "diffHunk": "@@ -46,4 +48,14 @@ public static String prettyPrintRoutes(Set<CloudRouteSummary> routes) {\n                      .map(CloudRouteSummary::toUriString)\n                      .collect(Collectors.joining(\", \"));\n     }\n+\n+    public static boolean isValidUrl(String url) {", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "changed_code": [{"header": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java\nindex 569bcc0d8..5df5900a9 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java\n", "chunk": "@@ -49,12 +49,11 @@ public class UriUtil {\n                      .collect(Collectors.joining(\", \"));\n     }\n \n-    public static boolean isValidUrl(String url) {\n+    public static void validateUrl(String url) {\n         try {\n             new URL(url).toURI();\n-            return true;\n         } catch (URISyntaxException | MalformedURLException e) {\n-            return false;\n+            throw new IllegalArgumentException(\"Invalid MTAR endpoint: \" + url, e);\n         }\n     }\n \n", "next_change": {"commit": "a49596462e0dc628016d178a63d661c795085bb8", "changed_code": [{"header": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java\nindex 5df5900a9..bed41b7da 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java\n", "chunk": "@@ -53,7 +54,7 @@ public class UriUtil {\n         try {\n             new URL(url).toURI();\n         } catch (URISyntaxException | MalformedURLException e) {\n-            throw new IllegalArgumentException(\"Invalid MTAR endpoint: \" + url, e);\n+            throw new IllegalArgumentException(MessageFormat.format(Messages.INVALID_URL, url), e);\n         }\n     }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3OTk5OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561879998", "body": "Not sure if this is a good idea. `RestUtil` is more of an internal class for the client facade. It'd be nice to have the option of changing it whenever we want, without having to touch the deploy-service codebase.", "bodyText": "Not sure if this is a good idea. RestUtil is more of an internal class for the client facade. It'd be nice to have the option of changing it whenever we want, without having to touch the deploy-service codebase.", "bodyHTML": "<p dir=\"auto\">Not sure if this is a good idea. <code>RestUtil</code> is more of an internal class for the client facade. It'd be nice to have the option of changing it whenever we want, without having to touch the deploy-service codebase.</p>", "author": "nictas", "createdAt": "2021-01-21T13:29:00Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUwNzc0MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r562507740", "bodyText": "Agreed.\nChanged to WebClientFactory::getWebClient() which is in the deploy-service codebase", "author": "radito3", "createdAt": "2021-01-22T09:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3OTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 8bf71a0ca..894217299 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -156,11 +158,9 @@ public class FilesApiServiceImpl implements FilesApiService {\n     }\n \n     private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n-        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n-            throw new SLException(\"Invalid URL\");\n-        }\n+        UriUtil.validateUrl(mtarEndpoint);\n         String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n-        WebClient client = new RestUtil().createWebClient(false);\n+        WebClient client = new WebClientFactory().getWebClient();\n \n         ClientResponse response = client.get()\n                                         .uri(decodedUrl)\n", "next_change": {"commit": "39ec22e184282b85f435967e4df4b8370b877ed3", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 894217299..e1dc16835 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -157,18 +154,23 @@ public class FilesApiServiceImpl implements FilesApiService {\n                                     .build();\n     }\n \n-    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint)\n+        throws FileStorageException, IOException, InterruptedException {\n         UriUtil.validateUrl(mtarEndpoint);\n         String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n-        WebClient client = new WebClientFactory().getWebClient();\n+        HttpClient client = HttpClient.newBuilder()\n+                                      //ssl and authentication configuration can be done here\n+                                      .version(HttpClient.Version.HTTP_1_1)\n+                                      .connectTimeout(Duration.ofMinutes(10))\n+                                      .followRedirects(HttpClient.Redirect.NORMAL)\n+                                      .build();\n+\n+        HttpResponse<InputStream> response = client.send(buildFetchArchiveRequest(decodedUrl), HttpResponse.BodyHandlers.ofInputStream());\n \n-        ClientResponse response = client.get()\n-                                        .uri(decodedUrl)\n-                                        .exchange()\n-                                        .block();\n         long fileSize = response.headers()\n-                                .contentLength()\n+                                .firstValueAsLong(\"Content-Length\")\n                                 .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+\n         long maxUploadSize = new Configuration().getMaxUploadSize();\n         if (fileSize > maxUploadSize) {\n             throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n", "next_change": {"commit": "a49596462e0dc628016d178a63d661c795085bb8", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex e1dc16835..58aebf44f 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -154,22 +157,17 @@ public class FilesApiServiceImpl implements FilesApiService {\n                                     .build();\n     }\n \n-    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint)\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String fileUrl)\n         throws FileStorageException, IOException, InterruptedException {\n-        UriUtil.validateUrl(mtarEndpoint);\n-        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n-        HttpClient client = HttpClient.newBuilder()\n-                                      //ssl and authentication configuration can be done here\n-                                      .version(HttpClient.Version.HTTP_1_1)\n-                                      .connectTimeout(Duration.ofMinutes(10))\n-                                      .followRedirects(HttpClient.Redirect.NORMAL)\n-                                      .build();\n+        UriUtil.validateUrl(fileUrl);\n+        String decodedUrl = URLDecoder.decode(fileUrl, StandardCharsets.UTF_8);\n+        HttpClient client = buildHttpClient();\n \n-        HttpResponse<InputStream> response = client.send(buildFetchArchiveRequest(decodedUrl), HttpResponse.BodyHandlers.ofInputStream());\n+        HttpResponse<InputStream> response = client.send(buildFetchFileRequest(decodedUrl), BodyHandlers.ofInputStream());\n \n         long fileSize = response.headers()\n-                                .firstValueAsLong(\"Content-Length\")\n-                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+                                .firstValueAsLong(Constants.CONTENT_LENGTH)\n+                                .orElseThrow(() -> new SLException(Messages.FILE_URL_RESPONSE_DID_NOT_RETURN_CONTENT_LENGTH));\n \n         long maxUploadSize = new Configuration().getMaxUploadSize();\n         if (fileSize > maxUploadSize) {\n", "next_change": null}, {"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex e1dc16835..58aebf44f 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -177,13 +175,22 @@ public class FilesApiServiceImpl implements FilesApiService {\n         }\n \n         String fileName = extractFileName(decodedUrl);\n-        FileUtils.validatePath(fileName);\n+        FileUtils.validateFileHasExtension(fileName);\n         try (InputStream content = createLimitedInputStream(response.body(), maxUploadSize)) {\n             return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n         }\n     }\n \n-    private HttpRequest buildFetchArchiveRequest(String decodedUrl) {\n+    protected HttpClient buildHttpClient() {\n+        return HttpClient.newBuilder()\n+                         //ssl and authentication configuration can be done here\n+                         .version(HttpClient.Version.HTTP_1_1)\n+                         .connectTimeout(Duration.ofMinutes(10))\n+                         .followRedirects(Redirect.NORMAL)\n+                         .build();\n+    }\n+\n+    private HttpRequest buildFetchFileRequest(String decodedUrl) {\n         return HttpRequest.newBuilder()\n                           .GET()\n                           .uri(URI.create(decodedUrl))\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4MTU0NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561881544", "body": "Is this the only validation for downloading a bigger MTAR than allowed? From a security PoV, the server could return a Content-Length header with a small value, but proceed to send an enormous MTAR.", "bodyText": "Is this the only validation for downloading a bigger MTAR than allowed? From a security PoV, the server could return a Content-Length header with a small value, but proceed to send an enormous MTAR.", "bodyHTML": "<p dir=\"auto\">Is this the only validation for downloading a bigger MTAR than allowed? From a security PoV, the server could return a Content-Length header with a small value, but proceed to send an enormous MTAR.</p>", "author": "nictas", "createdAt": "2021-01-21T13:31:23Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);\n+\n+        ClientResponse response = client.get()\n+                                        .uri(decodedUrl)\n+                                        .exchange()\n+                                        .block();\n+        long fileSize = response.headers()\n+                                .contentLength()\n+                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+        long maxUploadSize = new Configuration().getMaxUploadSize();\n+        if (fileSize > maxUploadSize) {", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkzNzE1OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r565937159", "bodyText": "Added a LimitedInputStream wrapper to the content stream", "author": "radito3", "createdAt": "2021-01-28T09:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4MTU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 8bf71a0ca..894217299 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -175,31 +175,32 @@ public class FilesApiServiceImpl implements FilesApiService {\n         }\n \n         String fileName = extractFileName(decodedUrl);\n+        FileUtils.validatePath(fileName);\n         try (InputStream content = response.body(this::extractContent)) {\n             return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n         }\n     }\n \n     private String extractFileName(String url) {\n-        int fragmentIdx = url.indexOf('#');\n-        if (fragmentIdx != -1) {\n-            url = url.substring(0, fragmentIdx);\n-        }\n-        int queryIdx = url.indexOf('?');\n-        if (queryIdx != -1) {\n-            url = url.substring(0, queryIdx);\n-        }\n-        int startIdx = url.lastIndexOf('/') + 1;\n-        String fileName = url.substring(startIdx);\n-        if (!FileUtils.isFilenameValid(fileName)) {\n-            throw new SLException(\"Invalid MTAR name\");\n-        }\n-        return fileName;\n+        String[] pathFragments = URI.create(url).getPath().split(\"/\");\n+        //TODO check paths elems length\n+        return pathFragments[pathFragments.length - 1];\n     }\n \n     private InputStream extractContent(ReactiveHttpInputMessage httpResponse, BodyExtractor.Context context) {\n+//        new LimitedInputStream(InputStream.nullInputStream(), maxUploadSize) {\n+//            @Override\n+//            protected void raiseError(long maxSize, long currentSize) throws IOException {\n+//                throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+//            }\n+//        };\n         return httpResponse.getBody()\n-                           .map(dataBuffer -> dataBuffer.asInputStream(true))\n+                           .map(dataBuffer -> {\n+                               LOGGER.error(\"[custom debug] data buffer impl: \" + dataBuffer.toString());\n+                               InputStream is = dataBuffer.asInputStream(true);\n+                               LOGGER.error(\"[custom debug] input stream impl: \" + is.toString());\n+                               return is;\n+                           })\n                            .collectList()\n                            .map(list -> new SequenceInputStream(Collections.enumeration(list)))\n                            .block();\n", "next_change": {"commit": "53bf1614562e55c8a3bde34f348bacb47adde7b7", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 894217299..71b0ca596 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -206,4 +204,13 @@ public class FilesApiServiceImpl implements FilesApiService {\n                            .block();\n     }\n \n+    private InputStream createLimitedInputStream(InputStream source, long maxUploadSize) {\n+        return new LimitedInputStream(source, maxUploadSize) {\n+            @Override\n+            protected void raiseError(long maxSize, long currentSize) {\n+                throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+            }\n+        };\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4MzE2OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561883169", "body": "When will this throw an exception? Also, isn't there anything here that would do the job:\r\nhttps://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html", "bodyText": "When will this throw an exception? Also, isn't there anything here that would do the job:\nhttps://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html", "bodyHTML": "<p dir=\"auto\">When will this throw an exception? Also, isn't there anything here that would do the job:<br>\n<a href=\"https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html\" rel=\"nofollow\">https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html</a></p>", "author": "nictas", "createdAt": "2021-01-21T13:34:07Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/FileUtils.java", "diffHunk": "@@ -72,6 +72,16 @@ public static void cleanUp(Path filePath, Logger logger) {\n         }\n     }\n \n+    public static boolean isFilenameValid(String file) {\n+        File f = new File(file);\n+        try {\n+            f.getCanonicalPath();", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkzODUyMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r565938523", "bodyText": "Changed to FilenameUtils::validatePath", "author": "radito3", "createdAt": "2021-01-28T09:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4MzE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "changed_code": [{"header": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/FileUtils.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/FileUtils.java\nindex 1a2dda1d1..3b71ddc5c 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/FileUtils.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/FileUtils.java\n", "chunk": "@@ -72,16 +72,6 @@ public class FileUtils {\n         }\n     }\n \n-    public static boolean isFilenameValid(String file) {\n-        File f = new File(file);\n-        try {\n-            f.getCanonicalPath();\n-            return true;\n-        } catch (IOException e) {\n-            return false;\n-        }\n-    }\n-\n     private static class DeleteDirVisitor extends SimpleFileVisitor<Path> {\n \n         @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4NjE4OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561886188", "body": "Why not:\r\n```\r\nString[] pathFragments = new URI(uri).getPath().split(\"/\");\r\n// Get the last element of pathFragments\r\n```", "bodyText": "Why not:\nString[] pathFragments = new URI(uri).getPath().split(\"/\");\n// Get the last element of pathFragments", "bodyHTML": "<p dir=\"auto\">Why not:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"String[] pathFragments = new URI(uri).getPath().split(&quot;/&quot;);\n// Get the last element of pathFragments\"><pre><code>String[] pathFragments = new URI(uri).getPath().split(\"/\");\n// Get the last element of pathFragments\n</code></pre></div>", "author": "nictas", "createdAt": "2021-01-21T13:38:34Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);\n+\n+        ClientResponse response = client.get()\n+                                        .uri(decodedUrl)\n+                                        .exchange()\n+                                        .block();\n+        long fileSize = response.headers()\n+                                .contentLength()\n+                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+        long maxUploadSize = new Configuration().getMaxUploadSize();\n+        if (fileSize > maxUploadSize) {\n+            throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+        }\n+\n+        String fileName = extractFileName(decodedUrl);\n+        try (InputStream content = response.body(this::extractContent)) {\n+            return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n+        }\n+    }\n+\n+    private String extractFileName(String url) {\n+        int fragmentIdx = url.indexOf('#');", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI4OTAzNg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r563289036", "bodyText": "Done as suggested", "author": "radito3", "createdAt": "2021-01-24T12:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4NjE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 8bf71a0ca..894217299 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -175,31 +175,32 @@ public class FilesApiServiceImpl implements FilesApiService {\n         }\n \n         String fileName = extractFileName(decodedUrl);\n+        FileUtils.validatePath(fileName);\n         try (InputStream content = response.body(this::extractContent)) {\n             return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n         }\n     }\n \n     private String extractFileName(String url) {\n-        int fragmentIdx = url.indexOf('#');\n-        if (fragmentIdx != -1) {\n-            url = url.substring(0, fragmentIdx);\n-        }\n-        int queryIdx = url.indexOf('?');\n-        if (queryIdx != -1) {\n-            url = url.substring(0, queryIdx);\n-        }\n-        int startIdx = url.lastIndexOf('/') + 1;\n-        String fileName = url.substring(startIdx);\n-        if (!FileUtils.isFilenameValid(fileName)) {\n-            throw new SLException(\"Invalid MTAR name\");\n-        }\n-        return fileName;\n+        String[] pathFragments = URI.create(url).getPath().split(\"/\");\n+        //TODO check paths elems length\n+        return pathFragments[pathFragments.length - 1];\n     }\n \n     private InputStream extractContent(ReactiveHttpInputMessage httpResponse, BodyExtractor.Context context) {\n+//        new LimitedInputStream(InputStream.nullInputStream(), maxUploadSize) {\n+//            @Override\n+//            protected void raiseError(long maxSize, long currentSize) throws IOException {\n+//                throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+//            }\n+//        };\n         return httpResponse.getBody()\n-                           .map(dataBuffer -> dataBuffer.asInputStream(true))\n+                           .map(dataBuffer -> {\n+                               LOGGER.error(\"[custom debug] data buffer impl: \" + dataBuffer.toString());\n+                               InputStream is = dataBuffer.asInputStream(true);\n+                               LOGGER.error(\"[custom debug] input stream impl: \" + is.toString());\n+                               return is;\n+                           })\n                            .collectList()\n                            .map(list -> new SequenceInputStream(Collections.enumeration(list)))\n                            .block();\n", "next_change": {"commit": "53bf1614562e55c8a3bde34f348bacb47adde7b7", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 894217299..71b0ca596 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -206,4 +204,13 @@ public class FilesApiServiceImpl implements FilesApiService {\n                            .block();\n     }\n \n+    private InputStream createLimitedInputStream(InputStream source, long maxUploadSize) {\n+        return new LimitedInputStream(source, maxUploadSize) {\n+            @Override\n+            protected void raiseError(long maxSize, long currentSize) {\n+                throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+            }\n+        };\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4NzE4OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561887188", "body": "The `context` doesn't seem to be used here.", "bodyText": "The context doesn't seem to be used here.", "bodyHTML": "<p dir=\"auto\">The <code>context</code> doesn't seem to be used here.</p>", "author": "nictas", "createdAt": "2021-01-21T13:40:05Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);\n+\n+        ClientResponse response = client.get()\n+                                        .uri(decodedUrl)\n+                                        .exchange()\n+                                        .block();\n+        long fileSize = response.headers()\n+                                .contentLength()\n+                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+        long maxUploadSize = new Configuration().getMaxUploadSize();\n+        if (fileSize > maxUploadSize) {\n+            throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+        }\n+\n+        String fileName = extractFileName(decodedUrl);\n+        try (InputStream content = response.body(this::extractContent)) {\n+            return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n+        }\n+    }\n+\n+    private String extractFileName(String url) {\n+        int fragmentIdx = url.indexOf('#');\n+        if (fragmentIdx != -1) {\n+            url = url.substring(0, fragmentIdx);\n+        }\n+        int queryIdx = url.indexOf('?');\n+        if (queryIdx != -1) {\n+            url = url.substring(0, queryIdx);\n+        }\n+        int startIdx = url.lastIndexOf('/') + 1;\n+        String fileName = url.substring(startIdx);\n+        if (!FileUtils.isFilenameValid(fileName)) {\n+            throw new SLException(\"Invalid MTAR name\");\n+        }\n+        return fileName;\n+    }\n+\n+    private InputStream extractContent(ReactiveHttpInputMessage httpResponse, BodyExtractor.Context context) {", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5MTgyNQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561891825", "bodyText": "Yes, but we need it to use this method as a method reference", "author": "radito3", "createdAt": "2021-01-21T13:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4NzE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 8bf71a0ca..894217299 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -175,31 +175,32 @@ public class FilesApiServiceImpl implements FilesApiService {\n         }\n \n         String fileName = extractFileName(decodedUrl);\n+        FileUtils.validatePath(fileName);\n         try (InputStream content = response.body(this::extractContent)) {\n             return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n         }\n     }\n \n     private String extractFileName(String url) {\n-        int fragmentIdx = url.indexOf('#');\n-        if (fragmentIdx != -1) {\n-            url = url.substring(0, fragmentIdx);\n-        }\n-        int queryIdx = url.indexOf('?');\n-        if (queryIdx != -1) {\n-            url = url.substring(0, queryIdx);\n-        }\n-        int startIdx = url.lastIndexOf('/') + 1;\n-        String fileName = url.substring(startIdx);\n-        if (!FileUtils.isFilenameValid(fileName)) {\n-            throw new SLException(\"Invalid MTAR name\");\n-        }\n-        return fileName;\n+        String[] pathFragments = URI.create(url).getPath().split(\"/\");\n+        //TODO check paths elems length\n+        return pathFragments[pathFragments.length - 1];\n     }\n \n     private InputStream extractContent(ReactiveHttpInputMessage httpResponse, BodyExtractor.Context context) {\n+//        new LimitedInputStream(InputStream.nullInputStream(), maxUploadSize) {\n+//            @Override\n+//            protected void raiseError(long maxSize, long currentSize) throws IOException {\n+//                throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+//            }\n+//        };\n         return httpResponse.getBody()\n-                           .map(dataBuffer -> dataBuffer.asInputStream(true))\n+                           .map(dataBuffer -> {\n+                               LOGGER.error(\"[custom debug] data buffer impl: \" + dataBuffer.toString());\n+                               InputStream is = dataBuffer.asInputStream(true);\n+                               LOGGER.error(\"[custom debug] input stream impl: \" + is.toString());\n+                               return is;\n+                           })\n                            .collectList()\n                            .map(list -> new SequenceInputStream(Collections.enumeration(list)))\n                            .block();\n", "next_change": {"commit": "53bf1614562e55c8a3bde34f348bacb47adde7b7", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 894217299..71b0ca596 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -206,4 +204,13 @@ public class FilesApiServiceImpl implements FilesApiService {\n                            .block();\n     }\n \n+    private InputStream createLimitedInputStream(InputStream source, long maxUploadSize) {\n+        return new LimitedInputStream(source, maxUploadSize) {\n+            @Override\n+            protected void raiseError(long maxSize, long currentSize) {\n+                throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+            }\n+        };\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4ODM0NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561888344", "body": "I think this will create a SequenceInputStream from multiple ByteArrayInputStreams, which means that the entire file content will be stored in-memory. Can you check, please? If I'm right, find another way to download the file.", "bodyText": "I think this will create a SequenceInputStream from multiple ByteArrayInputStreams, which means that the entire file content will be stored in-memory. Can you check, please? If I'm right, find another way to download the file.", "bodyHTML": "<p dir=\"auto\">I think this will create a SequenceInputStream from multiple ByteArrayInputStreams, which means that the entire file content will be stored in-memory. Can you check, please? If I'm right, find another way to download the file.</p>", "author": "nictas", "createdAt": "2021-01-21T13:41:54Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);\n+\n+        ClientResponse response = client.get()\n+                                        .uri(decodedUrl)\n+                                        .exchange()\n+                                        .block();\n+        long fileSize = response.headers()\n+                                .contentLength()\n+                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+        long maxUploadSize = new Configuration().getMaxUploadSize();\n+        if (fileSize > maxUploadSize) {\n+            throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+        }\n+\n+        String fileName = extractFileName(decodedUrl);\n+        try (InputStream content = response.body(this::extractContent)) {\n+            return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n+        }\n+    }\n+\n+    private String extractFileName(String url) {\n+        int fragmentIdx = url.indexOf('#');\n+        if (fragmentIdx != -1) {\n+            url = url.substring(0, fragmentIdx);\n+        }\n+        int queryIdx = url.indexOf('?');\n+        if (queryIdx != -1) {\n+            url = url.substring(0, queryIdx);\n+        }\n+        int startIdx = url.lastIndexOf('/') + 1;\n+        String fileName = url.substring(startIdx);\n+        if (!FileUtils.isFilenameValid(fileName)) {\n+            throw new SLException(\"Invalid MTAR name\");\n+        }\n+        return fileName;\n+    }\n+\n+    private InputStream extractContent(ReactiveHttpInputMessage httpResponse, BodyExtractor.Context context) {\n+        return httpResponse.getBody()\n+                           .map(dataBuffer -> dataBuffer.asInputStream(true))\n+                           .collectList()\n+                           .map(list -> new SequenceInputStream(Collections.enumeration(list)))", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 8bf71a0ca..894217299 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -175,31 +175,32 @@ public class FilesApiServiceImpl implements FilesApiService {\n         }\n \n         String fileName = extractFileName(decodedUrl);\n+        FileUtils.validatePath(fileName);\n         try (InputStream content = response.body(this::extractContent)) {\n             return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n         }\n     }\n \n     private String extractFileName(String url) {\n-        int fragmentIdx = url.indexOf('#');\n-        if (fragmentIdx != -1) {\n-            url = url.substring(0, fragmentIdx);\n-        }\n-        int queryIdx = url.indexOf('?');\n-        if (queryIdx != -1) {\n-            url = url.substring(0, queryIdx);\n-        }\n-        int startIdx = url.lastIndexOf('/') + 1;\n-        String fileName = url.substring(startIdx);\n-        if (!FileUtils.isFilenameValid(fileName)) {\n-            throw new SLException(\"Invalid MTAR name\");\n-        }\n-        return fileName;\n+        String[] pathFragments = URI.create(url).getPath().split(\"/\");\n+        //TODO check paths elems length\n+        return pathFragments[pathFragments.length - 1];\n     }\n \n     private InputStream extractContent(ReactiveHttpInputMessage httpResponse, BodyExtractor.Context context) {\n+//        new LimitedInputStream(InputStream.nullInputStream(), maxUploadSize) {\n+//            @Override\n+//            protected void raiseError(long maxSize, long currentSize) throws IOException {\n+//                throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+//            }\n+//        };\n         return httpResponse.getBody()\n-                           .map(dataBuffer -> dataBuffer.asInputStream(true))\n+                           .map(dataBuffer -> {\n+                               LOGGER.error(\"[custom debug] data buffer impl: \" + dataBuffer.toString());\n+                               InputStream is = dataBuffer.asInputStream(true);\n+                               LOGGER.error(\"[custom debug] input stream impl: \" + is.toString());\n+                               return is;\n+                           })\n                            .collectList()\n                            .map(list -> new SequenceInputStream(Collections.enumeration(list)))\n                            .block();\n", "next_change": {"commit": "53bf1614562e55c8a3bde34f348bacb47adde7b7", "changed_code": [{"header": "diff --git a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\nindex 894217299..71b0ca596 100644\n--- a/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n+++ b/multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java\n", "chunk": "@@ -206,4 +204,13 @@ public class FilesApiServiceImpl implements FilesApiService {\n                            .block();\n     }\n \n+    private InputStream createLimitedInputStream(InputStream source, long maxUploadSize) {\n+        return new LimitedInputStream(source, maxUploadSize) {\n+            @Override\n+            protected void raiseError(long maxSize, long currentSize) {\n+                throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+            }\n+        };\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"oid": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/faa14c44637e0f0804bafb2384c17218ff6f5bc1", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-22T12:31:30Z", "type": "forcePushed"}, {"oid": "53bf1614562e55c8a3bde34f348bacb47adde7b7", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/53bf1614562e55c8a3bde34f348bacb47adde7b7", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-28T09:24:15Z", "type": "forcePushed"}, {"oid": "39ec22e184282b85f435967e4df4b8370b877ed3", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/39ec22e184282b85f435967e4df4b8370b877ed3", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-29T13:24:13Z", "type": "forcePushed"}, {"oid": "68e691f5efc7dbda5af12614bb2abe2fd3fd28c5", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/68e691f5efc7dbda5af12614bb2abe2fd3fd28c5", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-02-01T13:22:46Z", "type": "forcePushed"}, {"oid": "a49596462e0dc628016d178a63d661c795085bb8", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/a49596462e0dc628016d178a63d661c795085bb8", "message": "Add option to download files from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-02-02T10:02:26Z", "type": "forcePushed"}, {"oid": "6303daf21b30b97340919f83a2ebef66ffc7487f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/6303daf21b30b97340919f83a2ebef66ffc7487f", "message": "Add option to download files from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-02-02T13:40:17Z", "type": "commit"}, {"oid": "6303daf21b30b97340919f83a2ebef66ffc7487f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/6303daf21b30b97340919f83a2ebef66ffc7487f", "message": "Add option to download files from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-02-02T13:40:17Z", "type": "forcePushed"}]}