{"pr_number": 499, "pr_title": "fix(griffin) - speed up sym != ", "pr_author": "jaugsburger", "pr_createdAt": "2020-07-09T11:24:49Z", "pr_url": "https://github.com/questdb/questdb/pull/499", "timeline": [{"oid": "142cf3d277378b3e1f078634fef4d50d493c16fe", "url": "https://github.com/questdb/questdb/commit/142cf3d277378b3e1f078634fef4d50d493c16fe", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-06-30T08:46:26Z", "type": "commit"}, {"oid": "aa1f8e2764ed39a13cc5f59614bd3d3ea3c7035f", "url": "https://github.com/questdb/questdb/commit/aa1f8e2764ed39a13cc5f59614bd3d3ea3c7035f", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-06-30T09:50:11Z", "type": "commit"}, {"oid": "f951a344e9268cb3ae7a2f091654e9f220e86c96", "url": "https://github.com/questdb/questdb/commit/f951a344e9268cb3ae7a2f091654e9f220e86c96", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-06-30T09:54:00Z", "type": "commit"}, {"oid": "64ad57c36b289998a04a6037485a21c319eb2287", "url": "https://github.com/questdb/questdb/commit/64ad57c36b289998a04a6037485a21c319eb2287", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-06-30T12:30:31Z", "type": "commit"}, {"oid": "2c6b606ef589f984a9136c5a0b2e556b73d67b3e", "url": "https://github.com/questdb/questdb/commit/2c6b606ef589f984a9136c5a0b2e556b73d67b3e", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-02T10:59:19Z", "type": "commit"}, {"oid": "72189ade560381c67cc1b1711964f48fc4e646bb", "url": "https://github.com/questdb/questdb/commit/72189ade560381c67cc1b1711964f48fc4e646bb", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-03T08:57:20Z", "type": "commit"}, {"oid": "da46cd7e868782dd922224548588c8456af3dbb8", "url": "https://github.com/questdb/questdb/commit/da46cd7e868782dd922224548588c8456af3dbb8", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-06T13:17:12Z", "type": "commit"}, {"oid": "18b0c8f5a447e258c73680d2cb6b4dc144e1aea3", "url": "https://github.com/questdb/questdb/commit/18b0c8f5a447e258c73680d2cb6b4dc144e1aea3", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-08T09:08:46Z", "type": "commit"}, {"oid": "7d1012e6df2a68d63a2c57f77ec2c4649403c46f", "url": "https://github.com/questdb/questdb/commit/7d1012e6df2a68d63a2c57f77ec2c4649403c46f", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-08T14:19:32Z", "type": "commit"}, {"oid": "fda10c1754f1f9b4d8af8f5ac95960a24f5931b4", "url": "https://github.com/questdb/questdb/commit/fda10c1754f1f9b4d8af8f5ac95960a24f5931b4", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T10:01:42Z", "type": "commit"}, {"oid": "52cd5ee72aa959c665ac1a4badbc0916282f7f7f", "url": "https://github.com/questdb/questdb/commit/52cd5ee72aa959c665ac1a4badbc0916282f7f7f", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T10:28:45Z", "type": "commit"}, {"oid": "ff686af43a0a3e96902670a5c7a1f832da0cfbea", "url": "https://github.com/questdb/questdb/commit/ff686af43a0a3e96902670a5c7a1f832da0cfbea", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T10:49:25Z", "type": "commit"}, {"oid": "a3feed0b6d240dd28ab98085b3cec702626aa388", "url": "https://github.com/questdb/questdb/commit/a3feed0b6d240dd28ab98085b3cec702626aa388", "message": "Merge remote-tracking branch 'origin/issue.speed.up.sym.not.equals' into sym.not.eq.value\n\n# Conflicts:\n#\tcore/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n#\tcore/src/test/java/io/questdb/griffin/OrderByAdviceTest.java", "committedDate": "2020-07-09T11:17:40Z", "type": "commit"}, {"oid": "28f032fe304a4b8f0937663b9b3324e9c3375538", "url": "https://github.com/questdb/questdb/commit/28f032fe304a4b8f0937663b9b3324e9c3375538", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T11:21:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1Nzc0MQ==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452157741", "body": "this is not tested", "bodyText": "this is not tested", "bodyHTML": "<p dir=\"auto\">this is not tested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T11:45:31Z", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -2095,62 +2096,87 @@ private RecordCursorFactory generateTableQuery(\n                         }\n                     }\n \n-                    if (nKeyValues == 1) {\n-                        final RowCursorFactory rcf;\n-                        final CharSequence symbol = intrinsicModel.keyValues.get(0);\n-                        final int symbolKey = reader.getSymbolMapReader(keyColumnIndex).keyOf(symbol);\n-                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n-                        if (f != null && f.isConstant() && !f.getBool(null)) {\n-                            return new EmptyTableRecordCursorFactory(myMeta);\n-                        }\n+                    if (intrinsicModel.keyExcludedValues.size() == 0) {\n+                        if (nKeyValues == 1) {\n+                            final RowCursorFactory rcf;\n+                            final CharSequence symbol = intrinsicModel.keyValues.get(0);\n+                            final int symbolKey = reader.getSymbolMapReader(keyColumnIndex).keyOf(symbol);\n+                            final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                            if (f != null && f.isConstant() && !f.getBool(null)) {\n+                                return new EmptyTableRecordCursorFactory(myMeta);\n+                            }\n \n-                        if (symbolKey == SymbolTable.VALUE_NOT_FOUND) {\n-                            if (f == null) {\n-                                rcf = new DeferredSymbolIndexRowCursorFactory(keyColumnIndex, Chars.toString(symbol), true, indexDirection);\n+                            if (symbolKey == SymbolTable.VALUE_NOT_FOUND) {\n+                                if (f == null) {\n+                                    rcf = new DeferredSymbolIndexRowCursorFactory(keyColumnIndex, Chars.toString(symbol), true, indexDirection);\n+                                } else {\n+                                    rcf = new DeferredSymbolIndexFilteredRowCursorFactory(keyColumnIndex, Chars.toString(symbol), f, true, indexDirection);\n+                                }\n                             } else {\n-                                rcf = new DeferredSymbolIndexFilteredRowCursorFactory(keyColumnIndex, Chars.toString(symbol), f, true, indexDirection);\n+                                if (f == null) {\n+                                    rcf = new SymbolIndexRowCursorFactory(keyColumnIndex, symbolKey, true, indexDirection);\n+                                } else {\n+                                    rcf = new SymbolIndexFilteredRowCursorFactory(keyColumnIndex, symbolKey, f, true, indexDirection);\n+                                }\n                             }\n-                        } else {\n-                            if (f == null) {\n-                                rcf = new SymbolIndexRowCursorFactory(keyColumnIndex, symbolKey, true, indexDirection);\n+                            return new DataFrameRecordCursorFactory(myMeta, dfcFactory, rcf, orderByKeyColumn, f, false, columnIndexes, columnSizes);\n+                        }\n+\n+                        symbolValueList.clear();\n+\n+                        for (int i = 0, n = intrinsicModel.keyValues.size(); i < n; i++) {\n+                            symbolValueList.add(intrinsicModel.keyValues.get(i));\n+                        }\n+\n+                        if (orderByKeyColumn) {\n+                            myMeta.setTimestampIndex(-1);\n+                            if (model.getOrderByDirectionAdvice().getQuick(0) == QueryModel.ORDER_DIRECTION_ASCENDING) {\n+                                symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR);\n                             } else {\n-                                rcf = new SymbolIndexFilteredRowCursorFactory(keyColumnIndex, symbolKey, f, true, indexDirection);\n+                                symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR_DESC);\n                             }\n                         }\n-                        return new DataFrameRecordCursorFactory(myMeta, dfcFactory, rcf, orderByKeyColumn, f, false, columnIndexes, columnSizes);\n-                    }\n \n-                    symbolValueList.clear();\n-\n-                    for (int i = 0, n = intrinsicModel.keyValues.size(); i < n; i++) {\n-                        symbolValueList.add(intrinsicModel.keyValues.get(i));\n-                    }\n+                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                        if (f != null && f.isConstant() && !f.getBool(null)) {\n+                            return new EmptyTableRecordCursorFactory(myMeta);\n+                        }\n+                        return new FilterOnValuesRecordCursorFactory(\n+                                myMeta,\n+                                dfcFactory,\n+                                symbolValueList,\n+                                keyColumnIndex,\n+                                reader,\n+                                f,\n+                                model.getOrderByAdviceMnemonic(),\n+                                orderByKeyColumn,\n+                                indexDirection,\n+                                columnIndexes\n+                        );\n \n-                    if (orderByKeyColumn) {\n-                        myMeta.setTimestampIndex(-1);\n-                        if (model.getOrderByDirectionAdvice().getQuick(0) == QueryModel.ORDER_DIRECTION_ASCENDING) {\n-                            symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR);\n-                        } else {\n-                            symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR_DESC);\n+                    } else if (intrinsicModel.keyExcludedValues.size() > 0 && reader.getSymbolMapReader(keyColumnIndex).size() < configuration.getMaxSymbolNotEqualsCount()) {\n+                        symbolValueList.clear();\n+                        for (int i = 0, n = intrinsicModel.keyExcludedValues.size(); i < n; i++) {\n+                            symbolValueList.add(intrinsicModel.keyExcludedValues.get(i));\n+                        }\n+                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                        if (f != null && f.isConstant() && !f.getBool(null)) {\n+                            return new EmptyTableRecordCursorFactory(myMeta);", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "773bb158684179dfb0258a50e4a0cbbf25f55b90", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java b/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\nindex c5bddae80..62c6f9555 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n", "chunk": "@@ -2159,9 +2165,15 @@ public class SqlCodeGenerator implements Mutable {\n                         for (int i = 0, n = intrinsicModel.keyExcludedValues.size(); i < n; i++) {\n                             symbolValueList.add(intrinsicModel.keyExcludedValues.get(i));\n                         }\n-                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n-                        if (f != null && f.isConstant() && !f.getBool(null)) {\n-                            return new EmptyTableRecordCursorFactory(myMeta);\n+                        Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                        if (f != null && f.isConstant()) {\n+                            try {\n+                                if (!f.getBool(null)) {\n+                                    return new EmptyTableRecordCursorFactory(myMeta);\n+                                }\n+                            } finally {\n+                                f = Misc.free(f);\n+                            }\n                         }\n \n                         return new FilterOnExcludedValuesRecordCursorFactory(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NTA5NQ==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452165095", "body": "I recently tackled potential memory leak in Functions. Function is Closeable interface.\r\n\r\nWhen 'f' is constant we will be discarding it regardless if it is true or false. 'false' branch is ok, but 'true' branch needs to behave as if there is no filter. In both cases 'f' need to be closed. I usually do something like:\r\n\r\n```java\r\nif (f.isConstant()) {\r\n   try (f) {\r\n       if (f.getBool(null)) {\r\n       } else {\r\n       }\r\n   }\r\n}\r\n```", "bodyText": "I recently tackled potential memory leak in Functions. Function is Closeable interface.\nWhen 'f' is constant we will be discarding it regardless if it is true or false. 'false' branch is ok, but 'true' branch needs to behave as if there is no filter. In both cases 'f' need to be closed. I usually do something like:\nif (f.isConstant()) {\n   try (f) {\n       if (f.getBool(null)) {\n       } else {\n       }\n   }\n}", "bodyHTML": "<p dir=\"auto\">I recently tackled potential memory leak in Functions. Function is Closeable interface.</p>\n<p dir=\"auto\">When 'f' is constant we will be discarding it regardless if it is true or false. 'false' branch is ok, but 'true' branch needs to behave as if there is no filter. In both cases 'f' need to be closed. I usually do something like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (f.isConstant()) {\n   try (f) {\n       if (f.getBool(null)) {\n       } else {\n       }\n   }\n}\"><pre><span class=\"pl-k\">if</span> (f<span class=\"pl-k\">.</span>isConstant()) {\n   <span class=\"pl-k\">try</span> (f) {\n       <span class=\"pl-k\">if</span> (f<span class=\"pl-k\">.</span>getBool(<span class=\"pl-c1\">null</span>)) {\n       } <span class=\"pl-k\">else</span> {\n       }\n   }\n}</pre></div>", "author": "bluestreak01", "createdAt": "2020-07-09T12:00:14Z", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -2095,62 +2096,87 @@ private RecordCursorFactory generateTableQuery(\n                         }\n                     }\n \n-                    if (nKeyValues == 1) {\n-                        final RowCursorFactory rcf;\n-                        final CharSequence symbol = intrinsicModel.keyValues.get(0);\n-                        final int symbolKey = reader.getSymbolMapReader(keyColumnIndex).keyOf(symbol);\n-                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n-                        if (f != null && f.isConstant() && !f.getBool(null)) {\n-                            return new EmptyTableRecordCursorFactory(myMeta);\n-                        }\n+                    if (intrinsicModel.keyExcludedValues.size() == 0) {\n+                        if (nKeyValues == 1) {\n+                            final RowCursorFactory rcf;\n+                            final CharSequence symbol = intrinsicModel.keyValues.get(0);\n+                            final int symbolKey = reader.getSymbolMapReader(keyColumnIndex).keyOf(symbol);\n+                            final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                            if (f != null && f.isConstant() && !f.getBool(null)) {\n+                                return new EmptyTableRecordCursorFactory(myMeta);\n+                            }\n \n-                        if (symbolKey == SymbolTable.VALUE_NOT_FOUND) {\n-                            if (f == null) {\n-                                rcf = new DeferredSymbolIndexRowCursorFactory(keyColumnIndex, Chars.toString(symbol), true, indexDirection);\n+                            if (symbolKey == SymbolTable.VALUE_NOT_FOUND) {\n+                                if (f == null) {\n+                                    rcf = new DeferredSymbolIndexRowCursorFactory(keyColumnIndex, Chars.toString(symbol), true, indexDirection);\n+                                } else {\n+                                    rcf = new DeferredSymbolIndexFilteredRowCursorFactory(keyColumnIndex, Chars.toString(symbol), f, true, indexDirection);\n+                                }\n                             } else {\n-                                rcf = new DeferredSymbolIndexFilteredRowCursorFactory(keyColumnIndex, Chars.toString(symbol), f, true, indexDirection);\n+                                if (f == null) {\n+                                    rcf = new SymbolIndexRowCursorFactory(keyColumnIndex, symbolKey, true, indexDirection);\n+                                } else {\n+                                    rcf = new SymbolIndexFilteredRowCursorFactory(keyColumnIndex, symbolKey, f, true, indexDirection);\n+                                }\n                             }\n-                        } else {\n-                            if (f == null) {\n-                                rcf = new SymbolIndexRowCursorFactory(keyColumnIndex, symbolKey, true, indexDirection);\n+                            return new DataFrameRecordCursorFactory(myMeta, dfcFactory, rcf, orderByKeyColumn, f, false, columnIndexes, columnSizes);\n+                        }\n+\n+                        symbolValueList.clear();\n+\n+                        for (int i = 0, n = intrinsicModel.keyValues.size(); i < n; i++) {\n+                            symbolValueList.add(intrinsicModel.keyValues.get(i));\n+                        }\n+\n+                        if (orderByKeyColumn) {\n+                            myMeta.setTimestampIndex(-1);\n+                            if (model.getOrderByDirectionAdvice().getQuick(0) == QueryModel.ORDER_DIRECTION_ASCENDING) {\n+                                symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR);\n                             } else {\n-                                rcf = new SymbolIndexFilteredRowCursorFactory(keyColumnIndex, symbolKey, f, true, indexDirection);\n+                                symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR_DESC);\n                             }\n                         }\n-                        return new DataFrameRecordCursorFactory(myMeta, dfcFactory, rcf, orderByKeyColumn, f, false, columnIndexes, columnSizes);\n-                    }\n \n-                    symbolValueList.clear();\n-\n-                    for (int i = 0, n = intrinsicModel.keyValues.size(); i < n; i++) {\n-                        symbolValueList.add(intrinsicModel.keyValues.get(i));\n-                    }\n+                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n+                        if (f != null && f.isConstant() && !f.getBool(null)) {\n+                            return new EmptyTableRecordCursorFactory(myMeta);\n+                        }\n+                        return new FilterOnValuesRecordCursorFactory(", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "773bb158684179dfb0258a50e4a0cbbf25f55b90", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java b/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\nindex c5bddae80..62c6f9555 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n", "chunk": "@@ -2137,10 +2147,6 @@ public class SqlCodeGenerator implements Mutable {\n                             }\n                         }\n \n-                        final Function f = compileFilter(intrinsicModel, readerMeta, executionContext);\n-                        if (f != null && f.isConstant() && !f.getBool(null)) {\n-                            return new EmptyTableRecordCursorFactory(myMeta);\n-                        }\n                         return new FilterOnValuesRecordCursorFactory(\n                                 myMeta,\n                                 dfcFactory,\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NTYwMA==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452165600", "body": "this branch is untested", "bodyText": "this branch is untested", "bodyHTML": "<p dir=\"auto\">this branch is untested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:01:18Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -125,11 +127,36 @@ private boolean analyzeEquals0(AliasTranslator translator, IntrinsicModel model,\n                                         model.keyValues.add(value);\n                                         model.keyValuePositions.add(b.position);\n                                     }\n+                                    node.intrinsicValue = IntrinsicModel.TRUE;\n                                 } else {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.remove(value);", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMTA0OA==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452221048", "bodyText": "done", "author": "jaugsburger", "createdAt": "2020-07-09T13:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NTYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "2bb121915cd17efc3c07f9529e0acadbf92816e8", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..6d705baab 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -126,12 +127,11 @@ final class WhereClauseParser implements Mutable {\n                                         model.keyValuePositions.clear();\n                                         model.keyValues.add(value);\n                                         model.keyValuePositions.add(b.position);\n+                                        node.intrinsicValue = IntrinsicModel.TRUE;\n                                     }\n-                                    node.intrinsicValue = IntrinsicModel.TRUE;\n                                 } else {\n                                     if (model.keyExcludedValues.contains(value)) {\n                                         if (model.keyExcludedValues.size() > 1) {\n-                                            model.keyExcludedValues.remove(value);\n                                             int removedIndex = model.keyExcludedValues.remove(value);\n                                             if (removedIndex > -1) {\n                                                 model.keyExcludedValuePositions.removeIndex(index);\n", "next_change": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 6d705baab..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -140,17 +140,7 @@ final class WhereClauseParser implements Mutable {\n                                             model.keyExcludedValues.clear();\n                                             model.keyExcludedValuePositions.clear();\n                                         }\n-                                        tempNodes.clear();\n-                                        for (int i = 0, size = keyExclNodes.size(); i < size; i++) {\n-                                            ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n-                                                expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n-                                                tempNodes.add(expressionNode);\n-                                            }\n-                                        }\n-                                        for (int i = 0, size = tempNodes.size(); i < size; i++) {\n-                                            keyExclNodes.remove(tempNodes.get(i));\n-                                        }\n+                                        removeNodes(b, keyExclNodes);\n                                     }\n                                     node.intrinsicValue = IntrinsicModel.TRUE;\n                                     model.intrinsicValue = IntrinsicModel.FALSE;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NjYzNA==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452166634", "body": "the loops should not be calling `size()` on every iteration. Somewhere else you did:\r\n\r\n```sql\r\nfor (int n = 0, k = keyExclNodes.size(); n < k; n++) {\r\n```\r\n\r\nwhich is much better", "bodyText": "the loops should not be calling size() on every iteration. Somewhere else you did:\nfor (int n = 0, k = keyExclNodes.size(); n < k; n++) {\nwhich is much better", "bodyHTML": "<p dir=\"auto\">the loops should not be calling <code>size()</code> on every iteration. Somewhere else you did:</p>\n<div class=\"highlight highlight-source-sql position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"for (int n = 0, k = keyExclNodes.size(); n &lt; k; n++) {\"><pre>for (<span class=\"pl-k\">int</span> n <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>, k <span class=\"pl-k\">=</span> <span class=\"pl-c1\">keyExclNodes</span>.<span class=\"pl-c1\">size</span>(); n <span class=\"pl-k\">&lt;</span> k; n<span class=\"pl-k\">++</span>) {</pre></div>\n<p dir=\"auto\">which is much better</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:03:22Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -125,11 +127,36 @@ private boolean analyzeEquals0(AliasTranslator translator, IntrinsicModel model,\n                                         model.keyValues.add(value);\n                                         model.keyValuePositions.add(b.position);\n                                     }\n+                                    node.intrinsicValue = IntrinsicModel.TRUE;\n                                 } else {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.remove(value);\n+                                            int removedIndex = model.keyExcludedValues.remove(value);\n+                                            if (removedIndex > -1) {\n+                                                model.keyExcludedValuePositions.removeIndex(index);\n+                                            }\n+                                        } else {\n+                                            model.keyExcludedValues.clear();\n+                                            model.keyExcludedValuePositions.clear();\n+                                        }\n+                                        tempNodes.clear();\n+                                        for (int i = 0; i < keyExclNodes.size(); i++) {", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0def74d576fb1d47951e8afdc6ec8d191d10763e", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..13a70d997 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -143,7 +144,7 @@ final class WhereClauseParser implements Mutable {\n                                         tempNodes.clear();\n                                         for (int i = 0; i < keyExclNodes.size(); i++) {\n                                             ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n+                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n                                                 expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n                                                 tempNodes.add(expressionNode);\n                                             }\n", "next_change": {"commit": "c4bf537eae1ee4700e141afc54c6fdcc61abb7ba", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 13a70d997..29fd0833b 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -144,7 +143,7 @@ final class WhereClauseParser implements Mutable {\n                                         tempNodes.clear();\n                                         for (int i = 0; i < keyExclNodes.size(); i++) {\n                                             ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n+                                            if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n                                                 expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n                                                 tempNodes.add(expressionNode);\n                                             }\n", "next_change": {"commit": "302419696b4005143380625c4c691de3e00adb07", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..13a70d997 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -143,7 +144,7 @@ final class WhereClauseParser implements Mutable {\n                                         tempNodes.clear();\n                                         for (int i = 0; i < keyExclNodes.size(); i++) {\n                                             ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n+                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n                                                 expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n                                                 tempNodes.add(expressionNode);\n                                             }\n", "next_change": {"commit": "b85778286dee17d04ffec7a402187a6fbce3cc8c", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 13a70d997..2f16dc987 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -142,14 +142,14 @@ final class WhereClauseParser implements Mutable {\n                                             model.keyExcludedValuePositions.clear();\n                                         }\n                                         tempNodes.clear();\n-                                        for (int i = 0; i < keyExclNodes.size(); i++) {\n+                                        for (int i = 0, size = keyExclNodes.size(); i < size; i++) {\n                                             ExpressionNode expressionNode = keyExclNodes.get(i);\n                                             if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n                                                 expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n                                                 tempNodes.add(expressionNode);\n                                             }\n                                         }\n-                                        for (int i = 0; i < tempNodes.size(); i++) {\n+                                        for (int i = 0, size = tempNodes.size(); i < size; i++) {\n                                             keyExclNodes.remove(tempNodes.get(i));\n                                         }\n                                     }\n", "next_change": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 2f16dc987..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -141,17 +140,7 @@ final class WhereClauseParser implements Mutable {\n                                             model.keyExcludedValues.clear();\n                                             model.keyExcludedValuePositions.clear();\n                                         }\n-                                        tempNodes.clear();\n-                                        for (int i = 0, size = keyExclNodes.size(); i < size; i++) {\n-                                            ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n-                                                expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n-                                                tempNodes.add(expressionNode);\n-                                            }\n-                                        }\n-                                        for (int i = 0, size = tempNodes.size(); i < size; i++) {\n-                                            keyExclNodes.remove(tempNodes.get(i));\n-                                        }\n+                                        removeNodes(b, keyExclNodes);\n                                     }\n                                     node.intrinsicValue = IntrinsicModel.TRUE;\n                                     model.intrinsicValue = IntrinsicModel.FALSE;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2Njc0Mw==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452166743", "body": "same as above", "bodyText": "same as above", "bodyHTML": "<p dir=\"auto\">same as above</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:03:35Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -125,11 +127,36 @@ private boolean analyzeEquals0(AliasTranslator translator, IntrinsicModel model,\n                                         model.keyValues.add(value);\n                                         model.keyValuePositions.add(b.position);\n                                     }\n+                                    node.intrinsicValue = IntrinsicModel.TRUE;\n                                 } else {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.remove(value);\n+                                            int removedIndex = model.keyExcludedValues.remove(value);\n+                                            if (removedIndex > -1) {\n+                                                model.keyExcludedValuePositions.removeIndex(index);\n+                                            }\n+                                        } else {\n+                                            model.keyExcludedValues.clear();\n+                                            model.keyExcludedValuePositions.clear();\n+                                        }\n+                                        tempNodes.clear();\n+                                        for (int i = 0; i < keyExclNodes.size(); i++) {\n+                                            ExpressionNode expressionNode = keyExclNodes.get(i);\n+                                            if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n+                                                expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n+                                                tempNodes.add(expressionNode);\n+                                            }\n+                                        }\n+                                        for (int i = 0; i < tempNodes.size(); i++) {", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0def74d576fb1d47951e8afdc6ec8d191d10763e", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..13a70d997 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -143,7 +144,7 @@ final class WhereClauseParser implements Mutable {\n                                         tempNodes.clear();\n                                         for (int i = 0; i < keyExclNodes.size(); i++) {\n                                             ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n+                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n                                                 expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n                                                 tempNodes.add(expressionNode);\n                                             }\n", "next_change": {"commit": "c4bf537eae1ee4700e141afc54c6fdcc61abb7ba", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 13a70d997..29fd0833b 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -144,7 +143,7 @@ final class WhereClauseParser implements Mutable {\n                                         tempNodes.clear();\n                                         for (int i = 0; i < keyExclNodes.size(); i++) {\n                                             ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n+                                            if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n                                                 expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n                                                 tempNodes.add(expressionNode);\n                                             }\n", "next_change": {"commit": "302419696b4005143380625c4c691de3e00adb07", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..13a70d997 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -143,7 +144,7 @@ final class WhereClauseParser implements Mutable {\n                                         tempNodes.clear();\n                                         for (int i = 0; i < keyExclNodes.size(); i++) {\n                                             ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n+                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n                                                 expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n                                                 tempNodes.add(expressionNode);\n                                             }\n", "next_change": {"commit": "b85778286dee17d04ffec7a402187a6fbce3cc8c", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 13a70d997..2f16dc987 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -142,14 +142,14 @@ final class WhereClauseParser implements Mutable {\n                                             model.keyExcludedValuePositions.clear();\n                                         }\n                                         tempNodes.clear();\n-                                        for (int i = 0; i < keyExclNodes.size(); i++) {\n+                                        for (int i = 0, size = keyExclNodes.size(); i < size; i++) {\n                                             ExpressionNode expressionNode = keyExclNodes.get(i);\n                                             if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n                                                 expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n                                                 tempNodes.add(expressionNode);\n                                             }\n                                         }\n-                                        for (int i = 0; i < tempNodes.size(); i++) {\n+                                        for (int i = 0, size = tempNodes.size(); i < size; i++) {\n                                             keyExclNodes.remove(tempNodes.get(i));\n                                         }\n                                     }\n", "next_change": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 2f16dc987..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -141,17 +140,7 @@ final class WhereClauseParser implements Mutable {\n                                             model.keyExcludedValues.clear();\n                                             model.keyExcludedValuePositions.clear();\n                                         }\n-                                        tempNodes.clear();\n-                                        for (int i = 0, size = keyExclNodes.size(); i < size; i++) {\n-                                            ExpressionNode expressionNode = keyExclNodes.get(i);\n-                                            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n-                                                expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n-                                                tempNodes.add(expressionNode);\n-                                            }\n-                                        }\n-                                        for (int i = 0, size = tempNodes.size(); i < size; i++) {\n-                                            keyExclNodes.remove(tempNodes.get(i));\n-                                        }\n+                                        removeNodes(b, keyExclNodes);\n                                     }\n                                     node.intrinsicValue = IntrinsicModel.TRUE;\n                                     model.intrinsicValue = IntrinsicModel.FALSE;\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NzQwMA==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452167400", "body": "untested", "bodyText": "untested", "bodyHTML": "<p dir=\"auto\">untested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:04:54Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -460,21 +493,78 @@ private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel mod\n                     case ColumnType.LONG:\n                     case ColumnType.INT:\n                         if (m.isColumnIndexed(index)) {\n-\n-                            // check if we are limited by preferred column\n-                            if (preferredKeyColumn != null && !Chars.equals(preferredKeyColumn, column)) {\n+                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n+                            final boolean indexed = m.isColumnIndexed(index);\n+                            if (indexed && preferredKeyColumn == null) {\n+                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n+                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -468,107 +541,6 @@ final class WhereClauseParser implements Mutable {\n                 || analyzeNotEquals0(translator, model, node, node.rhs, node.lhs, m);\n     }\n \n-    private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel model, ExpressionNode node, ExpressionNode a, ExpressionNode b, RecordMetadata m) throws SqlException {\n-\n-        if (Chars.equals(a.token, b.token)) {\n-            model.intrinsicValue = IntrinsicModel.FALSE;\n-            return true;\n-        }\n-\n-        if (a.type == ExpressionNode.LITERAL && b.type == ExpressionNode.CONSTANT) {\n-            if (isTimestamp(a)) {\n-                model.subtractIntervals(b.token, 1, b.token.length() - 1, b.position);\n-                node.intrinsicValue = IntrinsicModel.TRUE;\n-                return true;\n-            } else {\n-                CharSequence column = translator.translateAlias(a.token);\n-                int index = m.getColumnIndexQuiet(column);\n-                if (index == -1) {\n-                    throw SqlException.invalidColumn(a.position, a.token);\n-                }\n-\n-                switch (m.getColumnType(index)) {\n-                    case ColumnType.SYMBOL:\n-                    case ColumnType.STRING:\n-                    case ColumnType.LONG:\n-                    case ColumnType.INT:\n-                        if (m.isColumnIndexed(index)) {\n-                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n-                            final boolean indexed = m.isColumnIndexed(index);\n-                            if (indexed && preferredKeyColumn == null) {\n-                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n-                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n-                                    if (model.keyExcludedValues.contains(value)) {\n-                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen\n-                                        // so we have to clear all other key values\n-                                        if (model.keyExcludedValues.size() > 1) {\n-                                            model.keyExcludedValues.clear();\n-                                            model.keyExcludedValuePositions.clear();\n-                                            model.keyExcludedValues.add(value);\n-                                            model.keyExcludedValuePositions.add(b.position);\n-                                            return true;\n-                                        }\n-                                        node.intrinsicValue = IntrinsicModel.TRUE;\n-                                    } else {\n-                                        if (model.keyValues.contains(value)) {\n-                                            if (model.keyValues.size() > 1) {\n-                                                int removedIndex = model.keyValues.remove(value);\n-                                                if (removedIndex > -1) {\n-                                                    model.keyValuePositions.removeIndex(index);\n-                                                }\n-                                                model.keyValuePositions.remove(b.position);\n-                                            } else {\n-                                                model.keyValues.clear();\n-                                                model.keyValuePositions.clear();\n-                                            }\n-                                            tempNodes.clear();\n-                                            for (int i = 0; i < keyNodes.size(); i++) {\n-                                                ExpressionNode expressionNode = keyNodes.get(i);\n-                                                if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n-                                                    expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n-                                                    tempNodes.add(expressionNode);\n-                                                }\n-                                            }\n-                                            for (int i = 0; i < tempNodes.size(); i++) {\n-                                                keyNodes.remove(tempNodes.get(i));\n-                                            }\n-                                        }\n-                                        node.intrinsicValue = IntrinsicModel.TRUE;\n-                                        model.intrinsicValue = IntrinsicModel.FALSE;\n-                                        return false;\n-                                    }\n-                                } else if (model.keyColumn == null || m.getIndexValueBlockCapacity(index) > m.getIndexValueBlockCapacity(model.keyColumn)) {\n-                                    model.keyColumn = column;\n-                                    model.keyExcludedValues.clear();\n-                                    model.keyExcludedValuePositions.clear();\n-                                    model.keyExcludedValues.add(value);\n-                                    model.keyExcludedValuePositions.add(b.position);\n-                                    for (int n = 0, k = keyExclNodes.size(); n < k; n++) {\n-                                        keyExclNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;\n-                                    }\n-                                    keyExclNodes.clear();\n-                                    for (int n = 0, k = keyNodes.size(); n < k; n++) {\n-                                        keyNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;\n-                                    }\n-                                    keyNodes.clear();\n-                                    node.intrinsicValue = IntrinsicModel.TRUE;\n-                                }\n-                                keyExclNodes.add(node);\n-                                return true;\n-                            } else if (preferred) {\n-                                keyExclNodes.add(node);\n-                                return false;\n-                            }\n-                        }\n-                        return false;\n-                    default:\n-                        break;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n     private boolean analyzeNotIn(AliasTranslator translator, IntrinsicModel model, ExpressionNode notNode, RecordMetadata m) throws SqlException {\n \n         ExpressionNode node = notNode.rhs;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NzU3Nw==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452167577", "body": "untested", "bodyText": "untested", "bodyHTML": "<p dir=\"auto\">untested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:05:15Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -460,21 +493,78 @@ private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel mod\n                     case ColumnType.LONG:\n                     case ColumnType.INT:\n                         if (m.isColumnIndexed(index)) {\n-\n-                            // check if we are limited by preferred column\n-                            if (preferredKeyColumn != null && !Chars.equals(preferredKeyColumn, column)) {\n+                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n+                            final boolean indexed = m.isColumnIndexed(index);\n+                            if (indexed && preferredKeyColumn == null) {\n+                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n+                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen\n+                                        // so we have to clear all other key values\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.clear();\n+                                            model.keyExcludedValuePositions.clear();\n+                                            model.keyExcludedValues.add(value);\n+                                            model.keyExcludedValuePositions.add(b.position);\n+                                            return true;\n+                                        }\n+                                        node.intrinsicValue = IntrinsicModel.TRUE;\n+                                    } else {\n+                                        if (model.keyValues.contains(value)) {\n+                                            if (model.keyValues.size() > 1) {\n+                                                int removedIndex = model.keyValues.remove(value);", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bb121915cd17efc3c07f9529e0acadbf92816e8", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..6d705baab 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -506,9 +508,9 @@ final class WhereClauseParser implements Mutable {\n                                             model.keyExcludedValuePositions.clear();\n                                             model.keyExcludedValues.add(value);\n                                             model.keyExcludedValuePositions.add(b.position);\n+                                            node.intrinsicValue = IntrinsicModel.TRUE;\n                                             return true;\n                                         }\n-                                        node.intrinsicValue = IntrinsicModel.TRUE;\n                                     } else {\n                                         if (model.keyValues.contains(value)) {\n                                             if (model.keyValues.size() > 1) {\n", "next_change": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 6d705baab..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -470,109 +541,6 @@ final class WhereClauseParser implements Mutable {\n                 || analyzeNotEquals0(translator, model, node, node.rhs, node.lhs, m);\n     }\n \n-    private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel model, ExpressionNode node, ExpressionNode a, ExpressionNode b, RecordMetadata m) throws SqlException {\n-\n-        if (Chars.equals(a.token, b.token)) {\n-            model.intrinsicValue = IntrinsicModel.FALSE;\n-            return true;\n-        }\n-\n-        if (a.type == ExpressionNode.LITERAL && b.type == ExpressionNode.CONSTANT) {\n-            if (isTimestamp(a)) {\n-                model.subtractIntervals(b.token, 1, b.token.length() - 1, b.position);\n-                node.intrinsicValue = IntrinsicModel.TRUE;\n-                return true;\n-            } else {\n-                CharSequence column = translator.translateAlias(a.token);\n-                int index = m.getColumnIndexQuiet(column);\n-                if (index == -1) {\n-                    throw SqlException.invalidColumn(a.position, a.token);\n-                }\n-\n-                switch (m.getColumnType(index)) {\n-                    case ColumnType.SYMBOL:\n-                    case ColumnType.STRING:\n-                    case ColumnType.LONG:\n-                    case ColumnType.INT:\n-                        if (m.isColumnIndexed(index)) {\n-                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n-                            final boolean indexed = m.isColumnIndexed(index);\n-                            if (indexed && preferredKeyColumn == null) {\n-                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n-                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n-                                    if (model.keyExcludedValues.contains(value)) {\n-                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen\n-                                        // so we have to clear all other key values\n-                                        if (model.keyExcludedValues.size() > 1) {\n-                                            model.keyExcludedValues.clear();\n-                                            model.keyExcludedValuePositions.clear();\n-                                            model.keyExcludedValues.add(value);\n-                                            model.keyExcludedValuePositions.add(b.position);\n-                                            node.intrinsicValue = IntrinsicModel.TRUE;\n-                                            return true;\n-                                        }\n-                                    } else {\n-                                        if (model.keyValues.contains(value)) {\n-                                            if (model.keyValues.size() > 1) {\n-                                                int removedIndex = model.keyValues.remove(value);\n-                                                if (removedIndex > -1) {\n-                                                    model.keyValuePositions.removeIndex(index);\n-                                                }\n-                                                model.keyValuePositions.remove(b.position);\n-                                            } else {\n-                                                model.keyValues.clear();\n-                                                model.keyValuePositions.clear();\n-                                            }\n-                                            tempNodes.clear();\n-                                            for (int i = 0, size = keyNodes.size(); i < size; i++) {\n-                                                ExpressionNode expressionNode = keyNodes.get(i);\n-                                                if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n-                                                    expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n-                                                    tempNodes.add(expressionNode);\n-                                                }\n-                                            }\n-                                            for (int i = 0, size = tempNodes.size(); i < size; i++) {\n-                                                keyNodes.remove(tempNodes.get(i));\n-                                            }\n-                                        }\n-                                        node.intrinsicValue = IntrinsicModel.TRUE;\n-                                        model.intrinsicValue = IntrinsicModel.FALSE;\n-                                        return false;\n-                                    }\n-                                } else if (model.keyColumn == null || m.getIndexValueBlockCapacity(index) > m.getIndexValueBlockCapacity(model.keyColumn)) {\n-                                    model.keyColumn = column;\n-                                    model.keyValues.clear();\n-                                    model.keyValuePositions.clear();\n-                                    model.keyExcludedValues.clear();\n-                                    model.keyExcludedValuePositions.clear();\n-                                    model.keyExcludedValues.add(value);\n-                                    model.keyExcludedValuePositions.add(b.position);\n-                                    for (int n = 0, k = keyExclNodes.size(); n < k; n++) {\n-                                        keyExclNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;\n-                                    }\n-                                    keyExclNodes.clear();\n-                                    for (int n = 0, k = keyNodes.size(); n < k; n++) {\n-                                        keyNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;\n-                                    }\n-                                    keyNodes.clear();\n-                                    node.intrinsicValue = IntrinsicModel.TRUE;\n-                                }\n-                                keyExclNodes.add(node);\n-                                return true;\n-                            } else if (preferred) {\n-                                keyExclNodes.add(node);\n-                                return false;\n-                            }\n-                        }\n-                        return false;\n-                    default:\n-                        break;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n     private boolean analyzeNotIn(AliasTranslator translator, IntrinsicModel model, ExpressionNode notNode, RecordMetadata m) throws SqlException {\n \n         ExpressionNode node = notNode.rhs;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2ODAxMQ==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452168011", "body": "untested", "bodyText": "untested", "bodyHTML": "<p dir=\"auto\">untested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:06:00Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -460,21 +493,78 @@ private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel mod\n                     case ColumnType.LONG:\n                     case ColumnType.INT:\n                         if (m.isColumnIndexed(index)) {\n-\n-                            // check if we are limited by preferred column\n-                            if (preferredKeyColumn != null && !Chars.equals(preferredKeyColumn, column)) {\n+                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n+                            final boolean indexed = m.isColumnIndexed(index);\n+                            if (indexed && preferredKeyColumn == null) {\n+                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n+                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n+                                    if (model.keyExcludedValues.contains(value)) {\n+                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen\n+                                        // so we have to clear all other key values\n+                                        if (model.keyExcludedValues.size() > 1) {\n+                                            model.keyExcludedValues.clear();\n+                                            model.keyExcludedValuePositions.clear();\n+                                            model.keyExcludedValues.add(value);\n+                                            model.keyExcludedValuePositions.add(b.position);\n+                                            return true;\n+                                        }\n+                                        node.intrinsicValue = IntrinsicModel.TRUE;\n+                                    } else {\n+                                        if (model.keyValues.contains(value)) {\n+                                            if (model.keyValues.size() > 1) {\n+                                                int removedIndex = model.keyValues.remove(value);\n+                                                if (removedIndex > -1) {\n+                                                    model.keyValuePositions.removeIndex(index);\n+                                                }\n+                                                model.keyValuePositions.remove(b.position);\n+                                            } else {\n+                                                model.keyValues.clear();\n+                                                model.keyValuePositions.clear();\n+                                            }\n+                                            tempNodes.clear();\n+                                            for (int i = 0; i < keyNodes.size(); i++) {\n+                                                ExpressionNode expressionNode = keyNodes.get(i);\n+                                                if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n+                                                    expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n+                                                    tempNodes.add(expressionNode);\n+                                                }\n+                                            }\n+                                            for (int i = 0; i < tempNodes.size(); i++) {\n+                                                keyNodes.remove(tempNodes.get(i));\n+                                            }\n+                                        }\n+                                        node.intrinsicValue = IntrinsicModel.TRUE;\n+                                        model.intrinsicValue = IntrinsicModel.FALSE;\n+                                        return false;\n+                                    }\n+                                } else if (model.keyColumn == null || m.getIndexValueBlockCapacity(index) > m.getIndexValueBlockCapacity(model.keyColumn)) {\n+                                    model.keyColumn = column;\n+                                    model.keyExcludedValues.clear();\n+                                    model.keyExcludedValuePositions.clear();\n+                                    model.keyExcludedValues.add(value);\n+                                    model.keyExcludedValuePositions.add(b.position);\n+                                    for (int n = 0, k = keyExclNodes.size(); n < k; n++) {\n+                                        keyExclNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;\n+                                    }\n+                                    keyExclNodes.clear();\n+                                    for (int n = 0, k = keyNodes.size(); n < k; n++) {\n+                                        keyNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -468,107 +541,6 @@ final class WhereClauseParser implements Mutable {\n                 || analyzeNotEquals0(translator, model, node, node.rhs, node.lhs, m);\n     }\n \n-    private boolean analyzeNotEquals0(AliasTranslator translator, IntrinsicModel model, ExpressionNode node, ExpressionNode a, ExpressionNode b, RecordMetadata m) throws SqlException {\n-\n-        if (Chars.equals(a.token, b.token)) {\n-            model.intrinsicValue = IntrinsicModel.FALSE;\n-            return true;\n-        }\n-\n-        if (a.type == ExpressionNode.LITERAL && b.type == ExpressionNode.CONSTANT) {\n-            if (isTimestamp(a)) {\n-                model.subtractIntervals(b.token, 1, b.token.length() - 1, b.position);\n-                node.intrinsicValue = IntrinsicModel.TRUE;\n-                return true;\n-            } else {\n-                CharSequence column = translator.translateAlias(a.token);\n-                int index = m.getColumnIndexQuiet(column);\n-                if (index == -1) {\n-                    throw SqlException.invalidColumn(a.position, a.token);\n-                }\n-\n-                switch (m.getColumnType(index)) {\n-                    case ColumnType.SYMBOL:\n-                    case ColumnType.STRING:\n-                    case ColumnType.LONG:\n-                    case ColumnType.INT:\n-                        if (m.isColumnIndexed(index)) {\n-                            final boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, column);\n-                            final boolean indexed = m.isColumnIndexed(index);\n-                            if (indexed && preferredKeyColumn == null) {\n-                                CharSequence value = isNullKeyword(b.token) ? null : unquote(b.token);\n-                                if (Chars.equalsIgnoreCaseNc(model.keyColumn, column)) {\n-                                    if (model.keyExcludedValues.contains(value)) {\n-                                        // when we have \"x not in ('a,'b') and x != 'a')\" the x='b' can never happen\n-                                        // so we have to clear all other key values\n-                                        if (model.keyExcludedValues.size() > 1) {\n-                                            model.keyExcludedValues.clear();\n-                                            model.keyExcludedValuePositions.clear();\n-                                            model.keyExcludedValues.add(value);\n-                                            model.keyExcludedValuePositions.add(b.position);\n-                                            return true;\n-                                        }\n-                                        node.intrinsicValue = IntrinsicModel.TRUE;\n-                                    } else {\n-                                        if (model.keyValues.contains(value)) {\n-                                            if (model.keyValues.size() > 1) {\n-                                                int removedIndex = model.keyValues.remove(value);\n-                                                if (removedIndex > -1) {\n-                                                    model.keyValuePositions.removeIndex(index);\n-                                                }\n-                                                model.keyValuePositions.remove(b.position);\n-                                            } else {\n-                                                model.keyValues.clear();\n-                                                model.keyValuePositions.clear();\n-                                            }\n-                                            tempNodes.clear();\n-                                            for (int i = 0; i < keyNodes.size(); i++) {\n-                                                ExpressionNode expressionNode = keyNodes.get(i);\n-                                                if (Chars.equals(expressionNode.lhs.token, b.token) || Chars.equals(expressionNode.rhs.token, b.token)) {\n-                                                    expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n-                                                    tempNodes.add(expressionNode);\n-                                                }\n-                                            }\n-                                            for (int i = 0; i < tempNodes.size(); i++) {\n-                                                keyNodes.remove(tempNodes.get(i));\n-                                            }\n-                                        }\n-                                        node.intrinsicValue = IntrinsicModel.TRUE;\n-                                        model.intrinsicValue = IntrinsicModel.FALSE;\n-                                        return false;\n-                                    }\n-                                } else if (model.keyColumn == null || m.getIndexValueBlockCapacity(index) > m.getIndexValueBlockCapacity(model.keyColumn)) {\n-                                    model.keyColumn = column;\n-                                    model.keyExcludedValues.clear();\n-                                    model.keyExcludedValuePositions.clear();\n-                                    model.keyExcludedValues.add(value);\n-                                    model.keyExcludedValuePositions.add(b.position);\n-                                    for (int n = 0, k = keyExclNodes.size(); n < k; n++) {\n-                                        keyExclNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;\n-                                    }\n-                                    keyExclNodes.clear();\n-                                    for (int n = 0, k = keyNodes.size(); n < k; n++) {\n-                                        keyNodes.getQuick(n).intrinsicValue = IntrinsicModel.UNDEFINED;\n-                                    }\n-                                    keyNodes.clear();\n-                                    node.intrinsicValue = IntrinsicModel.TRUE;\n-                                }\n-                                keyExclNodes.add(node);\n-                                return true;\n-                            } else if (preferred) {\n-                                keyExclNodes.add(node);\n-                                return false;\n-                            }\n-                        }\n-                        return false;\n-                    default:\n-                        break;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n     private boolean analyzeNotIn(AliasTranslator translator, IntrinsicModel model, ExpressionNode notNode, RecordMetadata m) throws SqlException {\n \n         ExpressionNode node = notNode.rhs;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2ODMwOQ==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452168309", "body": "untested", "bodyText": "untested", "bodyHTML": "<p dir=\"auto\">untested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:06:35Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -548,16 +638,79 @@ private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, E\n         return false;\n     }\n \n-    private void analyzeNotListOfValues(CharSequence columnName, RecordMetadata m, ExpressionNode notNode) {\n-        final int columnIndex = m.getColumnIndex(columnName);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (m.getColumnType(columnIndex)) {\n+        switch (meta.getColumnType(columnIndex)) {\n             case ColumnType.SYMBOL:\n             case ColumnType.STRING:\n             case ColumnType.LONG:\n             case ColumnType.INT:\n-                if (m.isColumnIndexed(columnIndex) && (preferredKeyColumn == null || Chars.equals(preferredKeyColumn, columnName))) {\n-                    keyExclNodes.add(notNode);\n+\n+                boolean newColumn = true;\n+\n+                if (model.keyColumn != null\n+                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                    return;", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -589,132 +561,123 @@ final class WhereClauseParser implements Mutable {\n             throw SqlException.invalidColumn(col.position, col.token);\n         }\n \n-        boolean ok = analyzeNotInInterval(model, col, node);\n+        boolean ok = analyzeInInterval(model, col, node, true);\n         if (ok) {\n             notNode.intrinsicValue = IntrinsicModel.TRUE;\n         } else {\n-            analyzeNotListOfValues(model, column, m, notNode);\n+            analyzeNotListOfValues(model, column, m, node, notNode);\n         }\n \n         return ok;\n     }\n \n-    private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, ExpressionNode in) throws SqlException {\n-        if (!isTimestamp(col)) {\n-            return false;\n-        }\n-\n-        if (in.paramCount > 3) {\n-            throw SqlException.$(in.args.getQuick(0).position, \"Too many args\");\n-        }\n-\n-        if (in.paramCount < 3) {\n-            throw SqlException.$(in.position, \"Too few args\");\n-        }\n-\n-        ExpressionNode lo = in.args.getQuick(1);\n-        ExpressionNode hi = in.args.getQuick(0);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node, ExpressionNode notNode) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n+        boolean newColumn = true;\n+        boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, columnName);\n \n-        if (lo.type == ExpressionNode.CONSTANT && hi.type == ExpressionNode.CONSTANT) {\n-            long loMillis;\n-            long hiMillis;\n+        if (preferred || (preferredKeyColumn == null && meta.isColumnIndexed(columnIndex))) {\n \n-            try {\n-                loMillis = TimestampFormatUtils.tryParse(lo.token, 1, lo.token.length() - 1);\n-            } catch (NumericException ignore) {\n-                throw SqlException.invalidDate(lo.position);\n-            }\n \n-            try {\n-                hiMillis = TimestampFormatUtils.tryParse(hi.token, 1, hi.token.length() - 1);\n-            } catch (NumericException ignore) {\n-                throw SqlException.invalidDate(hi.position);\n+            if (model.keyColumn != null\n+                    && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                    && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                return;\n             }\n \n-            model.subtractIntervals(loMillis, hiMillis);\n-            in.intrinsicValue = IntrinsicModel.TRUE;\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n-        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (meta.getColumnType(columnIndex)) {\n-            case ColumnType.SYMBOL:\n-            case ColumnType.STRING:\n-            case ColumnType.LONG:\n-            case ColumnType.INT:\n-\n-                boolean newColumn = true;\n+            int i = node.paramCount - 1;\n+            tempKeys.clear();\n+            tempPos.clear();\n \n-                if (model.keyColumn != null\n-                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n-                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+            // collect and analyze values of indexed field\n+            // if any of values is not an indexed constant - bail out\n+            if (i == 1) {\n+                if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {\n                     return;\n                 }\n-\n-\n-                int i = node.paramCount - 1;\n-                tempKeys.clear();\n-                tempPos.clear();\n-\n-                // collect and analyze values of indexed field\n-                // if any of values is not an indexed constant - bail out\n-                if (i == 1) {\n-                    if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {\n+                if (tempKeys.add(unquote(node.rhs.token))) {\n+                    tempPos.add(node.position);\n+                }\n+            } else {\n+                for (i--; i > -1; i--) {\n+                    ExpressionNode c = node.args.getQuick(i);\n+                    if (c.type != ExpressionNode.CONSTANT) {\n                         return;\n                     }\n-                    if (tempKeys.add(unquote(node.rhs.token))) {\n-                        tempPos.add(node.position);\n-                    }\n-                } else {\n-                    for (i--; i > -1; i--) {\n-                        ExpressionNode c = node.args.getQuick(i);\n-                        if (c.type != ExpressionNode.CONSTANT) {\n-                            return;\n-                        }\n \n-                        if (isNullKeyword(c.token)) {\n-                            if (tempKeys.add(null)) {\n-                                tempPos.add(c.position);\n-                            }\n-                        } else {\n-                            if (tempKeys.add(unquote(c.token))) {\n-                                tempPos.add(c.position);\n-                            }\n+                    if (isNullKeyword(c.token)) {\n+                        if (tempKeys.add(null)) {\n+                            tempPos.add(c.position);\n+                        }\n+                    } else {\n+                        if (tempKeys.add(unquote(c.token))) {\n+                            tempPos.add(c.position);\n                         }\n                     }\n                 }\n+            }\n \n-                // clear values if this is new column\n-                // and reset intrinsic values on nodes associated with old column\n-                if (newColumn) {\n-                    model.keyExcludedValues.clear();\n-                    model.keyExcludedValuePositions.clear();\n+            // clear values if this is new column\n+            // and reset intrinsic values on nodes associated with old column\n+            if (newColumn) {\n+                model.keyExcludedValues.clear();\n+                model.keyExcludedValuePositions.clear();\n+                model.keyExcludedValues.addAll(tempKeys);\n+                model.keyExcludedValuePositions.addAll(tempPos);\n+                revertProcessedNodes(keyExclNodes, model, columnName, notNode);\n+                return;\n+            } else {\n+                if (model.keyExcludedValues.size() == 0) {\n                     model.keyExcludedValues.addAll(tempKeys);\n                     model.keyExcludedValuePositions.addAll(tempPos);\n-                    revertProcessedNodes(keyExclNodes, model, columnName, node);\n-                    return;\n-                } else {\n-                    if (model.keyExcludedValues.size() == 0) {\n-                        model.keyExcludedValues.addAll(tempKeys);\n-                        model.keyExcludedValuePositions.addAll(tempPos);\n-                    }\n                 }\n+            }\n \n-                if (model.keySubQuery == null) {\n-                    // calculate overlap of values\n-                    replaceAllWithOverlap(model, false);\n+            if (model.keySubQuery == null) {\n+                // calculate overlap of values\n+                replaceAllWithOverlap(model, false);\n \n-                    keyExclNodes.add(node);\n-                    node.intrinsicValue = IntrinsicModel.TRUE;\n-                    return;\n-                }\n-                break;\n+                keyExclNodes.add(notNode);\n+                notNode.intrinsicValue = IntrinsicModel.TRUE;\n+            }\n+        }\n+    }\n+\n+    private boolean removeAndIntrinsics(AliasTranslator translator, IntrinsicModel model, ExpressionNode node, RecordMetadata m) throws SqlException {\n+        switch (intrinsicOps.get(node.token)) {\n+            case INTRINSIC_OP_IN:\n+                return analyzeIn(translator, model, node, m);\n+            case INTRINSIC_OP_GREATER:\n+                return analyzeGreater(model, node, false);\n+            case INTRINSIC_OP_GREATER_EQ:\n+                return analyzeGreater(model, node, true);\n+            case INTRINSIC_OP_LESS:\n+                return analyzeLess(model, node, false);\n+            case INTRINSIC_OP_LESS_EQ:\n+                return analyzeLess(model, node, true);\n+            case INTRINSIC_OP_EQUAL:\n+                return analyzeEquals(translator, model, node, m);\n+            case INTRINSIC_OP_NOT_EQ:\n+                return analyzeNotEquals(translator, model, node, m);\n+            case INTRINSIC_OP_NOT:\n+                return isInKeyword(node.rhs.token) && analyzeNotIn(translator, model, node, m);\n             default:\n-                break;\n+                return false;\n+        }\n+    }\n+\n+    private void removeNodes(ExpressionNode b, ObjList<ExpressionNode> nodes) {\n+        tempNodes.clear();\n+        for (int i = 0, size = nodes.size(); i < size; i++) {\n+            ExpressionNode expressionNode = nodes.get(i);\n+            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n+                expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n+                tempNodes.add(expressionNode);\n+            }\n+        }\n+        for (int i = 0, size = tempNodes.size(); i < size; i++) {\n+            nodes.remove(tempNodes.get(i));\n         }\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2ODU2Mg==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452168562", "body": "untested", "bodyText": "untested", "bodyHTML": "<p dir=\"auto\">untested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:07:01Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -548,16 +638,79 @@ private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, E\n         return false;\n     }\n \n-    private void analyzeNotListOfValues(CharSequence columnName, RecordMetadata m, ExpressionNode notNode) {\n-        final int columnIndex = m.getColumnIndex(columnName);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (m.getColumnType(columnIndex)) {\n+        switch (meta.getColumnType(columnIndex)) {\n             case ColumnType.SYMBOL:\n             case ColumnType.STRING:\n             case ColumnType.LONG:\n             case ColumnType.INT:\n-                if (m.isColumnIndexed(columnIndex) && (preferredKeyColumn == null || Chars.equals(preferredKeyColumn, columnName))) {\n-                    keyExclNodes.add(notNode);\n+\n+                boolean newColumn = true;\n+\n+                if (model.keyColumn != null\n+                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                    return;\n+                }\n+\n+\n+                int i = node.paramCount - 1;\n+                tempKeys.clear();\n+                tempPos.clear();\n+\n+                // collect and analyze values of indexed field\n+                // if any of values is not an indexed constant - bail out\n+                if (i == 1) {\n+                    if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -589,132 +561,123 @@ final class WhereClauseParser implements Mutable {\n             throw SqlException.invalidColumn(col.position, col.token);\n         }\n \n-        boolean ok = analyzeNotInInterval(model, col, node);\n+        boolean ok = analyzeInInterval(model, col, node, true);\n         if (ok) {\n             notNode.intrinsicValue = IntrinsicModel.TRUE;\n         } else {\n-            analyzeNotListOfValues(model, column, m, notNode);\n+            analyzeNotListOfValues(model, column, m, node, notNode);\n         }\n \n         return ok;\n     }\n \n-    private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, ExpressionNode in) throws SqlException {\n-        if (!isTimestamp(col)) {\n-            return false;\n-        }\n-\n-        if (in.paramCount > 3) {\n-            throw SqlException.$(in.args.getQuick(0).position, \"Too many args\");\n-        }\n-\n-        if (in.paramCount < 3) {\n-            throw SqlException.$(in.position, \"Too few args\");\n-        }\n-\n-        ExpressionNode lo = in.args.getQuick(1);\n-        ExpressionNode hi = in.args.getQuick(0);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node, ExpressionNode notNode) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n+        boolean newColumn = true;\n+        boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, columnName);\n \n-        if (lo.type == ExpressionNode.CONSTANT && hi.type == ExpressionNode.CONSTANT) {\n-            long loMillis;\n-            long hiMillis;\n+        if (preferred || (preferredKeyColumn == null && meta.isColumnIndexed(columnIndex))) {\n \n-            try {\n-                loMillis = TimestampFormatUtils.tryParse(lo.token, 1, lo.token.length() - 1);\n-            } catch (NumericException ignore) {\n-                throw SqlException.invalidDate(lo.position);\n-            }\n \n-            try {\n-                hiMillis = TimestampFormatUtils.tryParse(hi.token, 1, hi.token.length() - 1);\n-            } catch (NumericException ignore) {\n-                throw SqlException.invalidDate(hi.position);\n+            if (model.keyColumn != null\n+                    && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                    && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                return;\n             }\n \n-            model.subtractIntervals(loMillis, hiMillis);\n-            in.intrinsicValue = IntrinsicModel.TRUE;\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n-        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (meta.getColumnType(columnIndex)) {\n-            case ColumnType.SYMBOL:\n-            case ColumnType.STRING:\n-            case ColumnType.LONG:\n-            case ColumnType.INT:\n-\n-                boolean newColumn = true;\n+            int i = node.paramCount - 1;\n+            tempKeys.clear();\n+            tempPos.clear();\n \n-                if (model.keyColumn != null\n-                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n-                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+            // collect and analyze values of indexed field\n+            // if any of values is not an indexed constant - bail out\n+            if (i == 1) {\n+                if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {\n                     return;\n                 }\n-\n-\n-                int i = node.paramCount - 1;\n-                tempKeys.clear();\n-                tempPos.clear();\n-\n-                // collect and analyze values of indexed field\n-                // if any of values is not an indexed constant - bail out\n-                if (i == 1) {\n-                    if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {\n+                if (tempKeys.add(unquote(node.rhs.token))) {\n+                    tempPos.add(node.position);\n+                }\n+            } else {\n+                for (i--; i > -1; i--) {\n+                    ExpressionNode c = node.args.getQuick(i);\n+                    if (c.type != ExpressionNode.CONSTANT) {\n                         return;\n                     }\n-                    if (tempKeys.add(unquote(node.rhs.token))) {\n-                        tempPos.add(node.position);\n-                    }\n-                } else {\n-                    for (i--; i > -1; i--) {\n-                        ExpressionNode c = node.args.getQuick(i);\n-                        if (c.type != ExpressionNode.CONSTANT) {\n-                            return;\n-                        }\n \n-                        if (isNullKeyword(c.token)) {\n-                            if (tempKeys.add(null)) {\n-                                tempPos.add(c.position);\n-                            }\n-                        } else {\n-                            if (tempKeys.add(unquote(c.token))) {\n-                                tempPos.add(c.position);\n-                            }\n+                    if (isNullKeyword(c.token)) {\n+                        if (tempKeys.add(null)) {\n+                            tempPos.add(c.position);\n+                        }\n+                    } else {\n+                        if (tempKeys.add(unquote(c.token))) {\n+                            tempPos.add(c.position);\n                         }\n                     }\n                 }\n+            }\n \n-                // clear values if this is new column\n-                // and reset intrinsic values on nodes associated with old column\n-                if (newColumn) {\n-                    model.keyExcludedValues.clear();\n-                    model.keyExcludedValuePositions.clear();\n+            // clear values if this is new column\n+            // and reset intrinsic values on nodes associated with old column\n+            if (newColumn) {\n+                model.keyExcludedValues.clear();\n+                model.keyExcludedValuePositions.clear();\n+                model.keyExcludedValues.addAll(tempKeys);\n+                model.keyExcludedValuePositions.addAll(tempPos);\n+                revertProcessedNodes(keyExclNodes, model, columnName, notNode);\n+                return;\n+            } else {\n+                if (model.keyExcludedValues.size() == 0) {\n                     model.keyExcludedValues.addAll(tempKeys);\n                     model.keyExcludedValuePositions.addAll(tempPos);\n-                    revertProcessedNodes(keyExclNodes, model, columnName, node);\n-                    return;\n-                } else {\n-                    if (model.keyExcludedValues.size() == 0) {\n-                        model.keyExcludedValues.addAll(tempKeys);\n-                        model.keyExcludedValuePositions.addAll(tempPos);\n-                    }\n                 }\n+            }\n \n-                if (model.keySubQuery == null) {\n-                    // calculate overlap of values\n-                    replaceAllWithOverlap(model, false);\n+            if (model.keySubQuery == null) {\n+                // calculate overlap of values\n+                replaceAllWithOverlap(model, false);\n \n-                    keyExclNodes.add(node);\n-                    node.intrinsicValue = IntrinsicModel.TRUE;\n-                    return;\n-                }\n-                break;\n+                keyExclNodes.add(notNode);\n+                notNode.intrinsicValue = IntrinsicModel.TRUE;\n+            }\n+        }\n+    }\n+\n+    private boolean removeAndIntrinsics(AliasTranslator translator, IntrinsicModel model, ExpressionNode node, RecordMetadata m) throws SqlException {\n+        switch (intrinsicOps.get(node.token)) {\n+            case INTRINSIC_OP_IN:\n+                return analyzeIn(translator, model, node, m);\n+            case INTRINSIC_OP_GREATER:\n+                return analyzeGreater(model, node, false);\n+            case INTRINSIC_OP_GREATER_EQ:\n+                return analyzeGreater(model, node, true);\n+            case INTRINSIC_OP_LESS:\n+                return analyzeLess(model, node, false);\n+            case INTRINSIC_OP_LESS_EQ:\n+                return analyzeLess(model, node, true);\n+            case INTRINSIC_OP_EQUAL:\n+                return analyzeEquals(translator, model, node, m);\n+            case INTRINSIC_OP_NOT_EQ:\n+                return analyzeNotEquals(translator, model, node, m);\n+            case INTRINSIC_OP_NOT:\n+                return isInKeyword(node.rhs.token) && analyzeNotIn(translator, model, node, m);\n             default:\n-                break;\n+                return false;\n+        }\n+    }\n+\n+    private void removeNodes(ExpressionNode b, ObjList<ExpressionNode> nodes) {\n+        tempNodes.clear();\n+        for (int i = 0, size = nodes.size(); i < size; i++) {\n+            ExpressionNode expressionNode = nodes.get(i);\n+            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n+                expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n+                tempNodes.add(expressionNode);\n+            }\n+        }\n+        for (int i = 0, size = tempNodes.size(); i < size; i++) {\n+            nodes.remove(tempNodes.get(i));\n         }\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2ODg4NQ==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452168885", "body": "untested loop", "bodyText": "untested loop", "bodyHTML": "<p dir=\"auto\">untested loop</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:07:40Z", "path": "core/src/main/java/io/questdb/griffin/WhereClauseParser.java", "diffHunk": "@@ -548,16 +638,79 @@ private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, E\n         return false;\n     }\n \n-    private void analyzeNotListOfValues(CharSequence columnName, RecordMetadata m, ExpressionNode notNode) {\n-        final int columnIndex = m.getColumnIndex(columnName);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (m.getColumnType(columnIndex)) {\n+        switch (meta.getColumnType(columnIndex)) {\n             case ColumnType.SYMBOL:\n             case ColumnType.STRING:\n             case ColumnType.LONG:\n             case ColumnType.INT:\n-                if (m.isColumnIndexed(columnIndex) && (preferredKeyColumn == null || Chars.equals(preferredKeyColumn, columnName))) {\n-                    keyExclNodes.add(notNode);\n+\n+                boolean newColumn = true;\n+\n+                if (model.keyColumn != null\n+                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                    return;\n+                }\n+\n+\n+                int i = node.paramCount - 1;\n+                tempKeys.clear();\n+                tempPos.clear();\n+\n+                // collect and analyze values of indexed field\n+                // if any of values is not an indexed constant - bail out\n+                if (i == 1) {\n+                    if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {\n+                        return;\n+                    }\n+                    if (tempKeys.add(unquote(node.rhs.token))) {\n+                        tempPos.add(node.position);\n+                    }\n+                } else {\n+                    for (i--; i > -1; i--) {", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "changed_code": [{"header": "diff --git a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\nindex 29fd0833b..9427b914a 100644\n--- a/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n+++ b/core/src/main/java/io/questdb/griffin/WhereClauseParser.java\n", "chunk": "@@ -589,132 +561,123 @@ final class WhereClauseParser implements Mutable {\n             throw SqlException.invalidColumn(col.position, col.token);\n         }\n \n-        boolean ok = analyzeNotInInterval(model, col, node);\n+        boolean ok = analyzeInInterval(model, col, node, true);\n         if (ok) {\n             notNode.intrinsicValue = IntrinsicModel.TRUE;\n         } else {\n-            analyzeNotListOfValues(model, column, m, notNode);\n+            analyzeNotListOfValues(model, column, m, node, notNode);\n         }\n \n         return ok;\n     }\n \n-    private boolean analyzeNotInInterval(IntrinsicModel model, ExpressionNode col, ExpressionNode in) throws SqlException {\n-        if (!isTimestamp(col)) {\n-            return false;\n-        }\n-\n-        if (in.paramCount > 3) {\n-            throw SqlException.$(in.args.getQuick(0).position, \"Too many args\");\n-        }\n-\n-        if (in.paramCount < 3) {\n-            throw SqlException.$(in.position, \"Too few args\");\n-        }\n-\n-        ExpressionNode lo = in.args.getQuick(1);\n-        ExpressionNode hi = in.args.getQuick(0);\n+    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node, ExpressionNode notNode) {\n+        final int columnIndex = meta.getColumnIndex(columnName);\n+        boolean newColumn = true;\n+        boolean preferred = Chars.equalsIgnoreCaseNc(preferredKeyColumn, columnName);\n \n-        if (lo.type == ExpressionNode.CONSTANT && hi.type == ExpressionNode.CONSTANT) {\n-            long loMillis;\n-            long hiMillis;\n+        if (preferred || (preferredKeyColumn == null && meta.isColumnIndexed(columnIndex))) {\n \n-            try {\n-                loMillis = TimestampFormatUtils.tryParse(lo.token, 1, lo.token.length() - 1);\n-            } catch (NumericException ignore) {\n-                throw SqlException.invalidDate(lo.position);\n-            }\n \n-            try {\n-                hiMillis = TimestampFormatUtils.tryParse(hi.token, 1, hi.token.length() - 1);\n-            } catch (NumericException ignore) {\n-                throw SqlException.invalidDate(hi.position);\n+            if (model.keyColumn != null\n+                    && (newColumn = !Chars.equals(model.keyColumn, columnName))\n+                    && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+                return;\n             }\n \n-            model.subtractIntervals(loMillis, hiMillis);\n-            in.intrinsicValue = IntrinsicModel.TRUE;\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    private void analyzeNotListOfValues(IntrinsicModel model, CharSequence columnName, RecordMetadata meta, ExpressionNode node) {\n-        final int columnIndex = meta.getColumnIndex(columnName);\n \n-        switch (meta.getColumnType(columnIndex)) {\n-            case ColumnType.SYMBOL:\n-            case ColumnType.STRING:\n-            case ColumnType.LONG:\n-            case ColumnType.INT:\n-\n-                boolean newColumn = true;\n+            int i = node.paramCount - 1;\n+            tempKeys.clear();\n+            tempPos.clear();\n \n-                if (model.keyColumn != null\n-                        && (newColumn = !Chars.equals(model.keyColumn, columnName))\n-                        && meta.getIndexValueBlockCapacity(columnIndex) <= meta.getIndexValueBlockCapacity(model.keyColumn)) {\n+            // collect and analyze values of indexed field\n+            // if any of values is not an indexed constant - bail out\n+            if (i == 1) {\n+                if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {\n                     return;\n                 }\n-\n-\n-                int i = node.paramCount - 1;\n-                tempKeys.clear();\n-                tempPos.clear();\n-\n-                // collect and analyze values of indexed field\n-                // if any of values is not an indexed constant - bail out\n-                if (i == 1) {\n-                    if (node.rhs == null || node.rhs.type != ExpressionNode.CONSTANT) {\n+                if (tempKeys.add(unquote(node.rhs.token))) {\n+                    tempPos.add(node.position);\n+                }\n+            } else {\n+                for (i--; i > -1; i--) {\n+                    ExpressionNode c = node.args.getQuick(i);\n+                    if (c.type != ExpressionNode.CONSTANT) {\n                         return;\n                     }\n-                    if (tempKeys.add(unquote(node.rhs.token))) {\n-                        tempPos.add(node.position);\n-                    }\n-                } else {\n-                    for (i--; i > -1; i--) {\n-                        ExpressionNode c = node.args.getQuick(i);\n-                        if (c.type != ExpressionNode.CONSTANT) {\n-                            return;\n-                        }\n \n-                        if (isNullKeyword(c.token)) {\n-                            if (tempKeys.add(null)) {\n-                                tempPos.add(c.position);\n-                            }\n-                        } else {\n-                            if (tempKeys.add(unquote(c.token))) {\n-                                tempPos.add(c.position);\n-                            }\n+                    if (isNullKeyword(c.token)) {\n+                        if (tempKeys.add(null)) {\n+                            tempPos.add(c.position);\n+                        }\n+                    } else {\n+                        if (tempKeys.add(unquote(c.token))) {\n+                            tempPos.add(c.position);\n                         }\n                     }\n                 }\n+            }\n \n-                // clear values if this is new column\n-                // and reset intrinsic values on nodes associated with old column\n-                if (newColumn) {\n-                    model.keyExcludedValues.clear();\n-                    model.keyExcludedValuePositions.clear();\n+            // clear values if this is new column\n+            // and reset intrinsic values on nodes associated with old column\n+            if (newColumn) {\n+                model.keyExcludedValues.clear();\n+                model.keyExcludedValuePositions.clear();\n+                model.keyExcludedValues.addAll(tempKeys);\n+                model.keyExcludedValuePositions.addAll(tempPos);\n+                revertProcessedNodes(keyExclNodes, model, columnName, notNode);\n+                return;\n+            } else {\n+                if (model.keyExcludedValues.size() == 0) {\n                     model.keyExcludedValues.addAll(tempKeys);\n                     model.keyExcludedValuePositions.addAll(tempPos);\n-                    revertProcessedNodes(keyExclNodes, model, columnName, node);\n-                    return;\n-                } else {\n-                    if (model.keyExcludedValues.size() == 0) {\n-                        model.keyExcludedValues.addAll(tempKeys);\n-                        model.keyExcludedValuePositions.addAll(tempPos);\n-                    }\n                 }\n+            }\n \n-                if (model.keySubQuery == null) {\n-                    // calculate overlap of values\n-                    replaceAllWithOverlap(model, false);\n+            if (model.keySubQuery == null) {\n+                // calculate overlap of values\n+                replaceAllWithOverlap(model, false);\n \n-                    keyExclNodes.add(node);\n-                    node.intrinsicValue = IntrinsicModel.TRUE;\n-                    return;\n-                }\n-                break;\n+                keyExclNodes.add(notNode);\n+                notNode.intrinsicValue = IntrinsicModel.TRUE;\n+            }\n+        }\n+    }\n+\n+    private boolean removeAndIntrinsics(AliasTranslator translator, IntrinsicModel model, ExpressionNode node, RecordMetadata m) throws SqlException {\n+        switch (intrinsicOps.get(node.token)) {\n+            case INTRINSIC_OP_IN:\n+                return analyzeIn(translator, model, node, m);\n+            case INTRINSIC_OP_GREATER:\n+                return analyzeGreater(model, node, false);\n+            case INTRINSIC_OP_GREATER_EQ:\n+                return analyzeGreater(model, node, true);\n+            case INTRINSIC_OP_LESS:\n+                return analyzeLess(model, node, false);\n+            case INTRINSIC_OP_LESS_EQ:\n+                return analyzeLess(model, node, true);\n+            case INTRINSIC_OP_EQUAL:\n+                return analyzeEquals(translator, model, node, m);\n+            case INTRINSIC_OP_NOT_EQ:\n+                return analyzeNotEquals(translator, model, node, m);\n+            case INTRINSIC_OP_NOT:\n+                return isInKeyword(node.rhs.token) && analyzeNotIn(translator, model, node, m);\n             default:\n-                break;\n+                return false;\n+        }\n+    }\n+\n+    private void removeNodes(ExpressionNode b, ObjList<ExpressionNode> nodes) {\n+        tempNodes.clear();\n+        for (int i = 0, size = nodes.size(); i < size; i++) {\n+            ExpressionNode expressionNode = nodes.get(i);\n+            if ((expressionNode.lhs != null && Chars.equals(expressionNode.lhs.token, b.token)) || (expressionNode.rhs != null && Chars.equals(expressionNode.rhs.token, b.token))) {\n+                expressionNode.intrinsicValue = IntrinsicModel.TRUE;\n+                tempNodes.add(expressionNode);\n+            }\n+        }\n+        for (int i = 0, size = tempNodes.size(); i < size; i++) {\n+            nodes.remove(tempNodes.get(i));\n         }\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2OTg1NQ==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452169855", "body": "untested", "bodyText": "untested", "bodyHTML": "<p dir=\"auto\">untested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:09:31Z", "path": "core/src/main/java/io/questdb/griffin/engine/table/FilterOnExcludedValuesRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.table;\n+\n+import io.questdb.cairo.SymbolMapReaderImpl;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.OrderByMnemonic;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+public class FilterOnExcludedValuesRecordCursorFactory extends AbstractDataFrameRecordCursorFactory {\n+    private final DataFrameRecordCursor cursor;\n+    private final int columnIndex;\n+    private final Function filter;\n+    private final ObjList<RowCursorFactory> cursorFactories;\n+    private final ObjList<CharSequence> keyExcludedValues = new ObjList<>();\n+    private final ObjList<CharSequence> includedValues = new ObjList<>();\n+    private final boolean followedOrderByAdvice;\n+    private final int indexDirection;\n+    private final int maxSymbolNotEqualsCount;\n+\n+    public FilterOnExcludedValuesRecordCursorFactory(\n+            @NotNull RecordMetadata metadata,\n+            @NotNull DataFrameCursorFactory dataFrameCursorFactory,\n+            @NotNull @Transient ObjList<CharSequence> keyValues,\n+            int columnIndex,\n+            @Nullable Function filter,\n+            int orderByMnemonic,\n+            boolean followedOrderByAdvice,\n+            int indexDirection,\n+            @NotNull IntList columnIndexes,\n+            int maxSymbolNotEqualsCount) {\n+        super(metadata, dataFrameCursorFactory);\n+        this.indexDirection = indexDirection;\n+        this.maxSymbolNotEqualsCount = maxSymbolNotEqualsCount;\n+        final int nKeyValues = keyValues.size();\n+        this.keyExcludedValues.addAll(keyValues);\n+        this.columnIndex = columnIndex;\n+        this.filter = filter;\n+        cursorFactories = new ObjList<>(nKeyValues);\n+        if (orderByMnemonic == OrderByMnemonic.ORDER_BY_INVARIANT) {\n+            this.cursor = new DataFrameRecordCursor(new SequentialRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        } else {\n+            this.cursor = new DataFrameRecordCursor(new HeapRowCursorFactory(cursorFactories), false, filter, columnIndexes);", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxOTQxNA==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452219414", "bodyText": "done", "author": "jaugsburger", "createdAt": "2020-07-09T13:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2OTg1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3MDA2OQ==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452170069", "body": "untested", "bodyText": "untested", "bodyHTML": "<p dir=\"auto\">untested</p>", "author": "bluestreak01", "createdAt": "2020-07-09T12:09:59Z", "path": "core/src/main/java/io/questdb/griffin/engine/table/FilterOnExcludedValuesRecordCursorFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.table;\n+\n+import io.questdb.cairo.SymbolMapReaderImpl;\n+import io.questdb.cairo.TableReader;\n+import io.questdb.cairo.sql.*;\n+import io.questdb.griffin.OrderByMnemonic;\n+import io.questdb.griffin.SqlExecutionContext;\n+import io.questdb.std.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+public class FilterOnExcludedValuesRecordCursorFactory extends AbstractDataFrameRecordCursorFactory {\n+    private final DataFrameRecordCursor cursor;\n+    private final int columnIndex;\n+    private final Function filter;\n+    private final ObjList<RowCursorFactory> cursorFactories;\n+    private final ObjList<CharSequence> keyExcludedValues = new ObjList<>();\n+    private final ObjList<CharSequence> includedValues = new ObjList<>();\n+    private final boolean followedOrderByAdvice;\n+    private final int indexDirection;\n+    private final int maxSymbolNotEqualsCount;\n+\n+    public FilterOnExcludedValuesRecordCursorFactory(\n+            @NotNull RecordMetadata metadata,\n+            @NotNull DataFrameCursorFactory dataFrameCursorFactory,\n+            @NotNull @Transient ObjList<CharSequence> keyValues,\n+            int columnIndex,\n+            @Nullable Function filter,\n+            int orderByMnemonic,\n+            boolean followedOrderByAdvice,\n+            int indexDirection,\n+            @NotNull IntList columnIndexes,\n+            int maxSymbolNotEqualsCount) {\n+        super(metadata, dataFrameCursorFactory);\n+        this.indexDirection = indexDirection;\n+        this.maxSymbolNotEqualsCount = maxSymbolNotEqualsCount;\n+        final int nKeyValues = keyValues.size();\n+        this.keyExcludedValues.addAll(keyValues);\n+        this.columnIndex = columnIndex;\n+        this.filter = filter;\n+        cursorFactories = new ObjList<>(nKeyValues);\n+        if (orderByMnemonic == OrderByMnemonic.ORDER_BY_INVARIANT) {\n+            this.cursor = new DataFrameRecordCursor(new SequentialRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        } else {\n+            this.cursor = new DataFrameRecordCursor(new HeapRowCursorFactory(cursorFactories), false, filter, columnIndexes);\n+        }\n+        this.followedOrderByAdvice = followedOrderByAdvice;\n+    }\n+\n+    @Override\n+    public void close() {\n+        Misc.free(filter);\n+        Misc.free(includedValues);\n+        Misc.free(keyExcludedValues);\n+    }\n+\n+    @Override\n+    public boolean followedOrderByAdvice() {\n+        return followedOrderByAdvice;\n+    }\n+\n+    @Override\n+    public boolean recordCursorSupportsRandomAccess() {\n+        return true;\n+    }\n+\n+    public void recalculateIncludedValues(TableReader tableReader) {\n+        final SymbolMapReaderImpl symbolMapReader = (SymbolMapReaderImpl) tableReader.getSymbolMapReader(columnIndex);\n+        for (int i = 0; i < symbolMapReader.size(); i++) {\n+            final CharSequence symbol = symbolMapReader.valueOf(i);\n+            if (keyExcludedValues.indexOf(symbol) < 0 && includedValues.indexOf(symbol) < 0) {\n+                final RowCursorFactory rowCursorFactory;\n+                int symbolKey = symbolMapReader.keyOf(symbol);\n+                if (filter == null) {\n+                    rowCursorFactory = new SymbolIndexRowCursorFactory(columnIndex, symbolKey, cursorFactories.size() == 0, indexDirection);\n+                } else {\n+                    rowCursorFactory = new SymbolIndexFilteredRowCursorFactory(columnIndex, symbolKey, filter, cursorFactories.size() == 0, indexDirection);\n+                }\n+                includedValues.add(Chars.toString(symbol));\n+                cursorFactories.add(rowCursorFactory);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected RecordCursor getCursorInstance(\n+            DataFrameCursor dataFrameCursor,\n+            SqlExecutionContext executionContext\n+    ) {\n+        try (TableReader reader = dataFrameCursor.getTableReader()) {\n+            if (reader.getSymbolMapReader(columnIndex).size() > maxSymbolNotEqualsCount) {\n+                throw ReaderOutOfDateException.INSTANCE;\n+            }\n+        }\n+        this.recalculateIncludedValues(dataFrameCursor.getTableReader());\n+        this.cursor.of(dataFrameCursor, executionContext);\n+        if (filter != null) {\n+            filter.init(this.cursor, executionContext);", "originalCommit": "28f032fe304a4b8f0937663b9b3324e9c3375538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxOTYwMA==", "url": "https://github.com/questdb/questdb/pull/499#discussion_r452219600", "bodyText": "done", "author": "jaugsburger", "createdAt": "2020-07-09T13:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3MDA2OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0def74d576fb1d47951e8afdc6ec8d191d10763e", "url": "https://github.com/questdb/questdb/commit/0def74d576fb1d47951e8afdc6ec8d191d10763e", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T12:56:36Z", "type": "commit"}, {"oid": "c4bf537eae1ee4700e141afc54c6fdcc61abb7ba", "url": "https://github.com/questdb/questdb/commit/c4bf537eae1ee4700e141afc54c6fdcc61abb7ba", "message": "fix(cairo): do not execute filter when it is constant", "committedDate": "2020-07-09T13:24:16Z", "type": "commit"}, {"oid": "302419696b4005143380625c4c691de3e00adb07", "url": "https://github.com/questdb/questdb/commit/302419696b4005143380625c4c691de3e00adb07", "message": "Merge remote-tracking branch 'origin/sym.not.eq.value' into sym.not.eq.value", "committedDate": "2020-07-09T13:25:27Z", "type": "commit"}, {"oid": "b85778286dee17d04ffec7a402187a6fbce3cc8c", "url": "https://github.com/questdb/questdb/commit/b85778286dee17d04ffec7a402187a6fbce3cc8c", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T13:40:04Z", "type": "commit"}, {"oid": "2bb121915cd17efc3c07f9529e0acadbf92816e8", "url": "https://github.com/questdb/questdb/commit/2bb121915cd17efc3c07f9529e0acadbf92816e8", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T17:08:45Z", "type": "commit"}, {"oid": "1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "url": "https://github.com/questdb/questdb/commit/1fe810c5747ee8d46f188d6167b9c25c8d5912a1", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T18:30:01Z", "type": "commit"}, {"oid": "773bb158684179dfb0258a50e4a0cbbf25f55b90", "url": "https://github.com/questdb/questdb/commit/773bb158684179dfb0258a50e4a0cbbf25f55b90", "message": "fix(griffin) - speed up sym !=", "committedDate": "2020-07-09T19:06:12Z", "type": "commit"}]}