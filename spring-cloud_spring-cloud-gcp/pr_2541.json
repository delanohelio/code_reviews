{"pr_number": 2541, "pr_title": "Add query methods that return Slice to DatastoreTemplate to allow pagination", "pr_author": "dmitry-s", "pr_createdAt": "2020-10-06T22:45:51Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541", "merge_commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "timeline": [{"oid": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07", "message": "add DatastoreNextPageAwareResultsIterable", "committedDate": "2020-10-06T22:44:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzODMwMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501138303", "body": "Copyright 2017-2020", "bodyText": "Copyright 2017-2020", "bodyHTML": "<p dir=\"auto\">Copyright 2017-2020</p>", "author": "dzou", "createdAt": "2020-10-07T16:12:36Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.", "originalCommit": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3e46900e24604dda5e6d78a8ff293cdf2941e54", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex e3b6de75..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,51 +0,0 @@\n-/*\n- * Copyright 2019-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-\n-/**\n- * An iterable that contains a cursor for the next page and can be used to determine\n- * if the next page exists.\n- *\n- * @author Dmitry Solomakha\n- */\n-public class DatastoreNextPageAwareResultsIterable<T> implements Iterable<T> {\n-\tfinal DatastoreResultsIterable<T> datastoreResultsIterable;\n-\n-\tfinal boolean hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(DatastoreResultsIterable<T> datastoreResultsIterable, boolean hasNextPage) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.hasNextPage = hasNextPage;\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage;\n-\t}\n-}\n", "next_change": {"commit": "b879f14210745398ae7ed33992b71a056a834dc5", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\nnew file mode 100644\nindex 00000000..545551fb\n--- /dev/null\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n", "chunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n+\tprivate DatastoreResultsIterable datastoreResultsIterable;\n+\n+\tprivate Cursor cursor;\n+\n+\tprivate StructuredQuery structuredQuery;\n+\n+\n+\tprivate Lazy<Boolean> hasNextPage;\n+\n+\tpublic DatastoreNextPageAwareResultsIterable(\n+\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n+\t\t\tCursor cursor,\n+\t\t\tStructuredQuery structuredQuery,\n+\t\t\tDatastoreTemplate datastoreTemplate) {\n+\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n+\t\tthis.cursor = cursor;\n+\t\tthis.structuredQuery = structuredQuery;\n+\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n+\t}\n+\n+\tpublic boolean hasNextPage() {\n+\t\treturn hasNextPage.get();\n+\t}\n+\n+\t@Override\n+\tpublic Iterator<T> iterator() {\n+\t\treturn datastoreResultsIterable.iterator();\n+\t}\n+\n+\t@Override\n+\tpublic Cursor getCursor() {\n+\t\treturn datastoreResultsIterable.getCursor();\n+\t}\n+\n+\t@Override\n+\tpublic Iterable<T> getIterable() {\n+\t\treturn datastoreResultsIterable.getIterable();\n+\t}\n+}\n", "next_change": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex e3b6de75..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,51 +0,0 @@\n-/*\n- * Copyright 2019-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-\n-/**\n- * An iterable that contains a cursor for the next page and can be used to determine\n- * if the next page exists.\n- *\n- * @author Dmitry Solomakha\n- */\n-public class DatastoreNextPageAwareResultsIterable<T> implements Iterable<T> {\n-\tfinal DatastoreResultsIterable<T> datastoreResultsIterable;\n-\n-\tfinal boolean hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(DatastoreResultsIterable<T> datastoreResultsIterable, boolean hasNextPage) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.hasNextPage = hasNextPage;\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage;\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MjgwMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501152803", "body": "I don't think this is quite the right approach; it seems a bit heavyweight to create a new class to hold a boolean.\r\n\r\nAlso the only method that returns this is `nextPageAwareQuery`; however, other query methods such as `query`, `queryIterable`, and `queryByExample` also return `DatastoreResultsIterable` but are not able to take advantage of the next-page-aware feature.\r\n\r\nI would try to get `DatastoreResultsIterable` to have access to the `hasNextPage` somehow.\r\n\r\nI would suggest a couple alternatives:\r\n\r\n1. Is it possible to add a method to DatastoreTemplate like `hasNextPage(Cursor c)` or `hasNextPage(DatastoreResultsIterable i)`? if so, the user can manually check for next page through usage of template.\r\n\r\n2. If the query is cheap, you might as well pay the cost of `nextPageExists(..)` for each DatastoreResultsIterable; and build the `hasNextPage` parameter in there. no need for premature optimization\r\n\r\n3. Add a method called `hasNextPage()` on the `DatastoreResultsIterable` which will run the query of checking if the cursor has a next page. This would require the Iterable obj have reference to the datastore client I suppose.", "bodyText": "I don't think this is quite the right approach; it seems a bit heavyweight to create a new class to hold a boolean.\nAlso the only method that returns this is nextPageAwareQuery; however, other query methods such as query, queryIterable, and queryByExample also return DatastoreResultsIterable but are not able to take advantage of the next-page-aware feature.\nI would try to get DatastoreResultsIterable to have access to the hasNextPage somehow.\nI would suggest a couple alternatives:\n\n\nIs it possible to add a method to DatastoreTemplate like hasNextPage(Cursor c) or hasNextPage(DatastoreResultsIterable i)? if so, the user can manually check for next page through usage of template.\n\n\nIf the query is cheap, you might as well pay the cost of nextPageExists(..) for each DatastoreResultsIterable; and build the hasNextPage parameter in there. no need for premature optimization\n\n\nAdd a method called hasNextPage() on the DatastoreResultsIterable which will run the query of checking if the cursor has a next page. This would require the Iterable obj have reference to the datastore client I suppose.", "bodyHTML": "<p dir=\"auto\">I don't think this is quite the right approach; it seems a bit heavyweight to create a new class to hold a boolean.</p>\n<p dir=\"auto\">Also the only method that returns this is <code>nextPageAwareQuery</code>; however, other query methods such as <code>query</code>, <code>queryIterable</code>, and <code>queryByExample</code> also return <code>DatastoreResultsIterable</code> but are not able to take advantage of the next-page-aware feature.</p>\n<p dir=\"auto\">I would try to get <code>DatastoreResultsIterable</code> to have access to the <code>hasNextPage</code> somehow.</p>\n<p dir=\"auto\">I would suggest a couple alternatives:</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Is it possible to add a method to DatastoreTemplate like <code>hasNextPage(Cursor c)</code> or <code>hasNextPage(DatastoreResultsIterable i)</code>? if so, the user can manually check for next page through usage of template.</p>\n</li>\n<li>\n<p dir=\"auto\">If the query is cheap, you might as well pay the cost of <code>nextPageExists(..)</code> for each DatastoreResultsIterable; and build the <code>hasNextPage</code> parameter in there. no need for premature optimization</p>\n</li>\n<li>\n<p dir=\"auto\">Add a method called <code>hasNextPage()</code> on the <code>DatastoreResultsIterable</code> which will run the query of checking if the cursor has a next page. This would require the Iterable obj have reference to the datastore client I suppose.</p>\n</li>\n</ol>", "author": "dzou", "createdAt": "2020-10-07T16:34:07Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+\n+/**\n+ * An iterable that contains a cursor for the next page and can be used to determine\n+ * if the next page exists.\n+ *\n+ * @author Dmitry Solomakha\n+ */\n+public class DatastoreNextPageAwareResultsIterable<T> implements Iterable<T> {", "originalCommit": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMjMwNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501232306", "bodyText": "+1\nCan we just extend DatastoreResultsIterable?", "author": "meltsufin", "createdAt": "2020-10-07T18:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MjgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "b3e46900e24604dda5e6d78a8ff293cdf2941e54", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex e3b6de75..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,51 +0,0 @@\n-/*\n- * Copyright 2019-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-\n-/**\n- * An iterable that contains a cursor for the next page and can be used to determine\n- * if the next page exists.\n- *\n- * @author Dmitry Solomakha\n- */\n-public class DatastoreNextPageAwareResultsIterable<T> implements Iterable<T> {\n-\tfinal DatastoreResultsIterable<T> datastoreResultsIterable;\n-\n-\tfinal boolean hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(DatastoreResultsIterable<T> datastoreResultsIterable, boolean hasNextPage) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.hasNextPage = hasNextPage;\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage;\n-\t}\n-}\n", "next_change": {"commit": "b879f14210745398ae7ed33992b71a056a834dc5", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\nnew file mode 100644\nindex 00000000..545551fb\n--- /dev/null\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n", "chunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n+\tprivate DatastoreResultsIterable datastoreResultsIterable;\n+\n+\tprivate Cursor cursor;\n+\n+\tprivate StructuredQuery structuredQuery;\n+\n+\n+\tprivate Lazy<Boolean> hasNextPage;\n+\n+\tpublic DatastoreNextPageAwareResultsIterable(\n+\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n+\t\t\tCursor cursor,\n+\t\t\tStructuredQuery structuredQuery,\n+\t\t\tDatastoreTemplate datastoreTemplate) {\n+\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n+\t\tthis.cursor = cursor;\n+\t\tthis.structuredQuery = structuredQuery;\n+\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n+\t}\n+\n+\tpublic boolean hasNextPage() {\n+\t\treturn hasNextPage.get();\n+\t}\n+\n+\t@Override\n+\tpublic Iterator<T> iterator() {\n+\t\treturn datastoreResultsIterable.iterator();\n+\t}\n+\n+\t@Override\n+\tpublic Cursor getCursor() {\n+\t\treturn datastoreResultsIterable.getCursor();\n+\t}\n+\n+\t@Override\n+\tpublic Iterable<T> getIterable() {\n+\t\treturn datastoreResultsIterable.getIterable();\n+\t}\n+}\n", "next_change": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex e3b6de75..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,51 +0,0 @@\n-/*\n- * Copyright 2019-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-\n-/**\n- * An iterable that contains a cursor for the next page and can be used to determine\n- * if the next page exists.\n- *\n- * @author Dmitry Solomakha\n- */\n-public class DatastoreNextPageAwareResultsIterable<T> implements Iterable<T> {\n-\tfinal DatastoreResultsIterable<T> datastoreResultsIterable;\n-\n-\tfinal boolean hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(DatastoreResultsIterable<T> datastoreResultsIterable, boolean hasNextPage) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.hasNextPage = hasNextPage;\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage;\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMzg1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501233851", "body": "Can we just move this code to `hasNextPage` in the `Iterable`?\r\n", "bodyText": "Can we just move this code to hasNextPage in the Iterable?", "bodyHTML": "<p dir=\"auto\">Can we just move this code to <code>hasNextPage</code> in the <code>Iterable</code>?</p>", "author": "meltsufin", "createdAt": "2020-10-07T18:44:24Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -276,6 +277,21 @@ public long count(Class<?> entityClass) {\n \t\treturn resultsIterable;\n \t}\n \n+\t@Override\n+\tpublic <T> DatastoreNextPageAwareResultsIterable<?> nextPageAwareQuery(StructuredQuery query, Class<T> entityClass) {\n+\t\tDatastoreResultsIterable resultsIterable = queryKeysOrEntities(query, entityClass);\n+\n+\t\treturn new DatastoreNextPageAwareResultsIterable(resultsIterable, nextPageExists(query, resultsIterable.getCursor()));\n+\t}\n+\n+\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {", "originalCommit": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4ODI2OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501988269", "bodyText": "Same question as before.", "author": "meltsufin", "createdAt": "2020-10-08T20:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMzg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3e46900e24604dda5e6d78a8ff293cdf2941e54", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex e612966f..068f11a1 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -273,17 +273,17 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n+\t\tif (query instanceof StructuredQuery) {\n+\t\t\tresultsIterable.setHasNextPageQuery(\n+\t\t\t\t\t((StructuredQuery) query).getLimit() != null\n+\t\t\t\t\t\t\t? () -> nextPageExists((StructuredQuery) query, results.getCursorAfter())\n+\t\t\t\t\t\t\t: () -> Boolean.FALSE\n+\t\t\t\t\t);\n+\t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n-\t@Override\n-\tpublic <T> DatastoreNextPageAwareResultsIterable<?> nextPageAwareQuery(StructuredQuery query, Class<T> entityClass) {\n-\t\tDatastoreResultsIterable resultsIterable = queryKeysOrEntities(query, entityClass);\n-\n-\t\treturn new DatastoreNextPageAwareResultsIterable(resultsIterable, nextPageExists(query, resultsIterable.getCursor()));\n-\t}\n-\n \tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n", "next_change": {"commit": "b879f14210745398ae7ed33992b71a056a834dc5", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex 068f11a1..ba958688 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -267,24 +267,21 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\tQueryResults results = getDatastoreReadWriter().run(query);\n \t\tDatastoreResultsIterable resultsIterable;\n \t\tif (results.getResultClass() == Key.class) {\n-\t\t\tresultsIterable = new DatastoreResultsIterable(results, results.getCursorAfter());\n+\t\t\tresultsIterable = new DatastoreSimpleResultsIterable(results, results.getCursorAfter());\n \t\t}\n \t\telse {\n-\t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n+\t\t\tresultsIterable = new DatastoreSimpleResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n \t\tif (query instanceof StructuredQuery) {\n-\t\t\tresultsIterable.setHasNextPageQuery(\n-\t\t\t\t\t((StructuredQuery) query).getLimit() != null\n-\t\t\t\t\t\t\t? () -> nextPageExists((StructuredQuery) query, results.getCursorAfter())\n-\t\t\t\t\t\t\t: () -> Boolean.FALSE\n-\t\t\t\t\t);\n+\t\t\tresultsIterable = new DatastoreNextPageAwareResultsIterable(\n+\t\t\t\t\tresultsIterable, results.getCursorAfter(), (StructuredQuery) query, this);\n \t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n-\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n+\tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n \t\t\t\t\t\t.build());\n", "next_change": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex ba958688..bb729e93 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -258,29 +262,52 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\tList<T> convertedResults = convertEntitiesForRead(results, entityClass);\n \t\tmaybeEmitEvent(new AfterQueryEvent(convertedResults, query));\n \t\treturn results != null\n-\t\t\t\t? new DatastoreSimpleResultsIterable<>(convertedResults, results.getCursorAfter())\n+\t\t\t\t? new DatastoreResultsIterable<>(convertedResults, results.getCursorAfter())\n \t\t\t\t: null;\n \t}\n \n+\t@Override\n+\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\t\treturn new SliceImpl<>(results.toList(),\n+\t\t\t\tDatastorePageable.from(pageable, results.getCursor(), null),\n+\t\t\t\tnextPageExists(query, results.getCursor()));\n+\t}\n+\n+\tprivate StructuredQuery applyPageable(StructuredQuery query, Pageable pageable) {\n+\t\tif (pageable == Pageable.unpaged()) {\n+\t\t\treturn query;\n+\t\t}\n+\t\tCursor cursor = null;\n+\t\tif (pageable instanceof DatastorePageable) {\n+\t\t\tcursor = ((DatastorePageable) pageable).toCursor();\n+\t\t}\n+\t\tStructuredQuery.Builder builder = query.toBuilder();\n+\t\tif (cursor != null) {\n+\t\t\tbuilder.setStartCursor(cursor).setOffset(0);\n+\t\t}\n+\t\telse {\n+\t\t\tbuilder.setOffset(Math.toIntExact(pageable.getOffset()));\n+\t\t}\n+\t\treturn builder.setLimit(pageable.getPageSize()).build();\n+\t}\n+\n \t@Override\n \tpublic <T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass) {\n \t\tQueryResults results = getDatastoreReadWriter().run(query);\n \t\tDatastoreResultsIterable resultsIterable;\n \t\tif (results.getResultClass() == Key.class) {\n-\t\t\tresultsIterable = new DatastoreSimpleResultsIterable(results, results.getCursorAfter());\n+\t\t\tresultsIterable = new DatastoreResultsIterable(results, results.getCursorAfter());\n \t\t}\n \t\telse {\n-\t\t\tresultsIterable = new DatastoreSimpleResultsIterable<>(convertEntitiesForRead(results, entityClass),\n+\t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n-\t\tif (query instanceof StructuredQuery) {\n-\t\t\tresultsIterable = new DatastoreNextPageAwareResultsIterable(\n-\t\t\t\t\tresultsIterable, results.getCursorAfter(), (StructuredQuery) query, this);\n-\t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n+\t@Override\n \tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n", "next_change": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex bb729e93..64469d43 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -307,8 +321,7 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\treturn resultsIterable;\n \t}\n \n-\t@Override\n-\tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n+\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n \t\t\t\t\t\t.build());\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex e612966f..79a321d9 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -277,13 +322,6 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\treturn resultsIterable;\n \t}\n \n-\t@Override\n-\tpublic <T> DatastoreNextPageAwareResultsIterable<?> nextPageAwareQuery(StructuredQuery query, Class<T> entityClass) {\n-\t\tDatastoreResultsIterable resultsIterable = queryKeysOrEntities(query, entityClass);\n-\n-\t\treturn new DatastoreNextPageAwareResultsIterable(resultsIterable, nextPageExists(query, resultsIterable.getCursor()));\n-\t}\n-\n \tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}, {"oid": "1909fe1226e406a92ee7138f02ffd15485a3d025", "committedDate": "2020-11-30 17:17:34 -0500", "message": "Fix auditing when running through DatastoreTemplate.performTransaction (#2604)"}, {"oid": "d9ae0b3670f3a852b719c15f5c36dc6b91ea2f06", "committedDate": "2020-12-18 07:17:25 -0500", "message": "Datastore reference query by example (backport) (#2614)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNTE1NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501235154", "body": "You can just return here without assigning to `pageable`.", "bodyText": "You can just return here without assigning to pageable.", "bodyHTML": "<p dir=\"auto\">You can just return here without assigning to <code>pageable</code>.</p>", "author": "meltsufin", "createdAt": "2020-10-07T18:46:47Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -248,21 +248,19 @@ private Slice executeSliceQuery(Object[] parameters) {\n \t\tStructuredQuery.Builder builder = getEntityOrProjectionQueryBuilder()\n \t\t\t\t.setKind(this.datastorePersistentEntity.kindName());\n \t\tStructuredQuery query = applyQueryBody(parameters, builder, false, false, null);\n-\t\tDatastoreResultsIterable<?> resultList = this.datastoreOperations.queryKeysOrEntities(query, this.entityType);\n-\n-\t\tParameterAccessor paramAccessor = new ParametersParameterAccessor(getQueryMethod().getParameters(), parameters);\n-\n-\t\tPageable pageable = DatastorePageable.from(paramAccessor.getPageable(), resultList.getCursor(), null);\n-\n-\t\tEntityQuery.Builder builderNext = newEntityQueryBuilder().setKind(this.datastorePersistentEntity.kindName());\n-\t\tStructuredQuery queryNext = applyQueryBody(parameters, builderNext, false, true, resultList.getCursor());\n-\t\tIterable nextResult = this.datastoreOperations.query(queryNext, x -> x);\n+\t\tDatastoreNextPageAwareResultsIterable<?> results = this.datastoreOperations.nextPageAwareQuery(query, this.entityType);\n \n \t\tList<Object> result =\n-\t\t\t\t\t\tStreamSupport.stream(resultList.spliterator(), false).collect(Collectors.toList());\n+\t\t\t\tStreamSupport.stream(results.spliterator(), false).collect(Collectors.toList());\n \n \t\treturn (Slice) this.processRawObjectForProjection(\n-\t\t\t\tnew SliceImpl(result, pageable, nextResult.iterator().hasNext()));\n+\t\t\t\tnew SliceImpl(result, getPageable(parameters, results.getCursor()), results.hasNextPage()));\n+\t}\n+\n+\tprivate Pageable getPageable(Object[] parameters, Cursor cursor) {\n+\t\tParameterAccessor paramAccessor = new ParametersParameterAccessor(getQueryMethod().getParameters(), parameters);\n+\t\tPageable pageable = DatastorePageable.from(paramAccessor.getPageable(), cursor, null);", "originalCommit": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3e46900e24604dda5e6d78a8ff293cdf2941e54", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\nindex f3e6ebea..33c465c3 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n", "chunk": "@@ -245,22 +244,24 @@ public class PartTreeDatastoreQuery<T> extends AbstractDatastoreQuery<T> {\n \t}\n \n \tprivate Slice executeSliceQuery(Object[] parameters) {\n-\t\tStructuredQuery.Builder builder = getEntityOrProjectionQueryBuilder()\n-\t\t\t\t.setKind(this.datastorePersistentEntity.kindName());\n-\t\tStructuredQuery query = applyQueryBody(parameters, builder, false, false, null);\n-\t\tDatastoreNextPageAwareResultsIterable<?> results = this.datastoreOperations.nextPageAwareQuery(query, this.entityType);\n-\n-\t\tList<Object> result =\n-\t\t\t\tStreamSupport.stream(results.spliterator(), false).collect(Collectors.toList());\n+\t\tDatastoreResultsIterable<?> results =\n+\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n \n \t\treturn (Slice) this.processRawObjectForProjection(\n-\t\t\t\tnew SliceImpl(result, getPageable(parameters, results.getCursor()), results.hasNextPage()));\n+\t\t\t\tnew SliceImpl(results.toList(),\n+\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n+\t\t\t\t\t\tresults.getHasNextPage().orElse(Boolean.FALSE)));\n+\t}\n+\n+\tprivate StructuredQuery buildSliceQuey(Object[] parameters) {\n+\t\tStructuredQuery.Builder builder = getEntityOrProjectionQueryBuilder()\n+\t\t\t\t.setKind(this.datastorePersistentEntity.kindName());\n+\t\treturn applyQueryBody(parameters, builder, false, false, null);\n \t}\n \n \tprivate Pageable getPageable(Object[] parameters, Cursor cursor) {\n \t\tParameterAccessor paramAccessor = new ParametersParameterAccessor(getQueryMethod().getParameters(), parameters);\n-\t\tPageable pageable = DatastorePageable.from(paramAccessor.getPageable(), cursor, null);\n-\t\treturn pageable;\n+\t\treturn DatastorePageable.from(paramAccessor.getPageable(), cursor, null);\n \t}\n \n \tObject convertResultCollection(Object result, Class<?> collectionType) {\n", "next_change": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\nindex 33c465c3..352e0793 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n", "chunk": "@@ -259,9 +269,9 @@ public class PartTreeDatastoreQuery<T> extends AbstractDatastoreQuery<T> {\n \t\treturn applyQueryBody(parameters, builder, false, false, null);\n \t}\n \n-\tprivate Pageable getPageable(Object[] parameters, Cursor cursor) {\n+\tprivate Pageable getPageable(Object[] parameters) {\n \t\tParameterAccessor paramAccessor = new ParametersParameterAccessor(getQueryMethod().getParameters(), parameters);\n-\t\treturn DatastorePageable.from(paramAccessor.getPageable(), cursor, null);\n+\t\treturn paramAccessor.getPageable();\n \t}\n \n \tObject convertResultCollection(Object result, Class<?> collectionType) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\nindex f3e6ebea..491b6cc8 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n", "chunk": "@@ -245,22 +244,31 @@ public class PartTreeDatastoreQuery<T> extends AbstractDatastoreQuery<T> {\n \t}\n \n \tprivate Slice executeSliceQuery(Object[] parameters) {\n+\t\tStructuredQuery structuredQuery = buildSliceQuey(parameters);\n+\t\tSlice<?> results = structuredQuery instanceof KeyQuery\n+\t\t\t\t?\n+\t\t\t\tthis.datastoreOperations.queryKeysSlice(\n+\t\t\t\t\t\t(KeyQuery) structuredQuery,\n+\t\t\t\t\t\tthis.entityType,\n+\t\t\t\t\t\tgetPageable(parameters))\n+\t\t\t\t:\n+\t\t\t\tthis.datastoreOperations.queryEntitiesSlice(\n+\t\t\t\t\t\tstructuredQuery,\n+\t\t\t\t\t\tthis.entityType,\n+\t\t\t\t\t\tgetPageable(parameters));\n+\n+\t\treturn (Slice) this.processRawObjectForProjection(results);\n+\t}\n+\n+\tprivate StructuredQuery buildSliceQuey(Object[] parameters) {\n \t\tStructuredQuery.Builder builder = getEntityOrProjectionQueryBuilder()\n \t\t\t\t.setKind(this.datastorePersistentEntity.kindName());\n-\t\tStructuredQuery query = applyQueryBody(parameters, builder, false, false, null);\n-\t\tDatastoreNextPageAwareResultsIterable<?> results = this.datastoreOperations.nextPageAwareQuery(query, this.entityType);\n-\n-\t\tList<Object> result =\n-\t\t\t\tStreamSupport.stream(results.spliterator(), false).collect(Collectors.toList());\n-\n-\t\treturn (Slice) this.processRawObjectForProjection(\n-\t\t\t\tnew SliceImpl(result, getPageable(parameters, results.getCursor()), results.hasNextPage()));\n+\t\treturn applyQueryBody(parameters, builder, false, false, null);\n \t}\n \n-\tprivate Pageable getPageable(Object[] parameters, Cursor cursor) {\n+\tprivate Pageable getPageable(Object[] parameters) {\n \t\tParameterAccessor paramAccessor = new ParametersParameterAccessor(getQueryMethod().getParameters(), parameters);\n-\t\tPageable pageable = DatastorePageable.from(paramAccessor.getPageable(), cursor, null);\n-\t\treturn pageable;\n+\t\treturn paramAccessor.getPageable();\n \t}\n \n \tObject convertResultCollection(Object result, Class<?> collectionType) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"oid": "b3e46900e24604dda5e6d78a8ff293cdf2941e54", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b3e46900e24604dda5e6d78a8ff293cdf2941e54", "message": "PR comments", "committedDate": "2020-10-08T19:34:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501986204", "body": "why not just\r\n`public boolean hasNextPage()`?", "bodyText": "why not just\npublic boolean hasNextPage()?", "bodyHTML": "<p dir=\"auto\">why not just<br>\n<code>public boolean hasNextPage()</code>?</p>", "author": "meltsufin", "createdAt": "2020-10-08T20:14:31Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "diffHunk": "@@ -50,4 +61,20 @@ public Cursor getCursor() {\n \tpublic Iterable<T> getIterable() {\n \t\treturn this.iterable;\n \t}\n+\n+\tpublic Optional<Boolean> getHasNextPage() {", "originalCommit": "b3e46900e24604dda5e6d78a8ff293cdf2941e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMzgzOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r502013839", "bodyText": "@meltsufin Because it is not always there. We can only compute it for StructuredQuery queries, and we can't compute it for GQL queries. So we need to represent 3 values - true, false, empty.", "author": "dmitry-s", "createdAt": "2020-10-08T21:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyOTM1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r502529351", "bodyText": "@dmitry-s I must be missing something here. Both, GqlQuery and StructuredQuery, support cursors. So, I would image that it's possible to try to retrieve the next item using the cursor to determine hasNext(). How are they different in this respect?\nAlso, if there is a fundamental difference, then we should probably have two different classes for their results. So, maybe extend DatastoreResultsIterable and add hasNextPage()?", "author": "meltsufin", "createdAt": "2020-10-09T16:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYzMDg2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r502630864", "bodyText": "The problem with GqlQuery is we need to set limit to 1 to avoid fetching the whole next page, and GqlQuery doesn't allow to change that.", "author": "dmitry-s", "createdAt": "2020-10-09T19:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzQ2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r503403464", "bodyText": "So, for GqlQuery we would need to fetch the whole page? Is there a problem with that other than the potential performance overhead?", "author": "meltsufin", "createdAt": "2020-10-12T16:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b879f14210745398ae7ed33992b71a056a834dc5", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\nindex a11acef5..8250db68 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n", "chunk": "@@ -19,61 +19,24 @@ package org.springframework.cloud.gcp.data.datastore.core;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Supplier;\n \n import com.google.cloud.datastore.Cursor;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.data.util.Lazy;\n-\n /**\n  * @author Dmitry Solomakha\n  */\n-public class DatastoreResultsIterable<T> implements Iterable<T> {\n-\tprivate final Iterator<T> iterator;\n-\tprivate final Cursor cursor;\n-\tprivate Iterable<T> iterable;\n-\n-\t@Autowired\n-\tprivate DatastoreOperations datastoreOperations;\n-\tprivate Supplier<Optional<Boolean>> hasNextPage = Optional::empty;\n-\n-\tpublic DatastoreResultsIterable(Iterable<T> iterable, Cursor cursor) {\n-\t\tthis(iterable.iterator(), cursor);\n-\t\tthis.iterable = iterable;\n-\t}\n-\n-\tpublic DatastoreResultsIterable(Iterator<T> iterator, Cursor cursor) {\n-\t\tthis.iterator = iterator;\n-\t\tthis.cursor = cursor;\n-\t}\n-\n+public interface DatastoreResultsIterable<T> extends Iterable<T> {\n \t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn this.iterator;\n-\t}\n-\n-\tpublic Cursor getCursor() {\n-\t\treturn this.cursor;\n-\t}\n+\tIterator<T> iterator();\n \n-\tpublic Iterable<T> getIterable() {\n-\t\treturn this.iterable;\n-\t}\n+\tCursor getCursor();\n \n-\tpublic Optional<Boolean> getHasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\tpublic void setHasNextPageQuery(Supplier<Boolean> query) {\n-\t\tthis.hasNextPage = Lazy.of(() -> Optional.of(query.get()));\n-\t}\n+\tIterable<T> getIterable();\n \n-\tpublic List<T> toList() {\n+\tdefault List<T> toList() {\n \t\tList<T> results = new ArrayList<>();\n-\t\twhile (iterator.hasNext()) {\n-\t\t\tresults.add(iterator.next());\n+\t\twhile (iterator().hasNext()) {\n+\t\t\tresults.add(iterator().next());\n \t\t}\n \t\treturn results;\n \t}\n", "next_change": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\nindex 8250db68..fc7024af 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n", "chunk": "@@ -25,15 +25,35 @@ import com.google.cloud.datastore.Cursor;\n /**\n  * @author Dmitry Solomakha\n  */\n-public interface DatastoreResultsIterable<T> extends Iterable<T> {\n+public class DatastoreResultsIterable<T> implements Iterable<T> {\n+\tprivate final Iterator<T> iterator;\n+\tprivate final Cursor cursor;\n+\tprivate Iterable<T> iterable;\n+\n+\tpublic DatastoreResultsIterable(Iterable<T> iterable, Cursor cursor) {\n+\t\tthis(iterable.iterator(), cursor);\n+\t\tthis.iterable = iterable;\n+\t}\n+\n+\tpublic DatastoreResultsIterable(Iterator<T> iterator, Cursor cursor) {\n+\t\tthis.iterator = iterator;\n+\t\tthis.cursor = cursor;\n+\t}\n+\n \t@Override\n-\tIterator<T> iterator();\n+\tpublic Iterator<T> iterator() {\n+\t\treturn this.iterator;\n+\t}\n \n-\tCursor getCursor();\n+\tpublic Cursor getCursor() {\n+\t\treturn this.cursor;\n+\t}\n \n-\tIterable<T> getIterable();\n+\tpublic Iterable<T> getIterable() {\n+\t\treturn this.iterable;\n+\t}\n \n-\tdefault List<T> toList() {\n+\tpublic List<T> toList() {\n \t\tList<T> results = new ArrayList<>();\n \t\twhile (iterator().hasNext()) {\n \t\t\tresults.add(iterator().next());\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\nindex a11acef5..fc7024af 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n", "chunk": "@@ -62,18 +53,10 @@ public class DatastoreResultsIterable<T> implements Iterable<T> {\n \t\treturn this.iterable;\n \t}\n \n-\tpublic Optional<Boolean> getHasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\tpublic void setHasNextPageQuery(Supplier<Boolean> query) {\n-\t\tthis.hasNextPage = Lazy.of(() -> Optional.of(query.get()));\n-\t}\n-\n \tpublic List<T> toList() {\n \t\tList<T> results = new ArrayList<>();\n-\t\twhile (iterator.hasNext()) {\n-\t\t\tresults.add(iterator.next());\n+\t\twhile (iterator().hasNext()) {\n+\t\t\tresults.add(iterator().next());\n \t\t}\n \t\treturn results;\n \t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4Njg0MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501986841", "body": "I don't think a `public` setter makes sense here. Can you just provide all the necessary objects to determine `hasNextPage` into the constructor?", "bodyText": "I don't think a public setter makes sense here. Can you just provide all the necessary objects to determine hasNextPage into the constructor?", "bodyHTML": "<p dir=\"auto\">I don't think a <code>public</code> setter makes sense here. Can you just provide all the necessary objects to determine <code>hasNextPage</code> into the constructor?</p>", "author": "meltsufin", "createdAt": "2020-10-08T20:15:46Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "diffHunk": "@@ -50,4 +61,20 @@ public Cursor getCursor() {\n \tpublic Iterable<T> getIterable() {\n \t\treturn this.iterable;\n \t}\n+\n+\tpublic Optional<Boolean> getHasNextPage() {\n+\t\treturn hasNextPage.get();\n+\t}\n+\n+\tpublic void setHasNextPageQuery(Supplier<Boolean> query) {", "originalCommit": "b3e46900e24604dda5e6d78a8ff293cdf2941e54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b879f14210745398ae7ed33992b71a056a834dc5", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\nindex a11acef5..8250db68 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n", "chunk": "@@ -19,61 +19,24 @@ package org.springframework.cloud.gcp.data.datastore.core;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Supplier;\n \n import com.google.cloud.datastore.Cursor;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.data.util.Lazy;\n-\n /**\n  * @author Dmitry Solomakha\n  */\n-public class DatastoreResultsIterable<T> implements Iterable<T> {\n-\tprivate final Iterator<T> iterator;\n-\tprivate final Cursor cursor;\n-\tprivate Iterable<T> iterable;\n-\n-\t@Autowired\n-\tprivate DatastoreOperations datastoreOperations;\n-\tprivate Supplier<Optional<Boolean>> hasNextPage = Optional::empty;\n-\n-\tpublic DatastoreResultsIterable(Iterable<T> iterable, Cursor cursor) {\n-\t\tthis(iterable.iterator(), cursor);\n-\t\tthis.iterable = iterable;\n-\t}\n-\n-\tpublic DatastoreResultsIterable(Iterator<T> iterator, Cursor cursor) {\n-\t\tthis.iterator = iterator;\n-\t\tthis.cursor = cursor;\n-\t}\n-\n+public interface DatastoreResultsIterable<T> extends Iterable<T> {\n \t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn this.iterator;\n-\t}\n-\n-\tpublic Cursor getCursor() {\n-\t\treturn this.cursor;\n-\t}\n+\tIterator<T> iterator();\n \n-\tpublic Iterable<T> getIterable() {\n-\t\treturn this.iterable;\n-\t}\n+\tCursor getCursor();\n \n-\tpublic Optional<Boolean> getHasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\tpublic void setHasNextPageQuery(Supplier<Boolean> query) {\n-\t\tthis.hasNextPage = Lazy.of(() -> Optional.of(query.get()));\n-\t}\n+\tIterable<T> getIterable();\n \n-\tpublic List<T> toList() {\n+\tdefault List<T> toList() {\n \t\tList<T> results = new ArrayList<>();\n-\t\twhile (iterator.hasNext()) {\n-\t\t\tresults.add(iterator.next());\n+\t\twhile (iterator().hasNext()) {\n+\t\t\tresults.add(iterator().next());\n \t\t}\n \t\treturn results;\n \t}\n", "next_change": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\nindex 8250db68..fc7024af 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n", "chunk": "@@ -25,15 +25,35 @@ import com.google.cloud.datastore.Cursor;\n /**\n  * @author Dmitry Solomakha\n  */\n-public interface DatastoreResultsIterable<T> extends Iterable<T> {\n+public class DatastoreResultsIterable<T> implements Iterable<T> {\n+\tprivate final Iterator<T> iterator;\n+\tprivate final Cursor cursor;\n+\tprivate Iterable<T> iterable;\n+\n+\tpublic DatastoreResultsIterable(Iterable<T> iterable, Cursor cursor) {\n+\t\tthis(iterable.iterator(), cursor);\n+\t\tthis.iterable = iterable;\n+\t}\n+\n+\tpublic DatastoreResultsIterable(Iterator<T> iterator, Cursor cursor) {\n+\t\tthis.iterator = iterator;\n+\t\tthis.cursor = cursor;\n+\t}\n+\n \t@Override\n-\tIterator<T> iterator();\n+\tpublic Iterator<T> iterator() {\n+\t\treturn this.iterator;\n+\t}\n \n-\tCursor getCursor();\n+\tpublic Cursor getCursor() {\n+\t\treturn this.cursor;\n+\t}\n \n-\tIterable<T> getIterable();\n+\tpublic Iterable<T> getIterable() {\n+\t\treturn this.iterable;\n+\t}\n \n-\tdefault List<T> toList() {\n+\tpublic List<T> toList() {\n \t\tList<T> results = new ArrayList<>();\n \t\twhile (iterator().hasNext()) {\n \t\t\tresults.add(iterator().next());\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\nindex a11acef5..fc7024af 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java\n", "chunk": "@@ -62,18 +53,10 @@ public class DatastoreResultsIterable<T> implements Iterable<T> {\n \t\treturn this.iterable;\n \t}\n \n-\tpublic Optional<Boolean> getHasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\tpublic void setHasNextPageQuery(Supplier<Boolean> query) {\n-\t\tthis.hasNextPage = Lazy.of(() -> Optional.of(query.get()));\n-\t}\n-\n \tpublic List<T> toList() {\n \t\tList<T> results = new ArrayList<>();\n-\t\twhile (iterator.hasNext()) {\n-\t\t\tresults.add(iterator.next());\n+\t\twhile (iterator().hasNext()) {\n+\t\t\tresults.add(iterator().next());\n \t\t}\n \t\treturn results;\n \t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NzU4NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501987585", "body": "Instead of calling `setHasNextPageQuery` can this block of code just move to `DatastoreResultsIterable`?\r\nAlso, why does this only apply to `StructuredQuery`?", "bodyText": "Instead of calling setHasNextPageQuery can this block of code just move to DatastoreResultsIterable?\nAlso, why does this only apply to StructuredQuery?", "bodyHTML": "<p dir=\"auto\">Instead of calling <code>setHasNextPageQuery</code> can this block of code just move to <code>DatastoreResultsIterable</code>?<br>\nAlso, why does this only apply to <code>StructuredQuery</code>?</p>", "author": "meltsufin", "createdAt": "2020-10-08T20:17:21Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -272,10 +273,25 @@ public long count(Class<?> entityClass) {\n \t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n+\t\tif (query instanceof StructuredQuery) {\n+\t\t\tresultsIterable.setHasNextPageQuery(", "originalCommit": "b3e46900e24604dda5e6d78a8ff293cdf2941e54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b879f14210745398ae7ed33992b71a056a834dc5", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex 068f11a1..ba958688 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -267,24 +267,21 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\tQueryResults results = getDatastoreReadWriter().run(query);\n \t\tDatastoreResultsIterable resultsIterable;\n \t\tif (results.getResultClass() == Key.class) {\n-\t\t\tresultsIterable = new DatastoreResultsIterable(results, results.getCursorAfter());\n+\t\t\tresultsIterable = new DatastoreSimpleResultsIterable(results, results.getCursorAfter());\n \t\t}\n \t\telse {\n-\t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n+\t\t\tresultsIterable = new DatastoreSimpleResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n \t\tif (query instanceof StructuredQuery) {\n-\t\t\tresultsIterable.setHasNextPageQuery(\n-\t\t\t\t\t((StructuredQuery) query).getLimit() != null\n-\t\t\t\t\t\t\t? () -> nextPageExists((StructuredQuery) query, results.getCursorAfter())\n-\t\t\t\t\t\t\t: () -> Boolean.FALSE\n-\t\t\t\t\t);\n+\t\t\tresultsIterable = new DatastoreNextPageAwareResultsIterable(\n+\t\t\t\t\tresultsIterable, results.getCursorAfter(), (StructuredQuery) query, this);\n \t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n-\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n+\tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n \t\t\t\t\t\t.build());\n", "next_change": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex ba958688..bb729e93 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -258,29 +262,52 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\tList<T> convertedResults = convertEntitiesForRead(results, entityClass);\n \t\tmaybeEmitEvent(new AfterQueryEvent(convertedResults, query));\n \t\treturn results != null\n-\t\t\t\t? new DatastoreSimpleResultsIterable<>(convertedResults, results.getCursorAfter())\n+\t\t\t\t? new DatastoreResultsIterable<>(convertedResults, results.getCursorAfter())\n \t\t\t\t: null;\n \t}\n \n+\t@Override\n+\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\t\treturn new SliceImpl<>(results.toList(),\n+\t\t\t\tDatastorePageable.from(pageable, results.getCursor(), null),\n+\t\t\t\tnextPageExists(query, results.getCursor()));\n+\t}\n+\n+\tprivate StructuredQuery applyPageable(StructuredQuery query, Pageable pageable) {\n+\t\tif (pageable == Pageable.unpaged()) {\n+\t\t\treturn query;\n+\t\t}\n+\t\tCursor cursor = null;\n+\t\tif (pageable instanceof DatastorePageable) {\n+\t\t\tcursor = ((DatastorePageable) pageable).toCursor();\n+\t\t}\n+\t\tStructuredQuery.Builder builder = query.toBuilder();\n+\t\tif (cursor != null) {\n+\t\t\tbuilder.setStartCursor(cursor).setOffset(0);\n+\t\t}\n+\t\telse {\n+\t\t\tbuilder.setOffset(Math.toIntExact(pageable.getOffset()));\n+\t\t}\n+\t\treturn builder.setLimit(pageable.getPageSize()).build();\n+\t}\n+\n \t@Override\n \tpublic <T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass) {\n \t\tQueryResults results = getDatastoreReadWriter().run(query);\n \t\tDatastoreResultsIterable resultsIterable;\n \t\tif (results.getResultClass() == Key.class) {\n-\t\t\tresultsIterable = new DatastoreSimpleResultsIterable(results, results.getCursorAfter());\n+\t\t\tresultsIterable = new DatastoreResultsIterable(results, results.getCursorAfter());\n \t\t}\n \t\telse {\n-\t\t\tresultsIterable = new DatastoreSimpleResultsIterable<>(convertEntitiesForRead(results, entityClass),\n+\t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n-\t\tif (query instanceof StructuredQuery) {\n-\t\t\tresultsIterable = new DatastoreNextPageAwareResultsIterable(\n-\t\t\t\t\tresultsIterable, results.getCursorAfter(), (StructuredQuery) query, this);\n-\t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n+\t@Override\n \tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n", "next_change": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex bb729e93..64469d43 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -307,8 +321,7 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\treturn resultsIterable;\n \t}\n \n-\t@Override\n-\tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n+\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n \t\t\t\t\t\t.build());\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex 068f11a1..79a321d9 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -273,13 +318,6 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n-\t\tif (query instanceof StructuredQuery) {\n-\t\t\tresultsIterable.setHasNextPageQuery(\n-\t\t\t\t\t((StructuredQuery) query).getLimit() != null\n-\t\t\t\t\t\t\t? () -> nextPageExists((StructuredQuery) query, results.getCursorAfter())\n-\t\t\t\t\t\t\t: () -> Boolean.FALSE\n-\t\t\t\t\t);\n-\t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}, {"oid": "1909fe1226e406a92ee7138f02ffd15485a3d025", "committedDate": "2020-11-30 17:17:34 -0500", "message": "Fix auditing when running through DatastoreTemplate.performTransaction (#2604)"}, {"oid": "d9ae0b3670f3a852b719c15f5c36dc6b91ea2f06", "committedDate": "2020-12-18 07:17:25 -0500", "message": "Datastore reference query by example (backport) (#2614)"}]}, {"oid": "bd562d4c960f80db14ee7b3cbe1d8831eff392af", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/bd562d4c960f80db14ee7b3cbe1d8831eff392af", "message": "Merge branch 'master' of github.com:spring-cloud/spring-cloud-gcp into datastore-iterable-nextpage", "committedDate": "2020-10-08T21:51:52Z", "type": "commit"}, {"oid": "b879f14210745398ae7ed33992b71a056a834dc5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b879f14210745398ae7ed33992b71a056a834dc5", "message": "PR comments", "committedDate": "2020-10-13T12:14:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTEwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504375104", "body": "Never used.", "bodyText": "Never used.", "bodyHTML": "<p dir=\"auto\">Never used.</p>", "author": "meltsufin", "createdAt": "2020-10-14T03:14:50Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n+\tprivate DatastoreResultsIterable datastoreResultsIterable;\n+\n+\tprivate Cursor cursor;", "originalCommit": "b879f14210745398ae7ed33992b71a056a834dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTU0Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504375543", "body": "`DatastoreStructuredQueryResultsIterable` maybe?", "bodyText": "DatastoreStructuredQueryResultsIterable maybe?", "bodyHTML": "<p dir=\"auto\"><code>DatastoreStructuredQueryResultsIterable</code> maybe?</p>", "author": "meltsufin", "createdAt": "2020-10-14T03:16:28Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {", "originalCommit": "b879f14210745398ae7ed33992b71a056a834dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTY4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504375682", "body": "Please add class-level javadoc and `@since 1.2.6`.", "bodyText": "Please add class-level javadoc and @since 1.2.6.", "bodyHTML": "<p dir=\"auto\">Please add class-level javadoc and <code>@since 1.2.6</code>.</p>", "author": "meltsufin", "createdAt": "2020-10-14T03:17:01Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {", "originalCommit": "b879f14210745398ae7ed33992b71a056a834dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTgzMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504375833", "body": "Never used.", "bodyText": "Never used.", "bodyHTML": "<p dir=\"auto\">Never used.</p>", "author": "meltsufin", "createdAt": "2020-10-14T03:17:29Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n+\tprivate DatastoreResultsIterable datastoreResultsIterable;\n+\n+\tprivate Cursor cursor;\n+\n+\tprivate StructuredQuery structuredQuery;", "originalCommit": "b879f14210745398ae7ed33992b71a056a834dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NzM5Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504377393", "body": "Javadoc missing\r\n\r\n`queryHasNextPage` maybe?", "bodyText": "Javadoc missing\nqueryHasNextPage maybe?", "bodyHTML": "<p dir=\"auto\">Javadoc missing</p>\n<p dir=\"auto\"><code>queryHasNextPage</code> maybe?</p>", "author": "meltsufin", "createdAt": "2020-10-14T03:23:16Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -266,16 +267,28 @@ public long count(Class<?> entityClass) {\n \t\tQueryResults results = getDatastoreReadWriter().run(query);\n \t\tDatastoreResultsIterable resultsIterable;\n \t\tif (results.getResultClass() == Key.class) {\n-\t\t\tresultsIterable = new DatastoreResultsIterable(results, results.getCursorAfter());\n+\t\t\tresultsIterable = new DatastoreSimpleResultsIterable(results, results.getCursorAfter());\n \t\t}\n \t\telse {\n-\t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n+\t\t\tresultsIterable = new DatastoreSimpleResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n+\t\tif (query instanceof StructuredQuery) {\n+\t\t\tresultsIterable = new DatastoreNextPageAwareResultsIterable(\n+\t\t\t\t\tresultsIterable, results.getCursorAfter(), (StructuredQuery) query, this);\n+\t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n+\tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {", "originalCommit": "b879f14210745398ae7ed33992b71a056a834dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex ba958688..bb729e93 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -258,29 +262,52 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\tList<T> convertedResults = convertEntitiesForRead(results, entityClass);\n \t\tmaybeEmitEvent(new AfterQueryEvent(convertedResults, query));\n \t\treturn results != null\n-\t\t\t\t? new DatastoreSimpleResultsIterable<>(convertedResults, results.getCursorAfter())\n+\t\t\t\t? new DatastoreResultsIterable<>(convertedResults, results.getCursorAfter())\n \t\t\t\t: null;\n \t}\n \n+\t@Override\n+\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\t\treturn new SliceImpl<>(results.toList(),\n+\t\t\t\tDatastorePageable.from(pageable, results.getCursor(), null),\n+\t\t\t\tnextPageExists(query, results.getCursor()));\n+\t}\n+\n+\tprivate StructuredQuery applyPageable(StructuredQuery query, Pageable pageable) {\n+\t\tif (pageable == Pageable.unpaged()) {\n+\t\t\treturn query;\n+\t\t}\n+\t\tCursor cursor = null;\n+\t\tif (pageable instanceof DatastorePageable) {\n+\t\t\tcursor = ((DatastorePageable) pageable).toCursor();\n+\t\t}\n+\t\tStructuredQuery.Builder builder = query.toBuilder();\n+\t\tif (cursor != null) {\n+\t\t\tbuilder.setStartCursor(cursor).setOffset(0);\n+\t\t}\n+\t\telse {\n+\t\t\tbuilder.setOffset(Math.toIntExact(pageable.getOffset()));\n+\t\t}\n+\t\treturn builder.setLimit(pageable.getPageSize()).build();\n+\t}\n+\n \t@Override\n \tpublic <T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass) {\n \t\tQueryResults results = getDatastoreReadWriter().run(query);\n \t\tDatastoreResultsIterable resultsIterable;\n \t\tif (results.getResultClass() == Key.class) {\n-\t\t\tresultsIterable = new DatastoreSimpleResultsIterable(results, results.getCursorAfter());\n+\t\t\tresultsIterable = new DatastoreResultsIterable(results, results.getCursorAfter());\n \t\t}\n \t\telse {\n-\t\t\tresultsIterable = new DatastoreSimpleResultsIterable<>(convertEntitiesForRead(results, entityClass),\n+\t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n-\t\tif (query instanceof StructuredQuery) {\n-\t\t\tresultsIterable = new DatastoreNextPageAwareResultsIterable(\n-\t\t\t\t\tresultsIterable, results.getCursorAfter(), (StructuredQuery) query, this);\n-\t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n+\t@Override\n \tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n", "next_change": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex bb729e93..64469d43 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -307,8 +321,7 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\treturn resultsIterable;\n \t}\n \n-\t@Override\n-\tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n+\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n \t\t\t\t\t\t.build());\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex ba958688..79a321d9 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -258,30 +264,65 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\tList<T> convertedResults = convertEntitiesForRead(results, entityClass);\n \t\tmaybeEmitEvent(new AfterQueryEvent(convertedResults, query));\n \t\treturn results != null\n-\t\t\t\t? new DatastoreSimpleResultsIterable<>(convertedResults, results.getCursorAfter())\n+\t\t\t\t? new DatastoreResultsIterable<>(convertedResults, results.getCursorAfter())\n \t\t\t\t: null;\n \t}\n \n+\t@Override\n+\tpublic <T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\treturn buildSlice(query, pageable, Key.class);\n+\t}\n+\n+\t@Override\n+\tpublic <T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tif (query instanceof EntityQuery || query instanceof ProjectionEntityQuery) {\n+\t\t\treturn buildSlice(query, pageable, entityClass);\n+\t\t}\n+\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");\n+\t}\n+\n+\tprivate <T> SliceImpl<T> buildSlice(StructuredQuery query, Pageable pageable, Class<T> entityClass) {\n+\t\tDatastoreResultsIterable<T> results = (DatastoreResultsIterable<T>)\n+\t\t\t\tqueryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\t\treturn new SliceImpl<>(results.toList(),\n+\t\t\t\tDatastorePageable.from(pageable, results.getCursor(), null),\n+\t\t\t\tnextPageExists(query, results.getCursor()));\n+\t}\n+\n+\tprivate StructuredQuery applyPageable(StructuredQuery query, Pageable pageable) {\n+\t\tif (pageable == Pageable.unpaged()) {\n+\t\t\treturn query;\n+\t\t}\n+\t\tCursor cursor = null;\n+\t\tif (pageable instanceof DatastorePageable) {\n+\t\t\tcursor = ((DatastorePageable) pageable).toCursor();\n+\t\t}\n+\t\tStructuredQuery.Builder builder = query.toBuilder();\n+\t\tif (cursor != null) {\n+\t\t\tbuilder.setStartCursor(cursor).setOffset(0);\n+\t\t}\n+\t\telse {\n+\t\t\tbuilder.setOffset(Math.toIntExact(pageable.getOffset()));\n+\t\t}\n+\t\treturn builder.setLimit(pageable.getPageSize()).build();\n+\t}\n+\n \t@Override\n \tpublic <T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass) {\n \t\tQueryResults results = getDatastoreReadWriter().run(query);\n \t\tDatastoreResultsIterable resultsIterable;\n \t\tif (results.getResultClass() == Key.class) {\n-\t\t\tresultsIterable = new DatastoreSimpleResultsIterable(results, results.getCursorAfter());\n+\t\t\tresultsIterable = new DatastoreResultsIterable(results, results.getCursorAfter());\n \t\t}\n \t\telse {\n-\t\t\tresultsIterable = new DatastoreSimpleResultsIterable<>(convertEntitiesForRead(results, entityClass),\n+\t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n-\t\tif (query instanceof StructuredQuery) {\n-\t\t\tresultsIterable = new DatastoreNextPageAwareResultsIterable(\n-\t\t\t\t\tresultsIterable, results.getCursorAfter(), (StructuredQuery) query, this);\n-\t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n-\tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n+\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {\n \t\tQueryResults results = getDatastoreReadWriter().run(\n \t\t\t\tquery.toBuilder().setStartCursor(cursorAfter).setLimit(1).setOffset(0)\n \t\t\t\t\t\t.build());\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}, {"oid": "1909fe1226e406a92ee7138f02ffd15485a3d025", "committedDate": "2020-11-30 17:17:34 -0500", "message": "Fix auditing when running through DatastoreTemplate.performTransaction (#2604)"}, {"oid": "d9ae0b3670f3a852b719c15f5c36dc6b91ea2f06", "committedDate": "2020-12-18 07:17:25 -0500", "message": "Datastore reference query by example (backport) (#2614)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODMzNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504378337", "body": "I don't think you're gaining much by delegating to another iterable. I would just use the currently unused instance variables instead.", "bodyText": "I don't think you're gaining much by delegating to another iterable. I would just use the currently unused instance variables instead.", "bodyHTML": "<p dir=\"auto\">I don't think you're gaining much by delegating to another iterable. I would just use the currently unused instance variables instead.</p>", "author": "meltsufin", "createdAt": "2020-10-14T03:26:33Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n+\tprivate DatastoreResultsIterable datastoreResultsIterable;", "originalCommit": "b879f14210745398ae7ed33992b71a056a834dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\ndeleted file mode 100644\nindex 545551fb..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,65 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-import com.google.cloud.datastore.StructuredQuery;\n-\n-import org.springframework.data.util.Lazy;\n-\n-public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate DatastoreResultsIterable datastoreResultsIterable;\n-\n-\tprivate Cursor cursor;\n-\n-\tprivate StructuredQuery structuredQuery;\n-\n-\n-\tprivate Lazy<Boolean> hasNextPage;\n-\n-\tpublic DatastoreNextPageAwareResultsIterable(\n-\t\t\tDatastoreResultsIterable datastoreResultsIterable,\n-\t\t\tCursor cursor,\n-\t\t\tStructuredQuery structuredQuery,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n-\t\tthis.datastoreResultsIterable = datastoreResultsIterable;\n-\t\tthis.cursor = cursor;\n-\t\tthis.structuredQuery = structuredQuery;\n-\t\tthis.hasNextPage = Lazy.of(datastoreTemplate.nextPageExists(this.structuredQuery, this.cursor));\n-\t}\n-\n-\tpublic boolean hasNextPage() {\n-\t\treturn hasNextPage.get();\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn datastoreResultsIterable.iterator();\n-\t}\n-\n-\t@Override\n-\tpublic Cursor getCursor() {\n-\t\treturn datastoreResultsIterable.getCursor();\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn datastoreResultsIterable.getIterable();\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODQ2MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504378460", "body": "javadoc missing", "bodyText": "javadoc missing", "bodyHTML": "<p dir=\"auto\">javadoc missing</p>", "author": "meltsufin", "createdAt": "2020-10-14T03:26:54Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+\n+public class DatastoreSimpleResultsIterable<T> implements DatastoreResultsIterable<T> {", "originalCommit": "b879f14210745398ae7ed33992b71a056a834dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java\ndeleted file mode 100644\nindex 1c0eb8d7..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,50 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-\n-public class DatastoreSimpleResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate final Iterator<T> iterator;\n-\tprivate final Cursor cursor;\n-\tprivate Iterable<T> iterable;\n-\n-\tpublic DatastoreSimpleResultsIterable(Iterable<T> iterable, Cursor cursor) {\n-\t\tthis(iterable.iterator(), cursor);\n-\t\tthis.iterable = iterable;\n-\t}\n-\n-\tpublic DatastoreSimpleResultsIterable(Iterator<T> iterator, Cursor cursor) {\n-\t\tthis.iterator = iterator;\n-\t\tthis.cursor = cursor;\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn this.iterator;\n-\t}\n-\n-\tpublic Cursor getCursor() {\n-\t\treturn this.cursor;\n-\t}\n-\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn this.iterable;\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java\ndeleted file mode 100644\nindex 1c0eb8d7..00000000\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java\n+++ /dev/null\n", "chunk": "@@ -1,50 +0,0 @@\n-/*\n- * Copyright 2017-2019 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.datastore.core;\n-\n-import java.util.Iterator;\n-\n-import com.google.cloud.datastore.Cursor;\n-\n-public class DatastoreSimpleResultsIterable<T> implements DatastoreResultsIterable<T> {\n-\tprivate final Iterator<T> iterator;\n-\tprivate final Cursor cursor;\n-\tprivate Iterable<T> iterable;\n-\n-\tpublic DatastoreSimpleResultsIterable(Iterable<T> iterable, Cursor cursor) {\n-\t\tthis(iterable.iterator(), cursor);\n-\t\tthis.iterable = iterable;\n-\t}\n-\n-\tpublic DatastoreSimpleResultsIterable(Iterator<T> iterator, Cursor cursor) {\n-\t\tthis.iterator = iterator;\n-\t\tthis.cursor = cursor;\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<T> iterator() {\n-\t\treturn this.iterator;\n-\t}\n-\n-\tpublic Cursor getCursor() {\n-\t\treturn this.cursor;\n-\t}\n-\n-\tpublic Iterable<T> getIterable() {\n-\t\treturn this.iterable;\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTI4MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504379281", "body": "Does it make sense to make `SliceImpl` also evaluate `hasNext()` lazily?", "bodyText": "Does it make sense to make SliceImpl also evaluate hasNext() lazily?", "bodyHTML": "<p dir=\"auto\">Does it make sense to make <code>SliceImpl</code> also evaluate <code>hasNext()</code> lazily?</p>", "author": "meltsufin", "createdAt": "2020-10-14T03:30:13Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -245,24 +245,25 @@ private String mapToFieldName(PropertyDescriptor propertyDescriptor) {\n \t}\n \n \tprivate Slice executeSliceQuery(Object[] parameters) {\n+\t\tDatastoreNextPageAwareResultsIterable<?> results =\n+\t\t\t\t(DatastoreNextPageAwareResultsIterable<?>)\n+\t\t\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n+\n+\t\treturn (Slice) this.processRawObjectForProjection(\n+\t\t\t\tnew SliceImpl(results.toList(),\n+\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n+\t\t\t\t\t\tresults.hasNextPage()));", "originalCommit": "b879f14210745398ae7ed33992b71a056a834dc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4Nzg5MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504987890", "bodyText": "It is a Spring Data class and expects a boolean parameter.", "author": "dmitry-s", "createdAt": "2020-10-14T21:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTExMTg4OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505111889", "bodyText": "Can we extend SliceImpl?", "author": "meltsufin", "createdAt": "2020-10-15T01:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6381db8928e532b067a5e14e37b66b70d85becb1", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\nindex 83f50666..352e0793 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n", "chunk": "@@ -244,15 +242,25 @@ public class PartTreeDatastoreQuery<T> extends AbstractDatastoreQuery<T> {\n \t\treturn persistentProperty.getFieldName();\n \t}\n \n+//\tprivate Slice executeSliceQuery(Object[] parameters) {\n+//\t\tDatastoreNextPageAwareResultsIterable<?> results =\n+//\t\t\t\t(DatastoreNextPageAwareResultsIterable<?>)\n+//\t\t\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n+//\n+//\t\treturn (Slice) this.processRawObjectForProjection(\n+//\t\t\t\tnew SliceImpl(results.toList(),\n+//\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n+//\t\t\t\t\t\tresults.hasNextPage()));\n+//\t}\n+\n \tprivate Slice executeSliceQuery(Object[] parameters) {\n-\t\tDatastoreNextPageAwareResultsIterable<?> results =\n-\t\t\t\t(DatastoreNextPageAwareResultsIterable<?>)\n-\t\t\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n-\n-\t\treturn (Slice) this.processRawObjectForProjection(\n-\t\t\t\tnew SliceImpl(results.toList(),\n-\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n-\t\t\t\t\t\tresults.hasNextPage()));\n+\t\tSlice<?> results =\n+\t\t\t\tthis.datastoreOperations.queryKeysOrEntitiesSlice(\n+\t\t\t\t\t\tbuildSliceQuey(parameters),\n+\t\t\t\t\t\tthis.entityType,\n+\t\t\t\t\t\tgetPageable(parameters));\n+\n+\t\treturn (Slice) this.processRawObjectForProjection(results);\n \t}\n \n \tprivate StructuredQuery buildSliceQuey(Object[] parameters) {\n", "next_change": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\nindex 352e0793..491b6cc8 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n", "chunk": "@@ -242,21 +243,17 @@ public class PartTreeDatastoreQuery<T> extends AbstractDatastoreQuery<T> {\n \t\treturn persistentProperty.getFieldName();\n \t}\n \n-//\tprivate Slice executeSliceQuery(Object[] parameters) {\n-//\t\tDatastoreNextPageAwareResultsIterable<?> results =\n-//\t\t\t\t(DatastoreNextPageAwareResultsIterable<?>)\n-//\t\t\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n-//\n-//\t\treturn (Slice) this.processRawObjectForProjection(\n-//\t\t\t\tnew SliceImpl(results.toList(),\n-//\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n-//\t\t\t\t\t\tresults.hasNextPage()));\n-//\t}\n-\n \tprivate Slice executeSliceQuery(Object[] parameters) {\n-\t\tSlice<?> results =\n-\t\t\t\tthis.datastoreOperations.queryKeysOrEntitiesSlice(\n-\t\t\t\t\t\tbuildSliceQuey(parameters),\n+\t\tStructuredQuery structuredQuery = buildSliceQuey(parameters);\n+\t\tSlice<?> results = structuredQuery instanceof KeyQuery\n+\t\t\t\t?\n+\t\t\t\tthis.datastoreOperations.queryKeysSlice(\n+\t\t\t\t\t\t(KeyQuery) structuredQuery,\n+\t\t\t\t\t\tthis.entityType,\n+\t\t\t\t\t\tgetPageable(parameters))\n+\t\t\t\t:\n+\t\t\t\tthis.datastoreOperations.queryEntitiesSlice(\n+\t\t\t\t\t\tstructuredQuery,\n \t\t\t\t\t\tthis.entityType,\n \t\t\t\t\t\tgetPageable(parameters));\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\nindex 83f50666..491b6cc8 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java\n", "chunk": "@@ -245,14 +244,20 @@ public class PartTreeDatastoreQuery<T> extends AbstractDatastoreQuery<T> {\n \t}\n \n \tprivate Slice executeSliceQuery(Object[] parameters) {\n-\t\tDatastoreNextPageAwareResultsIterable<?> results =\n-\t\t\t\t(DatastoreNextPageAwareResultsIterable<?>)\n-\t\t\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n-\n-\t\treturn (Slice) this.processRawObjectForProjection(\n-\t\t\t\tnew SliceImpl(results.toList(),\n-\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n-\t\t\t\t\t\tresults.hasNextPage()));\n+\t\tStructuredQuery structuredQuery = buildSliceQuey(parameters);\n+\t\tSlice<?> results = structuredQuery instanceof KeyQuery\n+\t\t\t\t?\n+\t\t\t\tthis.datastoreOperations.queryKeysSlice(\n+\t\t\t\t\t\t(KeyQuery) structuredQuery,\n+\t\t\t\t\t\tthis.entityType,\n+\t\t\t\t\t\tgetPageable(parameters))\n+\t\t\t\t:\n+\t\t\t\tthis.datastoreOperations.queryEntitiesSlice(\n+\t\t\t\t\t\tstructuredQuery,\n+\t\t\t\t\t\tthis.entityType,\n+\t\t\t\t\t\tgetPageable(parameters));\n+\n+\t\treturn (Slice) this.processRawObjectForProjection(results);\n \t}\n \n \tprivate StructuredQuery buildSliceQuey(Object[] parameters) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"oid": "6381db8928e532b067a5e14e37b66b70d85becb1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6381db8928e532b067a5e14e37b66b70d85becb1", "message": "PR comments", "committedDate": "2020-10-15T22:22:23Z", "type": "commit"}, {"oid": "16a9010be49dd26277edfa359322d0921d012b30", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/16a9010be49dd26277edfa359322d0921d012b30", "message": "PR comments", "committedDate": "2020-10-15T22:25:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4MTI0MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505981241", "body": "Can you clarify which type to specify for key?", "bodyText": "Can you clarify which type to specify for key?", "bodyHTML": "<p dir=\"auto\">Can you clarify which type to specify for key?</p>", "author": "meltsufin", "createdAt": "2020-10-16T02:02:13Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.", "originalCommit": "16a9010be49dd26277edfa359322d0921d012b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex e66ca4cd..2464d260 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n", "chunk": "@@ -273,25 +273,26 @@ public interface DatastoreOperations {\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n \t/**\n-\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n-\t * returned.\n-\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n \t * @return a Slice containing found objects\n \t */\n-\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n-\t * Runs a query that checks if there is at least one entry after the cursor.\n-\t *\n-\t * @param query the query that returned the cursor\n-\t * @param cursorAfter the cursor\n-\t * @return true if next page exists for the given query and cursor\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n \t */\n-\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex e66ca4cd..2464d260 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n", "chunk": "@@ -273,25 +273,26 @@ public interface DatastoreOperations {\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n \t/**\n-\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n-\t * returned.\n-\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n \t * @return a Slice containing found objects\n \t */\n-\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n-\t * Runs a query that checks if there is at least one entry after the cursor.\n-\t *\n-\t * @param query the query that returned the cursor\n-\t * @param cursorAfter the cursor\n-\t * @return true if next page exists for the given query and cursor\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n \t */\n-\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4MTc3Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505981776", "body": "```suggestion\r\n\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next the page exists.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n          \n          \n            \n            \t * Resulting Slice can be used to get a Pageable for the next page or to determine if next the page exists.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Resulting</span> <span class=\"pl-smi\">Slice</span> can be used to get a <span class=\"pl-smi\">Pageable</span> <span class=\"pl-k\">for</span> the next page or to determine <span class=\"pl-k\">if</span> next page exists.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Resulting</span> <span class=\"pl-smi\">Slice</span> can be used to get a <span class=\"pl-smi\">Pageable</span> <span class=\"pl-k\">for</span> the next page or to determine <span class=\"pl-k\">if</span> next <span class=\"x x-first x-last\">the </span>page exists.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "meltsufin", "createdAt": "2020-10-16T02:03:35Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.", "originalCommit": "16a9010be49dd26277edfa359322d0921d012b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex e66ca4cd..2464d260 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n", "chunk": "@@ -273,25 +273,26 @@ public interface DatastoreOperations {\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n \t/**\n-\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n-\t * returned.\n-\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n \t * @return a Slice containing found objects\n \t */\n-\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n-\t * Runs a query that checks if there is at least one entry after the cursor.\n-\t *\n-\t * @param query the query that returned the cursor\n-\t * @param cursorAfter the cursor\n-\t * @return true if next page exists for the given query and cursor\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n \t */\n-\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex e66ca4cd..2464d260 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n", "chunk": "@@ -273,25 +273,26 @@ public interface DatastoreOperations {\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n \t/**\n-\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n-\t * returned.\n-\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n \t * @return a Slice containing found objects\n \t */\n-\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n-\t * Runs a query that checks if there is at least one entry after the cursor.\n-\t *\n-\t * @param query the query that returned the cursor\n-\t * @param cursorAfter the cursor\n-\t * @return true if next page exists for the given query and cursor\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n \t */\n-\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4MjgyNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505982824", "body": "Do we still need this method, since `Slice` has `hasNextPage()`?", "bodyText": "Do we still need this method, since Slice has hasNextPage()?", "bodyHTML": "<p dir=\"auto\">Do we still need this method, since <code>Slice</code> has <code>hasNextPage()</code>?</p>", "author": "meltsufin", "createdAt": "2020-10-16T02:06:13Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\n+\t/**\n+\t * Runs a query that checks if there is at least one entry after the cursor.\n+\t *\n+\t * @param query the query that returned the cursor\n+\t * @param cursorAfter the cursor\n+\t * @return true if next page exists for the given query and cursor\n+\t */\n+\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);", "originalCommit": "16a9010be49dd26277edfa359322d0921d012b30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex e66ca4cd..2464d260 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n", "chunk": "@@ -273,25 +273,26 @@ public interface DatastoreOperations {\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n \t/**\n-\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n-\t * returned.\n-\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n \t * @return a Slice containing found objects\n \t */\n-\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n-\t * Runs a query that checks if there is at least one entry after the cursor.\n-\t *\n-\t * @param query the query that returned the cursor\n-\t * @param cursorAfter the cursor\n-\t * @return true if next page exists for the given query and cursor\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n \t */\n-\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex e66ca4cd..2464d260 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n", "chunk": "@@ -273,25 +273,26 @@ public interface DatastoreOperations {\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n \t/**\n-\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n-\t * returned.\n-\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n \t * @return a Slice containing found objects\n \t */\n-\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n-\t * Runs a query that checks if there is at least one entry after the cursor.\n-\t *\n-\t * @param query the query that returned the cursor\n-\t * @param cursorAfter the cursor\n-\t * @return true if next page exists for the given query and cursor\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n \t */\n-\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NDY2Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505984663", "body": "Can we extend `SliceImpl` such that `hasNextPage()` is lazy?\r\nFeel free to leave for another PR though.", "bodyText": "Can we extend SliceImpl such that hasNextPage() is lazy?\nFeel free to leave for another PR though.", "bodyHTML": "<p dir=\"auto\">Can we extend <code>SliceImpl</code> such that <code>hasNextPage()</code> is lazy?<br>\nFeel free to leave for another PR though.</p>", "author": "meltsufin", "createdAt": "2020-10-16T02:10:09Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -261,6 +266,32 @@ public long count(Class<?> entityClass) {\n \t\t\t\t: null;\n \t}\n \n+\t@Override\n+\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\t\treturn new SliceImpl<>(results.toList(),", "originalCommit": "16a9010be49dd26277edfa359322d0921d012b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxODIxMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506418212", "bodyText": "I don't think it is necessary because if you don't need  hasNextPage(), you could just use the queryKeysOrEntities method instead.", "author": "dmitry-s", "createdAt": "2020-10-16T13:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NDY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2NzI5NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506467294", "bodyText": "What about the use in repositories?", "author": "meltsufin", "createdAt": "2020-10-16T14:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NDY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex bb729e93..64469d43 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -267,8 +268,21 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t}\n \n \t@Override\n-\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n-\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\tpublic <T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\treturn buildSlice(query, pageable, Key.class);\n+\t}\n+\n+\t@Override\n+\tpublic <T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tif (query instanceof KeyQuery) {\n+\t\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");\n+\t\t}\n+\t\treturn buildSlice(query, pageable, entityClass);\n+\t}\n+\n+\tprivate <T> SliceImpl<T> buildSlice(StructuredQuery query, Pageable pageable, Class<T> entityClass) {\n+\t\tDatastoreResultsIterable<T> results = (DatastoreResultsIterable<T>)\n+\t\t\t\tqueryKeysOrEntities(applyPageable(query, pageable), entityClass);\n \t\treturn new SliceImpl<>(results.toList(),\n \t\t\t\tDatastorePageable.from(pageable, results.getCursor(), null),\n \t\t\t\tnextPageExists(query, results.getCursor()));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex bb729e93..79a321d9 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -267,8 +269,21 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t}\n \n \t@Override\n-\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n-\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\tpublic <T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\treturn buildSlice(query, pageable, Key.class);\n+\t}\n+\n+\t@Override\n+\tpublic <T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tif (query instanceof EntityQuery || query instanceof ProjectionEntityQuery) {\n+\t\t\treturn buildSlice(query, pageable, entityClass);\n+\t\t}\n+\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");\n+\t}\n+\n+\tprivate <T> SliceImpl<T> buildSlice(StructuredQuery query, Pageable pageable, Class<T> entityClass) {\n+\t\tDatastoreResultsIterable<T> results = (DatastoreResultsIterable<T>)\n+\t\t\t\tqueryKeysOrEntities(applyPageable(query, pageable), entityClass);\n \t\treturn new SliceImpl<>(results.toList(),\n \t\t\t\tDatastorePageable.from(pageable, results.getCursor(), null),\n \t\t\t\tnextPageExists(query, results.getCursor()));\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}, {"oid": "1909fe1226e406a92ee7138f02ffd15485a3d025", "committedDate": "2020-11-30 17:17:34 -0500", "message": "Fix auditing when running through DatastoreTemplate.performTransaction (#2604)"}, {"oid": "d9ae0b3670f3a852b719c15f5c36dc6b91ea2f06", "committedDate": "2020-12-18 07:17:25 -0500", "message": "Datastore reference query by example (backport) (#2614)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NzkzOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505987938", "body": "Can you remind me, what is the benefit of combining `queryEntities()` and `queryKeys()` into one method?\r\nSonar is identifying this as a \"code smell\".", "bodyText": "Can you remind me, what is the benefit of combining queryEntities() and queryKeys() into one method?\nSonar is identifying this as a \"code smell\".", "bodyHTML": "<p dir=\"auto\">Can you remind me, what is the benefit of combining <code>queryEntities()</code> and <code>queryKeys()</code> into one method?<br>\nSonar is identifying this as a \"code smell\".</p>", "author": "meltsufin", "createdAt": "2020-10-16T02:16:24Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);", "originalCommit": "16a9010be49dd26277edfa359322d0921d012b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQyNDU1NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506424554", "bodyText": "The code would be identical for these cases, so we are avoiding duplication this way.", "author": "dmitry-s", "createdAt": "2020-10-16T13:31:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NzkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ0NTQwMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506445402", "bodyText": "Let me see if I can refactor it to avoid duplication.", "author": "dmitry-s", "createdAt": "2020-10-16T13:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NzkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex e66ca4cd..2464d260 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n", "chunk": "@@ -273,25 +273,26 @@ public interface DatastoreOperations {\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n \t/**\n-\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n-\t * returned.\n-\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n \t * @return a Slice containing found objects\n \t */\n-\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n-\t * Runs a query that checks if there is at least one entry after the cursor.\n-\t *\n-\t * @param query the query that returned the cursor\n-\t * @param cursorAfter the cursor\n-\t * @return true if next page exists for the given query and cursor\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n \t */\n-\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex e66ca4cd..2464d260 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n", "chunk": "@@ -273,25 +273,26 @@ public interface DatastoreOperations {\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n \t/**\n-\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n-\t * returned.\n-\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n \t * @return a Slice containing found objects\n \t */\n-\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n-\t * Runs a query that checks if there is at least one entry after the cursor.\n-\t *\n-\t * @param query the query that returned the cursor\n-\t * @param cursorAfter the cursor\n-\t * @return true if next page exists for the given query and cursor\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n \t */\n-\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n \n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"oid": "600da902b69358aa181dc7161cd6f67f365ae6cb", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/600da902b69358aa181dc7161cd6f67f365ae6cb", "message": "PR comments", "committedDate": "2020-10-16T14:06:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3NDcxMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506474713", "body": "Why don't you check for those types in the condition then? What if other query types are added in the future?", "bodyText": "Why don't you check for those types in the condition then? What if other query types are added in the future?", "bodyHTML": "<p dir=\"auto\">Why don't you check for those types in the condition then? What if other query types are added in the future?</p>", "author": "meltsufin", "createdAt": "2020-10-16T14:17:11Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -267,8 +268,21 @@ public long count(Class<?> entityClass) {\n \t}\n \n \t@Override\n-\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n-\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\tpublic <T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\treturn buildSlice(query, pageable, Key.class);\n+\t}\n+\n+\t@Override\n+\tpublic <T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tif (query instanceof KeyQuery) {\n+\t\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");", "originalCommit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e9887a14bf443a3cd1ac0004c26808397ead967", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex 64469d43..79a321d9 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -274,10 +275,10 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \n \t@Override\n \tpublic <T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n-\t\tif (query instanceof KeyQuery) {\n-\t\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");\n+\t\tif (query instanceof EntityQuery || query instanceof ProjectionEntityQuery) {\n+\t\t\treturn buildSlice(query, pageable, entityClass);\n \t\t}\n-\t\treturn buildSlice(query, pageable, entityClass);\n+\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");\n \t}\n \n \tprivate <T> SliceImpl<T> buildSlice(StructuredQuery query, Pageable pageable, Class<T> entityClass) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "changed_code": [{"header": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex 64469d43..79a321d9 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n", "chunk": "@@ -274,10 +275,10 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \n \t@Override\n \tpublic <T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n-\t\tif (query instanceof KeyQuery) {\n-\t\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");\n+\t\tif (query instanceof EntityQuery || query instanceof ProjectionEntityQuery) {\n+\t\t\treturn buildSlice(query, pageable, entityClass);\n \t\t}\n-\t\treturn buildSlice(query, pageable, entityClass);\n+\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");\n \t}\n \n \tprivate <T> SliceImpl<T> buildSlice(StructuredQuery query, Pageable pageable, Class<T> entityClass) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}, {"oid": "1909fe1226e406a92ee7138f02ffd15485a3d025", "committedDate": "2020-11-30 17:17:34 -0500", "message": "Fix auditing when running through DatastoreTemplate.performTransaction (#2604)"}, {"oid": "d9ae0b3670f3a852b719c15f5c36dc6b91ea2f06", "committedDate": "2020-12-18 07:17:25 -0500", "message": "Datastore reference query by example (backport) (#2614)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3NjQxOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506476419", "body": "Can we also deprecate this method and bifurcate it like you did for `Slice`? This can be in a separate PR.", "bodyText": "Can we also deprecate this method and bifurcate it like you did for Slice? This can be in a separate PR.", "bodyHTML": "<p dir=\"auto\">Can we also deprecate this method and bifurcate it like you did for <code>Slice</code>? This can be in a separate PR.</p>", "author": "meltsufin", "createdAt": "2020-10-16T14:19:15Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -269,14 +272,35 @@\n \t */\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n+\t/**\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n+\n+\t/**\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return an iterable containing found objects and a cursor\n \t */\n \t<T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass);", "originalCommit": "600da902b69358aa181dc7161cd6f67f365ae6cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMTM0NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506701344", "bodyText": "created an issue: #2559", "author": "dmitry-s", "createdAt": "2020-10-16T20:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3NjQxOQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "13d7b1e8d9270f71207828a44f4c92c37944f8f4", "message": "Merge commit", "committedDate": null}]}, {"oid": "0e9887a14bf443a3cd1ac0004c26808397ead967", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/0e9887a14bf443a3cd1ac0004c26808397ead967", "message": "PR comments", "committedDate": "2020-10-16T19:57:14Z", "type": "commit"}]}