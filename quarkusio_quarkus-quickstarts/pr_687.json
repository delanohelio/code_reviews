{"pr_number": 687, "pr_title": "Migrate Kafka Streams quickstart code to Mutiny", "pr_author": "alexey-anufriev", "pr_createdAt": "2020-10-05T22:20:17Z", "pr_url": "https://github.com/quarkusio/quarkus-quickstarts/pull/687", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNDg1Mg==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/687#discussion_r500024852", "body": "Minor - 2 things:\r\n\r\n* we can create a Multi directly from a Stream (`Multi.createFrom().items(stream)`), it will iterate according to demands, which is often better\r\n* I don't believe we need to use `KafkaRecord`, we can use `Record` directly (depends who consume the stream).\r\n\r\nCan you check with:\r\n\r\n```java\r\npublic Multi<Record<Integer, String>> weatherStations() {\r\n   return Multi.createFrom().items(stations.stream()\r\n      .map(s -> Record.of(s.id, \"{ \\\"id\\\" : \" + s.id + \", \\\"name\\\" : \\\"\" + s.name + \"\\\" }\"))\r\n   );\r\n}\r\n```\r\n\r\n", "bodyText": "Minor - 2 things:\n\nwe can create a Multi directly from a Stream (Multi.createFrom().items(stream)), it will iterate according to demands, which is often better\nI don't believe we need to use KafkaRecord, we can use Record directly (depends who consume the stream).\n\nCan you check with:\npublic Multi<Record<Integer, String>> weatherStations() {\n   return Multi.createFrom().items(stations.stream()\n      .map(s -> Record.of(s.id, \"{ \\\"id\\\" : \" + s.id + \", \\\"name\\\" : \\\"\" + s.name + \"\\\" }\"))\n   );\n}", "bodyHTML": "<p dir=\"auto\">Minor - 2 things:</p>\n<ul dir=\"auto\">\n<li>we can create a Multi directly from a Stream (<code>Multi.createFrom().items(stream)</code>), it will iterate according to demands, which is often better</li>\n<li>I don't believe we need to use <code>KafkaRecord</code>, we can use <code>Record</code> directly (depends who consume the stream).</li>\n</ul>\n<p dir=\"auto\">Can you check with:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public Multi&lt;Record&lt;Integer, String&gt;&gt; weatherStations() {\n   return Multi.createFrom().items(stations.stream()\n      .map(s -&gt; Record.of(s.id, &quot;{ \\&quot;id\\&quot; : &quot; + s.id + &quot;, \\&quot;name\\&quot; : \\&quot;&quot; + s.name + &quot;\\&quot; }&quot;))\n   );\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">Multi&lt;<span class=\"pl-k\">Record&lt;<span class=\"pl-smi\">Integer</span>, <span class=\"pl-smi\">String</span>&gt;</span>&gt;</span> weatherStations() {\n   <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Multi</span><span class=\"pl-k\">.</span>createFrom()<span class=\"pl-k\">.</span>items(stations<span class=\"pl-k\">.</span>stream()\n      .map(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Record</span><span class=\"pl-k\">.</span>of(s<span class=\"pl-k\">.</span>id, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{ <span class=\"pl-cce\">\\\"</span>id<span class=\"pl-cce\">\\\"</span> : <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> s<span class=\"pl-k\">.</span>id <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, <span class=\"pl-cce\">\\\"</span>name<span class=\"pl-cce\">\\\"</span> : <span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> s<span class=\"pl-k\">.</span>name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\\"</span> }<span class=\"pl-pds\">\"</span></span>))\n   );\n}</pre></div>", "author": "cescoffier", "createdAt": "2020-10-06T06:05:25Z", "path": "kafka-streams-quickstart/producer/src/main/java/org/acme/kafka/streams/producer/generator/ValuesGenerator.java", "diffHunk": "@@ -60,13 +60,13 @@\n     }\n \n     @Outgoing(\"weather-stations\")\n-    public Flowable<KafkaRecord<Integer, String>> weatherStations() {\n+    public Multi<KafkaRecord<Integer, String>> weatherStations() {\n         List<KafkaRecord<Integer, String>> stationsAsJson = stations.stream()", "originalCommit": "71bde39b9af3afd8df4a3157be48db178df6559f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIzNTU2Nw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/687#discussion_r500235567", "bodyText": "@cescoffier, could you please let me know which Record you mean in this case? Did not find this class right away.", "author": "alexey-anufriev", "createdAt": "2020-10-06T12:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNDg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI5MjE1NQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/687#discussion_r500292155", "bodyText": "This one: io.smallrye.reactive.messaging.kafka.Record. It's quite new, so be sure you have the latest Quarkus master.", "author": "cescoffier", "createdAt": "2020-10-06T13:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNDg1Mg=="}], "type": "inlineReview"}, {"oid": "fedea1a0ac233f2dbeb0df896944e248ee69f134", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/fedea1a0ac233f2dbeb0df896944e248ee69f134", "message": "Migrate Kafka Streams quickstart code to Mutiny", "committedDate": "2020-10-06T21:21:22Z", "type": "commit"}, {"oid": "fedea1a0ac233f2dbeb0df896944e248ee69f134", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/fedea1a0ac233f2dbeb0df896944e248ee69f134", "message": "Migrate Kafka Streams quickstart code to Mutiny", "committedDate": "2020-10-06T21:21:22Z", "type": "forcePushed"}]}