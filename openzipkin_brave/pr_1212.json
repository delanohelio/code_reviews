{"pr_number": 1212, "pr_title": "Allows MutableSpan to be used directly with Zipkin Reporter", "pr_author": "codefromthecrypt", "pr_createdAt": "2020-05-13T06:59:42Z", "pr_url": "https://github.com/openzipkin/brave/pull/1212", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMzUwMg==", "url": "https://github.com/openzipkin/brave/pull/1212#discussion_r424213502", "body": "bug in the old toString", "bodyText": "bug in the old toString", "bodyHTML": "<p dir=\"auto\">bug in the old toString</p>", "author": "codefromthecrypt", "createdAt": "2020-05-13T07:00:30Z", "path": "brave/src/test/java/brave/handler/MutableSpanTest.java", "diffHunk": "@@ -680,14 +680,14 @@\n     span.forEachAnnotation((key, value) -> !value.equals(\"redacted\") ? value : null);\n     span.forEachTag((key, value) -> !key.equals(\"redacted\") ? value : null);\n \n-    assertThat(span).hasToString(\"{\"\n-      + \"\\\"traceId\\\":\\\"1\\\",\\\"parentId\\\":\\\"2\\\",\\\"id\\\":\\\"2\\\",\"\n+    assertThat(span.toString()).isEqualTo((\"{\"\n+      + \"\\\"traceId\\\":\\\"0000000000000001\\\",\\\"parentId\\\":\\\"0000000000000002\\\",\\\"id\\\":\\\"0000000000000003\\\",\"\n       + \"\\\"kind\\\":\\\"CLIENT\\\",\\\"name\\\":\\\"get\\\",\\\"timestamp\\\":1000,\\\"duration\\\":200,\"\n       + \"\\\"localEndpoint\\\":{\\\"serviceName\\\":\\\"frontend\\\",\\\"ipv4\\\":\\\"127.0.0.1\\\"},\"\n       + \"\\\"remoteEndpoint\\\":{\\\"serviceName\\\":\\\"backend\\\",\\\"ipv4\\\":\\\"192.168.99.101\\\",\\\"port\\\":9000},\"\n-      + \"\\\"annotations\\\":[{\\\"timestamp\\\":1100,\\\"value\\\":\\\"foo}],\"\n+      + \"\\\"annotations\\\":[{\\\"timestamp\\\":1100,\\\"value\\\":\\\"foo\\\"}],\"", "originalCommit": "3b8d23551b6d72d16b8f4bf639744f8a1ff0a147", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNDM1MQ==", "url": "https://github.com/openzipkin/brave/pull/1212#discussion_r424214351", "body": "```suggestion\r\n      throw new IllegalArgumentException(field + \" is empty\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IllegalArgumentException(field + \"is empty\");\n          \n          \n            \n                  throw new IllegalArgumentException(field + \" is empty\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(field <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>is empty<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(field <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\"> </span>is empty<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-05-13T07:02:14Z", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -1004,6 +952,60 @@ static int entriesHashCode(Object[] entries, int count) {\n     return h;\n   }\n \n+  @Nullable static String normalizeIdField(String field, @Nullable String id, boolean isNullable) {\n+    if (id == null) {\n+      if (isNullable) return null;\n+      throw new NullPointerException(field + \" == null\");\n+    }\n+    int length = id.length();\n+    if (length == 0) {\n+      if (isNullable) return null;\n+      throw new IllegalArgumentException(field + \"is empty\");", "originalCommit": "3b8d23551b6d72d16b8f4bf639744f8a1ff0a147", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNTA1OA==", "url": "https://github.com/openzipkin/brave/pull/1212#discussion_r424215058", "body": "here's the cool file. Let's us plug in as an encoder similar to stackdriver https://github.com/openzipkin/zipkin-gcp/tree/master/sender-stackdriver#configuration", "bodyText": "here's the cool file. Let's us plug in as an encoder similar to stackdriver https://github.com/openzipkin/zipkin-gcp/tree/master/sender-stackdriver#configuration", "bodyHTML": "<p dir=\"auto\">here's the cool file. Let's us plug in as an encoder similar to stackdriver <a href=\"https://github.com/openzipkin/zipkin-gcp/tree/master/sender-stackdriver#configuration\">https://github.com/openzipkin/zipkin-gcp/tree/master/sender-stackdriver#configuration</a></p>", "author": "codefromthecrypt", "createdAt": "2020-05-13T07:03:44Z", "path": "brave/src/test/java/brave/features/handler/MutableSpanAsyncReporterTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.features.handler;\n+\n+import brave.Tags;\n+import brave.Tracing;\n+import brave.handler.MutableSpan;\n+import brave.handler.MutableSpanBytesEncoder;\n+import brave.handler.SpanHandler;\n+import brave.propagation.B3SingleFormat;\n+import brave.propagation.TraceContext;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import zipkin2.codec.BytesEncoder;\n+import zipkin2.codec.Encoding;\n+import zipkin2.junit.ZipkinRule;\n+import zipkin2.reporter.AsyncReporter;\n+import zipkin2.reporter.okhttp3.OkHttpSender;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * This is an example of why {@link MutableSpanBytesEncoder} was written. Particularly, it allows\n+ * direct encoding from {@link MutableSpan} into JSON without converting to Zipkin model first.\n+ */\n+public class MutableSpanAsyncReporterTest {", "originalCommit": "0705f1d754e32e368e8f7c9654fb864bc3705930", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a098189668eeb0a9178cb62c0903bc6062756e79", "url": "https://github.com/openzipkin/brave/commit/a098189668eeb0a9178cb62c0903bc6062756e79", "message": "Allows MutableSpan to be used directly with Zipkin Reporter\n\nThis shows how a direct (zero conversion) async reporter can exist in\nthe next version of Zipkin Reporter. This test should be left around so\nthat people don't accidentally break it!\n\nIncidentally, this can be leveraged in other libraries as well.\n\nSee https://github.com/openzipkin/zipkin/issues/3005", "committedDate": "2020-05-14T10:02:10Z", "type": "forcePushed"}, {"oid": "a098189668eeb0a9178cb62c0903bc6062756e79", "url": "https://github.com/openzipkin/brave/commit/a098189668eeb0a9178cb62c0903bc6062756e79", "message": "Allows MutableSpan to be used directly with Zipkin Reporter\n\nThis shows how a direct (zero conversion) async reporter can exist in\nthe next version of Zipkin Reporter. This test should be left around so\nthat people don't accidentally break it!\n\nIncidentally, this can be leveraged in other libraries as well.\n\nSee https://github.com/openzipkin/zipkin/issues/3005", "committedDate": "2020-05-14T10:02:10Z", "type": "commit"}]}