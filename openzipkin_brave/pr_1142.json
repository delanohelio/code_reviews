{"pr_number": 1142, "pr_title": "Prepares for dynamic baggage and fixes broken OSGi config", "pr_author": "codefromthecrypt", "pr_createdAt": "2020-04-05T13:15:56Z", "pr_url": "https://github.com/openzipkin/brave/pull/1142", "timeline": [{"oid": "cc91a08a49a25d5e34192b00f7826bc990054afe", "url": "https://github.com/openzipkin/brave/commit/cc91a08a49a25d5e34192b00f7826bc990054afe", "message": "Prepares for dynamic baggage\n\nThis refactors internal code around baggage so that it can handle\ndynamic baggage in a single propagated field. This also removes unused\ntag parsing logic in gRPC as we no longer mutate tags.\n\n`BaggageState` is the entry in `TraceContext.extra()` that holds all\nbaggage, whether they are fixed or not. `BaggageStateHandler` is given\none slot and currently uses one slot per `BaggageField`. However,\n`DynamicBaggageStateHandler` shows we can do multiple fields in one\nslot, just we aren't doing that yet as we need to define an encoding.", "committedDate": "2020-04-05T13:12:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwMDczMQ==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r403700731", "body": "encodeState is what Setter.set will use. I was bored, so I used property encoding in the test, but we will likely do comma, equals in real life.\r\n\r\nThis is how we can tunnel many baggage fields over one header, named for example, \"baggage\" or \"b3ext\" or whatever someone wants.", "bodyText": "encodeState is what Setter.set will use. I was bored, so I used property encoding in the test, but we will likely do comma, equals in real life.\nThis is how we can tunnel many baggage fields over one header, named for example, \"baggage\" or \"b3ext\" or whatever someone wants.", "bodyHTML": "<p dir=\"auto\">encodeState is what Setter.set will use. I was bored, so I used property encoding in the test, but we will likely do comma, equals in real life.</p>\n<p dir=\"auto\">This is how we can tunnel many baggage fields over one header, named for example, \"baggage\" or \"b3ext\" or whatever someone wants.</p>", "author": "codefromthecrypt", "createdAt": "2020-04-05T13:17:50Z", "path": "brave/src/test/java/brave/features/baggage/DynamicBaggageTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.features.baggage;\n+\n+import brave.internal.baggage.BaggageState;\n+import brave.internal.baggage.BaggageStateTest;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/** This is an internal feature until we settle on an encoding format. */\n+public class DynamicBaggageTest extends BaggageStateTest<Map<String, String>> {\n+  DynamicBaggageStateHandler handler = new DynamicBaggageStateHandler();\n+\n+  @Override protected BaggageState.Factory newFactory() {\n+    return BaggageState.newFactory(handler);\n+  }\n+\n+  @Test public void encodes_arbitrary_fields() {\n+    BaggageState baggageState = factory.create();\n+\n+    baggageState.updateValue(field1, \"1\");\n+    baggageState.updateValue(field2, \"2\");\n+    baggageState.updateValue(field3, \"3\");\n+\n+    assertThat(baggageState.encodeState(handler))", "originalCommit": "cc91a08a49a25d5e34192b00f7826bc990054afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwMDk1Nw==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r403700957", "body": "```suggestion\r\n  /** This stashes the tag context into ad-hoc baggage state so it isn't lost */\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** This stashes the tag context in \"extra\" so it isn't lost */\n          \n          \n            \n              /** This stashes the tag context into ad-hoc baggage state so it isn't lost */", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"40\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* This stashes the tag context <span class=\"x x-first x-last\">in \"extra\"</span> so it isn't lost <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"40\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* This stashes the tag context <span class=\"x x-first x-last\">into ad-hoc baggage state</span> so it isn't lost <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-05T13:19:35Z", "path": "instrumentation/grpc/src/main/java/brave/grpc/GrpcPropagation.java", "diffHunk": "@@ -35,8 +39,8 @@\n     Metadata.Key.of(\"grpc-trace-bin\", Metadata.BINARY_BYTE_MARSHALLER);\n \n   /** This stashes the tag context in \"extra\" so it isn't lost */", "originalCommit": "cc91a08a49a25d5e34192b00f7826bc990054afe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a5eacafe835565ca2b6884f75387ac8675a40b5", "url": "https://github.com/openzipkin/brave/commit/1a5eacafe835565ca2b6884f75387ac8675a40b5", "message": "Update instrumentation/grpc/src/main/java/brave/grpc/GrpcPropagation.java", "committedDate": "2020-04-05T13:19:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwMTI1MQ==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r403701251", "body": "```suggestion\r\n      Platform.get().log(\"error encode gRPC tags\", e);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Platform.get().log(\"error decoding gRPC tags\", e);\n          \n          \n            \n                  Platform.get().log(\"error encode gRPC tags\", e);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">Platform</span><span class=\"pl-k\">.</span>get()<span class=\"pl-k\">.</span>log(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>error <span class=\"x x-first x-last\">decoding</span> gRPC tags<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">Platform</span><span class=\"pl-k\">.</span>get()<span class=\"pl-k\">.</span>log(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>error <span class=\"x x-first x-last\">encode</span> gRPC tags<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "codefromthecrypt", "createdAt": "2020-04-05T13:22:22Z", "path": "instrumentation/grpc/src/main/java/brave/grpc/HexBinaryMarshaller.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.grpc;\n+\n+import brave.internal.Platform;\n+import com.google.common.io.BaseEncoding;\n+import io.grpc.Metadata.BinaryMarshaller;\n+\n+import static brave.internal.Throwables.propagateIfFatal;\n+\n+/** This logs instead of throwing exceptions. */\n+final class HexBinaryMarshaller implements BinaryMarshaller<String> {\n+  // Guava 14+ is ok as gRPC already depends on it, and will for the foreseeable future\n+  static final BaseEncoding ENCODING = BaseEncoding.base16().lowerCase().omitPadding();\n+\n+  @Override\n+  public byte[] toBytes(String encoded) {\n+    if (encoded == null) throw new NullPointerException(\"encoded == null\"); // programming error\n+    try {\n+      return ENCODING.decode(encoded);\n+    } catch (Throwable e) {\n+      propagateIfFatal(e);\n+      Platform.get().log(\"error decoding gRPC tags\", e);\n+      return null;\n+    }\n+  }\n+\n+  @Override public String parseBytes(byte[] buf) {\n+    if (buf == null || buf.length == 0) return null;\n+    try {\n+      return ENCODING.encode(buf);\n+    } catch (Throwable e) {\n+      propagateIfFatal(e);\n+      Platform.get().log(\"error decoding gRPC tags\", e);", "originalCommit": "1a5eacafe835565ca2b6884f75387ac8675a40b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ba960fc3885aa9543b39d804438e02ad514f7bb", "url": "https://github.com/openzipkin/brave/commit/3ba960fc3885aa9543b39d804438e02ad514f7bb", "message": "Update instrumentation/grpc/src/main/java/brave/grpc/HexBinaryMarshaller.java", "committedDate": "2020-04-05T13:22:27Z", "type": "commit"}, {"oid": "aa23f3e7864a8172fadbc69571ef27724dc4dbab", "url": "https://github.com/openzipkin/brave/commit/aa23f3e7864a8172fadbc69571ef27724dc4dbab", "message": "dramatically simplify grpc tags forwarding", "committedDate": "2020-04-06T00:31:59Z", "type": "commit"}, {"oid": "9ff95acd313ae3166e63c89a248df360470fd13c", "url": "https://github.com/openzipkin/brave/commit/9ff95acd313ae3166e63c89a248df360470fd13c", "message": "rename", "committedDate": "2020-04-06T00:32:41Z", "type": "commit"}, {"oid": "08f8e63b017be9e45b30f0cb979061f0b9a723db", "url": "https://github.com/openzipkin/brave/commit/08f8e63b017be9e45b30f0cb979061f0b9a723db", "message": "reflection drift", "committedDate": "2020-04-06T01:05:54Z", "type": "commit"}, {"oid": "6960dd36e4c2bafda42b0be407e478f8022a353f", "url": "https://github.com/openzipkin/brave/commit/6960dd36e4c2bafda42b0be407e478f8022a353f", "message": "cleans up naming and fixes OSGi glitch", "committedDate": "2020-04-06T01:19:09Z", "type": "commit"}, {"oid": "5b9649799ead8e456836b27a3289b4812403b220", "url": "https://github.com/openzipkin/brave/commit/5b9649799ead8e456836b27a3289b4812403b220", "message": "polish", "committedDate": "2020-04-06T01:23:03Z", "type": "commit"}, {"oid": "21ec2224cdd94a5faf267eba693ffd0115f85911", "url": "https://github.com/openzipkin/brave/commit/21ec2224cdd94a5faf267eba693ffd0115f85911", "message": "restores getAllFields performance for base case", "committedDate": "2020-04-06T02:04:33Z", "type": "commit"}, {"oid": "d2de9c37599cb86f077ef3a13072a30d6d603f6a", "url": "https://github.com/openzipkin/brave/commit/d2de9c37599cb86f077ef3a13072a30d6d603f6a", "message": "Improves example", "committedDate": "2020-04-06T02:14:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5ODY1NQ==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r403798655", "body": "`Collections.emptyMap`? Otherwise the interface needs to be updated to have a `@Nullable` return with what it means, but empty map seems simpler without any overhead.", "bodyText": "Collections.emptyMap? Otherwise the interface needs to be updated to have a @Nullable return with what it means, but empty map seems simpler without any overhead.", "bodyHTML": "<p dir=\"auto\"><code>Collections.emptyMap</code>? Otherwise the interface needs to be updated to have a <code>@Nullable</code> return with what it means, but empty map seems simpler without any overhead.</p>", "author": "anuraaga", "createdAt": "2020-04-06T02:22:09Z", "path": "brave/src/test/java/brave/features/baggage/DynamicBaggageHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.features.baggage;\n+\n+import brave.baggage.BaggageField;\n+import brave.internal.Nullable;\n+import brave.internal.baggage.BaggageHandler;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.logging.log4j.core.util.StringBuilderWriter;\n+\n+import static com.google.common.base.Objects.equal;\n+\n+/** This accepts any keys, but only writes to one propagation field. */\n+final class DynamicBaggageHandler implements BaggageHandler<Map<BaggageField, String>> {\n+  @Override public boolean isDynamic() {\n+    return true;\n+  }\n+\n+  @Override public List<BaggageField> currentFields(@Nullable Map<BaggageField, String> state) {\n+    if (state == null) return Collections.emptyList();\n+    return new ArrayList<>(state.keySet());\n+  }\n+\n+  @Override public boolean handlesField(BaggageField field) {\n+    return true; // grow indefinitely\n+  }\n+\n+  @Override public String getValue(BaggageField field, Map<BaggageField, String> state) {\n+    return state.get(field);\n+  }\n+\n+  @Override public Map<BaggageField, String> newState(BaggageField field, String value) {\n+    LinkedHashMap<BaggageField, String> newState = new LinkedHashMap<>();\n+    newState.put(field, value);\n+    return newState;\n+  }\n+\n+  @Override\n+  public Map<BaggageField, String> mergeState(Map<BaggageField, String> state, BaggageField field,\n+    String value) {\n+    if (equal(value, state.get(field))) return state;\n+    if (value == null) {\n+      if (!state.containsKey(field)) return state;\n+      if (state.size() == 1) return null;", "originalCommit": "21ec2224cdd94a5faf267eba693ffd0115f85911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2Mjg4Ng==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r407162886", "bodyText": "punted to #1153.. agree empty map doesn't have more overhead as the copy/constructor of LHM is cheap.  However, it does complicate the state model. let me know what you think..", "author": "codefromthecrypt", "createdAt": "2020-04-12T08:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5ODY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5ODc4Mw==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r403798783", "body": "Any reason not to use `updateState` like `updateValue`?", "bodyText": "Any reason not to use updateState like updateValue?", "bodyHTML": "<p dir=\"auto\">Any reason not to use <code>updateState</code> like <code>updateValue</code>?</p>", "author": "anuraaga", "createdAt": "2020-04-06T02:22:52Z", "path": "brave/src/main/java/brave/internal/baggage/BaggageHandler.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.baggage;\n+\n+import brave.baggage.BaggageField;\n+import brave.internal.Nullable;\n+import brave.propagation.Propagation;\n+import brave.propagation.TraceContext;\n+import brave.propagation.TraceContextOrSamplingFlags;\n+import java.util.List;\n+\n+/**\n+ * Handles context storage of one or more baggage fields using one {@link ExtraBaggageFields}\n+ * state.\n+ *\n+ * @param <S> the state that represents one or more baggage fields\n+ */\n+public interface BaggageHandler<S> {\n+  /**\n+   * When true, calls to {@link #currentFields(Object)} and {@link #handlesField(BaggageField)}\n+   * cannot be cached.\n+   */\n+  boolean isDynamic();\n+\n+  /** Don't cache if {@link #isDynamic()}. If not dynamic, the state parameter can be ignored. */\n+  List<BaggageField> currentFields(@Nullable S state);\n+\n+  /** Don't cache if {@link #isDynamic()}. */\n+  boolean handlesField(BaggageField field);\n+\n+  /**\n+   * Gets the value of this field in the given state.\n+   *\n+   * @see BaggageField#getValue(TraceContext)\n+   * @see BaggageField#getValue(TraceContextOrSamplingFlags)\n+   */\n+  @Nullable String getValue(BaggageField field, S state);\n+\n+  /**\n+   * Creates a state object to support the first field value.\n+   *\n+   * @see BaggageField#updateValue(TraceContext, String)\n+   * @see BaggageField#updateValue(TraceContextOrSamplingFlags, String)\n+   */\n+  S newState(BaggageField field, String value);\n+\n+  /**\n+   * Updates a state object to handle a field value change.\n+   *\n+   * @see BaggageField#updateValue(TraceContext, String)\n+   * @see BaggageField#updateValue(TraceContextOrSamplingFlags, String)\n+   */\n+  S mergeState(S state, BaggageField field, @Nullable String value);", "originalCommit": "d2de9c37599cb86f077ef3a13072a30d6d603f6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjkwNw==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r407162907", "bodyText": "good!", "author": "codefromthecrypt", "createdAt": "2020-04-12T08:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5ODc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5OTQ3OQ==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r403799479", "body": "Guessing you'll replace the properties load with this later but maybe add a TODO", "bodyText": "Guessing you'll replace the properties load with this later but maybe add a TODO", "bodyHTML": "<p dir=\"auto\">Guessing you'll replace the properties load with this later but maybe add a TODO</p>", "author": "anuraaga", "createdAt": "2020-04-06T02:26:20Z", "path": "brave/src/test/java/brave/internal/baggage/EntrySplitter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.baggage;\n+\n+import brave.internal.Platform;\n+\n+/**\n+ * Splits a character sequence that's in a delimited string trimming optional whitespace (OWS)\n+ * before or after delimiters.\n+ */\n+public final class EntrySplitter {", "originalCommit": "d2de9c37599cb86f077ef3a13072a30d6d603f6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MDU0NQ==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r407160545", "bodyText": "4680f9f", "author": "codefromthecrypt", "createdAt": "2020-04-12T07:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5OTQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5OTkzOQ==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r403799939", "body": "Think you may have intended to have the below comment here too, or only here since it's the first occurrence", "bodyText": "Think you may have intended to have the below comment here too, or only here since it's the first occurrence", "bodyHTML": "<p dir=\"auto\">Think you may have intended to have the below comment here too, or only here since it's the first occurrence</p>", "author": "anuraaga", "createdAt": "2020-04-06T02:28:40Z", "path": "brave/src/test/java/brave/internal/baggage/EntrySplitter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.baggage;\n+\n+import brave.internal.Platform;\n+\n+/**\n+ * Splits a character sequence that's in a delimited string trimming optional whitespace (OWS)\n+ * before or after delimiters.\n+ */\n+public final class EntrySplitter {\n+  static final EntrySplitter INSTANCE = new EntrySplitter('=', ',');\n+\n+  public static EntrySplitter get() {\n+    return INSTANCE;\n+  }\n+\n+  public static EntrySplitter create(char keyValueSeparator, char entrySeparator) {\n+    return new EntrySplitter(keyValueSeparator, entrySeparator);\n+  }\n+\n+  interface Handler {\n+    boolean onEntry(CharSequence buffer, int beginName, int endName, int beginValue, int endValue);\n+  }\n+\n+  final int keyValueSeparator, entrySeparator;\n+  final String missingKeyValueSeparator;\n+\n+  EntrySplitter(int keyValueSeparator, int entrySeparator) {\n+    this.keyValueSeparator = keyValueSeparator;\n+    this.entrySeparator = entrySeparator;\n+    this.missingKeyValueSeparator =\n+      \"Invalid input: missing '\" + keyValueSeparator + \"' between key and value\";\n+  }\n+\n+  public boolean parse(String buffer, Handler handler, boolean shouldThrow) {\n+    int i = 0, length = buffer.length();\n+    while (i < length) {\n+      if (isOWS(buffer.charAt(i++))) break; // skip whitespace", "originalCommit": "d2de9c37599cb86f077ef3a13072a30d6d603f6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MDQzNg==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r407160436", "bodyText": "accident.. let's review properly when actually used", "author": "codefromthecrypt", "createdAt": "2020-04-12T07:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5OTkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgwMDYyNw==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r403800627", "body": "I think we need to only do this check when not inside a field or value, maybe not fields but presumably value should allow spaces.", "bodyText": "I think we need to only do this check when not inside a field or value, maybe not fields but presumably value should allow spaces.", "bodyHTML": "<p dir=\"auto\">I think we need to only do this check when not inside a field or value, maybe not fields but presumably value should allow spaces.</p>", "author": "anuraaga", "createdAt": "2020-04-06T02:31:59Z", "path": "brave/src/test/java/brave/internal/baggage/EntrySplitter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.baggage;\n+\n+import brave.internal.Platform;\n+\n+/**\n+ * Splits a character sequence that's in a delimited string trimming optional whitespace (OWS)\n+ * before or after delimiters.\n+ */\n+public final class EntrySplitter {\n+  static final EntrySplitter INSTANCE = new EntrySplitter('=', ',');\n+\n+  public static EntrySplitter get() {\n+    return INSTANCE;\n+  }\n+\n+  public static EntrySplitter create(char keyValueSeparator, char entrySeparator) {\n+    return new EntrySplitter(keyValueSeparator, entrySeparator);\n+  }\n+\n+  interface Handler {\n+    boolean onEntry(CharSequence buffer, int beginName, int endName, int beginValue, int endValue);\n+  }\n+\n+  final int keyValueSeparator, entrySeparator;\n+  final String missingKeyValueSeparator;\n+\n+  EntrySplitter(int keyValueSeparator, int entrySeparator) {\n+    this.keyValueSeparator = keyValueSeparator;\n+    this.entrySeparator = entrySeparator;\n+    this.missingKeyValueSeparator =\n+      \"Invalid input: missing '\" + keyValueSeparator + \"' between key and value\";\n+  }\n+\n+  public boolean parse(String buffer, Handler handler, boolean shouldThrow) {\n+    int i = 0, length = buffer.length();\n+    while (i < length) {\n+      if (isOWS(buffer.charAt(i++))) break; // skip whitespace\n+    }\n+\n+    if (i == length) return logOrThrow(\"Invalid input: only whitespace\", shouldThrow);\n+    if (buffer.charAt(i) == keyValueSeparator) {\n+      return logOrThrow(\"Invalid input: missing key\", shouldThrow);\n+    }\n+\n+    int beginName = i, endName = -1, beginValue = -1;\n+    while (i < length) {\n+      char c = buffer.charAt(i++);\n+      // OWS is zero or more spaces or tabs https://httpwg.org/specs/rfc7230.html#rfc.section.3.2\n+      if (isOWS(c)) continue; // trim whitespace", "originalCommit": "d2de9c37599cb86f077ef3a13072a30d6d603f6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MDM3Mw==", "url": "https://github.com/openzipkin/brave/pull/1142#discussion_r407160373", "bodyText": "sorry this type was not intended yet.. it isn't used.. let me delete and we can do a proper review later?", "author": "codefromthecrypt", "createdAt": "2020-04-12T07:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgwMDYyNw=="}], "type": "inlineReview"}]}