{"pr_number": 4095, "pr_title": "feat: Add BeforeAfterEvent", "pr_author": "ktksan", "pr_createdAt": "2020-07-22T19:30:50Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/4095", "timeline": [{"oid": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf", "url": "https://github.com/MovingBlocks/Terasology/commit/332bcde0a18813fa1ec7ac5b30a09a320a8416bf", "message": "delete extra files", "committedDate": "2020-07-22T20:53:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTM2Ng==", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459635366", "body": "Did you ever work with [Generics](https://www.baeldung.com/java-generics), as in, implemented a generic class? I'd think this would be a good case where we can use that - don't fix the event to be based on float right away.\r\n\r\nSo here's my suggestion:\r\n```suggestion\r\npublic abstract class BeforeAfterEvent<T> implements Event {\r\n```\r\n\r\n- make the class abstract to ensure nobody can create a `new BeforeAfterEvent(\"foo\", \"bar\")` out of thin air, but has to extend it to use it.\r\n- shorten the name to `BeforeAfterEvent` - I don't see any good value in explicitly prefixing the \"Abstract\" part, and the inheritance line will read a little bit cleaner\r\n  ```java\r\n  public class HealthChangedEvent extends BeforeAfterEvent<Float> { ... }\r\n  ```\r\n- make the type of the changed value generic `<T>`. this allows to reuse the same base class regardless whether the value is an integer, a float, a string, or anything else. However, this implies that we cannot offer the `getChange` on this base class.\r\n", "bodyText": "Did you ever work with Generics, as in, implemented a generic class? I'd think this would be a good case where we can use that - don't fix the event to be based on float right away.\nSo here's my suggestion:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AbstractBeforeAfterEvent implements Event {\n          \n          \n            \n            public abstract class BeforeAfterEvent<T> implements Event {\n          \n      \n    \n    \n  \n\n\nmake the class abstract to ensure nobody can create a new BeforeAfterEvent(\"foo\", \"bar\") out of thin air, but has to extend it to use it.\nshorten the name to BeforeAfterEvent - I don't see any good value in explicitly prefixing the \"Abstract\" part, and the inheritance line will read a little bit cleaner\npublic class HealthChangedEvent extends BeforeAfterEvent<Float> { ... }\n\nmake the type of the changed value generic <T>. this allows to reuse the same base class regardless whether the value is an integer, a float, a string, or anything else. However, this implies that we cannot offer the getChange on this base class.", "bodyHTML": "<p dir=\"auto\">Did you ever work with <a href=\"https://www.baeldung.com/java-generics\" rel=\"nofollow\">Generics</a>, as in, implemented a generic class? I'd think this would be a good case where we can use that - don't fix the event to be based on float right away.</p>\n<p dir=\"auto\">So here's my suggestion:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">AbstractBeforeAfterEvent</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">Event</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k x x-first\">abstract</span><span class=\"x x-last\"> </span><span class=\"pl-k\">class</span> <span class=\"pl-en x x-first\">BeforeAfterEvent</span><span class=\"x x-last\">&lt;T&gt;</span> <span class=\"pl-k\">implements</span> <span class=\"pl-e\">Event</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<ul dir=\"auto\">\n<li>make the class abstract to ensure nobody can create a <code>new BeforeAfterEvent(\"foo\", \"bar\")</code> out of thin air, but has to extend it to use it.</li>\n<li>shorten the name to <code>BeforeAfterEvent</code> - I don't see any good value in explicitly prefixing the \"Abstract\" part, and the inheritance line will read a little bit cleaner\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class HealthChangedEvent extends BeforeAfterEvent&lt;Float&gt; { ... }\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">HealthChangedEvent</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">BeforeAfterEvent&lt;<span class=\"pl-smi\">Float</span>&gt;</span> { <span class=\"pl-c1\">...</span> }</pre></div>\n</li>\n<li>make the type of the changed value generic <code>&lt;T&gt;</code>. this allows to reuse the same base class regardless whether the value is an integer, a float, a string, or anything else. However, this implies that we cannot offer the <code>getChange</code> on this base class.</li>\n</ul>", "author": "skaldarnar", "createdAt": "2020-07-23T18:09:31Z", "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractBeforeAfterEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.entitySystem.event;\n+\n+/**\n+ * Immutable event to notify a change in a certain value.\n+ * NOTE: This is a generic event and a more specific Event extending this event should be fired and reacted to.\n+ */\n+public class AbstractBeforeAfterEvent implements Event {", "originalCommit": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMzUxOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459703518", "bodyText": "Nope I certainly haven't worked with Generics \ud83d\ude05... And I did absolutely everything wrong I see \ud83d\ude05\nAnd Now the component based alteration effect pr thing  (Class componentClass) makes sense..\nThanks for explaining all this in such great detail!", "author": "ktksan", "createdAt": "2020-07-23T20:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NTEwMQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459745101", "bodyText": "And I did absolutely everything wrong\n\nThat's not true - basically everything was there, and it made it easy for me to add all those comments about fancy features \ud83d\ude05 I hope you'll learn one thing or the other, and please don't hesitate if you have questions (and please ask about things like Class componentClass if they are unclear \ud83d\ude09 )", "author": "skaldarnar", "createdAt": "2020-07-23T21:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTcyOA==", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459635728", "body": "If the class works with a generic `<T>` these values become of type `T`.\r\n```suggestion\r\n    protected final T oldValue;\r\n    protected final T newValue;\r\n```\r\n\r\nIf subclasses should be able to access `oldValue` and `newValue` those should be protected instead of private.", "bodyText": "If the class works with a generic <T> these values become of type T.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final float oldValue;\n          \n          \n            \n                private final float newValue;\n          \n          \n            \n                protected final T oldValue;\n          \n          \n            \n                protected final T newValue;\n          \n      \n    \n    \n  \n\nIf subclasses should be able to access oldValue and newValue those should be protected instead of private.", "bodyHTML": "<p dir=\"auto\">If the class works with a generic <code>&lt;T&gt;</code> these values become of type <code>T</code>.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k x x-first x-last\">float</span> oldValue;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k x x-first x-last\">float</span> newValue;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">protected</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">T</span> oldValue;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">protected</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">T</span> newValue;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">If subclasses should be able to access <code>oldValue</code> and <code>newValue</code> those should be protected instead of private.</p>", "author": "skaldarnar", "createdAt": "2020-07-23T18:10:05Z", "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractBeforeAfterEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.entitySystem.event;\n+\n+/**\n+ * Immutable event to notify a change in a certain value.\n+ * NOTE: This is a generic event and a more specific Event extending this event should be fired and reacted to.\n+ */\n+public class AbstractBeforeAfterEvent implements Event {\n+    private final float oldValue;\n+    private final float newValue;", "originalCommit": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNjE1Ng==", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459636156", "body": "Same here:\r\n```suggestion\r\n    AbstractBeforeAfterEvent(final T oldValue, final T newValue) {\r\n```\r\n\r\nWe can also mark them final as we are not going to change them ever in this event.", "bodyText": "Same here:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AbstractBeforeAfterEvent(float oldValue, float newValue) {\n          \n          \n            \n                AbstractBeforeAfterEvent(final T oldValue, final T newValue) {\n          \n      \n    \n    \n  \n\nWe can also mark them final as we are not going to change them ever in this event.", "bodyHTML": "<p dir=\"auto\">Same here:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    AbstractBeforeAfterEvent(<span class=\"pl-k x x-first\">float</span><span class=\"x x-last\"> </span>oldValue, <span class=\"pl-k x x-first x-last\">float</span> newValue) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    AbstractBeforeAfterEvent(<span class=\"pl-k x x-first\">final</span><span class=\"x\"> </span><span class=\"pl-smi x\">T</span><span class=\"x x-last\"> </span>oldValue, <span class=\"pl-k x x-first\">final</span><span class=\"x\"> </span><span class=\"pl-smi x x-last\">T</span> newValue) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">We can also mark them final as we are not going to change them ever in this event.</p>", "author": "skaldarnar", "createdAt": "2020-07-23T18:10:45Z", "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractBeforeAfterEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.entitySystem.event;\n+\n+/**\n+ * Immutable event to notify a change in a certain value.\n+ * NOTE: This is a generic event and a more specific Event extending this event should be fired and reacted to.\n+ */\n+public class AbstractBeforeAfterEvent implements Event {\n+    private final float oldValue;\n+    private final float newValue;\n+\n+    /**\n+     * Creates a new notification event on change in value.\n+     */\n+    AbstractBeforeAfterEvent(float oldValue, float newValue) {", "originalCommit": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTg2MQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459641861", "body": "If we want this convenience functionality you could introduce a \r\n\r\n```java\r\npublic abstract class FloatBeforeAfterEvent extends BeforeAfterEvent<Float> { ... }\r\n```\r\n\r\nfor this purpose. \r\n\r\nFor calculating the factor you could consider to return infinity in case the old value was zero, something like this (there's a difference between positive and negative infinity, though):\r\n\r\n```java\r\n    public float getFactor() {\r\n        return oldValue != 0 ? newValue / oldValue : Float.POSITIVE_INFINITY;\r\n    }\r\n```", "bodyText": "If we want this convenience functionality you could introduce a\npublic abstract class FloatBeforeAfterEvent extends BeforeAfterEvent<Float> { ... }\nfor this purpose.\nFor calculating the factor you could consider to return infinity in case the old value was zero, something like this (there's a difference between positive and negative infinity, though):\n    public float getFactor() {\n        return oldValue != 0 ? newValue / oldValue : Float.POSITIVE_INFINITY;\n    }", "bodyHTML": "<p dir=\"auto\">If we want this convenience functionality you could introduce a</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public abstract class FloatBeforeAfterEvent extends BeforeAfterEvent&lt;Float&gt; { ... }\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">FloatBeforeAfterEvent</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">BeforeAfterEvent&lt;<span class=\"pl-smi\">Float</span>&gt;</span> { <span class=\"pl-c1\">...</span> }</pre></div>\n<p dir=\"auto\">for this purpose.</p>\n<p dir=\"auto\">For calculating the factor you could consider to return infinity in case the old value was zero, something like this (there's a difference between positive and negative infinity, though):</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    public float getFactor() {\n        return oldValue != 0 ? newValue / oldValue : Float.POSITIVE_INFINITY;\n    }\"><pre>    <span class=\"pl-k\">public</span> <span class=\"pl-k\">float</span> getFactor() {\n        <span class=\"pl-k\">return</span> oldValue <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">0</span> <span class=\"pl-k\">?</span> newValue <span class=\"pl-k\">/</span> oldValue <span class=\"pl-k\">:</span> <span class=\"pl-smi\">Float</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>POSITIVE_INFINITY</span>;\n    }</pre></div>", "author": "skaldarnar", "createdAt": "2020-07-23T18:20:51Z", "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractBeforeAfterEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.entitySystem.event;\n+\n+/**\n+ * Immutable event to notify a change in a certain value.\n+ * NOTE: This is a generic event and a more specific Event extending this event should be fired and reacted to.\n+ */\n+public class AbstractBeforeAfterEvent implements Event {\n+    private final float oldValue;\n+    private final float newValue;\n+\n+    /**\n+     * Creates a new notification event on change in value.\n+     */\n+    AbstractBeforeAfterEvent(float oldValue, float newValue) {\n+        this.oldValue = oldValue;\n+        this.newValue = newValue;\n+    }\n+\n+    /**\n+     * Returns the value prior to change.\n+     */\n+    public float getOldValue() {\n+        return oldValue;\n+    }\n+\n+    /**\n+     * Returns the value after change.\n+     */\n+    public float getNewValue() {\n+        return newValue;\n+    }\n+\n+    /**\n+     * Returns the amount by which the value has been changed.\n+     */\n+    public float getChange() {", "originalCommit": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyMzcxMg==", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459723712", "bodyText": "I see, Again thanks for explaining!\nBut for this PR I don't think we should introduce FloatBeforeAfterEvent just for a getChange/Factor() method...\nThe whole point of using generics I think is we don't need to have separate events for different datatypes..\nSo I think we can leave those separate functionalities to the specific events that extend this event.", "author": "ktksan", "createdAt": "2020-07-23T20:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTg2MQ=="}], "type": "inlineReview"}, {"oid": "d05976eb2ea98ad06742e80e33de6c4c30acae19", "url": "https://github.com/MovingBlocks/Terasology/commit/d05976eb2ea98ad06742e80e33de6c4c30acae19", "message": "Add BeforeAfterEvent", "committedDate": "2020-07-23T21:14:48Z", "type": "commit"}, {"oid": "d05976eb2ea98ad06742e80e33de6c4c30acae19", "url": "https://github.com/MovingBlocks/Terasology/commit/d05976eb2ea98ad06742e80e33de6c4c30acae19", "message": "Add BeforeAfterEvent", "committedDate": "2020-07-23T21:14:48Z", "type": "forcePushed"}]}