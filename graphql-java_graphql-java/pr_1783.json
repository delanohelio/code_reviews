{"pr_number": 1783, "pr_title": "Removing the single instance of NullValue ", "pr_author": "simeonleatherland", "pr_createdAt": "2020-02-05T23:06:38Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/1783", "merge_commit": "e33c252cf2309f7a71299032487c05bcb97cccd8", "timeline": [{"oid": "42962cd9b6729d29e61026d9db34c74cf6c92060", "url": "https://github.com/graphql-java/graphql-java/commit/42962cd9b6729d29e61026d9db34c74cf6c92060", "message": "Removing NullValue single instace", "committedDate": "2020-02-05T23:19:19Z", "type": "commit"}, {"oid": "42962cd9b6729d29e61026d9db34c74cf6c92060", "url": "https://github.com/graphql-java/graphql-java/commit/42962cd9b6729d29e61026d9db34c74cf6c92060", "message": "Removing NullValue single instace", "committedDate": "2020-02-05T23:19:19Z", "type": "forcePushed"}, {"oid": "baaac04cf2e340386ac12c63ad594aa6d0cb177f", "url": "https://github.com/graphql-java/graphql-java/commit/baaac04cf2e340386ac12c63ad594aa6d0cb177f", "message": "Adding Check for source location to be as expected", "committedDate": "2020-02-06T00:55:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwNDc4OA==", "url": "https://github.com/graphql-java/graphql-java/pull/1783#discussion_r375604788", "body": "I don't thing this is correct: we need to record the source location, ?", "bodyText": "I don't thing this is correct: we need to record the source location, ?", "bodyHTML": "<p dir=\"auto\">I don't thing this is correct: we need to record the source location, ?</p>", "author": "andimarek", "createdAt": "2020-02-06T01:52:24Z", "path": "src/main/java/graphql/parser/GraphqlAntlrToLanguage.java", "diffHunk": "@@ -716,7 +716,7 @@ protected Value createValue(GraphqlParser.ValueContext ctx) {\n             addCommonData(booleanValue, ctx);\n             return booleanValue.build();\n         } else if (ctx.NullValue() != null) {\n-            return Null;\n+            return NullValue.newNullValue().build();", "originalCommit": "baaac04cf2e340386ac12c63ad594aa6d0cb177f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d3e5740abf53c8579527b1711b87d9f0f197ab9", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex 71641615..ed1ae359 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -716,7 +717,9 @@ public class GraphqlAntlrToLanguage {\n             addCommonData(booleanValue, ctx);\n             return booleanValue.build();\n         } else if (ctx.NullValue() != null) {\n-            return NullValue.newNullValue().build();\n+            NullValue.Builder nullValue = NullValue.newNullValue();\n+            addCommonData(nullValue, ctx);\n+            return nullValue.build();\n         } else if (ctx.stringValue() != null) {\n             StringValue.Builder stringValue = StringValue.newStringValue().value(quotedString(ctx.stringValue()));\n             addCommonData(stringValue, ctx);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e33c252cf2309f7a71299032487c05bcb97cccd8", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex 71641615..ed1ae359 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -716,7 +717,9 @@ public class GraphqlAntlrToLanguage {\n             addCommonData(booleanValue, ctx);\n             return booleanValue.build();\n         } else if (ctx.NullValue() != null) {\n-            return NullValue.newNullValue().build();\n+            NullValue.Builder nullValue = NullValue.newNullValue();\n+            addCommonData(nullValue, ctx);\n+            return nullValue.build();\n         } else if (ctx.stringValue() != null) {\n             StringValue.Builder stringValue = StringValue.newStringValue().value(quotedString(ctx.stringValue()));\n             addCommonData(stringValue, ctx);\n", "next_change": {"commit": "31f3d3f7b30a3d521a3db4df645300c7bf0088db", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex ed1ae359..d8c1836a 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -720,8 +720,8 @@ public class GraphqlAntlrToLanguage {\n             NullValue.Builder nullValue = NullValue.newNullValue();\n             addCommonData(nullValue, ctx);\n             return nullValue.build();\n-        } else if (ctx.stringValue() != null) {\n-            StringValue.Builder stringValue = StringValue.newStringValue().value(quotedString(ctx.stringValue()));\n+        } else if (ctx.StringValue() != null) {\n+            StringValue.Builder stringValue = StringValue.newStringValue().value(quotedString(ctx.StringValue()));\n             addCommonData(stringValue, ctx);\n             return stringValue.build();\n         } else if (ctx.enumValue() != null) {\n", "next_change": {"commit": "6030b3ab14bd317cacb5cf09063c7d97779b2f63", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex d8c1836a..e9743b1a 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -707,27 +727,27 @@ public class GraphqlAntlrToLanguage {\n         if (ctx.IntValue() != null) {\n             IntValue.Builder intValue = IntValue.newIntValue().value(new BigInteger(ctx.IntValue().getText()));\n             addCommonData(intValue, ctx);\n-            return intValue.build();\n+            return addToMap(intValue.build(), ctx);\n         } else if (ctx.FloatValue() != null) {\n             FloatValue.Builder floatValue = FloatValue.newFloatValue().value(new BigDecimal(ctx.FloatValue().getText()));\n             addCommonData(floatValue, ctx);\n-            return floatValue.build();\n+            return addToMap(floatValue.build(), ctx);\n         } else if (ctx.BooleanValue() != null) {\n             BooleanValue.Builder booleanValue = BooleanValue.newBooleanValue().value(Boolean.parseBoolean(ctx.BooleanValue().getText()));\n             addCommonData(booleanValue, ctx);\n-            return booleanValue.build();\n+            return addToMap(booleanValue.build(), ctx);\n         } else if (ctx.NullValue() != null) {\n             NullValue.Builder nullValue = NullValue.newNullValue();\n             addCommonData(nullValue, ctx);\n-            return nullValue.build();\n+            return addToMap(nullValue.build(), ctx);\n         } else if (ctx.StringValue() != null) {\n             StringValue.Builder stringValue = StringValue.newStringValue().value(quotedString(ctx.StringValue()));\n             addCommonData(stringValue, ctx);\n-            return stringValue.build();\n+            return addToMap(stringValue.build(), ctx);\n         } else if (ctx.enumValue() != null) {\n             EnumValue.Builder enumValue = EnumValue.newEnumValue().name(ctx.enumValue().getText());\n             addCommonData(enumValue, ctx);\n-            return enumValue.build();\n+            return addToMap(enumValue.build(), ctx);\n         } else if (ctx.arrayValue() != null) {\n             ArrayValue.Builder arrayValue = ArrayValue.newArrayValue();\n             addCommonData(arrayValue, ctx);\n", "next_change": {"commit": "226aabd9ffa863387085483e6b73799507b90b2c", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex e9743b1a..da0209c1 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -727,27 +719,27 @@ public class GraphqlAntlrToLanguage {\n         if (ctx.IntValue() != null) {\n             IntValue.Builder intValue = IntValue.newIntValue().value(new BigInteger(ctx.IntValue().getText()));\n             addCommonData(intValue, ctx);\n-            return addToMap(intValue.build(), ctx);\n+            return intValue.build();\n         } else if (ctx.FloatValue() != null) {\n             FloatValue.Builder floatValue = FloatValue.newFloatValue().value(new BigDecimal(ctx.FloatValue().getText()));\n             addCommonData(floatValue, ctx);\n-            return addToMap(floatValue.build(), ctx);\n+            return floatValue.build();\n         } else if (ctx.BooleanValue() != null) {\n             BooleanValue.Builder booleanValue = BooleanValue.newBooleanValue().value(Boolean.parseBoolean(ctx.BooleanValue().getText()));\n             addCommonData(booleanValue, ctx);\n-            return addToMap(booleanValue.build(), ctx);\n+            return booleanValue.build();\n         } else if (ctx.NullValue() != null) {\n             NullValue.Builder nullValue = NullValue.newNullValue();\n             addCommonData(nullValue, ctx);\n-            return addToMap(nullValue.build(), ctx);\n+            return nullValue.build();\n         } else if (ctx.StringValue() != null) {\n             StringValue.Builder stringValue = StringValue.newStringValue().value(quotedString(ctx.StringValue()));\n             addCommonData(stringValue, ctx);\n-            return addToMap(stringValue.build(), ctx);\n+            return stringValue.build();\n         } else if (ctx.enumValue() != null) {\n             EnumValue.Builder enumValue = EnumValue.newEnumValue().name(ctx.enumValue().getText());\n             addCommonData(enumValue, ctx);\n-            return addToMap(enumValue.build(), ctx);\n+            return enumValue.build();\n         } else if (ctx.arrayValue() != null) {\n             ArrayValue.Builder arrayValue = ArrayValue.newArrayValue();\n             addCommonData(arrayValue, ctx);\n", "next_change": {"commit": "c6bb935c1ad796333a53fda7ff200d15fec24772", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex da0209c1..ca71c0c3 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -719,27 +728,27 @@ public class GraphqlAntlrToLanguage {\n         if (ctx.IntValue() != null) {\n             IntValue.Builder intValue = IntValue.newIntValue().value(new BigInteger(ctx.IntValue().getText()));\n             addCommonData(intValue, ctx);\n-            return intValue.build();\n+            return addToMap(intValue.build(), ctx);\n         } else if (ctx.FloatValue() != null) {\n             FloatValue.Builder floatValue = FloatValue.newFloatValue().value(new BigDecimal(ctx.FloatValue().getText()));\n             addCommonData(floatValue, ctx);\n-            return floatValue.build();\n+            return addToMap(floatValue.build(), ctx);\n         } else if (ctx.BooleanValue() != null) {\n             BooleanValue.Builder booleanValue = BooleanValue.newBooleanValue().value(Boolean.parseBoolean(ctx.BooleanValue().getText()));\n             addCommonData(booleanValue, ctx);\n-            return booleanValue.build();\n+            return addToMap(booleanValue.build(), ctx);\n         } else if (ctx.NullValue() != null) {\n             NullValue.Builder nullValue = NullValue.newNullValue();\n             addCommonData(nullValue, ctx);\n-            return nullValue.build();\n+            return addToMap(nullValue.build(), ctx);\n         } else if (ctx.StringValue() != null) {\n             StringValue.Builder stringValue = StringValue.newStringValue().value(quotedString(ctx.StringValue()));\n             addCommonData(stringValue, ctx);\n-            return stringValue.build();\n+            return addToMap(stringValue.build(), ctx);\n         } else if (ctx.enumValue() != null) {\n             EnumValue.Builder enumValue = EnumValue.newEnumValue().name(ctx.enumValue().getText());\n             addCommonData(enumValue, ctx);\n-            return enumValue.build();\n+            return addToMap(enumValue.build(), ctx);\n         } else if (ctx.arrayValue() != null) {\n             ArrayValue.Builder arrayValue = ArrayValue.newArrayValue();\n             addCommonData(arrayValue, ctx);\n", "next_change": {"commit": "05c229d186402784bffdfe9909059d24374481e8", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex ca71c0c3..012da493 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -728,27 +728,27 @@ public class GraphqlAntlrToLanguage {\n         if (ctx.IntValue() != null) {\n             IntValue.Builder intValue = IntValue.newIntValue().value(new BigInteger(ctx.IntValue().getText()));\n             addCommonData(intValue, ctx);\n-            return addToMap(intValue.build(), ctx);\n+            return captureRuleContext(intValue.build(), ctx);\n         } else if (ctx.FloatValue() != null) {\n             FloatValue.Builder floatValue = FloatValue.newFloatValue().value(new BigDecimal(ctx.FloatValue().getText()));\n             addCommonData(floatValue, ctx);\n-            return addToMap(floatValue.build(), ctx);\n+            return captureRuleContext(floatValue.build(), ctx);\n         } else if (ctx.BooleanValue() != null) {\n             BooleanValue.Builder booleanValue = BooleanValue.newBooleanValue().value(Boolean.parseBoolean(ctx.BooleanValue().getText()));\n             addCommonData(booleanValue, ctx);\n-            return addToMap(booleanValue.build(), ctx);\n+            return captureRuleContext(booleanValue.build(), ctx);\n         } else if (ctx.NullValue() != null) {\n             NullValue.Builder nullValue = NullValue.newNullValue();\n             addCommonData(nullValue, ctx);\n-            return addToMap(nullValue.build(), ctx);\n+            return captureRuleContext(nullValue.build(), ctx);\n         } else if (ctx.StringValue() != null) {\n             StringValue.Builder stringValue = StringValue.newStringValue().value(quotedString(ctx.StringValue()));\n             addCommonData(stringValue, ctx);\n-            return addToMap(stringValue.build(), ctx);\n+            return captureRuleContext(stringValue.build(), ctx);\n         } else if (ctx.enumValue() != null) {\n             EnumValue.Builder enumValue = EnumValue.newEnumValue().name(ctx.enumValue().getText());\n             addCommonData(enumValue, ctx);\n-            return addToMap(enumValue.build(), ctx);\n+            return captureRuleContext(enumValue.build(), ctx);\n         } else if (ctx.arrayValue() != null) {\n             ArrayValue.Builder arrayValue = ArrayValue.newArrayValue();\n             addCommonData(arrayValue, ctx);\n", "next_change": null}, {"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex ca71c0c3..012da493 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -756,7 +756,7 @@ public class GraphqlAntlrToLanguage {\n             for (GraphqlParser.ValueContext valueContext : ctx.arrayValue().value()) {\n                 values.add(createValue(valueContext));\n             }\n-            return addToMap(arrayValue.values(values).build(), ctx);\n+            return captureRuleContext(arrayValue.values(values).build(), ctx);\n         } else if (ctx.objectValue() != null) {\n             ObjectValue.Builder objectValue = ObjectValue.newObjectValue();\n             addCommonData(objectValue, ctx);\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex da0209c1..ca71c0c3 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -747,7 +756,7 @@ public class GraphqlAntlrToLanguage {\n             for (GraphqlParser.ValueContext valueContext : ctx.arrayValue().value()) {\n                 values.add(createValue(valueContext));\n             }\n-            return arrayValue.values(values).build();\n+            return addToMap(arrayValue.values(values).build(), ctx);\n         } else if (ctx.objectValue() != null) {\n             ObjectValue.Builder objectValue = ObjectValue.newObjectValue();\n             addCommonData(objectValue, ctx);\n", "next_change": {"commit": "05c229d186402784bffdfe9909059d24374481e8", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex ca71c0c3..012da493 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -756,7 +756,7 @@ public class GraphqlAntlrToLanguage {\n             for (GraphqlParser.ValueContext valueContext : ctx.arrayValue().value()) {\n                 values.add(createValue(valueContext));\n             }\n-            return addToMap(arrayValue.values(values).build(), ctx);\n+            return captureRuleContext(arrayValue.values(values).build(), ctx);\n         } else if (ctx.objectValue() != null) {\n             ObjectValue.Builder objectValue = ObjectValue.newObjectValue();\n             addCommonData(objectValue, ctx);\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex e9743b1a..da0209c1 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -755,7 +747,7 @@ public class GraphqlAntlrToLanguage {\n             for (GraphqlParser.ValueContext valueContext : ctx.arrayValue().value()) {\n                 values.add(createValue(valueContext));\n             }\n-            return addToMap(arrayValue.values(values).build(), ctx);\n+            return arrayValue.values(values).build();\n         } else if (ctx.objectValue() != null) {\n             ObjectValue.Builder objectValue = ObjectValue.newObjectValue();\n             addCommonData(objectValue, ctx);\n", "next_change": {"commit": "c6bb935c1ad796333a53fda7ff200d15fec24772", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex da0209c1..ca71c0c3 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -747,7 +756,7 @@ public class GraphqlAntlrToLanguage {\n             for (GraphqlParser.ValueContext valueContext : ctx.arrayValue().value()) {\n                 values.add(createValue(valueContext));\n             }\n-            return arrayValue.values(values).build();\n+            return addToMap(arrayValue.values(values).build(), ctx);\n         } else if (ctx.objectValue() != null) {\n             ObjectValue.Builder objectValue = ObjectValue.newObjectValue();\n             addCommonData(objectValue, ctx);\n", "next_change": {"commit": "05c229d186402784bffdfe9909059d24374481e8", "changed_code": [{"header": "diff --git a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\nindex ca71c0c3..012da493 100644\n--- a/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n+++ b/src/main/java/graphql/parser/GraphqlAntlrToLanguage.java\n", "chunk": "@@ -756,7 +756,7 @@ public class GraphqlAntlrToLanguage {\n             for (GraphqlParser.ValueContext valueContext : ctx.arrayValue().value()) {\n                 values.add(createValue(valueContext));\n             }\n-            return addToMap(arrayValue.values(values).build(), ctx);\n+            return captureRuleContext(arrayValue.values(values).build(), ctx);\n         } else if (ctx.objectValue() != null) {\n             ObjectValue.Builder objectValue = ObjectValue.newObjectValue();\n             addCommonData(objectValue, ctx);\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "e33c252cf2309f7a71299032487c05bcb97cccd8", "message": "Merge commit", "committedDate": null}, {"oid": "1b120b2858f08cd535fceb04e56f5380fb0de52d", "committedDate": "2020-04-27 18:49:57 +1000", "message": "1764: Interfaces implementing interfaces working with partial validation"}, {"oid": "748c8c1019f0eea2815c95c24fc557c6f671c554", "committedDate": "2020-05-05 00:25:32 +0800", "message": "allow_directives_on_variable_definitions"}, {"oid": "465e4a98490411b1011dd09b68aa9ff10b1f2c3b", "committedDate": "2020-05-17 19:52:17 +1000", "message": "1764: Fix transitive implementation declared in extension interface bug"}, {"oid": "04cfbe74b09e7b67094c0b7a69cff427d113f5bb", "committedDate": "2020-05-20 20:46:58 +1000", "message": "1764: PR feedback - use FpKit - fix Generic definition in ImplementingTypeDefinition - don't break public API in TypeDefinitionRegistry"}, {"oid": "760188984685d7572893027e2e9b92af9c267f22", "committedDate": "2020-05-24 16:34:30 +1000", "message": "Merge branch 'master' into 1764_allow-interfaces-to-implement-other-interfaces"}, {"oid": "558c9a9b0418186cfda50d15143b34ea46cc190c", "committedDate": "2020-05-28 11:58:33 +1000", "message": "add description to schema itself and test it"}, {"oid": "31f3d3f7b30a3d521a3db4df645300c7bf0088db", "committedDate": "2020-08-25 14:45:37 +1000", "message": "align grammar more with spec text, fixing edge cases (#1981)"}, {"oid": "f6f9baeb30e36042087a78170286a27c6ead9ee7", "committedDate": "2020-11-10 20:33:56 +1100", "message": "add shaded guava collections and use it (#2086)"}, {"oid": "ff3f6918330b9c78321b2fe6fce615ce2b155eac", "committedDate": "2020-11-16 10:56:40 +1100", "message": "Repeatable directives support (#2015)"}, {"oid": "3dfeae352fce4e3fd636a7227271e1b3f9536066", "committedDate": "2020-11-16 10:59:10 +1100", "message": "This moves the AST element builder to use immutable lists  (#2101)"}, {"oid": "d5e4ea5e80d214cf6f45744deb167af24e5581b2", "committedDate": "2021-06-23 19:58:46 +1000", "message": "Do not capture Ignored characters by default (#2394)"}, {"oid": "f6460192969fdd87d3dcc12c3801e095ca58e90c", "committedDate": "2021-06-27 22:19:22 +1000", "message": "Fix extend type parsing issue (#2393)"}, {"oid": "1bdbb8fa2d0367a93c9ca2a35b1af9325755547c", "committedDate": "2021-07-13 15:15:53 +1000", "message": "Made a ParserOptions class so we can have more options later (#2438)"}, {"oid": "c93fd5a0d25e8952a68674a8413377a7a139fc7b", "committedDate": "2021-07-14 12:35:48 +1000", "message": "Add source location to Unicode error messages"}, {"oid": "357c9bb04c4852a76a9192e2120b41b8eb3329a8", "committedDate": "2021-07-14 16:28:14 +1000", "message": "Merge pull request #2404 from dondonz/unicode-full-range"}, {"oid": "632876d9348d55a1add4173be1bd2564aaeea7b0", "committedDate": "2021-07-15 12:16:43 +1000", "message": "SourceLocations can be turned off (#2439)"}, {"oid": "7f27a046c1cb133ede2fa64ffe5a499ad4c0b223", "committedDate": "2021-09-18 18:20:21 +1000", "message": "Help prevent DOS attacks on graphql servers (#2549)"}, {"oid": "66595fa64e0dcee7e3824cff165fb74e8a1a9638", "committedDate": "2022-04-16 10:58:49 +1000", "message": "Add ParserOption to ignore single-line comments (#2788)"}, {"oid": "606067654e3d49695460aa41a2a710666bfc76fd", "committedDate": "2022-05-24 14:57:28 +1000", "message": "Use ImmutableKit emptyMap and emptyList (#2829)"}, {"oid": "36905f3a9e66c29aa1e6cf8211d9fd173aca5282", "committedDate": "2022-05-30 10:10:09 +1000", "message": "fix typos in javadoc, messages and comments (#2840)"}, {"oid": "6030b3ab14bd317cacb5cf09063c7d97779b2f63", "committedDate": "2022-07-25 08:59:35 +1000", "message": "Implement pretty printer"}, {"oid": "226aabd9ffa863387085483e6b73799507b90b2c", "committedDate": "2022-07-26 15:42:20 +1000", "message": "READY - Stop DOS attacks by making the lexer stop early on evil input. (#2892)"}, {"oid": "c6bb935c1ad796333a53fda7ff200d15fec24772", "committedDate": "2022-08-01 10:43:51 +1000", "message": "Merge branch 'master' into pretty-printer"}, {"oid": "05c229d186402784bffdfe9909059d24374481e8", "committedDate": "2022-08-03 12:04:10 +1000", "message": "Expose default pretty options and rename capture rule context method"}, {"oid": "923a034e82e64230e387dea4388ca4feb46f02c5", "committedDate": "2022-08-11 08:34:52 +1000", "message": "Rename to PrettyAstPrinter; improve tests; add javadoc"}, {"oid": "432e73474508bb1d6d22eb0775f1baf4f0b915ec", "committedDate": "2022-10-14 10:09:00 +1100", "message": "Adding Locale to Parser (#2921)"}, {"oid": "94aadfee1a1aa8d78da57d15492174ef39e0e65d", "committedDate": "2023-01-14 13:42:20 +1100", "message": "Fix extend schema directives"}, {"oid": "3f3b017e51f3b1c1bd241e37a883083a76c9bb04", "committedDate": "2023-02-13 15:21:09 +1100", "message": "Replace javax nullable annotations with JetBrains equivalent"}]}, {"oid": "1d3e5740abf53c8579527b1711b87d9f0f197ab9", "url": "https://github.com/graphql-java/graphql-java/commit/1d3e5740abf53c8579527b1711b87d9f0f197ab9", "message": "Updating Tests and adding context to the null value", "committedDate": "2020-02-10T04:42:59Z", "type": "commit"}]}