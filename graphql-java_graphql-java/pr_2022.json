{"pr_number": 2022, "pr_title": "Small tweak in a hot spot method that pre-allocates the array list", "pr_author": "bbakerman", "pr_createdAt": "2020-09-06T08:40:13Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2022", "timeline": [{"oid": "bae41b79f06985194d2ab374306f93f1b4d08c1d", "url": "https://github.com/graphql-java/graphql-java/commit/bae41b79f06985194d2ab374306f93f1b4d08c1d", "message": "Small tweak in a hot spot method that pre-allocates the array list to the right size", "committedDate": "2020-09-06T08:37:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE3Nzk1Mw==", "url": "https://github.com/graphql-java/graphql-java/pull/2022#discussion_r484177953", "body": "Change `futures.toArray(new CompletableFuture[0])`\r\nto `futures.toArray(new CompletableFuture[futures.size()])` will be more efficient, since this will avoid create a new array object.\r\n\r\n`toArray()` in `ArrayList`:\r\n```java\r\n    public <T> T[] toArray(T[] a) {\r\n        if (a.length < size)\r\n            // Make a new array of a's runtime type, but my contents:\r\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\r\n        System.arraycopy(elementData, 0, a, 0, size);\r\n        if (a.length > size)\r\n            a[size] = null;\r\n        return a;\r\n    }\r\n```", "bodyText": "Change futures.toArray(new CompletableFuture[0])\nto futures.toArray(new CompletableFuture[futures.size()]) will be more efficient, since this will avoid create a new array object.\ntoArray() in ArrayList:\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size)\n            // Make a new array of a's runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length > size)\n            a[size] = null;\n        return a;\n    }", "bodyHTML": "<p dir=\"auto\">Change <code>futures.toArray(new CompletableFuture[0])</code><br>\nto <code>futures.toArray(new CompletableFuture[futures.size()])</code> will be more efficient, since this will avoid create a new array object.</p>\n<p dir=\"auto\"><code>toArray()</code> in <code>ArrayList</code>:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    public &lt;T&gt; T[] toArray(T[] a) {\n        if (a.length &lt; size)\n            // Make a new array of a's runtime type, but my contents:\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length &gt; size)\n            a[size] = null;\n        return a;\n    }\"><pre>    <span class=\"pl-k\">public</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">T</span>[] toArray(<span class=\"pl-k\">T</span>[] a) {\n        <span class=\"pl-k\">if</span> (a<span class=\"pl-k\">.</span>length <span class=\"pl-k\">&lt;</span> size)\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span> Make a new array of a's runtime type, but my contents:</span>\n            <span class=\"pl-k\">return</span> (<span class=\"pl-k\">T</span>[]) <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>copyOf(elementData, size, a<span class=\"pl-k\">.</span>getClass());\n        <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>arraycopy(elementData, <span class=\"pl-c1\">0</span>, a, <span class=\"pl-c1\">0</span>, size);\n        <span class=\"pl-k\">if</span> (a<span class=\"pl-k\">.</span>length <span class=\"pl-k\">&gt;</span> size)\n            a[size] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;\n        <span class=\"pl-k\">return</span> a;\n    }</pre></div>", "author": "dugenkui03", "createdAt": "2020-09-07T04:34:34Z", "path": "src/main/java/graphql/execution/Async.java", "diffHunk": "@@ -26,15 +26,17 @@\n     public static <U> CompletableFuture<List<U>> each(List<CompletableFuture<U>> futures) {\n         CompletableFuture<List<U>> overallResult = new CompletableFuture<>();\n \n+        @SuppressWarnings(\"unchecked\")\n+        CompletableFuture<U>[] arrayOfFutures = futures.toArray(new CompletableFuture[0]);", "originalCommit": "bae41b79f06985194d2ab374306f93f1b4d08c1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM5OTcwNQ==", "url": "https://github.com/graphql-java/graphql-java/pull/2022#discussion_r484399705", "bodyText": "Actually see : https://shipilev.net/blog/2016/arrays-wisdom-ancients/", "author": "bbakerman", "createdAt": "2020-09-07T12:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE3Nzk1Mw=="}], "type": "inlineReview"}]}