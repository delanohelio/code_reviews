{"pr_number": 2669, "pr_title": "wappalyzer: Add support for Dom inspection/patterns", "pr_author": "bettercalln1ck", "pr_createdAt": "2020-12-24T15:33:00Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2669", "timeline": [{"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "url": "https://github.com/zaproxy/zap-extensions/commit/8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "message": "wappalyzer: Add support for Dom inspection\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2020-12-28T20:23:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0MzQ2Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549543462", "body": "I'm not sure this is going to work properly, I suspect that too many messages will be matched because the assembled property pattern won't match as specifically as the whole DOM selector.\r\n\r\nNote I haven't tested IRL, that's just based on reading.", "bodyText": "I'm not sure this is going to work properly, I suspect that too many messages will be matched because the assembled property pattern won't match as specifically as the whole DOM selector.\nNote I haven't tested IRL, that's just based on reading.", "bodyHTML": "<p dir=\"auto\">I'm not sure this is going to work properly, I suspect that too many messages will be matched because the assembled property pattern won't match as specifically as the whole DOM selector.</p>\n<p dir=\"auto\">Note I haven't tested IRL, that's just based on reading.</p>", "author": "kingthorin", "createdAt": "2020-12-29T02:14:10Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/PopupMenuEvidence.java", "diffHunk": "@@ -75,6 +75,23 @@ public boolean isEnableForComponent(Component invoker) {\n                         addMenuItem(p, ExtensionSearch.Type.Response);\n                     }\n                 }\n+                for (Map<String, Map<String, Map<String, AppPattern>>> map : app.getDom()) {\n+                    for (Map.Entry<String, Map<String, Map<String, AppPattern>>> ap :\n+                            map.entrySet()) {\n+                        for (Map.Entry<String, Map<String, AppPattern>> p :\n+                                ap.getValue().entrySet()) {\n+                            for (Map.Entry<String, AppPattern> pa : p.getValue().entrySet()) {\n+                                Pattern pat =\n+                                        Pattern.compile(\n+                                                pa.getKey()\n+                                                        + \".*\"\n+                                                        + pa.getValue().getJavaPattern().pattern());\n+                                addMenuItem(pat, ExtensionSearch.Type.Response);\n+                            }\n+                        }\n+                    }\n+                }\n+", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDQzMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549544432", "body": "Please restore this to not use a wildcard import.", "bodyText": "Please restore this to not use a wildcard import.", "bodyHTML": "<p dir=\"auto\">Please restore this to not use a wildcard import.</p>", "author": "kingthorin", "createdAt": "2020-12-29T02:20:04Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -19,14 +19,14 @@\n  */\n package org.zaproxy.zap.extension.wappalyzer;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDU0MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549544540", "body": "It would be better to pass in `HttpMessage msg`, then use `msg.getResponseBody().toString()`.", "bodyText": "It would be better to pass in HttpMessage msg, then use msg.getResponseBody().toString().", "bodyHTML": "<p dir=\"auto\">It would be better to pass in <code>HttpMessage msg</code>, then use <code>msg.getResponseBody().toString()</code>.</p>", "author": "kingthorin", "createdAt": "2020-12-29T02:20:57Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +166,38 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(Source source) {\n+        Document doc = Jsoup.parse(String.valueOf(source));", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3Mzc5Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r558573792", "bodyText": "This wasn't changed, or was reverted at some point. Source is a jericho class, it's already derived from the msg. Since we're specifically not using jericho here I believe it makes more sense to pass the message and access the body's toString method. Ex:\n    private void checkDomElementMatches(HttpMessage message) {\n        Document doc = Jsoup.parse(message.getResponseBody().toString());", "author": "kingthorin", "createdAt": "2021-01-15T20:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDk4MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549544981", "body": "Could you make the variable names a bit more meaningful here? Ex: \r\n- `map` \u27a1\ufe0f `domSelectorMap`\r\n- `link` & `links` \u27a1\ufe0f `selectedElement` & `selectedElements`\r\n- etc", "bodyText": "Could you make the variable names a bit more meaningful here? Ex:\n\nmap \u27a1\ufe0f domSelectorMap\nlink & links \u27a1\ufe0f selectedElement & selectedElements\netc", "bodyHTML": "<p dir=\"auto\">Could you make the variable names a bit more meaningful here? Ex:</p>\n<ul dir=\"auto\">\n<li><code>map</code> <g-emoji class=\"g-emoji\" alias=\"arrow_right\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/27a1.png\">\u27a1\ufe0f</g-emoji> <code>domSelectorMap</code></li>\n<li><code>link</code> &amp; <code>links</code> <g-emoji class=\"g-emoji\" alias=\"arrow_right\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/27a1.png\">\u27a1\ufe0f</g-emoji> <code>selectedElement</code> &amp; <code>selectedElements</code></li>\n<li>etc</li>\n</ul>", "author": "kingthorin", "createdAt": "2020-12-29T02:24:01Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +166,38 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(Source source) {\n+        Document doc = Jsoup.parse(String.valueOf(source));\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> map : currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> ap : map.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> p : ap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> pa : p.getValue().entrySet()) {\n+                        Elements links = doc.select(ap.getKey());\n+                        for (org.jsoup.nodes.Element link : links) {", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NTA0Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549545042", "body": "Can be removed?", "bodyText": "Can be removed?", "bodyHTML": "<p dir=\"auto\">Can be removed?</p>", "author": "kingthorin", "createdAt": "2020-12-29T02:24:24Z", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "diffHunk": "@@ -50,6 +50,8 @@ public void shouldParseExample() {\n         assertEquals(2, app.getScript().size());\n         assertEquals(0, app.getMetas().size());\n         assertEquals(0, app.getImplies().size());\n+        assertEquals(2, app.getDom().size());\n+        // app.getDom();", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NjM5NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549546394", "body": "Throughout, could you remove the blank lines leading the comments?", "bodyText": "Throughout, could you remove the blank lines leading the comments?", "bodyHTML": "<p dir=\"auto\">Throughout, could you remove the blank lines leading the comments?</p>", "author": "kingthorin", "createdAt": "2020-12-29T02:33:25Z", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "diffHunk": "@@ -113,6 +113,56 @@ public void shouldNotMatchScriptElementContentIfNotOnScriptElement()\n         assertNull(getDefaultHolder().getAppsForSite(\"https://www.example.com\"));\n     }\n \n+    @Test\n+    public void shouldMatchDomElementWithText() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NzUyMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549547522", "body": "If the ~~pattern~~ selector defines both, shouldn't both be required for a match?", "bodyText": "If the pattern selector defines both, shouldn't both be required for a match?", "bodyHTML": "<p dir=\"auto\">If the <del>pattern</del> selector defines both, shouldn't both be required for a match?</p>", "author": "kingthorin", "createdAt": "2020-12-29T02:40:24Z", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "diffHunk": "@@ -113,6 +113,56 @@ public void shouldNotMatchScriptElementContentIfNotOnScriptElement()\n         assertNull(getDefaultHolder().getAppsForSite(\"https://www.example.com\"));\n     }\n \n+    @Test\n+    public void shouldMatchDomElementWithText() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When\n+        scan(msg);\n+\n+        // Then\n+        assertFoundAppCount(\"https://www.example.com\", 1);\n+        assertFoundApp(\"https://www.example.com\", \"Test Entry\");\n+    }\n+\n+    @Test\n+    public void shouldMatchDomElementWithAttribute() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version 1\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When\n+        scan(msg);\n+\n+        // Then\n+        assertFoundAppCount(\"https://www.example.com\", 1);\n+        assertFoundApp(\"https://www.example.com\", \"Test Entry\");\n+    }\n+", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NzY0Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549547642", "body": "```suggestion\r\n    public void shouldNotMatchDomElementIfNoContentMatches() throws HttpMalformedHeaderException {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldNotMatchDomElement() throws HttpMalformedHeaderException {\n          \n          \n            \n                public void shouldNotMatchDomElementIfNoContentMatches() throws HttpMalformedHeaderException {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldNotMatchDomElement</span>() throws <span class=\"pl-smi\">HttpMalformedHeaderException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldNotMatchDomElementIfNoContentMatches</span>() throws <span class=\"pl-smi\">HttpMalformedHeaderException</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kingthorin", "createdAt": "2020-12-29T02:41:19Z", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "diffHunk": "@@ -113,6 +113,56 @@ public void shouldNotMatchScriptElementContentIfNotOnScriptElement()\n         assertNull(getDefaultHolder().getAppsForSite(\"https://www.example.com\"));\n     }\n \n+    @Test\n+    public void shouldMatchDomElementWithText() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When\n+        scan(msg);\n+\n+        // Then\n+        assertFoundAppCount(\"https://www.example.com\", 1);\n+        assertFoundApp(\"https://www.example.com\", \"Test Entry\");\n+    }\n+\n+    @Test\n+    public void shouldMatchDomElementWithAttribute() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version 1\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When\n+        scan(msg);\n+\n+        // Then\n+        assertFoundAppCount(\"https://www.example.com\", 1);\n+        assertFoundApp(\"https://www.example.com\", \"Test Entry\");\n+    }\n+\n+    @Test\n+    public void shouldNotMatchDomElement() throws HttpMalformedHeaderException {", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0Nzg5NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549547895", "body": "Could you make the variable names in here a bit more meaningful as well?", "bodyText": "Could you make the variable names in here a bit more meaningful as well?", "bodyHTML": "<p dir=\"auto\">Could you make the variable names in here a bit more meaningful as well?</p>", "author": "kingthorin", "createdAt": "2020-12-29T02:43:09Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +283,73 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0ODEwOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549548108", "body": "This seems to be unused.", "bodyText": "This seems to be unused.", "bodyHTML": "<p dir=\"auto\">This seems to be unused.</p>", "author": "kingthorin", "createdAt": "2020-12-29T02:44:31Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -58,6 +58,8 @@\n     private final PatternErrorHandler patternErrorHandler;\n     private final ParsingExceptionHandler parsingExceptionHandler;\n \n+    private org.jsoup.nodes.Element javaelement;\n+", "originalCommit": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDEzMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549810132", "body": "I just meant the commented line.", "bodyText": "I just meant the commented line.", "bodyHTML": "<p dir=\"auto\">I just meant the commented line.</p>", "author": "kingthorin", "createdAt": "2020-12-29T18:47:14Z", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void shouldParseExample() {\n         assertEquals(2, app.getScript().size());\n         assertEquals(0, app.getMetas().size());\n         assertEquals(0, app.getImplies().size());\n-        assertEquals(2, app.getDom().size());\n-        // app.getDom();", "originalCommit": "9ab49d2cf6df1d31dd3a64443e706a465c97adbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgzMTA4NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549831085", "bodyText": "Made changes in the previous commit itself.", "author": "bettercalln1ck", "createdAt": "2020-12-29T20:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDQ4NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549810485", "body": "Source is no longer necessary here, right?", "bodyText": "Source is no longer necessary here, right?", "bodyHTML": "<p dir=\"auto\">Source is no longer necessary here, right?</p>", "author": "kingthorin", "createdAt": "2020-12-29T18:48:28Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -166,29 +170,33 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n-    private void checkDomElementMatches(Source source) {\n-        Document doc = Jsoup.parse(String.valueOf(source));\n+    private void checkDomElementMatches(HttpMessage msg, Source source) {", "originalCommit": "9ab49d2cf6df1d31dd3a64443e706a465c97adbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMTU1Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549811556", "bodyText": "no, it is not required.", "author": "bettercalln1ck", "createdAt": "2020-12-29T18:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxODE4NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549818184", "bodyText": "I have made changes in the previous commit itself.", "author": "bettercalln1ck", "createdAt": "2020-12-29T19:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDQ4NQ=="}], "type": "inlineReview"}, {"oid": "6af08ec9c347360a5e9c16cb814ec40dd1222e15", "url": "https://github.com/zaproxy/zap-extensions/commit/6af08ec9c347360a5e9c16cb814ec40dd1222e15", "message": "(Updated)Add support for Dom inspection/patterns\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2020-12-29T19:12:10Z", "type": "forcePushed"}, {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "url": "https://github.com/zaproxy/zap-extensions/commit/a058b3863d4e44a2ea36d4396bb1f629904567f5", "message": "(Updated)Add support for Dom inspection/patterns\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2020-12-29T19:14:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEyODkwOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550128908", "body": "`dom`", "bodyText": "dom", "bodyHTML": "<p dir=\"auto\"><code>dom</code></p>", "author": "thc202", "createdAt": "2020-12-30T10:38:36Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/Application.java", "diffHunk": "@@ -36,6 +36,7 @@\n     private List<AppPattern> url = new ArrayList<AppPattern>();\n     private List<AppPattern> html = new ArrayList<AppPattern>();\n     private List<Map<String, AppPattern>> metas;\n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> doms;", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEyOTIyMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550129222", "body": "Does not seem to be used.", "bodyText": "Does not seem to be used.", "bodyHTML": "<p dir=\"auto\">Does not seem to be used.</p>", "author": "thc202", "createdAt": "2020-12-30T10:39:02Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/Application.java", "diffHunk": "@@ -145,6 +150,14 @@ public void addMetas(Map<String, AppPattern> meta) {\n         this.metas.add(meta);\n     }\n \n+    public List<Map<String, Map<String, Map<String, AppPattern>>>> getDom() {\n+        return doms;\n+    }\n+\n+    public void addDom(Map<String, Map<String, Map<String, AppPattern>>> dom) {", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzMDU5OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550130598", "body": "`ap` and `pa` is confusing.", "bodyText": "ap and pa is confusing.", "bodyHTML": "<p dir=\"auto\"><code>ap</code> and <code>pa</code> is confusing.</p>", "author": "thc202", "createdAt": "2020-12-30T10:41:02Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/PopupMenuEvidence.java", "diffHunk": "@@ -75,6 +75,42 @@ public boolean isEnableForComponent(Component invoker) {\n                         addMenuItem(p, ExtensionSearch.Type.Response);\n                     }\n                 }\n+                for (Map<String, Map<String, Map<String, AppPattern>>> map : app.getDom()) {\n+                    for (Map.Entry<String, Map<String, Map<String, AppPattern>>> ap :\n+                            map.entrySet()) {\n+                        for (Map.Entry<String, Map<String, AppPattern>> p :\n+                                ap.getValue().entrySet()) {\n+                            for (Map.Entry<String, AppPattern> pa : p.getValue().entrySet()) {\n+                                if (p.getKey() == \"text\") {\n+                                    Pattern pat =\n+                                            Pattern.compile(\n+                                                    ap.getKey()", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1ODczOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550158738", "body": "Type arguments could be removed.", "bodyText": "Type arguments could be removed.", "bodyHTML": "<p dir=\"auto\">Type arguments could be removed.</p>", "author": "thc202", "createdAt": "2020-12-30T11:19:18Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +281,74 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<String, Map<String, AppPattern>>();", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1ODc1NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550158754", "body": "Type arguments could be removed.", "bodyText": "Type arguments could be removed.", "bodyHTML": "<p dir=\"auto\">Type arguments could be removed.</p>", "author": "thc202", "createdAt": "2020-12-30T11:19:20Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +281,74 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<String, Map<String, AppPattern>>();\n+                                Map<String, AppPattern> value = new HashMap<String, AppPattern>();", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1ODgwOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550158809", "body": "Type arguments could be removed.", "bodyText": "Type arguments could be removed.", "bodyHTML": "<p dir=\"auto\">Type arguments could be removed.</p>", "author": "thc202", "createdAt": "2020-12-30T11:19:25Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +281,74 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<String, Map<String, AppPattern>>();\n+                                Map<String, AppPattern> value = new HashMap<String, AppPattern>();\n+                                appPat = this.strToAppPattern(type, (String) ent.getValue());\n+                                value.put((String) ent.getKey(), appPat);\n+                                nodeSelectorMap.put((String) entr.getKey(), value);\n+                                domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);\n+                                list.add(domSelectorMap);\n+                            } catch (NumberFormatException e) {\n+                                logger.error(\n+                                        \"Invalid field syntax \"\n+                                                + ent.getKey()\n+                                                + \" : \"\n+                                                + ent.getValue(),\n+                                        e);\n+                            } catch (PatternSyntaxException e) {\n+                                patternErrorHandler.handleError((String) ent.getValue(), e);\n+                            }\n+                        }\n+                    } else {\n+                        try {\n+                            Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                    new HashMap<>();\n+                            Map<String, Map<String, AppPattern>> nodeSelectorMap = new HashMap<>();\n+                            Map<String, AppPattern> value = new HashMap<String, AppPattern>();", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1ODg2NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550158864", "body": "This check could be done earlier and return (`Collections.emptyList()`) to avoid nesting.", "bodyText": "This check could be done earlier and return (Collections.emptyList()) to avoid nesting.", "bodyHTML": "<p dir=\"auto\">This check could be done earlier and return (<code>Collections.emptyList()</code>) to avoid nesting.</p>", "author": "thc202", "createdAt": "2020-12-30T11:19:29Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +281,74 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<String, Map<String, AppPattern>>();\n+                                Map<String, AppPattern> value = new HashMap<String, AppPattern>();\n+                                appPat = this.strToAppPattern(type, (String) ent.getValue());\n+                                value.put((String) ent.getKey(), appPat);\n+                                nodeSelectorMap.put((String) entr.getKey(), value);\n+                                domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);\n+                                list.add(domSelectorMap);\n+                            } catch (NumberFormatException e) {\n+                                logger.error(\n+                                        \"Invalid field syntax \"\n+                                                + ent.getKey()\n+                                                + \" : \"\n+                                                + ent.getValue(),\n+                                        e);\n+                            } catch (PatternSyntaxException e) {\n+                                patternErrorHandler.handleError((String) ent.getValue(), e);\n+                            }\n+                        }\n+                    } else {\n+                        try {\n+                            Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                    new HashMap<>();\n+                            Map<String, Map<String, AppPattern>> nodeSelectorMap = new HashMap<>();\n+                            Map<String, AppPattern> value = new HashMap<String, AppPattern>();\n+                            appPat = this.strToAppPattern(type, (String) entr.getValue());\n+                            value.put((String) entr.getKey(), appPat);\n+                            nodeSelectorMap.put((String) entr.getKey(), value);\n+                            domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);\n+                            list.add(domSelectorMap);\n+                        } catch (NumberFormatException e) {\n+                            logger.error(\n+                                    \"Invalid field syntax \"\n+                                            + entr.getKey()\n+                                            + \" : \"\n+                                            + entr.getValue(),\n+                                    e);\n+                        } catch (PatternSyntaxException e) {\n+                            patternErrorHandler.handleError((String) entr.getValue(), e);\n+                        }\n+                    }\n+                }\n+            }\n+        } else if (json != null) {", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1OTI3Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550159276", "body": "The key is already a string.", "bodyText": "The key is already a string.", "bodyHTML": "<p dir=\"auto\">The key is already a string.</p>", "author": "thc202", "createdAt": "2020-12-30T11:20:09Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1OTg3Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550159876", "body": "This could be done in the above if, same logic.", "bodyText": "This could be done in the above if, same logic.", "bodyHTML": "<p dir=\"auto\">This could be done in the above if, same logic.</p>", "author": "thc202", "createdAt": "2020-12-30T11:21:56Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1OTk2Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550159966", "body": "Should start with lower case (same for following if).", "bodyText": "Should start with lower case (same for following if).", "bodyHTML": "<p dir=\"auto\">Should start with lower case (same for following if).</p>", "author": "thc202", "createdAt": "2020-12-30T11:22:13Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjUyMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550162522", "body": "Could you add a test for this case?", "bodyText": "Could you add a test for this case?", "bodyHTML": "<p dir=\"auto\">Could you add a test for this case?</p>", "author": "thc202", "createdAt": "2020-12-30T11:31:26Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MjUzMA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r558572530", "bodyText": "shouldMatchDomElementWithText I guess.", "author": "kingthorin", "createdAt": "2021-01-15T20:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjcwMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550162703", "body": "Could you add a test that does not have the attribute?", "bodyText": "Could you add a test that does not have the attribute?", "bodyHTML": "<p dir=\"auto\">Could you add a test that does not have the attribute?</p>", "author": "thc202", "createdAt": "2020-12-30T11:32:04Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550162745", "body": "Could you add test for this case?", "bodyText": "Could you add test for this case?", "bodyHTML": "<p dir=\"auto\">Could you add test for this case?</p>", "author": "thc202", "createdAt": "2020-12-30T11:32:08Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "originalCommit": "a058b3863d4e44a2ea36d4396bb1f629904567f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MjQ3MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550252471", "bodyText": "There only one dom selector having properties in apps.json and I can't seem to find any example for it.", "author": "bettercalln1ck", "createdAt": "2020-12-30T16:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MzU5Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550263597", "bodyText": "Check the upstream linked earlier for examples, or just make something up.", "author": "kingthorin", "createdAt": "2020-12-30T17:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMjkxOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550432919", "bodyText": "Jsoup is not able to extract react-dom properties. Can you suggest a fix for that?\nMaybe some other library.", "author": "bettercalln1ck", "createdAt": "2020-12-31T08:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ0ODE1NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550448155", "bodyText": "Could you provide an example?", "author": "kingthorin", "createdAt": "2020-12-31T10:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUwNTg1NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550505854", "bodyText": "Jsoup is unable to access \"_reactRootContainer\" property of \"body > div\"", "author": "bettercalln1ck", "createdAt": "2020-12-31T15:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MTc3OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550881779", "bodyText": "Can I use selenium for detecting property?", "author": "bettercalln1ck", "createdAt": "2021-01-02T13:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}], "type": "inlineReview"}, {"oid": "2d31098b33eb3add28eb09715fb433e22784c2ee", "url": "https://github.com/zaproxy/zap-extensions/commit/2d31098b33eb3add28eb09715fb433e22784c2ee", "message": "Used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-08T09:06:46Z", "type": "forcePushed"}, {"oid": "0a14ec49b21ee251b74f8e09930b31cdbd63429f", "url": "https://github.com/zaproxy/zap-extensions/commit/0a14ec49b21ee251b74f8e09930b31cdbd63429f", "message": "Used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-08T14:43:35Z", "type": "forcePushed"}, {"oid": "d3540cfe0e644fdcbf0c18618af475c688defec8", "url": "https://github.com/zaproxy/zap-extensions/commit/d3540cfe0e644fdcbf0c18618af475c688defec8", "message": "Used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-08T15:05:38Z", "type": "forcePushed"}, {"oid": "410252bc0976ec15e167a6722f46547370a995be", "url": "https://github.com/zaproxy/zap-extensions/commit/410252bc0976ec15e167a6722f46547370a995be", "message": "Used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-08T15:07:36Z", "type": "forcePushed"}, {"oid": "c50ea5c8f49758ba9aef183a33f8eb3df5484958", "url": "https://github.com/zaproxy/zap-extensions/commit/c50ea5c8f49758ba9aef183a33f8eb3df5484958", "message": "Used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-08T16:15:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MjIxNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r558572217", "body": "There doesn't seem to be UnitTests that cover properties (with or without attributes).", "bodyText": "There doesn't seem to be UnitTests that cover properties (with or without attributes).", "bodyHTML": "<p dir=\"auto\">There doesn't seem to be UnitTests that cover properties (with or without attributes).</p>", "author": "kingthorin", "createdAt": "2021-01-15T20:19:47Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -162,6 +167,36 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(Source source) {\n+        Document doc = Jsoup.parse(String.valueOf(source));\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern ap = value.getValue();\n+                                addIfMatches(ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")\n+                                    || Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "originalCommit": "c50ea5c8f49758ba9aef183a33f8eb3df5484958", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MjQwMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r558572402", "body": "```suggestion\r\n    public void shouldMatchDomElementWithTextAndAttribute() throws HttpMalformedHeaderException {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldMatchDomElementWithTextandAttribute() throws HttpMalformedHeaderException {\n          \n          \n            \n                public void shouldMatchDomElementWithTextAndAttribute() throws HttpMalformedHeaderException {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldMatchDomElementWithTextandAttribute</span>() throws <span class=\"pl-smi\">HttpMalformedHeaderException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldMatchDomElementWithTextAndAttribute</span>() throws <span class=\"pl-smi\">HttpMalformedHeaderException</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kingthorin", "createdAt": "2021-01-15T20:20:05Z", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "diffHunk": "@@ -105,10 +103,67 @@ public void shouldNotMatchScriptElementContentIfNotOnScriptElement()\n         // Given\n         HttpMessage msg = makeHttpMessage();\n         msg.setResponseBody(\"<html><body>libs/modernizr.min.js?ver=4.1.1</body></html>\");\n+        // When\n+        scan(msg);\n+        // Then\n+        assertNull(getDefaultHolder().getAppsForSite(\"https://www.example.com\"));\n+    }\n \n+    @Test\n+    public void shouldMatchDomElementWithTextandAttribute() throws HttpMalformedHeaderException {", "originalCommit": "c50ea5c8f49758ba9aef183a33f8eb3df5484958", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3787113ccbd5f711c59acce7740e31ee4764bce3", "url": "https://github.com/zaproxy/zap-extensions/commit/3787113ccbd5f711c59acce7740e31ee4764bce3", "message": "Used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-16T09:26:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3NzIzNA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r559677234", "body": "The extra parentheses can be removed, it would be better to rename `entr` and `entry`.", "bodyText": "The extra parentheses can be removed, it would be better to rename entr and entry.", "bodyHTML": "<p dir=\"auto\">The extra parentheses can be removed, it would be better to rename <code>entr</code> and <code>entry</code>.</p>", "author": "thc202", "createdAt": "2021-01-18T16:20:20Z", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +282,77 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json == null) {\n+            return Collections.emptyList();\n+        }\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, AppPattern> value = new HashMap<>();\n+                                appPat = this.strToAppPattern(type, (String) ent.getValue());\n+                                value.put((String) ent.getKey(), appPat);\n+                                nodeSelectorMap.put((String) entr.getKey(), value);\n+                                domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);\n+                                list.add(domSelectorMap);\n+                            } catch (NumberFormatException e) {\n+                                logger.error(\n+                                        \"Invalid field syntax \"\n+                                                + ent.getKey()\n+                                                + \" : \"\n+                                                + ent.getValue(),\n+                                        e);\n+                            } catch (PatternSyntaxException e) {\n+                                patternErrorHandler.handleError((String) ent.getValue(), e);\n+                            }\n+                        }\n+                    } else {\n+                        try {\n+                            Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                    new HashMap<>();\n+                            Map<String, Map<String, AppPattern>> nodeSelectorMap = new HashMap<>();\n+                            Map<String, AppPattern> value = new HashMap<>();\n+                            appPat = this.strToAppPattern(type, (String) entr.getValue());\n+                            value.put((String) entr.getKey(), appPat);\n+                            nodeSelectorMap.put((String) entr.getKey(), value);\n+                            domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);", "originalCommit": "3787113ccbd5f711c59acce7740e31ee4764bce3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3NzM1Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r559677357", "body": "This should be removed.", "bodyText": "This should be removed.", "bodyHTML": "<p dir=\"auto\">This should be removed.</p>", "author": "thc202", "createdAt": "2021-01-18T16:20:35Z", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "diffHunk": "@@ -50,6 +50,8 @@ public void shouldParseExample() {\n         assertEquals(2, app.getScript().size());\n         assertEquals(0, app.getMetas().size());\n         assertEquals(0, app.getImplies().size());\n+        assertEquals(2, app.getDom().size());\n+        System.out.println(app.getDom());", "originalCommit": "3787113ccbd5f711c59acce7740e31ee4764bce3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "096e602e63fa1266707a95ed13e1dbaf2407e7a7", "url": "https://github.com/zaproxy/zap-extensions/commit/096e602e63fa1266707a95ed13e1dbaf2407e7a7", "message": "wappalyzer: Add support for Dom inspection and used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-19T13:01:51Z", "type": "forcePushed"}, {"oid": "1adf11c1a136ba45454be9a3ce0cd0c2663a679c", "url": "https://github.com/zaproxy/zap-extensions/commit/1adf11c1a136ba45454be9a3ce0cd0c2663a679c", "message": "wappalyzer: Add support for Dom inspection and used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-23T11:54:02Z", "type": "forcePushed"}, {"oid": "1ad66e8e92adf7bfe653ffb83207a40ddad6cb7b", "url": "https://github.com/zaproxy/zap-extensions/commit/1ad66e8e92adf7bfe653ffb83207a40ddad6cb7b", "message": "wappalyzer: Add support for Dom inspection and used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-24T17:42:35Z", "type": "forcePushed"}, {"oid": "0e6a02471165583281d933416f707f56b8efb93c", "url": "https://github.com/zaproxy/zap-extensions/commit/0e6a02471165583281d933416f707f56b8efb93c", "message": "wappalyzer: Add support for Dom inspection and used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-25T15:29:50Z", "type": "forcePushed"}, {"oid": "df2d2be00c3133c45fda56ab0631a83e2282fbe5", "url": "https://github.com/zaproxy/zap-extensions/commit/df2d2be00c3133c45fda56ab0631a83e2282fbe5", "message": "wappalyzer: Add support for Dom inspection and used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-25T19:00:57Z", "type": "forcePushed"}, {"oid": "cdc8413d15d66bea4ac6ea614283c6cc7b624ba6", "url": "https://github.com/zaproxy/zap-extensions/commit/cdc8413d15d66bea4ac6ea614283c6cc7b624ba6", "message": "wappalyzer: Add support for Dom inspection and used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-26T05:10:25Z", "type": "commit"}, {"oid": "cdc8413d15d66bea4ac6ea614283c6cc7b624ba6", "url": "https://github.com/zaproxy/zap-extensions/commit/cdc8413d15d66bea4ac6ea614283c6cc7b624ba6", "message": "wappalyzer: Add support for Dom inspection and used Jsoup as dom selector as Jericho lacks jquery-like selector capabilities\n\nSigned-off-by: nikolai6303 <iit2018152@iiita.ac.in>", "committedDate": "2021-01-26T05:10:25Z", "type": "forcePushed"}]}