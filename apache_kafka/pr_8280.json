{"pr_number": 8280, "pr_title": "KAFKA-9707: Fix InsertField.Key should apply to keys of tombstone records", "pr_author": "gharris1727", "pr_createdAt": "2020-03-11T21:49:11Z", "pr_url": "https://github.com/apache/kafka/pull/8280", "timeline": [{"oid": "25696b33d6faa4e2b97119ad6f18d3dbe5dcccd9", "url": "https://github.com/apache/kafka/commit/25696b33d6faa4e2b97119ad6f18d3dbe5dcccd9", "message": "KAFKA-9707: Fix InsertField.Key not applying to tombstone events\n\n* Fix typo that hardcoded .value() instead of abstract operatingValue\n* Add test for Key transform that was previously not tested\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-03-11T21:46:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMTUxNA==", "url": "https://github.com/apache/kafka/pull/8280#discussion_r391311514", "body": "Maybe also `assertNull` the value just for completeness?", "bodyText": "Maybe also assertNull the value just for completeness?", "bodyHTML": "<p dir=\"auto\">Maybe also <code>assertNull</code> the value just for completeness?</p>", "author": "ncliang", "createdAt": "2020-03-11T22:42:29Z", "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java", "diffHunk": "@@ -141,16 +142,39 @@ public void insertConfiguredFieldsIntoTombstoneEventWithSchemaLeavesValueUnchang\n         props.put(\"static.field\", \"instance_id\");\n         props.put(\"static.value\", \"my-instance-id\");\n \n-        xform.configure(props);\n+        xformValue.configure(props);\n \n         final Schema simpleStructSchema = SchemaBuilder.struct().name(\"name\").version(1).doc(\"doc\").field(\"magic\", Schema.OPTIONAL_INT64_SCHEMA).build();\n \n         final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n                 simpleStructSchema, null);\n \n-        final SourceRecord transformedRecord = xform.apply(record);\n+        final SourceRecord transformedRecord = xformValue.apply(record);\n \n         assertEquals(null, transformedRecord.value());\n         assertEquals(simpleStructSchema, transformedRecord.valueSchema());\n     }\n+\n+    @Test\n+    public void insertkeyFieldsIntoTombstoneEvent() {\n+        final Map<String, Object> props = new HashMap<>();\n+        props.put(\"topic.field\", \"topic_field!\");\n+        props.put(\"partition.field\", \"partition_field\");\n+        props.put(\"timestamp.field\", \"timestamp_field?\");\n+        props.put(\"static.field\", \"instance_id\");\n+        props.put(\"static.value\", \"my-instance-id\");\n+\n+        xformKey.configure(props);\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, Collections.singletonMap(\"magic\", 42L), null, null);\n+\n+        final SourceRecord transformedRecord = xformKey.apply(record);\n+\n+        assertEquals(42L, ((Map<?, ?>) transformedRecord.key()).get(\"magic\"));\n+        assertEquals(\"test\", ((Map<?, ?>) transformedRecord.key()).get(\"topic_field\"));\n+        assertEquals(0, ((Map<?, ?>) transformedRecord.key()).get(\"partition_field\"));\n+        assertEquals(null, ((Map<?, ?>) transformedRecord.key()).get(\"timestamp_field\"));\n+        assertEquals(\"my-instance-id\", ((Map<?, ?>) transformedRecord.key()).get(\"instance_id\"));", "originalCommit": "25696b33d6faa4e2b97119ad6f18d3dbe5dcccd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMzQ5Ng==", "url": "https://github.com/apache/kafka/pull/8280#discussion_r391313496", "body": "```suggestion\r\n        assertEquals(\"my-instance-id\", ((Map<?, ?>) transformedRecord.key()).get(\"instance_id\"));\r\n        assertEquals(null, transformedRecord.value());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(\"my-instance-id\", ((Map<?, ?>) transformedRecord.key()).get(\"instance_id\"));\n          \n          \n            \n                    assertEquals(\"my-instance-id\", ((Map<?, ?>) transformedRecord.key()).get(\"instance_id\"));\n          \n          \n            \n                    assertEquals(null, transformedRecord.value());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"178\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertEquals(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my-instance-id<span class=\"pl-pds\">\"</span></span>, ((<span class=\"pl-k\">Map&lt;?, ?&gt;</span>) transformedRecord<span class=\"pl-k\">.</span>key())<span class=\"pl-k\">.</span>get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>instance_id<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"178\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertEquals(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my-instance-id<span class=\"pl-pds\">\"</span></span>, ((<span class=\"pl-k\">Map&lt;?, ?&gt;</span>) transformedRecord<span class=\"pl-k\">.</span>key())<span class=\"pl-k\">.</span>get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>instance_id<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"179\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertEquals(<span class=\"pl-c1\">null</span>, transformedRecord<span class=\"pl-k\">.</span>value());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gharris1727", "createdAt": "2020-03-11T22:48:19Z", "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java", "diffHunk": "@@ -141,16 +142,39 @@ public void insertConfiguredFieldsIntoTombstoneEventWithSchemaLeavesValueUnchang\n         props.put(\"static.field\", \"instance_id\");\n         props.put(\"static.value\", \"my-instance-id\");\n \n-        xform.configure(props);\n+        xformValue.configure(props);\n \n         final Schema simpleStructSchema = SchemaBuilder.struct().name(\"name\").version(1).doc(\"doc\").field(\"magic\", Schema.OPTIONAL_INT64_SCHEMA).build();\n \n         final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n                 simpleStructSchema, null);\n \n-        final SourceRecord transformedRecord = xform.apply(record);\n+        final SourceRecord transformedRecord = xformValue.apply(record);\n \n         assertEquals(null, transformedRecord.value());\n         assertEquals(simpleStructSchema, transformedRecord.valueSchema());\n     }\n+\n+    @Test\n+    public void insertkeyFieldsIntoTombstoneEvent() {\n+        final Map<String, Object> props = new HashMap<>();\n+        props.put(\"topic.field\", \"topic_field!\");\n+        props.put(\"partition.field\", \"partition_field\");\n+        props.put(\"timestamp.field\", \"timestamp_field?\");\n+        props.put(\"static.field\", \"instance_id\");\n+        props.put(\"static.value\", \"my-instance-id\");\n+\n+        xformKey.configure(props);\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, Collections.singletonMap(\"magic\", 42L), null, null);\n+\n+        final SourceRecord transformedRecord = xformKey.apply(record);\n+\n+        assertEquals(42L, ((Map<?, ?>) transformedRecord.key()).get(\"magic\"));\n+        assertEquals(\"test\", ((Map<?, ?>) transformedRecord.key()).get(\"topic_field\"));\n+        assertEquals(0, ((Map<?, ?>) transformedRecord.key()).get(\"partition_field\"));\n+        assertEquals(null, ((Map<?, ?>) transformedRecord.key()).get(\"timestamp_field\"));\n+        assertEquals(\"my-instance-id\", ((Map<?, ?>) transformedRecord.key()).get(\"instance_id\"));", "originalCommit": "25696b33d6faa4e2b97119ad6f18d3dbe5dcccd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af8eb9207b2fbadd6b9dd8b3157394607029dc63", "url": "https://github.com/apache/kafka/commit/af8eb9207b2fbadd6b9dd8b3157394607029dc63", "message": "Add null value assertion to tombstone test", "committedDate": "2020-03-11T22:48:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwOTk2Nw==", "url": "https://github.com/apache/kafka/pull/8280#discussion_r398109967", "body": "Can we please clean up the logic? This method no longer returns true if it's just a tombstone record; it also returns true if the key is null for `InsertField$Key`.\r\n\r\nI'd suggest removing this method altogether and just changing the point where this method is called to simply be:\r\n```\r\n          if (operatingValue(record) == null) {\r\n```", "bodyText": "Can we please clean up the logic? This method no longer returns true if it's just a tombstone record; it also returns true if the key is null for InsertField$Key.\nI'd suggest removing this method altogether and just changing the point where this method is called to simply be:\n          if (operatingValue(record) == null) {", "bodyHTML": "<p dir=\"auto\">Can we please clean up the logic? This method no longer returns true if it's just a tombstone record; it also returns true if the key is null for <code>InsertField$Key</code>.</p>\n<p dir=\"auto\">I'd suggest removing this method altogether and just changing the point where this method is called to simply be:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"          if (operatingValue(record) == null) {\n\"><pre><code>          if (operatingValue(record) == null) {\n</code></pre></div>", "author": "rhauch", "createdAt": "2020-03-25T19:20:38Z", "path": "connect/transforms/src/main/java/org/apache/kafka/connect/transforms/InsertField.java", "diffHunk": "@@ -137,7 +137,7 @@ public R apply(R record) {\n     }\n \n     private boolean isTombstoneRecord(R record) {\n-        return record.value() == null;\n+        return operatingValue(record) == null;", "originalCommit": "af8eb9207b2fbadd6b9dd8b3157394607029dc63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExMzkxMg==", "url": "https://github.com/apache/kafka/pull/8280#discussion_r398113912", "bodyText": "Plus one for this; confusion around the term tombstone has already caused plenty of miscommunication around this issue and we should be careful to use it correctly.", "author": "C0urante", "createdAt": "2020-03-25T19:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwOTk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExMTAxMg==", "url": "https://github.com/apache/kafka/pull/8280#discussion_r398111012", "body": "This method is testing that the function works when applied to a tombstone record with a non-null key, but we should add a test that verifies the function skips a record that has a null key.", "bodyText": "This method is testing that the function works when applied to a tombstone record with a non-null key, but we should add a test that verifies the function skips a record that has a null key.", "bodyHTML": "<p dir=\"auto\">This method is testing that the function works when applied to a tombstone record with a non-null key, but we should add a test that verifies the function skips a record that has a null key.</p>", "author": "rhauch", "createdAt": "2020-03-25T19:22:33Z", "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java", "diffHunk": "@@ -141,16 +142,40 @@ public void insertConfiguredFieldsIntoTombstoneEventWithSchemaLeavesValueUnchang\n         props.put(\"static.field\", \"instance_id\");\n         props.put(\"static.value\", \"my-instance-id\");\n \n-        xform.configure(props);\n+        xformValue.configure(props);\n \n         final Schema simpleStructSchema = SchemaBuilder.struct().name(\"name\").version(1).doc(\"doc\").field(\"magic\", Schema.OPTIONAL_INT64_SCHEMA).build();\n \n         final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n                 simpleStructSchema, null);\n \n-        final SourceRecord transformedRecord = xform.apply(record);\n+        final SourceRecord transformedRecord = xformValue.apply(record);\n \n         assertEquals(null, transformedRecord.value());\n         assertEquals(simpleStructSchema, transformedRecord.valueSchema());\n     }\n+\n+    @Test\n+    public void insertkeyFieldsIntoTombstoneEvent() {\n+        final Map<String, Object> props = new HashMap<>();\n+        props.put(\"topic.field\", \"topic_field!\");\n+        props.put(\"partition.field\", \"partition_field\");\n+        props.put(\"timestamp.field\", \"timestamp_field?\");\n+        props.put(\"static.field\", \"instance_id\");\n+        props.put(\"static.value\", \"my-instance-id\");\n+\n+        xformKey.configure(props);\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, Collections.singletonMap(\"magic\", 42L), null, null);\n+\n+        final SourceRecord transformedRecord = xformKey.apply(record);\n+\n+        assertEquals(42L, ((Map<?, ?>) transformedRecord.key()).get(\"magic\"));\n+        assertEquals(\"test\", ((Map<?, ?>) transformedRecord.key()).get(\"topic_field\"));\n+        assertEquals(0, ((Map<?, ?>) transformedRecord.key()).get(\"partition_field\"));\n+        assertEquals(null, ((Map<?, ?>) transformedRecord.key()).get(\"timestamp_field\"));\n+        assertEquals(\"my-instance-id\", ((Map<?, ?>) transformedRecord.key()).get(\"instance_id\"));\n+        assertEquals(null, transformedRecord.value());", "originalCommit": "af8eb9207b2fbadd6b9dd8b3157394607029dc63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "54ff2b3f12f886ebfbf7bb70ad6f94c832c5a21a", "url": "https://github.com/apache/kafka/commit/54ff2b3f12f886ebfbf7bb70ad6f94c832c5a21a", "message": "Remove mis-named function and add test for passing-through a null-keyed record.\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-03-25T19:42:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyNTA2NQ==", "url": "https://github.com/apache/kafka/pull/8280#discussion_r398125065", "body": "Wouldn't it be sufficient to replace these two asserts with the following?\r\n```\r\n   assertSame(record, transformedRecord);\r\n```\r\nThis is a bit more correct, since we want to assert that in this case the transform returns the original record. WDYT?", "bodyText": "Wouldn't it be sufficient to replace these two asserts with the following?\n   assertSame(record, transformedRecord);\n\nThis is a bit more correct, since we want to assert that in this case the transform returns the original record. WDYT?", "bodyHTML": "<p dir=\"auto\">Wouldn't it be sufficient to replace these two asserts with the following?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"   assertSame(record, transformedRecord);\n\"><pre><code>   assertSame(record, transformedRecord);\n</code></pre></div>\n<p dir=\"auto\">This is a bit more correct, since we want to assert that in this case the transform returns the original record. WDYT?</p>", "author": "rhauch", "createdAt": "2020-03-25T19:47:29Z", "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/InsertFieldTest.java", "diffHunk": "@@ -141,16 +142,60 @@ public void insertConfiguredFieldsIntoTombstoneEventWithSchemaLeavesValueUnchang\n         props.put(\"static.field\", \"instance_id\");\n         props.put(\"static.value\", \"my-instance-id\");\n \n-        xform.configure(props);\n+        xformValue.configure(props);\n \n         final Schema simpleStructSchema = SchemaBuilder.struct().name(\"name\").version(1).doc(\"doc\").field(\"magic\", Schema.OPTIONAL_INT64_SCHEMA).build();\n \n         final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n                 simpleStructSchema, null);\n \n-        final SourceRecord transformedRecord = xform.apply(record);\n+        final SourceRecord transformedRecord = xformValue.apply(record);\n \n         assertEquals(null, transformedRecord.value());\n         assertEquals(simpleStructSchema, transformedRecord.valueSchema());\n     }\n+\n+    @Test\n+    public void insertKeyFieldsIntoTombstoneEvent() {\n+        final Map<String, Object> props = new HashMap<>();\n+        props.put(\"topic.field\", \"topic_field!\");\n+        props.put(\"partition.field\", \"partition_field\");\n+        props.put(\"timestamp.field\", \"timestamp_field?\");\n+        props.put(\"static.field\", \"instance_id\");\n+        props.put(\"static.value\", \"my-instance-id\");\n+\n+        xformKey.configure(props);\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, Collections.singletonMap(\"magic\", 42L), null, null);\n+\n+        final SourceRecord transformedRecord = xformKey.apply(record);\n+\n+        assertEquals(42L, ((Map<?, ?>) transformedRecord.key()).get(\"magic\"));\n+        assertEquals(\"test\", ((Map<?, ?>) transformedRecord.key()).get(\"topic_field\"));\n+        assertEquals(0, ((Map<?, ?>) transformedRecord.key()).get(\"partition_field\"));\n+        assertEquals(null, ((Map<?, ?>) transformedRecord.key()).get(\"timestamp_field\"));\n+        assertEquals(\"my-instance-id\", ((Map<?, ?>) transformedRecord.key()).get(\"instance_id\"));\n+        assertEquals(null, transformedRecord.value());\n+    }\n+\n+    @Test\n+    public void insertIntoNullKeyLeavesKeyUnchanged() {\n+        final Map<String, Object> props = new HashMap<>();\n+        props.put(\"topic.field\", \"topic_field!\");\n+        props.put(\"partition.field\", \"partition_field\");\n+        props.put(\"timestamp.field\", \"timestamp_field?\");\n+        props.put(\"static.field\", \"instance_id\");\n+        props.put(\"static.value\", \"my-instance-id\");\n+\n+        xformKey.configure(props);\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+          null, null, null, Collections.singletonMap(\"magic\", 42L));\n+\n+        final SourceRecord transformedRecord = xformKey.apply(record);\n+\n+        assertEquals(null, transformedRecord.key());\n+        assertEquals(42L, ((Map<?, ?>) transformedRecord.value()).get(\"magic\"));", "originalCommit": "54ff2b3f12f886ebfbf7bb70ad6f94c832c5a21a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d8105ef99160af136b86fd4fce2a9572c714ca3", "url": "https://github.com/apache/kafka/commit/5d8105ef99160af136b86fd4fce2a9572c714ca3", "message": "Simplify unchanged record assertion\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-03-25T19:55:55Z", "type": "commit"}, {"oid": "a75bcc27e9dc14123cb2ef1c1c651204918ef296", "url": "https://github.com/apache/kafka/commit/a75bcc27e9dc14123cb2ef1c1c651204918ef296", "message": "Replace assertEquals with assertSame\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-03-25T20:49:02Z", "type": "commit"}, {"oid": "34eacf09195d560b288cafca4e4be036885b7f0a", "url": "https://github.com/apache/kafka/commit/34eacf09195d560b288cafca4e4be036885b7f0a", "message": "Fix checkstyleTest indent issue\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-03-26T05:36:31Z", "type": "commit"}]}