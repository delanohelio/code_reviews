{"pr_number": 9543, "pr_title": "KAFKA-10500: Makes the Stream thread list resizable", "pr_author": "wcarlson5", "pr_createdAt": "2020-11-02T23:39:54Z", "pr_url": "https://github.com/apache/kafka/pull/9543", "timeline": [{"oid": "5276beee632c2e1333b6f6402587ad80970b10d5", "url": "https://github.com/apache/kafka/commit/5276beee632c2e1333b6f6402587ad80970b10d5", "message": "makes the Stream thread list resizable", "committedDate": "2020-11-02T23:39:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyNjkxMQ==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517426911", "body": "I would prefer to use `List` instead of `ArrayList` to be more generic.", "bodyText": "I would prefer to use List instead of ArrayList to be more generic.", "bodyHTML": "<p dir=\"auto\">I would prefer to use <code>List</code> instead of <code>ArrayList</code> to be more generic.</p>", "author": "cadonna", "createdAt": "2020-11-04T15:27:54Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -145,7 +145,7 @@\n     private final String clientId;\n     private final Metrics metrics;\n     private final StreamsConfig config;\n-    protected final StreamThread[] threads;\n+    protected final ArrayList<StreamThread> threads;", "originalCommit": "5276beee632c2e1333b6f6402587ad80970b10d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyODEwNA==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517428104", "body": "I think, it is better to keep the default initial capacity of an `ArrayList`. Otherwise, the first time a stream thread is added, we immediately run into a memory allocation. Since we do not know how many stream thread we might expect, let's use the default.   \r\nWe could also consider using a `LinkedList` since we never access by index in production code.", "bodyText": "I think, it is better to keep the default initial capacity of an ArrayList. Otherwise, the first time a stream thread is added, we immediately run into a memory allocation. Since we do not know how many stream thread we might expect, let's use the default.\nWe could also consider using a LinkedList since we never access by index in production code.", "bodyHTML": "<p dir=\"auto\">I think, it is better to keep the default initial capacity of an <code>ArrayList</code>. Otherwise, the first time a stream thread is added, we immediately run into a memory allocation. Since we do not know how many stream thread we might expect, let's use the default.<br>\nWe could also consider using a <code>LinkedList</code> since we never access by index in production code.</p>", "author": "cadonna", "createdAt": "2020-11-04T15:29:32Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -719,8 +718,7 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         }\n \n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[numStreamThreads];\n-\n+        threads = new ArrayList<>(numStreamThreads);", "originalCommit": "5276beee632c2e1333b6f6402587ad80970b10d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUxNjU4MA==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517516580", "bodyText": "That is fair", "author": "wcarlson5", "createdAt": "2020-11-04T17:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyODEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzNTI5Nw==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517435297", "body": "You can simplify to\r\n```suggestion\r\n            threads.add(streamThread);\r\n            threadState.put(streamThread.getId(), streamThread.state());\r\n            storeProviders.add(new StreamThreadStateStoreProvider(streamThread));\r\n```", "bodyText": "You can simplify to\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        threads.add(i, streamThread);\n          \n          \n            \n                        threadState.put(threads.get(i).getId(), threads.get(i).state());\n          \n          \n            \n                        storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));\n          \n          \n            \n                        threads.add(streamThread);\n          \n          \n            \n                        threadState.put(streamThread.getId(), streamThread.state());\n          \n          \n            \n                        storeProviders.add(new StreamThreadStateStoreProvider(streamThread));", "bodyHTML": "<p dir=\"auto\">You can simplify to</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            threads<span class=\"pl-k\">.</span>add(<span class=\"x x-first x-last\">i, </span>streamThread);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            threadState<span class=\"pl-k\">.</span>put(<span class=\"x x-first\">threads</span><span class=\"pl-k x\">.</span><span class=\"x\">get(i)</span><span class=\"pl-k x x-last\">.</span>getId(), <span class=\"x x-first\">threads</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">get(i)</span><span class=\"pl-k\">.</span>state());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            storeProviders<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">StreamThreadStateStoreProvider</span>(<span class=\"x x-first\">threads</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">get(i)</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            threads<span class=\"pl-k\">.</span>add(streamThread);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            threadState<span class=\"pl-k\">.</span>put(<span class=\"x x-first\">streamThread</span><span class=\"pl-k x x-last\">.</span>getId(), <span class=\"x x-first x-last\">streamThread</span><span class=\"pl-k\">.</span>state());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            storeProviders<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">StreamThreadStateStoreProvider</span>(<span class=\"x x-first x-last\">streamThread</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cadonna", "createdAt": "2020-11-04T15:39:21Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);\n+            threadState.put(threads.get(i).getId(), threads.get(i).state());\n+            storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));", "originalCommit": "5276beee632c2e1333b6f6402587ad80970b10d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0MDMxNQ==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517440315", "body": "Please simplify to\r\n```suggestion\r\n            Math.toIntExact(threads.stream().filter(thread -> thread.state().isAlive()).count()));\r\n```", "bodyText": "Please simplify to\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Math.toIntExact(Arrays.stream(threads.toArray(new StreamThread[numStreamThreads])).filter(thread -> thread.state().isAlive()).count()));\n          \n          \n            \n                        Math.toIntExact(threads.stream().filter(thread -> thread.state().isAlive()).count()));", "bodyHTML": "<p dir=\"auto\">Please simplify to</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>toIntExact(<span class=\"pl-smi x x-first x-last\">Arrays</span><span class=\"pl-k\">.</span>stream(<span class=\"x x-first\">threads</span><span class=\"pl-k x\">.</span><span class=\"x\">toArray(</span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">StreamThread</span><span class=\"x x-last\">[numStreamThreads])</span>)<span class=\"pl-k\">.</span>filter(thread <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> thread<span class=\"pl-k\">.</span>state()<span class=\"pl-k\">.</span>isAlive())<span class=\"pl-k\">.</span>count()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>toIntExact(<span class=\"x x-first x-last\">threads</span><span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>filter(thread <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> thread<span class=\"pl-k\">.</span>state()<span class=\"pl-k\">.</span>isAlive())<span class=\"pl-k\">.</span>count()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cadonna", "createdAt": "2020-11-04T15:45:57Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);\n+            threadState.put(threads.get(i).getId(), threads.get(i).state());\n+            storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));\n         }\n \n         ClientMetrics.addNumAliveStreamThreadMetric(streamsMetrics, (metricsConfig, now) ->\n-            Math.toIntExact(Arrays.stream(threads).filter(thread -> thread.state().isAlive()).count()));\n+            Math.toIntExact(Arrays.stream(threads.toArray(new StreamThread[numStreamThreads])).filter(thread -> thread.state().isAlive()).count()));", "originalCommit": "5276beee632c2e1333b6f6402587ad80970b10d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46066694bb07509f79f34db52797033bd6558168", "url": "https://github.com/apache/kafka/commit/46066694bb07509f79f34db52797033bd6558168", "message": "change to List", "committedDate": "2020-11-04T17:51:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzOTQzMg==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517539432", "body": "Should this collection be threadsafe? (or are all accesses inside synchronized blocks anyway?)", "bodyText": "Should this collection be threadsafe? (or are all accesses inside synchronized blocks anyway?)", "bodyHTML": "<p dir=\"auto\">Should this collection be threadsafe? (or are all accesses inside synchronized blocks anyway?)</p>", "author": "vvcephei", "createdAt": "2020-11-04T18:14:36Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -719,8 +718,7 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         }\n \n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[numStreamThreads];\n-\n+        threads = new LinkedList<>();", "originalCommit": "46066694bb07509f79f34db52797033bd6558168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTk2MQ==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517629961", "bodyText": "They are not all in synchronized blocks so I think it probably should be thread safe", "author": "wcarlson5", "createdAt": "2020-11-04T21:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzOTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzI3Mg==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r518057272", "bodyText": "Currently only the constructor adds elements to the list. All other accesses afterwards are read-only. So, we would not need a synchronized list as far as I see. When we implement the add and remove streams thread APIs, we probably need synchronization. My proposal is to leave it a synchronized list now just in case we forget to think about it afterwards and then to reconsider how we synchronize the accesses.", "author": "cadonna", "createdAt": "2020-11-05T13:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzOTQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDA3NA==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517540074", "body": "A bit of a nitpick, but this operation is O(n) for LinkedList. Better to just `add(streamThread)` if you want to use LinkedList.", "bodyText": "A bit of a nitpick, but this operation is O(n) for LinkedList. Better to just add(streamThread) if you want to use LinkedList.", "bodyHTML": "<p dir=\"auto\">A bit of a nitpick, but this operation is O(n) for LinkedList. Better to just <code>add(streamThread)</code> if you want to use LinkedList.</p>", "author": "vvcephei", "createdAt": "2020-11-04T18:15:47Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);", "originalCommit": "46066694bb07509f79f34db52797033bd6558168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDE5NA==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517630194", "bodyText": "yep, should have changed that when I moved from ArrayList", "author": "wcarlson5", "createdAt": "2020-11-04T21:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDg2Ng==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517540866", "body": "```suggestion\r\n            storeProviders.add(new StreamThreadStateStoreProvider(streamThread));\r\n```\r\n\r\n`get(i)` is also O(n) for a linked list. Again, this is admittedly a nit, since the list is small.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));\n          \n          \n            \n                        storeProviders.add(new StreamThreadStateStoreProvider(streamThread));\n          \n      \n    \n    \n  \n\nget(i) is also O(n) for a linked list. Again, this is admittedly a nit, since the list is small.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            storeProviders<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">StreamThreadStateStoreProvider</span>(<span class=\"x x-first\">threads</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">get(i)</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            storeProviders<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">StreamThreadStateStoreProvider</span>(<span class=\"x x-first x-last\">streamThread</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\"><code>get(i)</code> is also O(n) for a linked list. Again, this is admittedly a nit, since the list is small.</p>", "author": "vvcephei", "createdAt": "2020-11-04T18:17:09Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -783,12 +781,13 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 stateDirectory,\n                 delegatingStateRestoreListener,\n                 i + 1);\n-            threadState.put(threads[i].getId(), threads[i].state());\n-            storeProviders.add(new StreamThreadStateStoreProvider(threads[i]));\n+            threads.add(i, streamThread);\n+            threadState.put(streamThread.getId(), streamThread.state());\n+            storeProviders.add(new StreamThreadStateStoreProvider(threads.get(i)));", "originalCommit": "46066694bb07509f79f34db52797033bd6558168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDMyMA==", "url": "https://github.com/apache/kafka/pull/9543#discussion_r517630320", "bodyText": "Good catch", "author": "wcarlson5", "createdAt": "2020-11-04T21:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDg2Ng=="}], "type": "inlineReview"}, {"oid": "188884c84f35d7a6c1bf569bb508726cbe413c53", "url": "https://github.com/apache/kafka/commit/188884c84f35d7a6c1bf569bb508726cbe413c53", "message": "List access improvements", "committedDate": "2020-11-04T21:12:32Z", "type": "commit"}]}