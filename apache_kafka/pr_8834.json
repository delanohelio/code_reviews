{"pr_number": 8834, "pr_title": "KAFKA-10134: Enable heartbeat during PrepareRebalance and Depend On State For Poll Timeout", "pr_author": "guozhangwang", "pr_createdAt": "2020-06-09T00:17:11Z", "pr_url": "https://github.com/apache/kafka/pull/8834", "timeline": [{"oid": "18dce4296caa998d848992942fe602a6e7192d8a", "url": "https://github.com/apache/kafka/commit/18dce4296caa998d848992942fe602a6e7192d8a", "message": "minor change", "committedDate": "2020-06-08T23:20:37Z", "type": "commit"}, {"oid": "f8758bf7ce2cc722e736fb3b6a87008996404e0f", "url": "https://github.com/apache/kafka/commit/f8758bf7ce2cc722e736fb3b6a87008996404e0f", "message": "add unit test", "committedDate": "2020-06-09T00:14:34Z", "type": "commit"}, {"oid": "0f43c395ed5dd1e6676966e3f375e741cf840f82", "url": "https://github.com/apache/kafka/commit/0f43c395ed5dd1e6676966e3f375e741cf840f82", "message": "minor fix", "committedDate": "2020-06-09T00:15:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTA3Mw==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437069073", "body": "This is a piggy-backed cleanup: we call resetGenerationXXX in the join/sync-group handler func and hence should not re-call it again here.", "bodyText": "This is a piggy-backed cleanup: we call resetGenerationXXX in the join/sync-group handler func and hence should not re-call it again here.", "bodyHTML": "<p dir=\"auto\">This is a piggy-backed cleanup: we call resetGenerationXXX in the join/sync-group handler func and hence should not re-call it again here.</p>", "author": "guozhangwang", "createdAt": "2020-06-09T00:17:54Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -528,7 +528,6 @@ public void onFailure(RuntimeException e) {\n                 }\n \n                 private void recordRebalanceFailure() {\n-                    state = MemberState.UNJOINED;", "originalCommit": "0f43c395ed5dd1e6676966e3f375e741cf840f82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY2MzMyOA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r477663328", "bodyText": "Did you mean to say recordRebalanceFailure or is this comment just out of date after the latest changes?", "author": "ableegoldman", "createdAt": "2020-08-26T23:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyOTQ5Ng==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r480429496", "bodyText": "Previously this function has two lines: update the state and record sensors. Now that the first is called in the caller, this function becomes a one-liner and hence not worthy anymore so I in-lined it.", "author": "guozhangwang", "createdAt": "2020-08-31T22:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTEwNQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437069105", "body": "Minor log4j improvement.", "bodyText": "Minor log4j improvement.", "bodyHTML": "<p dir=\"auto\">Minor log4j improvement.</p>", "author": "guozhangwang", "createdAt": "2020-06-09T00:18:04Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -652,9 +651,10 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n             } else if (error == Errors.MEMBER_ID_REQUIRED) {\n                 // Broker requires a concrete member id to be allowed to join the group. Update member id\n                 // and send another join group request in next cycle.\n+                String memberId = joinResponse.data().memberId();\n+                log.debug(\"Attempt to join group returned {} error. Will set the member id as {} and then rejoin\", error, memberId);", "originalCommit": "0f43c395ed5dd1e6676966e3f375e741cf840f82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "476b89bed2d50393be3b349606dcbb772ae68470", "url": "https://github.com/apache/kafka/commit/476b89bed2d50393be3b349606dcbb772ae68470", "message": "typo", "committedDate": "2020-06-09T00:19:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NDk2Ng==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437094966", "body": "There might be slight performance gain if we just say \"Attempt to join group and receive member id required error.\" instead of passing in the error.", "bodyText": "There might be slight performance gain if we just say \"Attempt to join group and receive member id required error.\" instead of passing in the error.", "bodyHTML": "<p dir=\"auto\">There might be slight performance gain if we just say \"Attempt to join group and receive member id required error.\" instead of passing in the error.</p>", "author": "abbccdda", "createdAt": "2020-06-09T01:59:29Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -652,9 +651,10 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n             } else if (error == Errors.MEMBER_ID_REQUIRED) {\n                 // Broker requires a concrete member id to be allowed to join the group. Update member id\n                 // and send another join group request in next cycle.\n+                String memberId = joinResponse.data().memberId();\n+                log.debug(\"Attempt to join group returned {} error. Will set the member id as {} and then rejoin\", error, memberId);", "originalCommit": "476b89bed2d50393be3b349606dcbb772ae68470", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDA3OQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437110079", "body": "We should still handle fatal exception IMHO, such as FencedInstanceIdException", "bodyText": "We should still handle fatal exception IMHO, such as FencedInstanceIdException", "bodyHTML": "<p dir=\"auto\">We should still handle fatal exception IMHO, such as FencedInstanceIdException</p>", "author": "abbccdda", "createdAt": "2020-06-09T02:57:20Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1069,6 +1069,13 @@ private HeartbeatResponseHandler(final Generation generation) {\n         public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> future) {\n             sensors.heartbeatSensor.record(response.requestLatencyMs());\n             Errors error = heartbeatResponse.error();\n+\n+            if (state != MemberState.STABLE) {", "originalCommit": "476b89bed2d50393be3b349606dcbb772ae68470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNTMwNQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r439525305", "bodyText": "I can see it either way. It seems like this PR is about sending the heartbeats optimistically during rebalance, so there doesn't seem to really be any harm in ignoring the response for now. If we ignore the errors, then everything should still work, as the JoinGroup or SyncGroup response will tell us that we've been fenced next time we poll.\nIt seems like the advantage of handling the error here is that we can potentially rejoin just a tiny bit sooner by not having to wait for the JoinGroup or SyncGroup response. But it's not clear to me that it's actually ok not to handle those responses, so then we would also need to make sure the response handling logic can detect that the response has already been invalidated if we've sent a new JoinGroup request in the mean time.\nThis definitely has the potential to decrease the MTTR, but I'm wondering if we should take on the complexity right now, or consider it as a follow-on optimization.", "author": "vvcephei", "createdAt": "2020-06-12T16:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MzQwMg==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r469593402", "bodyText": "I agree with @vvcephei , we should aim to keep this fix as simple as possible. The reason for this PR is that members are getting kicked from the group unnecessarily, not that members who are actually supposed to be fenced don't rejoin fast enough.\nIf we fix KAFKA-10122 and people start complaining that members fenced during a rebalance take too long to find out, then we can revisit this optimization. But if KAFKA-10122 is fixed then it seems like the occurrence of members dropping out during a rebalance will go way down anyway, so we'd be solving a vanishingly small problem", "author": "ableegoldman", "createdAt": "2020-08-12T23:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA2NDQ2Mw==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476064463", "bodyText": "My thoughts were that, when we are in rebalancing then the purpose of heartbeat is only to keep the consumer alive at the broker side, not to take any instructions. But I think it should be handled case-by-case, I will try to refactor this piece a bit as well.", "author": "guozhangwang", "createdAt": "2020-08-25T02:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDUyNw==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437110527", "body": "remove `thread`", "bodyText": "remove thread", "bodyHTML": "<p dir=\"auto\">remove <code>thread</code></p>", "author": "abbccdda", "createdAt": "2020-06-09T02:59:25Z", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -604,6 +605,25 @@ public void testSyncGroupIllegalGenerationResponseWithOldGeneration() throws Int\n         assertEquals(newGen, coordinator.generation());\n     }\n \n+    @Test\n+    public void testHeartbeatSentWhenRebalancing() throws Exception {\n+        setupCoordinator();\n+        joinGroup();\n+\n+        final AbstractCoordinator.Generation currGen = coordinator.generation();\n+\n+        coordinator.setNewState(AbstractCoordinator.MemberState.REBALANCING);\n+\n+        // the heartbeat thread should be sent out during a rebalance", "originalCommit": "476b89bed2d50393be3b349606dcbb772ae68470", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDgyOQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437110829", "body": "Why do we need to respond?", "bodyText": "Why do we need to respond?", "bodyHTML": "<p dir=\"auto\">Why do we need to respond?</p>", "author": "abbccdda", "createdAt": "2020-06-09T03:00:28Z", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -604,6 +605,25 @@ public void testSyncGroupIllegalGenerationResponseWithOldGeneration() throws Int\n         assertEquals(newGen, coordinator.generation());\n     }\n \n+    @Test\n+    public void testHeartbeatSentWhenRebalancing() throws Exception {\n+        setupCoordinator();\n+        joinGroup();\n+\n+        final AbstractCoordinator.Generation currGen = coordinator.generation();\n+\n+        coordinator.setNewState(AbstractCoordinator.MemberState.REBALANCING);\n+\n+        // the heartbeat thread should be sent out during a rebalance\n+        mockTime.sleep(HEARTBEAT_INTERVAL_MS);\n+        TestUtils.waitForCondition(() -> !mockClient.requests().isEmpty(), 2000,\n+                \"The heartbeat request was not sent\");\n+        assertTrue(coordinator.heartbeat().hasInflight());\n+\n+        mockClient.respond(heartbeatResponse(Errors.REBALANCE_IN_PROGRESS));", "originalCommit": "476b89bed2d50393be3b349606dcbb772ae68470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA2NDk3OA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476064978", "bodyText": "Actually we do not need to :)", "author": "guozhangwang", "createdAt": "2020-08-25T02:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMTM5NA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437111394", "body": "Do we still need this private function then?", "bodyText": "Do we still need this private function then?", "bodyHTML": "<p dir=\"auto\">Do we still need this private function then?</p>", "author": "abbccdda", "createdAt": "2020-06-09T03:02:27Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -528,7 +528,6 @@ public void onFailure(RuntimeException e) {\n                 }\n \n                 private void recordRebalanceFailure() {", "originalCommit": "476b89bed2d50393be3b349606dcbb772ae68470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMDExMg==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476020112", "bodyText": "Yup, I will just inline this then.", "author": "guozhangwang", "createdAt": "2020-08-25T00:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMTM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMzkwMw==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437113903", "body": "Comment here as no better place: on L485 we have this logic:\r\n```\r\nif (joinFuture == null) {\r\n            // fence off the heartbeat thread explicitly so that it cannot interfere with the join group.\r\n            // Note that this must come after the call to onJoinPrepare since we must be able to continue\r\n            // sending heartbeats if that callback takes some time.\r\n            disableHeartbeatThread();\r\n```\r\nAs we are ensuring the heartbeat thread working during rebalance, will this case be a bit dangerous for heartbeat disabling? Maybe we could also do a check of member status here to decide whether to disable.\r\n", "bodyText": "Comment here as no better place: on L485 we have this logic:\nif (joinFuture == null) {\n            // fence off the heartbeat thread explicitly so that it cannot interfere with the join group.\n            // Note that this must come after the call to onJoinPrepare since we must be able to continue\n            // sending heartbeats if that callback takes some time.\n            disableHeartbeatThread();\n\nAs we are ensuring the heartbeat thread working during rebalance, will this case be a bit dangerous for heartbeat disabling? Maybe we could also do a check of member status here to decide whether to disable.", "bodyHTML": "<p dir=\"auto\">Comment here as no better place: on L485 we have this logic:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (joinFuture == null) {\n            // fence off the heartbeat thread explicitly so that it cannot interfere with the join group.\n            // Note that this must come after the call to onJoinPrepare since we must be able to continue\n            // sending heartbeats if that callback takes some time.\n            disableHeartbeatThread();\n\"><pre><code>if (joinFuture == null) {\n            // fence off the heartbeat thread explicitly so that it cannot interfere with the join group.\n            // Note that this must come after the call to onJoinPrepare since we must be able to continue\n            // sending heartbeats if that callback takes some time.\n            disableHeartbeatThread();\n</code></pre></div>\n<p dir=\"auto\">As we are ensuring the heartbeat thread working during rebalance, will this case be a bit dangerous for heartbeat disabling? Maybe we could also do a check of member status here to decide whether to disable.</p>", "author": "abbccdda", "createdAt": "2020-06-09T03:12:48Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -528,7 +528,6 @@ public void onFailure(RuntimeException e) {\n                 }\n \n                 private void recordRebalanceFailure() {\n-                    state = MemberState.UNJOINED;", "originalCommit": "476b89bed2d50393be3b349606dcbb772ae68470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4NzIxOQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r469587219", "bodyText": "I saw this comment too, how is it that the heartbeat can interfere with the join group? Also, don't we need to remove the disableHeartbeatThread call that Boyang pointed to as well?", "author": "ableegoldman", "createdAt": "2020-08-12T22:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMzkwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA2MzIzMg==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476063232", "bodyText": "Yes I agree, I think we should just let the heartbeat thread access the state itself and then based on that decide whether or not to send heartbeats, I will update this logic.", "author": "guozhangwang", "createdAt": "2020-08-25T02:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMzkwMw=="}], "type": "inlineReview"}, {"oid": "5afb6e89ba3ffedfec271ff425b92dcd44139fea", "url": "https://github.com/apache/kafka/commit/5afb6e89ba3ffedfec271ff425b92dcd44139fea", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-do-not-disable-heartbeat", "committedDate": "2020-08-25T00:47:20Z", "type": "commit"}, {"oid": "e31e5f97ac333f6433b1feeeead0faf4a863cade", "url": "https://github.com/apache/kafka/commit/e31e5f97ac333f6433b1feeeead0faf4a863cade", "message": "add additional states", "committedDate": "2020-08-25T22:47:50Z", "type": "commit"}, {"oid": "8c29b026e0c7df083593b632a01bc71eafc3b70e", "url": "https://github.com/apache/kafka/commit/8c29b026e0c7df083593b632a01bc71eafc3b70e", "message": "update group coordinator test", "committedDate": "2020-08-26T00:18:36Z", "type": "commit"}, {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48", "url": "https://github.com/apache/kafka/commit/46995655a08d0e7f7423ebbdb31ca47e662b5a48", "message": "more updates", "committedDate": "2020-08-26T01:25:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MDQzNg==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476950436", "body": "This is the major fix 2) in description.", "bodyText": "This is the major fix 2) in description.", "bodyHTML": "<p dir=\"auto\">This is the major fix 2) in description.</p>", "author": "guozhangwang", "createdAt": "2020-08-26T01:26:41Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -326,8 +331,9 @@ protected synchronized void pollHeartbeat(long now) {\n     }\n \n     protected synchronized long timeToNextHeartbeat(long now) {\n-        // if we have not joined the group, we don't need to send heartbeats\n-        if (state == MemberState.UNJOINED)\n+        // if we have not joined the group or we are preparing rebalance,", "originalCommit": "46995655a08d0e7f7423ebbdb31ca47e662b5a48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MDk5NA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476950994", "body": "We do not need to explicitly disable heartbeat thread since when the state is transited to PREPARING_REBALANCE, the thread would disable itself in the next iteration.", "bodyText": "We do not need to explicitly disable heartbeat thread since when the state is transited to PREPARING_REBALANCE, the thread would disable itself in the next iteration.", "bodyHTML": "<p dir=\"auto\">We do not need to explicitly disable heartbeat thread since when the state is transited to PREPARING_REBALANCE, the thread would disable itself in the next iteration.</p>", "author": "guozhangwang", "createdAt": "2020-08-26T01:27:38Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -483,12 +492,7 @@ private synchronized void resetStateAndRejoin() {\n         // rebalance in the call to poll below. This ensures that we do not mistakenly attempt\n         // to rejoin before the pending rebalance has completed.\n         if (joinFuture == null) {\n-            // fence off the heartbeat thread explicitly so that it cannot interfere with the join group.\n-            // Note that this must come after the call to onJoinPrepare since we must be able to continue\n-            // sending heartbeats if that callback takes some time.\n-            disableHeartbeatThread();", "originalCommit": "46995655a08d0e7f7423ebbdb31ca47e662b5a48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MTI2Mg==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476951262", "body": "Moved this into sync-group handler for readability.", "bodyText": "Moved this into sync-group handler for readability.", "bodyHTML": "<p dir=\"auto\">Moved this into sync-group handler for readability.</p>", "author": "guozhangwang", "createdAt": "2020-08-26T01:28:00Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -497,40 +501,18 @@ private synchronized void resetStateAndRejoin() {\n             joinFuture.addListener(new RequestFutureListener<ByteBuffer>() {\n                 @Override\n                 public void onSuccess(ByteBuffer value) {\n-                    // handle join completion in the callback so that the callback will be invoked", "originalCommit": "46995655a08d0e7f7423ebbdb31ca47e662b5a48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1Nzg4Mg==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r477657882", "bodyText": "I assume you mean the JoinGroup response handler \ud83d\ude42", "author": "ableegoldman", "createdAt": "2020-08-26T23:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyNTgyMA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r480425820", "bodyText": "Well I should say part of that (the enabling of the heartbeat thread) is in JoinGroup response handler, while the rest (update metrics, etc) is in SyncGroup response handler.", "author": "guozhangwang", "createdAt": "2020-08-31T22:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MTI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NDc0NA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476954744", "body": "We do not need this check any more since when we are only resetting generation if we see illegal generation or unknown member id, and in either case we should no longer heartbeat", "bodyText": "We do not need this check any more since when we are only resetting generation if we see illegal generation or unknown member id, and in either case we should no longer heartbeat", "bodyHTML": "<p dir=\"auto\">We do not need this check any more since when we are only resetting generation if we see illegal generation or unknown member id, and in either case we should no longer heartbeat</p>", "author": "guozhangwang", "createdAt": "2020-08-26T01:33:11Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -917,17 +938,14 @@ private synchronized void resetGeneration() {\n     synchronized void resetGenerationOnResponseError(ApiKeys api, Errors error) {\n         log.debug(\"Resetting generation after encountering {} from {} response and requesting re-join\", error, api);\n \n-        // only reset the state to un-joined when it is not already in rebalancing", "originalCommit": "46995655a08d0e7f7423ebbdb31ca47e662b5a48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NTA2OA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476955068", "body": "This is the major fix 1).", "bodyText": "This is the major fix 1).", "bodyHTML": "<p dir=\"auto\">This is the major fix 1).</p>", "author": "guozhangwang", "createdAt": "2020-08-26T01:33:38Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1311,9 +1324,10 @@ public void run() {\n                             continue;\n                         }\n \n-                        if (state != MemberState.STABLE) {\n-                            // the group is not stable (perhaps because we left the group or because the coordinator\n-                            // kicked us out), so disable heartbeats and wait for the main thread to rejoin.\n+                        // we do not need to heartbeat we are not part of a group yet;\n+                        // also if we already have fatal error, the client will be\n+                        // crashed soon, hence we do not need to continue heartbeating either\n+                        if (state.hasNotJoinedGroup() || hasFailed()) {", "originalCommit": "46995655a08d0e7f7423ebbdb31ca47e662b5a48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NTM0NA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476955344", "body": "This is now a redundant test.", "bodyText": "This is now a redundant test.", "bodyHTML": "<p dir=\"auto\">This is now a redundant test.</p>", "author": "guozhangwang", "createdAt": "2020-08-26T01:34:08Z", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -1098,44 +1136,6 @@ public void testWakeupAfterJoinGroupReceivedExternalCompletion() throws Exceptio\n         awaitFirstHeartbeat(heartbeatReceived);\n     }\n \n-    @Test\n-    public void testWakeupAfterSyncGroupSent() throws Exception {", "originalCommit": "46995655a08d0e7f7423ebbdb31ca47e662b5a48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "368c9f8f15f47bd3dcfff161e965d7f4e2b7421f", "url": "https://github.com/apache/kafka/commit/368c9f8f15f47bd3dcfff161e965d7f4e2b7421f", "message": "minor improvements", "committedDate": "2020-08-26T17:41:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1MzI1Nw==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r477653257", "body": "Can we still specify that we failed during the JoinGroup? eg `Rebalance failed on JoinGroup with {}` or something", "bodyText": "Can we still specify that we failed during the JoinGroup? eg Rebalance failed on JoinGroup with {} or something", "bodyHTML": "<p dir=\"auto\">Can we still specify that we failed during the JoinGroup? eg <code>Rebalance failed on JoinGroup with {}</code> or something</p>", "author": "ableegoldman", "createdAt": "2020-08-26T23:11:30Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -446,14 +453,15 @@ boolean joinGroupIfNeeded(final Timer timer) {\n                     resetJoinGroupFuture();\n                     needsJoinPrepare = true;\n                 } else {\n-                    log.info(\"Generation data was cleared by heartbeat thread. Initiating rejoin.\");\n+                    log.info(\"Generation data was cleared by heartbeat thread to {} and state is now {} before \" +\n+                         \"the rebalance callback is triggered, marking this rebalance as failed and retry\",\n+                         generation, state);\n                     resetStateAndRejoin();\n                     resetJoinGroupFuture();\n-                    return false;\n                 }\n             } else {\n                 final RuntimeException exception = future.exception();\n-                log.info(\"Join group failed with {}\", exception.toString());\n+                log.info(\"Rebalance failed with {}\", exception.toString());", "originalCommit": "368c9f8f15f47bd3dcfff161e965d7f4e2b7421f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyODM5Ng==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r480428396", "bodyText": "The reason I changed it is exactly that it may not always due to join-group :) If sync-group failed, this could also be triggered.", "author": "guozhangwang", "createdAt": "2020-08-31T22:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1MzI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MTY1OQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481371659", "bodyText": "Different question: can we report the exception as the \"cause\", rather than just getting the toString of it?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.info(\"Rebalance failed with {}\", exception.toString());\n          \n          \n            \n                            log.info(\"Rebalance failed.\", exception);", "author": "vvcephei", "createdAt": "2020-09-01T19:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1MzI1Nw=="}], "type": "inlineReview"}, {"oid": "bf22491c15eaf08a5fb49bd111fb47e1a9a891a1", "url": "https://github.com/apache/kafka/commit/bf22491c15eaf08a5fb49bd111fb47e1a9a891a1", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-do-not-disable-heartbeat", "committedDate": "2020-08-31T22:04:57Z", "type": "commit"}, {"oid": "5ad51d35b0c6e801d2378416b7352b9e538d2368", "url": "https://github.com/apache/kafka/commit/5ad51d35b0c6e801d2378416b7352b9e538d2368", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-do-not-disable-heartbeat", "committedDate": "2020-08-31T23:37:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTkxMQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481369911", "body": "Since the state can also be set from the heartbeat thread, do you think it would be a good idea to also get a \"stateSnapshot\" inside the synchronized block at L439 so that the state and generation are consistent wrt each other?", "bodyText": "Since the state can also be set from the heartbeat thread, do you think it would be a good idea to also get a \"stateSnapshot\" inside the synchronized block at L439 so that the state and generation are consistent wrt each other?", "bodyHTML": "<p dir=\"auto\">Since the state can also be set from the heartbeat thread, do you think it would be a good idea to also get a \"stateSnapshot\" inside the synchronized block at L439 so that the state and generation are consistent wrt each other?</p>", "author": "vvcephei", "createdAt": "2020-09-01T19:07:13Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -433,7 +440,7 @@ boolean joinGroupIfNeeded(final Timer timer) {\n                     generationSnapshot = this.generation;\n                 }\n \n-                if (generationSnapshot != Generation.NO_GENERATION) {\n+                if (generationSnapshot != Generation.NO_GENERATION && state == MemberState.STABLE) {", "originalCommit": "5ad51d35b0c6e801d2378416b7352b9e538d2368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyNDEyMg==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r485324122", "bodyText": "Ack, will do.", "author": "guozhangwang", "createdAt": "2020-09-09T04:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MzMwNQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481373305", "body": "Should we also reset the generation here? With the new condition above, we may now enter this block if generation is _not_ `NO_GENERATION`. I'm not sure if we want to have the generation set to some value but state set to `UNJOINED` and `rejoinNeeded := true`.", "bodyText": "Should we also reset the generation here? With the new condition above, we may now enter this block if generation is not NO_GENERATION. I'm not sure if we want to have the generation set to some value but state set to UNJOINED and rejoinNeeded := true.", "bodyHTML": "<p dir=\"auto\">Should we also reset the generation here? With the new condition above, we may now enter this block if generation is <em>not</em> <code>NO_GENERATION</code>. I'm not sure if we want to have the generation set to some value but state set to <code>UNJOINED</code> and <code>rejoinNeeded := true</code>.</p>", "author": "vvcephei", "createdAt": "2020-09-01T19:13:31Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -446,14 +453,15 @@ boolean joinGroupIfNeeded(final Timer timer) {\n                     resetJoinGroupFuture();\n                     needsJoinPrepare = true;\n                 } else {\n-                    log.info(\"Generation data was cleared by heartbeat thread. Initiating rejoin.\");\n+                    log.info(\"Generation data was cleared by heartbeat thread to {} and state is now {} before \" +\n+                         \"the rebalance callback is triggered, marking this rebalance as failed and retry\",\n+                         generation, state);\n                     resetStateAndRejoin();", "originalCommit": "5ad51d35b0c6e801d2378416b7352b9e538d2368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyNDA4NQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r485324085", "bodyText": "That's a good question. I just thought about this and I think I can change the caller of resetGeneration (which is the only place that hb thread can reset the generation) and move the state = MemberState.UNJOINED; into the callee to make sure that they are always changed together.", "author": "guozhangwang", "createdAt": "2020-09-09T04:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MzMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3ODcwOQ==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481378709", "body": "We don't need to reset the state here anymore?", "bodyText": "We don't need to reset the state here anymore?", "bodyHTML": "<p dir=\"auto\">We don't need to reset the state here anymore?</p>", "author": "vvcephei", "createdAt": "2020-09-01T19:24:09Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -652,10 +644,10 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n             } else if (error == Errors.MEMBER_ID_REQUIRED) {\n                 // Broker requires a concrete member id to be allowed to join the group. Update member id\n                 // and send another join group request in next cycle.\n+                String memberId = joinResponse.data().memberId();\n+                log.debug(\"Attempt to join group returned {} error. Will set the member id as {} and then rejoin\", error, memberId);\n                 synchronized (AbstractCoordinator.this) {\n-                    AbstractCoordinator.this.generation = new Generation(OffsetCommitRequest.DEFAULT_GENERATION_ID,\n-                            joinResponse.data().memberId(), null);\n-                    AbstractCoordinator.this.resetStateAndRejoin();", "originalCommit": "5ad51d35b0c6e801d2378416b7352b9e538d2368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyNjg3Mw==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r485326873", "bodyText": "Yes, this is redundant since we are raising this error and resetStateAndRejoin() would still be executed at the handler anyways.", "author": "guozhangwang", "createdAt": "2020-09-09T04:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3ODcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNzU1MA==", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481437550", "body": "Should this be inside `isTraceEnabled()` to avoid computing `remainingMs()` in the case that trace logging isn't on?\r\n\r\n```suggestion\r\n        if (log.isTraceEnabled()) {\r\n            log.trace(\"Sending heartbeat request with {}ms remaining on timer\", heartbeatTimer.remainingMs());\r\n        }\r\n```\r\n\r\n(also below)", "bodyText": "Should this be inside isTraceEnabled() to avoid computing remainingMs() in the case that trace logging isn't on?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.trace(\"Sending heartbeat request with {}ms remaining on timer\", heartbeatTimer.remainingMs());\n          \n          \n            \n                    if (log.isTraceEnabled()) {\n          \n          \n            \n                        log.trace(\"Sending heartbeat request with {}ms remaining on timer\", heartbeatTimer.remainingMs());\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\n(also below)", "bodyHTML": "<p dir=\"auto\">Should this be inside <code>isTraceEnabled()</code> to avoid computing <code>remainingMs()</code> in the case that trace logging isn't on?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        log<span class=\"pl-k\">.</span><span class=\"x x-first\">trace(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">Sending heartbeat request with {}ms remaining on timer</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, heartbeatTimer</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">remainingMs());</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">if</span><span class=\"x x-last\"> (</span>log<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">isTraceEnabled()) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            log<span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sending heartbeat request with {}ms remaining on timer<span class=\"pl-pds\">\"</span></span>, heartbeatTimer<span class=\"pl-k\">.</span>remainingMs());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">(also below)</p>", "author": "vvcephei", "createdAt": "2020-09-01T21:18:34Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Heartbeat.java", "diffHunk": "@@ -66,12 +73,16 @@ void sentHeartbeat(long now) {\n         heartbeatInFlight = true;\n         update(now);\n         heartbeatTimer.reset(rebalanceConfig.heartbeatIntervalMs);\n+\n+        log.trace(\"Sending heartbeat request with {}ms remaining on timer\", heartbeatTimer.remainingMs());", "originalCommit": "5ad51d35b0c6e801d2378416b7352b9e538d2368", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8655177c6705b47ffcefe6017a8abe3e371fd1c0", "url": "https://github.com/apache/kafka/commit/8655177c6705b47ffcefe6017a8abe3e371fd1c0", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-do-not-disable-heartbeat", "committedDate": "2020-09-09T03:51:04Z", "type": "commit"}, {"oid": "c04db568c545882981bc65be0125af9a3575db25", "url": "https://github.com/apache/kafka/commit/c04db568c545882981bc65be0125af9a3575db25", "message": "Update clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-09-09T03:55:12Z", "type": "commit"}, {"oid": "76d328bcbdc5df6ed04f973e34e3991b07c1b6ff", "url": "https://github.com/apache/kafka/commit/76d328bcbdc5df6ed04f973e34e3991b07c1b6ff", "message": "Update clients/src/main/java/org/apache/kafka/clients/consumer/internals/Heartbeat.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-09-09T04:15:21Z", "type": "commit"}, {"oid": "d34a5ff8d481ed2677dcb2b9cd1944bec2e9eec1", "url": "https://github.com/apache/kafka/commit/d34a5ff8d481ed2677dcb2b9cd1944bec2e9eec1", "message": "github comments", "committedDate": "2020-09-09T04:15:41Z", "type": "commit"}, {"oid": "df9f9958c177e2066fb1243927a0a8a336880971", "url": "https://github.com/apache/kafka/commit/df9f9958c177e2066fb1243927a0a8a336880971", "message": "Merge branch 'KMinor-do-not-disable-heartbeat' of https://github.com/guozhangwang/kafka into KMinor-do-not-disable-heartbeat", "committedDate": "2020-09-09T04:15:50Z", "type": "commit"}]}