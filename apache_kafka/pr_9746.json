{"pr_number": 9746, "pr_title": "MINOR: Replace ApiVersion by auto-generated protocol", "pr_author": "chia7712", "pr_createdAt": "2020-12-14T12:12:30Z", "pr_url": "https://github.com/apache/kafka/pull/9746", "timeline": [{"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "url": "https://github.com/apache/kafka/commit/d2cd983d263746fa57731b5cfab6d5de40a75ae2", "message": "MINOR: Replace ApiVersion by auto-generated protocol", "committedDate": "2021-01-16T19:09:16Z", "type": "commit"}, {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "url": "https://github.com/apache/kafka/commit/d2cd983d263746fa57731b5cfab6d5de40a75ae2", "message": "MINOR: Replace ApiVersion by auto-generated protocol", "committedDate": "2021-01-16T19:09:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1MzU5Nw==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559853597", "body": "Can we import `ApiVersion` directly? I don't think `ApiVersionsResponseData` adds any value here and other similar places.", "bodyText": "Can we import ApiVersion directly? I don't think ApiVersionsResponseData adds any value here and other similar places.", "bodyHTML": "<p dir=\"auto\">Can we import <code>ApiVersion</code> directly? I don't think <code>ApiVersionsResponseData</code> adds any value here and other similar places.</p>", "author": "ijuma", "createdAt": "2021-01-19T00:58:06Z", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -39,18 +38,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseData.ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);", "originalCommit": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1MzgwNQ==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559853805", "body": "It would be good to have a helper method somewhere that converts `ApiKeys` to `ApiVersion`.", "bodyText": "It would be good to have a helper method somewhere that converts ApiKeys to ApiVersion.", "bodyHTML": "<p dir=\"auto\">It would be good to have a helper method somewhere that converts <code>ApiKeys</code> to <code>ApiVersion</code>.</p>", "author": "ijuma", "createdAt": "2021-01-19T00:58:59Z", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -60,18 +59,21 @@ public static NodeApiVersions create() {\n      *                  value.\n      * @return A new NodeApiVersions object.\n      */\n-    public static NodeApiVersions create(Collection<ApiVersion> overrides) {\n-        List<ApiVersion> apiVersions = new LinkedList<>(overrides);\n+    public static NodeApiVersions create(Collection<ApiVersionsResponseData.ApiVersion> overrides) {\n+        List<ApiVersionsResponseData.ApiVersion> apiVersions = new LinkedList<>(overrides);\n         for (ApiKeys apiKey : ApiKeys.enabledApis()) {\n             boolean exists = false;\n-            for (ApiVersion apiVersion : apiVersions) {\n-                if (apiVersion.apiKey == apiKey.id) {\n+            for (ApiVersionsResponseData.ApiVersion apiVersion : apiVersions) {\n+                if (apiVersion.apiKey() == apiKey.id) {\n                     exists = true;\n                     break;\n                 }\n             }\n             if (!exists) {\n-                apiVersions.add(new ApiVersion(apiKey));\n+                apiVersions.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion(apiKey.oldestVersion())\n+                        .setMaxVersion(apiKey.latestVersion()));", "originalCommit": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559854542", "body": "It's a bit weird that we only check if `other` is null. Do we need this check at all?", "bodyText": "It's a bit weird that we only check if other is null. Do we need this check at all?", "bodyHTML": "<p dir=\"auto\">It's a bit weird that we only check if <code>other</code> is null. Do we need this check at all?</p>", "author": "ijuma", "createdAt": "2021-01-19T01:02:29Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -220,4 +217,16 @@ private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n \n         return converted;\n     }\n+\n+    public static Optional<ApiVersionsResponseData.ApiVersion> intersect(ApiVersionsResponseData.ApiVersion thisVersion,\n+                                                                         ApiVersionsResponseData.ApiVersion other) {\n+        if (other == null) return Optional.empty();", "originalCommit": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkxMjc1Mg==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559912752", "bodyText": "From the usage of this method, only other can be null. So current check is enough.", "author": "chia7712", "createdAt": "2021-01-19T04:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkxNjU3MA==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559916570", "bodyText": "That's not a good way to design apis, right? This kind of thing should be symmetric. Why is other sometimes null?", "author": "ijuma", "createdAt": "2021-01-19T05:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkyMDg3OQ==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559920879", "bodyText": "Why is other sometimes null?\n\nThe api key is supported by client-side but Controller doesn't.\n\nThat's not a good way to design apis, right? This kind of thing should be symmetric.\n\nmake sense. will address it and add unit tests.", "author": "chia7712", "createdAt": "2021-01-19T05:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDY2OA==", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559854668", "body": "We can use the helper that converts from ApiKey to ApiVersion here too.", "bodyText": "We can use the helper that converts from ApiKey to ApiVersion here too.", "bodyHTML": "<p dir=\"auto\">We can use the helper that converts from ApiKey to ApiVersion here too.</p>", "author": "ijuma", "createdAt": "2021-01-19T01:03:09Z", "path": "clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java", "diffHunk": "@@ -56,12 +54,18 @@ public void testUnknownApiVersionsToString() {\n \n     @Test\n     public void testVersionsToString() {\n-        List<ApiVersion> versionList = new ArrayList<>();\n+        List<ApiVersionsResponseData.ApiVersion> versionList = new ArrayList<>();\n         for (ApiKeys apiKey : ApiKeys.values()) {\n             if (apiKey == ApiKeys.DELETE_TOPICS) {\n-                versionList.add(new ApiVersion(apiKey.id, (short) 10000, (short) 10001));\n+                versionList.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion((short) 10000)\n+                        .setMaxVersion((short) 10001));\n             } else {\n-                versionList.add(new ApiVersion(apiKey));\n+                versionList.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion(apiKey.oldestVersion())\n+                        .setMaxVersion(apiKey.latestVersion()));", "originalCommit": "d2cd983d263746fa57731b5cfab6d5de40a75ae2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7da8093e7f5fade3707f3349789d3bbad4c76689", "url": "https://github.com/apache/kafka/commit/7da8093e7f5fade3707f3349789d3bbad4c76689", "message": "Merge branch 'trunk' into MINOR-9746", "committedDate": "2021-01-19T04:30:00Z", "type": "commit"}, {"oid": "364f4de7dd7eac01d3ead065106903afad30f0e1", "url": "https://github.com/apache/kafka/commit/364f4de7dd7eac01d3ead065106903afad30f0e1", "message": "import inner classes; improve ApiVersionsResponse.intersect", "committedDate": "2021-01-19T05:36:17Z", "type": "commit"}, {"oid": "4584d0dbc769428c2712734f42e84692f9832e42", "url": "https://github.com/apache/kafka/commit/4584d0dbc769428c2712734f42e84692f9832e42", "message": "Merge branch 'trunk' into MINOR-9746", "committedDate": "2021-01-19T10:19:46Z", "type": "commit"}]}