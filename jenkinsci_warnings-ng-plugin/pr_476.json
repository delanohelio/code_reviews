{"pr_number": 476, "pr_title": "JENKINS-62191 Add UI test for Dashboard View", "pr_author": "lukaskirner", "pr_createdAt": "2020-05-14T11:10:40Z", "pr_url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/476", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1OTU0Ng==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/476#discussion_r425359546", "body": "Das gibt es schon im PageObject", "bodyText": "Das gibt es schon im PageObject", "bodyHTML": "<p dir=\"auto\">Das gibt es schon im PageObject</p>", "author": "uhafner", "createdAt": "2020-05-14T18:51:30Z", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.PageObject;\n+\n+public class DashboardTable extends PageObject {\n+\n+    private final String portletId;\n+\n+    public DashboardTable(final Build parent, final URL url, final String portletId) {\n+        super(parent, url);\n+        this.portletId = portletId;\n+\n+    }\n+\n+    public WebDriver open() {", "originalCommit": "6995b441240d4a9a78d86a7386e617e62ac43c16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05f30dcc85bf08f1ba19311cc93d7edfb415becc", "changed_code": [{"header": "diff --git a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\ndeleted file mode 100644\nindex 545cc6b6f..000000000\n--- a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\n+++ /dev/null\n", "chunk": "@@ -1,61 +0,0 @@\n-package io.jenkins.plugins.analysis.warnings;\n-\n-\n-import java.net.URL;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.openqa.selenium.WebDriver;\n-import org.openqa.selenium.WebElement;\n-\n-import org.jenkinsci.test.acceptance.po.Build;\n-import org.jenkinsci.test.acceptance.po.PageObject;\n-\n-public class DashboardTable extends PageObject {\n-\n-    private final String portletId;\n-\n-    public DashboardTable(final Build parent, final URL url, final String portletId) {\n-        super(parent, url);\n-        this.portletId = portletId;\n-\n-    }\n-\n-    public WebDriver open() {\n-        return this.visit(this.url);\n-    }\n-\n-    public List<String> getPaneHeaders() {\n-        WebElement table = getTable();\n-        return table.findElements(by.xpath(\"./thead/tr/th\"))\n-            .stream()\n-            .map(e -> {\n-                List<WebElement> img = e.findElements(by.tagName(\"img\"));\n-                if (img.size() > 0) {\n-                    return img.get(0).getAttribute(\"title\");\n-                }\n-\n-                return e.getText();\n-            })\n-            .map(String::trim)\n-            .collect(Collectors.toList());\n-    }\n-\n-    public List<List<String>> getJobRows() {\n-        WebElement table = getTable();\n-        return table.findElements(by.xpath(\"./tbody/tr\"))\n-            .stream()\n-            .map(e -> e.findElements(by.tagName(\"td\"))\n-                .stream()\n-                .map(WebElement::getText)\n-                .collect(Collectors.toList()))\n-            .collect(Collectors.toList());\n-    }\n-\n-    // this.getElement(by.id(portletId)).findElement(by.id(portletId)).findElements(by.xpath(\"./tbody/tr\")).get(0).getText()\n-\n-    private WebElement getTable() {\n-        return this.getElement(by.id(portletId)).findElement(by.id(portletId));\n-    }\n-}\n", "next_change": {"commit": "0570594faeb38d0b338e791d5501dee92cbeeb8e", "changed_code": [{"header": "diff --git a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\nnew file mode 100644\nindex 000000000..545cc6b6f\n--- /dev/null\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\n", "chunk": "@@ -0,0 +1,61 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.PageObject;\n+\n+public class DashboardTable extends PageObject {\n+\n+    private final String portletId;\n+\n+    public DashboardTable(final Build parent, final URL url, final String portletId) {\n+        super(parent, url);\n+        this.portletId = portletId;\n+\n+    }\n+\n+    public WebDriver open() {\n+        return this.visit(this.url);\n+    }\n+\n+    public List<String> getPaneHeaders() {\n+        WebElement table = getTable();\n+        return table.findElements(by.xpath(\"./thead/tr/th\"))\n+            .stream()\n+            .map(e -> {\n+                List<WebElement> img = e.findElements(by.tagName(\"img\"));\n+                if (img.size() > 0) {\n+                    return img.get(0).getAttribute(\"title\");\n+                }\n+\n+                return e.getText();\n+            })\n+            .map(String::trim)\n+            .collect(Collectors.toList());\n+    }\n+\n+    public List<List<String>> getJobRows() {\n+        WebElement table = getTable();\n+        return table.findElements(by.xpath(\"./tbody/tr\"))\n+            .stream()\n+            .map(e -> e.findElements(by.tagName(\"td\"))\n+                .stream()\n+                .map(WebElement::getText)\n+                .collect(Collectors.toList()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    // this.getElement(by.id(portletId)).findElement(by.id(portletId)).findElements(by.xpath(\"./tbody/tr\")).get(0).getText()\n+\n+    private WebElement getTable() {\n+        return this.getElement(by.id(portletId)).findElement(by.id(portletId));\n+    }\n+}\n", "next_change": {"commit": "7bd29b770b2622099382f3a9f5a88f8a885232a8", "changed_code": [{"header": "diff --git a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\nindex 545cc6b6f..e14949783 100644\n--- a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\n", "chunk": "@@ -1,61 +1,89 @@\n package io.jenkins.plugins.analysis.warnings;\n \n-\n import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-\n-import org.openqa.selenium.WebDriver;\n import org.openqa.selenium.WebElement;\n-\n import org.jenkinsci.test.acceptance.po.Build;\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n public class DashboardTable extends PageObject {\n-\n+    private static final String EMPTY = \"-\";\n     private final String portletId;\n \n+    final List<String> headers;\n+    final Map<String, Map<String, DashboardTableEntry>> table;\n+\n     public DashboardTable(final Build parent, final URL url, final String portletId) {\n         super(parent, url);\n         this.portletId = portletId;\n+        this.open();\n \n-    }\n-\n-    public WebDriver open() {\n-        return this.visit(this.url);\n-    }\n+        WebElement page = this.getElement(by.tagName(\"body\"));\n+        List<WebElement> rows = page.findElements(by.tagName(\"table\")).stream()\n+            .filter(dom -> dom.getText().startsWith(\"Static analysis issues per tool and job\"))\n+            .flatMap(dom -> dom.findElements(by.tagName(\"table\")).stream().skip(1))\n+            .flatMap(dom -> dom.findElements(by.tagName(\"tr\")).stream())\n+            .collect(Collectors.toList());\n \n-    public List<String> getPaneHeaders() {\n-        WebElement table = getTable();\n-        return table.findElements(by.xpath(\"./thead/tr/th\"))\n-            .stream()\n-            .map(e -> {\n-                List<WebElement> img = e.findElements(by.tagName(\"img\"));\n-                if (img.size() > 0) {\n-                    return img.get(0).getAttribute(\"title\");\n-                }\n-\n-                return e.getText();\n-            })\n-            .map(String::trim)\n+        headers = rows.stream()\n+            .flatMap(dom -> dom.findElements(by.tagName(\"th\")).stream())\n+            .map(WebElement::getText)\n             .collect(Collectors.toList());\n+\n+        List<List<List<String>>> lines = rows.stream().skip(1)\n+                .map(dom -> dom.findElements(by.tagName(\"td\")).stream().map(td -> {\n+                    if (td.findElements(by.tagName(\"a\")).size() == 0) {\n+                        return Arrays.asList(td.getText(), null);\n+                    }\n+                    else {\n+                        WebElement entry = td.findElements(by.tagName(\"a\")).get(0);\n+                        return Arrays.asList(entry.getText(), entry.getAttribute(\"href\"));\n+                    }\n+                }).collect(Collectors.toList()))\n+                .collect(Collectors.toList());\n+\n+        table = lines.stream()\n+                .collect(Collectors.toMap(entry -> entry.get(0).get(0), entry -> createPluginValueMapping(entry, headers)));\n     }\n \n-    public List<List<String>> getJobRows() {\n-        WebElement table = getTable();\n-        return table.findElements(by.xpath(\"./tbody/tr\"))\n-            .stream()\n-            .map(e -> e.findElements(by.tagName(\"td\"))\n-                .stream()\n-                .map(WebElement::getText)\n-                .collect(Collectors.toList()))\n-            .collect(Collectors.toList());\n+    private Map<String, DashboardTableEntry> createPluginValueMapping(final List<List<String>> warnings, final List<String> plugins) {\n+        Map<String, DashboardTableEntry> valuePluginMapping = new HashMap<>();\n+        for (int i = 1; i < warnings.size(); i++) {\n+            if (!EMPTY.equals(warnings.get(i).get(0))) {\n+                valuePluginMapping.put(plugins.get(i).trim(), new DashboardTableEntry(Integer.parseInt(warnings.get(i).get(0)), warnings.get(i).get(1)));\n+            }\n+        }\n+        return valuePluginMapping;\n     }\n \n-    // this.getElement(by.id(portletId)).findElement(by.id(portletId)).findElements(by.xpath(\"./tbody/tr\")).get(0).getText()\n+    /**\n+     * Represents entry in dashboard table with warnings count and link to the plugin page.\n+     */\n+    public static class DashboardTableEntry {\n+        private final int warningsCount;\n+        private final String url;\n+\n+        /**\n+         * Construct a DashboardTableEntry.\n+         * @param warningsCount of the plugin in the build\n+         * @param url link to the plugin page\n+         */\n+        public DashboardTableEntry(final int warningsCount, final String url) {\n+            this.warningsCount = warningsCount;\n+            this.url = url;\n+        }\n+\n+        public int getWarningsCount() {\n+            return warningsCount;\n+        }\n \n-    private WebElement getTable() {\n-        return this.getElement(by.id(portletId)).findElement(by.id(portletId));\n+        public String getUrl() {\n+            return url;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2MDcwMA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/476#discussion_r425360700", "body": "Wenn Sie einmal auf der Console `mvn assertj:generate-assertions` aufrufen, werden die custom Assertions generiert. Dann geht\r\n```\r\nassertThat(headers).hasPaneHeaders(\"Job\",\"CheckStyle Warnings\" );\r\n```", "bodyText": "Wenn Sie einmal auf der Console mvn assertj:generate-assertions aufrufen, werden die custom Assertions generiert. Dann geht\nassertThat(headers).hasPaneHeaders(\"Job\",\"CheckStyle Warnings\" );", "bodyHTML": "<p dir=\"auto\">Wenn Sie einmal auf der Console <code>mvn assertj:generate-assertions</code> aufrufen, werden die custom Assertions generiert. Dann geht</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(headers).hasPaneHeaders(&quot;Job&quot;,&quot;CheckStyle Warnings&quot; );\"><pre><code>assertThat(headers).hasPaneHeaders(\"Job\",\"CheckStyle Warnings\" );\n</code></pre></div>", "author": "uhafner", "createdAt": "2020-05-14T18:53:43Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.openqa.selenium.WebElement;\n+\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.plugins.dashboard_view.AbstractDashboardViewPortlet;\n+import org.jenkinsci.test.acceptance.plugins.dashboard_view.DashboardView;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+import org.jenkinsci.test.acceptance.po.Job;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+/**\n+ * Integration tests for the dashboard portlet.\n+ *\n+ * @author Lukas Kirner\n+ */\n+public class DashboardViewPortletUITest extends AbstractJUnitTest {\n+    private static final String WARNINGS_PLUGIN_PREFIX = \"/\";\n+\n+    @Test\n+    public void shouldShowIcons() {\n+        DashboardView dashboardView = createDashboardWithStaticAnalysisPortlet(false, true);\n+        FreeStyleJob job = createFreeStyleJob(\"issue_filter/checkstyle-result.xml\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n+        job.save();\n+        Build build = shouldBuildJobSuccessfully(job);\n+\n+        DashboardTable dashboardTable = new DashboardTable(build, dashboardView.url, \"portlet-topPortlets-\" + 0);\n+        dashboardTable.open();\n+\n+        List<String> headers = dashboardTable.getPaneHeaders();\n+        assertThat(headers.get(0)).contains(\"Job\");", "originalCommit": "6995b441240d4a9a78d86a7386e617e62ac43c16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05f30dcc85bf08f1ba19311cc93d7edfb415becc", "changed_code": [{"header": "diff --git a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\nindex 794a40517..6aee7247c 100644\n--- a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\n+++ b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\n", "chunk": "@@ -27,59 +19,13 @@ import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n  * @author Lukas Kirner\n  */\n public class DashboardViewPortletUITest extends AbstractJUnitTest {\n-    private static final String WARNINGS_PLUGIN_PREFIX = \"/\";\n-\n-    @Test\n-    public void shouldShowIcons() {\n-        DashboardView dashboardView = createDashboardWithStaticAnalysisPortlet(false, true);\n-        FreeStyleJob job = createFreeStyleJob(\"issue_filter/checkstyle-result.xml\");\n-        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n-        job.save();\n-        Build build = shouldBuildJobSuccessfully(job);\n-\n-        DashboardTable dashboardTable = new DashboardTable(build, dashboardView.url, \"portlet-topPortlets-\" + 0);\n-        dashboardTable.open();\n-\n-        List<String> headers = dashboardTable.getPaneHeaders();\n-        assertThat(headers.get(0)).contains(\"Job\");\n-        assertThat(headers.get(1)).contains(\"CheckStyle Warnings\");\n-\n-        List<List<String>> jobs = dashboardTable.getJobRows();\n-        assertThat(jobs.get(0)).contains(job.name, \"4\");\n-    }\n \n     @Test\n-    public void shouldNotShowIcons() {\n-        DashboardView dashboardView = createDashboardWithStaticAnalysisPortlet(false, false);\n-        FreeStyleJob job = createFreeStyleJob(\"issue_filter/checkstyle-result.xml\");\n-        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n-        job.save();\n-        Build build = shouldBuildJobSuccessfully(job);\n-\n-        DashboardTable dashboardTable = new DashboardTable(build, dashboardView.url, \"portlet-topPortlets-\" + 0);\n-        dashboardTable.open();\n-\n-        List<String> headers = dashboardTable.getPaneHeaders();\n-        assertThat(headers.get(0)).contains(\"Job\");\n-        assertThat(headers.get(1)).contains(\"CheckStyle\");\n+    public void test() {\n+        DashboardView v = createDashboardWithStaticAnalysisPortlet(true, true);\n \n-        List<List<String>> jobs = dashboardTable.getJobRows();\n-        assertThat(jobs.get(0)).contains(job.name, \"4\");\n-    }\n-\n-    private Build shouldBuildJobSuccessfully(final Job job) {\n-        Build build = job.startBuild().waitUntilFinished();\n-        assertThat(build.isSuccess()).isTrue();\n-        return build;\n-    }\n \n-    private FreeStyleJob createFreeStyleJob(final String... resourcesToCopy) {\n-        FreeStyleJob job = jenkins.getJobs().create(FreeStyleJob.class);\n-        ScrollerUtil.hideScrollerTabBar(driver);\n-        for (String resource : resourcesToCopy) {\n-            job.copyResource(WARNINGS_PLUGIN_PREFIX + resource);\n-        }\n-        return job;\n+        assertThat(true).isTrue();\n     }\n \n     private DashboardView createDashboardWithStaticAnalysisPortlet(final Boolean hideCleanJobs, final Boolean showIcons) {\n", "next_change": {"commit": "0570594faeb38d0b338e791d5501dee92cbeeb8e", "changed_code": [{"header": "diff --git a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\nindex 6aee7247c..794a40517 100644\n--- a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\n+++ b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\n", "chunk": "@@ -19,13 +27,59 @@ import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n  * @author Lukas Kirner\n  */\n public class DashboardViewPortletUITest extends AbstractJUnitTest {\n+    private static final String WARNINGS_PLUGIN_PREFIX = \"/\";\n+\n+    @Test\n+    public void shouldShowIcons() {\n+        DashboardView dashboardView = createDashboardWithStaticAnalysisPortlet(false, true);\n+        FreeStyleJob job = createFreeStyleJob(\"issue_filter/checkstyle-result.xml\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n+        job.save();\n+        Build build = shouldBuildJobSuccessfully(job);\n+\n+        DashboardTable dashboardTable = new DashboardTable(build, dashboardView.url, \"portlet-topPortlets-\" + 0);\n+        dashboardTable.open();\n+\n+        List<String> headers = dashboardTable.getPaneHeaders();\n+        assertThat(headers.get(0)).contains(\"Job\");\n+        assertThat(headers.get(1)).contains(\"CheckStyle Warnings\");\n+\n+        List<List<String>> jobs = dashboardTable.getJobRows();\n+        assertThat(jobs.get(0)).contains(job.name, \"4\");\n+    }\n \n     @Test\n-    public void test() {\n-        DashboardView v = createDashboardWithStaticAnalysisPortlet(true, true);\n+    public void shouldNotShowIcons() {\n+        DashboardView dashboardView = createDashboardWithStaticAnalysisPortlet(false, false);\n+        FreeStyleJob job = createFreeStyleJob(\"issue_filter/checkstyle-result.xml\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n+        job.save();\n+        Build build = shouldBuildJobSuccessfully(job);\n+\n+        DashboardTable dashboardTable = new DashboardTable(build, dashboardView.url, \"portlet-topPortlets-\" + 0);\n+        dashboardTable.open();\n+\n+        List<String> headers = dashboardTable.getPaneHeaders();\n+        assertThat(headers.get(0)).contains(\"Job\");\n+        assertThat(headers.get(1)).contains(\"CheckStyle\");\n \n+        List<List<String>> jobs = dashboardTable.getJobRows();\n+        assertThat(jobs.get(0)).contains(job.name, \"4\");\n+    }\n+\n+    private Build shouldBuildJobSuccessfully(final Job job) {\n+        Build build = job.startBuild().waitUntilFinished();\n+        assertThat(build.isSuccess()).isTrue();\n+        return build;\n+    }\n \n-        assertThat(true).isTrue();\n+    private FreeStyleJob createFreeStyleJob(final String... resourcesToCopy) {\n+        FreeStyleJob job = jenkins.getJobs().create(FreeStyleJob.class);\n+        ScrollerUtil.hideScrollerTabBar(driver);\n+        for (String resource : resourcesToCopy) {\n+            job.copyResource(WARNINGS_PLUGIN_PREFIX + resource);\n+        }\n+        return job;\n     }\n \n     private DashboardView createDashboardWithStaticAnalysisPortlet(final Boolean hideCleanJobs, final Boolean showIcons) {\n", "next_change": {"commit": "e38454944de16cd871b9cb77c0004765557fa53f", "changed_code": [{"header": "diff --git a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\nindex 794a40517..e24eef3bb 100644\n--- a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\n+++ b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\n", "chunk": "@@ -85,8 +211,13 @@ public class DashboardViewPortletUITest extends AbstractJUnitTest {\n     private DashboardView createDashboardWithStaticAnalysisPortlet(final Boolean hideCleanJobs, final Boolean showIcons) {\n         DashboardView v = createDashboardView();\n         StaticAnalysisIssuesPerToolAndJobPortlet portlet = v.addTopPortlet(StaticAnalysisIssuesPerToolAndJobPortlet.class);\n-        if (hideCleanJobs) { portlet.toggleHideCleanJobs(); }\n-        if (showIcons) { portlet.toggleShowIcons(); }\n+        if (hideCleanJobs) {\n+            portlet.toggleHideCleanJobs();\n+        }\n+        if (showIcons) {\n+            portlet.toggleShowIcons();\n+        }\n+\n         v.save();\n         return v;\n     }\n", "next_change": null}]}}]}}]}}, {"oid": "05f30dcc85bf08f1ba19311cc93d7edfb415becc", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/05f30dcc85bf08f1ba19311cc93d7edfb415becc", "message": "added Dashboard creation with portlet", "committedDate": "2020-05-23T14:33:05Z", "type": "commit"}, {"oid": "0570594faeb38d0b338e791d5501dee92cbeeb8e", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/0570594faeb38d0b338e791d5501dee92cbeeb8e", "message": "Show icons test", "committedDate": "2020-05-23T14:33:05Z", "type": "commit"}, {"oid": "7bd29b770b2622099382f3a9f5a88f8a885232a8", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/7bd29b770b2622099382f3a9f5a88f8a885232a8", "message": "Adjust Dashboard Table", "committedDate": "2020-05-23T14:33:05Z", "type": "commit"}, {"oid": "29ddc7f035babc87c00e2ba54404e4951332fdc1", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/29ddc7f035babc87c00e2ba54404e4951332fdc1", "message": "Added tests for multiple jobs", "committedDate": "2020-05-23T14:33:05Z", "type": "commit"}, {"oid": "29ddc7f035babc87c00e2ba54404e4951332fdc1", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/29ddc7f035babc87c00e2ba54404e4951332fdc1", "message": "Added tests for multiple jobs", "committedDate": "2020-05-23T14:33:05Z", "type": "forcePushed"}, {"oid": "5bbb690844b6a4f86aeeab0a4d66c3ae17da1ad3", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/5bbb690844b6a4f86aeeab0a4d66c3ae17da1ad3", "message": "Use generated asserts", "committedDate": "2020-05-23T14:40:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzNzY5MA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/476#discussion_r431437690", "body": "```suggestion\r\n        assertThat(headers).containsExactly(\"Job\", \"\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(headers.get(0)).contains(\"Job\");\n          \n          \n            \n                    assertThat(headers.get(1)).contains(\"\");\n          \n          \n            \n                    assertThat(headers).containsExactly(\"Job\", \"\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(headers<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>))<span class=\"pl-k\">.</span>contains(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Job<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(headers<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">1</span>))<span class=\"pl-k\">.</span>contains(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertThat(headers)<span class=\"pl-k\">.</span>containsExactly(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Job<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-05-27T20:57:44Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.plugins.dashboard_view.DashboardView;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+import org.jenkinsci.test.acceptance.po.Job;\n+import io.jenkins.plugins.analysis.warnings.DashboardTable.DashboardTableEntry;\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+/**\n+ * Integration tests for the dashboard portlet.\n+ *\n+ * @author Lukas Kirner\n+ */\n+public class DashboardViewPortletUITest extends AbstractJUnitTest {\n+    private static final String WARNINGS_PLUGIN_PREFIX = \"/dashboard_test/\";\n+\n+    @Test\n+    public void shouldShowIcons() {\n+        DashboardView dashboardView = createDashboardWithStaticAnalysisPortlet(false, true);\n+        FreeStyleJob job = createFreeStyleJob(\"checkstyle-result.xml\");\n+        job.addPublisher(IssuesRecorder.class, recorder -> recorder.setTool(\"CheckStyle\"));\n+        job.save();\n+        Build build = shouldBuildJobSuccessfully(job);\n+\n+        DashboardTable dashboardTable = new DashboardTable(build, dashboardView.url);\n+\n+        List<String> headers = dashboardTable.getHeaders();\n+        assertThat(headers.get(0)).contains(\"Job\");\n+        assertThat(headers.get(1)).contains(\"\");", "originalCommit": "5bbb690844b6a4f86aeeab0a4d66c3ae17da1ad3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzODcwNQ==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/476#discussion_r431438705", "bodyText": "Genau genommen zeigt der Test, dass kein Text da ist. Gibt es eine M\u00f6glichkeit einen weiteren Getter im PO zu haben: getIconNames, der analog arbeitet?", "author": "uhafner", "createdAt": "2020-05-27T20:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzNzY5MA=="}], "type": "inlineReview", "revised_code": {"commit": "e38454944de16cd871b9cb77c0004765557fa53f", "changed_code": [{"header": "diff --git a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\nindex ff06fb43f..e24eef3bb 100644\n--- a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\n+++ b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/DashboardViewPortletUITest.java\n", "chunk": "@@ -31,12 +34,15 @@ public class DashboardViewPortletUITest extends AbstractJUnitTest {\n \n         List<String> headers = dashboardTable.getHeaders();\n         assertThat(headers.get(0)).contains(\"Job\");\n-        assertThat(headers.get(1)).contains(\"\");\n+        assertThat(headers.get(1)).contains(\"/checkstyle-24x24.png\");\n \n         Map<String, Map<String, DashboardTableEntry>> table = dashboardTable.getTable();\n-        assertThat(table.get(job.name).get(\"\")).hasWarningsCount(4);\n+        assertThat(table.get(job.name).get(\"/checkstyle-24x24.png\")).hasWarningsCount(4);\n     }\n \n+    /**\n+     * Creates one Dashboard which will then display one successful build and its checkstyle warnings.\n+     */\n     @Test\n     public void shouldNotShowIcons() {\n         DashboardView dashboardView = createDashboardWithStaticAnalysisPortlet(false, false);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzOTkzNw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/476#discussion_r431439937", "body": "Da meckert Checkstyle noch einige JavaDoc Kommentare an...", "bodyText": "Da meckert Checkstyle noch einige JavaDoc Kommentare an...", "bodyHTML": "<p dir=\"auto\">Da meckert Checkstyle noch einige JavaDoc Kommentare an...</p>", "author": "uhafner", "createdAt": "2020-05-27T21:01:58Z", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.openqa.selenium.WebElement;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.PageObject;\n+\n+public class DashboardTable extends PageObject {", "originalCommit": "5bbb690844b6a4f86aeeab0a4d66c3ae17da1ad3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e38454944de16cd871b9cb77c0004765557fa53f", "changed_code": [{"header": "diff --git a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\nindex 928079ec4..ac14e54c4 100644\n--- a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/DashboardTable.java\n", "chunk": "@@ -10,26 +10,48 @@ import org.openqa.selenium.WebElement;\n import org.jenkinsci.test.acceptance.po.Build;\n import org.jenkinsci.test.acceptance.po.PageObject;\n \n+/**\n+ * {@link PageObject} representing the dashboard on home.\n+ *\n+ * @author Lukas Kirner\n+ */\n public class DashboardTable extends PageObject {\n     private static final String EMPTY = \"-\";\n \n     private final List<String> headers;\n     private final Map<String, Map<String, DashboardTableEntry>> table;\n \n+    /**\n+     * Creates a new page object representing the dashboard.\n+     *\n+     * @param parent\n+     *         a finished build\n+     * @param url\n+     *         the type of the result page (e.g. simian, checkstyle, cpd, etc.)\n+     */\n     public DashboardTable(final Build parent, final URL url) {\n         super(parent, url);\n         this.open();\n \n         WebElement page = this.getElement(by.tagName(\"body\"));\n         List<WebElement> rows = page.findElements(by.tagName(\"table\")).stream()\n-            .filter(dom -> dom.getText().startsWith(\"Static analysis issues per tool and job\"))\n-            .flatMap(dom -> dom.findElements(by.tagName(\"table\")).stream().skip(1))\n-            .flatMap(dom -> dom.findElements(by.tagName(\"tr\")).stream())\n-            .collect(Collectors.toList());\n+                .filter(dom -> dom.getText().startsWith(\"Static analysis issues per tool and job\"))\n+                .flatMap(dom -> dom.findElements(by.tagName(\"table\")).stream().skip(1))\n+                .flatMap(dom -> dom.findElements(by.tagName(\"tr\")).stream())\n+                .collect(Collectors.toList());\n \n         headers = rows.stream()\n             .flatMap(dom -> dom.findElements(by.tagName(\"th\")).stream())\n-            .map(WebElement::getText)\n+                .map(th -> {\n+                    List<WebElement> img = th.findElements(by.tagName(\"img\"));\n+                    if (img.size() > 0) {\n+                        String src = img.get(0).getAttribute(\"src\");\n+                        return src.substring(src.lastIndexOf('/'));\n+                    }\n+                    else {\n+                        return th.getText();\n+                    }\n+                })\n             .collect(Collectors.toList());\n \n         List<List<List<String>>> lines = rows.stream().skip(1)\n", "next_change": null}]}}, {"oid": "e38454944de16cd871b9cb77c0004765557fa53f", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/e38454944de16cd871b9cb77c0004765557fa53f", "message": "- Added icon src to headers\n- Checkstyle corrections", "committedDate": "2020-05-28T10:16:35Z", "type": "commit"}]}