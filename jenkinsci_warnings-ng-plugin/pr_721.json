{"pr_number": 721, "pr_title": "Support withChecks", "pr_author": "mrginglymus", "pr_createdAt": "2020-12-26T17:57:16Z", "pr_url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721", "merge_commit": "f641419eac352131d13faa81f1876396a271457f", "timeline": [{"oid": "f34574d63bea4896ca0b95ad689af5d9d67816b5", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/f34574d63bea4896ca0b95ad689af5d9d67816b5", "message": "Add test for withChecks support", "committedDate": "2020-12-26T17:51:51Z", "type": "commit"}, {"oid": "c37169cd730d8e5853a4ee04d388ade4f6a506cd", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/c37169cd730d8e5853a4ee04d388ade4f6a506cd", "message": "Support withChecks", "committedDate": "2020-12-26T17:56:06Z", "type": "commit"}, {"oid": "4110debe6ab19e76c76ee0fa671a61584b77082a", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/4110debe6ab19e76c76ee0fa671a61584b77082a", "message": "Update readme", "committedDate": "2020-12-26T18:01:07Z", "type": "commit"}, {"oid": "57703098d897573102f94326972028f36e26ae91", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/57703098d897573102f94326972028f36e26ae91", "message": "Satisfy linters", "committedDate": "2020-12-26T19:21:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxOTAxOA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549419018", "body": "I would rather prefer it look like:\r\n```\r\nWarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\r\n```\r\n\r\nThen we can place the logic inside of `WarningChecksPublisher` and reuse it for the `recordIssues` step. (`PublishIssuesStep` is a different step with the name `publishIssues`). ", "bodyText": "I would rather prefer it look like:\nWarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\n\nThen we can place the logic inside of WarningChecksPublisher and reuse it for the recordIssues step. (PublishIssuesStep is a different step with the name publishIssues).", "bodyHTML": "<p dir=\"auto\">I would rather prefer it look like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\n\"><pre><code>WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\n</code></pre></div>\n<p dir=\"auto\">Then we can place the logic inside of <code>WarningChecksPublisher</code> and reuse it for the <code>recordIssues</code> step. (<code>PublishIssuesStep</code> is a different step with the name <code>publishIssues</code>).</p>", "author": "uhafner", "createdAt": "2020-12-28T17:08:25Z", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java", "diffHunk": "@@ -855,7 +857,8 @@ protected ResultAction run() throws IOException, InterruptedException, IllegalSt\n             ResultAction action = publisher.attachAction(step.getTrendChartType());\n \n             if (!step.isSkipPublishingChecks()) {\n-                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener());\n+                String checksName = Optional.ofNullable(getContext().get(ChecksInfo.class)).map(ChecksInfo::getName).orElse(null);\n+                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), checksName);", "originalCommit": "57703098d897573102f94326972028f36e26ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36ee313dbded35e6bc1a3b016d454a3240339929", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\nindex 42d92a725..90fbee2ae 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n", "chunk": "@@ -857,8 +857,7 @@ public class PublishIssuesStep extends Step implements Serializable {\n             ResultAction action = publisher.attachAction(step.getTrendChartType());\n \n             if (!step.isSkipPublishingChecks()) {\n-                String checksName = Optional.ofNullable(getContext().get(ChecksInfo.class)).map(ChecksInfo::getName).orElse(null);\n-                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), checksName);\n+                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\n                 checksPublisher.publishChecks();\n             }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\nindex 42d92a725..90fbee2ae 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n", "chunk": "@@ -857,8 +857,7 @@ public class PublishIssuesStep extends Step implements Serializable {\n             ResultAction action = publisher.attachAction(step.getTrendChartType());\n \n             if (!step.isSkipPublishingChecks()) {\n-                String checksName = Optional.ofNullable(getContext().get(ChecksInfo.class)).map(ChecksInfo::getName).orElse(null);\n-                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), checksName);\n+                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\n                 checksPublisher.publishChecks();\n             }\n \n", "next_change": {"commit": "a07250b9de694157ab69e5a86b9f89c4867189f8", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\nindex 90fbee2ae..a0a5eba3b 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n", "chunk": "@@ -857,8 +872,9 @@ public class PublishIssuesStep extends Step implements Serializable {\n             ResultAction action = publisher.attachAction(step.getTrendChartType());\n \n             if (!step.isSkipPublishingChecks()) {\n-                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\n-                checksPublisher.publishChecks();\n+                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener());\n+                checksPublisher.publishChecks(\n+                        step.isPublishAllIssues() ? AnnotationScope.PUBLISH_ALL_ISSUES : AnnotationScope.PUBLISH_NEW_ISSUES);\n             }\n \n             return action;\n", "next_change": {"commit": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\nindex a0a5eba3b..68fe2d5f9 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n", "chunk": "@@ -872,9 +874,9 @@ public class PublishIssuesStep extends Step implements Serializable {\n             ResultAction action = publisher.attachAction(step.getTrendChartType());\n \n             if (!step.isSkipPublishingChecks()) {\n-                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener());\n+                WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\n                 checksPublisher.publishChecks(\n-                        step.isPublishAllIssues() ? AnnotationScope.PUBLISH_ALL_ISSUES : AnnotationScope.PUBLISH_NEW_ISSUES);\n+                        isPublishAllIssues() ? AnnotationScope.PUBLISH_ALL_ISSUES : AnnotationScope.PUBLISH_NEW_ISSUES);\n             }\n \n             return action;\n", "next_change": {"commit": "8cc24ca5f04d754f0001091a11d8d02c2de025ca", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\nindex 68fe2d5f9..823e40024 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n", "chunk": "@@ -876,7 +875,7 @@ public class PublishIssuesStep extends Step implements Serializable {\n             if (!step.isSkipPublishingChecks()) {\n                 WarningChecksPublisher checksPublisher = new WarningChecksPublisher(action, getTaskListener(), getContext().get(ChecksInfo.class));\n                 checksPublisher.publishChecks(\n-                        isPublishAllIssues() ? AnnotationScope.PUBLISH_ALL_ISSUES : AnnotationScope.PUBLISH_NEW_ISSUES);\n+                        step.isPublishAllIssues() ? AnnotationScope.PUBLISH_ALL_ISSUES : AnnotationScope.PUBLISH_NEW_ISSUES);\n             }\n \n             return action;\n", "next_change": {"commit": "8f84413ee617960ef1ab243a2978069afcfae5b6", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\nindex 823e40024..d29df16c8 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n", "chunk": "@@ -884,7 +906,7 @@ public class PublishIssuesStep extends Step implements Serializable {\n         private LogHandler getLogger(final AnnotatedReport report) throws InterruptedException {\n             String toolName = new LabelProviderFactory().create(report.getId(),\n                     StringUtils.defaultString(step.getName())).getName();\n-            return new LogHandler(getTaskListener(), toolName, report.getReport());\n+            return new LogHandler(getTaskListener(), toolName, step.getQuiet(), report.getReport());\n         }\n     }\n \n", "next_change": {"commit": "ddf9353350bbd533587c8528dce4de6ddea88fbf", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\nindex d29df16c8..5de8e0e8f 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n", "chunk": "@@ -906,7 +906,9 @@ public class PublishIssuesStep extends Step implements Serializable {\n         private LogHandler getLogger(final AnnotatedReport report) throws InterruptedException {\n             String toolName = new LabelProviderFactory().create(report.getId(),\n                     StringUtils.defaultString(step.getName())).getName();\n-            return new LogHandler(getTaskListener(), toolName, step.getQuiet(), report.getReport());\n+            LogHandler logHandler = new LogHandler(getTaskListener(), toolName, report.getReport());\n+            logHandler.setQuiet(step.isQuiet());\n+            return logHandler;\n         }\n     }\n \n", "next_change": {"commit": "c5b6abfeb192ac834625bb72eae4a57b3fde54cf", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\nindex 5de8e0e8f..9f859e1a7 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/PublishIssuesStep.java\n", "chunk": "@@ -903,11 +903,16 @@ public class PublishIssuesStep extends Step implements Serializable {\n             return action;\n         }\n \n-        private LogHandler getLogger(final AnnotatedReport report) throws InterruptedException {\n-            String toolName = new LabelProviderFactory().create(report.getId(),\n+        private LogHandler getLogger(final AnnotatedReport annotatedReport) throws InterruptedException {\n+            String toolName = new LabelProviderFactory().create(annotatedReport.getId(),\n                     StringUtils.defaultString(step.getName())).getName();\n-            LogHandler logHandler = new LogHandler(getTaskListener(), toolName, report.getReport());\n+            LogHandler logHandler = new LogHandler(getTaskListener(), toolName);\n             logHandler.setQuiet(step.isQuiet());\n+\n+            var report = annotatedReport.getReport();\n+            logHandler.logInfoMessages(report.getInfoMessages());\n+            logHandler.logErrorMessages(report.getErrorMessages());\n+\n             return logHandler;\n         }\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "1048de19b7601044ab4fab60ee9cfb8ceb8e3ce3", "committedDate": "2020-12-30 00:36:17 +0100", "message": "Fix PMD warnings."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "8cc24ca5f04d754f0001091a11d8d02c2de025ca", "committedDate": "2020-12-30 01:23:12 +0100", "message": "Add missing properties for `recordIssues` step."}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "98c2ca72c7b0198c82aa1b10c815f5067175e9cf", "committedDate": "2022-06-08 16:36:27 +0200", "message": "Fix some warnings."}, {"oid": "9a544e197d1cab75600df54c0fa7de582fbe89cb", "committedDate": "2022-06-08 20:16:31 +0200", "message": "Add suppression for false positive SpotBugs warning."}, {"oid": "8f84413ee617960ef1ab243a2978069afcfae5b6", "committedDate": "2022-11-30 10:36:27 +0100", "message": "suppress logging with optional param"}, {"oid": "ddf9353350bbd533587c8528dce4de6ddea88fbf", "committedDate": "2022-12-05 11:56:29 +0100", "message": "suppress logging with optional param: review comments"}, {"oid": "eefab6ba89893c8200b4791cb44c581474ab5c41", "committedDate": "2022-12-13 23:38:29 +0100", "message": "Add checkbox for new quiet property."}, {"oid": "ce645ee591cc198076f525fc4283c14020f40592", "committedDate": "2023-01-11 17:25:09 +0100", "message": "Use Java 11 for all dependencies and delete old deprecated code."}, {"oid": "c5b6abfeb192ac834625bb72eae4a57b3fde54cf", "committedDate": "2023-02-07 23:36:18 +0100", "message": "Move `LogHandler` and `StageResultHandler` to plugin-util."}, {"oid": "2cdf280131743b15af5c5efec40e3a07d46a9fd4", "committedDate": "2023-03-23 22:47:44 +0100", "message": "Fix typo."}, {"oid": "2435812c0af53b49279329ffb9771aa1a03abdd9", "committedDate": "2023-04-09 14:35:17 +0200", "message": "Improve naming: the plugin fails the stage, not the build."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxOTU0Ng==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549419546", "body": "See above: parameter should be of type `ChecksInfo`. \r\nAnd do not add a second constructor since we need the same call for the `IssueRecorder` (which is used by the `recordIssues` step). ", "bodyText": "See above: parameter should be of type ChecksInfo.\nAnd do not add a second constructor since we need the same call for the IssueRecorder (which is used by the recordIssues step).", "bodyHTML": "<p dir=\"auto\">See above: parameter should be of type <code>ChecksInfo</code>.<br>\nAnd do not add a second constructor since we need the same call for the <code>IssueRecorder</code> (which is used by the <code>recordIssues</code> step).</p>", "author": "uhafner", "createdAt": "2020-12-28T17:10:25Z", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -40,10 +40,16 @@\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n+    private final String checksName;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final String checksName) {", "originalCommit": "57703098d897573102f94326972028f36e26ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36ee313dbded35e6bc1a3b016d454a3240339929", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 770f01364..cd9f6e439 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -40,16 +42,12 @@ import io.jenkins.plugins.checks.api.ChecksStatus;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n-    private final String checksName;\n+    private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final String checksName) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final ChecksInfo checksInfo) {\n         this.action = action;\n         this.listener = listener;\n-        this.checksName = checksName;\n-    }\n-\n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener) {\n-        this(action, listener, null);\n+        this.checksInfo = checksInfo;\n     }\n \n     /**\n", "next_change": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex cd9f6e439..0ccf66658 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -42,9 +43,10 @@ import io.jenkins.plugins.checks.steps.ChecksInfo;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n+    @CheckForNull\n     private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final ChecksInfo checksInfo) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n         this.action = action;\n         this.listener = listener;\n         this.checksInfo = checksInfo;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 770f01364..0ccf66658 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -40,16 +43,13 @@ import io.jenkins.plugins.checks.api.ChecksStatus;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n-    private final String checksName;\n+    @CheckForNull\n+    private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final String checksName) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n         this.action = action;\n         this.listener = listener;\n-        this.checksName = checksName;\n-    }\n-\n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener) {\n-        this(action, listener, null);\n+        this.checksInfo = checksInfo;\n     }\n \n     /**\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 0ccf66658..ab80308cb 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -43,13 +40,10 @@ import io.jenkins.plugins.checks.steps.ChecksInfo;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n-    @CheckForNull\n-    private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener) {\n         this.action = action;\n         this.listener = listener;\n-        this.checksInfo = checksInfo;\n     }\n \n     /**\n", "next_change": {"commit": "a07250b9de694157ab69e5a86b9f89c4867189f8", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex ab80308cb..9849713a2 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -47,35 +54,48 @@ class WarningChecksPublisher {\n     }\n \n     /**\n-     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI, e.g. GitHub\n-     * checks.\n+     * Publishes checks to the selected SCM platform. Afterwards, all warnings are available in corresponding platform's\n+     * UI, e.g., GitHub checks.\n+     *\n+     * @param annotationScope\n+     *         scope of the annotations to publish\n      */\n-    void publishChecks() {\n+    void publishChecks(final AnnotationScope annotationScope) {\n         ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner(), listener);\n-        publisher.publish(extractChecksDetails());\n+        publisher.publish(extractChecksDetails(annotationScope));\n     }\n \n     @VisibleForTesting\n-    ChecksDetails extractChecksDetails() {\n+    ChecksDetails extractChecksDetails(final AnnotationScope annotationScope) {\n         AnalysisResult result = action.getResult();\n         IssuesStatistics totals = result.getTotals();\n \n         StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n \n+        String summary = extractChecksSummary(totals) + extractReferenceBuild(result, labelProvider);\n+        Report issues = annotationScope == AnnotationScope.PUBLISH_NEW_ISSUES ? result.getNewIssues() : result.getIssues();\n         return new ChecksDetailsBuilder()\n                 .withName(labelProvider.getName())\n                 .withStatus(ChecksStatus.COMPLETED)\n                 .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n                 .withOutput(new ChecksOutputBuilder()\n                         .withTitle(extractChecksTitle(totals))\n-                        .withSummary(extractChecksSummary(totals))\n+                        .withSummary(summary)\n                         .withText(extractChecksText(totals))\n-                        .withAnnotations(extractChecksAnnotations(result.getNewIssues(), labelProvider))\n+                        .withAnnotations(extractChecksAnnotations(issues, labelProvider))\n                         .build())\n                 .withDetailsURL(action.getAbsoluteUrl())\n                 .build();\n     }\n \n+    private String extractReferenceBuild(final AnalysisResult result,\n+            final StaticAnalysisLabelProvider labelProvider) {\n+        return action.getResult()\n+                .getReferenceBuild()\n+                .map(labelProvider::getReferenceBuild).map(DomContent::render)\n+                .orElse(StringUtils.EMPTY);\n+    }\n+\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "1048de19b7601044ab4fab60ee9cfb8ceb8e3ce3", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 9849713a2..db62d2906 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -90,9 +90,9 @@ class WarningChecksPublisher {\n \n     private String extractReferenceBuild(final AnalysisResult result,\n             final StaticAnalysisLabelProvider labelProvider) {\n-        return action.getResult()\n-                .getReferenceBuild()\n-                .map(labelProvider::getReferenceBuild).map(DomContent::render)\n+        return result.getReferenceBuild()\n+                .map(labelProvider::getReferenceBuild)\n+                .map(DomContent::render)\n                 .orElse(StringUtils.EMPTY);\n     }\n \n", "next_change": {"commit": "15c9ef0cca9f925753167e0b8c5548c1b5ec8e47", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex db62d2906..2b8a294ad 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -91,11 +108,21 @@ class WarningChecksPublisher {\n     private String extractReferenceBuild(final AnalysisResult result,\n             final StaticAnalysisLabelProvider labelProvider) {\n         return result.getReferenceBuild()\n-                .map(labelProvider::getReferenceBuild)\n+                .map(referenceBuild -> getReferenceBuild(result.getId(), referenceBuild))\n                 .map(DomContent::render)\n                 .orElse(StringUtils.EMPTY);\n     }\n \n+    public DomContent getReferenceBuild(final String id, final Run<?, ?> referenceBuild) {\n+        return join(Messages.Tool_ReferenceBuild(), createReferenceBuildLink(id, referenceBuild));\n+    }\n+\n+    private ContainerTag createReferenceBuildLink(final String id, final Run<?, ?> referenceBuild) {\n+        return a(referenceBuild.getFullDisplayName()).withHref(\n+                new JenkinsFacade().getAbsoluteUrl(referenceBuild.getUrl(), id));\n+    }\n+\n+\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "6ebe003208effa868f05c432a93ba9dc7d594e84", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 2b8a294ad..4270793f6 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -122,7 +121,6 @@ class WarningChecksPublisher {\n                 new JenkinsFacade().getAbsoluteUrl(referenceBuild.getUrl(), id));\n     }\n \n-\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 4270793f6..3b0dde51e 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -123,22 +127,22 @@ class WarningChecksPublisher {\n \n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n-            return \"No issues.\";\n+            return \"No issues\";\n         }\n         else if (statistics.getNewSize() == 0) {\n-            return String.format(\"No new issues, %d total.\", statistics.getTotalSize());\n+            return String.format(\"No new issues, %d total\", statistics.getTotalSize());\n         }\n         else if (statistics.getNewSize() == statistics.getTotalSize()) {\n             if (statistics.getNewSize() == 1) {\n-                return \"1 new issue.\";\n+                return \"1 new issue\";\n             }\n-            return String.format(\"%d new issues.\", statistics.getNewSize());\n+            return String.format(\"%d new issues\", statistics.getNewSize());\n         }\n         else {\n             if (statistics.getNewSize() == 1) {\n-                return String.format(\"1 new issue, %d total.\", statistics.getTotalSize());\n+                return String.format(\"1 new issue, %d total\", statistics.getTotalSize());\n             }\n-            return String.format(\"%d new issues, %d total.\", statistics.getNewSize(), statistics.getTotalSize());\n+            return String.format(\"%d new issues, %d total\", statistics.getNewSize(), statistics.getTotalSize());\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "committedDate": "2020-12-28 22:43:56 +0100", "message": "Improve layout of checks markup."}, {"oid": "435ff9e3207f4453fb7a806ede9dbd2024374e06", "committedDate": "2020-12-29 12:31:00 +0100", "message": "Use varargs when formatting columns."}, {"oid": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "committedDate": "2020-12-29 15:56:25 +0100", "message": "Add reference build to summary."}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "1048de19b7601044ab4fab60ee9cfb8ceb8e3ce3", "committedDate": "2020-12-30 00:36:17 +0100", "message": "Fix PMD warnings."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "0457846d6289ba0cf6bf28d3dc3dd091bdbd0c8f", "committedDate": "2021-01-17 18:24:34 +0100", "message": "Add missing newline after checks details table."}, {"oid": "15c9ef0cca9f925753167e0b8c5548c1b5ec8e47", "committedDate": "2021-12-04 16:45:02 +0100", "message": "Restore reference build functionality locally in `WarningsChecksPublisher`."}, {"oid": "1841411f6b05999227a82a6a7c4c4a91192d6f67", "committedDate": "2021-12-04 21:25:22 +0100", "message": "Fix some warnings."}, {"oid": "6ebe003208effa868f05c432a93ba9dc7d594e84", "committedDate": "2021-12-31 12:44:52 +0100", "message": "Fix JavaDoc warnings."}, {"oid": "56b2ee38e640a731ffd98cc9c0e3ed3955dceef1", "committedDate": "2022-07-25 01:09:47 +0200", "message": "Checks publisher fallback to issue category if type is empty"}, {"oid": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "committedDate": "2023-03-28 15:14:44 +0200", "message": "Remove dot from checks title."}]}, {"oid": "36ee313dbded35e6bc1a3b016d454a3240339929", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/36ee313dbded35e6bc1a3b016d454a3240339929", "message": "Pass around checksInfo, not checksName; support recordIssues", "committedDate": "2020-12-28T18:15:04Z", "type": "commit"}, {"oid": "979f79225faeee4b22095cf0f2db79e234cdb130", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/979f79225faeee4b22095cf0f2db79e234cdb130", "message": "Add test for withChecks/recordIssues", "committedDate": "2020-12-28T18:55:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5MzgxMw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549493813", "body": "```suggestion\r\n    @CheckForNull\r\n    private ChecksInfo checksInfo;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ChecksInfo checksInfo;\n          \n          \n            \n                @CheckForNull\n          \n          \n            \n                private ChecksInfo checksInfo;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"117\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first\">private</span><span class=\"x\"> </span><span class=\"pl-smi x\">ChecksInfo</span><span class=\"x x-last\"> checksInfo;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"117\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">@CheckForNull</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"118\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">ChecksInfo</span> checksInfo;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-12-28T21:35:11Z", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -112,6 +113,8 @@\n \n     private boolean skipPublishingChecks; // by default, checks will be published\n \n+    private ChecksInfo checksInfo;", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex 8f4327884..e3e08832b 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -113,6 +113,7 @@ public class IssuesRecorder extends Recorder {\n \n     private boolean skipPublishingChecks; // by default, checks will be published\n \n+    @CheckForNull\n     private ChecksInfo checksInfo;\n \n     private String id;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex 8f4327884..44dd0812c 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -113,6 +113,7 @@ public class IssuesRecorder extends Recorder {\n \n     private boolean skipPublishingChecks; // by default, checks will be published\n \n+    @CheckForNull\n     private ChecksInfo checksInfo;\n \n     private String id;\n", "next_change": {"commit": "a07250b9de694157ab69e5a86b9f89c4867189f8", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex 44dd0812c..b377dae76 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -112,9 +112,7 @@ public class IssuesRecorder extends Recorder {\n     private transient boolean isForensicsDisabled;\n \n     private boolean skipPublishingChecks; // by default, checks will be published\n-\n-    @CheckForNull\n-    private ChecksInfo checksInfo;\n+    private boolean publishAllIssues; // by default, only new issues will be published\n \n     private String id;\n     private String name;\n", "next_change": {"commit": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex b377dae76..2391601d1 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -114,6 +115,9 @@ public class IssuesRecorder extends Recorder {\n     private boolean skipPublishingChecks; // by default, checks will be published\n     private boolean publishAllIssues; // by default, only new issues will be published\n \n+    @CheckForNull\n+    private ChecksInfo checksInfo;\n+\n     private String id;\n     private String name;\n \n", "next_change": {"commit": "bfcc9f08aa1c4a84a9bd2045ef36b1978e59b875", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex 2391601d1..c8a5b3804 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -125,6 +125,8 @@ public class IssuesRecorder extends Recorder {\n \n     private TrendChartType trendChartType = TrendChartType.AGGREGATION_TOOLS;\n \n+    private String scm = StringUtils.EMPTY;\n+\n     /**\n      * Creates a new instance of {@link IssuesRecorder}.\n      */\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "bfcc9f08aa1c4a84a9bd2045ef36b1978e59b875", "committedDate": "2021-01-20 23:58:57 +0100", "message": "Select blamer for a specific SCM."}, {"oid": "7e42958155456a64b0df37b316f8907d58d5bae6", "committedDate": "2021-02-01 21:06:02 +0100", "message": "Add a return value for the step `recordIssues`."}, {"oid": "b18a421724cc5dc56ef5e8d5bf26c3c449d36e9b", "committedDate": "2021-02-10 14:50:33 +0100", "message": "When checking for permissions use CONFIGURE permission of specific job."}, {"oid": "681c4690bce8bc6077d9d677a0e729651ee6af36", "committedDate": "2021-12-21 23:05:52 +0100", "message": "Use multiple directories in `IssuesScanner`."}, {"oid": "5ff80213023b7b8988706ab48d236406ff541fa8", "committedDate": "2021-12-28 17:44:51 +0100", "message": "Add source code directories as parameter to steps."}, {"oid": "c2bb40ed02f2e34b76f254f8d6c20fed8ca1e247", "committedDate": "2021-12-31 16:43:04 +0100", "message": "Use integrated forms of Prism."}, {"oid": "0903f2aa415afd1b20d745f798aa1a45df168187", "committedDate": "2022-01-05 18:16:25 +0100", "message": "Use file permission check of Prism."}, {"oid": "8f84413ee617960ef1ab243a2978069afcfae5b6", "committedDate": "2022-11-30 10:36:27 +0100", "message": "suppress logging with optional param"}, {"oid": "ddf9353350bbd533587c8528dce4de6ddea88fbf", "committedDate": "2022-12-05 11:56:29 +0100", "message": "suppress logging with optional param: review comments"}, {"oid": "e3d766ec3197acc070c1a904e7ad8dd0cbfc0938", "committedDate": "2022-12-07 16:57:01 +0100", "message": "suppress logging with optional param: review comments"}, {"oid": "9af42b011974a87304ea370a449327d7a9b07e87", "committedDate": "2022-12-13 15:44:06 +0100", "message": "suppress logging with optional param: test suppressed logging"}, {"oid": "eefab6ba89893c8200b4791cb44c581474ab5c41", "committedDate": "2022-12-13 23:38:29 +0100", "message": "Add checkbox for new quiet property."}, {"oid": "ce645ee591cc198076f525fc4283c14020f40592", "committedDate": "2023-01-11 17:25:09 +0100", "message": "Use Java 11 for all dependencies and delete old deprecated code."}, {"oid": "c5b6abfeb192ac834625bb72eae4a57b3fde54cf", "committedDate": "2023-02-07 23:36:18 +0100", "message": "Move `LogHandler` and `StageResultHandler` to plugin-util."}, {"oid": "2435812c0af53b49279329ffb9771aa1a03abdd9", "committedDate": "2023-04-09 14:35:17 +0200", "message": "Improve naming: the plugin fails the stage, not the build."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5Mzg4MA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549493880", "body": "```suggestion\r\n    public void setChecksInfo(@CheckForNull final ChecksInfo checksInfo) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setChecksInfo(final ChecksInfo checksInfo) {\n          \n          \n            \n                public void setChecksInfo(@CheckForNull final ChecksInfo checksInfo) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> setChecksInfo(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">ChecksInfo</span> checksInfo) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> setChecksInfo(<span class=\"pl-k x x-first\">@CheckForNull</span><span class=\"x x-last\"> </span><span class=\"pl-k\">final</span> <span class=\"pl-smi\">ChecksInfo</span> checksInfo) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-12-28T21:35:32Z", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java", "diffHunk": "@@ -591,6 +594,10 @@ public void setFilters(final List<RegexpFilter> filters) {\n         this.filters = new ArrayList<>(filters);\n     }\n \n+    public void setChecksInfo(final ChecksInfo checksInfo) {", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex 8f4327884..e3e08832b 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -594,7 +595,7 @@ public class IssuesRecorder extends Recorder {\n         this.filters = new ArrayList<>(filters);\n     }\n \n-    public void setChecksInfo(final ChecksInfo checksInfo) {\n+    public void setChecksInfo(@CheckForNull final ChecksInfo checksInfo) {\n         this.checksInfo = checksInfo;\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex 8f4327884..44dd0812c 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -594,7 +609,7 @@ public class IssuesRecorder extends Recorder {\n         this.filters = new ArrayList<>(filters);\n     }\n \n-    public void setChecksInfo(final ChecksInfo checksInfo) {\n+    public void setChecksInfo(@CheckForNull final ChecksInfo checksInfo) {\n         this.checksInfo = checksInfo;\n     }\n \n", "next_change": {"commit": "a07250b9de694157ab69e5a86b9f89c4867189f8", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex 44dd0812c..b377dae76 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -609,10 +622,6 @@ public class IssuesRecorder extends Recorder {\n         this.filters = new ArrayList<>(filters);\n     }\n \n-    public void setChecksInfo(@CheckForNull final ChecksInfo checksInfo) {\n-        this.checksInfo = checksInfo;\n-    }\n-\n     @Override\n     public BuildStepMonitor getRequiredMonitorService() {\n         return BuildStepMonitor.NONE;\n", "next_change": {"commit": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\nindex b377dae76..2391601d1 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\n", "chunk": "@@ -622,6 +626,10 @@ public class IssuesRecorder extends Recorder {\n         this.filters = new ArrayList<>(filters);\n     }\n \n+    public void setChecksInfo(@CheckForNull final ChecksInfo checksInfo) {\n+        this.checksInfo = checksInfo;\n+    }\n+\n     @Override\n     public BuildStepMonitor getRequiredMonitorService() {\n         return BuildStepMonitor.NONE;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "bfcc9f08aa1c4a84a9bd2045ef36b1978e59b875", "committedDate": "2021-01-20 23:58:57 +0100", "message": "Select blamer for a specific SCM."}, {"oid": "7e42958155456a64b0df37b316f8907d58d5bae6", "committedDate": "2021-02-01 21:06:02 +0100", "message": "Add a return value for the step `recordIssues`."}, {"oid": "b18a421724cc5dc56ef5e8d5bf26c3c449d36e9b", "committedDate": "2021-02-10 14:50:33 +0100", "message": "When checking for permissions use CONFIGURE permission of specific job."}, {"oid": "681c4690bce8bc6077d9d677a0e729651ee6af36", "committedDate": "2021-12-21 23:05:52 +0100", "message": "Use multiple directories in `IssuesScanner`."}, {"oid": "5ff80213023b7b8988706ab48d236406ff541fa8", "committedDate": "2021-12-28 17:44:51 +0100", "message": "Add source code directories as parameter to steps."}, {"oid": "c2bb40ed02f2e34b76f254f8d6c20fed8ca1e247", "committedDate": "2021-12-31 16:43:04 +0100", "message": "Use integrated forms of Prism."}, {"oid": "0903f2aa415afd1b20d745f798aa1a45df168187", "committedDate": "2022-01-05 18:16:25 +0100", "message": "Use file permission check of Prism."}, {"oid": "8f84413ee617960ef1ab243a2978069afcfae5b6", "committedDate": "2022-11-30 10:36:27 +0100", "message": "suppress logging with optional param"}, {"oid": "ddf9353350bbd533587c8528dce4de6ddea88fbf", "committedDate": "2022-12-05 11:56:29 +0100", "message": "suppress logging with optional param: review comments"}, {"oid": "e3d766ec3197acc070c1a904e7ad8dd0cbfc0938", "committedDate": "2022-12-07 16:57:01 +0100", "message": "suppress logging with optional param: review comments"}, {"oid": "9af42b011974a87304ea370a449327d7a9b07e87", "committedDate": "2022-12-13 15:44:06 +0100", "message": "suppress logging with optional param: test suppressed logging"}, {"oid": "eefab6ba89893c8200b4791cb44c581474ab5c41", "committedDate": "2022-12-13 23:38:29 +0100", "message": "Add checkbox for new quiet property."}, {"oid": "ce645ee591cc198076f525fc4283c14020f40592", "committedDate": "2023-01-11 17:25:09 +0100", "message": "Use Java 11 for all dependencies and delete old deprecated code."}, {"oid": "c5b6abfeb192ac834625bb72eae4a57b3fde54cf", "committedDate": "2023-02-07 23:36:18 +0100", "message": "Move `LogHandler` and `StageResultHandler` to plugin-util."}, {"oid": "2435812c0af53b49279329ffb9771aa1a03abdd9", "committedDate": "2023-04-09 14:35:17 +0200", "message": "Improve naming: the plugin fails the stage, not the build."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NDA5Nw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549494097", "body": "```suggestion\r\n    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                WarningChecksPublisher(final ResultAction action, final TaskListener listener, final ChecksInfo checksInfo) {\n          \n          \n            \n                WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    WarningChecksPublisher(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">ResultAction</span> action, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">TaskListener</span> listener, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ChecksInfo</span> checksInfo) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    WarningChecksPublisher(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">ResultAction</span> action, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">TaskListener</span> listener, <span class=\"pl-k x x-first\">@CheckForNull</span><span class=\"x x-last\"> </span><span class=\"pl-k\">final</span> <span class=\"pl-smi\">ChecksInfo</span> checksInfo) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-12-28T21:36:15Z", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -40,10 +42,12 @@\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n+    private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final ChecksInfo checksInfo) {", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex cd9f6e439..0ccf66658 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -42,9 +43,10 @@ import io.jenkins.plugins.checks.steps.ChecksInfo;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n+    @CheckForNull\n     private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final ChecksInfo checksInfo) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n         this.action = action;\n         this.listener = listener;\n         this.checksInfo = checksInfo;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex cd9f6e439..0ccf66658 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -42,9 +43,10 @@ import io.jenkins.plugins.checks.steps.ChecksInfo;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n+    @CheckForNull\n     private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final ChecksInfo checksInfo) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n         this.action = action;\n         this.listener = listener;\n         this.checksInfo = checksInfo;\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 0ccf66658..ab80308cb 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -43,13 +40,10 @@ import io.jenkins.plugins.checks.steps.ChecksInfo;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n-    @CheckForNull\n-    private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener) {\n         this.action = action;\n         this.listener = listener;\n-        this.checksInfo = checksInfo;\n     }\n \n     /**\n", "next_change": {"commit": "a07250b9de694157ab69e5a86b9f89c4867189f8", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex ab80308cb..9849713a2 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -47,35 +54,48 @@ class WarningChecksPublisher {\n     }\n \n     /**\n-     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI, e.g. GitHub\n-     * checks.\n+     * Publishes checks to the selected SCM platform. Afterwards, all warnings are available in corresponding platform's\n+     * UI, e.g., GitHub checks.\n+     *\n+     * @param annotationScope\n+     *         scope of the annotations to publish\n      */\n-    void publishChecks() {\n+    void publishChecks(final AnnotationScope annotationScope) {\n         ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner(), listener);\n-        publisher.publish(extractChecksDetails());\n+        publisher.publish(extractChecksDetails(annotationScope));\n     }\n \n     @VisibleForTesting\n-    ChecksDetails extractChecksDetails() {\n+    ChecksDetails extractChecksDetails(final AnnotationScope annotationScope) {\n         AnalysisResult result = action.getResult();\n         IssuesStatistics totals = result.getTotals();\n \n         StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n \n+        String summary = extractChecksSummary(totals) + extractReferenceBuild(result, labelProvider);\n+        Report issues = annotationScope == AnnotationScope.PUBLISH_NEW_ISSUES ? result.getNewIssues() : result.getIssues();\n         return new ChecksDetailsBuilder()\n                 .withName(labelProvider.getName())\n                 .withStatus(ChecksStatus.COMPLETED)\n                 .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n                 .withOutput(new ChecksOutputBuilder()\n                         .withTitle(extractChecksTitle(totals))\n-                        .withSummary(extractChecksSummary(totals))\n+                        .withSummary(summary)\n                         .withText(extractChecksText(totals))\n-                        .withAnnotations(extractChecksAnnotations(result.getNewIssues(), labelProvider))\n+                        .withAnnotations(extractChecksAnnotations(issues, labelProvider))\n                         .build())\n                 .withDetailsURL(action.getAbsoluteUrl())\n                 .build();\n     }\n \n+    private String extractReferenceBuild(final AnalysisResult result,\n+            final StaticAnalysisLabelProvider labelProvider) {\n+        return action.getResult()\n+                .getReferenceBuild()\n+                .map(labelProvider::getReferenceBuild).map(DomContent::render)\n+                .orElse(StringUtils.EMPTY);\n+    }\n+\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "1048de19b7601044ab4fab60ee9cfb8ceb8e3ce3", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 9849713a2..db62d2906 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -90,9 +90,9 @@ class WarningChecksPublisher {\n \n     private String extractReferenceBuild(final AnalysisResult result,\n             final StaticAnalysisLabelProvider labelProvider) {\n-        return action.getResult()\n-                .getReferenceBuild()\n-                .map(labelProvider::getReferenceBuild).map(DomContent::render)\n+        return result.getReferenceBuild()\n+                .map(labelProvider::getReferenceBuild)\n+                .map(DomContent::render)\n                 .orElse(StringUtils.EMPTY);\n     }\n \n", "next_change": {"commit": "15c9ef0cca9f925753167e0b8c5548c1b5ec8e47", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex db62d2906..2b8a294ad 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -91,11 +108,21 @@ class WarningChecksPublisher {\n     private String extractReferenceBuild(final AnalysisResult result,\n             final StaticAnalysisLabelProvider labelProvider) {\n         return result.getReferenceBuild()\n-                .map(labelProvider::getReferenceBuild)\n+                .map(referenceBuild -> getReferenceBuild(result.getId(), referenceBuild))\n                 .map(DomContent::render)\n                 .orElse(StringUtils.EMPTY);\n     }\n \n+    public DomContent getReferenceBuild(final String id, final Run<?, ?> referenceBuild) {\n+        return join(Messages.Tool_ReferenceBuild(), createReferenceBuildLink(id, referenceBuild));\n+    }\n+\n+    private ContainerTag createReferenceBuildLink(final String id, final Run<?, ?> referenceBuild) {\n+        return a(referenceBuild.getFullDisplayName()).withHref(\n+                new JenkinsFacade().getAbsoluteUrl(referenceBuild.getUrl(), id));\n+    }\n+\n+\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "6ebe003208effa868f05c432a93ba9dc7d594e84", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 2b8a294ad..4270793f6 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -122,7 +121,6 @@ class WarningChecksPublisher {\n                 new JenkinsFacade().getAbsoluteUrl(referenceBuild.getUrl(), id));\n     }\n \n-\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 4270793f6..3b0dde51e 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -123,22 +127,22 @@ class WarningChecksPublisher {\n \n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n-            return \"No issues.\";\n+            return \"No issues\";\n         }\n         else if (statistics.getNewSize() == 0) {\n-            return String.format(\"No new issues, %d total.\", statistics.getTotalSize());\n+            return String.format(\"No new issues, %d total\", statistics.getTotalSize());\n         }\n         else if (statistics.getNewSize() == statistics.getTotalSize()) {\n             if (statistics.getNewSize() == 1) {\n-                return \"1 new issue.\";\n+                return \"1 new issue\";\n             }\n-            return String.format(\"%d new issues.\", statistics.getNewSize());\n+            return String.format(\"%d new issues\", statistics.getNewSize());\n         }\n         else {\n             if (statistics.getNewSize() == 1) {\n-                return String.format(\"1 new issue, %d total.\", statistics.getTotalSize());\n+                return String.format(\"1 new issue, %d total\", statistics.getTotalSize());\n             }\n-            return String.format(\"%d new issues, %d total.\", statistics.getNewSize(), statistics.getTotalSize());\n+            return String.format(\"%d new issues, %d total\", statistics.getNewSize(), statistics.getTotalSize());\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "committedDate": "2020-12-28 22:43:56 +0100", "message": "Improve layout of checks markup."}, {"oid": "435ff9e3207f4453fb7a806ede9dbd2024374e06", "committedDate": "2020-12-29 12:31:00 +0100", "message": "Use varargs when formatting columns."}, {"oid": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "committedDate": "2020-12-29 15:56:25 +0100", "message": "Add reference build to summary."}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "1048de19b7601044ab4fab60ee9cfb8ceb8e3ce3", "committedDate": "2020-12-30 00:36:17 +0100", "message": "Fix PMD warnings."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "0457846d6289ba0cf6bf28d3dc3dd091bdbd0c8f", "committedDate": "2021-01-17 18:24:34 +0100", "message": "Add missing newline after checks details table."}, {"oid": "15c9ef0cca9f925753167e0b8c5548c1b5ec8e47", "committedDate": "2021-12-04 16:45:02 +0100", "message": "Restore reference build functionality locally in `WarningsChecksPublisher`."}, {"oid": "1841411f6b05999227a82a6a7c4c4a91192d6f67", "committedDate": "2021-12-04 21:25:22 +0100", "message": "Fix some warnings."}, {"oid": "6ebe003208effa868f05c432a93ba9dc7d594e84", "committedDate": "2021-12-31 12:44:52 +0100", "message": "Fix JavaDoc warnings."}, {"oid": "56b2ee38e640a731ffd98cc9c0e3ed3955dceef1", "committedDate": "2022-07-25 01:09:47 +0200", "message": "Checks publisher fallback to issue category if type is empty"}, {"oid": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "committedDate": "2023-03-28 15:14:44 +0200", "message": "Remove dot from checks title."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NDE0MA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549494140", "body": "```suggestion\r\n    @CheckForNull\r\n    private final ChecksInfo checksInfo;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ChecksInfo checksInfo;\n          \n          \n            \n                @CheckForNull\n          \n          \n            \n                private final ChecksInfo checksInfo;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"47\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first\">private</span><span class=\"x\"> </span><span class=\"pl-k x\">final</span><span class=\"x\"> </span><span class=\"pl-smi x\">ChecksInfo</span><span class=\"x x-last\"> checksInfo;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"47\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">@CheckForNull</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"48\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ChecksInfo</span> checksInfo;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-12-28T21:36:28Z", "path": "plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java", "diffHunk": "@@ -40,10 +42,12 @@\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n+    private final ChecksInfo checksInfo;", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex cd9f6e439..0ccf66658 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -42,9 +43,10 @@ import io.jenkins.plugins.checks.steps.ChecksInfo;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n+    @CheckForNull\n     private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final ChecksInfo checksInfo) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n         this.action = action;\n         this.listener = listener;\n         this.checksInfo = checksInfo;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex cd9f6e439..0ccf66658 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -42,9 +43,10 @@ import io.jenkins.plugins.checks.steps.ChecksInfo;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n+    @CheckForNull\n     private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, final ChecksInfo checksInfo) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n         this.action = action;\n         this.listener = listener;\n         this.checksInfo = checksInfo;\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 0ccf66658..ab80308cb 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -43,13 +40,10 @@ import io.jenkins.plugins.checks.steps.ChecksInfo;\n class WarningChecksPublisher {\n     private final ResultAction action;\n     private final TaskListener listener;\n-    @CheckForNull\n-    private final ChecksInfo checksInfo;\n \n-    WarningChecksPublisher(final ResultAction action, final TaskListener listener, @CheckForNull final ChecksInfo checksInfo) {\n+    WarningChecksPublisher(final ResultAction action, final TaskListener listener) {\n         this.action = action;\n         this.listener = listener;\n-        this.checksInfo = checksInfo;\n     }\n \n     /**\n", "next_change": {"commit": "a07250b9de694157ab69e5a86b9f89c4867189f8", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex ab80308cb..9849713a2 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -47,35 +54,48 @@ class WarningChecksPublisher {\n     }\n \n     /**\n-     * Publishes checks to platforms. Afterwards, all warnings are available in corresponding platform's UI, e.g. GitHub\n-     * checks.\n+     * Publishes checks to the selected SCM platform. Afterwards, all warnings are available in corresponding platform's\n+     * UI, e.g., GitHub checks.\n+     *\n+     * @param annotationScope\n+     *         scope of the annotations to publish\n      */\n-    void publishChecks() {\n+    void publishChecks(final AnnotationScope annotationScope) {\n         ChecksPublisher publisher = ChecksPublisherFactory.fromRun(action.getOwner(), listener);\n-        publisher.publish(extractChecksDetails());\n+        publisher.publish(extractChecksDetails(annotationScope));\n     }\n \n     @VisibleForTesting\n-    ChecksDetails extractChecksDetails() {\n+    ChecksDetails extractChecksDetails(final AnnotationScope annotationScope) {\n         AnalysisResult result = action.getResult();\n         IssuesStatistics totals = result.getTotals();\n \n         StaticAnalysisLabelProvider labelProvider = action.getLabelProvider();\n \n+        String summary = extractChecksSummary(totals) + extractReferenceBuild(result, labelProvider);\n+        Report issues = annotationScope == AnnotationScope.PUBLISH_NEW_ISSUES ? result.getNewIssues() : result.getIssues();\n         return new ChecksDetailsBuilder()\n                 .withName(labelProvider.getName())\n                 .withStatus(ChecksStatus.COMPLETED)\n                 .withConclusion(extractChecksConclusion(result.getQualityGateStatus()))\n                 .withOutput(new ChecksOutputBuilder()\n                         .withTitle(extractChecksTitle(totals))\n-                        .withSummary(extractChecksSummary(totals))\n+                        .withSummary(summary)\n                         .withText(extractChecksText(totals))\n-                        .withAnnotations(extractChecksAnnotations(result.getNewIssues(), labelProvider))\n+                        .withAnnotations(extractChecksAnnotations(issues, labelProvider))\n                         .build())\n                 .withDetailsURL(action.getAbsoluteUrl())\n                 .build();\n     }\n \n+    private String extractReferenceBuild(final AnalysisResult result,\n+            final StaticAnalysisLabelProvider labelProvider) {\n+        return action.getResult()\n+                .getReferenceBuild()\n+                .map(labelProvider::getReferenceBuild).map(DomContent::render)\n+                .orElse(StringUtils.EMPTY);\n+    }\n+\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "1048de19b7601044ab4fab60ee9cfb8ceb8e3ce3", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 9849713a2..db62d2906 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -90,9 +90,9 @@ class WarningChecksPublisher {\n \n     private String extractReferenceBuild(final AnalysisResult result,\n             final StaticAnalysisLabelProvider labelProvider) {\n-        return action.getResult()\n-                .getReferenceBuild()\n-                .map(labelProvider::getReferenceBuild).map(DomContent::render)\n+        return result.getReferenceBuild()\n+                .map(labelProvider::getReferenceBuild)\n+                .map(DomContent::render)\n                 .orElse(StringUtils.EMPTY);\n     }\n \n", "next_change": {"commit": "15c9ef0cca9f925753167e0b8c5548c1b5ec8e47", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex db62d2906..2b8a294ad 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -91,11 +108,21 @@ class WarningChecksPublisher {\n     private String extractReferenceBuild(final AnalysisResult result,\n             final StaticAnalysisLabelProvider labelProvider) {\n         return result.getReferenceBuild()\n-                .map(labelProvider::getReferenceBuild)\n+                .map(referenceBuild -> getReferenceBuild(result.getId(), referenceBuild))\n                 .map(DomContent::render)\n                 .orElse(StringUtils.EMPTY);\n     }\n \n+    public DomContent getReferenceBuild(final String id, final Run<?, ?> referenceBuild) {\n+        return join(Messages.Tool_ReferenceBuild(), createReferenceBuildLink(id, referenceBuild));\n+    }\n+\n+    private ContainerTag createReferenceBuildLink(final String id, final Run<?, ?> referenceBuild) {\n+        return a(referenceBuild.getFullDisplayName()).withHref(\n+                new JenkinsFacade().getAbsoluteUrl(referenceBuild.getUrl(), id));\n+    }\n+\n+\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "6ebe003208effa868f05c432a93ba9dc7d594e84", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 2b8a294ad..4270793f6 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -122,7 +121,6 @@ class WarningChecksPublisher {\n                 new JenkinsFacade().getAbsoluteUrl(referenceBuild.getUrl(), id));\n     }\n \n-\n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n             return \"No issues.\";\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\nindex 4270793f6..3b0dde51e 100644\n--- a/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n+++ b/plugin/src/main/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisher.java\n", "chunk": "@@ -123,22 +127,22 @@ class WarningChecksPublisher {\n \n     private String extractChecksTitle(final IssuesStatistics statistics) {\n         if (statistics.getTotalSize() == 0) {\n-            return \"No issues.\";\n+            return \"No issues\";\n         }\n         else if (statistics.getNewSize() == 0) {\n-            return String.format(\"No new issues, %d total.\", statistics.getTotalSize());\n+            return String.format(\"No new issues, %d total\", statistics.getTotalSize());\n         }\n         else if (statistics.getNewSize() == statistics.getTotalSize()) {\n             if (statistics.getNewSize() == 1) {\n-                return \"1 new issue.\";\n+                return \"1 new issue\";\n             }\n-            return String.format(\"%d new issues.\", statistics.getNewSize());\n+            return String.format(\"%d new issues\", statistics.getNewSize());\n         }\n         else {\n             if (statistics.getNewSize() == 1) {\n-                return String.format(\"1 new issue, %d total.\", statistics.getTotalSize());\n+                return String.format(\"1 new issue, %d total\", statistics.getTotalSize());\n             }\n-            return String.format(\"%d new issues, %d total.\", statistics.getNewSize(), statistics.getTotalSize());\n+            return String.format(\"%d new issues, %d total\", statistics.getNewSize(), statistics.getTotalSize());\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "committedDate": "2020-12-28 22:43:56 +0100", "message": "Improve layout of checks markup."}, {"oid": "435ff9e3207f4453fb7a806ede9dbd2024374e06", "committedDate": "2020-12-29 12:31:00 +0100", "message": "Use varargs when formatting columns."}, {"oid": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "committedDate": "2020-12-29 15:56:25 +0100", "message": "Add reference build to summary."}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "1048de19b7601044ab4fab60ee9cfb8ceb8e3ce3", "committedDate": "2020-12-30 00:36:17 +0100", "message": "Fix PMD warnings."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "0457846d6289ba0cf6bf28d3dc3dd091bdbd0c8f", "committedDate": "2021-01-17 18:24:34 +0100", "message": "Add missing newline after checks details table."}, {"oid": "15c9ef0cca9f925753167e0b8c5548c1b5ec8e47", "committedDate": "2021-12-04 16:45:02 +0100", "message": "Restore reference build functionality locally in `WarningsChecksPublisher`."}, {"oid": "1841411f6b05999227a82a6a7c4c4a91192d6f67", "committedDate": "2021-12-04 21:25:22 +0100", "message": "Fix some warnings."}, {"oid": "6ebe003208effa868f05c432a93ba9dc7d594e84", "committedDate": "2021-12-31 12:44:52 +0100", "message": "Fix JavaDoc warnings."}, {"oid": "56b2ee38e640a731ffd98cc9c0e3ed3955dceef1", "committedDate": "2022-07-25 01:09:47 +0200", "message": "Checks publisher fallback to issue category if type is empty"}, {"oid": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "committedDate": "2023-03-28 15:14:44 +0200", "message": "Remove dot from checks title."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5OTQxMg==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549499412", "body": "```suggestion\r\n        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\r\n```\r\nThe file name needs to be renamed automatically, otherwise it is not found.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    WorkflowJob project = createPipeline();\n          \n          \n            \n                    copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n          \n          \n            \n                    WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n          \n      \n    \n    \n  \n\nThe file name needs to be renamed automatically, otherwise it is not found.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">WorkflowJob</span> project <span class=\"pl-k\">=</span> createPipeline();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        copySingleFileToWorkspace(project, <span class=\"pl-c1\">NEW_CHECKSTYLE_REPORT</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">WorkflowJob</span> project <span class=\"pl-k\">=</span> createPipelineWithWorkspaceFiles(<span class=\"pl-c1\">NEW_CHECKSTYLE_REPORT</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">The file name needs to be renamed automatically, otherwise it is not found.</p>", "author": "uhafner", "createdAt": "2020-12-28T21:57:24Z", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -189,6 +209,43 @@ public void shouldIgnoreColumnsWhenBuildMultipleLineAnnotation() {\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+    /**\n+     * Test that publishIssues honors the checks name provided by a withChecks context.\n+     */\n+    @Test\n+    public void shouldHonorWithChecksContextPublishIssues() {\n+        WorkflowJob project = createPipeline();\n+        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,21 +209,63 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+\n+\n+    /**\n+     * Test that publishIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNamePublishIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNameRecordIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n     /**\n      * Test that publishIssues honors the checks name provided by a withChecks context.\n      */\n     @Test\n     public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n         project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,21 +209,63 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+\n+\n+    /**\n+     * Test that publishIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNamePublishIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNameRecordIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n     /**\n      * Test that publishIssues honors the checks name provided by a withChecks context.\n      */\n     @Test\n     public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n         project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     /**\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 63ada65dd..d889c037c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,84 +213,6 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n-\n-\n-    /**\n-     * Test that publishIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNamePublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNameRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that publishIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n     private ChecksDetails createExpectedCheckStyleDetails() {\n         ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n                 .withName(\"CheckStyle\")\n", "next_change": {"commit": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex d889c037c..ce12112da 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -221,9 +230,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n \n         ChecksOutput output = new ChecksOutputBuilder()\n                 .withTitle(\"2 new issues, 6 total.\")\n-                .withSummary(\"|Total|New|Outstanding|Fixed|Trend\\n\"\n-                        + \"|:-:|:-:|:-:|:-:|:-:\\n\"\n-                        + \"|6|2|4|0|:-1:\\n\")\n+                .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n                         + \"|:-:|:-:|:-:|:-:\\n\"\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex ce12112da..9ffed175c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -229,7 +391,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .withConclusion(ChecksConclusion.SUCCESS);\n \n         ChecksOutput output = new ChecksOutputBuilder()\n-                .withTitle(\"2 new issues, 6 total.\")\n+                .withTitle(\"2 new issues, 6 total\")\n                 .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "committedDate": "2020-12-28 22:43:56 +0100", "message": "Improve layout of checks markup."}, {"oid": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "committedDate": "2020-12-29 15:56:25 +0100", "message": "Add reference build to summary."}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "8cc24ca5f04d754f0001091a11d8d02c2de025ca", "committedDate": "2020-12-30 01:23:12 +0100", "message": "Add missing properties for `recordIssues` step."}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "0457846d6289ba0cf6bf28d3dc3dd091bdbd0c8f", "committedDate": "2021-01-17 18:24:34 +0100", "message": "Add missing newline after checks details table."}, {"oid": "9acc60acdc4e2652156e50532e05a10335496196", "committedDate": "2021-03-10 22:50:33 +0100", "message": "Integrate new parser registry."}, {"oid": "8354757e41830adde78278d24fc8f17f40c32a25", "committedDate": "2021-04-08 23:37:38 +0200", "message": "Use new hierarchical reports."}, {"oid": "10eb3870d8699d511cc0e8fdfb0f0d49cdf60b00", "committedDate": "2021-07-27 12:47:36 +0200", "message": "Replace deprecated AssertJ method call."}, {"oid": "e5cea2cc9a6657a6e980ac810128fde35df6c6af", "committedDate": "2021-10-15 16:56:42 +0200", "message": "Update test with new URL of static analysis tool."}, {"oid": "d6b118a0c0273d9284fe218da561eef98566e631", "committedDate": "2022-02-16 00:22:32 +0100", "message": "Remove HTMLUnit tests."}, {"oid": "5c829b02c0ba4233a4d9ff3527c49d6736782fd8", "committedDate": "2022-03-11 13:17:14 +0100", "message": "Migrate integration tests to JUnit 5."}, {"oid": "56b2ee38e640a731ffd98cc9c0e3ed3955dceef1", "committedDate": "2022-07-25 01:09:47 +0200", "message": "Checks publisher fallback to issue category if type is empty"}, {"oid": "9f6e75c10de15052d509cc486aa3e0b0e1167f11", "committedDate": "2022-07-25 19:51:20 +0200", "message": "Update plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java"}, {"oid": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "committedDate": "2023-03-28 15:14:44 +0200", "message": "Remove dot from checks title."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwMTI1OA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549501258", "body": "```suggestion\r\n        assertThat(publishedChecks).hasSize(2); // add a small comment why there are two results?\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(publishedChecks.size()).isEqualTo(2);\n          \n          \n            \n                    assertThat(publishedChecks).hasSize(2); // add a small comment why there are two results?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(publishedChecks<span class=\"pl-k x x-first\">.</span><span class=\"x\">size())</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isEqualTo</span>(<span class=\"pl-c1\">2</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertThat(publishedChecks<span class=\"x x-first\">)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">hasSize</span>(<span class=\"pl-c1\">2</span>);<span class=\"x x-first\"> </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> add a small comment why there are two results?</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-12-28T22:05:42Z", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -189,6 +209,43 @@ public void shouldIgnoreColumnsWhenBuildMultipleLineAnnotation() {\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+    /**\n+     * Test that publishIssues honors the checks name provided by a withChecks context.\n+     */\n+    @Test\n+    public void shouldHonorWithChecksContextPublishIssues() {\n+        WorkflowJob project = createPipeline();\n+        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks.size()).isEqualTo(2);", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,21 +209,63 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+\n+\n+    /**\n+     * Test that publishIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNamePublishIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNameRecordIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n     /**\n      * Test that publishIssues honors the checks name provided by a withChecks context.\n      */\n     @Test\n     public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n         project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,21 +209,63 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+\n+\n+    /**\n+     * Test that publishIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNamePublishIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNameRecordIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n     /**\n      * Test that publishIssues honors the checks name provided by a withChecks context.\n      */\n     @Test\n     public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n         project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     /**\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 63ada65dd..d889c037c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,84 +213,6 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n-\n-\n-    /**\n-     * Test that publishIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNamePublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNameRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that publishIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n     private ChecksDetails createExpectedCheckStyleDetails() {\n         ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n                 .withName(\"CheckStyle\")\n", "next_change": {"commit": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex d889c037c..ce12112da 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -221,9 +230,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n \n         ChecksOutput output = new ChecksOutputBuilder()\n                 .withTitle(\"2 new issues, 6 total.\")\n-                .withSummary(\"|Total|New|Outstanding|Fixed|Trend\\n\"\n-                        + \"|:-:|:-:|:-:|:-:|:-:\\n\"\n-                        + \"|6|2|4|0|:-1:\\n\")\n+                .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n                         + \"|:-:|:-:|:-:|:-:\\n\"\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex ce12112da..9ffed175c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -229,7 +391,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .withConclusion(ChecksConclusion.SUCCESS);\n \n         ChecksOutput output = new ChecksOutputBuilder()\n-                .withTitle(\"2 new issues, 6 total.\")\n+                .withTitle(\"2 new issues, 6 total\")\n                 .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "committedDate": "2020-12-28 22:43:56 +0100", "message": "Improve layout of checks markup."}, {"oid": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "committedDate": "2020-12-29 15:56:25 +0100", "message": "Add reference build to summary."}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "8cc24ca5f04d754f0001091a11d8d02c2de025ca", "committedDate": "2020-12-30 01:23:12 +0100", "message": "Add missing properties for `recordIssues` step."}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "0457846d6289ba0cf6bf28d3dc3dd091bdbd0c8f", "committedDate": "2021-01-17 18:24:34 +0100", "message": "Add missing newline after checks details table."}, {"oid": "9acc60acdc4e2652156e50532e05a10335496196", "committedDate": "2021-03-10 22:50:33 +0100", "message": "Integrate new parser registry."}, {"oid": "8354757e41830adde78278d24fc8f17f40c32a25", "committedDate": "2021-04-08 23:37:38 +0200", "message": "Use new hierarchical reports."}, {"oid": "10eb3870d8699d511cc0e8fdfb0f0d49cdf60b00", "committedDate": "2021-07-27 12:47:36 +0200", "message": "Replace deprecated AssertJ method call."}, {"oid": "e5cea2cc9a6657a6e980ac810128fde35df6c6af", "committedDate": "2021-10-15 16:56:42 +0200", "message": "Update test with new URL of static analysis tool."}, {"oid": "d6b118a0c0273d9284fe218da561eef98566e631", "committedDate": "2022-02-16 00:22:32 +0100", "message": "Remove HTMLUnit tests."}, {"oid": "5c829b02c0ba4233a4d9ff3527c49d6736782fd8", "committedDate": "2022-03-11 13:17:14 +0100", "message": "Migrate integration tests to JUnit 5."}, {"oid": "56b2ee38e640a731ffd98cc9c0e3ed3955dceef1", "committedDate": "2022-07-25 01:09:47 +0200", "message": "Checks publisher fallback to issue category if type is empty"}, {"oid": "9f6e75c10de15052d509cc486aa3e0b0e1167f11", "committedDate": "2022-07-25 19:51:20 +0200", "message": "Update plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java"}, {"oid": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "committedDate": "2023-03-28 15:14:44 +0200", "message": "Remove dot from checks title."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwMTYyNA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549501624", "body": "An additional check:\r\n```\r\n        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\r\n                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\r\n```", "bodyText": "An additional check:\n        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));", "bodyHTML": "<p dir=\"auto\">An additional check:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n                output -&gt; assertThat(output.getTitle()).isPresent().get().isEqualTo(&quot;No new issues, 6 total.&quot;));\"><pre><code>        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n                output -&gt; assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n</code></pre></div>", "author": "uhafner", "createdAt": "2020-12-28T22:06:54Z", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -189,6 +209,43 @@ public void shouldIgnoreColumnsWhenBuildMultipleLineAnnotation() {\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+    /**\n+     * Test that publishIssues honors the checks name provided by a withChecks context.\n+     */\n+    @Test\n+    public void shouldHonorWithChecksContextPublishIssues() {\n+        WorkflowJob project = createPipeline();\n+        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks.size()).isEqualTo(2);\n+\n+        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+    }", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,21 +209,63 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+\n+\n+    /**\n+     * Test that publishIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNamePublishIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNameRecordIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n     /**\n      * Test that publishIssues honors the checks name provided by a withChecks context.\n      */\n     @Test\n     public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n         project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,21 +209,63 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+\n+\n+    /**\n+     * Test that publishIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNamePublishIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNameRecordIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n     /**\n      * Test that publishIssues honors the checks name provided by a withChecks context.\n      */\n     @Test\n     public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n         project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     /**\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 63ada65dd..d889c037c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,84 +213,6 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n-\n-\n-    /**\n-     * Test that publishIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNamePublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNameRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that publishIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n     private ChecksDetails createExpectedCheckStyleDetails() {\n         ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n                 .withName(\"CheckStyle\")\n", "next_change": {"commit": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex d889c037c..ce12112da 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -221,9 +230,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n \n         ChecksOutput output = new ChecksOutputBuilder()\n                 .withTitle(\"2 new issues, 6 total.\")\n-                .withSummary(\"|Total|New|Outstanding|Fixed|Trend\\n\"\n-                        + \"|:-:|:-:|:-:|:-:|:-:\\n\"\n-                        + \"|6|2|4|0|:-1:\\n\")\n+                .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n                         + \"|:-:|:-:|:-:|:-:\\n\"\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex ce12112da..9ffed175c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -229,7 +391,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .withConclusion(ChecksConclusion.SUCCESS);\n \n         ChecksOutput output = new ChecksOutputBuilder()\n-                .withTitle(\"2 new issues, 6 total.\")\n+                .withTitle(\"2 new issues, 6 total\")\n                 .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "committedDate": "2020-12-28 22:43:56 +0100", "message": "Improve layout of checks markup."}, {"oid": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "committedDate": "2020-12-29 15:56:25 +0100", "message": "Add reference build to summary."}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "8cc24ca5f04d754f0001091a11d8d02c2de025ca", "committedDate": "2020-12-30 01:23:12 +0100", "message": "Add missing properties for `recordIssues` step."}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "0457846d6289ba0cf6bf28d3dc3dd091bdbd0c8f", "committedDate": "2021-01-17 18:24:34 +0100", "message": "Add missing newline after checks details table."}, {"oid": "9acc60acdc4e2652156e50532e05a10335496196", "committedDate": "2021-03-10 22:50:33 +0100", "message": "Integrate new parser registry."}, {"oid": "8354757e41830adde78278d24fc8f17f40c32a25", "committedDate": "2021-04-08 23:37:38 +0200", "message": "Use new hierarchical reports."}, {"oid": "10eb3870d8699d511cc0e8fdfb0f0d49cdf60b00", "committedDate": "2021-07-27 12:47:36 +0200", "message": "Replace deprecated AssertJ method call."}, {"oid": "e5cea2cc9a6657a6e980ac810128fde35df6c6af", "committedDate": "2021-10-15 16:56:42 +0200", "message": "Update test with new URL of static analysis tool."}, {"oid": "d6b118a0c0273d9284fe218da561eef98566e631", "committedDate": "2022-02-16 00:22:32 +0100", "message": "Remove HTMLUnit tests."}, {"oid": "5c829b02c0ba4233a4d9ff3527c49d6736782fd8", "committedDate": "2022-03-11 13:17:14 +0100", "message": "Migrate integration tests to JUnit 5."}, {"oid": "56b2ee38e640a731ffd98cc9c0e3ed3955dceef1", "committedDate": "2022-07-25 01:09:47 +0200", "message": "Checks publisher fallback to issue category if type is empty"}, {"oid": "9f6e75c10de15052d509cc486aa3e0b0e1167f11", "committedDate": "2022-07-25 19:51:20 +0200", "message": "Update plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java"}, {"oid": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "committedDate": "2023-03-28 15:14:44 +0200", "message": "Remove dot from checks title."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwMjU3OQ==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549502579", "body": "This is not actually part of your PR: but since you added a simple way to verify the checks can you also add another test that does not wrap the code with `withChecks` and see that the original title is used?", "bodyText": "This is not actually part of your PR: but since you added a simple way to verify the checks can you also add another test that does not wrap the code with withChecks and see that the original title is used?", "bodyHTML": "<p dir=\"auto\">This is not actually part of your PR: but since you added a simple way to verify the checks can you also add another test that does not wrap the code with <code>withChecks</code> and see that the original title is used?</p>", "author": "uhafner", "createdAt": "2020-12-28T22:11:36Z", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -189,6 +209,43 @@ public void shouldIgnoreColumnsWhenBuildMultipleLineAnnotation() {\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+    /**\n+     * Test that publishIssues honors the checks name provided by a withChecks context.\n+     */\n+    @Test\n+    public void shouldHonorWithChecksContextPublishIssues() {\n+        WorkflowJob project = createPipeline();\n+        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks.size()).isEqualTo(2);\n+\n+        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues honors the checks name provided by a withChecks context.\n+     */\n+    @Test\n+    public void shouldHonorWithChecksContextRecordIssues() {\n+        WorkflowJob project = createPipeline();\n+        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(String.format(\"\"\n+                + \"withChecks('Custom Checks Name') {\\n\"\n+                + \"  recordIssues(tools: [%s(pattern: '%s')])\\n\"\n+                + \"}\", new CheckStyle().getSymbolName(), NEW_CHECKSTYLE_REPORT)));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks.size()).isEqualTo(2);\n+\n+        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -231,19 +273,18 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n      */\n     @Test\n     public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(String.format(\"\"\n-                + \"withChecks('Custom Checks Name') {\\n\"\n-                + \"  recordIssues(tools: [%s(pattern: '%s')])\\n\"\n-                + \"}\", new CheckStyle().getSymbolName(), NEW_CHECKSTYLE_REPORT)));\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     private ChecksDetails createExpectedCheckStyleDetails() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -231,19 +273,18 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n      */\n     @Test\n     public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(String.format(\"\"\n-                + \"withChecks('Custom Checks Name') {\\n\"\n-                + \"  recordIssues(tools: [%s(pattern: '%s')])\\n\"\n-                + \"}\", new CheckStyle().getSymbolName(), NEW_CHECKSTYLE_REPORT)));\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     private ChecksDetails createExpectedCheckStyleDetails() {\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 63ada65dd..d889c037c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,84 +213,6 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n-\n-\n-    /**\n-     * Test that publishIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNamePublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNameRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that publishIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n     private ChecksDetails createExpectedCheckStyleDetails() {\n         ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n                 .withName(\"CheckStyle\")\n", "next_change": {"commit": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex d889c037c..ce12112da 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -221,9 +230,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n \n         ChecksOutput output = new ChecksOutputBuilder()\n                 .withTitle(\"2 new issues, 6 total.\")\n-                .withSummary(\"|Total|New|Outstanding|Fixed|Trend\\n\"\n-                        + \"|:-:|:-:|:-:|:-:|:-:\\n\"\n-                        + \"|6|2|4|0|:-1:\\n\")\n+                .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n                         + \"|:-:|:-:|:-:|:-:\\n\"\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex ce12112da..9ffed175c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -229,7 +391,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .withConclusion(ChecksConclusion.SUCCESS);\n \n         ChecksOutput output = new ChecksOutputBuilder()\n-                .withTitle(\"2 new issues, 6 total.\")\n+                .withTitle(\"2 new issues, 6 total\")\n                 .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "committedDate": "2020-12-28 22:43:56 +0100", "message": "Improve layout of checks markup."}, {"oid": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "committedDate": "2020-12-29 15:56:25 +0100", "message": "Add reference build to summary."}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "8cc24ca5f04d754f0001091a11d8d02c2de025ca", "committedDate": "2020-12-30 01:23:12 +0100", "message": "Add missing properties for `recordIssues` step."}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "0457846d6289ba0cf6bf28d3dc3dd091bdbd0c8f", "committedDate": "2021-01-17 18:24:34 +0100", "message": "Add missing newline after checks details table."}, {"oid": "9acc60acdc4e2652156e50532e05a10335496196", "committedDate": "2021-03-10 22:50:33 +0100", "message": "Integrate new parser registry."}, {"oid": "8354757e41830adde78278d24fc8f17f40c32a25", "committedDate": "2021-04-08 23:37:38 +0200", "message": "Use new hierarchical reports."}, {"oid": "10eb3870d8699d511cc0e8fdfb0f0d49cdf60b00", "committedDate": "2021-07-27 12:47:36 +0200", "message": "Replace deprecated AssertJ method call."}, {"oid": "e5cea2cc9a6657a6e980ac810128fde35df6c6af", "committedDate": "2021-10-15 16:56:42 +0200", "message": "Update test with new URL of static analysis tool."}, {"oid": "d6b118a0c0273d9284fe218da561eef98566e631", "committedDate": "2022-02-16 00:22:32 +0100", "message": "Remove HTMLUnit tests."}, {"oid": "5c829b02c0ba4233a4d9ff3527c49d6736782fd8", "committedDate": "2022-03-11 13:17:14 +0100", "message": "Migrate integration tests to JUnit 5."}, {"oid": "56b2ee38e640a731ffd98cc9c0e3ed3955dceef1", "committedDate": "2022-07-25 01:09:47 +0200", "message": "Checks publisher fallback to issue category if type is empty"}, {"oid": "9f6e75c10de15052d509cc486aa3e0b0e1167f11", "committedDate": "2022-07-25 19:51:20 +0200", "message": "Update plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java"}, {"oid": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "committedDate": "2023-03-28 15:14:44 +0200", "message": "Remove dot from checks title."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwMjY3Mw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/721#discussion_r549502673", "body": "See comments above here as well", "bodyText": "See comments above here as well", "bodyHTML": "<p dir=\"auto\">See comments above here as well</p>", "author": "uhafner", "createdAt": "2020-12-28T22:12:00Z", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java", "diffHunk": "@@ -189,6 +209,43 @@ public void shouldIgnoreColumnsWhenBuildMultipleLineAnnotation() {\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+    /**\n+     * Test that publishIssues honors the checks name provided by a withChecks context.\n+     */\n+    @Test\n+    public void shouldHonorWithChecksContextPublishIssues() {\n+        WorkflowJob project = createPipeline();\n+        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks.size()).isEqualTo(2);\n+\n+        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues honors the checks name provided by a withChecks context.\n+     */\n+    @Test\n+    public void shouldHonorWithChecksContextRecordIssues() {", "originalCommit": "979f79225faeee4b22095cf0f2db79e234cdb130", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,21 +209,63 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+\n+\n+    /**\n+     * Test that publishIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNamePublishIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNameRecordIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n     /**\n      * Test that publishIssues honors the checks name provided by a withChecks context.\n      */\n     @Test\n     public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n         project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     /**\n", "next_change": null}, {"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -231,19 +273,18 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n      */\n     @Test\n     public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(String.format(\"\"\n-                + \"withChecks('Custom Checks Name') {\\n\"\n-                + \"  recordIssues(tools: [%s(pattern: '%s')])\\n\"\n-                + \"}\", new CheckStyle().getSymbolName(), NEW_CHECKSTYLE_REPORT)));\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     private ChecksDetails createExpectedCheckStyleDetails() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f641419eac352131d13faa81f1876396a271457f", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,21 +209,63 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n+\n+\n+    /**\n+     * Test that publishIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNamePublishIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n+    /**\n+     * Test that recordIssues uses correct default name.\n+     */\n+    @Test\n+    public void shouldUseDefaultChecksNameRecordIssues() {\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n+        buildSuccessfully(project);\n+\n+        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n+\n+        assertThat(publishedChecks).hasSize(1);\n+\n+        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n+\n+        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n+    }\n+\n     /**\n      * Test that publishIssues honors the checks name provided by a withChecks context.\n      */\n     @Test\n     public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n         project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     /**\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 63ada65dd..d889c037c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,84 +213,6 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n-\n-\n-    /**\n-     * Test that publishIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNamePublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNameRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that publishIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n     private ChecksDetails createExpectedCheckStyleDetails() {\n         ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n                 .withName(\"CheckStyle\")\n", "next_change": {"commit": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex d889c037c..ce12112da 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -221,9 +230,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n \n         ChecksOutput output = new ChecksOutputBuilder()\n                 .withTitle(\"2 new issues, 6 total.\")\n-                .withSummary(\"|Total|New|Outstanding|Fixed|Trend\\n\"\n-                        + \"|:-:|:-:|:-:|:-:|:-:\\n\"\n-                        + \"|6|2|4|0|:-1:\\n\")\n+                .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n                         + \"|:-:|:-:|:-:|:-:\\n\"\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex ce12112da..9ffed175c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -229,7 +391,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .withConclusion(ChecksConclusion.SUCCESS);\n \n         ChecksOutput output = new ChecksOutputBuilder()\n-                .withTitle(\"2 new issues, 6 total.\")\n+                .withTitle(\"2 new issues, 6 total\")\n                 .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 4e0210053..63ada65dd 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -231,19 +273,18 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n      */\n     @Test\n     public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipeline();\n-        copySingleFileToWorkspace(project, NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(String.format(\"\"\n-                + \"withChecks('Custom Checks Name') {\\n\"\n-                + \"  recordIssues(tools: [%s(pattern: '%s')])\\n\"\n-                + \"}\", new CheckStyle().getSymbolName(), NEW_CHECKSTYLE_REPORT)));\n+        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n+        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n         buildSuccessfully(project);\n \n         List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n \n-        assertThat(publishedChecks.size()).isEqualTo(2);\n+        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n \n         publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n+\n+        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n+                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n     }\n \n     private ChecksDetails createExpectedCheckStyleDetails() {\n", "next_change": {"commit": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex 63ada65dd..d889c037c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -209,84 +213,6 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .hasFieldOrPropertyWithValue(\"endColumn\", Optional.empty());\n     }\n \n-\n-\n-    /**\n-     * Test that publishIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNamePublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues uses correct default name.\n-     */\n-    @Test\n-    public void shouldUseDefaultChecksNameRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(createRecordIssuesStep(new CheckStyle())));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(1);\n-\n-        assertThat(publishedChecks.get(0).getName()).isPresent().get().isEqualTo(\"CheckStyle\");\n-\n-        assertThat(publishedChecks.get(0).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that publishIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextPublishIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createScanForIssuesStep(new CheckStyle()), PUBLISH_ISSUES_STEP, \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from publishIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n-    /**\n-     * Test that recordIssues honors the checks name provided by a withChecks context.\n-     */\n-    @Test\n-    public void shouldHonorWithChecksContextRecordIssues() {\n-        WorkflowJob project = createPipelineWithWorkspaceFiles(NEW_CHECKSTYLE_REPORT);\n-        project.setDefinition(asStage(\"withChecks('Custom Checks Name') {\", createRecordIssuesStep(new CheckStyle()), \"}\"));\n-        buildSuccessfully(project);\n-\n-        List<ChecksDetails> publishedChecks = PUBLISHER_FACTORY.getPublishedChecks();\n-\n-        assertThat(publishedChecks).hasSize(2);  // First from 'In progress' check provided by withChecks, second from recordIssues\n-\n-        publishedChecks.forEach(check -> assertThat(check.getName()).isPresent().get().isEqualTo(\"Custom Checks Name\"));\n-\n-        assertThat(publishedChecks.get(1).getOutput()).isPresent().hasValueSatisfying(\n-                output -> assertThat(output.getTitle()).isPresent().get().isEqualTo(\"No new issues, 6 total.\"));\n-    }\n-\n     private ChecksDetails createExpectedCheckStyleDetails() {\n         ChecksDetailsBuilder builder = new ChecksDetailsBuilder()\n                 .withName(\"CheckStyle\")\n", "next_change": {"commit": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex d889c037c..ce12112da 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -221,9 +230,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n \n         ChecksOutput output = new ChecksOutputBuilder()\n                 .withTitle(\"2 new issues, 6 total.\")\n-                .withSummary(\"|Total|New|Outstanding|Fixed|Trend\\n\"\n-                        + \"|:-:|:-:|:-:|:-:|:-:\\n\"\n-                        + \"|6|2|4|0|:-1:\\n\")\n+                .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n                         + \"|:-:|:-:|:-:|:-:\\n\"\n", "next_change": {"commit": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "changed_code": [{"header": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\nindex ce12112da..9ffed175c 100644\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n+++ b/plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java\n", "chunk": "@@ -229,7 +391,7 @@ public class WarningChecksPublisherITest extends IntegrationTestWithJenkinsPerSu\n                 .withConclusion(ChecksConclusion.SUCCESS);\n \n         ChecksOutput output = new ChecksOutputBuilder()\n-                .withTitle(\"2 new issues, 6 total.\")\n+                .withTitle(\"2 new issues, 6 total\")\n                 .withSummary(\"\") // summary value is checked directly since it is using a random port\n                 .withText(\"## Severity distribution of new issues\\n\"\n                         + \"|Error|Warning High|Warning Normal|Warning Low\\n\"\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "f641419eac352131d13faa81f1876396a271457f", "message": "Merge commit", "committedDate": null}, {"oid": "18f7e04a7b58f8e1f66ec96f0af10bbcafc4cf69", "committedDate": "2020-12-28 22:43:56 +0100", "message": "Improve layout of checks markup."}, {"oid": "70aa86d5402dbc0cf38379f1f7068eb8e7b2a410", "committedDate": "2020-12-29 15:56:25 +0100", "message": "Add reference build to summary."}, {"oid": "a07250b9de694157ab69e5a86b9f89c4867189f8", "committedDate": "2020-12-29 17:35:34 +0100", "message": "Add option to publishing all or new issues."}, {"oid": "92acf00239aea81a1564d72728e02f7d8b7e6e9b", "committedDate": "2020-12-30 00:49:57 +0100", "message": "Merge remote-tracking branch 'origin/master' into checks-refresh-ui"}, {"oid": "8cc24ca5f04d754f0001091a11d8d02c2de025ca", "committedDate": "2020-12-30 01:23:12 +0100", "message": "Add missing properties for `recordIssues` step."}, {"oid": "9c1dccece5e4defc06989ffcb4ceb5e642defb92", "committedDate": "2020-12-30 08:17:20 +0100", "message": "Fix PMD warnings."}, {"oid": "0457846d6289ba0cf6bf28d3dc3dd091bdbd0c8f", "committedDate": "2021-01-17 18:24:34 +0100", "message": "Add missing newline after checks details table."}, {"oid": "9acc60acdc4e2652156e50532e05a10335496196", "committedDate": "2021-03-10 22:50:33 +0100", "message": "Integrate new parser registry."}, {"oid": "8354757e41830adde78278d24fc8f17f40c32a25", "committedDate": "2021-04-08 23:37:38 +0200", "message": "Use new hierarchical reports."}, {"oid": "10eb3870d8699d511cc0e8fdfb0f0d49cdf60b00", "committedDate": "2021-07-27 12:47:36 +0200", "message": "Replace deprecated AssertJ method call."}, {"oid": "e5cea2cc9a6657a6e980ac810128fde35df6c6af", "committedDate": "2021-10-15 16:56:42 +0200", "message": "Update test with new URL of static analysis tool."}, {"oid": "d6b118a0c0273d9284fe218da561eef98566e631", "committedDate": "2022-02-16 00:22:32 +0100", "message": "Remove HTMLUnit tests."}, {"oid": "5c829b02c0ba4233a4d9ff3527c49d6736782fd8", "committedDate": "2022-03-11 13:17:14 +0100", "message": "Migrate integration tests to JUnit 5."}, {"oid": "56b2ee38e640a731ffd98cc9c0e3ed3955dceef1", "committedDate": "2022-07-25 01:09:47 +0200", "message": "Checks publisher fallback to issue category if type is empty"}, {"oid": "9f6e75c10de15052d509cc486aa3e0b0e1167f11", "committedDate": "2022-07-25 19:51:20 +0200", "message": "Update plugin/src/test/java/io/jenkins/plugins/analysis/core/steps/WarningChecksPublisherITest.java"}, {"oid": "e4f7c7bec9d7ed40299a646d008de313db0141cb", "committedDate": "2023-03-28 15:14:44 +0200", "message": "Remove dot from checks title."}]}, {"oid": "c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/c46e911ae7d76e0f67483ffce4820a3cf5ca57ad", "message": "Review feedback", "committedDate": "2020-12-29T16:48:21Z", "type": "commit"}]}