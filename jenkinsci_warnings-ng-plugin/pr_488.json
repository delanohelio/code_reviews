{"pr_number": 488, "pr_title": "JENKINS-60149: Add UI test for Global Configuration", "pr_author": "astiglme", "pr_createdAt": "2020-05-24T17:29:49Z", "pr_url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488", "timeline": [{"oid": "84e8c26d546049ca42ce1aa0c7908df4c658de52", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/84e8c26d546049ca42ce1aa0c7908df4c658de52", "message": "JENKINS-60149: add source path test for global configuration", "committedDate": "2020-05-24T16:42:21Z", "type": "commit"}, {"oid": "655051830aec40ba8759f95500e12cfd9bab34d3", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/655051830aec40ba8759f95500e12cfd9bab34d3", "message": "JENKINS-60149: refactor code", "committedDate": "2020-05-24T17:13:34Z", "type": "commit"}, {"oid": "7d51c58481fef8d1a6f637f4011bbf9fbb4eb2d1", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/7d51c58481fef8d1a6f637f4011bbf9fbb4eb2d1", "message": "JENKINS-60149: add setter for source directory", "committedDate": "2020-05-27T06:56:07Z", "type": "commit"}, {"oid": "36dece26580d4f2dd69754a7240a43b65f188530", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/36dece26580d4f2dd69754a7240a43b65f188530", "message": "JENKINS-60149: add javadoc", "committedDate": "2020-05-27T07:06:30Z", "type": "commit"}, {"oid": "b641183a2357da4428302541812c94e550c75619", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/b641183a2357da4428302541812c94e550c75619", "message": "JENKINS-60149: add test for groovy script", "committedDate": "2020-05-27T10:33:00Z", "type": "commit"}, {"oid": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "message": "JENKINS-60149: update documentation", "committedDate": "2020-05-27T11:55:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTI3MA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431469270", "body": "JavaDoc f\u00fcr die Klasse", "bodyText": "JavaDoc f\u00fcr die Klasse", "bodyHTML": "<p dir=\"auto\">JavaDoc f\u00fcr die Klasse</p>", "author": "uhafner", "createdAt": "2020-05-27T22:04:40Z", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/GroovyConfiguration.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.net.URL;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+\n+import org.jenkinsci.test.acceptance.po.PageObject;\n+\n+public class GroovyConfiguration extends PageObject {", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTM2NA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431469364", "body": "JavaDoc f\u00fcr die Klasse", "bodyText": "JavaDoc f\u00fcr die Klasse", "bodyHTML": "<p dir=\"auto\">JavaDoc f\u00fcr die Klasse</p>", "author": "uhafner", "createdAt": "2020-05-27T22:04:54Z", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/GlobalWarningsSettings.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import org.openqa.selenium.By;\n+\n+import org.jenkinsci.test.acceptance.po.Jenkins;\n+import org.jenkinsci.test.acceptance.po.JenkinsConfig;\n+\n+public class GlobalWarningsSettings extends JenkinsConfig {", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTUwMQ==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431469501", "body": "```suggestion\r\n     * @param absolutePath sourcedirectory path as absoule path.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param absolutePath: sourcedirectory path as absoule path.\n          \n          \n            \n                 * @param absolutePath sourcedirectory path as absoule path.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> absolutePath<span class=\"pl-k x x-first x-last\">:</span> sourcedirectory path as absoule path.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> absolutePath sourcedirectory path as absoule path.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-05-27T22:05:13Z", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/GlobalWarningsSettings.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import org.openqa.selenium.By;\n+\n+import org.jenkinsci.test.acceptance.po.Jenkins;\n+import org.jenkinsci.test.acceptance.po.JenkinsConfig;\n+\n+public class GlobalWarningsSettings extends JenkinsConfig {\n+\n+    private static final String XPATH_PLUGIN_CONFIG = \"//*[@path='%s']\";\n+\n+    private static final String PATH_PREFIX = \"/io-jenkins-plugins-analysis-\";\n+    private static final String GROOVY_PATH = PATH_PREFIX + \"warnings-groovy-ParserConfiguration/\";\n+    private static final String SOURCE_DIR_PATH = PATH_PREFIX + \"core-model-WarningsPluginConfiguration/\";\n+    private static final String BUTTON_ADD = \"repeatable-add\";\n+    private static final String SOURCE_PATH_FIELD = \"sourceDirectories/path\";\n+    private static final String PARSERS_PREFIX = \"parsers/\";\n+\n+    public GlobalWarningsSettings(final Jenkins jenkins) {\n+        super(jenkins);\n+    }\n+\n+    /**\n+     * Enters the given sourcedirectory path on the system configuration page from jenkins.\n+     * @param absolutePath: sourcedirectory path as absoule path.", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MDMxMw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431470313", "body": "Es w\u00e4re leichter lesbar, wenn die private Methoden jeweils unter den jeweiligen public tests w\u00e4ren und nicht so abwechselnd.", "bodyText": "Es w\u00e4re leichter lesbar, wenn die private Methoden jeweils unter den jeweiligen public tests w\u00e4ren und nicht so abwechselnd.", "bodyHTML": "<p dir=\"auto\">Es w\u00e4re leichter lesbar, wenn die private Methoden jeweils unter den jeweiligen public tests w\u00e4ren und nicht so abwechselnd.</p>", "author": "uhafner", "createdAt": "2020-05-27T22:07:20Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MDc3NQ==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431470775", "body": "W\u00e4re noch sch\u00f6n, wenn man vorher einen Build starten k\u00f6nnte (ohne Globale Konfiguration), so dass das kopieren fehlschl\u00e4gt.", "bodyText": "W\u00e4re noch sch\u00f6n, wenn man vorher einen Build starten k\u00f6nnte (ohne Globale Konfiguration), so dass das kopieren fehlschl\u00e4gt.", "bodyHTML": "<p dir=\"auto\">W\u00e4re noch sch\u00f6n, wenn man vorher einen Build starten k\u00f6nnte (ohne Globale Konfiguration), so dass das kopieren fehlschl\u00e4gt.</p>", "author": "uhafner", "createdAt": "2020-05-27T22:08:33Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MzgzMQ==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431473831", "body": "```suggestion\r\n    public void shouldRunJobWithGroovyConfiguration() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void ShouldRunJobWithGroovyConfiguration() {\n          \n          \n            \n                public void shouldRunJobWithGroovyConfiguration() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">ShouldRunJobWithGroovyConfiguration</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldRunJobWithGroovyConfiguration</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-05-27T22:15:53Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3Mzk5Nw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431473997", "body": "```suggestion\r\n        long normalIssueCount = issuesTable.getTableRows().stream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long NormalIssueCount = issuesTable.getTableRows().stream()\n          \n          \n            \n                    long normalIssueCount = issuesTable.getTableRows().stream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">long</span> <span class=\"pl-smi x x-first x-last\">NormalIssueCount</span> <span class=\"pl-k\">=</span> issuesTable<span class=\"pl-k\">.</span>getTableRows()<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">long</span> <span class=\"x x-first x-last\">normalIssueCount</span> <span class=\"pl-k\">=</span> issuesTable<span class=\"pl-k\">.</span>getTableRows()<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-05-27T22:16:16Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {\n+        initGlobalSettingsForGroovyParser();\n+\n+        FreeStyleJob job = createFreeStyleJob(\"groovy_parser/\" + PEP_FILE);\n+        addGroovyRecorder(job);\n+        job.save();\n+\n+        Build build = buildJob(job);\n+\n+        verifyPep8(build);\n+    }\n+\n+    private void initGlobalSettingsForSourceDirectory(final FreeStyleJob job) {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        String homeDir = settings.getHomeDirectory();\n+        String jobDir = getJobDir(homeDir, job);\n+        settings.enterSourceDirectoryPath(jobDir);\n+        settings.save();\n+    }\n+\n+    private void initGlobalSettingsForGroovyParser() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        GroovyConfiguration groovyConfiguration = settings.openGroovyConfiguration();\n+        groovyConfiguration.enterName(\"Pep8 Groovy Parser\");\n+        groovyConfiguration.enterId(\"pep8-groovy\");\n+        groovyConfiguration.enterRegex(\"(.*):(\\\\d+):(\\\\d+): (\\\\D\\\\d*) (.*)\");\n+        groovyConfiguration.enterScript(\"import edu.hm.hafner.analysis.Severity\\n\"\n+                + \"\\n\"\n+                + \"String message = matcher.group(5)\\n\"\n+                + \"String category = matcher.group(4)\\n\"\n+                + \"Severity severity\\n\"\n+                + \"if (category.contains(\\\"E\\\")) {\\n\"\n+                + \"    severity = Severity.WARNING_NORMAL\\n\"\n+                + \"}else {\\n\"\n+                + \"    severity = Severity.WARNING_LOW\\n\"\n+                + \"}\\n\"\n+                + \"\\n\"\n+                + \"return builder.setFileName(matcher.group(1))\\n\"\n+                + \"    .setLineStart(Integer.parseInt(matcher.group(2)))\\n\"\n+                + \"    .setColumnStart(Integer.parseInt(matcher.group(3)))\\n\"\n+                + \"    .setCategory(category)\\n\"\n+                + \"    .setMessage(message)\\n\"\n+                + \"    .setSeverity(severity)\\n\"\n+                + \"    .buildOptional()\");\n+\n+        groovyConfiguration.enterExampleLogMessage(\"optparse.py:69:11: E401 multiple imports on one line\");\n+\n+        settings.save();\n+    }\n+\n+    private String getHomeDir() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        return settings.getHomeDirectory();\n+    }\n+\n+    private void createFileInWorkspace(final FreeStyleJob job, final String homeDir) throws IOException {\n+        String content = String.format(\"%s/config.xml:451: warning: foo defined but not used%n\",\n+                getJobDir(homeDir, job));\n+\n+        Path workspacePath = Paths.get(homeDir).resolve(\"workspace\");\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+        workspacePath = workspacePath.resolve(job.name);\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+\n+        File newFile = workspacePath.resolve(\"gcc.log\").toFile();\n+        boolean newFile1 = newFile.createNewFile();\n+        if (!newFile1) {\n+            return;\n+        }\n+        FileWriter writer = new FileWriter(newFile);\n+        writer.write(content);\n+        writer.flush();\n+        writer.close();\n+    }\n+\n+    private String getJobDir(final String homeDir, final FreeStyleJob job) {\n+        return homeDir + File.separator + \"jobs\" + File.separator + job.name;\n+    }\n+\n+    private void addGccRecorder(final FreeStyleJob job, final String homeDir) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"GNU C Compiler (gcc)\", gcc -> gcc.setPattern(\"**/gcc.log\"));\n+            recorder.setEnabledForFailure(true);\n+            recorder.setSourceCodeEncoding(\"UTF-8\");\n+            recorder.setSourceDirectory(getJobDir(homeDir, job));\n+        });\n+    }\n+\n+    private void addGroovyRecorder(final FreeStyleJob job) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"Groovy Parser\", gp -> gp.setPattern(\"**/*\" + PEP_FILE));\n+            recorder.setEnabledForFailure(true);\n+            ;\n+        });\n+    }\n+\n+    private void verifyGcc(final Build build) {\n+        build.open();\n+        AnalysisSummary gcc = new AnalysisSummary(build, GCC_ID);\n+        assertThat(gcc).isDisplayed()\n+                .hasTitleText(\"GNU C Compiler (gcc): One warning\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.INFO);\n+\n+        AnalysisResult gccDetails = gcc.openOverallResult();\n+        assertThat(gccDetails).hasActiveTab(Tab.ISSUES)\n+                .hasOnlyAvailableTabs(Tab.ISSUES);\n+\n+        IssuesTableRow row = gccDetails.openIssuesTable().getRowAs(0, IssuesTableRow.class);\n+        assertThat(row.getFileLink()).isNotNull();\n+    }\n+\n+    private void verifyPep8(final Build build) {\n+        build.open();\n+        AnalysisSummary pep8 = new AnalysisSummary(build, PEP8_ID);\n+        assertThat(pep8).isDisplayed()\n+                .hasTitleText(\"Pep8 Groovy Parser: 8 warnings\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.ERROR);\n+\n+        AnalysisResult pep8details = pep8.openOverallResult();\n+        assertThat(pep8details).hasActiveTab(Tab.CATEGORIES)\n+                .hasTotal(8)\n+                .hasOnlyAvailableTabs(Tab.CATEGORIES, Tab.ISSUES);\n+\n+        pep8details.openTab(Tab.ISSUES);\n+        IssuesTable issuesTable = pep8details.openIssuesTable();\n+        assertThat(issuesTable).hasSize(8);\n+\n+        long NormalIssueCount = issuesTable.getTableRows().stream()", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDA1MA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431474050", "body": "```suggestion\r\n        long lowIssueCount = issuesTable.getTableRows().stream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long LowIssueCount = issuesTable.getTableRows().stream()\n          \n          \n            \n                    long lowIssueCount = issuesTable.getTableRows().stream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">long</span> <span class=\"pl-smi x x-first x-last\">LowIssueCount</span> <span class=\"pl-k\">=</span> issuesTable<span class=\"pl-k\">.</span>getTableRows()<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">long</span> <span class=\"x x-first x-last\">lowIssueCount</span> <span class=\"pl-k\">=</span> issuesTable<span class=\"pl-k\">.</span>getTableRows()<span class=\"pl-k\">.</span>stream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-05-27T22:16:27Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {\n+        initGlobalSettingsForGroovyParser();\n+\n+        FreeStyleJob job = createFreeStyleJob(\"groovy_parser/\" + PEP_FILE);\n+        addGroovyRecorder(job);\n+        job.save();\n+\n+        Build build = buildJob(job);\n+\n+        verifyPep8(build);\n+    }\n+\n+    private void initGlobalSettingsForSourceDirectory(final FreeStyleJob job) {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        String homeDir = settings.getHomeDirectory();\n+        String jobDir = getJobDir(homeDir, job);\n+        settings.enterSourceDirectoryPath(jobDir);\n+        settings.save();\n+    }\n+\n+    private void initGlobalSettingsForGroovyParser() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        GroovyConfiguration groovyConfiguration = settings.openGroovyConfiguration();\n+        groovyConfiguration.enterName(\"Pep8 Groovy Parser\");\n+        groovyConfiguration.enterId(\"pep8-groovy\");\n+        groovyConfiguration.enterRegex(\"(.*):(\\\\d+):(\\\\d+): (\\\\D\\\\d*) (.*)\");\n+        groovyConfiguration.enterScript(\"import edu.hm.hafner.analysis.Severity\\n\"\n+                + \"\\n\"\n+                + \"String message = matcher.group(5)\\n\"\n+                + \"String category = matcher.group(4)\\n\"\n+                + \"Severity severity\\n\"\n+                + \"if (category.contains(\\\"E\\\")) {\\n\"\n+                + \"    severity = Severity.WARNING_NORMAL\\n\"\n+                + \"}else {\\n\"\n+                + \"    severity = Severity.WARNING_LOW\\n\"\n+                + \"}\\n\"\n+                + \"\\n\"\n+                + \"return builder.setFileName(matcher.group(1))\\n\"\n+                + \"    .setLineStart(Integer.parseInt(matcher.group(2)))\\n\"\n+                + \"    .setColumnStart(Integer.parseInt(matcher.group(3)))\\n\"\n+                + \"    .setCategory(category)\\n\"\n+                + \"    .setMessage(message)\\n\"\n+                + \"    .setSeverity(severity)\\n\"\n+                + \"    .buildOptional()\");\n+\n+        groovyConfiguration.enterExampleLogMessage(\"optparse.py:69:11: E401 multiple imports on one line\");\n+\n+        settings.save();\n+    }\n+\n+    private String getHomeDir() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        return settings.getHomeDirectory();\n+    }\n+\n+    private void createFileInWorkspace(final FreeStyleJob job, final String homeDir) throws IOException {\n+        String content = String.format(\"%s/config.xml:451: warning: foo defined but not used%n\",\n+                getJobDir(homeDir, job));\n+\n+        Path workspacePath = Paths.get(homeDir).resolve(\"workspace\");\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+        workspacePath = workspacePath.resolve(job.name);\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+\n+        File newFile = workspacePath.resolve(\"gcc.log\").toFile();\n+        boolean newFile1 = newFile.createNewFile();\n+        if (!newFile1) {\n+            return;\n+        }\n+        FileWriter writer = new FileWriter(newFile);\n+        writer.write(content);\n+        writer.flush();\n+        writer.close();\n+    }\n+\n+    private String getJobDir(final String homeDir, final FreeStyleJob job) {\n+        return homeDir + File.separator + \"jobs\" + File.separator + job.name;\n+    }\n+\n+    private void addGccRecorder(final FreeStyleJob job, final String homeDir) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"GNU C Compiler (gcc)\", gcc -> gcc.setPattern(\"**/gcc.log\"));\n+            recorder.setEnabledForFailure(true);\n+            recorder.setSourceCodeEncoding(\"UTF-8\");\n+            recorder.setSourceDirectory(getJobDir(homeDir, job));\n+        });\n+    }\n+\n+    private void addGroovyRecorder(final FreeStyleJob job) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"Groovy Parser\", gp -> gp.setPattern(\"**/*\" + PEP_FILE));\n+            recorder.setEnabledForFailure(true);\n+            ;\n+        });\n+    }\n+\n+    private void verifyGcc(final Build build) {\n+        build.open();\n+        AnalysisSummary gcc = new AnalysisSummary(build, GCC_ID);\n+        assertThat(gcc).isDisplayed()\n+                .hasTitleText(\"GNU C Compiler (gcc): One warning\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.INFO);\n+\n+        AnalysisResult gccDetails = gcc.openOverallResult();\n+        assertThat(gccDetails).hasActiveTab(Tab.ISSUES)\n+                .hasOnlyAvailableTabs(Tab.ISSUES);\n+\n+        IssuesTableRow row = gccDetails.openIssuesTable().getRowAs(0, IssuesTableRow.class);\n+        assertThat(row.getFileLink()).isNotNull();\n+    }\n+\n+    private void verifyPep8(final Build build) {\n+        build.open();\n+        AnalysisSummary pep8 = new AnalysisSummary(build, PEP8_ID);\n+        assertThat(pep8).isDisplayed()\n+                .hasTitleText(\"Pep8 Groovy Parser: 8 warnings\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.ERROR);\n+\n+        AnalysisResult pep8details = pep8.openOverallResult();\n+        assertThat(pep8details).hasActiveTab(Tab.CATEGORIES)\n+                .hasTotal(8)\n+                .hasOnlyAvailableTabs(Tab.CATEGORIES, Tab.ISSUES);\n+\n+        pep8details.openTab(Tab.ISSUES);\n+        IssuesTable issuesTable = pep8details.openIssuesTable();\n+        assertThat(issuesTable).hasSize(8);\n+\n+        long NormalIssueCount = issuesTable.getTableRows().stream()\n+                .map(row -> row.getAs(IssuesTableRow.class).getSeverity())\n+                .filter(severity -> severity.equals(\"Normal\")).count();\n+\n+        long LowIssueCount = issuesTable.getTableRows().stream()", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDEzNQ==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/488#discussion_r431474135", "body": "```suggestion\r\n        assertThat(normalIssueCount).isEqualTo(6);\r\n        assertThat(lowIssueCount).isEqualTo(2);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(NormalIssueCount).isEqualTo(6);\n          \n          \n            \n                    assertThat(LowIssueCount).isEqualTo(2);\n          \n          \n            \n                    assertThat(normalIssueCount).isEqualTo(6);\n          \n          \n            \n                    assertThat(lowIssueCount).isEqualTo(2);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(<span class=\"pl-smi x x-first x-last\">NormalIssueCount</span>)<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-c1\">6</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertThat(<span class=\"pl-smi x x-first x-last\">LowIssueCount</span>)<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-c1\">2</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertThat(<span class=\"x x-first x-last\">normalIssueCount</span>)<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-c1\">6</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertThat(<span class=\"x x-first x-last\">lowIssueCount</span>)<span class=\"pl-k\">.</span>isEqualTo(<span class=\"pl-c1\">2</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "uhafner", "createdAt": "2020-05-27T22:16:40Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/GlobalConfigurationUiTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult.Tab;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary.InfoType;\n+\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+@WithPlugins(\"warnings-ng\")\n+public class GlobalConfigurationUiTest extends AbstractUiTest {\n+\n+    private static final String GCC_ID = \"gcc\";\n+    private static final String PEP8_ID = \"pep8-groovy\";\n+\n+    private static final String PEP_FILE = \"pep8Test.txt\";\n+\n+    /**\n+     * Verifies that a source code file will be copied from outside the workspace and linked in the open issues tab.\n+     */\n+    @Test\n+    public void shouldRunJobWithDifferentSourceCodeDirectory() throws IOException {\n+        String homeDir = getHomeDir();\n+\n+        FreeStyleJob job = createFreeStyleJob();\n+        addGccRecorder(job, homeDir);\n+        job.save();\n+\n+        createFileInWorkspace(job, homeDir);\n+\n+        initGlobalSettingsForSourceDirectory(job);\n+\n+        Build build = buildJob(job);\n+\n+        verifyGcc(build);\n+    }\n+\n+    /**\n+     * Verifies that a custom groovy script is correctly executed.\n+     */\n+    @Test\n+    public void ShouldRunJobWithGroovyConfiguration() {\n+        initGlobalSettingsForGroovyParser();\n+\n+        FreeStyleJob job = createFreeStyleJob(\"groovy_parser/\" + PEP_FILE);\n+        addGroovyRecorder(job);\n+        job.save();\n+\n+        Build build = buildJob(job);\n+\n+        verifyPep8(build);\n+    }\n+\n+    private void initGlobalSettingsForSourceDirectory(final FreeStyleJob job) {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        String homeDir = settings.getHomeDirectory();\n+        String jobDir = getJobDir(homeDir, job);\n+        settings.enterSourceDirectoryPath(jobDir);\n+        settings.save();\n+    }\n+\n+    private void initGlobalSettingsForGroovyParser() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        GroovyConfiguration groovyConfiguration = settings.openGroovyConfiguration();\n+        groovyConfiguration.enterName(\"Pep8 Groovy Parser\");\n+        groovyConfiguration.enterId(\"pep8-groovy\");\n+        groovyConfiguration.enterRegex(\"(.*):(\\\\d+):(\\\\d+): (\\\\D\\\\d*) (.*)\");\n+        groovyConfiguration.enterScript(\"import edu.hm.hafner.analysis.Severity\\n\"\n+                + \"\\n\"\n+                + \"String message = matcher.group(5)\\n\"\n+                + \"String category = matcher.group(4)\\n\"\n+                + \"Severity severity\\n\"\n+                + \"if (category.contains(\\\"E\\\")) {\\n\"\n+                + \"    severity = Severity.WARNING_NORMAL\\n\"\n+                + \"}else {\\n\"\n+                + \"    severity = Severity.WARNING_LOW\\n\"\n+                + \"}\\n\"\n+                + \"\\n\"\n+                + \"return builder.setFileName(matcher.group(1))\\n\"\n+                + \"    .setLineStart(Integer.parseInt(matcher.group(2)))\\n\"\n+                + \"    .setColumnStart(Integer.parseInt(matcher.group(3)))\\n\"\n+                + \"    .setCategory(category)\\n\"\n+                + \"    .setMessage(message)\\n\"\n+                + \"    .setSeverity(severity)\\n\"\n+                + \"    .buildOptional()\");\n+\n+        groovyConfiguration.enterExampleLogMessage(\"optparse.py:69:11: E401 multiple imports on one line\");\n+\n+        settings.save();\n+    }\n+\n+    private String getHomeDir() {\n+        GlobalWarningsSettings settings = new GlobalWarningsSettings(jenkins);\n+        settings.configure();\n+        return settings.getHomeDirectory();\n+    }\n+\n+    private void createFileInWorkspace(final FreeStyleJob job, final String homeDir) throws IOException {\n+        String content = String.format(\"%s/config.xml:451: warning: foo defined but not used%n\",\n+                getJobDir(homeDir, job));\n+\n+        Path workspacePath = Paths.get(homeDir).resolve(\"workspace\");\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+        workspacePath = workspacePath.resolve(job.name);\n+        if (Files.notExists(workspacePath)) {\n+            Files.createDirectory(workspacePath);\n+        }\n+\n+        File newFile = workspacePath.resolve(\"gcc.log\").toFile();\n+        boolean newFile1 = newFile.createNewFile();\n+        if (!newFile1) {\n+            return;\n+        }\n+        FileWriter writer = new FileWriter(newFile);\n+        writer.write(content);\n+        writer.flush();\n+        writer.close();\n+    }\n+\n+    private String getJobDir(final String homeDir, final FreeStyleJob job) {\n+        return homeDir + File.separator + \"jobs\" + File.separator + job.name;\n+    }\n+\n+    private void addGccRecorder(final FreeStyleJob job, final String homeDir) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"GNU C Compiler (gcc)\", gcc -> gcc.setPattern(\"**/gcc.log\"));\n+            recorder.setEnabledForFailure(true);\n+            recorder.setSourceCodeEncoding(\"UTF-8\");\n+            recorder.setSourceDirectory(getJobDir(homeDir, job));\n+        });\n+    }\n+\n+    private void addGroovyRecorder(final FreeStyleJob job) {\n+        job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"Groovy Parser\", gp -> gp.setPattern(\"**/*\" + PEP_FILE));\n+            recorder.setEnabledForFailure(true);\n+            ;\n+        });\n+    }\n+\n+    private void verifyGcc(final Build build) {\n+        build.open();\n+        AnalysisSummary gcc = new AnalysisSummary(build, GCC_ID);\n+        assertThat(gcc).isDisplayed()\n+                .hasTitleText(\"GNU C Compiler (gcc): One warning\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.INFO);\n+\n+        AnalysisResult gccDetails = gcc.openOverallResult();\n+        assertThat(gccDetails).hasActiveTab(Tab.ISSUES)\n+                .hasOnlyAvailableTabs(Tab.ISSUES);\n+\n+        IssuesTableRow row = gccDetails.openIssuesTable().getRowAs(0, IssuesTableRow.class);\n+        assertThat(row.getFileLink()).isNotNull();\n+    }\n+\n+    private void verifyPep8(final Build build) {\n+        build.open();\n+        AnalysisSummary pep8 = new AnalysisSummary(build, PEP8_ID);\n+        assertThat(pep8).isDisplayed()\n+                .hasTitleText(\"Pep8 Groovy Parser: 8 warnings\")\n+                .hasReferenceBuild(0)\n+                .hasInfoType(InfoType.ERROR);\n+\n+        AnalysisResult pep8details = pep8.openOverallResult();\n+        assertThat(pep8details).hasActiveTab(Tab.CATEGORIES)\n+                .hasTotal(8)\n+                .hasOnlyAvailableTabs(Tab.CATEGORIES, Tab.ISSUES);\n+\n+        pep8details.openTab(Tab.ISSUES);\n+        IssuesTable issuesTable = pep8details.openIssuesTable();\n+        assertThat(issuesTable).hasSize(8);\n+\n+        long NormalIssueCount = issuesTable.getTableRows().stream()\n+                .map(row -> row.getAs(IssuesTableRow.class).getSeverity())\n+                .filter(severity -> severity.equals(\"Normal\")).count();\n+\n+        long LowIssueCount = issuesTable.getTableRows().stream()\n+                .map(row -> row.getAs(IssuesTableRow.class).getSeverity())\n+                .filter(severity -> severity.equals(\"Low\")).count();\n+\n+        assertThat(NormalIssueCount).isEqualTo(6);\n+        assertThat(LowIssueCount).isEqualTo(2);", "originalCommit": "5a349d3a5c84a025b295327f4bd58e1a39e1f72a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0802c17e437d293a2f29275077fc75a0b408f90c", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/0802c17e437d293a2f29275077fc75a0b408f90c", "message": "JENKINS-60149: refactor javadoc", "committedDate": "2020-05-28T09:56:08Z", "type": "commit"}, {"oid": "51412961a1c80d222057ead9676bc4a8b9f71495", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/51412961a1c80d222057ead9676bc4a8b9f71495", "message": "JENKINS-60149: move methods and fix checkstyle", "committedDate": "2020-05-28T10:03:18Z", "type": "commit"}, {"oid": "df27f5d5f07eb0f8273afe0241ef58dc4d3e588e", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/df27f5d5f07eb0f8273afe0241ef58dc4d3e588e", "message": "JENKINS-60149: remove unused attributes", "committedDate": "2020-05-28T10:28:30Z", "type": "commit"}, {"oid": "1b793ec9ff71625fd4f0b321d7d7e56c5768781b", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/1b793ec9ff71625fd4f0b321d7d7e56c5768781b", "message": "JENKINS-60149: add check for failed source file copy", "committedDate": "2020-05-28T10:57:48Z", "type": "commit"}]}