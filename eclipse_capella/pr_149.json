{"pr_number": 149, "pr_title": "Search in addon defaut setting implementation bugzilla/558030/search and replace", "pr_author": "minhtutonthat", "pr_createdAt": "2020-03-19T12:25:17Z", "pr_url": "https://github.com/eclipse/capella/pull/149", "timeline": [{"oid": "cdb4d5960980ffe5c4acfe5fc34c0c8911866918", "url": "https://github.com/eclipse/capella/commit/cdb4d5960980ffe5c4acfe5fc34c0c8911866918", "message": "Add the possibility to search in diagram and note. Introduce the\nSearchItem objects to prepare for the extensibility of these elemements.\n\nChange-Id: I77d4b6dc5662a9f4dcd303ca1ba7e0fbc2bd32b1\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-24T15:02:21Z", "type": "commit"}, {"oid": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "url": "https://github.com/eclipse/capella/commit/f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "message": "- Add the possibility to search in add-on items\n- Set default search settings\n\nChange-Id: I68a91430c50f654bd109352422ec45191c9fd06e\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-24T15:02:27Z", "type": "commit"}, {"oid": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "url": "https://github.com/eclipse/capella/commit/f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "message": "- Add the possibility to search in add-on items\n- Set default search settings\n\nChange-Id: I68a91430c50f654bd109352422ec45191c9fd06e\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-24T15:02:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NzIyMw==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397247223", "body": "Even if we only have two elements I think that the best solution for the `contains` and `indexOf` operations is a `Map<String, Integer>` (the key is the category, and the value is the index) instead of a list.\r\n\r\nIn this way the complexity for both `contains` and `indexOf` is `O(1)` and not `O(n)`.\r\n\r\nThis is just a precaution in case the size of the elements increases in the future.", "bodyText": "Even if we only have two elements I think that the best solution for the contains and indexOf operations is a Map<String, Integer> (the key is the category, and the value is the index) instead of a list.\nIn this way the complexity for both contains and indexOf is O(1) and not O(n).\nThis is just a precaution in case the size of the elements increases in the future.", "bodyHTML": "<p dir=\"auto\">Even if we only have two elements I think that the best solution for the <code>contains</code> and <code>indexOf</code> operations is a <code>Map&lt;String, Integer&gt;</code> (the key is the category, and the value is the index) instead of a list.</p>\n<p dir=\"auto\">In this way the complexity for both <code>contains</code> and <code>indexOf</code> is <code>O(1)</code> and not <code>O(n)</code>.</p>\n<p dir=\"auto\">This is just a precaution in case the size of the elements increases in the future.</p>", "author": "sandupostaru", "createdAt": "2020-03-24T15:34:05Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java", "diffHunk": "@@ -133,4 +143,57 @@ public void refreshOtherSideArea() {\n       otherSideArea.filteredTree.getViewer().refresh();\r\n     }\r\n   }\r\n+\r\n+  @Override\r\n+  protected void createContentArea() {\r\n+    super.createContentArea();\r\n+    List<String> fixedCategories = Arrays.asList(CapellaSearchConstants.ModelElements_Key,\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\nindex 90e3e50b5..50de829e6 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n", "chunk": "@@ -147,8 +147,11 @@ public class CapellaLeftSearchForContainerArea extends AbstractCapellaSearchForC\n   @Override\n   protected void createContentArea() {\n     super.createContentArea();\n-    List<String> fixedCategories = Arrays.asList(CapellaSearchConstants.ModelElements_Key,\n-        CapellaSearchConstants.DiagramElements_Key);\n+    // Map of fix categories and their index\n+    Map<String, Integer> fixedCategories = new HashMap<>();\n+    fixedCategories.put(CapellaSearchConstants.ModelElements_Key, 0);\n+    fixedCategories.put(CapellaSearchConstants.DiagramElements_Key, 1);\n+    \n     filteredTree.getViewer().setComparator(new ViewerComparator() {\n       @Override\n       public int compare(Viewer viewer, Object e1, Object e2) {\n", "next_change": {"commit": "549ee884237769b30bbb2fb7b31acaccce6cc050", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\nindex 50de829e6..3a28ff46e 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n", "chunk": "@@ -160,11 +160,13 @@ public class CapellaLeftSearchForContainerArea extends AbstractCapellaSearchForC\n         } else if (e1 instanceof String && e2 instanceof String) {\n           String category1 = (String) e1;\n           String category2 = (String) e2;\n-          if (fixedCategories.containsKey(category1) && fixedCategories.containsKey(category2)) {\n-            return fixedCategories.get(category1) < fixedCategories.get(category2) ? -1 : 1;\n-          } else if (fixedCategories.containsKey(category1)) {\n+          Integer indexOfCategory1 = fixedCategories.get(category1);\n+          Integer indexOfCategory2 = fixedCategories.get(category2);\n+          if (indexOfCategory1 != null && indexOfCategory2 != null) {\n+            return indexOfCategory1 < indexOfCategory2 ? -1 : 1;\n+          } else if (indexOfCategory1 != null) {\n             return -1;\n-          } else if (fixedCategories.containsKey(category2)) {\n+          } else if (indexOfCategory2 != null) {\n             return 1;\n           }\n           return category1.compareTo(category2);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MTY4Mw==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397251683", "body": "Same as above I think that the best solution for the `contains` and `indexOf` operations is a `Map<String, Integer>` (the key is the category, and the value is the index).\r\n\r\nIn this way the complexity for both `contains` and `indexOf` is `O(1)` and not `O(n)`.\r\n\r\nThis is just a precaution in case the size of the elements increases in the future.", "bodyText": "Same as above I think that the best solution for the contains and indexOf operations is a Map<String, Integer> (the key is the category, and the value is the index).\nIn this way the complexity for both contains and indexOf is O(1) and not O(n).\nThis is just a precaution in case the size of the elements increases in the future.", "bodyHTML": "<p dir=\"auto\">Same as above I think that the best solution for the <code>contains</code> and <code>indexOf</code> operations is a <code>Map&lt;String, Integer&gt;</code> (the key is the category, and the value is the index).</p>\n<p dir=\"auto\">In this way the complexity for both <code>contains</code> and <code>indexOf</code> is <code>O(1)</code> and not <code>O(n)</code>.</p>\n<p dir=\"auto\">This is just a precaution in case the size of the elements increases in the future.</p>", "author": "sandupostaru", "createdAt": "2020-03-24T15:39:47Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaRightSearchForContainerArea.java", "diffHunk": "@@ -33,8 +51,59 @@ protected AbstractSearchForContentProvider getSearchForContentProvider() {\n   protected PatternFilter createPatternFilter() {\r\n     return new PatternFilter();\r\n   }\r\n-  \r\n+\r\n   public void updateSearchSettings() {\r\n     searchPage.getCapellaSearchSettings().setSearchAttributeItems(getCheckedElements());\r\n   }\r\n+\r\n+  @Override\r\n+  protected void createContentArea() {\r\n+    super.createContentArea();\r\n+\r\n+    filteredTree.getViewer().setComparator(new ViewerComparator() {\r\n+      @Override\r\n+      public int compare(Viewer viewer, Object e1, Object e2) {\r\n+        if (e1 instanceof SearchForAttributeItem && e2 instanceof SearchForAttributeItem) {\r\n+          SearchForAttributeItem item1 = (SearchForAttributeItem) e1;\r\n+          SearchForAttributeItem item2 = (SearchForAttributeItem) e2;\r\n+          Optional<EAttribute> item1TopAttribute = topAttributes.stream().filter(item1::represent).findAny();\r\n+          Optional<EAttribute> item2TopAttribute = topAttributes.stream().filter(item2::represent).findAny();\r\n+          if (item1TopAttribute.isPresent() && item2TopAttribute.isPresent()) {\r\n+            return topAttributes.indexOf(item1TopAttribute.get()) < topAttributes.indexOf(item2TopAttribute.get()) ? -1\r\n+                : 1;\r\n+          } else if (item1TopAttribute.isPresent()) {\r\n+            return -1;\r\n+          } else if (item2TopAttribute.isPresent()) {\r\n+            return 1;\r\n+          }\r\n+          return ((SearchForItem) e1).getText().compareTo(((SearchForItem) e2).getText());\r\n+        }\r\n+        return 0;\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaRightSearchForContainerArea.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaRightSearchForContainerArea.java\nindex 037abed1d..8a70512cb 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaRightSearchForContainerArea.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaRightSearchForContainerArea.java\n", "chunk": "@@ -66,11 +69,10 @@ public class CapellaRightSearchForContainerArea extends AbstractCapellaSearchFor\n         if (e1 instanceof SearchForAttributeItem && e2 instanceof SearchForAttributeItem) {\n           SearchForAttributeItem item1 = (SearchForAttributeItem) e1;\n           SearchForAttributeItem item2 = (SearchForAttributeItem) e2;\n-          Optional<EAttribute> item1TopAttribute = topAttributes.stream().filter(item1::represent).findAny();\n-          Optional<EAttribute> item2TopAttribute = topAttributes.stream().filter(item2::represent).findAny();\n+          Optional<EAttribute> item1TopAttribute = topAttributes.keySet().stream().filter(item1::represent).findAny();\n+          Optional<EAttribute> item2TopAttribute = topAttributes.keySet().stream().filter(item2::represent).findAny();\n           if (item1TopAttribute.isPresent() && item2TopAttribute.isPresent()) {\n-            return topAttributes.indexOf(item1TopAttribute.get()) < topAttributes.indexOf(item2TopAttribute.get()) ? -1\n-                : 1;\n+            return topAttributes.get(item1TopAttribute.get()) < topAttributes.get(item2TopAttribute.get()) ? -1 : 1;\n           } else if (item1TopAttribute.isPresent()) {\n             return -1;\n           } else if (item2TopAttribute.isPresent()) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1Mjc2NA==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397252764", "body": "`fixedCategories.contains(category1)` becomes `fixedCategories.get(category1) != null`\r\n", "bodyText": "fixedCategories.contains(category1) becomes fixedCategories.get(category1) != null", "bodyHTML": "<p dir=\"auto\"><code>fixedCategories.contains(category1)</code> becomes <code>fixedCategories.get(category1) != null</code></p>", "author": "sandupostaru", "createdAt": "2020-03-24T15:41:11Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java", "diffHunk": "@@ -133,4 +143,57 @@ public void refreshOtherSideArea() {\n       otherSideArea.filteredTree.getViewer().refresh();\r\n     }\r\n   }\r\n+\r\n+  @Override\r\n+  protected void createContentArea() {\r\n+    super.createContentArea();\r\n+    List<String> fixedCategories = Arrays.asList(CapellaSearchConstants.ModelElements_Key,\r\n+        CapellaSearchConstants.DiagramElements_Key);\r\n+    filteredTree.getViewer().setComparator(new ViewerComparator() {\r\n+      @Override\r\n+      public int compare(Viewer viewer, Object e1, Object e2) {\r\n+        if (e1 instanceof SearchForItem && e2 instanceof SearchForItem) {\r\n+          return ((SearchForItem) e1).getText().compareTo(((SearchForItem) e2).getText());\r\n+        } else if (e1 instanceof String && e2 instanceof String) {\r\n+          String category1 = (String) e1;\r\n+          String category2 = (String) e2;\r\n+          if (fixedCategories.contains(category1) && fixedCategories.contains(category2)) {\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\nindex 90e3e50b5..50de829e6 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n", "chunk": "@@ -157,11 +160,11 @@ public class CapellaLeftSearchForContainerArea extends AbstractCapellaSearchForC\n         } else if (e1 instanceof String && e2 instanceof String) {\n           String category1 = (String) e1;\n           String category2 = (String) e2;\n-          if (fixedCategories.contains(category1) && fixedCategories.contains(category2)) {\n-            return fixedCategories.indexOf(category1) < fixedCategories.indexOf(category2) ? -1 : 1;\n-          } else if (fixedCategories.contains(category1)) {\n+          if (fixedCategories.containsKey(category1) && fixedCategories.containsKey(category2)) {\n+            return fixedCategories.get(category1) < fixedCategories.get(category2) ? -1 : 1;\n+          } else if (fixedCategories.containsKey(category1)) {\n             return -1;\n-          } else if (fixedCategories.contains(category2)) {\n+          } else if (fixedCategories.containsKey(category2)) {\n             return 1;\n           }\n           return category1.compareTo(category2);\n", "next_change": {"commit": "549ee884237769b30bbb2fb7b31acaccce6cc050", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\nindex 50de829e6..3a28ff46e 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n", "chunk": "@@ -160,11 +160,13 @@ public class CapellaLeftSearchForContainerArea extends AbstractCapellaSearchForC\n         } else if (e1 instanceof String && e2 instanceof String) {\n           String category1 = (String) e1;\n           String category2 = (String) e2;\n-          if (fixedCategories.containsKey(category1) && fixedCategories.containsKey(category2)) {\n-            return fixedCategories.get(category1) < fixedCategories.get(category2) ? -1 : 1;\n-          } else if (fixedCategories.containsKey(category1)) {\n+          Integer indexOfCategory1 = fixedCategories.get(category1);\n+          Integer indexOfCategory2 = fixedCategories.get(category2);\n+          if (indexOfCategory1 != null && indexOfCategory2 != null) {\n+            return indexOfCategory1 < indexOfCategory2 ? -1 : 1;\n+          } else if (indexOfCategory1 != null) {\n             return -1;\n-          } else if (fixedCategories.containsKey(category2)) {\n+          } else if (indexOfCategory2 != null) {\n             return 1;\n           }\n           return category1.compareTo(category2);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MzE5NQ==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397253195", "body": "`fixedCategories.indexOf(category1)` becomes `fixedCategories.get(category1)`", "bodyText": "fixedCategories.indexOf(category1) becomes fixedCategories.get(category1)", "bodyHTML": "<p dir=\"auto\"><code>fixedCategories.indexOf(category1)</code> becomes <code>fixedCategories.get(category1)</code></p>", "author": "sandupostaru", "createdAt": "2020-03-24T15:41:43Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java", "diffHunk": "@@ -133,4 +143,57 @@ public void refreshOtherSideArea() {\n       otherSideArea.filteredTree.getViewer().refresh();\r\n     }\r\n   }\r\n+\r\n+  @Override\r\n+  protected void createContentArea() {\r\n+    super.createContentArea();\r\n+    List<String> fixedCategories = Arrays.asList(CapellaSearchConstants.ModelElements_Key,\r\n+        CapellaSearchConstants.DiagramElements_Key);\r\n+    filteredTree.getViewer().setComparator(new ViewerComparator() {\r\n+      @Override\r\n+      public int compare(Viewer viewer, Object e1, Object e2) {\r\n+        if (e1 instanceof SearchForItem && e2 instanceof SearchForItem) {\r\n+          return ((SearchForItem) e1).getText().compareTo(((SearchForItem) e2).getText());\r\n+        } else if (e1 instanceof String && e2 instanceof String) {\r\n+          String category1 = (String) e1;\r\n+          String category2 = (String) e2;\r\n+          if (fixedCategories.contains(category1) && fixedCategories.contains(category2)) {\r\n+            return fixedCategories.indexOf(category1) < fixedCategories.indexOf(category2) ? -1 : 1;\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\nindex 90e3e50b5..50de829e6 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n", "chunk": "@@ -157,11 +160,11 @@ public class CapellaLeftSearchForContainerArea extends AbstractCapellaSearchForC\n         } else if (e1 instanceof String && e2 instanceof String) {\n           String category1 = (String) e1;\n           String category2 = (String) e2;\n-          if (fixedCategories.contains(category1) && fixedCategories.contains(category2)) {\n-            return fixedCategories.indexOf(category1) < fixedCategories.indexOf(category2) ? -1 : 1;\n-          } else if (fixedCategories.contains(category1)) {\n+          if (fixedCategories.containsKey(category1) && fixedCategories.containsKey(category2)) {\n+            return fixedCategories.get(category1) < fixedCategories.get(category2) ? -1 : 1;\n+          } else if (fixedCategories.containsKey(category1)) {\n             return -1;\n-          } else if (fixedCategories.contains(category2)) {\n+          } else if (fixedCategories.containsKey(category2)) {\n             return 1;\n           }\n           return category1.compareTo(category2);\n", "next_change": {"commit": "549ee884237769b30bbb2fb7b31acaccce6cc050", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\nindex 50de829e6..3a28ff46e 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java\n", "chunk": "@@ -160,11 +160,13 @@ public class CapellaLeftSearchForContainerArea extends AbstractCapellaSearchForC\n         } else if (e1 instanceof String && e2 instanceof String) {\n           String category1 = (String) e1;\n           String category2 = (String) e2;\n-          if (fixedCategories.containsKey(category1) && fixedCategories.containsKey(category2)) {\n-            return fixedCategories.get(category1) < fixedCategories.get(category2) ? -1 : 1;\n-          } else if (fixedCategories.containsKey(category1)) {\n+          Integer indexOfCategory1 = fixedCategories.get(category1);\n+          Integer indexOfCategory2 = fixedCategories.get(category2);\n+          if (indexOfCategory1 != null && indexOfCategory2 != null) {\n+            return indexOfCategory1 < indexOfCategory2 ? -1 : 1;\n+          } else if (indexOfCategory1 != null) {\n             return -1;\n-          } else if (fixedCategories.containsKey(category2)) {\n+          } else if (indexOfCategory2 != null) {\n             return 1;\n           }\n           return category1.compareTo(category2);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1NzU2NA==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397257564", "body": "The `classID2DiagItemMap` name is kinda deceiving this contains both `SearchForDiagramItem` and `SearchForNoteItem` ... change the name or split the cache into 2? Whichever makes more sense ", "bodyText": "The classID2DiagItemMap name is kinda deceiving this contains both SearchForDiagramItem and SearchForNoteItem ... change the name or split the cache into 2? Whichever makes more sense", "bodyHTML": "<p dir=\"auto\">The <code>classID2DiagItemMap</code> name is kinda deceiving this contains both <code>SearchForDiagramItem</code> and <code>SearchForNoteItem</code> ... change the name or split the cache into 2? Whichever makes more sense</p>", "author": "sandupostaru", "createdAt": "2020-03-24T15:47:05Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java", "diffHunk": "@@ -16,85 +16,110 @@\n import java.util.Map;\r\n import java.util.Optional;\r\n import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n \r\n+import org.eclipse.emf.common.util.URI;\r\n import org.eclipse.emf.ecore.EAttribute;\r\n import org.eclipse.emf.ecore.EClass;\r\n import org.eclipse.emf.ecore.EClassifier;\r\n import org.eclipse.emf.ecore.EDataType;\r\n import org.eclipse.emf.ecore.EPackage;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n import org.eclipse.gmf.runtime.notation.NotationPackage;\r\n import org.eclipse.sirius.viewpoint.ViewpointPackage;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForAttributeItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForClassItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForDiagramItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForNoteItem;\r\n+import org.polarsys.kitalpha.ad.common.utils.URIHelper;\r\n+import org.polarsys.kitalpha.ad.services.manager.ViewpointManager;\r\n+import org.polarsys.kitalpha.ad.viewpoint.coredomain.viewpoint.model.Viewpoint;\r\n \r\n /**\r\n  * \r\n  * Cache of classes and attributes to search for\r\n  */\r\n public class SearchForItemCache {\r\n-\r\n-  private Map<String, SearchForItem> searchForClassItemMap;\r\n-  private Map<String, SearchForItem> searchForDiagItemMap;\r\n-  private Map<String, SearchForAttributeItem> searchForAttributeItemMap;\r\n-  private Set<String> packages;\r\n+  private Map<String, SearchForClassItem> classID2ClassItemMap;\r\n+  private Map<String, SearchForClassItem> classID2DiagItemMap;\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\nindex 2445c7678..dc8f4c7e4 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\n", "chunk": "@@ -36,6 +37,7 @@ import org.polarsys.capella.core.ui.search.searchfor.item.SearchForNoteItem;\n import org.polarsys.kitalpha.ad.common.utils.URIHelper;\n import org.polarsys.kitalpha.ad.services.manager.ViewpointManager;\n import org.polarsys.kitalpha.ad.viewpoint.coredomain.viewpoint.model.Viewpoint;\n+import org.polarsys.kitalpha.resourcereuse.model.Resource;\n \n /**\n  * \n", "next_change": null}, {"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\nindex 2445c7678..dc8f4c7e4 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\n", "chunk": "@@ -43,7 +45,7 @@ import org.polarsys.kitalpha.ad.viewpoint.coredomain.viewpoint.model.Viewpoint;\n  */\n public class SearchForItemCache {\n   private Map<String, SearchForClassItem> classID2ClassItemMap;\n-  private Map<String, SearchForClassItem> classID2DiagItemMap;\n+  private Map<String, SearchForClassItem> classID2DiagCategoryItemMap;\n   private Map<String, SearchForAttributeItem> attributeName2AttributeItemMap;\n   private Set<Viewpoint> viewpoints;\n   private Map<String, Viewpoint> classID2ViewpointMap;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1ODU5Nw==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397258597", "body": "Can you import the `org.polarsys.kitalpha.resourcereuse.model.Resource` class please?", "bodyText": "Can you import the org.polarsys.kitalpha.resourcereuse.model.Resource class please?", "bodyHTML": "<p dir=\"auto\">Can you import the <code>org.polarsys.kitalpha.resourcereuse.model.Resource</code> class please?</p>", "author": "sandupostaru", "createdAt": "2020-03-24T15:48:17Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java", "diffHunk": "@@ -16,85 +16,110 @@\n import java.util.Map;\r\n import java.util.Optional;\r\n import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n \r\n+import org.eclipse.emf.common.util.URI;\r\n import org.eclipse.emf.ecore.EAttribute;\r\n import org.eclipse.emf.ecore.EClass;\r\n import org.eclipse.emf.ecore.EClassifier;\r\n import org.eclipse.emf.ecore.EDataType;\r\n import org.eclipse.emf.ecore.EPackage;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n import org.eclipse.gmf.runtime.notation.NotationPackage;\r\n import org.eclipse.sirius.viewpoint.ViewpointPackage;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForAttributeItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForClassItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForDiagramItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForNoteItem;\r\n+import org.polarsys.kitalpha.ad.common.utils.URIHelper;\r\n+import org.polarsys.kitalpha.ad.services.manager.ViewpointManager;\r\n+import org.polarsys.kitalpha.ad.viewpoint.coredomain.viewpoint.model.Viewpoint;\r\n \r\n /**\r\n  * \r\n  * Cache of classes and attributes to search for\r\n  */\r\n public class SearchForItemCache {\r\n-\r\n-  private Map<String, SearchForItem> searchForClassItemMap;\r\n-  private Map<String, SearchForItem> searchForDiagItemMap;\r\n-  private Map<String, SearchForAttributeItem> searchForAttributeItemMap;\r\n-  private Set<String> packages;\r\n+  private Map<String, SearchForClassItem> classID2ClassItemMap;\r\n+  private Map<String, SearchForClassItem> classID2DiagItemMap;\r\n+  private Map<String, SearchForAttributeItem> attributeName2AttributeItemMap;\r\n+  private Set<Viewpoint> viewpoints;\r\n+  private Map<String, Viewpoint> classID2ViewpointMap;\r\n \r\n   private static SearchForItemCache instance;\r\n \r\n   private SearchForItemCache() {\r\n-    searchForClassItemMap = new HashMap<>();\r\n-    searchForDiagItemMap = new HashMap<>();\r\n-    searchForAttributeItemMap = new HashMap<>();\r\n-    packages = new HashSet<>();\r\n+    classID2ClassItemMap = new HashMap<>();\r\n+    classID2DiagItemMap = new HashMap<>();\r\n+    attributeName2AttributeItemMap = new HashMap<>();\r\n+    viewpoints = new HashSet<>();\r\n+    classID2ViewpointMap = new HashMap<>();\r\n     initModelElements();\r\n     initDiagramElements();\r\n+    initViewpointElements();\r\n+    \r\n+    initAttributes(classID2ClassItemMap);\r\n+    initAttributes(classID2DiagItemMap);\r\n   }\r\n \r\n-  private void initModelElements() {\r\n-    for (String nsURI : EPackage.Registry.INSTANCE.keySet()) {\r\n-      if (nsURI.startsWith(\"http://www.polarsys.org/capella\")) {\r\n-        if (!packages.contains(nsURI)) {\r\n-          packages.add(nsURI);\r\n-          EPackage ePackage = EPackage.Registry.INSTANCE.getEPackage(nsURI);\r\n-          for (EClassifier eClassifier : ePackage.getEClassifiers()) {\r\n+  private void initViewpointElements() {\r\n+    ResourceSet set = new ResourceSetImpl();\r\n+    for (org.polarsys.kitalpha.resourcereuse.model.Resource res : ViewpointManager.getAvailableViewpoints()) {\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\nindex 2445c7678..dc8f4c7e4 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\n", "chunk": "@@ -61,12 +63,12 @@ public class SearchForItemCache {\n     initViewpointElements();\n     \n     initAttributes(classID2ClassItemMap);\n-    initAttributes(classID2DiagItemMap);\n+    initAttributes(classID2DiagCategoryItemMap);\n   }\n \n   private void initViewpointElements() {\n     ResourceSet set = new ResourceSetImpl();\n-    for (org.polarsys.kitalpha.resourcereuse.model.Resource res : ViewpointManager.getAvailableViewpoints()) {\n+    for (Resource res : ViewpointManager.getAvailableViewpoints()) {\n       URI uri = URIHelper.createURI(res);\n       Viewpoint vp = (Viewpoint) set.getEObject(uri, true);\n       viewpoints.add(vp);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3MDg3Mw==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397270873", "body": "Here it is faster to just iterate on the `vpClasses` instead of iterating on all of the `classID2ClassItemMap.keySet()`. And in this way `vpClasses` can just be a simple `List`, no need for a `Set`.\r\n\r\n```java\r\nvpClasses.stream().map(cls -> classID2ClassItemMap.get(cls)).filter(Objects::nonNull).collect(Collectors.toSet())\r\n```", "bodyText": "Here it is faster to just iterate on the vpClasses instead of iterating on all of the classID2ClassItemMap.keySet(). And in this way vpClasses can just be a simple List, no need for a Set.\nvpClasses.stream().map(cls -> classID2ClassItemMap.get(cls)).filter(Objects::nonNull).collect(Collectors.toSet())", "bodyHTML": "<p dir=\"auto\">Here it is faster to just iterate on the <code>vpClasses</code> instead of iterating on all of the <code>classID2ClassItemMap.keySet()</code>. And in this way <code>vpClasses</code> can just be a simple <code>List</code>, no need for a <code>Set</code>.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"vpClasses.stream().map(cls -&gt; classID2ClassItemMap.get(cls)).filter(Objects::nonNull).collect(Collectors.toSet())\"><pre>vpClasses<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>map(cls <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> classID2ClassItemMap<span class=\"pl-k\">.</span>get(cls))<span class=\"pl-k\">.</span>filter(<span class=\"pl-smi\">Objects</span><span class=\"pl-k\">::</span>nonNull)<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toSet())</pre></div>", "author": "sandupostaru", "createdAt": "2020-03-24T16:03:32Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java", "diffHunk": "@@ -109,28 +134,40 @@ public static SearchForItemCache getInstance() {\n     return instance;\r\n   }\r\n \r\n-  public Set<SearchForItem> getSearchForDiagramItems() {\r\n-    return new HashSet<>(searchForDiagItemMap.values());\r\n+  public Set<SearchForItem> getDiagramItems() {\r\n+    return new HashSet<>(classID2DiagItemMap.values());\r\n   }\r\n \r\n-  public Set<SearchForItem> getSearchForClassItems() {\r\n-    return new HashSet<>(searchForClassItemMap.values());\r\n+  public Set<SearchForItem> getClassItems() {\r\n+    return new HashSet<>(classID2ClassItemMap.values());\r\n   }\r\n \r\n-  public Set<SearchForItem> getSearchForAttributeItems() {\r\n-    return new HashSet<>(searchForAttributeItemMap.values());\r\n+  public Set<SearchForItem> getCapellaClassItems() {\r\n+    return classID2ClassItemMap.values().stream().filter(item -> !classID2ViewpointMap.containsKey(item.getUniqueID()))\r\n+        .collect(Collectors.toSet());\r\n+  }\r\n+\r\n+  public Set<SearchForItem> getAttributeItems() {\r\n+    return new HashSet<>(attributeName2AttributeItemMap.values());\r\n+  }\r\n+\r\n+  public Set<SearchForItem> getAddonItems(Viewpoint vp) {\r\n+    Set<String> vpClasses = classID2ViewpointMap.keySet().stream().filter(cls -> classID2ViewpointMap.get(cls) == vp)\r\n+        .collect(Collectors.toSet());\r\n+    return classID2ClassItemMap.keySet().stream().filter(vpClasses::contains)\r\n+        .map(cls -> classID2ClassItemMap.get(cls)).collect(Collectors.toSet());\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "changed_code": [{"header": "diff --git a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\nindex 2445c7678..dc8f4c7e4 100644\n--- a/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\n+++ b/core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java\n", "chunk": "@@ -154,14 +156,15 @@ public class SearchForItemCache {\n   public Set<SearchForItem> getAddonItems(Viewpoint vp) {\n     Set<String> vpClasses = classID2ViewpointMap.keySet().stream().filter(cls -> classID2ViewpointMap.get(cls) == vp)\n         .collect(Collectors.toSet());\n-    return classID2ClassItemMap.keySet().stream().filter(vpClasses::contains)\n-        .map(cls -> classID2ClassItemMap.get(cls)).collect(Collectors.toSet());\n+\n+    return vpClasses.stream().map(cls -> classID2ClassItemMap.get(cls)).filter(Objects::nonNull)\n+        .collect(Collectors.toSet());\n   }\n \n   public Object getClassItem(String name) {\n     Object eCls = classID2ClassItemMap.get(name);\n     if (eCls == null) {\n-      eCls = classID2DiagItemMap.get(name);\n+      eCls = classID2DiagCategoryItemMap.get(name);\n     }\n     return eCls;\n   }\n", "next_change": null}]}}, {"oid": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "url": "https://github.com/eclipse/capella/commit/269a57eb7bccd6bad34863e159b126e9f239f1ac", "message": "Take into account review remarks\n\nChange-Id: If94e5108a16a7ea606916bea60af2e4f3f4b0cdb\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-25T08:43:37Z", "type": "commit"}, {"oid": "549ee884237769b30bbb2fb7b31acaccce6cc050", "url": "https://github.com/eclipse/capella/commit/549ee884237769b30bbb2fb7b31acaccce6cc050", "message": "Take into account review remarks\n\nChange-Id: Iabbd0cf1717cae5cc17ee9b8b33dae32c830b423\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-25T09:09:06Z", "type": "commit"}]}