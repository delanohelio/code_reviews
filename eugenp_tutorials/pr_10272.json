{"pr_number": 10272, "pr_title": "BAEL-4721", "pr_author": "amdegregorio", "pr_createdAt": "2020-11-22T15:22:09Z", "pr_url": "https://github.com/eugenp/tutorials/pull/10272", "timeline": [{"oid": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6", "url": "https://github.com/eugenp/tutorials/commit/a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6", "message": "BAEL-4721 Examples", "committedDate": "2020-11-22T15:20:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxMTA0MA==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r528911040", "body": "As the test throws `IOException` we don't need this catch block.. Similarly, if it just does `throw ioe` then it's a redundant `catch` anyway", "bodyText": "As the test throws IOException we don't need this catch block.. Similarly, if it just does throw ioe then it's a redundant catch anyway", "bodyHTML": "<p dir=\"auto\">As the test throws <code>IOException</code> we don't need this catch block.. Similarly, if it just does <code>throw ioe</code> then it's a redundant <code>catch</code> anyway</p>", "author": "ashleyfrieze", "createdAt": "2020-11-23T18:27:34Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        try (FileOutputStream outputStream = new FileOutputStream(\"src/test/resources/example-fos.jpg\")) {\n+            outputStream.write(dataForWriting);\n+            assertThat(new File(\"src/test/resources/example-fos.jpg\")).hasBinaryContent(dataForWriting);\n+        } catch (IOException ioe) {", "originalCommit": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjcyNw==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r528916727", "body": "I think writing to `src/test/resources` is risky. This can be solved by using \r\n\r\n```java\r\n@Rule\r\npublic TemporaryFolder tempFolder = new TemporaryFolder();\r\n\r\n@Test\r\npublic void someTest() {\r\n    File outputFile = tempFolder.newFile(\"filename.jpg\");\r\n}\r\n```\r\n\r\nThen we don't need the `@AfterClass` as the rule clears up the files. We probably don't need to mention the use of the rule in the snippets in the article either.", "bodyText": "I think writing to src/test/resources is risky. This can be solved by using\n@Rule\npublic TemporaryFolder tempFolder = new TemporaryFolder();\n\n@Test\npublic void someTest() {\n    File outputFile = tempFolder.newFile(\"filename.jpg\");\n}\nThen we don't need the @AfterClass as the rule clears up the files. We probably don't need to mention the use of the rule in the snippets in the article either.", "bodyHTML": "<p dir=\"auto\">I think writing to <code>src/test/resources</code> is risky. This can be solved by using</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Rule\npublic TemporaryFolder tempFolder = new TemporaryFolder();\n\n@Test\npublic void someTest() {\n    File outputFile = tempFolder.newFile(&quot;filename.jpg&quot;);\n}\"><pre><span class=\"pl-k\">@Rule</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">TemporaryFolder</span> tempFolder <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TemporaryFolder</span>();\n\n<span class=\"pl-k\">@Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> someTest() {\n    <span class=\"pl-smi\">File</span> outputFile <span class=\"pl-k\">=</span> tempFolder<span class=\"pl-k\">.</span>newFile(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filename.jpg<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>\n<p dir=\"auto\">Then we don't need the <code>@AfterClass</code> as the rule clears up the files. We probably don't need to mention the use of the rule in the snippets in the article either.</p>", "author": "ashleyfrieze", "createdAt": "2020-11-23T18:37:59Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        try (FileOutputStream outputStream = new FileOutputStream(\"src/test/resources/example-fos.jpg\")) {\n+            outputStream.write(dataForWriting);\n+            assertThat(new File(\"src/test/resources/example-fos.jpg\")).hasBinaryContent(dataForWriting);\n+        } catch (IOException ioe) {\n+            throw ioe;\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        // Takes Optional OpenOptions, if not present defaults to CREATE, TRUNCATE_EXISTING (will truncate an existing file to size of 0), and WRITE\n+        // https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#write-java.nio.file.Path-byte:A-java.nio.file.OpenOption...-\n+        Files.write(Paths.get(\"src/test/resources/example-nio-files.jpg\"), dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-nio-files.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+        com.google.common.io.Files.write(dataForWriting, new File(\"src/test/resources/example-guava-files.jpg\"));\n+        assertThat(new File(\"src/test/resources/example-guava-files.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+        // Also discuss - https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/io/MoreFiles.html\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(new File(\"src/test/resources/example-guava-bs.jpg\"));\n+        byteSink.write(dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-guava-bs.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+        ByteSink byteSink = MoreFiles.asByteSink(Paths.get(\"src/test/resources/example-guava-bs-mf.jpg\"), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-guava-bs-mf.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n+        // http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html#writeByteArrayToFile%28java.io.File,%20byte%5B%5D%29\n+        FileUtils.writeByteArrayToFile(new File(\"src/test/resources/example-file-utils.jpg\"), dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-file-utils.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() throws IOException {\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-fos.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-nio-files.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-files.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-bs.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-bs-mf.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-file-utils.jpg\"));", "originalCommit": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA4NzkwMQ==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532087901", "bodyText": "Wow - that's a really nice feature of JUnit! It definitely makes the example cleaner.", "author": "amdegregorio", "createdAt": "2020-11-28T17:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjcyNw=="}], "type": "inlineReview"}, {"oid": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "url": "https://github.com/eugenp/tutorials/commit/83930cad49d1cd343aa1ced8754c76a1fa575a02", "message": "BAEL-4721 Requested edits", "committedDate": "2020-11-28T17:46:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjE5MQ==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276191", "body": "Indentation is a bit odd here.", "bodyText": "Indentation is a bit odd here.", "bodyHTML": "<p dir=\"auto\">Indentation is a bit odd here.</p>", "author": "ashleyfrieze", "createdAt": "2020-11-29T22:11:27Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {", "originalCommit": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjIxOQ==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276219", "body": "Indentation", "bodyText": "Indentation", "bodyHTML": "<p dir=\"auto\">Indentation</p>", "author": "ashleyfrieze", "createdAt": "2020-11-29T22:11:39Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile =  tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-files.jpg\");", "originalCommit": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjI3NQ==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276275", "body": "Indentation too - I think you may have a mix of tabs and spaces here.", "bodyText": "Indentation too - I think you may have a mix of tabs and spaces here.", "bodyHTML": "<p dir=\"auto\">Indentation too - I think you may have a mix of tabs and spaces here.</p>", "author": "ashleyfrieze", "createdAt": "2020-11-29T22:12:03Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile =  tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-files.jpg\");\n+        com.google.common.io.Files.write(dataForWriting, outputFile);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(outputFile);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = MoreFiles.asByteSink(outputFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-file-utils.jpg\");", "originalCommit": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "30b11918adc6ecced08877bd5fa5aca8b7b7246b", "url": "https://github.com/eugenp/tutorials/commit/30b11918adc6ecced08877bd5fa5aca8b7b7246b", "message": "Fix formatting issues", "committedDate": "2020-12-01T00:52:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwODAwMw==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r536908003", "body": "```suggestion\r\n    public void whenUsingCommonsIo_thenByteArrayIsWritten() throws IOException {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n          \n          \n            \n                public void whenUsingCommonsIo_thenByteArrayIsWritten() throws IOException {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">whenUserCommonsIo_thenByteArrayIsWritten</span>() throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">whenUsingCommonsIo_thenByteArrayIsWritten</span>() throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "KevinGilmore", "createdAt": "2020-12-05T22:51:00Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-files.jpg\");\n+        com.google.common.io.Files.write(dataForWriting, outputFile);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(outputFile);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = MoreFiles.asByteSink(outputFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {", "originalCommit": "30b11918adc6ecced08877bd5fa5aca8b7b7246b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "892bd6d97061b417c779bc33f246dc88e6efa992", "url": "https://github.com/eugenp/tutorials/commit/892bd6d97061b417c779bc33f246dc88e6efa992", "message": "Correct unit test name", "committedDate": "2020-12-06T12:54:05Z", "type": "commit"}]}