{"pr_number": 7495, "pr_title": "IGNITE-12745: Compute job view implemented.", "pr_author": "nizhikov", "pr_createdAt": "2020-03-03T17:43:18Z", "pr_url": "https://github.com/apache/ignite/pull/7495", "merge_commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "timeline": [{"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973", "url": "https://github.com/apache/ignite/commit/b87ec0043638f0f96c9cbcafef48938a417c5973", "message": "IGNITE-12745: Compute job view implemented.", "committedDate": "2020-03-03T17:42:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2ODg1NA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387568854", "body": "I think it should be described what -1 is means.", "bodyText": "I think it should be described what -1 is means.", "bodyHTML": "<p dir=\"auto\">I think it should be described what -1 is means.</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:15:11Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysCancelled() {\n+        return job.isSystemCanceled();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysStopping() {\n+        return job.isSysStopping();\n+    }\n+\n+    /** @return {@code True} if job started. */\n+    public boolean isStarted() {\n+        return job.isStarted();\n+    }\n+\n+    /** @return Executor name. */\n+    public String executorName() {\n+        return job.executorName();\n+    }\n+\n+    /** @return Job class name. */\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Task name. */\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Affinity cache ids. */\n+    public String affinityCacheIds() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return null;\n+\n+        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n+\n+        if (ids == null || ids.length == 0)\n+            return null;\n+\n+        StringJoiner joiner = new StringJoiner(\",\");\n+\n+        for (int id : ids)\n+            joiner.add(Integer.toString(id));\n+\n+        return joiner.toString();\n+    }\n+\n+    /** @return Affinity partition id. */", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ade52ee82754aca4aa5a8eb084f13d6e27633f80", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..948d84a9ba 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -97,44 +157,4 @@ public class ComputeJobView {\n     public String executorName() {\n         return job.executorName();\n     }\n-\n-    /** @return Job class name. */\n-    public String taskClassName() {\n-        return job.getSession().getTaskClassName();\n-    }\n-\n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n-    public String affinityCacheIds() {\n-        GridReservable res = job.getPartsReservation();\n-\n-        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n-            return null;\n-\n-        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n-\n-        if (ids == null || ids.length == 0)\n-            return null;\n-\n-        StringJoiner joiner = new StringJoiner(\",\");\n-\n-        for (int id : ids)\n-            joiner.add(Integer.toString(id));\n-\n-        return joiner.toString();\n-    }\n-\n-    /** @return Affinity partition id. */\n-    public int affinityPartitionId() {\n-        GridReservable res = job.getPartsReservation();\n-\n-        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n-            return -1;\n-\n-        return ((GridJobProcessor.PartitionsReservation)res).getPartId();\n-    }\n }\n", "next_change": {"commit": "ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 948d84a9ba..8212ce5283 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -157,4 +188,9 @@ public class ComputeJobView {\n     public String executorName() {\n         return job.executorName();\n     }\n+\n+    /** @return Job state. */\n+    public ComputeJobState state() {\n+        return state;\n+    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -128,7 +136,8 @@ public class ComputeJobView {\n         return joiner.toString();\n     }\n \n-    /** @return Affinity partition id. */\n+    /** @return Affinity partition id or {@code -1} for non affinity call. */\n+    @Order(6)\n     public int affinityPartitionId() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2OTk5OA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387569998", "body": "I suggest to mark `nullable` and update javadoc.", "bodyText": "I suggest to mark nullable and update javadoc.", "bodyHTML": "<p dir=\"auto\">I suggest to mark <code>nullable</code> and update javadoc.</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:17:13Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysCancelled() {\n+        return job.isSystemCanceled();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysStopping() {\n+        return job.isSysStopping();\n+    }\n+\n+    /** @return {@code True} if job started. */\n+    public boolean isStarted() {\n+        return job.isStarted();\n+    }\n+\n+    /** @return Executor name. */\n+    public String executorName() {\n+        return job.executorName();\n+    }\n+\n+    /** @return Job class name. */\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Task name. */\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Affinity cache ids. */", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ade52ee82754aca4aa5a8eb084f13d6e27633f80", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..948d84a9ba 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -97,44 +157,4 @@ public class ComputeJobView {\n     public String executorName() {\n         return job.executorName();\n     }\n-\n-    /** @return Job class name. */\n-    public String taskClassName() {\n-        return job.getSession().getTaskClassName();\n-    }\n-\n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n-    public String affinityCacheIds() {\n-        GridReservable res = job.getPartsReservation();\n-\n-        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n-            return null;\n-\n-        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n-\n-        if (ids == null || ids.length == 0)\n-            return null;\n-\n-        StringJoiner joiner = new StringJoiner(\",\");\n-\n-        for (int id : ids)\n-            joiner.add(Integer.toString(id));\n-\n-        return joiner.toString();\n-    }\n-\n-    /** @return Affinity partition id. */\n-    public int affinityPartitionId() {\n-        GridReservable res = job.getPartsReservation();\n-\n-        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n-            return -1;\n-\n-        return ((GridJobProcessor.PartitionsReservation)res).getPartId();\n-    }\n }\n", "next_change": {"commit": "ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 948d84a9ba..8212ce5283 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -157,4 +188,9 @@ public class ComputeJobView {\n     public String executorName() {\n         return job.executorName();\n     }\n+\n+    /** @return Job state. */\n+    public ComputeJobState state() {\n+        return state;\n+    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -19,96 +19,104 @@ package org.apache.ignite.spi.systemview.view;\n \n import java.util.StringJoiner;\n import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n import org.apache.ignite.internal.processors.job.GridJobProcessor;\n import org.apache.ignite.internal.processors.job.GridJobWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute job representation for a {@link SystemView}.\n  */\n public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n     /** Job. */\n     private final GridJobWorker job;\n \n+    /** Job id. */\n+    private final IgniteUuid id;\n+\n+    /** Job state. */\n+    private final ComputeJobState state;\n+\n     /**\n+     * @param id Job id.\n      * @param job Job.\n+     * @param state Job state.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n         this.job = job;\n+        this.state = state;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n     }\n \n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n-    }\n-\n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MDg3NA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387570874", "body": "Job or Task class name is correct?", "bodyText": "Job or Task class name is correct?", "bodyHTML": "<p dir=\"auto\">Job or Task class name is correct?</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:18:47Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysCancelled() {\n+        return job.isSystemCanceled();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysStopping() {\n+        return job.isSysStopping();\n+    }\n+\n+    /** @return {@code True} if job started. */\n+    public boolean isStarted() {\n+        return job.isStarted();\n+    }\n+\n+    /** @return Executor name. */\n+    public String executorName() {\n+        return job.executorName();\n+    }\n+\n+    /** @return Job class name. */", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5Nzk2Ng==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387697966", "bodyText": "They both are correct. I think we should use taskName and taskClassName to highlight to the user that these columns are the same as in TASKS view.", "author": "nizhikov", "createdAt": "2020-03-04T14:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MDg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ade52ee82754aca4aa5a8eb084f13d6e27633f80", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..948d84a9ba 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -97,44 +157,4 @@ public class ComputeJobView {\n     public String executorName() {\n         return job.executorName();\n     }\n-\n-    /** @return Job class name. */\n-    public String taskClassName() {\n-        return job.getSession().getTaskClassName();\n-    }\n-\n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n-    public String affinityCacheIds() {\n-        GridReservable res = job.getPartsReservation();\n-\n-        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n-            return null;\n-\n-        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n-\n-        if (ids == null || ids.length == 0)\n-            return null;\n-\n-        StringJoiner joiner = new StringJoiner(\",\");\n-\n-        for (int id : ids)\n-            joiner.add(Integer.toString(id));\n-\n-        return joiner.toString();\n-    }\n-\n-    /** @return Affinity partition id. */\n-    public int affinityPartitionId() {\n-        GridReservable res = job.getPartsReservation();\n-\n-        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n-            return -1;\n-\n-        return ((GridJobProcessor.PartitionsReservation)res).getPartId();\n-    }\n }\n", "next_change": {"commit": "ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 948d84a9ba..8212ce5283 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -157,4 +188,9 @@ public class ComputeJobView {\n     public String executorName() {\n         return job.executorName();\n     }\n+\n+    /** @return Job state. */\n+    public ComputeJobState state() {\n+        return state;\n+    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -19,96 +19,104 @@ package org.apache.ignite.spi.systemview.view;\n \n import java.util.StringJoiner;\n import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n import org.apache.ignite.internal.processors.job.GridJobProcessor;\n import org.apache.ignite.internal.processors.job.GridJobWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute job representation for a {@link SystemView}.\n  */\n public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n     /** Job. */\n     private final GridJobWorker job;\n \n+    /** Job id. */\n+    private final IgniteUuid id;\n+\n+    /** Job state. */\n+    private final ComputeJobState state;\n+\n     /**\n+     * @param id Job id.\n      * @param job Job.\n+     * @param state Job state.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n         this.job = job;\n+        this.state = state;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n     }\n \n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n-    }\n-\n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MTU2OA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387571568", "body": "Please, add meaningful description instead ???.", "bodyText": "Please, add meaningful description instead ???.", "bodyHTML": "<p dir=\"auto\">Please, add meaningful description instead ???.</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:20:04Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0d72ac00baa20bd2ee5846015d5d7299bf13bea", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..7982284050 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -29,86 +30,58 @@ import org.apache.ignite.lang.IgniteUuid;\n  */\n public class ComputeJobView {\n     /** Job. */\n-    private final GridJobWorker job;\n+    public final GridJobWorker job;\n+\n+    /** Job id. */\n+    public final IgniteUuid id;\n \n     /**\n+     * @param id Job id.\n      * @param job Job.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n         this.job = job;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n-    }\n-\n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n+        return id;\n     }\n \n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @see ComputeTaskView#sessionId()\n+     * @return Session id.\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": {"commit": "450762c485a63b3efa081328c73c36aebc816d4e", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 7982284050..e1de273aa8 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -80,7 +80,7 @@ public class ComputeJobView {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n     @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -19,96 +19,104 @@ package org.apache.ignite.spi.systemview.view;\n \n import java.util.StringJoiner;\n import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n import org.apache.ignite.internal.processors.job.GridJobProcessor;\n import org.apache.ignite.internal.processors.job.GridJobWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute job representation for a {@link SystemView}.\n  */\n public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n     /** Job. */\n     private final GridJobWorker job;\n \n+    /** Job id. */\n+    private final IgniteUuid id;\n+\n+    /** Job state. */\n+    private final ComputeJobState state;\n+\n     /**\n+     * @param id Job id.\n      * @param job Job.\n+     * @param state Job state.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n         this.job = job;\n+        this.state = state;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n     }\n \n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n-    }\n-\n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MTYxOA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387571618", "body": "Please, add meaningful description instead ???.", "bodyText": "Please, add meaningful description instead ???.", "bodyHTML": "<p dir=\"auto\">Please, add meaningful description instead ???.</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:20:09Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysCancelled() {\n+        return job.isSystemCanceled();\n+    }\n+\n+    /** @return {@code True} if ???. */", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0d72ac00baa20bd2ee5846015d5d7299bf13bea", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..7982284050 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -29,86 +30,58 @@ import org.apache.ignite.lang.IgniteUuid;\n  */\n public class ComputeJobView {\n     /** Job. */\n-    private final GridJobWorker job;\n+    public final GridJobWorker job;\n+\n+    /** Job id. */\n+    public final IgniteUuid id;\n \n     /**\n+     * @param id Job id.\n      * @param job Job.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n         this.job = job;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n-    }\n-\n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n+        return id;\n     }\n \n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @see ComputeTaskView#sessionId()\n+     * @return Session id.\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": {"commit": "450762c485a63b3efa081328c73c36aebc816d4e", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 7982284050..e1de273aa8 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -80,7 +80,7 @@ public class ComputeJobView {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n     @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -19,96 +19,104 @@ package org.apache.ignite.spi.systemview.view;\n \n import java.util.StringJoiner;\n import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n import org.apache.ignite.internal.processors.job.GridJobProcessor;\n import org.apache.ignite.internal.processors.job.GridJobWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute job representation for a {@link SystemView}.\n  */\n public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n     /** Job. */\n     private final GridJobWorker job;\n \n+    /** Job id. */\n+    private final IgniteUuid id;\n+\n+    /** Job state. */\n+    private final ComputeJobState state;\n+\n     /**\n+     * @param id Job id.\n      * @param job Job.\n+     * @param state Job state.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n         this.job = job;\n+        this.state = state;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n     }\n \n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n-    }\n-\n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NTMzNA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387575334", "body": "Job id", "bodyText": "Job id", "bodyHTML": "<p dir=\"auto\">Job id</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:26:26Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ade52ee82754aca4aa5a8eb084f13d6e27633f80", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..948d84a9ba 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -29,40 +30,99 @@ import org.apache.ignite.lang.IgniteUuid;\n  */\n public class ComputeJobView {\n     /** Job. */\n-    private final GridJobWorker job;\n+    public final GridJobWorker job;\n+\n+    /** Job id */\n+    public final IgniteUuid id;\n \n     /**\n+     * @param id Job id.\n      * @param job Job.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n         this.job = job;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n+    }\n+\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n+    }\n+\n+    /** @return Origin node id. */\n+    @Order(2)\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Task class name. */\n+    @Order(4)\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    @Order(5)\n+    public String affinityCacheIds() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return null;\n+\n+        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n+\n+        if (ids == null || ids.length == 0)\n+            return null;\n+\n+        StringJoiner joiner = new StringJoiner(\",\");\n+\n+        for (int id : ids)\n+            joiner.add(Integer.toString(id));\n+\n+        return joiner.toString();\n     }\n \n-    /** @return Create time. */\n+    /** @return Affinity partition id or {@code -1} for non affinity call. */\n+    @Order(6)\n+    public int affinityPartitionId() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return -1;\n+\n+        return ((GridJobProcessor.PartitionsReservation)res).getPartId();\n+    }\n+\n+    /** @return Create time in milliseconds. */\n+    @Order(7)\n     public long createTime() {\n         return job.getCreateTime();\n     }\n \n-    /** @return Start time. */\n+    /** @return Start time in milliseconds. */\n+    @Order(8)\n     public long startTime() {\n         return job.getStartTime();\n     }\n \n-    /** @return Finish time. */\n-    public long fininshTime() {\n+    /** @return Finish time in milliseconds. */\n+    @Order(9)\n+    public long finishTime() {\n         return job.getFinishTime();\n     }\n \n-    /** @return Origin node id. */\n-    public UUID originNodeId() {\n-        return job.getTaskNode().id();\n-    }\n-\n     /** @return {@code True} if job is internal. */\n     public boolean isInternal() {\n         return job.isInternal();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -19,96 +19,104 @@ package org.apache.ignite.spi.systemview.view;\n \n import java.util.StringJoiner;\n import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n import org.apache.ignite.internal.processors.job.GridJobProcessor;\n import org.apache.ignite.internal.processors.job.GridJobWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute job representation for a {@link SystemView}.\n  */\n public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n     /** Job. */\n     private final GridJobWorker job;\n \n+    /** Job id. */\n+    private final IgniteUuid id;\n+\n+    /** Job state. */\n+    private final ComputeJobState state;\n+\n     /**\n+     * @param id Job id.\n      * @param job Job.\n+     * @param state Job state.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n         this.job = job;\n+        this.state = state;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n     }\n \n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n-    }\n-\n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MDgxMQ==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387580811", "body": "in milliseconds?", "bodyText": "in milliseconds?", "bodyHTML": "<p dir=\"auto\">in milliseconds?</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:36:25Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ade52ee82754aca4aa5a8eb084f13d6e27633f80", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..948d84a9ba 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -29,40 +30,99 @@ import org.apache.ignite.lang.IgniteUuid;\n  */\n public class ComputeJobView {\n     /** Job. */\n-    private final GridJobWorker job;\n+    public final GridJobWorker job;\n+\n+    /** Job id */\n+    public final IgniteUuid id;\n \n     /**\n+     * @param id Job id.\n      * @param job Job.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n         this.job = job;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n+    }\n+\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n+    }\n+\n+    /** @return Origin node id. */\n+    @Order(2)\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Task class name. */\n+    @Order(4)\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    @Order(5)\n+    public String affinityCacheIds() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return null;\n+\n+        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n+\n+        if (ids == null || ids.length == 0)\n+            return null;\n+\n+        StringJoiner joiner = new StringJoiner(\",\");\n+\n+        for (int id : ids)\n+            joiner.add(Integer.toString(id));\n+\n+        return joiner.toString();\n     }\n \n-    /** @return Create time. */\n+    /** @return Affinity partition id or {@code -1} for non affinity call. */\n+    @Order(6)\n+    public int affinityPartitionId() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return -1;\n+\n+        return ((GridJobProcessor.PartitionsReservation)res).getPartId();\n+    }\n+\n+    /** @return Create time in milliseconds. */\n+    @Order(7)\n     public long createTime() {\n         return job.getCreateTime();\n     }\n \n-    /** @return Start time. */\n+    /** @return Start time in milliseconds. */\n+    @Order(8)\n     public long startTime() {\n         return job.getStartTime();\n     }\n \n-    /** @return Finish time. */\n-    public long fininshTime() {\n+    /** @return Finish time in milliseconds. */\n+    @Order(9)\n+    public long finishTime() {\n         return job.getFinishTime();\n     }\n \n-    /** @return Origin node id. */\n-    public UUID originNodeId() {\n-        return job.getTaskNode().id();\n-    }\n-\n     /** @return {@code True} if job is internal. */\n     public boolean isInternal() {\n         return job.isInternal();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -19,96 +19,104 @@ package org.apache.ignite.spi.systemview.view;\n \n import java.util.StringJoiner;\n import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n import org.apache.ignite.internal.processors.job.GridJobProcessor;\n import org.apache.ignite.internal.processors.job.GridJobWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute job representation for a {@link SystemView}.\n  */\n public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n     /** Job. */\n     private final GridJobWorker job;\n \n+    /** Job id. */\n+    private final IgniteUuid id;\n+\n+    /** Job state. */\n+    private final ComputeJobState state;\n+\n     /**\n+     * @param id Job id.\n      * @param job Job.\n+     * @param state Job state.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n         this.job = job;\n+        this.state = state;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n     }\n \n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n-    }\n-\n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MTQwMg==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387581402", "body": "typo `finishTime`", "bodyText": "typo finishTime", "bodyHTML": "<p dir=\"auto\">typo <code>finishTime</code></p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:37:29Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ade52ee82754aca4aa5a8eb084f13d6e27633f80", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..948d84a9ba 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -29,40 +30,99 @@ import org.apache.ignite.lang.IgniteUuid;\n  */\n public class ComputeJobView {\n     /** Job. */\n-    private final GridJobWorker job;\n+    public final GridJobWorker job;\n+\n+    /** Job id */\n+    public final IgniteUuid id;\n \n     /**\n+     * @param id Job id.\n      * @param job Job.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n         this.job = job;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n+    }\n+\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n+    }\n+\n+    /** @return Origin node id. */\n+    @Order(2)\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Task class name. */\n+    @Order(4)\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    @Order(5)\n+    public String affinityCacheIds() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return null;\n+\n+        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n+\n+        if (ids == null || ids.length == 0)\n+            return null;\n+\n+        StringJoiner joiner = new StringJoiner(\",\");\n+\n+        for (int id : ids)\n+            joiner.add(Integer.toString(id));\n+\n+        return joiner.toString();\n     }\n \n-    /** @return Create time. */\n+    /** @return Affinity partition id or {@code -1} for non affinity call. */\n+    @Order(6)\n+    public int affinityPartitionId() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return -1;\n+\n+        return ((GridJobProcessor.PartitionsReservation)res).getPartId();\n+    }\n+\n+    /** @return Create time in milliseconds. */\n+    @Order(7)\n     public long createTime() {\n         return job.getCreateTime();\n     }\n \n-    /** @return Start time. */\n+    /** @return Start time in milliseconds. */\n+    @Order(8)\n     public long startTime() {\n         return job.getStartTime();\n     }\n \n-    /** @return Finish time. */\n-    public long fininshTime() {\n+    /** @return Finish time in milliseconds. */\n+    @Order(9)\n+    public long finishTime() {\n         return job.getFinishTime();\n     }\n \n-    /** @return Origin node id. */\n-    public UUID originNodeId() {\n-        return job.getTaskNode().id();\n-    }\n-\n     /** @return {@code True} if job is internal. */\n     public boolean isInternal() {\n         return job.isInternal();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 39998e8898..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -19,96 +19,104 @@ package org.apache.ignite.spi.systemview.view;\n \n import java.util.StringJoiner;\n import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n import org.apache.ignite.internal.processors.job.GridJobProcessor;\n import org.apache.ignite.internal.processors.job.GridJobWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute job representation for a {@link SystemView}.\n  */\n public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n     /** Job. */\n     private final GridJobWorker job;\n \n+    /** Job id. */\n+    private final IgniteUuid id;\n+\n+    /** Job state. */\n+    private final ComputeJobState state;\n+\n     /**\n+     * @param id Job id.\n      * @param job Job.\n+     * @param state Job state.\n      */\n-    public ComputeJobView(GridJobWorker job) {\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n         this.job = job;\n+        this.state = state;\n     }\n \n-    /** @return Task id. */\n+    /** @return Job id. */\n+    @Order\n     public IgniteUuid id() {\n-        return job.getJobId();\n+        return id;\n     }\n \n-    /** @return Create time. */\n-    public long createTime() {\n-        return job.getCreateTime();\n-    }\n-\n-    /** @return Start time. */\n-    public long startTime() {\n-        return job.getStartTime();\n-    }\n-\n-    /** @return Finish time. */\n-    public long fininshTime() {\n-        return job.getFinishTime();\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n     }\n \n     /** @return Origin node id. */\n+    @Order(2)\n     public UUID originNodeId() {\n         return job.getTaskNode().id();\n     }\n \n-    /** @return {@code True} if job is internal. */\n-    public boolean isInternal() {\n-        return job.isInternal();\n-    }\n-\n-    /** @return {@code True} if job is finishing. */\n-    public boolean isFinishing() {\n-        return job.isFinishing();\n-    }\n-\n-    /** @return {@code True} if job is timed out. */\n-    public boolean isTimedOut() {\n-        return job.isTimedOut();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysCancelled() {\n-        return job.isSystemCanceled();\n-    }\n-\n-    /** @return {@code True} if ???. */\n-    public boolean isSysStopping() {\n-        return job.isSysStopping();\n-    }\n-\n-    /** @return {@code True} if job started. */\n-    public boolean isStarted() {\n-        return job.isStarted();\n-    }\n-\n-    /** @return Executor name. */\n-    public String executorName() {\n-        return job.executorName();\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n     }\n \n-    /** @return Job class name. */\n+    /** @return Task class name. */\n+    @Order(4)\n     public String taskClassName() {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Task name. */\n-    public String taskName() {\n-        return job.getSession().getTaskName();\n-    }\n-\n-    /** @return Affinity cache ids. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4ODU5OQ==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387588599", "body": "Caches' identifiers ?", "bodyText": "Caches' identifiers ?", "bodyHTML": "<p dir=\"auto\">Caches' identifiers ?</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:50:45Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java", "diffHunk": "@@ -1702,6 +1726,16 @@ public PartitionsReservation(int[] cacheIds, int partId,\n             partititons = new GridDhtLocalPartition[cacheIds.length];\n         }\n \n+        /** @return Caches. */", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c67e9eeab949931e11705cdff2a8817caeefac6d", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java\nindex d848877248..c3a40cda08 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java\n", "chunk": "@@ -1726,7 +1725,7 @@ public class GridJobProcessor extends GridProcessorAdapter {\n             partititons = new GridDhtLocalPartition[cacheIds.length];\n         }\n \n-        /** @return Caches. */\n+        /** @return Caches identifiers. */\n         public int[] getCacheIds() {\n             return cacheIds;\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java\nindex d848877248..6bc6805d99 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java\n", "chunk": "@@ -1726,7 +1725,7 @@ public class GridJobProcessor extends GridProcessorAdapter {\n             partititons = new GridDhtLocalPartition[cacheIds.length];\n         }\n \n-        /** @return Caches. */\n+        /** @return Caches identifiers. */\n         public int[] getCacheIds() {\n             return cacheIds;\n         }\n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "2fbbb676386515ea881e4e61f08864d6bc93225a", "committedDate": "2020-07-02 15:33:16 +0300", "message": "IGNITE-13197 Import order rule added. (#7978)"}, {"oid": "fd504159bf5bc1603dfd5eb149ab5d998d3bffb4", "committedDate": "2020-09-10 12:58:43 +0300", "message": "IGNITE-13380 Output IgniteSystemProperties via ignite.sh (#8207)"}, {"oid": "7c4121f6a427f15af3083186bcb4e55ce554e5a2", "committedDate": "2020-11-08 20:32:41 +0300", "message": "IGNITE-13594 Fixed an issue where compute jobs could not load user-defined classes through peer class loading."}, {"oid": "c5c007f73359c1b3264e0e627afa9af9144017f4", "committedDate": "2020-12-15 20:49:41 +0300", "message": "IGNITE-12666 Provide cluster performance profiling tool (#7693)"}, {"oid": "1c3d0feceb8a11cb9cfbd7f36d36c257d2395604", "committedDate": "2020-12-30 18:51:32 +0300", "message": "IGNITE-11110 Fixed stop case with collision SPI enabled - Fixes #8581."}, {"oid": "e16cba8ae9993a80f3d394ed7b6c473f97ea0e0c", "committedDate": "2021-07-29 17:28:19 +0300", "message": "IGNITE-15052 Move shared thread pools management to PoolProcessor - Fixes #9224."}, {"oid": "85be1cc9bf14192a46cac1dbd981e4f4682648b0", "committedDate": "2021-07-30 10:18:17 +0300", "message": "IGNITE-15101 Fix security context propagation for compute tasks - Fixes #9263."}, {"oid": "93460a374748e122073e0a82515c8bfa7dbd38c9", "committedDate": "2021-09-01 09:13:25 +0300", "message": "IGNITE-14725 Server node fail when client node send unsupported class version (#9360)"}, {"oid": "abec656e1bfa12cac7ec9376081003ecb3b05e4d", "committedDate": "2022-01-19 16:56:10 +0300", "message": "IGNITE-16325 Add compute task monitoring to keep track of their current status (#9747)"}, {"oid": "02a322e18e1e494bb658c1867e61747aa267f852", "committedDate": "2022-01-21 15:51:05 +0300", "message": "IGNITE-16339 Dynamic task reprioritization via changing session priority attribute - Fixes #9752."}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}, {"oid": "01a7d075a5f48016511f6a754538201f12aff4f7", "committedDate": "2022-08-12 01:19:04 +0300", "message": "IGNITE-15759 Remove LOCAL caches (#10157)"}, {"oid": "6c388682ef37cf28bd81860366db39c716546009", "committedDate": "2022-12-08 11:01:00 +0300", "message": "IGNITE-18304 Removal of daemon node support (#10416)"}, {"oid": "5d7e5d9d6bac202393d4050767dcc7cc94cb107e", "committedDate": "2023-02-17 23:26:32 +0300", "message": "IGNITE-15322 Stop authorization of internal tasks by their class name. (#10226)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4OTAxOQ==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387589019", "body": "What `sys` is means?", "bodyText": "What sys is means?", "bodyHTML": "<p dir=\"auto\">What <code>sys</code> is means?</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T10:51:27Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java", "diffHunk": "@@ -271,17 +271,42 @@ public GridDeployment getDeployment() {\n      *\n      * @return {@code True} if job was cancelled by the system.\n      */\n-    boolean isSystemCanceled() {\n+    public boolean isSystemCanceled() {\n         return sysCancelled;\n     }\n \n     /**\n      * @return Create time.\n      */\n-    long getCreateTime() {\n+    public long getCreateTime() {\n         return createTime;\n     }\n \n+    /** @return Start time. */\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    /** @return Finish time. */\n+    public long getFinishTime() {\n+        return finishTime;\n+    }\n+\n+    /** @return Sys stopping. */", "originalCommit": "b87ec0043638f0f96c9cbcafef48938a417c5973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "358f243012567ff2ef0fbcb9942bbe56040e1b38", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java\nindex fdb591edc3..d79fe83741 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java\n", "chunk": "@@ -292,11 +292,6 @@ public class GridJobWorker extends GridWorker implements GridTimeoutObject {\n         return finishTime;\n     }\n \n-    /** @return Sys stopping. */\n-    public boolean isSysStopping() {\n-        return sysStopping;\n-    }\n-\n     /** @return Is started. */\n     public boolean isStarted() {\n         return isStarted;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java\nindex fdb591edc3..d79fe83741 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java\n", "chunk": "@@ -292,11 +292,6 @@ public class GridJobWorker extends GridWorker implements GridTimeoutObject {\n         return finishTime;\n     }\n \n-    /** @return Sys stopping. */\n-    public boolean isSysStopping() {\n-        return sysStopping;\n-    }\n-\n     /** @return Is started. */\n     public boolean isStarted() {\n         return isStarted;\n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "1b9fe33740c31b6947016230ef50ae5bce88bad2", "committedDate": "2020-07-28 12:50:06 +0300", "message": "IGNITE-11942 Remove IGFS and Hadoop support - Fixes #8002."}, {"oid": "743195f62716204da61b0356a3b7086eaeb4a595", "committedDate": "2020-11-30 15:53:07 +0300", "message": "IGNITE-13487 Move logging of delegated errors to debug level. (#8283)"}, {"oid": "6b74e4fce5b92520970a7ba3cd26b7d007d61a11", "committedDate": "2021-04-07 10:35:24 +0300", "message": "IGNITE-14461 Track down those who initiated a query (#8965)"}, {"oid": "85be1cc9bf14192a46cac1dbd981e4f4682648b0", "committedDate": "2021-07-30 10:18:17 +0300", "message": "IGNITE-15101 Fix security context propagation for compute tasks - Fixes #9263."}, {"oid": "baf2c9143d3b0e40e2440baf6b4f99f4bd3041d0", "committedDate": "2021-09-20 12:09:36 +0300", "message": "IGNITE-15328 Consistency recovery command (Read Repair via control.ch) should support cancellation (#9409)"}, {"oid": "abec656e1bfa12cac7ec9376081003ecb3b05e4d", "committedDate": "2022-01-19 16:56:10 +0300", "message": "IGNITE-16325 Add compute task monitoring to keep track of their current status (#9747)"}, {"oid": "02a322e18e1e494bb658c1867e61747aa267f852", "committedDate": "2022-01-21 15:51:05 +0300", "message": "IGNITE-16339 Dynamic task reprioritization via changing session priority attribute - Fixes #9752."}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "147e03177aeadee03cb4925649c03633ce6be192", "committedDate": "2022-05-06 20:07:39 +0300", "message": "IGNITE-16932 Checkstyle RightCurly rule added (#10017)"}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"oid": "ade52ee82754aca4aa5a8eb084f13d6e27633f80", "url": "https://github.com/apache/ignite/commit/ade52ee82754aca4aa5a8eb084f13d6e27633f80", "message": "IGNITE-12745: Compute job view implemented.", "committedDate": "2020-03-04T14:38:22Z", "type": "commit"}, {"oid": "c67e9eeab949931e11705cdff2a8817caeefac6d", "url": "https://github.com/apache/ignite/commit/c67e9eeab949931e11705cdff2a8817caeefac6d", "message": "IGNITE-12745: PR cleanup.", "committedDate": "2020-03-04T14:42:07Z", "type": "commit"}, {"oid": "3894842669af735d907c6805f3d52a96e9dcb9be", "url": "https://github.com/apache/ignite/commit/3894842669af735d907c6805f3d52a96e9dcb9be", "message": "IGNITE-12745: PR cleanup.", "committedDate": "2020-03-04T14:46:58Z", "type": "commit"}, {"oid": "b0d72ac00baa20bd2ee5846015d5d7299bf13bea", "url": "https://github.com/apache/ignite/commit/b0d72ac00baa20bd2ee5846015d5d7299bf13bea", "message": "IGNITE-12745: Remove wrong fields.", "committedDate": "2020-03-04T14:52:30Z", "type": "commit"}, {"oid": "4f53757e0f894a0961bfb0ca7a85ff93cea0ba0a", "url": "https://github.com/apache/ignite/commit/4f53757e0f894a0961bfb0ca7a85ff93cea0ba0a", "message": "IGNITE-12745: Remove wrong fields.", "committedDate": "2020-03-04T14:53:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNzgyMQ==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387727821", "body": "Comma separated list of affinity cache identifiers?", "bodyText": "Comma separated list of affinity cache identifiers?", "bodyHTML": "<p dir=\"auto\">Comma separated list of affinity cache identifiers?</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T15:09:26Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    public final GridJobWorker job;\n+\n+    /** Job id. */\n+    public final IgniteUuid id;\n+\n+    /**\n+     * @param id Job id.\n+     * @param job Job.\n+     */\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n+        this.job = job;\n+    }\n+\n+    /** @return Job id. */\n+    @Order\n+    public IgniteUuid id() {\n+        return id;\n+    }\n+\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @see ComputeTaskView#sessionId()\n+     * @return Session id.\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n+    }\n+\n+    /** @return Origin node id. */\n+    @Order(2)\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Task class name. */\n+    @Order(4)\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Affinity cache name or {@code null} for non affinity call. */", "originalCommit": "4f53757e0f894a0961bfb0ca7a85ff93cea0ba0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyOTg0MQ==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387729841", "bodyText": "Yes. Thank you. Fixed.", "author": "nizhikov", "createdAt": "2020-03-04T15:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNzgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "450762c485a63b3efa081328c73c36aebc816d4e", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 7982284050..e1de273aa8 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -80,7 +80,7 @@ public class ComputeJobView {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n     @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 7982284050..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -80,7 +115,7 @@ public class ComputeJobView {\n         return job.getSession().getTaskClassName();\n     }\n \n-    /** @return Affinity cache name or {@code null} for non affinity call. */\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n     @Order(5)\n     public String affinityCacheIds() {\n         GridReservable res = job.getPartsReservation();\n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"oid": "450762c485a63b3efa081328c73c36aebc816d4e", "url": "https://github.com/apache/ignite/commit/450762c485a63b3efa081328c73c36aebc816d4e", "message": "IGNITE-12745: Code review fixes.", "committedDate": "2020-03-04T15:11:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczMTA3MA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387731070", "body": "`@see` should be placed after `@return`", "bodyText": "@see should be placed after @return", "bodyHTML": "<p dir=\"auto\"><code>@see</code> should be placed after <code>@return</code></p>", "author": "NSAmelchev", "createdAt": "2020-03-04T15:14:04Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    public final GridJobWorker job;\n+\n+    /** Job id. */\n+    public final IgniteUuid id;\n+\n+    /**\n+     * @param id Job id.\n+     * @param job Job.\n+     */\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n+        this.job = job;\n+    }\n+\n+    /** @return Job id. */\n+    @Order\n+    public IgniteUuid id() {\n+        return id;\n+    }\n+\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @see ComputeTaskView#sessionId()", "originalCommit": "450762c485a63b3efa081328c73c36aebc816d4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex e1de273aa8..8212ce5283 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -54,8 +88,8 @@ public class ComputeJobView {\n      * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n      * if both records represents parts of the same computation.\n      *\n-     * @see ComputeTaskView#sessionId()\n      * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n      */\n     @Order(1)\n     public IgniteUuid sessionId() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex e1de273aa8..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -54,8 +89,8 @@ public class ComputeJobView {\n      * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n      * if both records represents parts of the same computation.\n      *\n-     * @see ComputeTaskView#sessionId()\n      * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n      */\n     @Order(1)\n     public IgniteUuid sessionId() {\n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczMTM4Mg==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387731382", "body": "@see should be placed after @return", "bodyText": "@see should be placed after @return", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/see/hovercard\" href=\"https://github.com/see\">@see</a> should be placed after <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/return/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/return\">@return</a></p>", "author": "NSAmelchev", "createdAt": "2020-03-04T15:14:31Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java", "diffHunk": "@@ -18,73 +18,100 @@\n package org.apache.ignite.spi.systemview.view;\n \n import java.util.UUID;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.task.GridTaskWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute task representation for a {@link SystemView}.\n  */\n public class ComputeTaskView {\n     /** Worker for task. */\n-    private final GridTaskWorker worker;\n+    public final GridTaskWorker worker;\n+\n+    /** Task id. */\n+    public final IgniteUuid id;\n \n     /**\n+     * @param id Task id.\n      * @param worker Worker for task.\n      */\n-    public ComputeTaskView(GridTaskWorker worker) {\n+    public ComputeTaskView(IgniteUuid id, GridTaskWorker worker) {\n+        this.id = id;\n         this.worker = worker;\n     }\n \n+    /** @return Task id. */\n+    @Order\n+    public IgniteUuid id() {\n+        return id;\n+    }\n+\n+    /**\n+     * {@link ComputeTaskView#sessionId()} value equal to the value of {@link ComputeJobView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @see ComputeJobView#sessionId()", "originalCommit": "450762c485a63b3efa081328c73c36aebc816d4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java\nindex 53c3096031..1555f9f1c6 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java\n", "chunk": "@@ -52,8 +52,8 @@ public class ComputeTaskView {\n      * {@link ComputeTaskView#sessionId()} value equal to the value of {@link ComputeJobView#sessionId()}\n      * if both records represents parts of the same computation.\n      *\n-     * @see ComputeJobView#sessionId()\n      * @return Session id.\n+     * @see ComputeJobView#sessionId()\n      */\n     @Order(1)\n     public IgniteUuid sessionId() {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java\nindex 53c3096031..f89dddb94d 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java\n", "chunk": "@@ -52,8 +52,8 @@ public class ComputeTaskView {\n      * {@link ComputeTaskView#sessionId()} value equal to the value of {@link ComputeJobView#sessionId()}\n      * if both records represents parts of the same computation.\n      *\n-     * @see ComputeJobView#sessionId()\n      * @return Session id.\n+     * @see ComputeJobView#sessionId()\n      */\n     @Order(1)\n     public IgniteUuid sessionId() {\n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"oid": "ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "url": "https://github.com/apache/ignite/commit/ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "message": "IGNITE-12745: Code review fixes.", "committedDate": "2020-03-04T16:07:59Z", "type": "commit"}, {"oid": "c064e54652867e18fe1e3ad5c35eabdf25900f9b", "url": "https://github.com/apache/ignite/commit/c064e54652867e18fe1e3ad5c35eabdf25900f9b", "message": "IGNITE-12745: Code review fixes.", "committedDate": "2020-03-04T16:11:27Z", "type": "commit"}, {"oid": "358f243012567ff2ef0fbcb9942bbe56040e1b38", "url": "https://github.com/apache/ignite/commit/358f243012567ff2ef0fbcb9942bbe56040e1b38", "message": "IGNITE-12745: reverting changes.", "committedDate": "2020-03-04T16:19:08Z", "type": "commit"}, {"oid": "26bf901fa0391453279a5031d58559892ea22008", "url": "https://github.com/apache/ignite/commit/26bf901fa0391453279a5031d58559892ea22008", "message": "IGNITE-12745: minor fixes.", "committedDate": "2020-03-04T16:24:52Z", "type": "commit"}, {"oid": "0dee277238c402924b3f788ec047b9ca3138ba9e", "url": "https://github.com/apache/ignite/commit/0dee277238c402924b3f788ec047b9ca3138ba9e", "message": "IGNITE-12745: minor fixes.", "committedDate": "2020-03-04T16:43:20Z", "type": "commit"}, {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1", "url": "https://github.com/apache/ignite/commit/8b433c138b72c0092a326252a13e9f935f926aa1", "message": "IGNITE-12745: minor fixes.", "committedDate": "2020-03-04T16:44:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMzI5MA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387833290", "body": "check job?", "bodyText": "check job?", "bodyHTML": "<p dir=\"auto\">check job?</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T17:53:02Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnable() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().runAsync(() -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#apply(IgniteClosure, Object)} call. */\n+    @Test\n+    public void testComputeApply() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        GridTestUtils.runAsync(() -> {\n+            client.compute().apply(x -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                return 0;\n+            }, 1);\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Tests work of {@link SystemView} for compute grid\n+     * {@link IgniteCompute#affinityCallAsync(String, Object, IgniteCallable)} call.\n+     */\n+    @Test\n+    public void testComputeAffinityCall() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        assertFalse(t.isInternal());\n+        assertEquals(String.valueOf(CU.cacheId(\"test-cache\")), t.affinityCacheIds());\n+        assertEquals(1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                        }\n+                        catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return 1;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnableJobAndTask() throws Exception {\n+        try (IgniteEx server2 = startGrid(2)) {\n+            barrier = new CyclicBarrier(3);\n+\n+            SystemView<ComputeJobView> jobs1 = server.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeJobView> jobs2 = server2.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+\n+            assertEquals(1, tasks.size());\n+            assertEquals(1, jobs1.size());\n+            assertEquals(1, jobs2.size());\n+\n+            ComputeTaskView task = tasks.iterator().next();\n+\n+            checkJobAndTask(task, jobs1.iterator().next());\n+            checkJobAndTask(task, jobs2.iterator().next());\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+        }\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeAffinityCallJobAndTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+        SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, tasks.size());\n+        assertEquals(1, jobs.size());\n+\n+        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n+     */\n+    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {\n+        assertNotSame(task.id(), job.id());\n+        assertEquals(task.sessionId(), job.sessionId());\n+        assertEquals(task.taskNodeId(), job.originNodeId());\n+        assertEquals(task.taskName(), job.taskName());\n+        assertEquals(task.taskClassName(), job.taskClassName());\n+\n+        if (task.affinityCacheName() != null)\n+            assertEquals((Integer)CU.cacheId(task.affinityCacheName()), Integer.valueOf(job.affinityCacheIds()));\n+        else\n+            assertNull(job.affinityCacheIds());\n+\n+        assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n+    }\n+\n+    /** Check tasks fields. */\n+    private void checkTask(ComputeJobView t) {", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..abdc275ca3 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -339,14 +446,71 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n         assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n     }\n \n-    /** Check tasks fields. */\n-    private void checkTask(ComputeJobView t) {\n-        assertFalse(t.isInternal());\n-        assertNull(t.affinityCacheIds());\n-        assertEquals(-1, t.affinityPartitionId());\n-        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n-        assertTrue(t.taskName().startsWith(getClass().getName()));\n-        assertEquals(client.localNode().id(), t.originNodeId());\n-        assertEquals(ACTIVE, t.state);\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job) {\n+        checkJobView(job, getClass().getName(), ACTIVE);\n+    }\n+\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job, String taskPrefix, ComputeJobState state) {\n+        assertFalse(job.isInternal());\n+        assertNull(job.affinityCacheIds());\n+        assertEquals(-1, job.affinityPartitionId());\n+        assertTrue(job.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(job.taskName().startsWith(taskPrefix));\n+        assertEquals(client.localNode().id(), job.originNodeId());\n+        assertEquals(state, job.state());\n+        assertEquals(0, job.finishTime());\n+\n+        if (state == ACTIVE) {\n+            assertTrue(job.startTime() > 0);\n+            assertTrue(job.isStarted());\n+        }\n+    }\n+\n+    /** */\n+    @IgniteSpiMultipleInstancesSupport(true)\n+    private static class CancelCollisionSpi extends IgniteSpiAdapter implements CollisionSpi {\n+        /** {@inheritDoc} */\n+        @Override public void onCollision(CollisionContext ctx) {\n+            for (CollisionJobContext job : ctx.waitingJobs()) {\n+                // Waiting for test checks job in the `PASSIVE` state then activating it.\n+                waitForCancelJobChecks(job);\n+\n+                job.activate();\n+            }\n+\n+            for (CollisionJobContext job : ctx.activeJobs()) {\n+                // Cancelling job and then waiting for test checks job in the `CANCELLED` state.\n+                job.cancel();\n+\n+                waitForCancelJobChecks(job);\n+            }\n+        }\n+\n+        /** */\n+        private void waitForCancelJobChecks(CollisionJobContext job) {\n+            if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\")) {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+        @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStop() throws IgniteSpiException {\n+            // No-op.\n+        }\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..823607ac5f 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -339,14 +446,72 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n         assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n     }\n \n-    /** Check tasks fields. */\n-    private void checkTask(ComputeJobView t) {\n-        assertFalse(t.isInternal());\n-        assertNull(t.affinityCacheIds());\n-        assertEquals(-1, t.affinityPartitionId());\n-        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n-        assertTrue(t.taskName().startsWith(getClass().getName()));\n-        assertEquals(client.localNode().id(), t.originNodeId());\n-        assertEquals(ACTIVE, t.state);\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job) {\n+        checkJobView(job, getClass().getName(), ACTIVE);\n+    }\n+\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job, String taskPrefix, ComputeJobState state) {\n+        assertFalse(job.isInternal());\n+        assertNull(job.affinityCacheIds());\n+        assertEquals(-1, job.affinityPartitionId());\n+        assertTrue(job.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(job.taskName().startsWith(taskPrefix));\n+        assertEquals(client.localNode().id(), job.originNodeId());\n+        assertEquals(state, job.state());\n+        assertEquals(0, job.finishTime());\n+\n+        if (state == ACTIVE) {\n+            assertTrue(job.startTime() > 0);\n+            assertTrue(job.isStarted());\n+        }\n+    }\n+\n+    /** */\n+    @IgniteSpiMultipleInstancesSupport(true)\n+    private static class CancelCollisionSpi extends IgniteSpiAdapter implements CollisionSpi {\n+        /** {@inheritDoc} */\n+        @Override public void onCollision(CollisionContext ctx) {\n+            for (CollisionJobContext job : ctx.waitingJobs()) {\n+                // Waiting for test checks job in the `PASSIVE` state then activating it.\n+                waitForCancelJobChecks(job);\n+\n+                job.activate();\n+            }\n+\n+            for (CollisionJobContext job : ctx.activeJobs()) {\n+                // Cancelling job and then waiting for test checks job in the `CANCELLED` state.\n+                if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\"))\n+                    job.cancel();\n+\n+                waitForCancelJobChecks(job);\n+            }\n+        }\n+\n+        /** */\n+        private void waitForCancelJobChecks(CollisionJobContext job) {\n+            if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\")) {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+        @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStop() throws IgniteSpiException {\n+            // No-op.\n+        }\n     }\n }\n", "next_change": {"commit": "7528ca8e555b73939d55d2d7381149cbe58710d2", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 823607ac5f..f2475eab96 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -502,14 +508,17 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n             }\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n             // No-op.\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n             // No-op.\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void spiStop() throws IgniteSpiException {\n             // No-op.\n         }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "committedDate": "2021-05-27 12:22:45 +0300", "message": "IGNITE-14783 SystemViewComputeJobTest.testCancelComputeTask fixed (#9129)"}, {"oid": "7528ca8e555b73939d55d2d7381149cbe58710d2", "committedDate": "2021-09-09 20:05:52 +0300", "message": "IGNITE-15467 Adds code style JavaDoc rule for maven checkstyle plugin. (#9383)"}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNDE0OA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387834148", "body": "Lets check each job view:\r\n```\r\nfor (ComputeJobView job : jobs)\r\n     checkJob(job);\r\n```", "bodyText": "Lets check each job view:\nfor (ComputeJobView job : jobs)\n     checkJob(job);", "bodyHTML": "<p dir=\"auto\">Lets check each job view:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"for (ComputeJobView job : jobs)\n     checkJob(job);\n\"><pre><code>for (ComputeJobView job : jobs)\n     checkJob(job);\n</code></pre></div>", "author": "NSAmelchev", "createdAt": "2020-03-04T17:54:33Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..abdc275ca3 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -100,11 +121,13 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n \n         assertEquals(5, jobs.size());\n \n-        ComputeJobView t = jobs.iterator().next();\n-\n-        checkTask(t);\n+        for (ComputeJobView job : jobs)\n+            checkJobView(job);\n \n         barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        boolean res = waitForCondition(() -> jobs.size() == 0, TIMEOUT);\n+        assertTrue(res);\n     }\n \n     /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..823607ac5f 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -100,11 +121,13 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n \n         assertEquals(5, jobs.size());\n \n-        ComputeJobView t = jobs.iterator().next();\n-\n-        checkTask(t);\n+        for (ComputeJobView job : jobs)\n+            checkJobView(job);\n \n         barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        boolean res = waitForCondition(() -> jobs.size() == 0, TIMEOUT);\n+        assertTrue(res);\n     }\n \n     /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "committedDate": "2021-05-27 12:22:45 +0300", "message": "IGNITE-14783 SystemViewComputeJobTest.testCancelComputeTask fixed (#9129)"}, {"oid": "7528ca8e555b73939d55d2d7381149cbe58710d2", "committedDate": "2021-09-09 20:05:52 +0300", "message": "IGNITE-15467 Adds code style JavaDoc rule for maven checkstyle plugin. (#9383)"}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNzczNA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387837734", "body": "I suggest adding a check that jobs.size will be 0 after all jobs finish. ", "bodyText": "I suggest adding a check that jobs.size will be 0 after all jobs finish.", "bodyHTML": "<p dir=\"auto\">I suggest adding a check that jobs.size will be 0 after all jobs finish.</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T18:01:08Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..abdc275ca3 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -100,11 +121,13 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n \n         assertEquals(5, jobs.size());\n \n-        ComputeJobView t = jobs.iterator().next();\n-\n-        checkTask(t);\n+        for (ComputeJobView job : jobs)\n+            checkJobView(job);\n \n         barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        boolean res = waitForCondition(() -> jobs.size() == 0, TIMEOUT);\n+        assertTrue(res);\n     }\n \n     /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..823607ac5f 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -100,11 +121,13 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n \n         assertEquals(5, jobs.size());\n \n-        ComputeJobView t = jobs.iterator().next();\n-\n-        checkTask(t);\n+        for (ComputeJobView job : jobs)\n+            checkJobView(job);\n \n         barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        boolean res = waitForCondition(() -> jobs.size() == 0, TIMEOUT);\n+        assertTrue(res);\n     }\n \n     /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "committedDate": "2021-05-27 12:22:45 +0300", "message": "IGNITE-14783 SystemViewComputeJobTest.testCancelComputeTask fixed (#9129)"}, {"oid": "7528ca8e555b73939d55d2d7381149cbe58710d2", "committedDate": "2021-09-09 20:05:52 +0300", "message": "IGNITE-15467 Adds code style JavaDoc rule for maven checkstyle plugin. (#9383)"}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MjQ3MQ==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387842471", "body": "Getter state() can be used here.", "bodyText": "Getter state() can be used here.", "bodyHTML": "<p dir=\"auto\">Getter state() can be used here.</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T18:10:07Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnable() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().runAsync(() -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#apply(IgniteClosure, Object)} call. */\n+    @Test\n+    public void testComputeApply() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        GridTestUtils.runAsync(() -> {\n+            client.compute().apply(x -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                return 0;\n+            }, 1);\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Tests work of {@link SystemView} for compute grid\n+     * {@link IgniteCompute#affinityCallAsync(String, Object, IgniteCallable)} call.\n+     */\n+    @Test\n+    public void testComputeAffinityCall() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        assertFalse(t.isInternal());\n+        assertEquals(String.valueOf(CU.cacheId(\"test-cache\")), t.affinityCacheIds());\n+        assertEquals(1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                        }\n+                        catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return 1;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnableJobAndTask() throws Exception {\n+        try (IgniteEx server2 = startGrid(2)) {\n+            barrier = new CyclicBarrier(3);\n+\n+            SystemView<ComputeJobView> jobs1 = server.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeJobView> jobs2 = server2.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+\n+            assertEquals(1, tasks.size());\n+            assertEquals(1, jobs1.size());\n+            assertEquals(1, jobs2.size());\n+\n+            ComputeTaskView task = tasks.iterator().next();\n+\n+            checkJobAndTask(task, jobs1.iterator().next());\n+            checkJobAndTask(task, jobs2.iterator().next());\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+        }\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeAffinityCallJobAndTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+        SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, tasks.size());\n+        assertEquals(1, jobs.size());\n+\n+        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n+     */\n+    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {\n+        assertNotSame(task.id(), job.id());\n+        assertEquals(task.sessionId(), job.sessionId());\n+        assertEquals(task.taskNodeId(), job.originNodeId());\n+        assertEquals(task.taskName(), job.taskName());\n+        assertEquals(task.taskClassName(), job.taskClassName());\n+\n+        if (task.affinityCacheName() != null)\n+            assertEquals((Integer)CU.cacheId(task.affinityCacheName()), Integer.valueOf(job.affinityCacheIds()));\n+        else\n+            assertNull(job.affinityCacheIds());\n+\n+        assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n+    }\n+\n+    /** Check tasks fields. */\n+    private void checkTask(ComputeJobView t) {\n+        assertFalse(t.isInternal());\n+        assertNull(t.affinityCacheIds());\n+        assertEquals(-1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+        assertEquals(ACTIVE, t.state);", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..abdc275ca3 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -339,14 +446,71 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n         assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n     }\n \n-    /** Check tasks fields. */\n-    private void checkTask(ComputeJobView t) {\n-        assertFalse(t.isInternal());\n-        assertNull(t.affinityCacheIds());\n-        assertEquals(-1, t.affinityPartitionId());\n-        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n-        assertTrue(t.taskName().startsWith(getClass().getName()));\n-        assertEquals(client.localNode().id(), t.originNodeId());\n-        assertEquals(ACTIVE, t.state);\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job) {\n+        checkJobView(job, getClass().getName(), ACTIVE);\n+    }\n+\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job, String taskPrefix, ComputeJobState state) {\n+        assertFalse(job.isInternal());\n+        assertNull(job.affinityCacheIds());\n+        assertEquals(-1, job.affinityPartitionId());\n+        assertTrue(job.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(job.taskName().startsWith(taskPrefix));\n+        assertEquals(client.localNode().id(), job.originNodeId());\n+        assertEquals(state, job.state());\n+        assertEquals(0, job.finishTime());\n+\n+        if (state == ACTIVE) {\n+            assertTrue(job.startTime() > 0);\n+            assertTrue(job.isStarted());\n+        }\n+    }\n+\n+    /** */\n+    @IgniteSpiMultipleInstancesSupport(true)\n+    private static class CancelCollisionSpi extends IgniteSpiAdapter implements CollisionSpi {\n+        /** {@inheritDoc} */\n+        @Override public void onCollision(CollisionContext ctx) {\n+            for (CollisionJobContext job : ctx.waitingJobs()) {\n+                // Waiting for test checks job in the `PASSIVE` state then activating it.\n+                waitForCancelJobChecks(job);\n+\n+                job.activate();\n+            }\n+\n+            for (CollisionJobContext job : ctx.activeJobs()) {\n+                // Cancelling job and then waiting for test checks job in the `CANCELLED` state.\n+                job.cancel();\n+\n+                waitForCancelJobChecks(job);\n+            }\n+        }\n+\n+        /** */\n+        private void waitForCancelJobChecks(CollisionJobContext job) {\n+            if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\")) {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+        @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStop() throws IgniteSpiException {\n+            // No-op.\n+        }\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..823607ac5f 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -339,14 +446,72 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n         assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n     }\n \n-    /** Check tasks fields. */\n-    private void checkTask(ComputeJobView t) {\n-        assertFalse(t.isInternal());\n-        assertNull(t.affinityCacheIds());\n-        assertEquals(-1, t.affinityPartitionId());\n-        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n-        assertTrue(t.taskName().startsWith(getClass().getName()));\n-        assertEquals(client.localNode().id(), t.originNodeId());\n-        assertEquals(ACTIVE, t.state);\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job) {\n+        checkJobView(job, getClass().getName(), ACTIVE);\n+    }\n+\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job, String taskPrefix, ComputeJobState state) {\n+        assertFalse(job.isInternal());\n+        assertNull(job.affinityCacheIds());\n+        assertEquals(-1, job.affinityPartitionId());\n+        assertTrue(job.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(job.taskName().startsWith(taskPrefix));\n+        assertEquals(client.localNode().id(), job.originNodeId());\n+        assertEquals(state, job.state());\n+        assertEquals(0, job.finishTime());\n+\n+        if (state == ACTIVE) {\n+            assertTrue(job.startTime() > 0);\n+            assertTrue(job.isStarted());\n+        }\n+    }\n+\n+    /** */\n+    @IgniteSpiMultipleInstancesSupport(true)\n+    private static class CancelCollisionSpi extends IgniteSpiAdapter implements CollisionSpi {\n+        /** {@inheritDoc} */\n+        @Override public void onCollision(CollisionContext ctx) {\n+            for (CollisionJobContext job : ctx.waitingJobs()) {\n+                // Waiting for test checks job in the `PASSIVE` state then activating it.\n+                waitForCancelJobChecks(job);\n+\n+                job.activate();\n+            }\n+\n+            for (CollisionJobContext job : ctx.activeJobs()) {\n+                // Cancelling job and then waiting for test checks job in the `CANCELLED` state.\n+                if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\"))\n+                    job.cancel();\n+\n+                waitForCancelJobChecks(job);\n+            }\n+        }\n+\n+        /** */\n+        private void waitForCancelJobChecks(CollisionJobContext job) {\n+            if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\")) {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+        @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStop() throws IgniteSpiException {\n+            // No-op.\n+        }\n     }\n }\n", "next_change": {"commit": "7528ca8e555b73939d55d2d7381149cbe58710d2", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 823607ac5f..f2475eab96 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -502,14 +508,17 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n             }\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n             // No-op.\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n             // No-op.\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void spiStop() throws IgniteSpiException {\n             // No-op.\n         }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "committedDate": "2021-05-27 12:22:45 +0300", "message": "IGNITE-14783 SystemViewComputeJobTest.testCancelComputeTask fixed (#9129)"}, {"oid": "7528ca8e555b73939d55d2d7381149cbe58710d2", "committedDate": "2021-09-09 20:05:52 +0300", "message": "IGNITE-15467 Adds code style JavaDoc rule for maven checkstyle plugin. (#9383)"}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NDU5Mw==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387844593", "body": "Can you cover job states(PASSIVE, CANCELED), please? ", "bodyText": "Can you cover job states(PASSIVE, CANCELED), please?", "bodyHTML": "<p dir=\"auto\">Can you cover job states(PASSIVE, CANCELED), please?</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T18:14:00Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NzUwMw==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387947503", "bodyText": "tests added.", "author": "nizhikov", "createdAt": "2020-03-04T21:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NDU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..abdc275ca3 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -49,11 +58,14 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;\n import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.CANCELED;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.PASSIVE;\n+import static org.apache.ignite.testframework.GridTestUtils.waitForCondition;\n \n /** Tests for compute task {@link SystemView}. */\n public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n     /** */\n-    public static final long TIMEOUT = 5_000L;\n+    public static final long TIMEOUT = 10_000L;\n \n     /** */\n     private static CyclicBarrier barrier;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..823607ac5f 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -49,11 +58,14 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;\n import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.CANCELED;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.PASSIVE;\n+import static org.apache.ignite.testframework.GridTestUtils.waitForCondition;\n \n /** Tests for compute task {@link SystemView}. */\n public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n     /** */\n-    public static final long TIMEOUT = 5_000L;\n+    public static final long TIMEOUT = 10_000L;\n \n     /** */\n     private static CyclicBarrier barrier;\n", "next_change": {"commit": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 823607ac5f..32b2a62344 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -68,7 +69,7 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n     public static final long TIMEOUT = 10_000L;\n \n     /** */\n-    private static CyclicBarrier barrier;\n+    private static volatile CyclicBarrier barrier;\n \n     /** */\n     private static IgniteEx server;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "committedDate": "2021-05-27 12:22:45 +0300", "message": "IGNITE-14783 SystemViewComputeJobTest.testCancelComputeTask fixed (#9129)"}, {"oid": "7528ca8e555b73939d55d2d7381149cbe58710d2", "committedDate": "2021-09-09 20:05:52 +0300", "message": "IGNITE-15467 Adds code style JavaDoc rule for maven checkstyle plugin. (#9383)"}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NjUzMA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387846530", "body": "Let's name it `checkTaskAndJob` like parameters ordered  :)", "bodyText": "Let's name it checkTaskAndJob like parameters ordered  :)", "bodyHTML": "<p dir=\"auto\">Let's name it <code>checkTaskAndJob</code> like parameters ordered  :)</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T18:17:45Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnable() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().runAsync(() -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#apply(IgniteClosure, Object)} call. */\n+    @Test\n+    public void testComputeApply() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        GridTestUtils.runAsync(() -> {\n+            client.compute().apply(x -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                return 0;\n+            }, 1);\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Tests work of {@link SystemView} for compute grid\n+     * {@link IgniteCompute#affinityCallAsync(String, Object, IgniteCallable)} call.\n+     */\n+    @Test\n+    public void testComputeAffinityCall() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        assertFalse(t.isInternal());\n+        assertEquals(String.valueOf(CU.cacheId(\"test-cache\")), t.affinityCacheIds());\n+        assertEquals(1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                        }\n+                        catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return 1;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnableJobAndTask() throws Exception {\n+        try (IgniteEx server2 = startGrid(2)) {\n+            barrier = new CyclicBarrier(3);\n+\n+            SystemView<ComputeJobView> jobs1 = server.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeJobView> jobs2 = server2.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+\n+            assertEquals(1, tasks.size());\n+            assertEquals(1, jobs1.size());\n+            assertEquals(1, jobs2.size());\n+\n+            ComputeTaskView task = tasks.iterator().next();\n+\n+            checkJobAndTask(task, jobs1.iterator().next());\n+            checkJobAndTask(task, jobs2.iterator().next());\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+        }\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeAffinityCallJobAndTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+        SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, tasks.size());\n+        assertEquals(1, jobs.size());\n+\n+        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n+     */\n+    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..abdc275ca3 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -316,15 +359,79 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n         assertEquals(1, tasks.size());\n         assertEquals(1, jobs.size());\n \n-        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+        checkTaskAndJob(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        boolean res = waitForCondition(() -> jobs.size() == 0, TIMEOUT);\n+        assertTrue(res);\n+\n+        res = waitForCondition(() -> tasks.size() == 0, TIMEOUT);\n+        assertTrue(res);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testCancelComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().withName(\"cancel-task\").executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            Thread.sleep(60_000);\n+                        }\n+                        catch (InterruptedException e) {\n+                            throw new IgniteException(e);\n+                        }\n+\n+                        return null;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        checkJobView(jobs.iterator().next(), \"cancel-task\", PASSIVE);\n \n         barrier.await(TIMEOUT, MILLISECONDS);\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        checkJobView(jobs.iterator().next(), \"cancel-task\", CANCELED);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        boolean res = waitForCondition(() -> jobs.size() == 0, TIMEOUT);\n+        assertTrue(res);\n     }\n \n     /**\n      * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n      */\n-    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {\n+    private void checkTaskAndJob(ComputeTaskView task, ComputeJobView job) {\n         assertNotSame(task.id(), job.id());\n         assertEquals(task.sessionId(), job.sessionId());\n         assertEquals(task.taskNodeId(), job.originNodeId());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..823607ac5f 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -316,15 +359,79 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n         assertEquals(1, tasks.size());\n         assertEquals(1, jobs.size());\n \n-        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+        checkTaskAndJob(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        boolean res = waitForCondition(() -> jobs.size() == 0, TIMEOUT);\n+        assertTrue(res);\n+\n+        res = waitForCondition(() -> tasks.size() == 0, TIMEOUT);\n+        assertTrue(res);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testCancelComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().withName(\"cancel-task\").executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            Thread.sleep(60_000);\n+                        }\n+                        catch (InterruptedException e) {\n+                            throw new IgniteException(e);\n+                        }\n+\n+                        return null;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        checkJobView(jobs.iterator().next(), \"cancel-task\", PASSIVE);\n \n         barrier.await(TIMEOUT, MILLISECONDS);\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        checkJobView(jobs.iterator().next(), \"cancel-task\", CANCELED);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        boolean res = waitForCondition(() -> jobs.size() == 0, TIMEOUT);\n+        assertTrue(res);\n     }\n \n     /**\n      * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n      */\n-    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {\n+    private void checkTaskAndJob(ComputeTaskView task, ComputeJobView job) {\n         assertNotSame(task.id(), job.id());\n         assertEquals(task.sessionId(), job.sessionId());\n         assertEquals(task.taskNodeId(), job.originNodeId());\n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "committedDate": "2021-05-27 12:22:45 +0300", "message": "IGNITE-14783 SystemViewComputeJobTest.testCancelComputeTask fixed (#9129)"}, {"oid": "7528ca8e555b73939d55d2d7381149cbe58710d2", "committedDate": "2021-09-09 20:05:52 +0300", "message": "IGNITE-15467 Adds code style JavaDoc rule for maven checkstyle plugin. (#9383)"}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTM2NA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387849364", "body": "It can be null. Let's mark as nullable and update javadoc.", "bodyText": "It can be null. Let's mark as nullable and update javadoc.", "bodyHTML": "<p dir=\"auto\">It can be null. Let's mark as nullable and update javadoc.</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T18:23:00Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n+    /** Job. */\n+    public final GridJobWorker job;\n+\n+    /** Job id. */\n+    public final IgniteUuid id;\n+\n+    /** Job state. */\n+    public final ComputeJobState state;\n+\n+    /**\n+     * @param id Job id.\n+     * @param job Job.\n+     * @param state Job state.\n+     */\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n+        this.job = job;\n+        this.state = state;\n+    }\n+\n+    /** @return Job id. */\n+    @Order\n+    public IgniteUuid id() {\n+        return id;\n+    }\n+\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n+    }\n+\n+    /** @return Origin node id. */\n+    @Order(2)\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Task class name. */\n+    @Order(4)\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n+    public String affinityCacheIds() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return null;\n+\n+        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n+\n+        if (ids == null || ids.length == 0)\n+            return null;\n+\n+        StringJoiner joiner = new StringJoiner(\",\");\n+\n+        for (int id : ids)\n+            joiner.add(Integer.toString(id));\n+\n+        return joiner.toString();\n+    }\n+\n+    /** @return Affinity partition id or {@code -1} for non affinity call. */\n+    @Order(6)\n+    public int affinityPartitionId() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return -1;\n+\n+        return ((GridJobProcessor.PartitionsReservation)res).getPartId();\n+    }\n+\n+    /** @return Create time in milliseconds. */\n+    @Order(7)\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time in milliseconds. */\n+    @Order(8)\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time in milliseconds. */\n+    @Order(9)\n+    public long finishTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if job started. */\n+    public boolean isStarted() {\n+        return job.isStarted();\n+    }\n+\n+    /** @return Executor name. */\n+    public String executorName() {", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 8212ce5283..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -184,8 +185,8 @@ public class ComputeJobView {\n         return job.isStarted();\n     }\n \n-    /** @return Executor name. */\n-    public String executorName() {\n+    /** @return Executor name or {@code null} if not specified. */\n+    @Nullable public String executorName() {\n         return job.executorName();\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\nindex 8212ce5283..111c16704b 100644\n--- a/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n+++ b/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java\n", "chunk": "@@ -184,8 +185,8 @@ public class ComputeJobView {\n         return job.isStarted();\n     }\n \n-    /** @return Executor name. */\n-    public String executorName() {\n+    /** @return Executor name or {@code null} if not specified. */\n+    @Nullable public String executorName() {\n         return job.executorName();\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MDE3Mw==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387850173", "body": "Let's add additional checks:\r\n```\r\n        assertEquals(0, j.finishTime());\r\n        assertTrue(j.startTime() > 0);\r\n```", "bodyText": "Let's add additional checks:\n        assertEquals(0, j.finishTime());\n        assertTrue(j.startTime() > 0);", "bodyHTML": "<p dir=\"auto\">Let's add additional checks:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        assertEquals(0, j.finishTime());\n        assertTrue(j.startTime() &gt; 0);\n\"><pre><code>        assertEquals(0, j.finishTime());\n        assertTrue(j.startTime() &gt; 0);\n</code></pre></div>", "author": "NSAmelchev", "createdAt": "2020-03-04T18:24:29Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnable() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().runAsync(() -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#apply(IgniteClosure, Object)} call. */\n+    @Test\n+    public void testComputeApply() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        GridTestUtils.runAsync(() -> {\n+            client.compute().apply(x -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                return 0;\n+            }, 1);\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Tests work of {@link SystemView} for compute grid\n+     * {@link IgniteCompute#affinityCallAsync(String, Object, IgniteCallable)} call.\n+     */\n+    @Test\n+    public void testComputeAffinityCall() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        assertFalse(t.isInternal());\n+        assertEquals(String.valueOf(CU.cacheId(\"test-cache\")), t.affinityCacheIds());\n+        assertEquals(1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                        }\n+                        catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return 1;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnableJobAndTask() throws Exception {\n+        try (IgniteEx server2 = startGrid(2)) {\n+            barrier = new CyclicBarrier(3);\n+\n+            SystemView<ComputeJobView> jobs1 = server.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeJobView> jobs2 = server2.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+\n+            assertEquals(1, tasks.size());\n+            assertEquals(1, jobs1.size());\n+            assertEquals(1, jobs2.size());\n+\n+            ComputeTaskView task = tasks.iterator().next();\n+\n+            checkJobAndTask(task, jobs1.iterator().next());\n+            checkJobAndTask(task, jobs2.iterator().next());\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+        }\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeAffinityCallJobAndTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+        SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, tasks.size());\n+        assertEquals(1, jobs.size());\n+\n+        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n+     */\n+    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {\n+        assertNotSame(task.id(), job.id());\n+        assertEquals(task.sessionId(), job.sessionId());\n+        assertEquals(task.taskNodeId(), job.originNodeId());\n+        assertEquals(task.taskName(), job.taskName());\n+        assertEquals(task.taskClassName(), job.taskClassName());\n+\n+        if (task.affinityCacheName() != null)\n+            assertEquals((Integer)CU.cacheId(task.affinityCacheName()), Integer.valueOf(job.affinityCacheIds()));\n+        else\n+            assertNull(job.affinityCacheIds());\n+\n+        assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n+    }\n+\n+    /** Check tasks fields. */\n+    private void checkTask(ComputeJobView t) {\n+        assertFalse(t.isInternal());\n+        assertNull(t.affinityCacheIds());\n+        assertEquals(-1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+        assertEquals(ACTIVE, t.state);\n+    }", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NDIyOA==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387854228", "bodyText": "+ assertTrue(t.isStarted());", "author": "NSAmelchev", "createdAt": "2020-03-04T18:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MDE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..abdc275ca3 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -339,14 +446,71 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n         assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n     }\n \n-    /** Check tasks fields. */\n-    private void checkTask(ComputeJobView t) {\n-        assertFalse(t.isInternal());\n-        assertNull(t.affinityCacheIds());\n-        assertEquals(-1, t.affinityPartitionId());\n-        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n-        assertTrue(t.taskName().startsWith(getClass().getName()));\n-        assertEquals(client.localNode().id(), t.originNodeId());\n-        assertEquals(ACTIVE, t.state);\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job) {\n+        checkJobView(job, getClass().getName(), ACTIVE);\n+    }\n+\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job, String taskPrefix, ComputeJobState state) {\n+        assertFalse(job.isInternal());\n+        assertNull(job.affinityCacheIds());\n+        assertEquals(-1, job.affinityPartitionId());\n+        assertTrue(job.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(job.taskName().startsWith(taskPrefix));\n+        assertEquals(client.localNode().id(), job.originNodeId());\n+        assertEquals(state, job.state());\n+        assertEquals(0, job.finishTime());\n+\n+        if (state == ACTIVE) {\n+            assertTrue(job.startTime() > 0);\n+            assertTrue(job.isStarted());\n+        }\n+    }\n+\n+    /** */\n+    @IgniteSpiMultipleInstancesSupport(true)\n+    private static class CancelCollisionSpi extends IgniteSpiAdapter implements CollisionSpi {\n+        /** {@inheritDoc} */\n+        @Override public void onCollision(CollisionContext ctx) {\n+            for (CollisionJobContext job : ctx.waitingJobs()) {\n+                // Waiting for test checks job in the `PASSIVE` state then activating it.\n+                waitForCancelJobChecks(job);\n+\n+                job.activate();\n+            }\n+\n+            for (CollisionJobContext job : ctx.activeJobs()) {\n+                // Cancelling job and then waiting for test checks job in the `CANCELLED` state.\n+                job.cancel();\n+\n+                waitForCancelJobChecks(job);\n+            }\n+        }\n+\n+        /** */\n+        private void waitForCancelJobChecks(CollisionJobContext job) {\n+            if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\")) {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+        @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStop() throws IgniteSpiException {\n+            // No-op.\n+        }\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..823607ac5f 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -339,14 +446,72 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n         assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n     }\n \n-    /** Check tasks fields. */\n-    private void checkTask(ComputeJobView t) {\n-        assertFalse(t.isInternal());\n-        assertNull(t.affinityCacheIds());\n-        assertEquals(-1, t.affinityPartitionId());\n-        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n-        assertTrue(t.taskName().startsWith(getClass().getName()));\n-        assertEquals(client.localNode().id(), t.originNodeId());\n-        assertEquals(ACTIVE, t.state);\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job) {\n+        checkJobView(job, getClass().getName(), ACTIVE);\n+    }\n+\n+    /** Check job fields. */\n+    private void checkJobView(ComputeJobView job, String taskPrefix, ComputeJobState state) {\n+        assertFalse(job.isInternal());\n+        assertNull(job.affinityCacheIds());\n+        assertEquals(-1, job.affinityPartitionId());\n+        assertTrue(job.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(job.taskName().startsWith(taskPrefix));\n+        assertEquals(client.localNode().id(), job.originNodeId());\n+        assertEquals(state, job.state());\n+        assertEquals(0, job.finishTime());\n+\n+        if (state == ACTIVE) {\n+            assertTrue(job.startTime() > 0);\n+            assertTrue(job.isStarted());\n+        }\n+    }\n+\n+    /** */\n+    @IgniteSpiMultipleInstancesSupport(true)\n+    private static class CancelCollisionSpi extends IgniteSpiAdapter implements CollisionSpi {\n+        /** {@inheritDoc} */\n+        @Override public void onCollision(CollisionContext ctx) {\n+            for (CollisionJobContext job : ctx.waitingJobs()) {\n+                // Waiting for test checks job in the `PASSIVE` state then activating it.\n+                waitForCancelJobChecks(job);\n+\n+                job.activate();\n+            }\n+\n+            for (CollisionJobContext job : ctx.activeJobs()) {\n+                // Cancelling job and then waiting for test checks job in the `CANCELLED` state.\n+                if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\"))\n+                    job.cancel();\n+\n+                waitForCancelJobChecks(job);\n+            }\n+        }\n+\n+        /** */\n+        private void waitForCancelJobChecks(CollisionJobContext job) {\n+            if (job.getTaskSession().getTaskName().equalsIgnoreCase(\"cancel-task\")) {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+\n+        @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n+            // No-op.\n+        }\n+\n+        @Override public void spiStop() throws IgniteSpiException {\n+            // No-op.\n+        }\n     }\n }\n", "next_change": {"commit": "7528ca8e555b73939d55d2d7381149cbe58710d2", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 823607ac5f..f2475eab96 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -502,14 +508,17 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n             }\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void setExternalCollisionListener(@Nullable CollisionExternalListener lsnr) {\n             // No-op.\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n             // No-op.\n         }\n \n+        /** {@inheritDoc} */\n         @Override public void spiStop() throws IgniteSpiException {\n             // No-op.\n         }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "committedDate": "2021-05-27 12:22:45 +0300", "message": "IGNITE-14783 SystemViewComputeJobTest.testCancelComputeTask fixed (#9129)"}, {"oid": "7528ca8e555b73939d55d2d7381149cbe58710d2", "committedDate": "2021-09-09 20:05:52 +0300", "message": "IGNITE-15467 Adds code style JavaDoc rule for maven checkstyle plugin. (#9383)"}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTQzMg==", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387875432", "body": "Let's increase timeout to avoid infrastructures affect. ", "bodyText": "Let's increase timeout to avoid infrastructures affect.", "bodyHTML": "<p dir=\"auto\">Let's increase timeout to avoid infrastructures affect.</p>", "author": "NSAmelchev", "createdAt": "2020-03-04T19:11:20Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;", "originalCommit": "8b433c138b72c0092a326252a13e9f935f926aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..abdc275ca3 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -49,11 +58,14 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;\n import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.CANCELED;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.PASSIVE;\n+import static org.apache.ignite.testframework.GridTestUtils.waitForCondition;\n \n /** Tests for compute task {@link SystemView}. */\n public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n     /** */\n-    public static final long TIMEOUT = 5_000L;\n+    public static final long TIMEOUT = 10_000L;\n \n     /** */\n     private static CyclicBarrier barrier;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 7b202e9158..823607ac5f 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -49,11 +58,14 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;\n import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.CANCELED;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.PASSIVE;\n+import static org.apache.ignite.testframework.GridTestUtils.waitForCondition;\n \n /** Tests for compute task {@link SystemView}. */\n public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n     /** */\n-    public static final long TIMEOUT = 5_000L;\n+    public static final long TIMEOUT = 10_000L;\n \n     /** */\n     private static CyclicBarrier barrier;\n", "next_change": {"commit": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "changed_code": [{"header": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\nindex 823607ac5f..32b2a62344 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java\n", "chunk": "@@ -68,7 +69,7 @@ public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n     public static final long TIMEOUT = 10_000L;\n \n     /** */\n-    private static CyclicBarrier barrier;\n+    private static volatile CyclicBarrier barrier;\n \n     /** */\n     private static IgniteEx server;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3", "message": "Merge commit", "committedDate": null}, {"oid": "3e9043c29c173a78fa89ce41ab1489f0de0c6a82", "committedDate": "2021-05-27 12:22:45 +0300", "message": "IGNITE-14783 SystemViewComputeJobTest.testCancelComputeTask fixed (#9129)"}, {"oid": "7528ca8e555b73939d55d2d7381149cbe58710d2", "committedDate": "2021-09-09 20:05:52 +0300", "message": "IGNITE-15467 Adds code style JavaDoc rule for maven checkstyle plugin. (#9383)"}, {"oid": "7357847369079925289114f650a506408812fe4c", "committedDate": "2022-05-04 16:00:34 +0300", "message": "IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005."}, {"oid": "d1b236b1928436bdb1c48a4465eee17fde6b43ce", "committedDate": "2022-05-05 14:13:23 +0300", "message": "Revert \"IGNITE-16916 Job cancellation routine improvement: configurable graceful stop period before interrupting job worker thread - Fixes #10005.\""}, {"oid": "9cbaf6c371dd489b2243d1737b0bd325333af79d", "committedDate": "2022-05-12 14:26:22 +0300", "message": "IGNITE-16916 Graceful cancel of job workers instead of brutal interrupt - Fixes #10015."}]}, {"oid": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "url": "https://github.com/apache/ignite/commit/a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "message": "IGNITE-12745: tests updated.", "committedDate": "2020-03-04T21:33:42Z", "type": "commit"}, {"oid": "66dd01ef5fd69972a40e9aaa74bf410657ee95c4", "url": "https://github.com/apache/ignite/commit/66dd01ef5fd69972a40e9aaa74bf410657ee95c4", "message": "IGNITE-12745: tests updated.", "committedDate": "2020-03-08T20:37:17Z", "type": "commit"}]}