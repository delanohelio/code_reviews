{"pr_number": 6796, "pr_title": "RealmUser API Cleanup", "pr_author": "cmelchior", "pr_createdAt": "2020-04-03T20:12:09Z", "pr_url": "https://github.com/realm/realm-java/pull/6796", "timeline": [{"oid": "12324a2e62923db1e2b281b5cb206862d06702ee", "url": "https://github.com/realm/realm-java/commit/12324a2e62923db1e2b281b5cb206862d06702ee", "message": "Move logOut", "committedDate": "2020-04-03T18:27:04Z", "type": "commit"}, {"oid": "0bc7a7d2a1616303e65d0e08769945e7022124b2", "url": "https://github.com/realm/realm-java/commit/0bc7a7d2a1616303e65d0e08769945e7022124b2", "message": "Move service classes: Functions, Push, MongoDB", "committedDate": "2020-04-03T18:32:47Z", "type": "commit"}, {"oid": "effb2d455bd8f093fda8d7399de73e2723f7e780", "url": "https://github.com/realm/realm-java/commit/effb2d455bd8f093fda8d7399de73e2723f7e780", "message": "Move linkUser", "committedDate": "2020-04-03T18:50:19Z", "type": "commit"}, {"oid": "97169e9d92fd138c74320d513e7cf86a4e7217f6", "url": "https://github.com/realm/realm-java/commit/97169e9d92fd138c74320d513e7cf86a4e7217f6", "message": "Move removeUser", "committedDate": "2020-04-03T19:15:06Z", "type": "commit"}, {"oid": "03c608febce5aa2c74aeba919c18736c7f7ac6dc", "url": "https://github.com/realm/realm-java/commit/03c608febce5aa2c74aeba919c18736c7f7ac6dc", "message": "Move ApiKeyAuthProvider", "committedDate": "2020-04-03T19:27:34Z", "type": "commit"}, {"oid": "89a05cb31d6640d49baeb933d9a41692f1d8b25c", "url": "https://github.com/realm/realm-java/commit/89a05cb31d6640d49baeb933d9a41692f1d8b25c", "message": "Cleanup logOut JavaDoc", "committedDate": "2020-04-03T19:44:41Z", "type": "commit"}, {"oid": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7", "url": "https://github.com/realm/realm-java/commit/ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7", "message": "Trigger CI", "committedDate": "2020-04-13T12:11:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMg==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408101212", "body": "Can we link a user with multiple credentials (ex: Facebook, Google & email) if yes do we have a test for it?", "bodyText": "Can we link a user with multiple credentials (ex: Facebook, Google & email) if yes do we have a test for it?", "bodyHTML": "<p dir=\"auto\">Can we link a user with multiple credentials (ex: Facebook, Google &amp; email) if yes do we have a test for it?</p>", "author": "nhachicha", "createdAt": "2020-04-14T12:37:02Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {", "originalCommit": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NTgwMQ==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r409045801", "bodyText": "You can and no, we don't have a test for it. I can add it.", "author": "cmelchior", "createdAt": "2020-04-15T18:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjg4NQ==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r411116885", "bodyText": "I believe the test added was for the same credentials type (email) consider adding a test with other types once they're implemented", "author": "nhachicha", "createdAt": "2020-04-20T06:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNjM2MA==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408106360", "body": "```suggestion\r\n     * synchronization to and from the users' Realms, and those Realms will be deleted next time\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * synchronization to and from the users Realms, and those Realms will be deleted next time\n          \n          \n            \n                 * synchronization to and from the users' Realms, and those Realms will be deleted next time", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> synchronization to and from the users <span class=\"pl-smi\">Realms</span>, and those <span class=\"pl-smi\">Realms</span> will be deleted next time</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> synchronization to and from the users<span class=\"pl-s\"><span class=\"pl-pds x x-first x-last\">'</span> Realms, and those Realms will be deleted next time</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "nhachicha", "createdAt": "2020-04-14T12:44:53Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @param callback callback when removing the user has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask removeUserAsync(RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous removal of users is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return removeUser();\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Log the user out of the Realm App. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time\n+     * the app restarts. Therefor logging out should not be done until all changes to Realms have\n+     * been uploaded to the server.\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}. They can be removed completely by calling\n+     * {@link #removeUser()}.\n      *\n      * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n      * App.\n      */\n-    public void logOut() {\n-        app.logOut(this);\n+    public void logOut() throws ObjectServerError {\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogOut(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIVoidResultCallback(error));\n+        handleResult(null, error);\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch. If the user is already logged out or in an error state, this method does nothing.\n-     * <p>\n-     * If the user is already logged out, this method does nothing.\n-     * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Log the user out of the Realm App asynchronously. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time", "originalCommit": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNjYzMQ==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408106631", "body": "```suggestion\r\n     * synchronization to and from the users' Realms, and those Realms will be deleted next time\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * synchronization to and from the users Realms, and those Realms will be deleted next time\n          \n          \n            \n                 * synchronization to and from the users' Realms, and those Realms will be deleted next time", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> synchronization to and from the users <span class=\"pl-smi\">Realms</span>, and those <span class=\"pl-smi\">Realms</span> will be deleted next time</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> synchronization to and from the users<span class=\"pl-s\"><span class=\"pl-pds x x-first x-last\">'</span> Realms, and those Realms will be deleted next time</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "nhachicha", "createdAt": "2020-04-14T12:45:18Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @param callback callback when removing the user has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask removeUserAsync(RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous removal of users is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return removeUser();\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Log the user out of the Realm App. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time", "originalCommit": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMjgyMQ==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408122821", "body": "I thought we renamed this in another PR to lose the prefix?", "bodyText": "I thought we renamed this in another PR to lose the prefix?", "bodyHTML": "<p dir=\"auto\">I thought we renamed this in another PR to lose the prefix?</p>", "author": "nhachicha", "createdAt": "2020-04-14T13:10:05Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @param user user to remove.\n+     * @param callback callback when removing the user has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask removeUserAsync(RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous removal of users is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return removeUser();\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Log the user out of the Realm App. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time\n+     * the app restarts. Therefor logging out should not be done until all changes to Realms have\n+     * been uploaded to the server.\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}. They can be removed completely by calling\n+     * {@link #removeUser()}.\n      *\n      * @throws ObjectServerError if an error occurred while trying to log the user out of the Realm\n      * App.\n      */\n-    public void logOut() {\n-        app.logOut(this);\n+    public void logOut() throws ObjectServerError {\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogOut(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIVoidResultCallback(error));\n+        handleResult(null, error);\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch. If the user is already logged out or in an error state, this method does nothing.\n-     * <p>\n-     * If the user is already logged out, this method does nothing.\n-     * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Log the user out of the Realm App asynchronously. This will unregister them on the device, stop any\n+     * synchronization to and from the users Realms, and those Realms will be deleted next time\n+     * the app restarts. Therefor logging out should not be done until all changes to Realms have\n+     * been uploaded to the server.\n      * <p>\n      * Once the Realm App has confirmed the logout any registered {@link AuthenticationListener}\n      * will be notified and user credentials will be deleted from this device.\n+     * <p>\n+     * Logging out anonymous users will remove them immediately instead of marking them as\n+     * {@link RealmUser.State#LOGGED_OUT}. All other users will be marked as {@link RealmUser.State#LOGGED_OUT}\n+     * and will still be returned by {@link #allUsers()}. They can be removed completely by calling\n+     * {@link #removeUser()}.\n      *\n-     * @throws IllegalStateException if not called on a looper thread.\n+     * @param callback callback when logging out has completed or failed. The callback will always\n+     * happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask logOutAsync(RealmApp.Callback<RealmUser> callback) {\n+        final RealmUser user = this;\n+        Util.checkLooperThread(\"Asynchronous log out is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                logOut();\n+                return user;\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Returns a wrapper for managing API keys controlled by the current user.\n+     *\n+     * @return wrapper for managing API keys controlled by the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     */\n+    public synchronized ApiKeyAuthProvider getApiKeyAuthProvider() {\n+        checkLoggedIn();\n+        if (apiKeyAuthProvider == null) {\n+            apiKeyAuthProvider = new ApiKeyAuthProvider(this);\n+        }\n+        return apiKeyAuthProvider;\n+    }\n+\n+    /**\n+     * FIXME Add support for functions. Name of Class and method still TBD.\n+     */\n+    public RealmFunctions getFunctions() {\n+        return null;\n+    }\n+\n+    /**\n+     * FIXME Add support for push notifications. Name of Class and method still TBD.\n      */\n-    public RealmAsyncTask logOutAsync(RealmApp.Callback callback) {\n-        return app.logOutAsync(this, callback);\n+    public RealmPushNotifications getFSMPushNotifications() {", "originalCommit": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NjEwMA==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r409046100", "bodyText": "I think you are right. I'll rename here.", "author": "cmelchior", "createdAt": "2020-04-15T18:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMjgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODQ3Mw==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408198473", "body": "Is this correct? Should `linkUser` not be called on `user` instead of `app`?", "bodyText": "Is this correct? Should linkUser not be called on user instead of app?", "bodyHTML": "<p dir=\"auto\">Is this correct? Should <code>linkUser</code> not be called on <code>user</code> instead of <code>app</code>?</p>", "author": "edualonso", "createdAt": "2020-04-14T14:50:32Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));", "originalCommit": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5OTE2Mg==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408199162", "bodyText": "There are some other instances of this one below as well.", "author": "edualonso", "createdAt": "2020-04-14T14:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMDA4Mg==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r408200082", "body": "```suggestion\r\n     * Removes a user's credentials from this device. If the user was currently logged in, they\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Removes a users credentials from this device. If the user was currently logged in, they\n          \n          \n            \n                 * Removes a user's credentials from this device. If the user was currently logged in, they", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Removes</span> a <span class=\"x x-first x-last\">users</span> credentials from <span class=\"pl-c1\">this</span> device. <span class=\"pl-smi\">If</span> the user was currently logged in, they</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Removes</span> a <span class=\"x x-first\">user</span><span class=\"pl-s\"><span class=\"pl-pds x\">'</span><span class=\"x x-last\">s</span> credentials from this device. If the user was currently logged in, they</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edualonso", "createdAt": "2020-04-14T14:52:36Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -218,42 +225,211 @@ public State getState() {\n     }\n \n     /**\n-     * Log the user out of the Realm App, destroying their server state, unregistering them from the\n-     * SDK, and removing any synced Realms associated with them from on-disk storage on next app\n-     * launch.\n+     * Returns whether or not this user is still logged into the MongoDB Realm App.\n+     *\n+     * @return {@code true} if still logged in, {@code false} if not.\n+     */\n+    public boolean isLoggedIn() {\n+        return getState() == State.LOGGED_IN;\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n      * <p>\n-     * If the user is already logged out, this method does nothing.\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n      * <p>\n-     * This method should be called whenever the application is committed to not using a user again.\n-     * Failing to call this method may result in unused files and metadata needlessly taking up space.\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @throws IllegalStateException if no user is currently logged in.\n+     * @return the {@link io.realm.RealmUser} the credentials were linked to.\n+     */\n+    public RealmUser linkUser(RealmCredentials credentials) {\n+        Util.checkNull(credentials, \"credentials\");\n+        checkLoggedIn();\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLinkUser(app.nativePtr, osUser.getNativePtr(), credentials.osCredentials.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                osUser = new OsSyncUser((long) result); // OS returns the updated user as a new one.\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Links the current user with a new user identity represented by the given credentials.\n+     * <p>\n+     * Linking a user with more credentials, mean the user can login either of these credentials.\n+     * It also makes it possible to \"upgrade\" an anonymous user by linking it with e.g.\n+     * Email/Password credentials.\n+     * <pre>\n+     * {@code\n+     * // Example\n+     * RealmApp app = new RealmApp(\"app-id\")\n+     * RealmUser user = app.login(RealmCredentials.anonymous());\n+     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * }\n+     * </pre>\n+     * <p>\n+     * Note: It is not possible to link two existing users of MongoDB Realm. The provided credentials\n+     * must not have been used by another user.\n+     *\n+     * @param credentials the credentials to link with the current user.\n+     * @param callback callback when user identities has been linked or it failed. The callback will\n+     * always happen on the same thread as this method is called on.\n+     * @throws IllegalStateException if called from a non-looper thread.\n+     */\n+    public RealmAsyncTask linkUserAsync(RealmCredentials credentials, RealmApp.Callback<RealmUser> callback) {\n+        Util.checkLooperThread(\"Asynchronous linking identities is only possible from looper threads.\");\n+        return new RealmApp.Request<RealmUser>(RealmApp.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return linkUser(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they\n+     * will be logged out as part of the process. This is only a local change and does not\n+     * affect the user state on the server.\n+     *\n+     * @return user that was removed.\n+     * @throws ObjectServerError if called from the UI thread or if the user was logged in, but\n+     * could not be logged out.\n+     */\n+    public RealmUser removeUser() throws ObjectServerError {\n+        AtomicReference<RealmUser> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeRemoveUser(app.nativePtr, osUser.getNativePtr(), new RealmApp.OsJNIResultCallback<RealmUser>(success, error) {\n+            @Override\n+            protected RealmUser mapSuccess(Object result) {\n+                return RealmUser.this;\n+            }\n+        });\n+        return handleResult(success, error);\n+    }\n+\n+    /**\n+     * Removes a users credentials from this device. If the user was currently logged in, they", "originalCommit": "ceef2934c557a1a472a65ed0e8b27edc4d4e4cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f01e49791fe32653a2d581e884af1b851174d90", "url": "https://github.com/realm/realm-java/commit/0f01e49791fe32653a2d581e884af1b851174d90", "message": "Apply suggestions from code review\n\nCo-Authored-By: Eduardo L\u00f3pez <1874445+edualonso@users.noreply.github.com>\nCo-Authored-By: Nabil Hachicha <nh@realm.io>", "committedDate": "2020-04-15T18:38:36Z", "type": "commit"}, {"oid": "e7a0c9b5336123d744a9ad700990e6a2c726055c", "url": "https://github.com/realm/realm-java/commit/e7a0c9b5336123d744a9ad700990e6a2c726055c", "message": "PR feedback", "committedDate": "2020-04-15T18:42:20Z", "type": "commit"}, {"oid": "133c171555ac5ac3b67a03d3e778c3355b6c619d", "url": "https://github.com/realm/realm-java/commit/133c171555ac5ac3b67a03d3e778c3355b6c619d", "message": "Merge branch 'cm/app/realmuser-methods' of https://github.com/realm/realm-java into cm/app/realmuser-methods", "committedDate": "2020-04-15T18:42:36Z", "type": "commit"}, {"oid": "d8b5b2c6a6dfdb75200a7428c11c3893f4565adc", "url": "https://github.com/realm/realm-java/commit/d8b5b2c6a6dfdb75200a7428c11c3893f4565adc", "message": "Correct exception in new API", "committedDate": "2020-04-16T08:30:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNTg3MQ==", "url": "https://github.com/realm/realm-java/pull/6796#discussion_r411115871", "body": "```suggestion\r\n     * user.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * userg.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n          \n          \n            \n                 * user.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"x x-first x-last\">userg</span><span class=\"pl-k\">.</span>linkUser(<span class=\"pl-smi\">RealmCredentials</span><span class=\"pl-k\">.</span>emailPassword(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>email<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>password<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"x x-first x-last\">user</span><span class=\"pl-k\">.</span>linkUser(<span class=\"pl-smi\">RealmCredentials</span><span class=\"pl-k\">.</span>emailPassword(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>email<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>password<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "nhachicha", "createdAt": "2020-04-20T06:07:32Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -281,7 +281,7 @@ protected RealmUser mapSuccess(Object result) {\n      * // Example\n      * RealmApp app = new RealmApp(\"app-id\")\n      * RealmUser user = app.login(RealmCredentials.anonymous());\n-     * app.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));\n+     * userg.linkUser(RealmCredentials.emailPassword(\"email\", \"password\"));", "originalCommit": "d8b5b2c6a6dfdb75200a7428c11c3893f4565adc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e64f8f2147875bd1496d09c3839a63e9e09420c", "url": "https://github.com/realm/realm-java/commit/5e64f8f2147875bd1496d09c3839a63e9e09420c", "message": "Update realm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n\nCo-Authored-By: Nabil Hachicha <nh@realm.io>", "committedDate": "2020-04-20T08:46:31Z", "type": "commit"}]}