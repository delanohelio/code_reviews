{"pr_number": 7053, "pr_title": "Fix retrieval of null valued primitive property from dynamic realm", "pr_author": "rorbech", "pr_createdAt": "2020-08-24T08:28:41Z", "pr_url": "https://github.com/realm/realm-java/pull/7053", "merge_commit": "ea7d3799be8ea4610c6abc4c31c5ffe5eff6d9cc", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNzI5MA==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r475437290", "body": "You don't need to call refresh. It should be up to date when opened.", "bodyText": "You don't need to call refresh. It should be up to date when opened.", "bodyHTML": "<p dir=\"auto\">You don't need to call refresh. It should be up to date when opened.</p>", "author": "cmelchior", "createdAt": "2020-08-24T08:49:55Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java", "diffHunk": "@@ -1727,4 +1727,23 @@ public void run() {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n+\n+    @Test\n+    public void getNullableBoolean() {\n+        realm.executeTransaction(realm -> {\n+            AllJavaTypes object = realm.createObject(AllJavaTypes.class, 1000L);\n+            object.setFieldBoolean(null);\n+\n+            assertNull(object.isFieldBoolean());\n+        });\n+        realm.close();\n+\n+        DynamicRealm dynamicRealm = DynamicRealm.getInstance(realm.configuration);\n+        dynamicRealm.refresh();", "originalCommit": "a8fb00cf7c586ad9d7e89d0c302b8267d5243799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMDA4MQ==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r475520081", "bodyText": "It does not work without it. Maybe symptom of another issue. The below sequence runs without asserting\nDynamicRealm dynamicRealm = DynamicRealm.getInstance(realm.configuration);\nassertEquals(1, dynamicRealm.where(\"AllJavaTypes\").count());\ndynamicRealm.refresh();\nassertEquals(2, dynamicRealm.where(\"AllJavaTypes\").count());", "author": "rorbech", "createdAt": "2020-08-24T10:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNzI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMjAwNQ==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r475522005", "bodyText": "Hmm, I don't like that. The underlying read transactions should not be shared between Realm and DynamicRealm. It indicates a bigger problem we need to look into. Probably some caching going wrong somewhere \ud83d\ude15", "author": "cmelchior", "createdAt": "2020-08-24T11:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNzI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNzc0Nw==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r475527747", "bodyText": "Yes. A dynamic realm with the same configuration was already setup. Sorry.", "author": "rorbech", "createdAt": "2020-08-24T11:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNzI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "587a7a4b7597393b0a68ca1bfff03e8f5029f2f9", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex 6844ce5ce..d4d584d6c 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1729,21 +1633,93 @@ public class DynamicRealmObjectTests {\n     }\n \n     @Test\n-    public void getNullableBoolean() {\n+    public void getNullableFields() {\n         realm.executeTransaction(realm -> {\n-            AllJavaTypes object = realm.createObject(AllJavaTypes.class, 1000L);\n-            object.setFieldBoolean(null);\n-\n-            assertNull(object.isFieldBoolean());\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);\n+            allJavaTypes.getFieldIntegerList().add(null);\n+            allJavaTypes.getFieldFloatList().add(null);\n+            allJavaTypes.getFieldDoubleList().add(null);\n+            allJavaTypes.getFieldStringList().add(null);\n+            allJavaTypes.getFieldBinaryList().add(null);\n+            allJavaTypes.getFieldDateList().add(null);\n         });\n         realm.close();\n-\n-        DynamicRealm dynamicRealm = DynamicRealm.getInstance(realm.configuration);\n         dynamicRealm.refresh();\n-        DynamicRealmObject object = dynamicRealm.where(\"AllJavaTypes\").isNull(\"fieldBoolean\").findFirst();\n \n-        assertNull(object.get(\"fieldBoolean\"));\n+        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n+        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n \n+        for (RealmFieldType value : RealmFieldType.values()) {\n+            switch (value) {\n+                case INTEGER:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n+                    break;\n+                case BOOLEAN:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n+                    break;\n+                case STRING:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n+                    break;\n+                case BINARY:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n+                    break;\n+                case DATE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n+                    break;\n+                case FLOAT:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n+                    break;\n+                case DOUBLE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n+                    break;\n+                case OBJECT:\n+                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n+                    break;\n+                case INTEGER_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n+                    break;\n+                case BOOLEAN_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n+                    break;\n+                case STRING_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n+                    break;\n+                case BINARY_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n+                    break;\n+                case DATE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n+                    break;\n+                case FLOAT_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n+                    break;\n+                case DOUBLE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n+                    break;\n+                case LIST:\n+                case LINKING_OBJECTS:\n+                    // Realm lists and back links cannot be null\n+                    break;\n+                default:\n+                    fail(\"Not testing all types\");\n+            }\n+        }\n         dynamicRealm.close();\n     }\n+\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ea7d3799be8ea4610c6abc4c31c5ffe5eff6d9cc", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex 6844ce5ce..d4d584d6c 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1729,21 +1633,93 @@ public class DynamicRealmObjectTests {\n     }\n \n     @Test\n-    public void getNullableBoolean() {\n+    public void getNullableFields() {\n         realm.executeTransaction(realm -> {\n-            AllJavaTypes object = realm.createObject(AllJavaTypes.class, 1000L);\n-            object.setFieldBoolean(null);\n-\n-            assertNull(object.isFieldBoolean());\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);\n+            allJavaTypes.getFieldIntegerList().add(null);\n+            allJavaTypes.getFieldFloatList().add(null);\n+            allJavaTypes.getFieldDoubleList().add(null);\n+            allJavaTypes.getFieldStringList().add(null);\n+            allJavaTypes.getFieldBinaryList().add(null);\n+            allJavaTypes.getFieldDateList().add(null);\n         });\n         realm.close();\n-\n-        DynamicRealm dynamicRealm = DynamicRealm.getInstance(realm.configuration);\n         dynamicRealm.refresh();\n-        DynamicRealmObject object = dynamicRealm.where(\"AllJavaTypes\").isNull(\"fieldBoolean\").findFirst();\n \n-        assertNull(object.get(\"fieldBoolean\"));\n+        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n+        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n \n+        for (RealmFieldType value : RealmFieldType.values()) {\n+            switch (value) {\n+                case INTEGER:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n+                    break;\n+                case BOOLEAN:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n+                    break;\n+                case STRING:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n+                    break;\n+                case BINARY:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n+                    break;\n+                case DATE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n+                    break;\n+                case FLOAT:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n+                    break;\n+                case DOUBLE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n+                    break;\n+                case OBJECT:\n+                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n+                    break;\n+                case INTEGER_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n+                    break;\n+                case BOOLEAN_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n+                    break;\n+                case STRING_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n+                    break;\n+                case BINARY_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n+                    break;\n+                case DATE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n+                    break;\n+                case FLOAT_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n+                    break;\n+                case DOUBLE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n+                    break;\n+                case LIST:\n+                case LINKING_OBJECTS:\n+                    // Realm lists and back links cannot be null\n+                    break;\n+                default:\n+                    fail(\"Not testing all types\");\n+            }\n+        }\n         dynamicRealm.close();\n     }\n+\n }\n", "next_change": {"commit": "bd59aa72e66ee6585039c0bd3642d2fce6fdb3ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex d4d584d6c..8f2f5ad75 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1631,95 +1629,4 @@ public class DynamicRealmObjectTests {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n-\n-    @Test\n-    public void getNullableFields() {\n-        realm.executeTransaction(realm -> {\n-            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n-            primitiveNullables.setFieldBoolean(null);\n-\n-            assertNull(primitiveNullables.getFieldBoolean());\n-            assertNull(primitiveNullables.getFieldInt());\n-            assertNull(primitiveNullables.getFieldFloat());\n-            assertNull(primitiveNullables.getFieldDouble());\n-            assertNull(primitiveNullables.getFieldString());\n-            assertNull(primitiveNullables.getFieldBinary());\n-            assertNull(primitiveNullables.getFieldDate());\n-\n-            realm.delete(AllJavaTypes.class);\n-            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n-\n-            assertNull(allJavaTypes.getFieldObject());\n-            allJavaTypes.getFieldBooleanList().add(null);\n-            allJavaTypes.getFieldIntegerList().add(null);\n-            allJavaTypes.getFieldFloatList().add(null);\n-            allJavaTypes.getFieldDoubleList().add(null);\n-            allJavaTypes.getFieldStringList().add(null);\n-            allJavaTypes.getFieldBinaryList().add(null);\n-            allJavaTypes.getFieldDateList().add(null);\n-        });\n-        realm.close();\n-        dynamicRealm.refresh();\n-\n-        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n-        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n-\n-        for (RealmFieldType value : RealmFieldType.values()) {\n-            switch (value) {\n-                case INTEGER:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n-                    break;\n-                case BOOLEAN:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n-                    break;\n-                case STRING:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n-                    break;\n-                case BINARY:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n-                    break;\n-                case DATE:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n-                    break;\n-                case FLOAT:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n-                    break;\n-                case DOUBLE:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n-                    break;\n-                case OBJECT:\n-                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n-                    break;\n-                case INTEGER_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n-                    break;\n-                case BOOLEAN_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n-                    break;\n-                case STRING_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n-                    break;\n-                case BINARY_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n-                    break;\n-                case DATE_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n-                    break;\n-                case FLOAT_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n-                    break;\n-                case DOUBLE_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n-                    break;\n-                case LIST:\n-                case LINKING_OBJECTS:\n-                    // Realm lists and back links cannot be null\n-                    break;\n-                default:\n-                    fail(\"Not testing all types\");\n-            }\n-        }\n-        dynamicRealm.close();\n-    }\n-\n }\n", "next_change": {"commit": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex 8f2f5ad75..a916cfc06 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1629,4 +1729,95 @@ public class DynamicRealmObjectTests {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n+\n+    @Test\n+    public void getNullableFields() {\n+        realm.executeTransaction(realm -> {\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);\n+            allJavaTypes.getFieldIntegerList().add(null);\n+            allJavaTypes.getFieldFloatList().add(null);\n+            allJavaTypes.getFieldDoubleList().add(null);\n+            allJavaTypes.getFieldStringList().add(null);\n+            allJavaTypes.getFieldBinaryList().add(null);\n+            allJavaTypes.getFieldDateList().add(null);\n+        });\n+        realm.close();\n+        dynamicRealm.refresh();\n+\n+        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n+        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n+\n+        for (RealmFieldType value : RealmFieldType.values()) {\n+            switch (value) {\n+                case INTEGER:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n+                    break;\n+                case BOOLEAN:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n+                    break;\n+                case STRING:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n+                    break;\n+                case BINARY:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n+                    break;\n+                case DATE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n+                    break;\n+                case FLOAT:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n+                    break;\n+                case DOUBLE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n+                    break;\n+                case OBJECT:\n+                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n+                    break;\n+                case INTEGER_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n+                    break;\n+                case BOOLEAN_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n+                    break;\n+                case STRING_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n+                    break;\n+                case BINARY_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n+                    break;\n+                case DATE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n+                    break;\n+                case FLOAT_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n+                    break;\n+                case DOUBLE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n+                    break;\n+                case LIST:\n+                case LINKING_OBJECTS:\n+                    // Realm lists and back links cannot be null\n+                    break;\n+                default:\n+                    fail(\"Not testing all types\");\n+            }\n+        }\n+        dynamicRealm.close();\n+    }\n+\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ea7d3799be8ea4610c6abc4c31c5ffe5eff6d9cc", "message": "Merge commit", "committedDate": null}, {"oid": "bd59aa72e66ee6585039c0bd3642d2fce6fdb3ed", "committedDate": "2020-03-07 22:27:44 +0100", "message": "Upgrade to AndroidX test artifacts (#6769)"}, {"oid": "93e1b43ed721744b5f198016cf67f72f2fc6787b", "committedDate": "2020-04-22 11:45:14 +0100", "message": "Add support for MongoDB datatypes: Decimal128 and ObjectId (#6722)"}, {"oid": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "committedDate": "2020-10-13 09:38:49 +0200", "message": "Merge branch 'master' into v10"}, {"oid": "6d7a200d3c0ae24c4ccb5cb2b3e6b74105661788", "committedDate": "2020-10-13 14:47:01 +0200", "message": "Fix nullable tests"}, {"oid": "64b3a8ceaed6b3b3a992ee741d22a9c01dbae155", "committedDate": "2020-12-09 10:21:30 +0100", "message": "Add support for UUID type (#7152)"}, {"oid": "a1b984d4ee1ab75372d6ab481dee2216f113192b", "committedDate": "2021-04-28 09:39:14 +0200", "message": "RealmAny datatype (#7398)"}, {"oid": "57d24b4725c4bf4bfc38c35b286b8ed4a2c6f5f6", "committedDate": "2021-04-28 18:48:04 +0200", "message": "Dictionary data type (#7397)"}, {"oid": "5a1cd32416d78dd4f0b4fe0de266924a89e92b17", "committedDate": "2021-04-29 14:32:32 +0200", "message": "Set data type (#7442)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzODMxMQ==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r475438311", "body": "This seems to impact more than just `null` values, so we should have unit tests for all the data types.", "bodyText": "This seems to impact more than just null values, so we should have unit tests for all the data types.", "bodyHTML": "<p dir=\"auto\">This seems to impact more than just <code>null</code> values, so we should have unit tests for all the data types.</p>", "author": "cmelchior", "createdAt": "2020-08-24T08:51:40Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -97,6 +97,9 @@ public DynamicRealmObject(RealmModel obj) {\n         proxyState.getRealm$realm().checkIfValid();\n \n         long columnKey = proxyState.getRow$realm().getColumnKey(fieldName);\n+        if (proxyState.getRow$realm().isNull(columnKey)) {", "originalCommit": "a8fb00cf7c586ad9d7e89d0c302b8267d5243799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyNTQ1MQ==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r478425451", "bodyText": "Implemented tests for null values for all types, but I would assume all-non null values to be sufficiently test by existing tests. Or what are you missing specifically?", "author": "rorbech", "createdAt": "2020-08-27T13:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzODMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMzI4MQ==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r482923281", "bodyText": "No, those tests should be fine", "author": "cmelchior", "createdAt": "2020-09-03T11:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzODMxMQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "93e1b43ed721744b5f198016cf67f72f2fc6787b", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\nindex d4a86aeea..c376b5e5c 100644\n--- a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\n+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\n", "chunk": "@@ -97,9 +97,6 @@ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy\n         proxyState.getRealm$realm().checkIfValid();\n \n         long columnKey = proxyState.getRow$realm().getColumnKey(fieldName);\n-        if (proxyState.getRow$realm().isNull(columnKey)) {\n-            return null;\n-        }\n         RealmFieldType type = proxyState.getRow$realm().getColumnType(columnKey);\n         switch (type) {\n             case BOOLEAN:\n", "next_change": {"commit": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\nindex c376b5e5c..d4a86aeea 100644\n--- a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\n+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\n", "chunk": "@@ -97,6 +97,9 @@ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy\n         proxyState.getRealm$realm().checkIfValid();\n \n         long columnKey = proxyState.getRow$realm().getColumnKey(fieldName);\n+        if (proxyState.getRow$realm().isNull(columnKey)) {\n+            return null;\n+        }\n         RealmFieldType type = proxyState.getRow$realm().getColumnType(columnKey);\n         switch (type) {\n             case BOOLEAN:\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ea7d3799be8ea4610c6abc4c31c5ffe5eff6d9cc", "message": "Merge commit", "committedDate": null}, {"oid": "93e1b43ed721744b5f198016cf67f72f2fc6787b", "committedDate": "2020-04-22 11:45:14 +0100", "message": "Add support for MongoDB datatypes: Decimal128 and ObjectId (#6722)"}, {"oid": "bea18c53d2902f0da003e4248da79c95e9dcbfea", "committedDate": "2020-07-18 17:34:26 +0200", "message": "Add DynamicRealm.createEmbeddedObject + add check for invalid Realm model types (#6982)"}, {"oid": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "committedDate": "2020-10-13 09:38:49 +0200", "message": "Merge branch 'master' into v10"}, {"oid": "64b3a8ceaed6b3b3a992ee741d22a9c01dbae155", "committedDate": "2020-12-09 10:21:30 +0100", "message": "Add support for UUID type (#7152)"}, {"oid": "a1b984d4ee1ab75372d6ab481dee2216f113192b", "committedDate": "2021-04-28 09:39:14 +0200", "message": "RealmAny datatype (#7398)"}, {"oid": "8f83a97e1c89fa060f197fe6dfc3d83d9b65f8dd", "committedDate": "2021-05-19 23:39:28 +0200", "message": "Dicts - dynamic realms (#7471)"}, {"oid": "eb9611ffeb90bea0c76813e6c5363b3add2a58e0", "committedDate": "2021-05-20 00:10:14 +0200", "message": "Sets - dynamic realms (#7472)"}, {"oid": "c01998356b30221c8822c3667ffef00260f5e8fe", "committedDate": "2021-05-21 17:08:12 +0200", "message": "Implement string conversion for DynamicRealmObject dicts and sets fields (#7482)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzODU5NA==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r475438594", "body": "The fix seems to indicate the bug impacted all primitive types. We should have tests for all of them instead of just boolean.", "bodyText": "The fix seems to indicate the bug impacted all primitive types. We should have tests for all of them instead of just boolean.", "bodyHTML": "<p dir=\"auto\">The fix seems to indicate the bug impacted all primitive types. We should have tests for all of them instead of just boolean.</p>", "author": "cmelchior", "createdAt": "2020-08-24T08:52:11Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java", "diffHunk": "@@ -1727,4 +1727,23 @@ public void run() {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n+\n+    @Test\n+    public void getNullableBoolean() {", "originalCommit": "a8fb00cf7c586ad9d7e89d0c302b8267d5243799", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587a7a4b7597393b0a68ca1bfff03e8f5029f2f9", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex 6844ce5ce..d4d584d6c 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1729,21 +1633,93 @@ public class DynamicRealmObjectTests {\n     }\n \n     @Test\n-    public void getNullableBoolean() {\n+    public void getNullableFields() {\n         realm.executeTransaction(realm -> {\n-            AllJavaTypes object = realm.createObject(AllJavaTypes.class, 1000L);\n-            object.setFieldBoolean(null);\n-\n-            assertNull(object.isFieldBoolean());\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);\n+            allJavaTypes.getFieldIntegerList().add(null);\n+            allJavaTypes.getFieldFloatList().add(null);\n+            allJavaTypes.getFieldDoubleList().add(null);\n+            allJavaTypes.getFieldStringList().add(null);\n+            allJavaTypes.getFieldBinaryList().add(null);\n+            allJavaTypes.getFieldDateList().add(null);\n         });\n         realm.close();\n-\n-        DynamicRealm dynamicRealm = DynamicRealm.getInstance(realm.configuration);\n         dynamicRealm.refresh();\n-        DynamicRealmObject object = dynamicRealm.where(\"AllJavaTypes\").isNull(\"fieldBoolean\").findFirst();\n \n-        assertNull(object.get(\"fieldBoolean\"));\n+        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n+        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n \n+        for (RealmFieldType value : RealmFieldType.values()) {\n+            switch (value) {\n+                case INTEGER:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n+                    break;\n+                case BOOLEAN:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n+                    break;\n+                case STRING:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n+                    break;\n+                case BINARY:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n+                    break;\n+                case DATE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n+                    break;\n+                case FLOAT:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n+                    break;\n+                case DOUBLE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n+                    break;\n+                case OBJECT:\n+                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n+                    break;\n+                case INTEGER_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n+                    break;\n+                case BOOLEAN_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n+                    break;\n+                case STRING_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n+                    break;\n+                case BINARY_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n+                    break;\n+                case DATE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n+                    break;\n+                case FLOAT_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n+                    break;\n+                case DOUBLE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n+                    break;\n+                case LIST:\n+                case LINKING_OBJECTS:\n+                    // Realm lists and back links cannot be null\n+                    break;\n+                default:\n+                    fail(\"Not testing all types\");\n+            }\n+        }\n         dynamicRealm.close();\n     }\n+\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ea7d3799be8ea4610c6abc4c31c5ffe5eff6d9cc", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex 6844ce5ce..d4d584d6c 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1729,21 +1633,93 @@ public class DynamicRealmObjectTests {\n     }\n \n     @Test\n-    public void getNullableBoolean() {\n+    public void getNullableFields() {\n         realm.executeTransaction(realm -> {\n-            AllJavaTypes object = realm.createObject(AllJavaTypes.class, 1000L);\n-            object.setFieldBoolean(null);\n-\n-            assertNull(object.isFieldBoolean());\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);\n+            allJavaTypes.getFieldIntegerList().add(null);\n+            allJavaTypes.getFieldFloatList().add(null);\n+            allJavaTypes.getFieldDoubleList().add(null);\n+            allJavaTypes.getFieldStringList().add(null);\n+            allJavaTypes.getFieldBinaryList().add(null);\n+            allJavaTypes.getFieldDateList().add(null);\n         });\n         realm.close();\n-\n-        DynamicRealm dynamicRealm = DynamicRealm.getInstance(realm.configuration);\n         dynamicRealm.refresh();\n-        DynamicRealmObject object = dynamicRealm.where(\"AllJavaTypes\").isNull(\"fieldBoolean\").findFirst();\n \n-        assertNull(object.get(\"fieldBoolean\"));\n+        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n+        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n \n+        for (RealmFieldType value : RealmFieldType.values()) {\n+            switch (value) {\n+                case INTEGER:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n+                    break;\n+                case BOOLEAN:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n+                    break;\n+                case STRING:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n+                    break;\n+                case BINARY:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n+                    break;\n+                case DATE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n+                    break;\n+                case FLOAT:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n+                    break;\n+                case DOUBLE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n+                    break;\n+                case OBJECT:\n+                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n+                    break;\n+                case INTEGER_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n+                    break;\n+                case BOOLEAN_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n+                    break;\n+                case STRING_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n+                    break;\n+                case BINARY_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n+                    break;\n+                case DATE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n+                    break;\n+                case FLOAT_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n+                    break;\n+                case DOUBLE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n+                    break;\n+                case LIST:\n+                case LINKING_OBJECTS:\n+                    // Realm lists and back links cannot be null\n+                    break;\n+                default:\n+                    fail(\"Not testing all types\");\n+            }\n+        }\n         dynamicRealm.close();\n     }\n+\n }\n", "next_change": {"commit": "bd59aa72e66ee6585039c0bd3642d2fce6fdb3ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex d4d584d6c..8f2f5ad75 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1631,95 +1629,4 @@ public class DynamicRealmObjectTests {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n-\n-    @Test\n-    public void getNullableFields() {\n-        realm.executeTransaction(realm -> {\n-            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n-            primitiveNullables.setFieldBoolean(null);\n-\n-            assertNull(primitiveNullables.getFieldBoolean());\n-            assertNull(primitiveNullables.getFieldInt());\n-            assertNull(primitiveNullables.getFieldFloat());\n-            assertNull(primitiveNullables.getFieldDouble());\n-            assertNull(primitiveNullables.getFieldString());\n-            assertNull(primitiveNullables.getFieldBinary());\n-            assertNull(primitiveNullables.getFieldDate());\n-\n-            realm.delete(AllJavaTypes.class);\n-            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n-\n-            assertNull(allJavaTypes.getFieldObject());\n-            allJavaTypes.getFieldBooleanList().add(null);\n-            allJavaTypes.getFieldIntegerList().add(null);\n-            allJavaTypes.getFieldFloatList().add(null);\n-            allJavaTypes.getFieldDoubleList().add(null);\n-            allJavaTypes.getFieldStringList().add(null);\n-            allJavaTypes.getFieldBinaryList().add(null);\n-            allJavaTypes.getFieldDateList().add(null);\n-        });\n-        realm.close();\n-        dynamicRealm.refresh();\n-\n-        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n-        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n-\n-        for (RealmFieldType value : RealmFieldType.values()) {\n-            switch (value) {\n-                case INTEGER:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n-                    break;\n-                case BOOLEAN:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n-                    break;\n-                case STRING:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n-                    break;\n-                case BINARY:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n-                    break;\n-                case DATE:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n-                    break;\n-                case FLOAT:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n-                    break;\n-                case DOUBLE:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n-                    break;\n-                case OBJECT:\n-                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n-                    break;\n-                case INTEGER_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n-                    break;\n-                case BOOLEAN_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n-                    break;\n-                case STRING_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n-                    break;\n-                case BINARY_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n-                    break;\n-                case DATE_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n-                    break;\n-                case FLOAT_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n-                    break;\n-                case DOUBLE_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n-                    break;\n-                case LIST:\n-                case LINKING_OBJECTS:\n-                    // Realm lists and back links cannot be null\n-                    break;\n-                default:\n-                    fail(\"Not testing all types\");\n-            }\n-        }\n-        dynamicRealm.close();\n-    }\n-\n }\n", "next_change": {"commit": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex 8f2f5ad75..a916cfc06 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1629,4 +1729,95 @@ public class DynamicRealmObjectTests {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n+\n+    @Test\n+    public void getNullableFields() {\n+        realm.executeTransaction(realm -> {\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);\n+            allJavaTypes.getFieldIntegerList().add(null);\n+            allJavaTypes.getFieldFloatList().add(null);\n+            allJavaTypes.getFieldDoubleList().add(null);\n+            allJavaTypes.getFieldStringList().add(null);\n+            allJavaTypes.getFieldBinaryList().add(null);\n+            allJavaTypes.getFieldDateList().add(null);\n+        });\n+        realm.close();\n+        dynamicRealm.refresh();\n+\n+        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n+        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n+\n+        for (RealmFieldType value : RealmFieldType.values()) {\n+            switch (value) {\n+                case INTEGER:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n+                    break;\n+                case BOOLEAN:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n+                    break;\n+                case STRING:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n+                    break;\n+                case BINARY:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n+                    break;\n+                case DATE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n+                    break;\n+                case FLOAT:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n+                    break;\n+                case DOUBLE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n+                    break;\n+                case OBJECT:\n+                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n+                    break;\n+                case INTEGER_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n+                    break;\n+                case BOOLEAN_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n+                    break;\n+                case STRING_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n+                    break;\n+                case BINARY_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n+                    break;\n+                case DATE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n+                    break;\n+                case FLOAT_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n+                    break;\n+                case DOUBLE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n+                    break;\n+                case LIST:\n+                case LINKING_OBJECTS:\n+                    // Realm lists and back links cannot be null\n+                    break;\n+                default:\n+                    fail(\"Not testing all types\");\n+            }\n+        }\n+        dynamicRealm.close();\n+    }\n+\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ea7d3799be8ea4610c6abc4c31c5ffe5eff6d9cc", "message": "Merge commit", "committedDate": null}, {"oid": "bd59aa72e66ee6585039c0bd3642d2fce6fdb3ed", "committedDate": "2020-03-07 22:27:44 +0100", "message": "Upgrade to AndroidX test artifacts (#6769)"}, {"oid": "93e1b43ed721744b5f198016cf67f72f2fc6787b", "committedDate": "2020-04-22 11:45:14 +0100", "message": "Add support for MongoDB datatypes: Decimal128 and ObjectId (#6722)"}, {"oid": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "committedDate": "2020-10-13 09:38:49 +0200", "message": "Merge branch 'master' into v10"}, {"oid": "6d7a200d3c0ae24c4ccb5cb2b3e6b74105661788", "committedDate": "2020-10-13 14:47:01 +0200", "message": "Fix nullable tests"}, {"oid": "64b3a8ceaed6b3b3a992ee741d22a9c01dbae155", "committedDate": "2020-12-09 10:21:30 +0100", "message": "Add support for UUID type (#7152)"}, {"oid": "a1b984d4ee1ab75372d6ab481dee2216f113192b", "committedDate": "2021-04-28 09:39:14 +0200", "message": "RealmAny datatype (#7398)"}, {"oid": "57d24b4725c4bf4bfc38c35b286b8ed4a2c6f5f6", "committedDate": "2021-04-28 18:48:04 +0200", "message": "Dictionary data type (#7397)"}, {"oid": "5a1cd32416d78dd4f0b4fe0de266924a89e92b17", "committedDate": "2021-04-29 14:32:32 +0200", "message": "Set data type (#7442)"}]}, {"oid": "8cc0cb4dc44335bab0aaf61670497dfe4fbdfe0b", "url": "https://github.com/realm/realm-java/commit/8cc0cb4dc44335bab0aaf61670497dfe4fbdfe0b", "message": "Fix retrieval of null valued primitive property from dynamic realm", "committedDate": "2020-08-24T10:41:12Z", "type": "commit"}, {"oid": "8cc0cb4dc44335bab0aaf61670497dfe4fbdfe0b", "url": "https://github.com/realm/realm-java/commit/8cc0cb4dc44335bab0aaf61670497dfe4fbdfe0b", "message": "Fix retrieval of null valued primitive property from dynamic realm", "committedDate": "2020-08-24T10:41:12Z", "type": "forcePushed"}, {"oid": "587a7a4b7597393b0a68ca1bfff03e8f5029f2f9", "url": "https://github.com/realm/realm-java/commit/587a7a4b7597393b0a68ca1bfff03e8f5029f2f9", "message": "Testing retrieval of null values for all types", "committedDate": "2020-08-27T13:06:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTM4NQ==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r482921385", "body": "These tests do not seem related in a test named `getNullableFields` Lists can never be `null` and I hope that adding null is tested elsewhere, if not, it should probably be in its own test?", "bodyText": "These tests do not seem related in a test named getNullableFields Lists can never be null and I hope that adding null is tested elsewhere, if not, it should probably be in its own test?", "bodyHTML": "<p dir=\"auto\">These tests do not seem related in a test named <code>getNullableFields</code> Lists can never be <code>null</code> and I hope that adding null is tested elsewhere, if not, it should probably be in its own test?</p>", "author": "cmelchior", "createdAt": "2020-09-03T11:56:30Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java", "diffHunk": "@@ -1629,4 +1631,95 @@ public void run() {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n+\n+    @Test\n+    public void getNullableFields() {\n+        realm.executeTransaction(realm -> {\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);", "originalCommit": "587a7a4b7597393b0a68ca1bfff03e8f5029f2f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3NDQxMQ==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r484474411", "bodyText": "The issue was that we could not return null values for nullable fields from a dynamic realm. I thought it would be safest to also included a check of retrieving a null value from a list from a dynamic realm. I could try to find another place for the test...or update the name of the test to getNullForNullables ... ?", "author": "rorbech", "createdAt": "2020-09-07T14:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTM4NQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "bd59aa72e66ee6585039c0bd3642d2fce6fdb3ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex d4d584d6c..8f2f5ad75 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1631,95 +1629,4 @@ public class DynamicRealmObjectTests {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n-\n-    @Test\n-    public void getNullableFields() {\n-        realm.executeTransaction(realm -> {\n-            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n-            primitiveNullables.setFieldBoolean(null);\n-\n-            assertNull(primitiveNullables.getFieldBoolean());\n-            assertNull(primitiveNullables.getFieldInt());\n-            assertNull(primitiveNullables.getFieldFloat());\n-            assertNull(primitiveNullables.getFieldDouble());\n-            assertNull(primitiveNullables.getFieldString());\n-            assertNull(primitiveNullables.getFieldBinary());\n-            assertNull(primitiveNullables.getFieldDate());\n-\n-            realm.delete(AllJavaTypes.class);\n-            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n-\n-            assertNull(allJavaTypes.getFieldObject());\n-            allJavaTypes.getFieldBooleanList().add(null);\n-            allJavaTypes.getFieldIntegerList().add(null);\n-            allJavaTypes.getFieldFloatList().add(null);\n-            allJavaTypes.getFieldDoubleList().add(null);\n-            allJavaTypes.getFieldStringList().add(null);\n-            allJavaTypes.getFieldBinaryList().add(null);\n-            allJavaTypes.getFieldDateList().add(null);\n-        });\n-        realm.close();\n-        dynamicRealm.refresh();\n-\n-        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n-        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n-\n-        for (RealmFieldType value : RealmFieldType.values()) {\n-            switch (value) {\n-                case INTEGER:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n-                    break;\n-                case BOOLEAN:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n-                    break;\n-                case STRING:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n-                    break;\n-                case BINARY:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n-                    break;\n-                case DATE:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n-                    break;\n-                case FLOAT:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n-                    break;\n-                case DOUBLE:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n-                    break;\n-                case OBJECT:\n-                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n-                    break;\n-                case INTEGER_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n-                    break;\n-                case BOOLEAN_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n-                    break;\n-                case STRING_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n-                    break;\n-                case BINARY_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n-                    break;\n-                case DATE_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n-                    break;\n-                case FLOAT_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n-                    break;\n-                case DOUBLE_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n-                    break;\n-                case LIST:\n-                case LINKING_OBJECTS:\n-                    // Realm lists and back links cannot be null\n-                    break;\n-                default:\n-                    fail(\"Not testing all types\");\n-            }\n-        }\n-        dynamicRealm.close();\n-    }\n-\n }\n", "next_change": {"commit": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex 8f2f5ad75..a916cfc06 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1629,4 +1729,95 @@ public class DynamicRealmObjectTests {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n+\n+    @Test\n+    public void getNullableFields() {\n+        realm.executeTransaction(realm -> {\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);\n+            allJavaTypes.getFieldIntegerList().add(null);\n+            allJavaTypes.getFieldFloatList().add(null);\n+            allJavaTypes.getFieldDoubleList().add(null);\n+            allJavaTypes.getFieldStringList().add(null);\n+            allJavaTypes.getFieldBinaryList().add(null);\n+            allJavaTypes.getFieldDateList().add(null);\n+        });\n+        realm.close();\n+        dynamicRealm.refresh();\n+\n+        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n+        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n+\n+        for (RealmFieldType value : RealmFieldType.values()) {\n+            switch (value) {\n+                case INTEGER:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n+                    break;\n+                case BOOLEAN:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n+                    break;\n+                case STRING:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n+                    break;\n+                case BINARY:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n+                    break;\n+                case DATE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n+                    break;\n+                case FLOAT:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n+                    break;\n+                case DOUBLE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n+                    break;\n+                case OBJECT:\n+                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n+                    break;\n+                case INTEGER_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n+                    break;\n+                case BOOLEAN_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n+                    break;\n+                case STRING_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n+                    break;\n+                case BINARY_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n+                    break;\n+                case DATE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n+                    break;\n+                case FLOAT_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n+                    break;\n+                case DOUBLE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n+                    break;\n+                case LIST:\n+                case LINKING_OBJECTS:\n+                    // Realm lists and back links cannot be null\n+                    break;\n+                default:\n+                    fail(\"Not testing all types\");\n+            }\n+        }\n+        dynamicRealm.close();\n+    }\n+\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ea7d3799be8ea4610c6abc4c31c5ffe5eff6d9cc", "message": "Merge commit", "committedDate": null}, {"oid": "bd59aa72e66ee6585039c0bd3642d2fce6fdb3ed", "committedDate": "2020-03-07 22:27:44 +0100", "message": "Upgrade to AndroidX test artifacts (#6769)"}, {"oid": "93e1b43ed721744b5f198016cf67f72f2fc6787b", "committedDate": "2020-04-22 11:45:14 +0100", "message": "Add support for MongoDB datatypes: Decimal128 and ObjectId (#6722)"}, {"oid": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "committedDate": "2020-10-13 09:38:49 +0200", "message": "Merge branch 'master' into v10"}, {"oid": "6d7a200d3c0ae24c4ccb5cb2b3e6b74105661788", "committedDate": "2020-10-13 14:47:01 +0200", "message": "Fix nullable tests"}, {"oid": "64b3a8ceaed6b3b3a992ee741d22a9c01dbae155", "committedDate": "2020-12-09 10:21:30 +0100", "message": "Add support for UUID type (#7152)"}, {"oid": "a1b984d4ee1ab75372d6ab481dee2216f113192b", "committedDate": "2021-04-28 09:39:14 +0200", "message": "RealmAny datatype (#7398)"}, {"oid": "57d24b4725c4bf4bfc38c35b286b8ed4a2c6f5f6", "committedDate": "2021-04-28 18:48:04 +0200", "message": "Dictionary data type (#7397)"}, {"oid": "5a1cd32416d78dd4f0b4fe0de266924a89e92b17", "committedDate": "2021-04-29 14:32:32 +0200", "message": "Set data type (#7442)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMjY1NA==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r482922654", "body": "all of these should be tested below?", "bodyText": "all of these should be tested below?", "bodyHTML": "<p dir=\"auto\">all of these should be tested below?</p>", "author": "cmelchior", "createdAt": "2020-09-03T11:58:48Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java", "diffHunk": "@@ -1629,4 +1631,95 @@ public void run() {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n+\n+    @Test\n+    public void getNullableFields() {\n+        realm.executeTransaction(realm -> {\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());", "originalCommit": "587a7a4b7597393b0a68ca1bfff03e8f5029f2f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3NTA4MQ==", "url": "https://github.com/realm/realm-java/pull/7053#discussion_r484475081", "bodyText": "Yes. I was just asserting that they were actually null when retrieved from the typed realm.", "author": "rorbech", "createdAt": "2020-09-07T14:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMjY1NA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "bd59aa72e66ee6585039c0bd3642d2fce6fdb3ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex d4d584d6c..8f2f5ad75 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1631,95 +1629,4 @@ public class DynamicRealmObjectTests {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n-\n-    @Test\n-    public void getNullableFields() {\n-        realm.executeTransaction(realm -> {\n-            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n-            primitiveNullables.setFieldBoolean(null);\n-\n-            assertNull(primitiveNullables.getFieldBoolean());\n-            assertNull(primitiveNullables.getFieldInt());\n-            assertNull(primitiveNullables.getFieldFloat());\n-            assertNull(primitiveNullables.getFieldDouble());\n-            assertNull(primitiveNullables.getFieldString());\n-            assertNull(primitiveNullables.getFieldBinary());\n-            assertNull(primitiveNullables.getFieldDate());\n-\n-            realm.delete(AllJavaTypes.class);\n-            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n-\n-            assertNull(allJavaTypes.getFieldObject());\n-            allJavaTypes.getFieldBooleanList().add(null);\n-            allJavaTypes.getFieldIntegerList().add(null);\n-            allJavaTypes.getFieldFloatList().add(null);\n-            allJavaTypes.getFieldDoubleList().add(null);\n-            allJavaTypes.getFieldStringList().add(null);\n-            allJavaTypes.getFieldBinaryList().add(null);\n-            allJavaTypes.getFieldDateList().add(null);\n-        });\n-        realm.close();\n-        dynamicRealm.refresh();\n-\n-        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n-        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n-\n-        for (RealmFieldType value : RealmFieldType.values()) {\n-            switch (value) {\n-                case INTEGER:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n-                    break;\n-                case BOOLEAN:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n-                    break;\n-                case STRING:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n-                    break;\n-                case BINARY:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n-                    break;\n-                case DATE:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n-                    break;\n-                case FLOAT:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n-                    break;\n-                case DOUBLE:\n-                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n-                    break;\n-                case OBJECT:\n-                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n-                    break;\n-                case INTEGER_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n-                    break;\n-                case BOOLEAN_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n-                    break;\n-                case STRING_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n-                    break;\n-                case BINARY_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n-                    break;\n-                case DATE_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n-                    break;\n-                case FLOAT_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n-                    break;\n-                case DOUBLE_LIST:\n-                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n-                    break;\n-                case LIST:\n-                case LINKING_OBJECTS:\n-                    // Realm lists and back links cannot be null\n-                    break;\n-                default:\n-                    fail(\"Not testing all types\");\n-            }\n-        }\n-        dynamicRealm.close();\n-    }\n-\n }\n", "next_change": {"commit": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "changed_code": [{"header": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\nindex 8f2f5ad75..a916cfc06 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java\n", "chunk": "@@ -1629,4 +1729,95 @@ public class DynamicRealmObjectTests {\n         thread.start();\n         TestHelper.awaitOrFail(threadFinished);\n     }\n+\n+    @Test\n+    public void getNullableFields() {\n+        realm.executeTransaction(realm -> {\n+            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);\n+            primitiveNullables.setFieldBoolean(null);\n+\n+            assertNull(primitiveNullables.getFieldBoolean());\n+            assertNull(primitiveNullables.getFieldInt());\n+            assertNull(primitiveNullables.getFieldFloat());\n+            assertNull(primitiveNullables.getFieldDouble());\n+            assertNull(primitiveNullables.getFieldString());\n+            assertNull(primitiveNullables.getFieldBinary());\n+            assertNull(primitiveNullables.getFieldDate());\n+\n+            realm.delete(AllJavaTypes.class);\n+            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());\n+\n+            assertNull(allJavaTypes.getFieldObject());\n+            allJavaTypes.getFieldBooleanList().add(null);\n+            allJavaTypes.getFieldIntegerList().add(null);\n+            allJavaTypes.getFieldFloatList().add(null);\n+            allJavaTypes.getFieldDoubleList().add(null);\n+            allJavaTypes.getFieldStringList().add(null);\n+            allJavaTypes.getFieldBinaryList().add(null);\n+            allJavaTypes.getFieldDateList().add(null);\n+        });\n+        realm.close();\n+        dynamicRealm.refresh();\n+\n+        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();\n+        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();\n+\n+        for (RealmFieldType value : RealmFieldType.values()) {\n+            switch (value) {\n+                case INTEGER:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));\n+                    break;\n+                case BOOLEAN:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));\n+                    break;\n+                case STRING:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));\n+                    break;\n+                case BINARY:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));\n+                    break;\n+                case DATE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));\n+                    break;\n+                case FLOAT:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));\n+                    break;\n+                case DOUBLE:\n+                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));\n+                    break;\n+                case OBJECT:\n+                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));\n+                    break;\n+                case INTEGER_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));\n+                    break;\n+                case BOOLEAN_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));\n+                    break;\n+                case STRING_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));\n+                    break;\n+                case BINARY_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));\n+                    break;\n+                case DATE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));\n+                    break;\n+                case FLOAT_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));\n+                    break;\n+                case DOUBLE_LIST:\n+                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));\n+                    break;\n+                case LIST:\n+                case LINKING_OBJECTS:\n+                    // Realm lists and back links cannot be null\n+                    break;\n+                default:\n+                    fail(\"Not testing all types\");\n+            }\n+        }\n+        dynamicRealm.close();\n+    }\n+\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ea7d3799be8ea4610c6abc4c31c5ffe5eff6d9cc", "message": "Merge commit", "committedDate": null}, {"oid": "bd59aa72e66ee6585039c0bd3642d2fce6fdb3ed", "committedDate": "2020-03-07 22:27:44 +0100", "message": "Upgrade to AndroidX test artifacts (#6769)"}, {"oid": "93e1b43ed721744b5f198016cf67f72f2fc6787b", "committedDate": "2020-04-22 11:45:14 +0100", "message": "Add support for MongoDB datatypes: Decimal128 and ObjectId (#6722)"}, {"oid": "77f033e8981a3f7e953a3bcd33a26a9607b0e79a", "committedDate": "2020-10-13 09:38:49 +0200", "message": "Merge branch 'master' into v10"}, {"oid": "6d7a200d3c0ae24c4ccb5cb2b3e6b74105661788", "committedDate": "2020-10-13 14:47:01 +0200", "message": "Fix nullable tests"}, {"oid": "64b3a8ceaed6b3b3a992ee741d22a9c01dbae155", "committedDate": "2020-12-09 10:21:30 +0100", "message": "Add support for UUID type (#7152)"}, {"oid": "a1b984d4ee1ab75372d6ab481dee2216f113192b", "committedDate": "2021-04-28 09:39:14 +0200", "message": "RealmAny datatype (#7398)"}, {"oid": "57d24b4725c4bf4bfc38c35b286b8ed4a2c6f5f6", "committedDate": "2021-04-28 18:48:04 +0200", "message": "Dictionary data type (#7397)"}, {"oid": "5a1cd32416d78dd4f0b4fe0de266924a89e92b17", "committedDate": "2021-04-29 14:32:32 +0200", "message": "Set data type (#7442)"}]}, {"oid": "bbd78cb5a0d977bc612d493b2209390cce0a4499", "url": "https://github.com/realm/realm-java/commit/bbd78cb5a0d977bc612d493b2209390cce0a4499", "message": "Update CHANGELOG.md\n\nCo-authored-by: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-09-03T13:16:20Z", "type": "commit"}]}