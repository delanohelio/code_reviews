{"pr_number": 7123, "pr_title": "Add \"allowWritesOnUiThread\" and \"allowReadsOnUiThread\" to RealmConfiguration", "pr_author": "edualonso", "pr_createdAt": "2020-09-23T10:33:08Z", "pr_url": "https://github.com/realm/realm-java/pull/7123", "timeline": [{"oid": "5bc164249976aaaf2ebb07fe6b7c58f733f58869", "url": "https://github.com/realm/realm-java/commit/5bc164249976aaaf2ebb07fe6b7c58f733f58869", "message": "Added allowWritesOnUiThread to RealmConfig which allows opting in for async writes launched from the UI thread. The default setting is set to disallow these writes as it cannot guarantee consistency in results.", "committedDate": "2020-09-23T10:27:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzNDQyMA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r493434420", "body": "There is some misunderstanding here. Async transactions don't run on the UI thread, they are only started there, but actually run in a background thread, so this test and implementation is wrong. The only thing that should be disallowed is `executeTransaction()` (which runs on the same thread).", "bodyText": "There is some misunderstanding here. Async transactions don't run on the UI thread, they are only started there, but actually run in a background thread, so this test and implementation is wrong. The only thing that should be disallowed is executeTransaction() (which runs on the same thread).", "bodyHTML": "<p dir=\"auto\">There is some misunderstanding here. Async transactions don't run on the UI thread, they are only started there, but actually run in a background thread, so this test and implementation is wrong. The only thing that should be disallowed is <code>executeTransaction()</code> (which runs on the same thread).</p>", "author": "cmelchior", "createdAt": "2020-09-23T10:40:25Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,76 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransactionAsync_mainThreadQueriesAllowed() {\n+        CountDownLatch countDownLatch = new CountDownLatch(1);\n+\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransactionAsync(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+                countDownLatch.countDown();\n+            }\n+        });\n+\n+        TestHelper.awaitOrFail(countDownLatch);\n+\n+        // Avoid stale data\n+        realm.refresh();\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransactionAsync_throwsWhenRunningOnMainThread() {", "originalCommit": "5bc164249976aaaf2ebb07fe6b7c58f733f58869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzNTA5Mg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r493435092", "body": "Shouldn't this be named `executeTransaction_mainThreadWritesAllowed()`?", "bodyText": "Shouldn't this be named executeTransaction_mainThreadWritesAllowed()?", "bodyHTML": "<p dir=\"auto\">Shouldn't this be named <code>executeTransaction_mainThreadWritesAllowed()</code>?</p>", "author": "cmelchior", "createdAt": "2020-09-23T10:41:10Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,76 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransactionAsync_mainThreadQueriesAllowed() {", "originalCommit": "5bc164249976aaaf2ebb07fe6b7c58f733f58869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "495411a5728797eae9bde20d54359af092a16fb2", "url": "https://github.com/realm/realm-java/commit/495411a5728797eae9bde20d54359af092a16fb2", "message": "Fixed silly misunderstanding with async method.", "committedDate": "2020-09-23T13:52:56Z", "type": "commit"}, {"oid": "08659f122e758bbb0c086ec570ecd369cd66459a", "url": "https://github.com/realm/realm-java/commit/08659f122e758bbb0c086ec570ecd369cd66459a", "message": "Added allowQueriesOnUiThread to the API", "committedDate": "2020-09-23T14:34:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3ODQwNQ==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494778405", "body": "```suggestion\r\n                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in using 'RealmConfiguration.allowQueriesOnUiThread'.\");\n          \n          \n            \n                            throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in using 'RealmConfiguration.allowQueriesOnUiThread'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in <span class=\"x x-first x-last\">by </span>using 'RealmConfiguration.allowQueriesOnUiThread'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edualonso", "createdAt": "2020-09-25T06:39:58Z", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -82,6 +84,15 @@\n      * to run it.\n      */\n     static <E extends RealmModel> RealmQuery<E> createQuery(Realm realm, Class<E> clazz) {\n+        // Warn on query being executed on UI thread if isAllowQueriesOnUiThread is set to true, throw otherwise\n+        if (realm.getSharedRealm().capabilities.isMainThread()) {\n+            if (realm.getConfiguration().isAllowQueriesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run queries on the UI thread as it may lead to a drop of frames or ANRs. Please consider doing so from another thread instead.\");\n+            } else {\n+                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in using 'RealmConfiguration.allowQueriesOnUiThread'.\");", "originalCommit": "08659f122e758bbb0c086ec570ecd369cd66459a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc3ODUxOA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494778518", "body": "```suggestion\r\n                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in using 'RealmConfiguration.allowWritesOnUiThread'.\");\n          \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Running transactions on the UI thread is disabled by default. You can opt in using 'RealmConfiguration.allowWritesOnUiThread'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Running transactions on the UI thread is disabled by default. You can opt in <span class=\"x x-first x-last\">by </span>using 'RealmConfiguration.allowWritesOnUiThread'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edualonso", "createdAt": "2020-09-25T06:40:13Z", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");\n+            } else {\n+                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in using 'RealmConfiguration.allowWritesOnUiThread'.\");", "originalCommit": "08659f122e758bbb0c086ec570ecd369cd66459a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "url": "https://github.com/realm/realm-java/commit/d3a7ba5b1d6398da1326323bc93cc2a432565122", "message": "Apply suggestions from code review\r\n\r\nFixed typos", "committedDate": "2020-09-25T06:41:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc4OTU1NQ==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494789555", "body": "This is not documented in `@throws`. The documentation could also point to `executeTransactionAsync` to guide users around this.", "bodyText": "This is not documented in @throws. The documentation could also point to executeTransactionAsync to guide users around this.", "bodyHTML": "<p dir=\"auto\">This is not documented in <code>@throws</code>. The documentation could also point to <code>executeTransactionAsync</code> to guide users around this.</p>", "author": "rorbech", "createdAt": "2020-09-25T07:06:44Z", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");\n+            } else {\n+                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5MTY4MA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494791680", "body": "I guess we don't explicitly document throwing RealmExceptions from all the queries, but maybe some class level documentation about this pointing to the async variants?", "bodyText": "I guess we don't explicitly document throwing RealmExceptions from all the queries, but maybe some class level documentation about this pointing to the async variants?", "bodyHTML": "<p dir=\"auto\">I guess we don't explicitly document throwing RealmExceptions from all the queries, but maybe some class level documentation about this pointing to the async variants?</p>", "author": "rorbech", "createdAt": "2020-09-25T07:11:37Z", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -82,6 +84,15 @@\n      * to run it.\n      */\n     static <E extends RealmModel> RealmQuery<E> createQuery(Realm realm, Class<E> clazz) {\n+        // Warn on query being executed on UI thread if isAllowQueriesOnUiThread is set to true, throw otherwise\n+        if (realm.getSharedRealm().capabilities.isMainThread()) {\n+            if (realm.getConfiguration().isAllowQueriesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run queries on the UI thread as it may lead to a drop of frames or ANRs. Please consider doing so from another thread instead.\");\n+            } else {\n+                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5MzQ2Ng==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494793466", "body": "Regardless of setting? Maybe set it explicitly to false and verify that it does not break and test default values in configuration tests. ", "bodyText": "Regardless of setting? Maybe set it explicitly to false and verify that it does not break and test default values in configuration tests.", "bodyHTML": "<p dir=\"auto\">Regardless of setting? Maybe set it explicitly to false and verify that it does not break and test default values in configuration tests.</p>", "author": "rorbech", "createdAt": "2020-09-25T07:15:40Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc5Mzk2OQ==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494793969", "body": "Again, maybe add explicit `.allowQueriesOnUiThread(true)` and add configuration tests verifying default values. ", "bodyText": "Again, maybe add explicit .allowQueriesOnUiThread(true) and add configuration tests verifying default values.", "bodyHTML": "<p dir=\"auto\">Again, maybe add explicit <code>.allowQueriesOnUiThread(true)</code> and add configuration tests verifying default values.</p>", "author": "rorbech", "createdAt": "2020-09-25T07:16:48Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2OTU2NA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494869564", "body": "You are only testing one setting in this test. Shouldn't you manually create two different configurations? One with `allowWritesOnUiThread(true)` and one with `allowWritesOnUiThread(false)`?", "bodyText": "You are only testing one setting in this test. Shouldn't you manually create two different configurations? One with allowWritesOnUiThread(true) and one with allowWritesOnUiThread(false)?", "bodyHTML": "<p dir=\"auto\">You are only testing one setting in this test. Shouldn't you manually create two different configurations? One with <code>allowWritesOnUiThread(true)</code> and one with <code>allowWritesOnUiThread(false)</code>?</p>", "author": "cmelchior", "createdAt": "2020-09-25T09:37:00Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MDY0Mg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494870642", "body": "Shouldn't this be `query_runOnNonUiThreadAllowed()`?", "bodyText": "Shouldn't this be query_runOnNonUiThreadAllowed()?", "bodyHTML": "<p dir=\"auto\">Shouldn't this be <code>query_runOnNonUiThreadAllowed()</code>?</p>", "author": "cmelchior", "createdAt": "2020-09-25T09:38:51Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.where(Dog.class).findAll();\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadThrows() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowQueriesOnUiThread(false)\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.where(Dog.class).findAll();\n+            fail(\"This test specifies queries are not allowed to run on the UI thread, so something went awry.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowQueriesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void query_runOnAnyThreadAllowed() {", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MTk5OA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494871998", "body": "With this setting, you also need to check and throw if `Realm.refresh()` is being called, because that will convert async queries to sync queries which would violate this restriction.", "bodyText": "With this setting, you also need to check and throw if Realm.refresh() is being called, because that will convert async queries to sync queries which would violate this restriction.", "bodyHTML": "<p dir=\"auto\">With this setting, you also need to check and throw if <code>Realm.refresh()</code> is being called, because that will convert async queries to sync queries which would violate this restriction.</p>", "author": "cmelchior", "createdAt": "2020-09-25T09:41:07Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,101 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_throwsWhenRunningOnMainThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThreadRegardlessOfSetting() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.where(Dog.class).findAll();\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadThrows() {", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxOTIwMg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494919202", "bodyText": "Yes, we discussed that yesterday. I'm still working on it \ud83d\udc4d", "author": "edualonso", "createdAt": "2020-09-25T11:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MzEwNA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494873104", "body": "Not sure we should log this as a warning if enabled. It is only enabled if you manually opt into it, so hopefully, people are already aware of the tradeoff and the warn level will most likely become visible to users since that is the default setting.", "bodyText": "Not sure we should log this as a warning if enabled. It is only enabled if you manually opt into it, so hopefully, people are already aware of the tradeoff and the warn level will most likely become visible to users since that is the default setting.", "bodyHTML": "<p dir=\"auto\">Not sure we should log this as a warning if enabled. It is only enabled if you manually opt into it, so hopefully, people are already aware of the tradeoff and the warn level will most likely become visible to users since that is the default setting.</p>", "author": "cmelchior", "createdAt": "2020-09-25T09:42:55Z", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxOTE4OA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494919188", "bodyText": "What should we do then? User RealmLog.info instead?", "author": "edualonso", "createdAt": "2020-09-25T11:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MzEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3ODQ2NA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494978464", "bodyText": "I would probably just remove it completely", "author": "cmelchior", "createdAt": "2020-09-25T13:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MzEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NDQ5NA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494874494", "body": "```suggestion\r\n                throw new RealmException(\"Running transactions on the UI thread are disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread', or avoid it by using 'Realm.executeTransactionAsync()'.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");\n          \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread are disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread', or avoid it by using 'Realm.executeTransactionAsync()'.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Running transactions on the UI thread <span class=\"x x-first x-last\">is</span> disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Running transactions on the UI thread <span class=\"x x-first x-last\">are</span> disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread<span class=\"x x-first x-last\">', or avoid it by using 'Realm.executeTransactionAsync()</span>'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-09-25T09:45:12Z", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1525,6 +1525,15 @@ public void executeTransaction(Transaction transaction) {\n             throw new IllegalArgumentException(\"Transaction should not be null\");\n         }\n \n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (sharedRealm.capabilities.isMainThread()) {\n+            if (getConfiguration().isAllowWritesOnUiThread()) {\n+                RealmLog.warn(\"It is not recommended to run transactions on the UI thread as it may lead to a drop of frames or ANRs. Please consider using 'executeTransactionAsync' instead.\");\n+            } else {\n+                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread'.\");", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NjIzMw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494876233", "body": "```suggestion\r\n         * Sets whether or not you are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread. \r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n          \n          \n            \n                     * Sets whether or not you are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">         <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Sets</span> whether or not <span class=\"x x-first x-last\">users</span> are allowed to perform calls to {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Realm</span>#executeTransaction} from the <span class=\"pl-c1\">UI</span> thread.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">         <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Sets</span> whether or not <span class=\"x x-first x-last\">you</span> are allowed to perform calls to {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Realm</span>#executeTransaction} from the <span class=\"pl-c1\">UI</span> thread.<span class=\"x x-first x-last\"> </span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-09-25T09:48:11Z", "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "diffHunk": "@@ -797,6 +829,28 @@ final Builder schema(Class<? extends RealmModel> firstClass, Class<? extends Rea\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3Njc2Mg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494876762", "body": "The comment you had here is actually pretty great at describing the issue and work-around. I would add that description to this doc as well: https://github.com/realm/realm-java/pull/7123/files#diff-b77f99deee1ca52ca3dc3e47554e4e50R1531", "bodyText": "The comment you had here is actually pretty great at describing the issue and work-around. I would add that description to this doc as well: https://github.com/realm/realm-java/pull/7123/files#diff-b77f99deee1ca52ca3dc3e47554e4e50R1531", "bodyHTML": "<p dir=\"auto\">The comment you had here is actually pretty great at describing the issue and work-around. I would add that description to this doc as well: <a href=\"https://github.com/realm/realm-java/pull/7123/files#diff-b77f99deee1ca52ca3dc3e47554e4e50R1531\">https://github.com/realm/realm-java/pull/7123/files#diff-b77f99deee1ca52ca3dc3e47554e4e50R1531</a></p>", "author": "cmelchior", "createdAt": "2020-09-25T09:49:09Z", "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "diffHunk": "@@ -797,6 +829,28 @@ final Builder schema(Class<? extends RealmModel> firstClass, Class<? extends Rea\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n+         * <p>", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NzEwOQ==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494877109", "body": "I would also add a line about being cautious about doing this and using `REalmQuery.findAllAsync()` is the preferred approach.", "bodyText": "I would also add a line about being cautious about doing this and using REalmQuery.findAllAsync() is the preferred approach.", "bodyHTML": "<p dir=\"auto\">I would also add a line about being cautious about doing this and using <code>REalmQuery.findAllAsync()</code> is the preferred approach.</p>", "author": "cmelchior", "createdAt": "2020-09-25T09:49:46Z", "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "diffHunk": "@@ -797,6 +829,28 @@ final Builder schema(Class<? extends RealmModel> firstClass, Class<? extends Rea\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n+         * <p>\n+         * <b>Note: Realm does not allow synchronous transactions to be run on the main thread unless users explicitly opt in\n+         * with this method.</b>\n+         */\n+        public Builder allowWritesOnUiThread(boolean allowWritesOnUiThread) {\n+            this.allowWritesOnUiThread = allowWritesOnUiThread;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether or not RealmQueries are allowed from the UI thread.\n+         * <p>", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NzU2Mw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494877563", "body": "Any changes to the Javadoc in `RealmConfiguration.Builder()` should be reflected here.", "bodyText": "Any changes to the Javadoc in RealmConfiguration.Builder() should be reflected here.", "bodyHTML": "<p dir=\"auto\">Any changes to the Javadoc in <code>RealmConfiguration.Builder()</code> should be reflected here.</p>", "author": "cmelchior", "createdAt": "2020-09-25T09:50:26Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncConfiguration.java", "diffHunk": "@@ -1012,6 +1019,28 @@ public Builder maxNumberOfActiveVersions(long number) {\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n+         * <p>", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NzU5Nw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494877597", "body": "Same", "bodyText": "Same", "bodyHTML": "<p dir=\"auto\">Same</p>", "author": "cmelchior", "createdAt": "2020-09-25T09:50:30Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncConfiguration.java", "diffHunk": "@@ -1012,6 +1019,28 @@ public Builder maxNumberOfActiveVersions(long number) {\n             return this;\n         }\n \n+        /**\n+         * Sets whether or not users are allowed to perform calls to {@link Realm#executeTransaction} from the UI thread.\n+         * <p>\n+         * <b>Note: Realm does not allow synchronous transactions to be run on the main thread unless users explicitly opt in\n+         * with this method.</b>\n+         */\n+        public Builder allowWritesOnUiThread(boolean allowWritesOnUiThread) {\n+            this.allowWritesOnUiThread = allowWritesOnUiThread;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets whether or not RealmQueries are allowed from the UI thread.\n+         * <p>", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3ODQxMw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r494878413", "body": "```suggestion\r\n     * Returns whether {@link RealmQuery} are allowed from the UI thread.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns whether {@code RealmQueries} are allowed from the UI thread.\n          \n          \n            \n                 * Returns whether {@link RealmQuery} are allowed from the UI thread.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> whether {<span class=\"pl-k\">@<span class=\"x x-first\">code</span></span><span class=\"x\"> </span><span class=\"pl-smi x x-last\">RealmQueries</span>} are allowed from the <span class=\"pl-c1\">UI</span> thread.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> whether {<span class=\"pl-k\">@<span class=\"x x-first\">link</span></span><span class=\"x\"> </span><span class=\"pl-smi x x-last\">RealmQuery</span>} are allowed from the <span class=\"pl-c1\">UI</span> thread.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-09-25T09:51:52Z", "path": "realm/realm-library/src/main/java/io/realm/RealmConfiguration.java", "diffHunk": "@@ -288,6 +292,30 @@ public long getMaxNumberOfActiveVersions() {\n         return maxNumberOfActiveVersions;\n     }\n \n+    /**\n+     * Returns whether calls to {@link Realm#executeTransaction} can be done on the UI thread.\n+     * <p>\n+     * <b>Note: Realm does not allow blocking transactions to be run on the main thread unless users explicitly opt in with\n+     * {@link Builder#allowWritesOnUiThread(boolean)} or its Realm Sync builder counterpart.</b>\n+     *\n+     * @return whether or not write operations are allowed to be run from the UI thread.\n+     */\n+    public boolean isAllowWritesOnUiThread() {\n+        return allowWritesOnUiThread;\n+    }\n+\n+    /**\n+     * Returns whether {@code RealmQueries} are allowed from the UI thread.", "originalCommit": "d3a7ba5b1d6398da1326323bc93cc2a432565122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f4348d69f2870d7e4711a1c54819f5f8134aff51", "url": "https://github.com/realm/realm-java/commit/f4348d69f2870d7e4711a1c54819f5f8134aff51", "message": "Improved tests and documentation plus moved checks to BaseRealm", "committedDate": "2020-09-25T18:48:11Z", "type": "commit"}, {"oid": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "url": "https://github.com/realm/realm-java/commit/0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "message": "Updated changelog", "committedDate": "2020-09-25T19:04:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNzY5Ng==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495737696", "body": "We should also test `count/min/max/average`", "bodyText": "We should also test count/min/max/average", "bodyHTML": "<p dir=\"auto\">We should also test <code>count/min/max/average</code></p>", "author": "cmelchior", "createdAt": "2020-09-28T07:24:59Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -1411,6 +1415,121 @@ public void onChange(RealmResults<AllTypes> results) {\n         });\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                realm.insert(new Dog(\"Snuffles\"));\n+            }\n+        });\n+\n+        RealmResults<Dog> results = realm.where(Dog.class).equalTo(\"name\", \"Snuffles\").findAll();\n+        assertEquals(1, results.size());\n+        assertNotNull(results.first());\n+        assertEquals(\"Snuffles\", Objects.requireNonNull(results.first()).getName());\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void executeTransaction_mainThreadWritesNotAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(false)\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.executeTransaction(new Realm.Transaction() {\n+                @Override\n+                public void execute(Realm realm) {\n+                    // no-op\n+                }\n+            });\n+            fail(\"It is not allowed to run blocking transactions on the UI thread by default.\");\n+        } catch (RealmException e) {\n+            assertTrue(Objects.requireNonNull(e.getMessage()).contains(\"allowWritesOnUiThread\"));\n+        }\n+    }\n+\n+    @Test\n+    public void executeTransaction_runsOnNonUiThread() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowWritesOnUiThread(false)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.executeTransaction(new Realm.Transaction() {\n+            @Override\n+            public void execute(Realm realm) {\n+                // no-op\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowQueriesOnUiThread(true)\n+                .build();\n+\n+        Realm realm = Realm.getInstance(configuration);\n+        realm.where(Dog.class).findAll();\n+        realm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void query_runOnMainThreadThrows() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowQueriesOnUiThread(false)\n+                .build();\n+\n+        // Try-with-resources\n+        try (Realm realm = Realm.getInstance(configuration)) {\n+            realm.where(Dog.class).findAll();", "originalCommit": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczODQyMg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495738422", "body": "We should add the RealmException here as well.", "bodyText": "We should add the RealmException here as well.", "bodyHTML": "<p dir=\"auto\">We should add the RealmException here as well.</p>", "author": "cmelchior", "createdAt": "2020-09-28T07:26:30Z", "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "diffHunk": "@@ -177,13 +177,17 @@ public boolean isAutoRefresh() {\n      * It also calls any listeners associated with the Realm if needed.\n      * <p>\n      * WARNING: Calling this on a thread with async queries will turn those queries into synchronous queries.\n-     * In most cases it is better to use {@link RealmChangeListener}s to be notified about changes to the\n-     * Realm on a given thread than it is to use this method.\n+     * This means this method will throw a {@link RealmException} if\n+     * {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)} was used with {@code true} to\n+     * obtain a Realm instance. In most cases it is better to use {@link RealmChangeListener}s to be notified\n+     * about changes to the Realm on a given thread than it is to use this method.\n      *\n      * @throws IllegalStateException if attempting to refresh from within a transaction.", "originalCommit": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDU1NA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495740554", "body": "```suggestion\r\n                throw new RealmException(\"Queries on the UI thread have been disabled. They can be enabled by setting 'RealmConfiguration.Builder.allowQueriesOnUiThread(true)'.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");\n          \n          \n            \n                            throw new RealmException(\"Queries on the UI thread have been disabled. They can be enabled by setting 'RealmConfiguration.Builder.allowQueriesOnUiThread(true)'.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">There exists an opt-out for running queries </span>on the UI thread<span class=\"x x-first x-last\">. By default Realm allows queries from the UI thread. You</span> can <span class=\"x x-first x-last\">alternatively opt in </span>by <span class=\"x x-first x-last\">using</span> 'RealmConfiguration.allowQueriesOnUiThread'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Queries </span>on the UI thread<span class=\"x x-first x-last\"> have been disabled. They</span> can <span class=\"x x-first x-last\">be enabled </span>by <span class=\"x x-first x-last\">setting</span> 'RealmConfiguration.<span class=\"x x-first x-last\">Builder.</span>allowQueriesOnUiThread<span class=\"x x-first x-last\">(true)</span>'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-09-28T07:30:43Z", "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "diffHunk": "@@ -493,6 +497,30 @@ protected void checkIfValid() {\n         }\n     }\n \n+    /**\n+     * Checks whether queries are allowed from the UI thread in the current RealmConfiguration.\n+     */\n+    protected void checkAllowQueriesOnUiThread() {\n+        // Warn on query being executed on UI thread if isAllowQueriesOnUiThread is set to true, throw otherwise\n+        if (getSharedRealm().capabilities.isMainThread()) {\n+            if (!getConfiguration().isAllowQueriesOnUiThread()) {\n+                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");", "originalCommit": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDk1Mw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495740953", "body": "```suggestion\r\n                throw new RealmException(\"Running transactions on the UI thread have been disabled. They can be enabled by setting 'RealmConfiguration.Builder.allowQueriesOnUiThread(true)'.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread' or avoid it by using 'Realm.executeTransactionAsync'.\");\n          \n          \n            \n                            throw new RealmException(\"Running transactions on the UI thread have been disabled. They can be enabled by setting 'RealmConfiguration.Builder.allowQueriesOnUiThread(true)'.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Running transactions on the UI thread <span class=\"x x-first x-last\">is disabled by default. You</span> can <span class=\"x x-first x-last\">opt in</span> by <span class=\"x x-first x-last\">using</span> 'RealmConfiguration.<span class=\"x x-first x-last\">allowWritesOnUiThread' or avoid it by using 'Realm.executeTransactionAsync</span>'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RealmException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Running transactions on the UI thread <span class=\"x x-first x-last\">have been disabled. They</span> can <span class=\"x x-first x-last\">be enabled</span> by <span class=\"x x-first x-last\">setting</span> 'RealmConfiguration.<span class=\"x x-first x-last\">Builder.allowQueriesOnUiThread(true)</span>'.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-09-28T07:31:34Z", "path": "realm/realm-library/src/main/java/io/realm/BaseRealm.java", "diffHunk": "@@ -493,6 +497,30 @@ protected void checkIfValid() {\n         }\n     }\n \n+    /**\n+     * Checks whether queries are allowed from the UI thread in the current RealmConfiguration.\n+     */\n+    protected void checkAllowQueriesOnUiThread() {\n+        // Warn on query being executed on UI thread if isAllowQueriesOnUiThread is set to true, throw otherwise\n+        if (getSharedRealm().capabilities.isMainThread()) {\n+            if (!getConfiguration().isAllowQueriesOnUiThread()) {\n+                throw new RealmException(\"There exists an opt-out for running queries on the UI thread. By default Realm allows queries from the UI thread. You can alternatively opt in by using 'RealmConfiguration.allowQueriesOnUiThread'.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks whether writes are allowed from the UI thread in the current RealmConfiguration.\n+     */\n+    protected void checkAllowWritesOnUiThread() {\n+        // Warn on transaction being executed on UI thread if allowWritesOnUiThread is set to true, throw otherwise\n+        if (getSharedRealm().capabilities.isMainThread()) {\n+            if (!getConfiguration().isAllowWritesOnUiThread()) {\n+                throw new RealmException(\"Running transactions on the UI thread is disabled by default. You can opt in by using 'RealmConfiguration.allowWritesOnUiThread' or avoid it by using 'Realm.executeTransactionAsync'.\");", "originalCommit": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MTEyMg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495741122", "body": "Maybe link to the option?", "bodyText": "Maybe link to the option?", "bodyHTML": "<p dir=\"auto\">Maybe link to the option?</p>", "author": "cmelchior", "createdAt": "2020-09-28T07:31:53Z", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1514,17 +1514,25 @@ public void removeAllChangeListeners() {\n      * Executes a given transaction on the Realm. {@link #beginTransaction()} and {@link #commitTransaction()} will be\n      * called automatically. If any exception is thrown during the transaction {@link #cancelTransaction()} will be\n      * called instead of {@link #commitTransaction()}.\n+     * <p>\n+     *\n+     * Calling this method from the UI thread will throw a {@link RealmException}. Doing so may result in a drop of frames\n+     * or even ANRs. We recommend calling this method from a non-UI thread or using\n+     * {@link #executeTransactionAsync(Transaction)} instead.\n      *\n      * @param transaction the {@link io.realm.Realm.Transaction} to execute.\n      * @throws IllegalArgumentException if the {@code transaction} is {@code null}.\n      * @throws RealmMigrationNeededException if the latest version contains incompatible schema changes.\n+     * @throws RealmException if called from the UI thread, unless an explicit opt-in has been declared in the configuration.", "originalCommit": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MTIwNw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495741207", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">     </span><span class=\"pl-k x x-last\">*</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-09-28T07:32:05Z", "path": "realm/realm-library/src/main/java/io/realm/Realm.java", "diffHunk": "@@ -1514,17 +1514,25 @@ public void removeAllChangeListeners() {\n      * Executes a given transaction on the Realm. {@link #beginTransaction()} and {@link #commitTransaction()} will be\n      * called automatically. If any exception is thrown during the transaction {@link #cancelTransaction()} will be\n      * called instead of {@link #commitTransaction()}.\n+     * <p>\n+     *", "originalCommit": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MTg0OA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495741848", "body": "This is not true, you can only launch the query from the Thread holding the Realm instance. Same for the other descriptions", "bodyText": "This is not true, you can only launch the query from the Thread holding the Realm instance. Same for the other descriptions", "bodyHTML": "<p dir=\"auto\">This is not true, you can only launch the query from the Thread holding the Realm instance. Same for the other descriptions</p>", "author": "cmelchior", "createdAt": "2020-09-28T07:33:29Z", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -51,6 +52,13 @@\n  * is required.\n  * <p>\n  * A RealmQuery cannot be passed between different threads.\n+ * <p>\n+ * Queries can be launched from any thread and results are obtained fairly quickly most of the times. However, launching", "originalCommit": "0f80f1f82d843a5c7976e2e9fa10006c69c2a05e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NTkyOA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r495755928", "bodyText": "Yeah, it was a broad generalisation. I will change it.", "author": "edualonso", "createdAt": "2020-09-28T08:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MTg0OA=="}], "type": "inlineReview"}, {"oid": "f6c34d17d7887cf7602e463ae8b33c120e7a97ec", "url": "https://github.com/realm/realm-java/commit/f6c34d17d7887cf7602e463ae8b33c120e7a97ec", "message": "Added missing tests for query ops, improved docs. Still missing tests for dynamic realms", "committedDate": "2020-09-28T09:59:48Z", "type": "commit"}, {"oid": "f6bd7a2c7f83ab9253a47730cd13163cbf0ffda1", "url": "https://github.com/realm/realm-java/commit/f6bd7a2c7f83ab9253a47730cd13163cbf0ffda1", "message": "Added dynamic realm tests for executeTransaction", "committedDate": "2020-09-28T13:10:36Z", "type": "commit"}, {"oid": "57a7aec51a02ea4ef891ba9f9a39a9b92bb20af1", "url": "https://github.com/realm/realm-java/commit/57a7aec51a02ea4ef891ba9f9a39a9b92bb20af1", "message": "Added missing tests for DynamicRealm.executeTransactionAsync", "committedDate": "2020-09-28T15:39:52Z", "type": "commit"}, {"oid": "e47d101ca6180eba209fbf3cb931c106bb29039b", "url": "https://github.com/realm/realm-java/commit/e47d101ca6180eba209fbf3cb931c106bb29039b", "message": "Updated changelog", "committedDate": "2020-09-28T15:45:58Z", "type": "commit"}, {"oid": "f4587e2b41844d4fb2d6dcd6263603a122d0d3ff", "url": "https://github.com/realm/realm-java/commit/f4587e2b41844d4fb2d6dcd6263603a122d0d3ff", "message": "Added missing reference to refresh in changelog", "committedDate": "2020-09-29T07:06:12Z", "type": "commit"}, {"oid": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "url": "https://github.com/realm/realm-java/commit/d7cbc0981b0e51cb07118401b86b6fda6858f746", "message": "Merge branch 'v10' into el/realmconfig-allowwritesonui\n\n# Conflicts:\n#\tCHANGELOG.md", "committedDate": "2020-09-29T09:33:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjA3Mg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496602072", "body": "We should not create configs like this but always go either the `ConfigurationFactory` or for a default Realm use `looperThread.getConfiguration()` ... The primary reason is that these Realms will get a specialized location that shouldn't interact with other tests.", "bodyText": "We should not create configs like this but always go either the ConfigurationFactory or for a default Realm use looperThread.getConfiguration() ... The primary reason is that these Realms will get a specialized location that shouldn't interact with other tests.", "bodyHTML": "<p dir=\"auto\">We should not create configs like this but always go either the <code>ConfigurationFactory</code> or for a default Realm use <code>looperThread.getConfiguration()</code> ... The primary reason is that these Realms will get a specialized location that shouldn't interact with other tests.</p>", "author": "cmelchior", "createdAt": "2020-09-29T10:14:00Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMjg3Mw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496602873", "body": "If you use `looperThread.addClosable(realm)`. You don't need this as the LooperThread rule will guarantee it being closed even in case of test failures.\r\n\r\nSame for the other tests.", "bodyText": "If you use looperThread.addClosable(realm). You don't need this as the LooperThread rule will guarantee it being closed even in case of test failures.\nSame for the other tests.", "bodyHTML": "<p dir=\"auto\">If you use <code>looperThread.addClosable(realm)</code>. You don't need this as the LooperThread rule will guarantee it being closed even in case of test failures.</p>\n<p dir=\"auto\">Same for the other tests.</p>", "author": "cmelchior", "createdAt": "2020-09-29T10:15:29Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMzAxNw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496603017", "body": "No need to do this if you use the specialized configuration.\r\n\r\nSame for the other tests.", "bodyText": "No need to do this if you use the specialized configuration.\nSame for the other tests.", "bodyHTML": "<p dir=\"auto\">No need to do this if you use the specialized configuration.</p>\n<p dir=\"auto\">Same for the other tests.</p>", "author": "cmelchior", "createdAt": "2020-09-29T10:15:45Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNDM0Mg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496604342", "body": "How is this test different from the above?", "bodyText": "How is this test different from the above?", "bodyHTML": "<p dir=\"auto\">How is this test different from the above?</p>", "author": "cmelchior", "createdAt": "2020-09-29T10:18:11Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        }, new DynamicRealm.Transaction.OnError() {\n+            @Override\n+            public void onError(Throwable error) {\n+                fail(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccess() {", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNTA5Mw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496605093", "body": "Not 100% sure what this is testing?\r\n\r\nIdeally, closing the Realm should also prevent the async write from triggering, but that is a race condition.", "bodyText": "Not 100% sure what this is testing?\nIdeally, closing the Realm should also prevent the async write from triggering, but that is a race condition.", "bodyHTML": "<p dir=\"auto\">Not 100% sure what this is testing?</p>\n<p dir=\"auto\">Ideally, closing the Realm should also prevent the async write from triggering, but that is a race condition.</p>", "author": "cmelchior", "createdAt": "2020-09-29T10:19:27Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        }, new DynamicRealm.Transaction.OnError() {\n+            @Override\n+            public void onError(Throwable error) {\n+                fail(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccess() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccessCallerRealmClosed() {", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNTI5OA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496605298", "body": "Same, not sure what this is testing?", "bodyText": "Same, not sure what this is testing?", "bodyHTML": "<p dir=\"auto\">Same, not sure what this is testing?</p>", "author": "cmelchior", "createdAt": "2020-09-29T10:19:48Z", "path": "realm/realm-library/src/androidTest/java/io/realm/DynamicRealmAsyncQueryTests.java", "diffHunk": "@@ -0,0 +1,503 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.realm.entities.AllTypes;\n+import io.realm.entities.Owner;\n+import io.realm.internal.async.RealmThreadPoolExecutor;\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.rule.RunInLooperThread;\n+import io.realm.rule.RunTestInLooperThread;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DynamicRealmAsyncQueryTests {\n+\n+    @Rule\n+    public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    private RealmConfiguration config;\n+\n+    @Before\n+    public void setUp() {\n+        config = new RealmConfiguration.Builder().build();\n+\n+        // Initializes schema. DynamicRealm will not do that, so let a normal Realm create the file first.\n+        Realm.getInstance(config).close();\n+    }\n+\n+    // ****************************\n+    // ****  Async transaction  ***\n+    // ****************************\n+\n+    // Starts asynchronously a transaction to insert one element.\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        }, new DynamicRealm.Transaction.OnError() {\n+            @Override\n+            public void onError(Throwable error) {\n+                fail(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccess() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertEquals(1, realm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", realm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onSuccessCallerRealmClosed() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                DynamicRealmObject owner = realm.createObject(Owner.CLASS_NAME);\n+                owner.setString(Owner.FIELD_NAME, \"Owner\");\n+            }\n+        }, new DynamicRealm.Transaction.OnSuccess() {\n+            @Override\n+            public void onSuccess() {\n+                assertTrue(realm.isClosed());\n+                DynamicRealm newRealm = DynamicRealm.getInstance(config);\n+                assertEquals(1, newRealm.where(Owner.CLASS_NAME).count());\n+                assertEquals(\"Owner\", newRealm.where(Owner.CLASS_NAME).findFirst().getString(Owner.FIELD_NAME));\n+\n+                newRealm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        });\n+\n+        realm.close();\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onError() {\n+        final DynamicRealm realm = DynamicRealm.getInstance(config);\n+        final RuntimeException runtimeException = new RuntimeException(\"Oh! What a Terrible Failure\");\n+        assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+\n+        realm.executeTransactionAsync(new DynamicRealm.Transaction() {\n+            @Override\n+            public void execute(DynamicRealm realm) {\n+                throw runtimeException;\n+            }\n+        }, new DynamicRealm.Transaction.OnError() {\n+            @Override\n+            public void onError(Throwable error) {\n+                assertEquals(0, realm.where(Owner.CLASS_NAME).count());\n+                assertNull(realm.where(Owner.CLASS_NAME).findFirst());\n+                assertEquals(runtimeException, error);\n+\n+                realm.close();\n+                Realm.deleteRealm(config);\n+\n+                looperThread.testComplete();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @RunTestInLooperThread\n+    public void executeTransactionAsync_onErrorCallerRealmClosed() {", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDI4Ng==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496614286", "body": "Doesn't seem to be used?", "bodyText": "Doesn't seem to be used?", "bodyHTML": "<p dir=\"auto\">Doesn't seem to be used?</p>", "author": "cmelchior", "createdAt": "2020-09-29T10:35:54Z", "path": "realm/realm-library/src/androidTest/java/io/realm/QueryTests.java", "diffHunk": "@@ -45,6 +47,8 @@\n     public final ExpectedException thrown = ExpectedException.none();\n     @Rule\n     public final RunInLooperThread looperThread = new RunInLooperThread();\n+    @Rule\n+    public final UiThreadTestRule uiThreadTestRule = new UiThreadTestRule();", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MjY4MA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496662680", "bodyText": "Not in this class, but in a child class for the @UiThreadTest annotation. Perhaps it's better to add it in that one instead?", "author": "edualonso", "createdAt": "2020-09-29T12:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDI4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2NTgwOA==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496665808", "bodyText": "I remember now. This class has also some rules, so I thought it might as well be used like the \"rule entry point\".", "author": "edualonso", "createdAt": "2020-09-29T12:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDM1Nw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496614357", "body": "Doesn't seem to be used?", "bodyText": "Doesn't seem to be used?", "bodyHTML": "<p dir=\"auto\">Doesn't seem to be used?</p>", "author": "cmelchior", "createdAt": "2020-09-29T10:36:04Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java", "diffHunk": "@@ -17,8 +17,9 @@\n package io.realm;\n \n import android.os.SystemClock;\n-import androidx.test.rule.UiThreadTestRule;\n+\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.UiThreadTestRule;", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNTI4Mg==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496615282", "body": "```suggestion\r\n    public void findAll_runOnMainThreadAllowed() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void finalAll_runOnMainThreadAllowed() {\n          \n          \n            \n                public void findAll_runOnMainThreadAllowed() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">finalAll_runOnMainThreadAllowed</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">findAll_runOnMainThreadAllowed</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-09-29T10:37:49Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -3739,6 +3742,210 @@ public void limit_invalidValuesThrows() {\n         }\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void finalAll_runOnMainThreadAllowed() {", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNTM3Mw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496615373", "body": "```suggestion\r\n    public void findFirst_runOnMainThreadAllowed() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void finalFirst_runOnMainThreadAllowed() {\n          \n          \n            \n                public void findFirst_runOnMainThreadAllowed() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">finalFirst_runOnMainThreadAllowed</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">findFirst_runOnMainThreadAllowed</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-09-29T10:37:59Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -3739,6 +3742,210 @@ public void limit_invalidValuesThrows() {\n         }\n     }\n \n+    @Test\n+    @UiThreadTest\n+    public void finalAll_runOnMainThreadAllowed() {\n+        RealmConfiguration configuration = configFactory.createConfigurationBuilder()\n+                .allowQueriesOnUiThread(true)\n+                .name(\"ui_realm\")\n+                .build();\n+\n+        Realm uiRealm = Realm.getInstance(configuration);\n+        uiRealm.where(Dog.class).findAll();\n+        uiRealm.close();\n+    }\n+\n+    @Test\n+    @UiThreadTest\n+    public void finalFirst_runOnMainThreadAllowed() {", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzMjUyNw==", "url": "https://github.com/realm/realm-java/pull/7123#discussion_r496632527", "body": "Maybe it is just me but the term \"fairly quickly\" feels like a cop out. Either just say \"Quickly\" or remove the line completely IMO", "bodyText": "Maybe it is just me but the term \"fairly quickly\" feels like a cop out. Either just say \"Quickly\" or remove the line completely IMO", "bodyHTML": "<p dir=\"auto\">Maybe it is just me but the term \"fairly quickly\" feels like a cop out. Either just say \"Quickly\" or remove the line completely IMO</p>", "author": "cmelchior", "createdAt": "2020-09-29T11:10:08Z", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -51,6 +52,12 @@\n  * is required.\n  * <p>\n  * A RealmQuery cannot be passed between different threads.\n+ * <p>\n+ * Results are obtained fairly quickly most of the times. However, launching heavy queries from the UI thread may result", "originalCommit": "d7cbc0981b0e51cb07118401b86b6fda6858f746", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c55bbb9baf3bbb4c5d548ddce75a1d232afc4ad9", "url": "https://github.com/realm/realm-java/commit/c55bbb9baf3bbb4c5d548ddce75a1d232afc4ad9", "message": "Merge branch 'v10' into el/realmconfig-allowwritesonui", "committedDate": "2020-09-29T11:24:43Z", "type": "commit"}, {"oid": "82a3112f69cfee098902f87c2dbc432e9079656e", "url": "https://github.com/realm/realm-java/commit/82a3112f69cfee098902f87c2dbc432e9079656e", "message": "wip", "committedDate": "2020-09-29T11:48:26Z", "type": "commit"}, {"oid": "1d532407325368cc0f40aac614a2c35170e0a2e3", "url": "https://github.com/realm/realm-java/commit/1d532407325368cc0f40aac614a2c35170e0a2e3", "message": "Improved documentation and translated dynamic realm async tests to kotlin so that we can use BlockingLooperThread instead of the old java rule", "committedDate": "2020-09-29T13:26:56Z", "type": "commit"}, {"oid": "0ce9b19c69ffd6e4cdec12d35ad276f88c17cb51", "url": "https://github.com/realm/realm-java/commit/0ce9b19c69ffd6e4cdec12d35ad276f88c17cb51", "message": "Removed unused import and rule", "committedDate": "2020-09-30T08:53:07Z", "type": "commit"}, {"oid": "2a164e3851a22a99b4bc9288e54223cc48dcfa00", "url": "https://github.com/realm/realm-java/commit/2a164e3851a22a99b4bc9288e54223cc48dcfa00", "message": "Last bits of cleanup", "committedDate": "2020-10-01T08:58:11Z", "type": "commit"}, {"oid": "2dbbc85f3acae1c5c53d5ca0bc17108133ff7821", "url": "https://github.com/realm/realm-java/commit/2dbbc85f3acae1c5c53d5ca0bc17108133ff7821", "message": "Merge branch 'v10' into el/realmconfig-allowwritesonui", "committedDate": "2020-10-02T11:33:07Z", "type": "commit"}, {"oid": "f99a153938f107ed4fc00c83398cdaa4287c78c8", "url": "https://github.com/realm/realm-java/commit/f99a153938f107ed4fc00c83398cdaa4287c78c8", "message": "Allow running transactions on UI thread by default for tests", "committedDate": "2020-10-02T13:18:25Z", "type": "commit"}]}