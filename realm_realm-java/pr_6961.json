{"pr_number": 6961, "pr_title": "Obfuscate sensitive login information in debug logs", "pr_author": "edualonso", "pr_createdAt": "2020-06-19T14:58:53Z", "pr_url": "https://github.com/realm/realm-java/pull/6961", "merge_commit": "9c760563158f805c8d0b20780935704aad3b4974", "timeline": [{"oid": "0423969216cde1b9bc28a6dac2dcedfa0cb875ef", "url": "https://github.com/realm/realm-java/commit/0423969216cde1b9bc28a6dac2dcedfa0cb875ef", "message": "Added support for server api keys and custom functions as valid credentials", "committedDate": "2020-06-17T13:25:36Z", "type": "commit"}, {"oid": "979ede201c7c3f280b07bb2fd8737f509fc0cba7", "url": "https://github.com/realm/realm-java/commit/979ede201c7c3f280b07bb2fd8737f509fc0cba7", "message": "Updated OS pointer", "committedDate": "2020-06-17T13:39:21Z", "type": "commit"}, {"oid": "1ebebd897c1147102201981ffb112c6ddfcc4979", "url": "https://github.com/realm/realm-java/commit/1ebebd897c1147102201981ffb112c6ddfcc4979", "message": "Fixed breaking changes after updating with v10", "committedDate": "2020-06-17T13:53:26Z", "type": "commit"}, {"oid": "1e289c7ed328275b75cce0beea81424bf494e09c", "url": "https://github.com/realm/realm-java/commit/1e289c7ed328275b75cce0beea81424bf494e09c", "message": "Updated OS pointer", "committedDate": "2020-06-17T16:07:58Z", "type": "commit"}, {"oid": "3ac946045c9a5e01c752b453dbb97d198433af18", "url": "https://github.com/realm/realm-java/commit/3ac946045c9a5e01c752b453dbb97d198433af18", "message": "Added identity provider to OsAppCredential to distinguish between user and server API keys, as the value is the same for both in the OS but are treated as separate providers. Cleaned up some comments. Removed unnecessary log in tests plus added comparison at enum level", "committedDate": "2020-06-18T08:46:04Z", "type": "commit"}, {"oid": "d314637f4c55db690b2f43926ba29db3ec4a65f4", "url": "https://github.com/realm/realm-java/commit/d314637f4c55db690b2f43926ba29db3ec4a65f4", "message": "Fixed typo in jwt creds test and changed comparison of users to their ids instead of the whole object", "committedDate": "2020-06-18T09:00:31Z", "type": "commit"}, {"oid": "f48170a3501be8cfc5bc7fb1940acdcc366836d4", "url": "https://github.com/realm/realm-java/commit/f48170a3501be8cfc5bc7fb1940acdcc366836d4", "message": "Updated OS pointer to latest v10", "committedDate": "2020-06-18T09:15:41Z", "type": "commit"}, {"oid": "d2ba5cc80ebf2d24d69b6c8735313c4d8ee58a8b", "url": "https://github.com/realm/realm-java/commit/d2ba5cc80ebf2d24d69b6c8735313c4d8ee58a8b", "message": "Move identity provider from OS to API level", "committedDate": "2020-06-19T10:15:45Z", "type": "commit"}, {"oid": "269dd00e01d892ccbf53360fa9b78fbac4dfb31e", "url": "https://github.com/realm/realm-java/commit/269dd00e01d892ccbf53360fa9b78fbac4dfb31e", "message": "Merge branch 'v10' into el/credentials-api-key", "committedDate": "2020-06-19T10:47:01Z", "type": "commit"}, {"oid": "bc593e9a07cb4e83fad5fc1933b955e31ec683fe", "url": "https://github.com/realm/realm-java/commit/bc593e9a07cb4e83fad5fc1933b955e31ec683fe", "message": "Added logcat obfuscators. Added a default map to the AppConfiguration to allow logs to not be obfuscated in tests.", "committedDate": "2020-06-19T14:40:45Z", "type": "commit"}, {"oid": "29b082339b38a516868dd7e62e4081a4d28d4b01", "url": "https://github.com/realm/realm-java/commit/29b082339b38a516868dd7e62e4081a4d28d4b01", "message": "Merge branch 'v10' into el/logcat-obfuscation\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/CredentialsTests.kt", "committedDate": "2020-06-19T14:54:23Z", "type": "commit"}, {"oid": "d0d3643b8e699b7b60923426d11e95af8904eddf", "url": "https://github.com/realm/realm-java/commit/d0d3643b8e699b7b60923426d11e95af8904eddf", "message": "Deleted wrong test", "committedDate": "2020-06-19T15:02:08Z", "type": "commit"}, {"oid": "5ccf2ebf1809d33816b72c22d3c7f5673a2423ea", "url": "https://github.com/realm/realm-java/commit/5ccf2ebf1809d33816b72c22d3c7f5673a2423ea", "message": "Wrapped the patterns and providers inside a LoginInfoObfuscator class for clarity", "committedDate": "2020-06-21T11:36:35Z", "type": "commit"}, {"oid": "0ad94182c50011274731abb0de93619eff6c6fa9", "url": "https://github.com/realm/realm-java/commit/0ad94182c50011274731abb0de93619eff6c6fa9", "message": "Merge branch 'v10' into el/logcat-obfuscation", "committedDate": "2020-06-21T11:38:12Z", "type": "commit"}, {"oid": "dbb241c1d7dbbf5fc1bf5b0e2ecd4ac557c56ee8", "url": "https://github.com/realm/realm-java/commit/dbb241c1d7dbbf5fc1bf5b0e2ecd4ac557c56ee8", "message": "Removed logging", "committedDate": "2020-06-21T11:39:19Z", "type": "commit"}, {"oid": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "url": "https://github.com/realm/realm-java/commit/90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "message": "Added missing javadoc and fixed static code analysis issue", "committedDate": "2020-06-22T06:49:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1OTI4Nw==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443359287", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * </p>", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">         </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-k x\">&lt;</span><span class=\"pl-k x\">/</span><span class=\"x\">p</span><span class=\"pl-k x x-last\">&gt;</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "rorbech", "createdAt": "2020-06-22T07:15:44Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -424,6 +441,7 @@ public Builder defaultSyncErrorHandler(SyncSession.ErrorHandler errorHandler) {\n          * <p>\n          * The default root dir is {@code Context.getFilesDir()/mongodb-realm}.\n          * </p>", "originalCommit": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7318a41a2267fb3d6365b59e94c71d116c6de512", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 18502563d..b821883b1 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -440,7 +439,6 @@ public class AppConfiguration {\n          * between the device and MongoDB Realm.\n          * <p>\n          * The default root dir is {@code Context.getFilesDir()/mongodb-realm}.\n-         * </p>\n          *\n          * @param rootDir where to store sync related files.\n          */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 18502563d..44cc177ed 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -440,7 +483,6 @@ public class AppConfiguration {\n          * between the device and MongoDB Realm.\n          * <p>\n          * The default root dir is {@code Context.getFilesDir()/mongodb-realm}.\n-         * </p>\n          *\n          * @param rootDir where to store sync related files.\n          */\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}, {"oid": "039da102fa0c7a130ac408a8d7d9e471a177366e", "committedDate": "2020-08-12 18:00:22 +0200", "message": "Finish RealmAppConfiguration Javadoc + Tests (#7023)"}, {"oid": "a813aa8cbe5b736febad667362f5edcddbdf8415", "committedDate": "2020-08-25 18:44:29 +0200", "message": "Fix checkstyle issues (#7058)"}, {"oid": "66599ce46892e145d2949fb358f0be38986cb8dd", "committedDate": "2020-09-08 15:04:51 +0200", "message": "Align MongoDB Realm API's with other SDK's (#7060)"}, {"oid": "b7435b467f0247c16691e09ac870d20e0750bbb8", "committedDate": "2020-09-16 11:56:14 +0200", "message": "Add support for multiple apps (#7095)"}, {"oid": "4cfb10ac334f2992f85b27cbe64a0af905eeaa3c", "committedDate": "2020-09-16 19:09:21 +0200", "message": "Handle Client Reset in a separate callback (#7097)"}, {"oid": "5670317bab8b4d4e3a73c34c118a5455b68e78e8", "committedDate": "2021-06-30 12:00:51 +0200", "message": "Fixed configuring HTTP timeouts (#7512)"}, {"oid": "6fb632ecb4a533fb6e5493b24e5558d40651846d", "committedDate": "2021-10-12 09:03:14 -0600", "message": "Update AppConfiguration.java"}, {"oid": "2bf41763fd6d51e2edad5b0ed157198b6dbcdfad", "committedDate": "2021-12-03 16:43:55 +0100", "message": "Fix AppConfiguration.syncRootDirectory() not working correctly (#7604)"}, {"oid": "f0eca830527cd8255ce8fb9bcc83a545a940f6d3", "committedDate": "2021-12-17 15:43:00 +0100", "message": "Automatic client reset on sync with \"seamless loss\" (#7585)"}, {"oid": "8d54cdba51df3a8cce8abccb58a6c9aac16799d2", "committedDate": "2022-08-25 10:05:30 +0200", "message": "Implement client reset automatic recover on partition based sync (#7698)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzM3Mg==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443363372", "body": "Maybe we should unwrap this into an actual `LoggingInterceptor` that could be passed into the `OkHttpNetworkTransport`. ", "bodyText": "Maybe we should unwrap this into an actual LoggingInterceptor that could be passed into the OkHttpNetworkTransport.", "bodyHTML": "<p dir=\"auto\">Maybe we should unwrap this into an actual <code>LoggingInterceptor</code> that could be passed into the <code>OkHttpNetworkTransport</code>.</p>", "author": "rorbech", "createdAt": "2020-06-22T07:24:40Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java", "diffHunk": "@@ -90,7 +99,10 @@ private synchronized OkHttpClient getClient(long timeoutMs) {\n                                     // We only expect request context to be JSON.\n                                     Buffer buffer = new Buffer();\n                                     request.body().writeTo(buffer);\n-                                    sb.append(buffer.readString(UTF8));\n+", "originalCommit": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NTk0NA==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443375944", "bodyText": "Makes sense \ud83d\udc4d", "author": "cmelchior", "createdAt": "2020-06-22T07:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NDM2MQ==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443394361", "bodyText": "Sounds like a good idea.", "author": "edualonso", "createdAt": "2020-06-22T08:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MzM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7318a41a2267fb3d6365b59e94c71d116c6de512", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\nindex 441495dc9..3c3a38ca4 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n", "chunk": "@@ -84,31 +76,7 @@ public class OkHttpNetworkTransport extends OsJavaNetworkTransport {\n             client = new OkHttpClient.Builder()\n                     .callTimeout(timeoutMs, TimeUnit.MILLISECONDS)\n                     .followRedirects(true)\n-                    .addInterceptor(new Interceptor() {\n-                        @Override\n-                        public okhttp3.Response intercept(Chain chain) throws IOException {\n-                            Request request = chain.request();\n-                            if (RealmLog.getLevel() <= LogLevel.DEBUG) {\n-                                StringBuilder sb = new StringBuilder(request.method());\n-                                sb.append(' ');\n-                                sb.append(request.url());\n-                                sb.append('\\n');\n-                                sb.append(request.headers());\n-                                if (request.body() != null) {\n-                                    // Stripped down version of https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java\n-                                    // We only expect request context to be JSON.\n-                                    Buffer buffer = new Buffer();\n-                                    request.body().writeTo(buffer);\n-\n-                                    // Obfuscate login sensitive information\n-                                    String obfuscatedOutput = loginInfoObfuscator.obfuscate(request.url().pathSegments(), buffer.readString(UTF8));\n-                                    sb.append(obfuscatedOutput);\n-                                }\n-                                RealmLog.debug(\"HTTP Request = \\n%s\", sb);\n-                            }\n-                            return chain.proceed(request);\n-                        }\n-                    })\n+                    .addInterceptor(loggingInterceptor)\n                     // using custom Connection Pool to evict idle connection after 5 seconds rather than 5 minutes (which is the default)\n                     // keeping idle connection on the pool will prevent the ROS to be stopped, since the HttpUtils#stopSyncServer query\n                     // will not return before the tests timeout (ex 10 seconds for AuthTests)\n", "next_change": {"commit": "8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\nindex 3c3a38ca4..9e45a36da 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n", "chunk": "@@ -76,7 +79,7 @@ public class OkHttpNetworkTransport extends OsJavaNetworkTransport {\n             client = new OkHttpClient.Builder()\n                     .callTimeout(timeoutMs, TimeUnit.MILLISECONDS)\n                     .followRedirects(true)\n-                    .addInterceptor(loggingInterceptor)\n+                    .addInterceptor(new LoggingInterceptor(httpLogObfuscator))\n                     // using custom Connection Pool to evict idle connection after 5 seconds rather than 5 minutes (which is the default)\n                     // keeping idle connection on the pool will prevent the ROS to be stopped, since the HttpUtils#stopSyncServer query\n                     // will not return before the tests timeout (ex 10 seconds for AuthTests)\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\nindex 441495dc9..83cdfeeb7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n", "chunk": "@@ -84,31 +79,7 @@ public class OkHttpNetworkTransport extends OsJavaNetworkTransport {\n             client = new OkHttpClient.Builder()\n                     .callTimeout(timeoutMs, TimeUnit.MILLISECONDS)\n                     .followRedirects(true)\n-                    .addInterceptor(new Interceptor() {\n-                        @Override\n-                        public okhttp3.Response intercept(Chain chain) throws IOException {\n-                            Request request = chain.request();\n-                            if (RealmLog.getLevel() <= LogLevel.DEBUG) {\n-                                StringBuilder sb = new StringBuilder(request.method());\n-                                sb.append(' ');\n-                                sb.append(request.url());\n-                                sb.append('\\n');\n-                                sb.append(request.headers());\n-                                if (request.body() != null) {\n-                                    // Stripped down version of https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java\n-                                    // We only expect request context to be JSON.\n-                                    Buffer buffer = new Buffer();\n-                                    request.body().writeTo(buffer);\n-\n-                                    // Obfuscate login sensitive information\n-                                    String obfuscatedOutput = loginInfoObfuscator.obfuscate(request.url().pathSegments(), buffer.readString(UTF8));\n-                                    sb.append(obfuscatedOutput);\n-                                }\n-                                RealmLog.debug(\"HTTP Request = \\n%s\", sb);\n-                            }\n-                            return chain.proceed(request);\n-                        }\n-                    })\n+                    .addInterceptor(new LoggingInterceptor(httpLogObfuscator))\n                     // using custom Connection Pool to evict idle connection after 5 seconds rather than 5 minutes (which is the default)\n                     // keeping idle connection on the pool will prevent the ROS to be stopped, since the HttpUtils#stopSyncServer query\n                     // will not return before the tests timeout (ex 10 seconds for AuthTests)\n", "next_change": {"commit": "5670317bab8b4d4e3a73c34c118a5455b68e78e8", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\nindex 83cdfeeb7..eee92f353 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/OkHttpNetworkTransport.java\n", "chunk": "@@ -72,12 +114,33 @@ public class OkHttpNetworkTransport extends OsJavaNetworkTransport {\n         }\n     }\n \n+    @Override\n+    public OsJavaNetworkTransport.Response sendStreamingRequest(Request request) throws IOException, AppException {\n+        OkHttpClient client = getStreamClient();\n+\n+        okhttp3.Request okRequest = makeRequest(request.getMethod(), request.getUrl(), request.getHeaders(), request.getBody());\n+\n+        Call call = client.newCall(okRequest);\n+        okhttp3.Response response = call.execute();\n+\n+        if ((response.code() >= 300) || ((response.code() < 200) && (response.code() != 0))) {\n+            throw new AppException(ErrorCode.fromNativeError(ErrorCode.Type.HTTP, response.code()), response.message());\n+        }\n+\n+        return Response.httpResponse(response.code(), parseHeaders(response.headers()), response.body().source());\n+    }\n+\n     // Lazily creates the client if not already created\n     // TODO: timeOuts are not expected to change between requests. So for now just use the timeout first send.\n     private synchronized OkHttpClient getClient(long timeoutMs) {\n         if (client == null) {\n             client = new OkHttpClient.Builder()\n-                    .callTimeout(timeoutMs, TimeUnit.MILLISECONDS)\n+                    // TODO There doesn't appear to set a timeout for the entire http request,\n+                    //  so just reuse it across all 3 phases. In the worst case that means the\n+                    //  the timeout is 3x the defined timeout which is acceptable.\n+                    .connectTimeout(timeoutMs, TimeUnit.MILLISECONDS)\n+                    .readTimeout(timeoutMs, TimeUnit.MILLISECONDS)\n+                    .writeTimeout(timeoutMs, TimeUnit.MILLISECONDS)\n                     .followRedirects(true)\n                     .addInterceptor(new LoggingInterceptor(httpLogObfuscator))\n                     // using custom Connection Pool to evict idle connection after 5 seconds rather than 5 minutes (which is the default)\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}, {"oid": "134e039480c5d8152f839f99f2cf92e62ff516d3", "committedDate": "2020-08-25 10:54:56 +0200", "message": "Add support for watch collection watch streams (#7014)"}, {"oid": "4aa94b1cde481d5d42c81ce0bf1ee7a170aa2636", "committedDate": "2020-08-25 13:57:15 +0200", "message": "Upgrade to latest Build Tools and Gradle (#7036)"}, {"oid": "a813aa8cbe5b736febad667362f5edcddbdf8415", "committedDate": "2020-08-25 18:44:29 +0200", "message": "Fix checkstyle issues (#7058)"}, {"oid": "26685d186faa1c00334d3e0e5dc8dc1bc2f3fcde", "committedDate": "2020-09-15 12:58:17 +0200", "message": "Migrate and reenable sync realm integration test  (#6939)"}, {"oid": "869a6b8e4140fd518cedee96781cc3a10a5a502d", "committedDate": "2020-09-23 09:55:28 +0200", "message": "Fix incorrect HTTP headers and resetPassword args (#7121)"}, {"oid": "5670317bab8b4d4e3a73c34c118a5455b68e78e8", "committedDate": "2021-06-30 12:00:51 +0200", "message": "Fixed configuring HTTP timeouts (#7512)"}, {"oid": "5a405e17f23c32c4076d105b91cde1b2f802c1c5", "committedDate": "2021-08-27 14:13:48 +0200", "message": "Fix refreshing access token on UI thread (#7552)"}, {"oid": "0c37e9a79172a948a5fe03c8fc950932a74ec56a", "committedDate": "2021-11-16 15:55:26 +0100", "message": "Support building SDK with JVM 11 (#7535)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MTQzNw==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443371437", "body": "Is this needed?", "bodyText": "Is this needed?", "bodyHTML": "<p dir=\"auto\">Is this needed?</p>", "author": "cmelchior", "createdAt": "2020-06-22T07:41:18Z", "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Obfuscator for email- and password-related login requests.\n+ * <p>\n+ * It will replace the\n+ * <ul>\n+ * <li>{@code \"username\":\"<USERNAME>\"} and</li>\n+ * <li>{@code \"password\":\"<PASSWORD>\"}</li>\n+ * </ul>\n+ * patterns with\n+ * <ul>\n+ * <li>{@code \"username\":\"***\"} and</li>\n+ * <li>{@code \"password\":\"***\"}</li>\n+ * </ul>\n+ * respectively.\n+ */\n+public class EmailPasswordObfuscator extends PatternObfuscator {\n+\n+    private EmailPasswordObfuscator(Map<Pattern, String> patternReplacementMap) {\n+        super(patternReplacementMap);\n+    }\n+\n+    /**\n+     * Creates a {@link PatternObfuscator} for emails and passwords.\n+     *\n+     * @return an obfuscator that keeps emails and passwords from being displayed in the logcat.\n+     */\n+    public static EmailPasswordObfuscator obfuscator() {\n+        return new EmailPasswordObfuscator(getPatterns());\n+    }\n+\n+    private static Map<Pattern, String> getPatterns() {\n+        Map<Pattern, String> map = new HashMap<>();\n+        map.put(Pattern.compile(\"((\\\"email\\\"):(\\\".+?\\\"))\"), \"\\\"email\\\":\\\"***\\\"\");", "originalCommit": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NjAwNQ==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443396005", "bodyText": "It is for account creation too.", "author": "edualonso", "createdAt": "2020-06-22T08:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MTQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "1062ae64b6bf02d89a0ca8e12d6b293d24709b69", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java b/realm/realm-library/src/main/java/io/realm/internal/obfuscator/EmailPasswordObfuscator.java\nsimilarity index 66%\nrename from realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java\nrename to realm/realm-library/src/main/java/io/realm/internal/obfuscator/EmailPasswordObfuscator.java\nindex d3ea246e6..6e4f166a6 100644\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java\n+++ b/realm/realm-library/src/main/java/io/realm/internal/obfuscator/EmailPasswordObfuscator.java\n", "chunk": "@@ -52,9 +58,9 @@ public class EmailPasswordObfuscator extends PatternObfuscator {\n \n     private static Map<Pattern, String> getPatterns() {\n         Map<Pattern, String> map = new HashMap<>();\n-        map.put(Pattern.compile(\"((\\\"email\\\"):(\\\".+?\\\"))\"), \"\\\"email\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"username\\\"):(\\\".+?\\\"))\"), \"\\\"username\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"password\\\"):(\\\".+?\\\"))\"), \"\\\"password\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + EMAIL_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + EMAIL_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + USERNAME_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + USERNAME_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + PASSWORD_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + PASSWORD_KEY + \"\\\":\\\"***\\\"\");\n         return map;\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/EmailPasswordObfuscator.java\nsimilarity index 66%\nrename from realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java\nrename to realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/EmailPasswordObfuscator.java\nindex d3ea246e6..d6aba0177 100644\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/EmailPasswordObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/EmailPasswordObfuscator.java\n", "chunk": "@@ -52,9 +58,9 @@ public class EmailPasswordObfuscator extends PatternObfuscator {\n \n     private static Map<Pattern, String> getPatterns() {\n         Map<Pattern, String> map = new HashMap<>();\n-        map.put(Pattern.compile(\"((\\\"email\\\"):(\\\".+?\\\"))\"), \"\\\"email\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"username\\\"):(\\\".+?\\\"))\"), \"\\\"username\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"password\\\"):(\\\".+?\\\"))\"), \"\\\"password\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + EMAIL_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + EMAIL_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + USERNAME_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + USERNAME_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + PASSWORD_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + PASSWORD_KEY + \"\\\":\\\"***\\\"\");\n         return map;\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MjE5Mw==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443372193", "body": "Right now this class is part of the public API? Do we really think that people are going to use this to implement obfuscators themselves? Otherwise, we should probably move them to the `internal` package so as not to clutter the public API too much?\r\n\r\nI don't have a strong opinion either way though, so up to you.\r\n", "bodyText": "Right now this class is part of the public API? Do we really think that people are going to use this to implement obfuscators themselves? Otherwise, we should probably move them to the internal package so as not to clutter the public API too much?\nI don't have a strong opinion either way though, so up to you.", "bodyHTML": "<p dir=\"auto\">Right now this class is part of the public API? Do we really think that people are going to use this to implement obfuscators themselves? Otherwise, we should probably move them to the <code>internal</code> package so as not to clutter the public API too much?</p>\n<p dir=\"auto\">I don't have a strong opinion either way though, so up to you.</p>", "author": "cmelchior", "createdAt": "2020-06-22T07:42:46Z", "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n+ */\n+public class LoginInfoObfuscator {", "originalCommit": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NzA0NA==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443397044", "bodyText": "I thought it had to do with the \"log feature\", but it's true this has no utility whatsoever for users. I think I'll move it.", "author": "edualonso", "createdAt": "2020-06-22T08:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MjE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7318a41a2267fb3d6365b59e94c71d116c6de512", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java b/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java\ndeleted file mode 100644\nindex 66a607068..000000000\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java\n+++ /dev/null\n", "chunk": "@@ -1,74 +0,0 @@\n-/*\n- * Copyright 2020 Realm Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.realm.log.obfuscator;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n- */\n-public class LoginInfoObfuscator {\n-\n-    private Map<String, PatternObfuscator> patternObfuscatorMap;\n-\n-    /**\n-     * {@link Map} of identity providers and {@link PatternObfuscator}s used to determine which\n-     * obfuscator has to be used.\n-     *\n-     * @param patternObfuscatorMap the map of credential identity providers and obfuscators.\n-     */\n-    public LoginInfoObfuscator(Map<String, PatternObfuscator> patternObfuscatorMap) {\n-        this.patternObfuscatorMap = patternObfuscatorMap;\n-    }\n-\n-    /**\n-     * Obfuscates a logcat entry or not depending on whether the request that is being sent is a\n-     * login request. If it is, its full path must contain a {@code providers} segment. If it is not\n-     * the logcat entry will not be obfuscated\n-     * <p>\n-     * Once extracted the identity provider its corresponding {@link PatternObfuscator} will carry\n-     * out the obfuscation.\n-     *\n-     * @param urlSegments the URL segments of the request to be sent.\n-     * @param input       the original logcat entry.\n-     * @return the obfuscated logcat entry.\n-     */\n-    public String obfuscate(List<String> urlSegments, String input) {\n-        if (urlSegments.contains(\"providers\")) {\n-            String provider = urlSegments.get(urlSegments.indexOf(\"providers\") + 1);\n-            PatternObfuscator patternObfuscator = patternObfuscatorMap.get(provider);\n-            if (patternObfuscator != null) {\n-                return patternObfuscator.obfuscate(input);\n-            }\n-        }\n-        return input;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (!(o instanceof LoginInfoObfuscator)) return false;\n-        LoginInfoObfuscator that = (LoginInfoObfuscator) o;\n-        return patternObfuscatorMap.equals(that.patternObfuscatorMap);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return patternObfuscatorMap.hashCode() + 13;\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java b/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java\ndeleted file mode 100644\nindex 66a607068..000000000\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java\n+++ /dev/null\n", "chunk": "@@ -1,74 +0,0 @@\n-/*\n- * Copyright 2020 Realm Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.realm.log.obfuscator;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n- */\n-public class LoginInfoObfuscator {\n-\n-    private Map<String, PatternObfuscator> patternObfuscatorMap;\n-\n-    /**\n-     * {@link Map} of identity providers and {@link PatternObfuscator}s used to determine which\n-     * obfuscator has to be used.\n-     *\n-     * @param patternObfuscatorMap the map of credential identity providers and obfuscators.\n-     */\n-    public LoginInfoObfuscator(Map<String, PatternObfuscator> patternObfuscatorMap) {\n-        this.patternObfuscatorMap = patternObfuscatorMap;\n-    }\n-\n-    /**\n-     * Obfuscates a logcat entry or not depending on whether the request that is being sent is a\n-     * login request. If it is, its full path must contain a {@code providers} segment. If it is not\n-     * the logcat entry will not be obfuscated\n-     * <p>\n-     * Once extracted the identity provider its corresponding {@link PatternObfuscator} will carry\n-     * out the obfuscation.\n-     *\n-     * @param urlSegments the URL segments of the request to be sent.\n-     * @param input       the original logcat entry.\n-     * @return the obfuscated logcat entry.\n-     */\n-    public String obfuscate(List<String> urlSegments, String input) {\n-        if (urlSegments.contains(\"providers\")) {\n-            String provider = urlSegments.get(urlSegments.indexOf(\"providers\") + 1);\n-            PatternObfuscator patternObfuscator = patternObfuscatorMap.get(provider);\n-            if (patternObfuscator != null) {\n-                return patternObfuscator.obfuscate(input);\n-            }\n-        }\n-        return input;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (!(o instanceof LoginInfoObfuscator)) return false;\n-        LoginInfoObfuscator that = (LoginInfoObfuscator) o;\n-        return patternObfuscatorMap.equals(that.patternObfuscatorMap);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return patternObfuscatorMap.hashCode() + 13;\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MzEzMg==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443373132", "body": "It would be faster to call `indexOf` directly and check for `-1`. Right now you are iterating the list twice.", "bodyText": "It would be faster to call indexOf directly and check for -1. Right now you are iterating the list twice.", "bodyHTML": "<p dir=\"auto\">It would be faster to call <code>indexOf</code> directly and check for <code>-1</code>. Right now you are iterating the list twice.</p>", "author": "cmelchior", "createdAt": "2020-06-22T07:44:41Z", "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n+ */\n+public class LoginInfoObfuscator {\n+\n+    private Map<String, PatternObfuscator> patternObfuscatorMap;\n+\n+    /**\n+     * {@link Map} of identity providers and {@link PatternObfuscator}s used to determine which\n+     * obfuscator has to be used.\n+     *\n+     * @param patternObfuscatorMap the map of credential identity providers and obfuscators.\n+     */\n+    public LoginInfoObfuscator(Map<String, PatternObfuscator> patternObfuscatorMap) {\n+        this.patternObfuscatorMap = patternObfuscatorMap;\n+    }\n+\n+    /**\n+     * Obfuscates a logcat entry or not depending on whether the request that is being sent is a\n+     * login request. If it is, its full path must contain a {@code providers} segment. If it is not\n+     * the logcat entry will not be obfuscated\n+     * <p>\n+     * Once extracted the identity provider its corresponding {@link PatternObfuscator} will carry\n+     * out the obfuscation.\n+     *\n+     * @param urlSegments the URL segments of the request to be sent.\n+     * @param input       the original logcat entry.\n+     * @return the obfuscated logcat entry.\n+     */\n+    public String obfuscate(List<String> urlSegments, String input) {\n+        if (urlSegments.contains(\"providers\")) {", "originalCommit": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7318a41a2267fb3d6365b59e94c71d116c6de512", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java b/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java\ndeleted file mode 100644\nindex 66a607068..000000000\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java\n+++ /dev/null\n", "chunk": "@@ -1,74 +0,0 @@\n-/*\n- * Copyright 2020 Realm Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.realm.log.obfuscator;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n- */\n-public class LoginInfoObfuscator {\n-\n-    private Map<String, PatternObfuscator> patternObfuscatorMap;\n-\n-    /**\n-     * {@link Map} of identity providers and {@link PatternObfuscator}s used to determine which\n-     * obfuscator has to be used.\n-     *\n-     * @param patternObfuscatorMap the map of credential identity providers and obfuscators.\n-     */\n-    public LoginInfoObfuscator(Map<String, PatternObfuscator> patternObfuscatorMap) {\n-        this.patternObfuscatorMap = patternObfuscatorMap;\n-    }\n-\n-    /**\n-     * Obfuscates a logcat entry or not depending on whether the request that is being sent is a\n-     * login request. If it is, its full path must contain a {@code providers} segment. If it is not\n-     * the logcat entry will not be obfuscated\n-     * <p>\n-     * Once extracted the identity provider its corresponding {@link PatternObfuscator} will carry\n-     * out the obfuscation.\n-     *\n-     * @param urlSegments the URL segments of the request to be sent.\n-     * @param input       the original logcat entry.\n-     * @return the obfuscated logcat entry.\n-     */\n-    public String obfuscate(List<String> urlSegments, String input) {\n-        if (urlSegments.contains(\"providers\")) {\n-            String provider = urlSegments.get(urlSegments.indexOf(\"providers\") + 1);\n-            PatternObfuscator patternObfuscator = patternObfuscatorMap.get(provider);\n-            if (patternObfuscator != null) {\n-                return patternObfuscator.obfuscate(input);\n-            }\n-        }\n-        return input;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (!(o instanceof LoginInfoObfuscator)) return false;\n-        LoginInfoObfuscator that = (LoginInfoObfuscator) o;\n-        return patternObfuscatorMap.equals(that.patternObfuscatorMap);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return patternObfuscatorMap.hashCode() + 13;\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java b/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java\ndeleted file mode 100644\nindex 66a607068..000000000\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/LoginInfoObfuscator.java\n+++ /dev/null\n", "chunk": "@@ -1,74 +0,0 @@\n-/*\n- * Copyright 2020 Realm Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.realm.log.obfuscator;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * The LoginInfoObfuscator keeps sensitive login information from being displayed in the logcat.\n- */\n-public class LoginInfoObfuscator {\n-\n-    private Map<String, PatternObfuscator> patternObfuscatorMap;\n-\n-    /**\n-     * {@link Map} of identity providers and {@link PatternObfuscator}s used to determine which\n-     * obfuscator has to be used.\n-     *\n-     * @param patternObfuscatorMap the map of credential identity providers and obfuscators.\n-     */\n-    public LoginInfoObfuscator(Map<String, PatternObfuscator> patternObfuscatorMap) {\n-        this.patternObfuscatorMap = patternObfuscatorMap;\n-    }\n-\n-    /**\n-     * Obfuscates a logcat entry or not depending on whether the request that is being sent is a\n-     * login request. If it is, its full path must contain a {@code providers} segment. If it is not\n-     * the logcat entry will not be obfuscated\n-     * <p>\n-     * Once extracted the identity provider its corresponding {@link PatternObfuscator} will carry\n-     * out the obfuscation.\n-     *\n-     * @param urlSegments the URL segments of the request to be sent.\n-     * @param input       the original logcat entry.\n-     * @return the obfuscated logcat entry.\n-     */\n-    public String obfuscate(List<String> urlSegments, String input) {\n-        if (urlSegments.contains(\"providers\")) {\n-            String provider = urlSegments.get(urlSegments.indexOf(\"providers\") + 1);\n-            PatternObfuscator patternObfuscator = patternObfuscatorMap.get(provider);\n-            if (patternObfuscator != null) {\n-                return patternObfuscator.obfuscate(input);\n-            }\n-        }\n-        return input;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (!(o instanceof LoginInfoObfuscator)) return false;\n-        LoginInfoObfuscator that = (LoginInfoObfuscator) o;\n-        return patternObfuscatorMap.equals(that.patternObfuscatorMap);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return patternObfuscatorMap.hashCode() + 13;\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NDc3MQ==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443374771", "body": "Shouldn't we keep the key for all of these? So this turns into `\"authCode\": \"***\"`", "bodyText": "Shouldn't we keep the key for all of these? So this turns into \"authCode\": \"***\"", "bodyHTML": "<p dir=\"auto\">Shouldn't we keep the key for all of these? So this turns into <code>\"authCode\": \"***\"</code></p>", "author": "cmelchior", "createdAt": "2020-06-22T07:47:52Z", "path": "realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.log.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Obfuscator for token-related login requests.\n+ * <p>\n+ * It will replace the\n+ * <ul>\n+ * <li>{@code \"authCode\":\"<TOKEN>\"},</li>\n+ * <li>{@code \"id_token\":\"<TOKEN>\"},</li>\n+ * <li>{@code \"token\":\"<TOKEN>\"}, and</li>\n+ * <li>{@code \"access_token\":\"<TOKEN>\"}</li>\n+ * </ul>\n+ * patterns with {@code \"token\":\"***\"}.\n+ */\n+public class TokenObfuscator extends PatternObfuscator {\n+\n+    private TokenObfuscator(Map<Pattern, String> patternReplacementMap) {\n+        super(patternReplacementMap);\n+    }\n+\n+    /**\n+     * Creates a {@link PatternObfuscator} for tokens.\n+     *\n+     * @return an obfuscator that keeps token information from being displayed in the logcat.\n+     */\n+    public static TokenObfuscator obfuscator() {\n+        return new TokenObfuscator(getPatterns());\n+    }\n+\n+    private static Map<Pattern, String> getPatterns() {\n+        Map<Pattern, String> map = new HashMap<>();\n+        map.put(Pattern.compile(\"((\\\"authCode\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");", "originalCommit": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7318a41a2267fb3d6365b59e94c71d116c6de512", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java b/realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java\nindex 0d1730149..c3687d71f 100644\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java\n+++ b/realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java\n", "chunk": "@@ -49,10 +56,10 @@ public class TokenObfuscator extends PatternObfuscator {\n \n     private static Map<Pattern, String> getPatterns() {\n         Map<Pattern, String> map = new HashMap<>();\n-        map.put(Pattern.compile(\"((\\\"authCode\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"id_token\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"authCode\\\"):(\\\".+?\\\"))\"), \"\\\"authCode\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"id_token\\\"):(\\\".+?\\\"))\"), \"\\\"id_token\\\":\\\"***\\\"\");\n         map.put(Pattern.compile(\"((\\\"token\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"access_token\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"access_token\\\"):(\\\".+?\\\"))\"), \"\\\"access_token\\\":\\\"***\\\"\");\n         return map;\n     }\n }\n", "next_change": {"commit": "1062ae64b6bf02d89a0ca8e12d6b293d24709b69", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java b/realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java\nsimilarity index 65%\nrename from realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java\nrename to realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java\nindex c3687d71f..0abe1f6f7 100644\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java\n+++ b/realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java\n", "chunk": "@@ -56,10 +61,10 @@ public class TokenObfuscator extends PatternObfuscator {\n \n     private static Map<Pattern, String> getPatterns() {\n         Map<Pattern, String> map = new HashMap<>();\n-        map.put(Pattern.compile(\"((\\\"authCode\\\"):(\\\".+?\\\"))\"), \"\\\"authCode\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"id_token\\\"):(\\\".+?\\\"))\"), \"\\\"id_token\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"token\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"access_token\\\"):(\\\".+?\\\"))\"), \"\\\"access_token\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + AUTHCODE_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + AUTHCODE_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + ID_TOKEN_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + ID_TOKEN_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + TOKEN_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + TOKEN_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + ACCESS_TOKEN_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + ACCESS_TOKEN_KEY + \"\\\":\\\"***\\\"\");\n         return map;\n     }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/TokenObfuscator.java\nsimilarity index 55%\nrename from realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java\nrename to realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/TokenObfuscator.java\nindex 0d1730149..a473fbc68 100644\n--- a/realm/realm-library/src/main/java/io/realm/log/obfuscator/TokenObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/TokenObfuscator.java\n", "chunk": "@@ -49,10 +61,10 @@ public class TokenObfuscator extends PatternObfuscator {\n \n     private static Map<Pattern, String> getPatterns() {\n         Map<Pattern, String> map = new HashMap<>();\n-        map.put(Pattern.compile(\"((\\\"authCode\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"id_token\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"token\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n-        map.put(Pattern.compile(\"((\\\"access_token\\\"):(\\\".+?\\\"))\"), \"\\\"token\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + AUTHCODE_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + AUTHCODE_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + ID_TOKEN_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + ID_TOKEN_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + TOKEN_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + TOKEN_KEY + \"\\\":\\\"***\\\"\");\n+        map.put(Pattern.compile(\"((\\\"\" + ACCESS_TOKEN_KEY + \"\\\"):(\\\".+?\\\"))\"), \"\\\"\" + ACCESS_TOKEN_KEY + \"\\\":\\\"***\\\"\");\n         return map;\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3OTAyMA==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443379020", "body": "Maybe rename to `httpLogObfuscator` ? ... The `PatternObfuscator` class isn't restricted to only login, so if anyone actually implements their own class they could obfuscate other things as well.", "bodyText": "Maybe rename to httpLogObfuscator ? ... The PatternObfuscator class isn't restricted to only login, so if anyone actually implements their own class they could obfuscate other things as well.", "bodyHTML": "<p dir=\"auto\">Maybe rename to <code>httpLogObfuscator</code> ? ... The <code>PatternObfuscator</code> class isn't restricted to only login, so if anyone actually implements their own class they could obfuscate other things as well.</p>", "author": "cmelchior", "createdAt": "2020-06-22T07:55:56Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -470,6 +487,19 @@ public Builder codecRegistry(CodecRegistry codecRegistry) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link LoginInfoObfuscator} used to keep sensitive data from being displayed in\n+         * the logcat. These obfuscators default to\n+         * {@link PatternObfuscatorFactory#getObfuscators()} in a production environment.\n+         *\n+         * @param loginInfoObfuscator The default login obfuscator for the app.\n+         */\n+        public Builder loginInfoObfuscator(LoginInfoObfuscator loginInfoObfuscator) {", "originalCommit": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQwMzQ5Mw==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443403493", "bodyText": "Unless the providers URL segment is used for other stuff than login, then it is only for login. I could abstract the specific segment we want to look for in the URL though, then it won't be login specific. Does it make sense?", "author": "edualonso", "createdAt": "2020-06-22T08:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3OTAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "7318a41a2267fb3d6365b59e94c71d116c6de512", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 18502563d..b821883b1 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -488,15 +486,14 @@ public class AppConfiguration {\n         }\n \n         /**\n-         * Sets the {@link LoginInfoObfuscator} used to keep sensitive data from being displayed in\n-         * the logcat. These obfuscators default to\n-         * {@link PatternObfuscatorFactory#getObfuscators()} in a production environment.\n+         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n+         * the logcat.\n          *\n-         * @param loginInfoObfuscator The default login obfuscator for the app.\n+         * @param loggingInterceptor The default login interceptor for the app.\n          */\n-        public Builder loginInfoObfuscator(LoginInfoObfuscator loginInfoObfuscator) {\n-            Util.checkNull(loginInfoObfuscator, \"loginInfoObfuscator\");\n-            this.loginInfoObfuscator = loginInfoObfuscator;\n+        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {\n+            Util.checkNull(loggingInterceptor, \"loggingInterceptor\");\n+            this.loggingInterceptor = loggingInterceptor;\n             return this;\n         }\n \n", "next_change": {"commit": "8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex b821883b1..01cb6fcdc 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -486,14 +491,13 @@ public class AppConfiguration {\n         }\n \n         /**\n-         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n-         * the logcat.\n+         * Sets the {@link HttpLogObfuscator} used to keep sensitive information in HTTP requests\n+         * from being displayed in the logcat.\n          *\n-         * @param loggingInterceptor The default login interceptor for the app.\n+         * @param httpLogObfuscator the default HTTP log obfuscator for the app.\n          */\n-        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {\n-            Util.checkNull(loggingInterceptor, \"loggingInterceptor\");\n-            this.loggingInterceptor = loggingInterceptor;\n+        public Builder httpLogObfuscator(@Nullable HttpLogObfuscator httpLogObfuscator) {\n+            this.httpLogObfuscator = httpLogObfuscator;\n             return this;\n         }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 18502563d..44cc177ed 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -488,15 +530,15 @@ public class AppConfiguration {\n         }\n \n         /**\n-         * Sets the {@link LoginInfoObfuscator} used to keep sensitive data from being displayed in\n-         * the logcat. These obfuscators default to\n-         * {@link PatternObfuscatorFactory#getObfuscators()} in a production environment.\n+         * Sets the {@link HttpLogObfuscator} used to keep sensitive information in HTTP requests\n+         * from being displayed in the logcat.\n+         * <p>\n+         * If left unspecified, it will default to obfuscating HTTP login requests.\n          *\n-         * @param loginInfoObfuscator The default login obfuscator for the app.\n+         * @param httpLogObfuscator the default HTTP log obfuscator for the app.\n          */\n-        public Builder loginInfoObfuscator(LoginInfoObfuscator loginInfoObfuscator) {\n-            Util.checkNull(loginInfoObfuscator, \"loginInfoObfuscator\");\n-            this.loginInfoObfuscator = loginInfoObfuscator;\n+        public Builder httpLogObfuscator(@Nullable HttpLogObfuscator httpLogObfuscator) {\n+            this.httpLogObfuscator = httpLogObfuscator;\n             return this;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}, {"oid": "039da102fa0c7a130ac408a8d7d9e471a177366e", "committedDate": "2020-08-12 18:00:22 +0200", "message": "Finish RealmAppConfiguration Javadoc + Tests (#7023)"}, {"oid": "a813aa8cbe5b736febad667362f5edcddbdf8415", "committedDate": "2020-08-25 18:44:29 +0200", "message": "Fix checkstyle issues (#7058)"}, {"oid": "66599ce46892e145d2949fb358f0be38986cb8dd", "committedDate": "2020-09-08 15:04:51 +0200", "message": "Align MongoDB Realm API's with other SDK's (#7060)"}, {"oid": "b7435b467f0247c16691e09ac870d20e0750bbb8", "committedDate": "2020-09-16 11:56:14 +0200", "message": "Add support for multiple apps (#7095)"}, {"oid": "4cfb10ac334f2992f85b27cbe64a0af905eeaa3c", "committedDate": "2020-09-16 19:09:21 +0200", "message": "Handle Client Reset in a separate callback (#7097)"}, {"oid": "5670317bab8b4d4e3a73c34c118a5455b68e78e8", "committedDate": "2021-06-30 12:00:51 +0200", "message": "Fixed configuring HTTP timeouts (#7512)"}, {"oid": "6fb632ecb4a533fb6e5493b24e5558d40651846d", "committedDate": "2021-10-12 09:03:14 -0600", "message": "Update AppConfiguration.java"}, {"oid": "2bf41763fd6d51e2edad5b0ed157198b6dbcdfad", "committedDate": "2021-12-03 16:43:55 +0100", "message": "Fix AppConfiguration.syncRootDirectory() not working correctly (#7604)"}, {"oid": "f0eca830527cd8255ce8fb9bcc83a545a940f6d3", "committedDate": "2021-12-17 15:43:00 +0100", "message": "Automatic client reset on sync with \"seamless loss\" (#7585)"}, {"oid": "8d54cdba51df3a8cce8abccb58a6c9aac16799d2", "committedDate": "2022-08-25 10:05:30 +0200", "message": "Implement client reset automatic recover on partition based sync (#7698)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3OTY2OQ==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r443379669", "body": "Nitpick: I think I feel that `RegexObfuscatorFactory` is a bit more clear than `PatternObfuscatorFactory`?", "bodyText": "Nitpick: I think I feel that RegexObfuscatorFactory is a bit more clear than PatternObfuscatorFactory?", "bodyHTML": "<p dir=\"auto\">Nitpick: I think I feel that <code>RegexObfuscatorFactory</code> is a bit more clear than <code>PatternObfuscatorFactory</code>?</p>", "author": "cmelchior", "createdAt": "2020-06-22T07:57:14Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.realm.log.obfuscator.ApiKeyObfuscator;\n+import io.realm.log.obfuscator.CustomFunctionObfuscator;\n+import io.realm.log.obfuscator.EmailPasswordObfuscator;\n+import io.realm.log.obfuscator.PatternObfuscator;\n+import io.realm.log.obfuscator.TokenObfuscator;\n+\n+public class PatternObfuscatorFactory {", "originalCommit": "90704a9455795798eaa0c6e7f9ab3d80b7082aa2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7318a41a2267fb3d6365b59e94c71d116c6de512", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\nsimilarity index 77%\nrename from realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java\nrename to realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\nindex 2598a853c..d753c5f40 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\n", "chunk": "@@ -25,9 +25,11 @@ import io.realm.log.obfuscator.EmailPasswordObfuscator;\n import io.realm.log.obfuscator.PatternObfuscator;\n import io.realm.log.obfuscator.TokenObfuscator;\n \n-public class PatternObfuscatorFactory {\n+public class RegexObfuscatorPatternFactory {\n \n-    private static Map<String, PatternObfuscator> logObfuscators =\n+    public static final String LOGIN_FEATURE = \"providers\";\n+\n+    private static Map<String, PatternObfuscator> loginObfuscators =\n             new HashMap<String, PatternObfuscator>() {{\n                 put(Credentials.IdentityProvider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n                 put(Credentials.IdentityProvider.SERVER_API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java\ndeleted file mode 100644\nindex 2598a853c..000000000\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/PatternObfuscatorFactory.java\n+++ /dev/null\n", "chunk": "@@ -1,51 +0,0 @@\n-/*\n- * Copyright 2020 Realm Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.realm.mongodb;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import io.realm.log.obfuscator.ApiKeyObfuscator;\n-import io.realm.log.obfuscator.CustomFunctionObfuscator;\n-import io.realm.log.obfuscator.EmailPasswordObfuscator;\n-import io.realm.log.obfuscator.PatternObfuscator;\n-import io.realm.log.obfuscator.TokenObfuscator;\n-\n-public class PatternObfuscatorFactory {\n-\n-    private static Map<String, PatternObfuscator> logObfuscators =\n-            new HashMap<String, PatternObfuscator>() {{\n-                put(Credentials.IdentityProvider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.SERVER_API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.APPLE.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.CUSTOM_FUNCTION.getId(), CustomFunctionObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.EMAIL_PASSWORD.getId(), EmailPasswordObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.FACEBOOK.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.GOOGLE.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.JWT.getId(), TokenObfuscator.obfuscator());\n-            }};\n-\n-    /**\n-     * Provides a {@link Map} of providers and {@link PatternObfuscator}s to be used in a\n-     * {@link io.realm.mongodb.App}.\n-     *\n-     * @return the obfuscators that will be used in the app.\n-     */\n-    public static Map<String, PatternObfuscator> getObfuscators() {\n-        return logObfuscators;\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"oid": "7318a41a2267fb3d6365b59e94c71d116c6de512", "url": "https://github.com/realm/realm-java/commit/7318a41a2267fb3d6365b59e94c71d116c6de512", "message": "Added an interceptor to print network requests and added the obfuscator solution to it. Added more tests for robustness. Cleanup. Still missing integration-level tests", "committedDate": "2020-06-22T11:49:04Z", "type": "commit"}, {"oid": "1062ae64b6bf02d89a0ca8e12d6b293d24709b69", "url": "https://github.com/realm/realm-java/commit/1062ae64b6bf02d89a0ca8e12d6b293d24709b69", "message": "Added integration tests and more cleanup", "committedDate": "2020-06-22T20:34:25Z", "type": "commit"}, {"oid": "c83da32363c81b4126922eac80b337bd1860c41e", "url": "https://github.com/realm/realm-java/commit/c83da32363c81b4126922eac80b337bd1860c41e", "message": "Merge branch 'v10' into el/logcat-obfuscation", "committedDate": "2020-06-22T20:36:15Z", "type": "commit"}, {"oid": "c75fc2d3d13723ad0cd1661e5e7711a2336f453d", "url": "https://github.com/realm/realm-java/commit/c75fc2d3d13723ad0cd1661e5e7711a2336f453d", "message": "Removed set loglevel from credentials test", "committedDate": "2020-06-22T20:41:24Z", "type": "commit"}, {"oid": "b2ed3cbad48ee5ac399ec6ea065f9954a26cafee", "url": "https://github.com/realm/realm-java/commit/b2ed3cbad48ee5ac399ec6ea065f9954a26cafee", "message": "Removed log imports", "committedDate": "2020-06-22T20:42:19Z", "type": "commit"}, {"oid": "eb3ca4f69c12c6de2d5d2ea7e972279d1e6170d4", "url": "https://github.com/realm/realm-java/commit/eb3ca4f69c12c6de2d5d2ea7e972279d1e6170d4", "message": "Uncommented test", "committedDate": "2020-06-22T21:00:33Z", "type": "commit"}, {"oid": "c2cc202aa68e6214be7cbd5ba6c5fa7a14a0c90a", "url": "https://github.com/realm/realm-java/commit/c2cc202aa68e6214be7cbd5ba6c5fa7a14a0c90a", "message": "Cleanup", "committedDate": "2020-06-22T21:04:30Z", "type": "commit"}, {"oid": "2e850a9f31d2c8d5d8f34f8f35f4ed1daff00110", "url": "https://github.com/realm/realm-java/commit/2e850a9f31d2c8d5d8f34f8f35f4ed1daff00110", "message": "Fixed wrong references in unit test", "committedDate": "2020-06-23T07:09:59Z", "type": "commit"}, {"oid": "b8b9292d36c85668dec13bc110f129f8f665c4ee", "url": "https://github.com/realm/realm-java/commit/b8b9292d36c85668dec13bc110f129f8f665c4ee", "message": "Cleanup", "committedDate": "2020-06-23T09:15:17Z", "type": "commit"}, {"oid": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c", "url": "https://github.com/realm/realm-java/commit/f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c", "message": "Merge branch 'v10' into el/logcat-obfuscation", "committedDate": "2020-06-23T09:15:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxMTY3Ng==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444311676", "body": "The more correct term would probably be oAuth2 token related", "bodyText": "The more correct term would probably be oAuth2 token related", "bodyHTML": "<p dir=\"auto\">The more correct term would probably be oAuth2 token related</p>", "author": "cmelchior", "createdAt": "2020-06-23T15:26:17Z", "path": "realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Obfuscator for token-related login requests.", "originalCommit": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java b/realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java\nindex 0abe1f6f7..94f3415b8 100644\n--- a/realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java\n+++ b/realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java\n", "chunk": "@@ -21,7 +21,7 @@ import java.util.Map;\n import java.util.regex.Pattern;\n \n /**\n- * Obfuscator for token-related login requests.\n+ * Obfuscator for oAuth2 token-related login requests.\n  * <p>\n  * It will replace the\n  * <ul>\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/TokenObfuscator.java\nsimilarity index 96%\nrename from realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java\nrename to realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/TokenObfuscator.java\nindex 0abe1f6f7..a473fbc68 100644\n--- a/realm/realm-library/src/main/java/io/realm/internal/obfuscator/TokenObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/TokenObfuscator.java\n", "chunk": "@@ -14,14 +14,14 @@\n  * limitations under the License.\n  */\n \n-package io.realm.internal.obfuscator;\n+package io.realm.internal.log.obfuscator;\n \n import java.util.HashMap;\n import java.util.Map;\n import java.util.regex.Pattern;\n \n /**\n- * Obfuscator for token-related login requests.\n+ * Obfuscator for oAuth2 token-related login requests.\n  * <p>\n  * It will replace the\n  * <ul>\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNTM1NQ==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444315355", "body": "Should we only allow one? If people add their own, it will replace ours, which might be a problem. I'm fine with us starting by just allowing one, but we should probably make clear in the JavaDoc that this is just for Http requests (not logging in general) and that if you replace it you are responsible for obfuscating the details.", "bodyText": "Should we only allow one? If people add their own, it will replace ours, which might be a problem. I'm fine with us starting by just allowing one, but we should probably make clear in the JavaDoc that this is just for Http requests (not logging in general) and that if you replace it you are responsible for obfuscating the details.", "bodyHTML": "<p dir=\"auto\">Should we only allow one? If people add their own, it will replace ours, which might be a problem. I'm fine with us starting by just allowing one, but we should probably make clear in the JavaDoc that this is just for Http requests (not logging in general) and that if you replace it you are responsible for obfuscating the details.</p>", "author": "cmelchior", "createdAt": "2020-06-23T15:31:15Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -470,6 +485,18 @@ public Builder codecRegistry(CodecRegistry codecRegistry) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n+         * the logcat.\n+         *\n+         * @param loggingInterceptor The default login interceptor for the app.\n+         */\n+        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {\n+            Util.checkNull(loggingInterceptor, \"loggingInterceptor\");\n+            this.loggingInterceptor = loggingInterceptor;", "originalCommit": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex b821883b1..01cb6fcdc 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -486,14 +491,13 @@ public class AppConfiguration {\n         }\n \n         /**\n-         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n-         * the logcat.\n+         * Sets the {@link HttpLogObfuscator} used to keep sensitive information in HTTP requests\n+         * from being displayed in the logcat.\n          *\n-         * @param loggingInterceptor The default login interceptor for the app.\n+         * @param httpLogObfuscator the default HTTP log obfuscator for the app.\n          */\n-        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {\n-            Util.checkNull(loggingInterceptor, \"loggingInterceptor\");\n-            this.loggingInterceptor = loggingInterceptor;\n+        public Builder httpLogObfuscator(@Nullable HttpLogObfuscator httpLogObfuscator) {\n+            this.httpLogObfuscator = httpLogObfuscator;\n             return this;\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex b821883b1..44cc177ed 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -486,14 +530,15 @@ public class AppConfiguration {\n         }\n \n         /**\n-         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n-         * the logcat.\n+         * Sets the {@link HttpLogObfuscator} used to keep sensitive information in HTTP requests\n+         * from being displayed in the logcat.\n+         * <p>\n+         * If left unspecified, it will default to obfuscating HTTP login requests.\n          *\n-         * @param loggingInterceptor The default login interceptor for the app.\n+         * @param httpLogObfuscator the default HTTP log obfuscator for the app.\n          */\n-        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {\n-            Util.checkNull(loggingInterceptor, \"loggingInterceptor\");\n-            this.loggingInterceptor = loggingInterceptor;\n+        public Builder httpLogObfuscator(@Nullable HttpLogObfuscator httpLogObfuscator) {\n+            this.httpLogObfuscator = httpLogObfuscator;\n             return this;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}, {"oid": "039da102fa0c7a130ac408a8d7d9e471a177366e", "committedDate": "2020-08-12 18:00:22 +0200", "message": "Finish RealmAppConfiguration Javadoc + Tests (#7023)"}, {"oid": "a813aa8cbe5b736febad667362f5edcddbdf8415", "committedDate": "2020-08-25 18:44:29 +0200", "message": "Fix checkstyle issues (#7058)"}, {"oid": "66599ce46892e145d2949fb358f0be38986cb8dd", "committedDate": "2020-09-08 15:04:51 +0200", "message": "Align MongoDB Realm API's with other SDK's (#7060)"}, {"oid": "b7435b467f0247c16691e09ac870d20e0750bbb8", "committedDate": "2020-09-16 11:56:14 +0200", "message": "Add support for multiple apps (#7095)"}, {"oid": "4cfb10ac334f2992f85b27cbe64a0af905eeaa3c", "committedDate": "2020-09-16 19:09:21 +0200", "message": "Handle Client Reset in a separate callback (#7097)"}, {"oid": "5670317bab8b4d4e3a73c34c118a5455b68e78e8", "committedDate": "2021-06-30 12:00:51 +0200", "message": "Fixed configuring HTTP timeouts (#7512)"}, {"oid": "6fb632ecb4a533fb6e5493b24e5558d40651846d", "committedDate": "2021-10-12 09:03:14 -0600", "message": "Update AppConfiguration.java"}, {"oid": "2bf41763fd6d51e2edad5b0ed157198b6dbcdfad", "committedDate": "2021-12-03 16:43:55 +0100", "message": "Fix AppConfiguration.syncRootDirectory() not working correctly (#7604)"}, {"oid": "f0eca830527cd8255ce8fb9bcc83a545a940f6d3", "committedDate": "2021-12-17 15:43:00 +0100", "message": "Automatic client reset on sync with \"seamless loss\" (#7585)"}, {"oid": "8d54cdba51df3a8cce8abccb58a6c9aac16799d2", "committedDate": "2022-08-25 10:05:30 +0200", "message": "Implement client reset automatic recover on partition based sync (#7698)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNTYwNQ==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444315605", "body": "This class is part of the public API, so should have a JavaDoc description", "bodyText": "This class is part of the public API, so should have a JavaDoc description", "bodyHTML": "<p dir=\"auto\">This class is part of the public API, so should have a JavaDoc description</p>", "author": "cmelchior", "createdAt": "2020-06-23T15:31:38Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.realm.internal.obfuscator.ApiKeyObfuscator;\n+import io.realm.internal.obfuscator.CustomFunctionObfuscator;\n+import io.realm.internal.obfuscator.EmailPasswordObfuscator;\n+import io.realm.internal.obfuscator.RegexPatternObfuscator;\n+import io.realm.internal.obfuscator.TokenObfuscator;\n+\n+public class RegexObfuscatorPatternFactory {", "originalCommit": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\nindex 2b042f8ac..32c4ad4cd 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\n", "chunk": "@@ -25,6 +25,10 @@ import io.realm.internal.obfuscator.EmailPasswordObfuscator;\n import io.realm.internal.obfuscator.RegexPatternObfuscator;\n import io.realm.internal.obfuscator.TokenObfuscator;\n \n+/**\n+ * The RegexObfuscatorPatternFactory provides the {@link RegexPatternObfuscator}s needed to\n+ * obfuscate the HTTP requests being logged for a particular feature.\n+ */\n public class RegexObfuscatorPatternFactory {\n \n     public static final String LOGIN_FEATURE = \"providers\";\n", "next_change": {"commit": "77b32ff7496261a60d423c171b129a19f3e2bc23", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java\nsimilarity index 71%\nrename from realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\nrename to realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java\nindex 32c4ad4cd..b8443a0d6 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java\n", "chunk": "@@ -14,22 +14,18 @@\n  * limitations under the License.\n  */\n \n-package io.realm.mongodb;\n+package io.realm.mongodb.log.obfuscator;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-import io.realm.internal.obfuscator.ApiKeyObfuscator;\n-import io.realm.internal.obfuscator.CustomFunctionObfuscator;\n-import io.realm.internal.obfuscator.EmailPasswordObfuscator;\n-import io.realm.internal.obfuscator.RegexPatternObfuscator;\n-import io.realm.internal.obfuscator.TokenObfuscator;\n+import io.realm.mongodb.Credentials;\n \n /**\n- * The RegexObfuscatorPatternFactory provides the {@link RegexPatternObfuscator}s needed to\n- * obfuscate the HTTP requests being logged for a particular feature.\n+ * The RegexPatternObfuscatorFactory provides the {@link RegexPatternObfuscator}s needed to\n+ * obfuscate HTTP requests being logged for a particular feature.\n  */\n-public class RegexObfuscatorPatternFactory {\n+public class RegexPatternObfuscatorFactory {\n \n     public static final String LOGIN_FEATURE = \"providers\";\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\ndeleted file mode 100644\nindex 2b042f8ac..000000000\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/RegexObfuscatorPatternFactory.java\n+++ /dev/null\n", "chunk": "@@ -1,57 +0,0 @@\n-/*\n- * Copyright 2020 Realm Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.realm.mongodb;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import io.realm.internal.obfuscator.ApiKeyObfuscator;\n-import io.realm.internal.obfuscator.CustomFunctionObfuscator;\n-import io.realm.internal.obfuscator.EmailPasswordObfuscator;\n-import io.realm.internal.obfuscator.RegexPatternObfuscator;\n-import io.realm.internal.obfuscator.TokenObfuscator;\n-\n-public class RegexObfuscatorPatternFactory {\n-\n-    public static final String LOGIN_FEATURE = \"providers\";\n-\n-    private static Map<String, RegexPatternObfuscator> loginObfuscators =\n-            new HashMap<String, RegexPatternObfuscator>() {{\n-                put(Credentials.IdentityProvider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.SERVER_API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.APPLE.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.CUSTOM_FUNCTION.getId(), CustomFunctionObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.EMAIL_PASSWORD.getId(), EmailPasswordObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.FACEBOOK.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.GOOGLE.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.JWT.getId(), TokenObfuscator.obfuscator());\n-            }};\n-\n-    /**\n-     * Provides the {@link Map} of providers and {@link RegexPatternObfuscator}s corresponding to a\n-     * concrete feature to be used in a {@link io.realm.mongodb.App}.\n-     *\n-     * @param feature the feature to obfuscate.\n-     * @return the obfuscators that will be used in the app.\n-     */\n-    public static Map<String, RegexPatternObfuscator> getObfuscators(String feature) {\n-        if (feature.equals(LOGIN_FEATURE)) {\n-            return loginObfuscators;\n-        }\n-        throw new IllegalArgumentException(\"No feature found for \" + feature);\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyNjY1Nw==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444326657", "body": "I'm a bit uneasy about this API:\r\n\r\n1) Calling it loggingInterceptor is a bit too generic. It only works for http requests, not all logs. Maybe rename to `httpLoggingInterceptor`?\r\n2) It taking a `LoggingInterceptor` as argument is a bit weird as `LoggingInterceptor` is not an interface but an actual class that people cannot really customize. Should this just have been `Interceptor` ? But `Interceptor` is an interface from OkHttp. I would a be a bit uneasy about letting that be part of our public API as we are then bound by that contract.\r\n", "bodyText": "I'm a bit uneasy about this API:\n\nCalling it loggingInterceptor is a bit too generic. It only works for http requests, not all logs. Maybe rename to httpLoggingInterceptor?\nIt taking a LoggingInterceptor as argument is a bit weird as LoggingInterceptor is not an interface but an actual class that people cannot really customize. Should this just have been Interceptor ? But Interceptor is an interface from OkHttp. I would a be a bit uneasy about letting that be part of our public API as we are then bound by that contract.", "bodyHTML": "<p dir=\"auto\">I'm a bit uneasy about this API:</p>\n<ol dir=\"auto\">\n<li>Calling it loggingInterceptor is a bit too generic. It only works for http requests, not all logs. Maybe rename to <code>httpLoggingInterceptor</code>?</li>\n<li>It taking a <code>LoggingInterceptor</code> as argument is a bit weird as <code>LoggingInterceptor</code> is not an interface but an actual class that people cannot really customize. Should this just have been <code>Interceptor</code> ? But <code>Interceptor</code> is an interface from OkHttp. I would a be a bit uneasy about letting that be part of our public API as we are then bound by that contract.</li>\n</ol>", "author": "cmelchior", "createdAt": "2020-06-23T15:48:06Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -470,6 +485,18 @@ public Builder codecRegistry(CodecRegistry codecRegistry) {\n             return this;\n         }\n \n+        /**\n+         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n+         * the logcat.\n+         *\n+         * @param loggingInterceptor The default login interceptor for the app.\n+         */\n+        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {", "originalCommit": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5MjYzMw==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444792633", "bodyText": "That is a very valid concern. I guess I should tattoo the Liskov substitution principle in my forehead \ud83d\ude13 .", "author": "edualonso", "createdAt": "2020-06-24T10:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyNjY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex b821883b1..01cb6fcdc 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -486,14 +491,13 @@ public class AppConfiguration {\n         }\n \n         /**\n-         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n-         * the logcat.\n+         * Sets the {@link HttpLogObfuscator} used to keep sensitive information in HTTP requests\n+         * from being displayed in the logcat.\n          *\n-         * @param loggingInterceptor The default login interceptor for the app.\n+         * @param httpLogObfuscator the default HTTP log obfuscator for the app.\n          */\n-        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {\n-            Util.checkNull(loggingInterceptor, \"loggingInterceptor\");\n-            this.loggingInterceptor = loggingInterceptor;\n+        public Builder httpLogObfuscator(@Nullable HttpLogObfuscator httpLogObfuscator) {\n+            this.httpLogObfuscator = httpLogObfuscator;\n             return this;\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex b821883b1..44cc177ed 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -486,14 +530,15 @@ public class AppConfiguration {\n         }\n \n         /**\n-         * Sets the {@link LoggingInterceptor} used to keep sensitive data from being displayed in\n-         * the logcat.\n+         * Sets the {@link HttpLogObfuscator} used to keep sensitive information in HTTP requests\n+         * from being displayed in the logcat.\n+         * <p>\n+         * If left unspecified, it will default to obfuscating HTTP login requests.\n          *\n-         * @param loggingInterceptor The default login interceptor for the app.\n+         * @param httpLogObfuscator the default HTTP log obfuscator for the app.\n          */\n-        public Builder loggingInterceptor(LoggingInterceptor loggingInterceptor) {\n-            Util.checkNull(loggingInterceptor, \"loggingInterceptor\");\n-            this.loggingInterceptor = loggingInterceptor;\n+        public Builder httpLogObfuscator(@Nullable HttpLogObfuscator httpLogObfuscator) {\n+            this.httpLogObfuscator = httpLogObfuscator;\n             return this;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}, {"oid": "039da102fa0c7a130ac408a8d7d9e471a177366e", "committedDate": "2020-08-12 18:00:22 +0200", "message": "Finish RealmAppConfiguration Javadoc + Tests (#7023)"}, {"oid": "a813aa8cbe5b736febad667362f5edcddbdf8415", "committedDate": "2020-08-25 18:44:29 +0200", "message": "Fix checkstyle issues (#7058)"}, {"oid": "66599ce46892e145d2949fb358f0be38986cb8dd", "committedDate": "2020-09-08 15:04:51 +0200", "message": "Align MongoDB Realm API's with other SDK's (#7060)"}, {"oid": "b7435b467f0247c16691e09ac870d20e0750bbb8", "committedDate": "2020-09-16 11:56:14 +0200", "message": "Add support for multiple apps (#7095)"}, {"oid": "4cfb10ac334f2992f85b27cbe64a0af905eeaa3c", "committedDate": "2020-09-16 19:09:21 +0200", "message": "Handle Client Reset in a separate callback (#7097)"}, {"oid": "5670317bab8b4d4e3a73c34c118a5455b68e78e8", "committedDate": "2021-06-30 12:00:51 +0200", "message": "Fixed configuring HTTP timeouts (#7512)"}, {"oid": "6fb632ecb4a533fb6e5493b24e5558d40651846d", "committedDate": "2021-10-12 09:03:14 -0600", "message": "Update AppConfiguration.java"}, {"oid": "2bf41763fd6d51e2edad5b0ed157198b6dbcdfad", "committedDate": "2021-12-03 16:43:55 +0100", "message": "Fix AppConfiguration.syncRootDirectory() not working correctly (#7604)"}, {"oid": "f0eca830527cd8255ce8fb9bcc83a545a940f6d3", "committedDate": "2021-12-17 15:43:00 +0100", "message": "Automatic client reset on sync with \"seamless loss\" (#7585)"}, {"oid": "8d54cdba51df3a8cce8abccb58a6c9aac16799d2", "committedDate": "2022-08-25 10:05:30 +0200", "message": "Implement client reset automatic recover on partition based sync (#7698)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyOTg5Ng==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r444329896", "body": "This factory method feels a bit weird to have public? Since it doesn't really work for any other \"feature\"?", "bodyText": "This factory method feels a bit weird to have public? Since it doesn't really work for any other \"feature\"?", "bodyHTML": "<p dir=\"auto\">This factory method feels a bit weird to have public? Since it doesn't really work for any other \"feature\"?</p>", "author": "cmelchior", "createdAt": "2020-06-23T15:52:43Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.network.interceptor;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import io.realm.log.LogLevel;\n+import io.realm.log.RealmLog;\n+import io.realm.internal.obfuscator.HttpLogObfuscator;\n+import io.realm.internal.obfuscator.RegexPatternObfuscator;\n+import io.realm.mongodb.RegexObfuscatorPatternFactory;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okio.Buffer;\n+\n+/**\n+ * The LoggingInterceptor prints information\n+ */\n+public class LoggingInterceptor implements Interceptor {\n+\n+    private static final Charset UTF8 = Charset.forName(\"UTF-8\");\n+\n+    @Nullable\n+    private HttpLogObfuscator httpLogObfuscator;\n+\n+    private LoggingInterceptor(@Nullable HttpLogObfuscator httpLogObfuscator) {\n+        this.httpLogObfuscator = httpLogObfuscator;\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain) throws IOException {\n+        Request request = chain.request();\n+        if (RealmLog.getLevel() <= LogLevel.DEBUG) {\n+            StringBuilder sb = new StringBuilder(request.method());\n+            sb.append(' ');\n+            sb.append(request.url());\n+            sb.append('\\n');\n+            sb.append(request.headers());\n+            if (request.body() != null) {\n+                // Stripped down version of https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java\n+                // We only expect request context to be JSON.\n+                Buffer buffer = new Buffer();\n+                request.body().writeTo(buffer);\n+\n+                // Obfuscate sensitive information if applicable\n+                String input = buffer.readString(UTF8);\n+                if (httpLogObfuscator != null) {\n+                    input = httpLogObfuscator.obfuscate(request.url().pathSegments(), input);\n+                }\n+                sb.append(input);\n+            }\n+            RealmLog.debug(\"HTTP Request = \\n%s\", sb);\n+        }\n+        return chain.proceed(request);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof LoggingInterceptor)) return false;\n+        LoggingInterceptor that = (LoggingInterceptor) o;\n+        if (httpLogObfuscator == null) {\n+            return that.httpLogObfuscator == null;\n+        }\n+        return httpLogObfuscator.equals(that.httpLogObfuscator);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        if (httpLogObfuscator == null) {\n+            return super.hashCode();\n+        }\n+        return httpLogObfuscator.hashCode() + 27;\n+    }\n+\n+    /**\n+     * Returns an initialized {@link Interceptor} for a specific feature, e.g. login would be\n+     * {@code providers}.\n+     *\n+     * @param feature the feature to be intercepted or null if no obfuscation is to take place.\n+     * @return the interceptor to be used for logging purposes.\n+     */\n+    public static LoggingInterceptor interceptor(@Nullable String feature) {", "originalCommit": "f2bf9ce67fa36fae4fdc66d5be2201d50db19a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/LoggingInterceptor.java\nsimilarity index 71%\nrename from realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java\nrename to realm/realm-library/src/objectServer/java/io/realm/internal/network/LoggingInterceptor.java\nindex f85443b3b..33d599bc4 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/LoggingInterceptor.java\n", "chunk": "@@ -91,20 +88,4 @@ public class LoggingInterceptor implements Interceptor {\n         }\n         return httpLogObfuscator.hashCode() + 27;\n     }\n-\n-    /**\n-     * Returns an initialized {@link Interceptor} for a specific feature, e.g. login would be\n-     * {@code providers}.\n-     *\n-     * @param feature the feature to be intercepted or null if no obfuscation is to take place.\n-     * @return the interceptor to be used for logging purposes.\n-     */\n-    public static LoggingInterceptor interceptor(@Nullable String feature) {\n-        if (feature != null) {\n-            Map<String, RegexPatternObfuscator> obfuscators = RegexObfuscatorPatternFactory.getObfuscators(RegexObfuscatorPatternFactory.LOGIN_FEATURE);\n-            HttpLogObfuscator logObfuscator = HttpLogObfuscator.obfuscator(feature, obfuscators);\n-            return new LoggingInterceptor(logObfuscator);\n-        }\n-        return new LoggingInterceptor(null);\n-    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java b/realm/realm-library/src/objectServer/java/io/realm/internal/network/LoggingInterceptor.java\nsimilarity index 71%\nrename from realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java\nrename to realm/realm-library/src/objectServer/java/io/realm/internal/network/LoggingInterceptor.java\nindex f85443b3b..6d67657c4 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/network/interceptor/LoggingInterceptor.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/network/LoggingInterceptor.java\n", "chunk": "@@ -91,20 +90,4 @@ public class LoggingInterceptor implements Interceptor {\n         }\n         return httpLogObfuscator.hashCode() + 27;\n     }\n-\n-    /**\n-     * Returns an initialized {@link Interceptor} for a specific feature, e.g. login would be\n-     * {@code providers}.\n-     *\n-     * @param feature the feature to be intercepted or null if no obfuscation is to take place.\n-     * @return the interceptor to be used for logging purposes.\n-     */\n-    public static LoggingInterceptor interceptor(@Nullable String feature) {\n-        if (feature != null) {\n-            Map<String, RegexPatternObfuscator> obfuscators = RegexObfuscatorPatternFactory.getObfuscators(RegexObfuscatorPatternFactory.LOGIN_FEATURE);\n-            HttpLogObfuscator logObfuscator = HttpLogObfuscator.obfuscator(feature, obfuscators);\n-            return new LoggingInterceptor(logObfuscator);\n-        }\n-        return new LoggingInterceptor(null);\n-    }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"oid": "8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "url": "https://github.com/realm/realm-java/commit/8f9f0c1939f89b4a0acbff611a50513c7a0256ed", "message": "Added missing oauth2 token logging tests and removed exposure of OkHttp stuff into the public API - the RegexObfuscatorPatternFactory is still part of the public API though", "committedDate": "2020-06-24T12:24:21Z", "type": "commit"}, {"oid": "1dcc95b23875259eaa004da4473b1ddd1b762b85", "url": "https://github.com/realm/realm-java/commit/1dcc95b23875259eaa004da4473b1ddd1b762b85", "message": "Merge branch 'v10' into el/logcat-obfuscation", "committedDate": "2020-06-24T12:25:34Z", "type": "commit"}, {"oid": "b351e353c50cbc24dbb431ff17518733cd8d9ca5", "url": "https://github.com/realm/realm-java/commit/b351e353c50cbc24dbb431ff17518733cd8d9ca5", "message": "Cleanup", "committedDate": "2020-06-24T12:36:47Z", "type": "commit"}, {"oid": "77b32ff7496261a60d423c171b129a19f3e2bc23", "url": "https://github.com/realm/realm-java/commit/77b32ff7496261a60d423c171b129a19f3e2bc23", "message": "Moved classes to their rightful packages plus a bit of cleanup", "committedDate": "2020-06-25T08:32:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTAzNA==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448141034", "body": "This should be marked @Nullable", "bodyText": "This should be marked @nullable", "bodyHTML": "<p dir=\"auto\">This should be marked <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/nullable/hovercard\" href=\"https://github.com/nullable\">@nullable</a></p>", "author": "cmelchior", "createdAt": "2020-07-01T06:25:27Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -223,11 +231,22 @@ public File getSyncRootDirectory() {\n      * {@link io.realm.mongodb.mongo.MongoDatabase}.\n      *\n      * @return The default codec registry for the App.\n-     *\n      * @see #DEFAULT_BSON_CODEC_REGISTRY\n      * @see Builder#getDefaultCodecRegistry()\n      */\n-    public CodecRegistry getDefaultCodecRegistry() { return codecRegistry; }\n+    public CodecRegistry getDefaultCodecRegistry() {\n+        return codecRegistry;\n+    }\n+\n+    /**\n+     * Returns the {@link HttpLogObfuscator} used in the app, which keeps sensitive information in\n+     * HTTP requests from being displayed in the logcat.\n+     *\n+     * @return the HTTP log obfuscator.\n+     */\n+    public HttpLogObfuscator getHttpLogObfuscator() {", "originalCommit": "77b32ff7496261a60d423c171b129a19f3e2bc23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "069e8025d48ee7c8f94d3dec832e0b61944a89ce", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 9c77c5493..d6374108e 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -244,6 +279,7 @@ public class AppConfiguration {\n      *\n      * @return the HTTP log obfuscator.\n      */\n+    @Nullable\n     public HttpLogObfuscator getHttpLogObfuscator() {\n         return httpLogObfuscator;\n     }\n", "next_change": {"commit": "326d121f59b44074d3ed530c56f56f27def89dc6", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex d6374108e..44cc177ed 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -284,6 +274,19 @@ public class AppConfiguration {\n         return httpLogObfuscator;\n     }\n \n+    private static Map<String, RegexPatternObfuscator> getLoginObfuscators() {\n+        final HashMap<String, RegexPatternObfuscator> obfuscators = new HashMap<>();\n+        obfuscators.put(Credentials.IdentityProvider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.SERVER_API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.APPLE.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.CUSTOM_FUNCTION.getId(), CustomFunctionObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.EMAIL_PASSWORD.getId(), EmailPasswordObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.FACEBOOK.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.GOOGLE.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.JWT.getId(), TokenObfuscator.obfuscator());\n+        return obfuscators;\n+    }\n+\n     /**\n      * Builder used to construct instances of a {@link AppConfiguration} in a fluent manner.\n      */\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 9c77c5493..44cc177ed 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -244,10 +269,24 @@ public class AppConfiguration {\n      *\n      * @return the HTTP log obfuscator.\n      */\n+    @Nullable\n     public HttpLogObfuscator getHttpLogObfuscator() {\n         return httpLogObfuscator;\n     }\n \n+    private static Map<String, RegexPatternObfuscator> getLoginObfuscators() {\n+        final HashMap<String, RegexPatternObfuscator> obfuscators = new HashMap<>();\n+        obfuscators.put(Credentials.IdentityProvider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.SERVER_API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.APPLE.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.CUSTOM_FUNCTION.getId(), CustomFunctionObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.EMAIL_PASSWORD.getId(), EmailPasswordObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.FACEBOOK.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.GOOGLE.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.IdentityProvider.JWT.getId(), TokenObfuscator.obfuscator());\n+        return obfuscators;\n+    }\n+\n     /**\n      * Builder used to construct instances of a {@link AppConfiguration} in a fluent manner.\n      */\n", "next_change": {"commit": "66599ce46892e145d2949fb358f0be38986cb8dd", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 44cc177ed..3c91db1be 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -276,14 +296,13 @@ public class AppConfiguration {\n \n     private static Map<String, RegexPatternObfuscator> getLoginObfuscators() {\n         final HashMap<String, RegexPatternObfuscator> obfuscators = new HashMap<>();\n-        obfuscators.put(Credentials.IdentityProvider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-        obfuscators.put(Credentials.IdentityProvider.SERVER_API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-        obfuscators.put(Credentials.IdentityProvider.APPLE.getId(), TokenObfuscator.obfuscator());\n-        obfuscators.put(Credentials.IdentityProvider.CUSTOM_FUNCTION.getId(), CustomFunctionObfuscator.obfuscator());\n-        obfuscators.put(Credentials.IdentityProvider.EMAIL_PASSWORD.getId(), EmailPasswordObfuscator.obfuscator());\n-        obfuscators.put(Credentials.IdentityProvider.FACEBOOK.getId(), TokenObfuscator.obfuscator());\n-        obfuscators.put(Credentials.IdentityProvider.GOOGLE.getId(), TokenObfuscator.obfuscator());\n-        obfuscators.put(Credentials.IdentityProvider.JWT.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.Provider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n+        obfuscators.put(Credentials.Provider.APPLE.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.Provider.CUSTOM_FUNCTION.getId(), CustomFunctionObfuscator.obfuscator());\n+        obfuscators.put(Credentials.Provider.EMAIL_PASSWORD.getId(), EmailPasswordObfuscator.obfuscator());\n+        obfuscators.put(Credentials.Provider.FACEBOOK.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.Provider.GOOGLE.getId(), TokenObfuscator.obfuscator());\n+        obfuscators.put(Credentials.Provider.JWT.getId(), TokenObfuscator.obfuscator());\n         return obfuscators;\n     }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}, {"oid": "039da102fa0c7a130ac408a8d7d9e471a177366e", "committedDate": "2020-08-12 18:00:22 +0200", "message": "Finish RealmAppConfiguration Javadoc + Tests (#7023)"}, {"oid": "a813aa8cbe5b736febad667362f5edcddbdf8415", "committedDate": "2020-08-25 18:44:29 +0200", "message": "Fix checkstyle issues (#7058)"}, {"oid": "66599ce46892e145d2949fb358f0be38986cb8dd", "committedDate": "2020-09-08 15:04:51 +0200", "message": "Align MongoDB Realm API's with other SDK's (#7060)"}, {"oid": "b7435b467f0247c16691e09ac870d20e0750bbb8", "committedDate": "2020-09-16 11:56:14 +0200", "message": "Add support for multiple apps (#7095)"}, {"oid": "4cfb10ac334f2992f85b27cbe64a0af905eeaa3c", "committedDate": "2020-09-16 19:09:21 +0200", "message": "Handle Client Reset in a separate callback (#7097)"}, {"oid": "5670317bab8b4d4e3a73c34c118a5455b68e78e8", "committedDate": "2021-06-30 12:00:51 +0200", "message": "Fixed configuring HTTP timeouts (#7512)"}, {"oid": "6fb632ecb4a533fb6e5493b24e5558d40651846d", "committedDate": "2021-10-12 09:03:14 -0600", "message": "Update AppConfiguration.java"}, {"oid": "2bf41763fd6d51e2edad5b0ed157198b6dbcdfad", "committedDate": "2021-12-03 16:43:55 +0100", "message": "Fix AppConfiguration.syncRootDirectory() not working correctly (#7604)"}, {"oid": "f0eca830527cd8255ce8fb9bcc83a545a940f6d3", "committedDate": "2021-12-17 15:43:00 +0100", "message": "Automatic client reset on sync with \"seamless loss\" (#7585)"}, {"oid": "8d54cdba51df3a8cce8abccb58a6c9aac16799d2", "committedDate": "2022-08-25 10:05:30 +0200", "message": "Implement client reset automatic recover on partition based sync (#7698)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTE2Ng==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448141166", "body": "```suggestion\r\n         * @param headerName the name of the header.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * @param headerName  the name of the header.\n          \n          \n            \n                     * @param headerName the name of the header.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">         <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> headerName <span class=\"x x-first x-last\"> </span>the name of the header.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">         <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> headerName the name of the header.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-07-01T06:25:46Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -378,7 +400,7 @@ public Builder authorizationHeaderName(String headerName) {\n         /**\n          * Adds an extra HTTP header to append to every request to a Realm Object Server.\n          *\n-         * @param headerName the name of the header.\n+         * @param headerName  the name of the header.", "originalCommit": "77b32ff7496261a60d423c171b129a19f3e2bc23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDIyNA==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448224224", "bodyText": "This was the autoformatter, it indented both lines for the parameters to make them look cool.", "author": "edualonso", "createdAt": "2020-07-01T09:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "069e8025d48ee7c8f94d3dec832e0b61944a89ce", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 9c77c5493..d6374108e 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -400,7 +435,7 @@ public class AppConfiguration {\n         /**\n          * Adds an extra HTTP header to append to every request to a Realm Object Server.\n          *\n-         * @param headerName  the name of the header.\n+         * @param headerName the name of the header.\n          * @param headerValue the value of header.\n          * @throws IllegalArgumentException if a non-empty {@code headerName} is provided or a null {@code headerValue}.\n          */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\nindex 9c77c5493..44cc177ed 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java\n", "chunk": "@@ -400,7 +438,7 @@ public class AppConfiguration {\n         /**\n          * Adds an extra HTTP header to append to every request to a Realm Object Server.\n          *\n-         * @param headerName  the name of the header.\n+         * @param headerName the name of the header.\n          * @param headerValue the value of header.\n          * @throws IllegalArgumentException if a non-empty {@code headerName} is provided or a null {@code headerValue}.\n          */\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}, {"oid": "039da102fa0c7a130ac408a8d7d9e471a177366e", "committedDate": "2020-08-12 18:00:22 +0200", "message": "Finish RealmAppConfiguration Javadoc + Tests (#7023)"}, {"oid": "a813aa8cbe5b736febad667362f5edcddbdf8415", "committedDate": "2020-08-25 18:44:29 +0200", "message": "Fix checkstyle issues (#7058)"}, {"oid": "66599ce46892e145d2949fb358f0be38986cb8dd", "committedDate": "2020-09-08 15:04:51 +0200", "message": "Align MongoDB Realm API's with other SDK's (#7060)"}, {"oid": "b7435b467f0247c16691e09ac870d20e0750bbb8", "committedDate": "2020-09-16 11:56:14 +0200", "message": "Add support for multiple apps (#7095)"}, {"oid": "4cfb10ac334f2992f85b27cbe64a0af905eeaa3c", "committedDate": "2020-09-16 19:09:21 +0200", "message": "Handle Client Reset in a separate callback (#7097)"}, {"oid": "5670317bab8b4d4e3a73c34c118a5455b68e78e8", "committedDate": "2021-06-30 12:00:51 +0200", "message": "Fixed configuring HTTP timeouts (#7512)"}, {"oid": "6fb632ecb4a533fb6e5493b24e5558d40651846d", "committedDate": "2021-10-12 09:03:14 -0600", "message": "Update AppConfiguration.java"}, {"oid": "2bf41763fd6d51e2edad5b0ed157198b6dbcdfad", "committedDate": "2021-12-03 16:43:55 +0100", "message": "Fix AppConfiguration.syncRootDirectory() not working correctly (#7604)"}, {"oid": "f0eca830527cd8255ce8fb9bcc83a545a940f6d3", "committedDate": "2021-12-17 15:43:00 +0100", "message": "Automatic client reset on sync with \"seamless loss\" (#7585)"}, {"oid": "8d54cdba51df3a8cce8abccb58a6c9aac16799d2", "committedDate": "2022-08-25 10:05:30 +0200", "message": "Implement client reset automatic recover on partition based sync (#7698)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTY2Nw==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448175667", "body": "I thought you decided to keep all these implementations outside the public API?", "bodyText": "I thought you decided to keep all these implementations outside the public API?", "bodyHTML": "<p dir=\"auto\">I thought you decided to keep all these implementations outside the public API?</p>", "author": "cmelchior", "createdAt": "2020-07-01T07:40:14Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;", "originalCommit": "77b32ff7496261a60d423c171b129a19f3e2bc23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3MzM3Nw==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448273377", "bodyText": "It seems I forgot to push my last commit. I moved this one to internal.log.obfuscator.", "author": "edualonso", "createdAt": "2020-07-01T10:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTY2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "069e8025d48ee7c8f94d3dec832e0b61944a89ce", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/ApiKeyObfuscator.java\nsimilarity index 97%\nrename from realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java\nrename to realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/ApiKeyObfuscator.java\nindex ae9e57656..431406038 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/ApiKeyObfuscator.java\n", "chunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package io.realm.mongodb.log.obfuscator;\n+package io.realm.internal.log.obfuscator;\n \n import java.util.HashMap;\n import java.util.Map;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/ApiKeyObfuscator.java\nsimilarity index 97%\nrename from realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java\nrename to realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/ApiKeyObfuscator.java\nindex ae9e57656..431406038 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/ApiKeyObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/log/obfuscator/ApiKeyObfuscator.java\n", "chunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package io.realm.mongodb.log.obfuscator;\n+package io.realm.internal.log.obfuscator;\n \n import java.util.HashMap;\n import java.util.Map;\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NjI0OA==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448176248", "body": "```suggestion\r\n * The HttpLogObfuscator keeps sensitive information from being displayed in Logcat.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The HttpLogObfuscator keeps sensitive information from being displayed in the logcat.\n          \n          \n            \n             * The HttpLogObfuscator keeps sensitive information from being displayed in Logcat.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"pl-smi\">HttpLogObfuscator</span> keeps sensitive information from being displayed in <span class=\"x x-first x-last\">the logcat</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> <span class=\"pl-smi\">HttpLogObfuscator</span> keeps sensitive information from being displayed in <span class=\"pl-smi x x-first x-last\">Logcat</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-07-01T07:41:18Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.realm.internal.Util;\n+\n+/**\n+ * The HttpLogObfuscator keeps sensitive information from being displayed in the logcat.", "originalCommit": "77b32ff7496261a60d423c171b129a19f3e2bc23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "069e8025d48ee7c8f94d3dec832e0b61944a89ce", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\nindex d8b4df25d..c792d11f5 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\n", "chunk": "@@ -20,9 +20,10 @@ import java.util.List;\n import java.util.Map;\n \n import io.realm.internal.Util;\n+import io.realm.internal.log.obfuscator.RegexPatternObfuscator;\n \n /**\n- * The HttpLogObfuscator keeps sensitive information from being displayed in the logcat.\n+ * The HttpLogObfuscator keeps sensitive information from being displayed in Logcat.\n  */\n public class HttpLogObfuscator {\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\nindex d8b4df25d..c792d11f5 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\n", "chunk": "@@ -20,9 +20,10 @@ import java.util.List;\n import java.util.Map;\n \n import io.realm.internal.Util;\n+import io.realm.internal.log.obfuscator.RegexPatternObfuscator;\n \n /**\n- * The HttpLogObfuscator keeps sensitive information from being displayed in the logcat.\n+ * The HttpLogObfuscator keeps sensitive information from being displayed in Logcat.\n  */\n public class HttpLogObfuscator {\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NjUyNg==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448176526", "body": "This isn't a well-defined term, so probably a little more description.", "bodyText": "This isn't a well-defined term, so probably a little more description.", "bodyHTML": "<p dir=\"auto\">This isn't a well-defined term, so probably a little more description.</p>", "author": "cmelchior", "createdAt": "2020-07-01T07:41:56Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.realm.internal.Util;\n+\n+/**\n+ * The HttpLogObfuscator keeps sensitive information from being displayed in the logcat.\n+ */\n+public class HttpLogObfuscator {\n+\n+    private String feature;\n+    private Map<String, RegexPatternObfuscator> patternObfuscatorMap;\n+\n+    /**\n+     * Constructor for creating an HTTP log obfuscator.\n+     *\n+     * @param feature              the feature to obfuscate.", "originalCommit": "77b32ff7496261a60d423c171b129a19f3e2bc23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "069e8025d48ee7c8f94d3dec832e0b61944a89ce", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\nindex d8b4df25d..c792d11f5 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\n", "chunk": "@@ -32,7 +33,8 @@ public class HttpLogObfuscator {\n     /**\n      * Constructor for creating an HTTP log obfuscator.\n      *\n-     * @param feature              the feature to obfuscate.\n+     * @param feature              the feature to obfuscate, e.g. \"providers\" for login requests -\n+     *                             see {@link io.realm.internal.network.LoggingInterceptor}.\n      * @param patternObfuscatorMap {@link Map} of keys subject to being obfuscated and\n      *                             {@link RegexPatternObfuscator}s used to determine which\n      *                             obfuscator has to be used for the given feature.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\nindex d8b4df25d..c792d11f5 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/HttpLogObfuscator.java\n", "chunk": "@@ -32,7 +33,8 @@ public class HttpLogObfuscator {\n     /**\n      * Constructor for creating an HTTP log obfuscator.\n      *\n-     * @param feature              the feature to obfuscate.\n+     * @param feature              the feature to obfuscate, e.g. \"providers\" for login requests -\n+     *                             see {@link io.realm.internal.network.LoggingInterceptor}.\n      * @param patternObfuscatorMap {@link Map} of keys subject to being obfuscated and\n      *                             {@link RegexPatternObfuscator}s used to determine which\n      *                             obfuscator has to be used for the given feature.\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Njg1Ng==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448176856", "body": "```suggestion\r\n * The obfuscator removes sensitive information from Logcat entries.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The obfuscator removes sensitive information from logcat entries.\n          \n          \n            \n             * The obfuscator removes sensitive information from Logcat entries.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> obfuscator removes sensitive information from <span class=\"x x-first x-last\">logcat</span> entries.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">The</span> obfuscator removes sensitive information from <span class=\"pl-smi x x-first x-last\">Logcat</span> entries.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cmelchior", "createdAt": "2020-07-01T07:42:30Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import io.realm.internal.Util;\n+\n+/**\n+ * The obfuscator removes sensitive information from logcat entries.", "originalCommit": "77b32ff7496261a60d423c171b129a19f3e2bc23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3OTE3Ng==", "url": "https://github.com/realm/realm-java/pull/6961#discussion_r448179176", "body": "Not 100% sure why this class is public? Despite it's name it cannot really construct anything since only the LOGIN feature is allowed, so what would end users use this for? Couldn't this just be implemented as static information in AppConfiguration?", "bodyText": "Not 100% sure why this class is public? Despite it's name it cannot really construct anything since only the LOGIN feature is allowed, so what would end users use this for? Couldn't this just be implemented as static information in AppConfiguration?", "bodyHTML": "<p dir=\"auto\">Not 100% sure why this class is public? Despite it's name it cannot really construct anything since only the LOGIN feature is allowed, so what would end users use this for? Couldn't this just be implemented as static information in AppConfiguration?</p>", "author": "cmelchior", "createdAt": "2020-07-01T07:46:52Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.log.obfuscator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.realm.mongodb.Credentials;\n+\n+/**\n+ * The RegexPatternObfuscatorFactory provides the {@link RegexPatternObfuscator}s needed to\n+ * obfuscate HTTP requests being logged for a particular feature.\n+ */\n+public class RegexPatternObfuscatorFactory {", "originalCommit": "77b32ff7496261a60d423c171b129a19f3e2bc23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "069e8025d48ee7c8f94d3dec832e0b61944a89ce", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java\ndeleted file mode 100644\nindex b8443a0d6..000000000\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java\n+++ /dev/null\n", "chunk": "@@ -1,63 +0,0 @@\n-/*\n- * Copyright 2020 Realm Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.realm.mongodb.log.obfuscator;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import io.realm.mongodb.Credentials;\n-\n-/**\n- * The RegexPatternObfuscatorFactory provides the {@link RegexPatternObfuscator}s needed to\n- * obfuscate HTTP requests being logged for a particular feature.\n- */\n-public class RegexPatternObfuscatorFactory {\n-\n-    public static final String LOGIN_FEATURE = \"providers\";\n-\n-    private static Map<String, RegexPatternObfuscator> loginObfuscators =\n-            new HashMap<String, RegexPatternObfuscator>() {{\n-                put(Credentials.IdentityProvider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.SERVER_API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.APPLE.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.CUSTOM_FUNCTION.getId(), CustomFunctionObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.EMAIL_PASSWORD.getId(), EmailPasswordObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.FACEBOOK.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.GOOGLE.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.JWT.getId(), TokenObfuscator.obfuscator());\n-            }};\n-\n-    /**\n-     * Provides a {@link Map} of strings representing sensitive information that should be\n-     * obfuscated and {@link RegexPatternObfuscator}s corresponding to a concrete feature to be used\n-     * in a {@link io.realm.mongodb.App}.\n-     * <p>\n-     * For example, if we want to hide all sensitive information regarding login credentials, we\n-     * have to pass a {@code providers} string as a feature. The factory will in turn provide a map\n-     * of logcat entries susceptible to being obfuscated for that very feature and the obfuscators\n-     * that will carry out the obfuscation itself.\n-     *\n-     * @param feature the feature to obfuscate.\n-     * @return the obfuscators that will be used in the app.\n-     */\n-    public static Map<String, RegexPatternObfuscator> getObfuscators(String feature) {\n-        if (feature.equals(LOGIN_FEATURE)) {\n-            return loginObfuscators;\n-        }\n-        throw new IllegalArgumentException(\"No feature found for \" + feature);\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9c760563158f805c8d0b20780935704aad3b4974", "changed_code": [{"header": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java\ndeleted file mode 100644\nindex b8443a0d6..000000000\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/log/obfuscator/RegexPatternObfuscatorFactory.java\n+++ /dev/null\n", "chunk": "@@ -1,63 +0,0 @@\n-/*\n- * Copyright 2020 Realm Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.realm.mongodb.log.obfuscator;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import io.realm.mongodb.Credentials;\n-\n-/**\n- * The RegexPatternObfuscatorFactory provides the {@link RegexPatternObfuscator}s needed to\n- * obfuscate HTTP requests being logged for a particular feature.\n- */\n-public class RegexPatternObfuscatorFactory {\n-\n-    public static final String LOGIN_FEATURE = \"providers\";\n-\n-    private static Map<String, RegexPatternObfuscator> loginObfuscators =\n-            new HashMap<String, RegexPatternObfuscator>() {{\n-                put(Credentials.IdentityProvider.API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.SERVER_API_KEY.getId(), ApiKeyObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.APPLE.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.CUSTOM_FUNCTION.getId(), CustomFunctionObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.EMAIL_PASSWORD.getId(), EmailPasswordObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.FACEBOOK.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.GOOGLE.getId(), TokenObfuscator.obfuscator());\n-                put(Credentials.IdentityProvider.JWT.getId(), TokenObfuscator.obfuscator());\n-            }};\n-\n-    /**\n-     * Provides a {@link Map} of strings representing sensitive information that should be\n-     * obfuscated and {@link RegexPatternObfuscator}s corresponding to a concrete feature to be used\n-     * in a {@link io.realm.mongodb.App}.\n-     * <p>\n-     * For example, if we want to hide all sensitive information regarding login credentials, we\n-     * have to pass a {@code providers} string as a feature. The factory will in turn provide a map\n-     * of logcat entries susceptible to being obfuscated for that very feature and the obfuscators\n-     * that will carry out the obfuscation itself.\n-     *\n-     * @param feature the feature to obfuscate.\n-     * @return the obfuscators that will be used in the app.\n-     */\n-    public static Map<String, RegexPatternObfuscator> getObfuscators(String feature) {\n-        if (feature.equals(LOGIN_FEATURE)) {\n-            return loginObfuscators;\n-        }\n-        throw new IllegalArgumentException(\"No feature found for \" + feature);\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "9c760563158f805c8d0b20780935704aad3b4974", "message": "Merge commit", "committedDate": null}]}, {"oid": "069e8025d48ee7c8f94d3dec832e0b61944a89ce", "url": "https://github.com/realm/realm-java/commit/069e8025d48ee7c8f94d3dec832e0b61944a89ce", "message": "Merge branch 'v10' into el/logcat-obfuscation\n\n# Conflicts:\n#\trealm/realm-library/src/syncTestUtils/kotlin/io/realm/TestApp.kt", "committedDate": "2020-07-01T10:35:23Z", "type": "commit"}, {"oid": "a728ad4bd0f1a915badcdfdbf55c69430bb3483e", "url": "https://github.com/realm/realm-java/commit/a728ad4bd0f1a915badcdfdbf55c69430bb3483e", "message": "Made obfuscators final", "committedDate": "2020-07-01T18:57:09Z", "type": "commit"}, {"oid": "326d121f59b44074d3ed530c56f56f27def89dc6", "url": "https://github.com/realm/realm-java/commit/326d121f59b44074d3ed530c56f56f27def89dc6", "message": "Findbugs fix", "committedDate": "2020-07-01T19:40:27Z", "type": "commit"}, {"oid": "6701defeb59c25fd50363b44ed54bb418fce92d8", "url": "https://github.com/realm/realm-java/commit/6701defeb59c25fd50363b44ed54bb418fce92d8", "message": "Merge branch 'v10' into el/logcat-obfuscation", "committedDate": "2020-07-03T13:24:25Z", "type": "commit"}, {"oid": "e925718da261ec9792cce2b8174ba1c91c7f136a", "url": "https://github.com/realm/realm-java/commit/e925718da261ec9792cce2b8174ba1c91c7f136a", "message": "Updated changelog", "committedDate": "2020-07-03T13:33:40Z", "type": "commit"}, {"oid": "6b53a1526a676b0f049d0f60ed2b7e06224f2d4a", "url": "https://github.com/realm/realm-java/commit/6b53a1526a676b0f049d0f60ed2b7e06224f2d4a", "message": "Merge branch 'v10' into el/logcat-obfuscation", "committedDate": "2020-07-03T13:55:01Z", "type": "commit"}]}