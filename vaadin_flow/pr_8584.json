{"pr_number": 8584, "pr_title": "Support Element.setPropertyBean", "pr_author": "Artur-", "pr_createdAt": "2020-06-18T07:35:22Z", "pr_url": "https://github.com/vaadin/flow/pull/8584", "timeline": [{"oid": "0945d4f286c87696f35305f215a39aba32c10ab3", "url": "https://github.com/vaadin/flow/commit/0945d4f286c87696f35305f215a39aba32c10ab3", "message": "Support Element.setPropertyBean\n\nFixes #7307", "committedDate": "2020-06-18T07:54:44Z", "type": "forcePushed"}, {"oid": "48c5068bd18fe22120b22facf978cb0bd99efca1", "url": "https://github.com/vaadin/flow/commit/48c5068bd18fe22120b22facf978cb0bd99efca1", "message": "Support Element.setPropertyBean\n\nFixes #7307", "committedDate": "2020-06-18T13:13:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1NTI2OQ==", "url": "https://github.com/vaadin/flow/pull/8584#discussion_r442255269", "body": "![MAJOR](https://sonarsource.github.io/sonar-github/severity-major.png 'Severity: MAJOR') Define and throw a dedicated exception instead of using a generic one. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS00112)\n", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/89049b9c46c662e8fa6d1566cd43762c4f8bd19db7eab2c95254508f0f6f31eb/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d6d616a6f722e706e67\"><img src=\"https://camo.githubusercontent.com/89049b9c46c662e8fa6d1566cd43762c4f8bd19db7eab2c95254508f0f6f31eb/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d6d616a6f722e706e67\" alt=\"MAJOR\" title=\"Severity: MAJOR\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/severity-major.png\" style=\"max-width: 100%;\"></a> Define and throw a dedicated exception instead of using a generic one. <a href=\"https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS00112\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/90a66c56e56d5e4647676830313fa0693466067889c4c7dc2d7519da5a924230/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f72756c652e706e67\" alt=\"rule\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/rule.png\" style=\"max-width: 100%;\"></a></p>", "author": "vaadin-bot", "createdAt": "2020-06-18T14:09:29Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/JsonUtils.java", "diffHunk": "@@ -275,4 +281,22 @@ public static JsonArray createArray(JsonValue... values) {\n \n         return object;\n     }\n+\n+    /**\n+     * Converts the given bean to JSON.\n+     *\n+     * @param bean\n+     *                 the bean to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static JsonObject beanToJson(Object bean) {\n+        if (bean == null) {\n+            throw new RuntimeException(\"Cannot convert null to a JSON object\");\n+        }\n+        try {\n+            return Json.parse(objectMapper.writeValueAsString(bean));\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(\"Error converting bean to JSON\", e);", "originalCommit": "48c5068bd18fe22120b22facf978cb0bd99efca1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "33c2f65bc928cf1279dc40994f131e5274bd5e67", "url": "https://github.com/vaadin/flow/commit/33c2f65bc928cf1279dc40994f131e5274bd5e67", "message": "Support Element.setPropertyBean\n\nFixes #7307", "committedDate": "2020-06-22T06:21:49Z", "type": "commit"}, {"oid": "33c2f65bc928cf1279dc40994f131e5274bd5e67", "url": "https://github.com/vaadin/flow/commit/33c2f65bc928cf1279dc40994f131e5274bd5e67", "message": "Support Element.setPropertyBean\n\nFixes #7307", "committedDate": "2020-06-22T06:21:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2ODM1NQ==", "url": "https://github.com/vaadin/flow/pull/8584#discussion_r445168355", "body": "`final`? \r\n\r\nAlso wondering if there is a case or not for an empty bean -> JSON `{}` (auto-generated beans from some property list---or maybe this is too much of an academic case?) `ObjectMapper` throws by default but it can be enabled (`objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true)`).", "bodyText": "final?\nAlso wondering if there is a case or not for an empty bean -> JSON {} (auto-generated beans from some property list---or maybe this is too much of an academic case?) ObjectMapper throws by default but it can be enabled (objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true)).", "bodyHTML": "<p dir=\"auto\"><code>final</code>?</p>\n<p dir=\"auto\">Also wondering if there is a case or not for an empty bean -&gt; JSON <code>{}</code> (auto-generated beans from some property list---or maybe this is too much of an academic case?) <code>ObjectMapper</code> throws by default but it can be enabled (<code>objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true)</code>).</p>", "author": "joheriks", "createdAt": "2020-06-24T20:59:11Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/JsonUtils.java", "diffHunk": "@@ -44,6 +47,8 @@\n  */\n public final class JsonUtils {\n \n+    private static ObjectMapper objectMapper = new ObjectMapper();", "originalCommit": "33c2f65bc928cf1279dc40994f131e5274bd5e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM0MTIyOQ==", "url": "https://github.com/vaadin/flow/pull/8584#discussion_r445341229", "bodyText": "Made it final.\nI don't see right away when you would want empty classes. Should we keep it like this and enable it only if we find a use case? The workaround would be to check in the caller code so that you do not pass such a bean, just like you would check that you do not pass null to the method", "author": "Artur-", "createdAt": "2020-06-25T06:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2ODM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM0Mjc2OQ==", "url": "https://github.com/vaadin/flow/pull/8584#discussion_r445342769", "bodyText": "Sure, very edge case anyway I presume.", "author": "joheriks", "createdAt": "2020-06-25T06:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2ODM1NQ=="}], "type": "inlineReview"}, {"oid": "63563db0610d8c62c2e70c7563970acd1dbf5b52", "url": "https://github.com/vaadin/flow/commit/63563db0610d8c62c2e70c7563970acd1dbf5b52", "message": "Fix review issues", "committedDate": "2020-06-25T06:47:30Z", "type": "commit"}]}