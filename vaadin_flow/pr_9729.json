{"pr_number": 9729, "pr_title": "fix: lookup for all available Executor services instead of only one", "pr_author": "denis-anisimov", "pr_createdAt": "2020-12-30T06:48:54Z", "pr_url": "https://github.com/vaadin/flow/pull/9729", "timeline": [{"oid": "34e92aa4f4c02e165476dbb6cac1e8912dd33458", "url": "https://github.com/vaadin/flow/commit/34e92aa4f4c02e165476dbb6cac1e8912dd33458", "message": "fix: lookup for all available Executor services instead of only one", "committedDate": "2020-12-30T06:48:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk5NTc4NQ==", "url": "https://github.com/vaadin/flow/pull/9729#discussion_r549995785", "body": "![MAJOR](https://sonarsource.github.io/sonar-github/severity-major.png 'Severity: MAJOR') A \"NullPointerException\" could be thrown; \"lookup\" is nullable here. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS2259)\n", "bodyText": "A \"NullPointerException\" could be thrown; \"lookup\" is nullable here.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/89049b9c46c662e8fa6d1566cd43762c4f8bd19db7eab2c95254508f0f6f31eb/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d6d616a6f722e706e67\"><img src=\"https://camo.githubusercontent.com/89049b9c46c662e8fa6d1566cd43762c4f8bd19db7eab2c95254508f0f6f31eb/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d6d616a6f722e706e67\" alt=\"MAJOR\" title=\"Severity: MAJOR\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/severity-major.png\" style=\"max-width: 100%;\"></a> A \"NullPointerException\" could be thrown; \"lookup\" is nullable here. <a href=\"https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS2259\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/90a66c56e56d5e4647676830313fa0693466067889c4c7dc2d7519da5a924230/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f72756c652e706e67\" alt=\"rule\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/rule.png\" style=\"max-width: 100%;\"></a></p>", "author": "vaadin-bot", "createdAt": "2020-12-30T07:42:31Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DevModeInitializer.java", "diffHunk": "@@ -359,7 +359,8 @@ public static void initDevModeHandler(Set<Class<?>> classes,\n                 .withHomeNodeExecRequired(useHomeNodeExec).build();\n \n         // Check whether executor is provided by the caller (framework)\n-        Executor service = lookup.lookup(Executor.class);\n+        Executor service = lookup.lookupAll(Executor.class).stream().findFirst()", "originalCommit": "34e92aa4f4c02e165476dbb6cac1e8912dd33458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNDcyOA==", "url": "https://github.com/vaadin/flow/pull/9729#discussion_r550024728", "body": "Even if all executors are looked up, only any first one is used. So, what is the meaning of using `lookupAll` in place of `lookup`?\r\nIt's totally clear when it used as below:\r\n```java\r\nCollection<InstantiatorFactory> factories = lookup.lookupAll(InstantiatorFactory.class);\r\nfor (InstantiatorFactory factory : factories) { ... }\r\n```\r\nI propose to add some explanatory comment.", "bodyText": "Even if all executors are looked up, only any first one is used. So, what is the meaning of using lookupAll in place of lookup?\nIt's totally clear when it used as below:\nCollection<InstantiatorFactory> factories = lookup.lookupAll(InstantiatorFactory.class);\nfor (InstantiatorFactory factory : factories) { ... }\nI propose to add some explanatory comment.", "bodyHTML": "<p dir=\"auto\">Even if all executors are looked up, only any first one is used. So, what is the meaning of using <code>lookupAll</code> in place of <code>lookup</code>?<br>\nIt's totally clear when it used as below:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Collection&lt;InstantiatorFactory&gt; factories = lookup.lookupAll(InstantiatorFactory.class);\nfor (InstantiatorFactory factory : factories) { ... }\"><pre><span class=\"pl-k\">Collection&lt;<span class=\"pl-smi\">InstantiatorFactory</span>&gt;</span> factories <span class=\"pl-k\">=</span> lookup<span class=\"pl-k\">.</span>lookupAll(<span class=\"pl-smi\">InstantiatorFactory</span><span class=\"pl-k\">.</span>class);\n<span class=\"pl-k\">for</span> (<span class=\"pl-smi\">InstantiatorFactory</span> factory <span class=\"pl-k\">:</span> factories) { <span class=\"pl-c1\">...</span> }</pre></div>\n<p dir=\"auto\">I propose to add some explanatory comment.</p>", "author": "mshabarov", "createdAt": "2020-12-30T08:21:32Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -149,7 +149,8 @@ private DevModeHandler(Lookup lookup, int runningPort, File npmFolder,\n         devServerPortFile = getDevServerPortFile(npmFolder);\n \n         // Check whether executor is provided by the caller (framework)\n-        Executor service = lookup.lookup(Executor.class);\n+        Executor service = lookup.lookupAll(Executor.class).stream().findFirst()", "originalCommit": "34e92aa4f4c02e165476dbb6cac1e8912dd33458", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAzNTA3Mg==", "url": "https://github.com/vaadin/flow/pull/9729#discussion_r550035072", "bodyText": "done", "author": "denis-anisimov", "createdAt": "2020-12-30T08:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNDcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA0MDA2OQ==", "url": "https://github.com/vaadin/flow/pull/9729#discussion_r550040069", "bodyText": "Okay, as far as I understand the contract of Lookup is that lookup is supposed to return only one service impl. Thus, if we are expect there might be several executors here, then it makes sense.", "author": "mshabarov", "createdAt": "2020-12-30T08:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNDcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNjI5NQ==", "url": "https://github.com/vaadin/flow/pull/9729#discussion_r550026295", "body": "Is that change for further features/bugfixes? Does it require to be covered by unit test, or it anyway will be covered in other PRs?", "bodyText": "Is that change for further features/bugfixes? Does it require to be covered by unit test, or it anyway will be covered in other PRs?", "bodyHTML": "<p dir=\"auto\">Is that change for further features/bugfixes? Does it require to be covered by unit test, or it anyway will be covered in other PRs?</p>", "author": "mshabarov", "createdAt": "2020-12-30T08:23:35Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -149,7 +149,8 @@ private DevModeHandler(Lookup lookup, int runningPort, File npmFolder,\n         devServerPortFile = getDevServerPortFile(npmFolder);\n \n         // Check whether executor is provided by the caller (framework)\n-        Executor service = lookup.lookup(Executor.class);\n+        Executor service = lookup.lookupAll(Executor.class).stream().findFirst()\n+                .orElse(null);", "originalCommit": "34e92aa4f4c02e165476dbb6cac1e8912dd33458", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAzMjA0MA==", "url": "https://github.com/vaadin/flow/pull/9729#discussion_r550032040", "bodyText": "Since there is no unit test for lookup.lookup  there is no \"replacement\" for it.\nAll DevModeHandler  functionality is too hard to test: the design is very bad.\nI'm not going to add any unit tests here.", "author": "denis-anisimov", "createdAt": "2020-12-30T08:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNjI5NQ=="}], "type": "inlineReview"}, {"oid": "d055705479fc0c633eb7679117ad17ec77a17c8d", "url": "https://github.com/vaadin/flow/commit/d055705479fc0c633eb7679117ad17ec77a17c8d", "message": "fix: add comment", "committedDate": "2020-12-30T08:34:17Z", "type": "commit"}]}