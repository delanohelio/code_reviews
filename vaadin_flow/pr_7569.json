{"pr_number": 7569, "pr_title": "Use .vaadin folder from home folder to search node/npm binaries.", "pr_author": "denis-anisimov", "pr_createdAt": "2020-02-13T12:26:12Z", "pr_url": "https://github.com/vaadin/flow/pull/7569", "timeline": [{"oid": "f0f46a87adf8a842d65c3b938f0712fde61153e2", "url": "https://github.com/vaadin/flow/commit/f0f46a87adf8a842d65c3b938f0712fde61153e2", "message": "Use .vaadin folder from home folder to search node/npm binaries.", "committedDate": "2020-02-13T12:21:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NjAwMw==", "url": "https://github.com/vaadin/flow/pull/7569#discussion_r379056003", "body": "I'm not sure if suppressing the new IllegalStateException and IOException from getVaadinHomeDirectory is a good idea here. (probably just a left over from before) ", "bodyText": "I'm not sure if suppressing the new IllegalStateException and IOException from getVaadinHomeDirectory is a good idea here. (probably just a left over from before)", "bodyHTML": "<p dir=\"auto\">I'm not sure if suppressing the new IllegalStateException and IOException from getVaadinHomeDirectory is a good idea here. (probably just a left over from before)</p>", "author": "knoobie", "createdAt": "2020-02-13T18:57:51Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "diffHunk": "@@ -484,12 +484,17 @@ private static File getExecutable(String baseDir, String cmd,\n             String defaultLocation) {\n         File file = null;\n         try {\n-            file = defaultLocation == null\n-                    ? frontendToolsLocator.tryLocateTool(cmd).orElse(null)\n-                    : Optional.of(new File(baseDir, defaultLocation))\n-                            .filter(frontendToolsLocator::verifyTool)\n-                            .orElseGet(() -> frontendToolsLocator\n-                                    .tryLocateTool(cmd).orElse(null));\n+            if (defaultLocation == null) {\n+                file = frontendToolsLocator.tryLocateTool(cmd).orElse(null);\n+            } else {\n+                file = Arrays\n+                        .asList(baseDir,\n+                                getVaadinHomeDirectory().getAbsolutePath())\n+                        .stream().map(dir -> new File(dir, defaultLocation))\n+                        .filter(frontendToolsLocator::verifyTool).findFirst()\n+                        .orElseGet(() -> frontendToolsLocator.tryLocateTool(cmd)\n+                                .orElse(null));\n+            }\n         } catch (Exception e) { // NOSONAR\n             // There are IOException coming from process fork", "originalCommit": "f0f46a87adf8a842d65c3b938f0712fde61153e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a874274b9f001096890248c13ff5d7650798d2c3", "url": "https://github.com/vaadin/flow/commit/a874274b9f001096890248c13ff5d7650798d2c3", "message": "Throw checked exception on access to home folder, some code improvements", "committedDate": "2020-02-14T06:33:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3ODI2Nw==", "url": "https://github.com/vaadin/flow/pull/7569#discussion_r379278267", "body": "![CRITICAL](https://sonarsource.github.io/sonar-github/severity-critical.png 'Severity: CRITICAL') Either log or rethrow this exception. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS1166)\n", "bodyText": "Either log or rethrow this exception.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/66ef5722f08233b02dc537c14e9344f186a69f873fd4617b830e30ba5b141120/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d637269746963616c2e706e67\"><img src=\"https://camo.githubusercontent.com/66ef5722f08233b02dc537c14e9344f186a69f873fd4617b830e30ba5b141120/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d637269746963616c2e706e67\" alt=\"CRITICAL\" title=\"Severity: CRITICAL\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/severity-critical.png\" style=\"max-width: 100%;\"></a> Either log or rethrow this exception. <a href=\"https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS1166\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/90a66c56e56d5e4647676830313fa0693466067889c4c7dc2d7519da5a924230/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f72756c652e706e67\" alt=\"rule\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/rule.png\" style=\"max-width: 100%;\"></a></p>", "author": "vaadin-bot", "createdAt": "2020-02-14T07:09:39Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "diffHunk": "@@ -484,12 +484,21 @@ private static File getExecutable(String baseDir, String cmd,\n             String defaultLocation) {\n         File file = null;\n         try {\n-            file = defaultLocation == null\n-                    ? frontendToolsLocator.tryLocateTool(cmd).orElse(null)\n-                    : Optional.of(new File(baseDir, defaultLocation))\n-                            .filter(frontendToolsLocator::verifyTool)\n-                            .orElseGet(() -> frontendToolsLocator\n-                                    .tryLocateTool(cmd).orElse(null));\n+            if (defaultLocation == null) {\n+                file = frontendToolsLocator.tryLocateTool(cmd).orElse(null);\n+            } else {\n+                file = Arrays\n+                        .asList(baseDir,\n+                                getVaadinHomeDirectory().getAbsolutePath())\n+                        .stream().map(dir -> new File(dir, defaultLocation))\n+                        .filter(frontendToolsLocator::verifyTool).findFirst()\n+                        .orElseGet(() -> frontendToolsLocator.tryLocateTool(cmd)\n+                                .orElse(null));\n+            }\n+        } catch (FileNotFoundException exception) {", "originalCommit": "a874274b9f001096890248c13ff5d7650798d2c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3ODI3NQ==", "url": "https://github.com/vaadin/flow/pull/7569#discussion_r379278275", "body": "![CRITICAL](https://sonarsource.github.io/sonar-github/severity-critical.png 'Severity: CRITICAL') Either log or rethrow this exception. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS1166)\n", "bodyText": "Either log or rethrow this exception.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/66ef5722f08233b02dc537c14e9344f186a69f873fd4617b830e30ba5b141120/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d637269746963616c2e706e67\"><img src=\"https://camo.githubusercontent.com/66ef5722f08233b02dc537c14e9344f186a69f873fd4617b830e30ba5b141120/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f73657665726974792d637269746963616c2e706e67\" alt=\"CRITICAL\" title=\"Severity: CRITICAL\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/severity-critical.png\" style=\"max-width: 100%;\"></a> Either log or rethrow this exception. <a href=\"https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS1166\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/90a66c56e56d5e4647676830313fa0693466067889c4c7dc2d7519da5a924230/68747470733a2f2f736f6e6172736f757263652e6769746875622e696f2f736f6e61722d6769746875622f72756c652e706e67\" alt=\"rule\" data-canonical-src=\"https://sonarsource.github.io/sonar-github/rule.png\" style=\"max-width: 100%;\"></a></p>", "author": "vaadin-bot", "createdAt": "2020-02-14T07:09:40Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java", "diffHunk": "@@ -1294,33 +1303,48 @@ private static Logger getLogger() {\n \n     private static List<String> getNpmExecutable(String baseDir,\n             boolean removePnpmLock) {\n+        try {\n+            List<String> returnCommand = getNpmScriptCommand(baseDir);\n+            if (returnCommand.isEmpty()) {\n+                returnCommand = getNpmScriptCommand(\n+                        getVaadinHomeDirectory().getAbsolutePath());\n+            }\n+            if (returnCommand.isEmpty()) {\n+                // Otherwise look for regulag `npm`\n+                String command = isWindows() ? \"npm.cmd\" : \"npm\";\n+                returnCommand.add(getExecutable(baseDir, command, null)\n+                        .getAbsolutePath());\n+            }\n+            returnCommand.add(\"--no-update-notifier\");\n+            returnCommand.add(\"--no-audit\");\n+\n+            if (removePnpmLock) {\n+                // remove pnpm-lock.yaml which contains pnpm as a dependency.\n+                new File(baseDir, \"pnpm-lock.yaml\").delete();\n+            }\n+\n+            return returnCommand;\n+        } catch (FileNotFoundException exception) {", "originalCommit": "a874274b9f001096890248c13ff5d7650798d2c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}