{"pr_number": 1309, "pr_title": "(#1291) Joined list can be mutable", "pr_author": "fanifieiev", "pr_createdAt": "2020-02-19T00:58:31Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1309", "timeline": [{"oid": "58b76d71704e725197e155f95ae1d644b349d61c", "url": "https://github.com/yegor256/cactoos/commit/58b76d71704e725197e155f95ae1d644b349d61c", "message": "(#1291) Joined list can be mutable", "committedDate": "2020-02-19T00:57:08Z", "type": "commit"}, {"oid": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "url": "https://github.com/yegor256/cactoos/commit/f6f0257680c96379c6f220a1fb802c06f7f9cc14", "message": "(#1291) Removed todo decription", "committedDate": "2020-02-19T01:17:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDYyMw==", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880623", "body": "@fanifieiev Please put the values used in the tests into constants, to avoid this supression", "bodyText": "@fanifieiev Please put the values used in the tests into constants, to avoid this supression", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/fanifieiev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fanifieiev\">@fanifieiev</a> Please put the values used in the tests into constants, to avoid this supression</p>", "author": "paulodamaso", "createdAt": "2020-02-22T03:04:50Z", "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -34,8 +36,9 @@\n  * @since 0.20\n  * @checkstyle JavadocMethodCheck (500 lines)\n  * @checkstyle MagicNumber (500 line)\n+ * @checkstyle DiamondOperatorCheck (500 lines)\n  */\n-@SuppressWarnings(\"PMD.TooManyMethods\")\n+@SuppressWarnings({\"PMD.TooManyMethods\", \"PMD.AvoidDuplicateLiterals\"})", "originalCommit": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "changed_code": [{"header": "diff --git a/src/test/java/org/cactoos/list/JoinedTest.java b/src/test/java/org/cactoos/list/JoinedTest.java\nindex 9090edf3..5bfaf9ce 100644\n--- a/src/test/java/org/cactoos/list/JoinedTest.java\n+++ b/src/test/java/org/cactoos/list/JoinedTest.java\n", "chunk": "@@ -38,11 +38,15 @@ import org.llorllale.cactoos.matchers.IsTrue;\n  * @checkstyle MagicNumber (500 line)\n  * @checkstyle DiamondOperatorCheck (500 lines)\n  */\n-@SuppressWarnings({\"PMD.TooManyMethods\", \"PMD.AvoidDuplicateLiterals\"})\n+@SuppressWarnings({\"PMD.TooManyMethods\"})\n public final class JoinedTest {\n+    private static final String LITERAL_ONE = \"ONE\";\n+    private static final String LITERAL_TWO = \"TWO\";\n+    private static final String LITERAL_THREE = \"THREE\";\n+    private static final String LITERAL_FOUR = \"FOUR\";\n \n     @Test\n-    public void behavesAsCollection() throws Exception {\n+    public void behavesAsCollection() {\n         MatcherAssert.assertThat(\n             \"Can't behave as a list\",\n             new Joined<Integer>(\n", "next_change": {"commit": "8abb2f4108ef2a22a251bbe4b250dbed672845ff", "changed_code": [{"header": "diff --git a/src/test/java/org/cactoos/list/JoinedTest.java b/src/test/java/org/cactoos/list/JoinedTest.java\nindex 5bfaf9ce..e14f9397 100644\n--- a/src/test/java/org/cactoos/list/JoinedTest.java\n+++ b/src/test/java/org/cactoos/list/JoinedTest.java\n", "chunk": "@@ -38,56 +38,88 @@ import org.llorllale.cactoos.matchers.IsTrue;\n  * @checkstyle MagicNumber (500 line)\n  * @checkstyle DiamondOperatorCheck (500 lines)\n  */\n-@SuppressWarnings({\"PMD.TooManyMethods\"})\n+@SuppressWarnings(\"PMD.TooManyMethods\")\n public final class JoinedTest {\n+\n+    /**\n+     * Literal ONE value.\n+     */\n     private static final String LITERAL_ONE = \"ONE\";\n+    /**\n+     * Literal TWO value.\n+     */\n     private static final String LITERAL_TWO = \"TWO\";\n+    /**\n+     * Literal THREE value.\n+     */\n     private static final String LITERAL_THREE = \"THREE\";\n+    /**\n+     * Literal FOUR value.\n+     */\n     private static final String LITERAL_FOUR = \"FOUR\";\n \n     @Test\n     public void behavesAsCollection() {\n-        MatcherAssert.assertThat(\n+        new Assertion<>(\n             \"Can't behave as a list\",\n-            new Joined<Integer>(\n-                new ListOf<>(1, 2),\n-                new ListOf<>(3, 4)\n+            new Joined<String>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ),\n-            new BehavesAsList<>(2)\n-        );\n+            new BehavesAsList<>(JoinedTest.LITERAL_TWO)\n+        ).affirm();\n     }\n \n     @Test\n     public void size() {\n-        MatcherAssert.assertThat(\n-            new Joined<Integer>(\n-                new ListOf<>(1, 2),\n-                new ListOf<>(3, 4)\n+        new Assertion<>(\n+            \"must evaluate the size of the joined list\",\n+            new Joined<String>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ).size(),\n             new IsEqual<>(4)\n-        );\n+        ).affirm();\n     }\n \n     @Test\n     public void isEmpty() {\n-        MatcherAssert.assertThat(\n-            new Joined<Integer>(\n-                new ListOf<Integer>(5, 6)\n+        new Assertion<>(\n+            \"must be evaluated as an empty list\",\n+            new Joined<String>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ).isEmpty(),\n-            new IsEqual<>(false)\n-        );\n+            new IsNot<>(new IsTrue())\n+        ).affirm();\n     }\n \n     @Test\n     public void contains() {\n-        final int element = 0;\n-        MatcherAssert.assertThat(\n-            new Joined<Integer>(\n-                new ListOf<>(7, 8),\n-                new ListOf<>(9, element)\n-            ).contains(element),\n+        new Assertion<>(\n+            \"must contain element specified\",\n+            new Joined<String>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n+            ).contains(JoinedTest.LITERAL_THREE),\n             new IsTrue()\n-        );\n+        ).affirm();\n     }\n \n     @Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDc1MQ==", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880751", "body": "@fanifieiev It is better to assure if the new list was properly joined by looking into its elements than just counting them in this case", "bodyText": "@fanifieiev It is better to assure if the new list was properly joined by looking into its elements than just counting them in this case", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/fanifieiev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fanifieiev\">@fanifieiev</a> It is better to assure if the new list was properly joined by looking into its elements than just counting them in this case</p>", "author": "paulodamaso", "createdAt": "2020-02-22T03:06:31Z", "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -96,24 +99,31 @@ public void iterator() throws Exception {\n     }\n \n     @Test\n-    public void toArray() throws Exception {\n-        MatcherAssert.assertThat(\n-            new Joined<Integer>(\n-                new ListOf<>(11, 12),\n-                new ListOf<>(13, 14)\n-            ).toArray(),\n-            new IsEqual<>(new ListOf<>(11, 12, 13, 14).toArray())\n-        );\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n     public void add() throws Exception {\n-        new Joined<String>(new ListOf<String>(\"add0\")).add(\"new add0\");\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.add(\"Three\");\n+        new Assertion<>(", "originalCommit": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "changed_code": [{"header": "diff --git a/src/test/java/org/cactoos/list/JoinedTest.java b/src/test/java/org/cactoos/list/JoinedTest.java\nindex 9090edf3..5bfaf9ce 100644\n--- a/src/test/java/org/cactoos/list/JoinedTest.java\n+++ b/src/test/java/org/cactoos/list/JoinedTest.java\n", "chunk": "@@ -87,128 +91,194 @@ public final class JoinedTest {\n     }\n \n     @Test\n-    public void iterator() throws Exception {\n-        final String element = \"element\";\n-        MatcherAssert.assertThat(\n+    public void iterator() {\n+        new Assertion<>(\n+            \"Joined Iterator must return next element equal to the first added\",\n             new Joined<String>(\n-                new ListOf<>(element, \"first\"),\n-                new ListOf<>(\"second\", \"third\")\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ).iterator().next(),\n-            new IsEqual<>(element)\n-        );\n+            new IsEqual<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n+        ).affirm();\n     }\n \n     @Test\n-    public void add() throws Exception {\n+    public void add() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.add(\"Three\");\n+        joined.add(JoinedTest.LITERAL_THREE);\n         new Assertion<>(\n             \"must be able to add element specified\",\n-            joined.size(),\n-            new IsEqual<>(3)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void remove() throws Exception {\n+    public void remove() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.remove(\"Two\");\n+        joined.remove(JoinedTest.LITERAL_TWO);\n         new Assertion<>(\n             \"must be able to remove element specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void containsAll() throws Exception {\n-        final String first = \"item1\";\n-        final String second = \"item2\";\n-        MatcherAssert.assertThat(\n+    public void containsAll() {\n+        new Assertion<>(\n+            \"must contain all elements\",\n             new Joined<String>(\n-                new ListOf<>(first, \"item3\"),\n-                new ListOf<>(second, \"item4\")\n-            ).containsAll(new ListOf<>(first, second)),\n-            new IsEqual<>(true)\n-        );\n+                new ListOf<>(JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_THREE),\n+                new ListOf<>(JoinedTest.LITERAL_TWO, JoinedTest.LITERAL_FOUR)\n+            ).containsAll(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            ),\n+            new IsTrue()\n+        ).affirm();\n     }\n \n     @Test\n-    public void addAll() throws Exception {\n+    public void addAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n             \"must be able to addAll elements specified\",\n-            joined.get(2),\n-            new IsEqual<>(\"Three\")\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void addAllInFront() throws Exception {\n+    public void addAllInFront() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n             0,\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n-            \"must be able to addAll elements specified\",\n-            joined.get(0),\n-            new IsEqual<>(\"Three\")\n+            \"must be able to addAll elements in front\",\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR,\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void removeAll() throws Exception {\n+    public void removeAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE,\n+                JoinedTest.LITERAL_TWO\n+            ),\n+            new ListOf<>(JoinedTest.LITERAL_THREE)\n         );\n         joined.removeAll(\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to removeAll elements specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void retainAll() throws Exception {\n+    public void retainAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\", \"Three\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         joined.retainAll(\n-            new ListOf<>(\"One\", \"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to retain all\",\n-            joined.size(),\n-            new IsEqual<>(2)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void clear() throws Exception {\n+    public void clear() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            ),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n         );\n         joined.clear();\n         new Assertion<>(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDc5Mw==", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880793", "body": "@fanifieiev Here we should also test for the list values, not for its size", "bodyText": "@fanifieiev Here we should also test for the list values, not for its size", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/fanifieiev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fanifieiev\">@fanifieiev</a> Here we should also test for the list values, not for its size</p>", "author": "paulodamaso", "createdAt": "2020-02-22T03:07:20Z", "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -96,24 +99,31 @@ public void iterator() throws Exception {\n     }\n \n     @Test\n-    public void toArray() throws Exception {\n-        MatcherAssert.assertThat(\n-            new Joined<Integer>(\n-                new ListOf<>(11, 12),\n-                new ListOf<>(13, 14)\n-            ).toArray(),\n-            new IsEqual<>(new ListOf<>(11, 12, 13, 14).toArray())\n-        );\n-    }\n-\n-    @Test(expected = UnsupportedOperationException.class)\n     public void add() throws Exception {\n-        new Joined<String>(new ListOf<String>(\"add0\")).add(\"new add0\");\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.add(\"Three\");\n+        new Assertion<>(\n+            \"must be able to add element specified\",\n+            joined.size(),\n+            new IsEqual<>(3)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void remove() throws Exception {\n-        new Joined<String>(new ListOf<String>(\"remove\")).remove(\"new remove\");\n+        final List<String> joined = new Joined<String>(", "originalCommit": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "changed_code": [{"header": "diff --git a/src/test/java/org/cactoos/list/JoinedTest.java b/src/test/java/org/cactoos/list/JoinedTest.java\nindex 9090edf3..5bfaf9ce 100644\n--- a/src/test/java/org/cactoos/list/JoinedTest.java\n+++ b/src/test/java/org/cactoos/list/JoinedTest.java\n", "chunk": "@@ -87,128 +91,194 @@ public final class JoinedTest {\n     }\n \n     @Test\n-    public void iterator() throws Exception {\n-        final String element = \"element\";\n-        MatcherAssert.assertThat(\n+    public void iterator() {\n+        new Assertion<>(\n+            \"Joined Iterator must return next element equal to the first added\",\n             new Joined<String>(\n-                new ListOf<>(element, \"first\"),\n-                new ListOf<>(\"second\", \"third\")\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ).iterator().next(),\n-            new IsEqual<>(element)\n-        );\n+            new IsEqual<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n+        ).affirm();\n     }\n \n     @Test\n-    public void add() throws Exception {\n+    public void add() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.add(\"Three\");\n+        joined.add(JoinedTest.LITERAL_THREE);\n         new Assertion<>(\n             \"must be able to add element specified\",\n-            joined.size(),\n-            new IsEqual<>(3)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void remove() throws Exception {\n+    public void remove() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.remove(\"Two\");\n+        joined.remove(JoinedTest.LITERAL_TWO);\n         new Assertion<>(\n             \"must be able to remove element specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void containsAll() throws Exception {\n-        final String first = \"item1\";\n-        final String second = \"item2\";\n-        MatcherAssert.assertThat(\n+    public void containsAll() {\n+        new Assertion<>(\n+            \"must contain all elements\",\n             new Joined<String>(\n-                new ListOf<>(first, \"item3\"),\n-                new ListOf<>(second, \"item4\")\n-            ).containsAll(new ListOf<>(first, second)),\n-            new IsEqual<>(true)\n-        );\n+                new ListOf<>(JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_THREE),\n+                new ListOf<>(JoinedTest.LITERAL_TWO, JoinedTest.LITERAL_FOUR)\n+            ).containsAll(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            ),\n+            new IsTrue()\n+        ).affirm();\n     }\n \n     @Test\n-    public void addAll() throws Exception {\n+    public void addAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n             \"must be able to addAll elements specified\",\n-            joined.get(2),\n-            new IsEqual<>(\"Three\")\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void addAllInFront() throws Exception {\n+    public void addAllInFront() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n             0,\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n-            \"must be able to addAll elements specified\",\n-            joined.get(0),\n-            new IsEqual<>(\"Three\")\n+            \"must be able to addAll elements in front\",\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR,\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void removeAll() throws Exception {\n+    public void removeAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE,\n+                JoinedTest.LITERAL_TWO\n+            ),\n+            new ListOf<>(JoinedTest.LITERAL_THREE)\n         );\n         joined.removeAll(\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to removeAll elements specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void retainAll() throws Exception {\n+    public void retainAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\", \"Three\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         joined.retainAll(\n-            new ListOf<>(\"One\", \"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to retain all\",\n-            joined.size(),\n-            new IsEqual<>(2)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void clear() throws Exception {\n+    public void clear() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            ),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n         );\n         joined.clear();\n         new Assertion<>(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDg2Ng==", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880866", "body": "@fanifieiev This one is a little bit trickier: first, I think that we should add a list with more than one element to get certain that we are effectively joining two lists; also, we should check for the elements, not just the size", "bodyText": "@fanifieiev This one is a little bit trickier: first, I think that we should add a list with more than one element to get certain that we are effectively joining two lists; also, we should check for the elements, not just the size", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/fanifieiev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fanifieiev\">@fanifieiev</a> This one is a little bit trickier: first, I think that we should add a list with more than one element to get certain that we are effectively joining two lists; also, we should check for the elements, not just the size</p>", "author": "paulodamaso", "createdAt": "2020-02-22T03:08:37Z", "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -129,35 +139,83 @@ public void containsAll() throws Exception {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void addAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll\")\n-        ).addAll(new ListOf<>(\"new addAll\"));\n+        final List<String> joined = new Joined<String>(", "originalCommit": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "changed_code": [{"header": "diff --git a/src/test/java/org/cactoos/list/JoinedTest.java b/src/test/java/org/cactoos/list/JoinedTest.java\nindex 9090edf3..5bfaf9ce 100644\n--- a/src/test/java/org/cactoos/list/JoinedTest.java\n+++ b/src/test/java/org/cactoos/list/JoinedTest.java\n", "chunk": "@@ -87,128 +91,194 @@ public final class JoinedTest {\n     }\n \n     @Test\n-    public void iterator() throws Exception {\n-        final String element = \"element\";\n-        MatcherAssert.assertThat(\n+    public void iterator() {\n+        new Assertion<>(\n+            \"Joined Iterator must return next element equal to the first added\",\n             new Joined<String>(\n-                new ListOf<>(element, \"first\"),\n-                new ListOf<>(\"second\", \"third\")\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ).iterator().next(),\n-            new IsEqual<>(element)\n-        );\n+            new IsEqual<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n+        ).affirm();\n     }\n \n     @Test\n-    public void add() throws Exception {\n+    public void add() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.add(\"Three\");\n+        joined.add(JoinedTest.LITERAL_THREE);\n         new Assertion<>(\n             \"must be able to add element specified\",\n-            joined.size(),\n-            new IsEqual<>(3)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void remove() throws Exception {\n+    public void remove() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.remove(\"Two\");\n+        joined.remove(JoinedTest.LITERAL_TWO);\n         new Assertion<>(\n             \"must be able to remove element specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void containsAll() throws Exception {\n-        final String first = \"item1\";\n-        final String second = \"item2\";\n-        MatcherAssert.assertThat(\n+    public void containsAll() {\n+        new Assertion<>(\n+            \"must contain all elements\",\n             new Joined<String>(\n-                new ListOf<>(first, \"item3\"),\n-                new ListOf<>(second, \"item4\")\n-            ).containsAll(new ListOf<>(first, second)),\n-            new IsEqual<>(true)\n-        );\n+                new ListOf<>(JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_THREE),\n+                new ListOf<>(JoinedTest.LITERAL_TWO, JoinedTest.LITERAL_FOUR)\n+            ).containsAll(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            ),\n+            new IsTrue()\n+        ).affirm();\n     }\n \n     @Test\n-    public void addAll() throws Exception {\n+    public void addAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n             \"must be able to addAll elements specified\",\n-            joined.get(2),\n-            new IsEqual<>(\"Three\")\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void addAllInFront() throws Exception {\n+    public void addAllInFront() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n             0,\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n-            \"must be able to addAll elements specified\",\n-            joined.get(0),\n-            new IsEqual<>(\"Three\")\n+            \"must be able to addAll elements in front\",\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR,\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void removeAll() throws Exception {\n+    public void removeAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE,\n+                JoinedTest.LITERAL_TWO\n+            ),\n+            new ListOf<>(JoinedTest.LITERAL_THREE)\n         );\n         joined.removeAll(\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to removeAll elements specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void retainAll() throws Exception {\n+    public void retainAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\", \"Three\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         joined.retainAll(\n-            new ListOf<>(\"One\", \"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to retain all\",\n-            joined.size(),\n-            new IsEqual<>(2)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void clear() throws Exception {\n+    public void clear() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            ),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n         );\n         joined.clear();\n         new Assertion<>(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDkyMQ==", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880921", "body": "@fanifieiev Here also: better all the elements to see if they are the correct order", "bodyText": "@fanifieiev Here also: better all the elements to see if they are the correct order", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/fanifieiev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fanifieiev\">@fanifieiev</a> Here also: better all the elements to see if they are the correct order</p>", "author": "paulodamaso", "createdAt": "2020-02-22T03:09:40Z", "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -129,35 +139,83 @@ public void containsAll() throws Exception {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void addAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll\")\n-        ).addAll(new ListOf<>(\"new addAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(2),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addAllSecond() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll1\")\n-        ).addAll(22, new ListOf<>(\"new addAll1\"));\n+    @Test\n+    public void addAllInFront() throws Exception {\n+        final List<String> joined = new Joined<String>(", "originalCommit": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "changed_code": [{"header": "diff --git a/src/test/java/org/cactoos/list/JoinedTest.java b/src/test/java/org/cactoos/list/JoinedTest.java\nindex 9090edf3..5bfaf9ce 100644\n--- a/src/test/java/org/cactoos/list/JoinedTest.java\n+++ b/src/test/java/org/cactoos/list/JoinedTest.java\n", "chunk": "@@ -87,128 +91,194 @@ public final class JoinedTest {\n     }\n \n     @Test\n-    public void iterator() throws Exception {\n-        final String element = \"element\";\n-        MatcherAssert.assertThat(\n+    public void iterator() {\n+        new Assertion<>(\n+            \"Joined Iterator must return next element equal to the first added\",\n             new Joined<String>(\n-                new ListOf<>(element, \"first\"),\n-                new ListOf<>(\"second\", \"third\")\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ).iterator().next(),\n-            new IsEqual<>(element)\n-        );\n+            new IsEqual<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n+        ).affirm();\n     }\n \n     @Test\n-    public void add() throws Exception {\n+    public void add() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.add(\"Three\");\n+        joined.add(JoinedTest.LITERAL_THREE);\n         new Assertion<>(\n             \"must be able to add element specified\",\n-            joined.size(),\n-            new IsEqual<>(3)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void remove() throws Exception {\n+    public void remove() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.remove(\"Two\");\n+        joined.remove(JoinedTest.LITERAL_TWO);\n         new Assertion<>(\n             \"must be able to remove element specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void containsAll() throws Exception {\n-        final String first = \"item1\";\n-        final String second = \"item2\";\n-        MatcherAssert.assertThat(\n+    public void containsAll() {\n+        new Assertion<>(\n+            \"must contain all elements\",\n             new Joined<String>(\n-                new ListOf<>(first, \"item3\"),\n-                new ListOf<>(second, \"item4\")\n-            ).containsAll(new ListOf<>(first, second)),\n-            new IsEqual<>(true)\n-        );\n+                new ListOf<>(JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_THREE),\n+                new ListOf<>(JoinedTest.LITERAL_TWO, JoinedTest.LITERAL_FOUR)\n+            ).containsAll(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            ),\n+            new IsTrue()\n+        ).affirm();\n     }\n \n     @Test\n-    public void addAll() throws Exception {\n+    public void addAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n             \"must be able to addAll elements specified\",\n-            joined.get(2),\n-            new IsEqual<>(\"Three\")\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void addAllInFront() throws Exception {\n+    public void addAllInFront() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n             0,\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n-            \"must be able to addAll elements specified\",\n-            joined.get(0),\n-            new IsEqual<>(\"Three\")\n+            \"must be able to addAll elements in front\",\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR,\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void removeAll() throws Exception {\n+    public void removeAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE,\n+                JoinedTest.LITERAL_TWO\n+            ),\n+            new ListOf<>(JoinedTest.LITERAL_THREE)\n         );\n         joined.removeAll(\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to removeAll elements specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void retainAll() throws Exception {\n+    public void retainAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\", \"Three\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         joined.retainAll(\n-            new ListOf<>(\"One\", \"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to retain all\",\n-            joined.size(),\n-            new IsEqual<>(2)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void clear() throws Exception {\n+    public void clear() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            ),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n         );\n         joined.clear();\n         new Assertion<>(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk2MQ==", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880961", "body": "@fanifieiev Here too, let's check the resulting list", "bodyText": "@fanifieiev Here too, let's check the resulting list", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/fanifieiev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fanifieiev\">@fanifieiev</a> Here too, let's check the resulting list</p>", "author": "paulodamaso", "createdAt": "2020-02-22T03:10:09Z", "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -129,35 +139,83 @@ public void containsAll() throws Exception {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void addAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll\")\n-        ).addAll(new ListOf<>(\"new addAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(2),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addAllSecond() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll1\")\n-        ).addAll(22, new ListOf<>(\"new addAll1\"));\n+    @Test\n+    public void addAllInFront() throws Exception {\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            0,\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(0),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void removeAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"removeAll\")\n-        ).removeAll(new ListOf<>(\"new removeAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.removeAll(\n+            new ListOf<>(\"Two\")\n+        );\n+        new Assertion<>(\n+            \"must be able to removeAll elements specified\",\n+            joined.size(),", "originalCommit": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "changed_code": [{"header": "diff --git a/src/test/java/org/cactoos/list/JoinedTest.java b/src/test/java/org/cactoos/list/JoinedTest.java\nindex 9090edf3..5bfaf9ce 100644\n--- a/src/test/java/org/cactoos/list/JoinedTest.java\n+++ b/src/test/java/org/cactoos/list/JoinedTest.java\n", "chunk": "@@ -87,128 +91,194 @@ public final class JoinedTest {\n     }\n \n     @Test\n-    public void iterator() throws Exception {\n-        final String element = \"element\";\n-        MatcherAssert.assertThat(\n+    public void iterator() {\n+        new Assertion<>(\n+            \"Joined Iterator must return next element equal to the first added\",\n             new Joined<String>(\n-                new ListOf<>(element, \"first\"),\n-                new ListOf<>(\"second\", \"third\")\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ).iterator().next(),\n-            new IsEqual<>(element)\n-        );\n+            new IsEqual<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n+        ).affirm();\n     }\n \n     @Test\n-    public void add() throws Exception {\n+    public void add() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.add(\"Three\");\n+        joined.add(JoinedTest.LITERAL_THREE);\n         new Assertion<>(\n             \"must be able to add element specified\",\n-            joined.size(),\n-            new IsEqual<>(3)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void remove() throws Exception {\n+    public void remove() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.remove(\"Two\");\n+        joined.remove(JoinedTest.LITERAL_TWO);\n         new Assertion<>(\n             \"must be able to remove element specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void containsAll() throws Exception {\n-        final String first = \"item1\";\n-        final String second = \"item2\";\n-        MatcherAssert.assertThat(\n+    public void containsAll() {\n+        new Assertion<>(\n+            \"must contain all elements\",\n             new Joined<String>(\n-                new ListOf<>(first, \"item3\"),\n-                new ListOf<>(second, \"item4\")\n-            ).containsAll(new ListOf<>(first, second)),\n-            new IsEqual<>(true)\n-        );\n+                new ListOf<>(JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_THREE),\n+                new ListOf<>(JoinedTest.LITERAL_TWO, JoinedTest.LITERAL_FOUR)\n+            ).containsAll(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            ),\n+            new IsTrue()\n+        ).affirm();\n     }\n \n     @Test\n-    public void addAll() throws Exception {\n+    public void addAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n             \"must be able to addAll elements specified\",\n-            joined.get(2),\n-            new IsEqual<>(\"Three\")\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void addAllInFront() throws Exception {\n+    public void addAllInFront() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n             0,\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n-            \"must be able to addAll elements specified\",\n-            joined.get(0),\n-            new IsEqual<>(\"Three\")\n+            \"must be able to addAll elements in front\",\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR,\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void removeAll() throws Exception {\n+    public void removeAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE,\n+                JoinedTest.LITERAL_TWO\n+            ),\n+            new ListOf<>(JoinedTest.LITERAL_THREE)\n         );\n         joined.removeAll(\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to removeAll elements specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void retainAll() throws Exception {\n+    public void retainAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\", \"Three\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         joined.retainAll(\n-            new ListOf<>(\"One\", \"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to retain all\",\n-            joined.size(),\n-            new IsEqual<>(2)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void clear() throws Exception {\n+    public void clear() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            ),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n         );\n         joined.clear();\n         new Assertion<>(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk4OA==", "url": "https://github.com/yegor256/cactoos/pull/1309#discussion_r382880988", "body": "@fanifieiev Check the list elements here too, please", "bodyText": "@fanifieiev Check the list elements here too, please", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/fanifieiev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fanifieiev\">@fanifieiev</a> Check the list elements here too, please</p>", "author": "paulodamaso", "createdAt": "2020-02-22T03:10:47Z", "path": "src/test/java/org/cactoos/list/JoinedTest.java", "diffHunk": "@@ -129,35 +139,83 @@ public void containsAll() throws Exception {\n         );\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void addAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll\")\n-        ).addAll(new ListOf<>(\"new addAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(2),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n-    public void addAllSecond() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"addAll1\")\n-        ).addAll(22, new ListOf<>(\"new addAll1\"));\n+    @Test\n+    public void addAllInFront() throws Exception {\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.addAll(\n+            0,\n+            new ListOf<>(\"Three\")\n+        );\n+        new Assertion<>(\n+            \"must be able to addAll elements specified\",\n+            joined.get(0),\n+            new IsEqual<>(\"Three\")\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void removeAll() throws Exception {\n-        new Joined<String>(\n-            new ListOf<String>(\"removeAll\")\n-        ).removeAll(new ListOf<>(\"new removeAll\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\")\n+        );\n+        joined.removeAll(\n+            new ListOf<>(\"Two\")\n+        );\n+        new Assertion<>(\n+            \"must be able to removeAll elements specified\",\n+            joined.size(),\n+            new IsEqual<>(1)\n+        ).affirm();\n     }\n \n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n     public void retainAll() throws Exception {\n-        new Joined<String>().retainAll(new ListOf<>(\"retain\", \"All\"));\n+        final List<String> joined = new Joined<String>(\n+            new ListOf<>(\"One\"),\n+            new ListOf<>(\"Two\", \"Three\")\n+        );\n+        joined.retainAll(\n+            new ListOf<>(\"One\", \"Two\")\n+        );\n+        new Assertion<>(\n+            \"must be able to retain all\",", "originalCommit": "f6f0257680c96379c6f220a1fb802c06f7f9cc14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "changed_code": [{"header": "diff --git a/src/test/java/org/cactoos/list/JoinedTest.java b/src/test/java/org/cactoos/list/JoinedTest.java\nindex 9090edf3..5bfaf9ce 100644\n--- a/src/test/java/org/cactoos/list/JoinedTest.java\n+++ b/src/test/java/org/cactoos/list/JoinedTest.java\n", "chunk": "@@ -87,128 +91,194 @@ public final class JoinedTest {\n     }\n \n     @Test\n-    public void iterator() throws Exception {\n-        final String element = \"element\";\n-        MatcherAssert.assertThat(\n+    public void iterator() {\n+        new Assertion<>(\n+            \"Joined Iterator must return next element equal to the first added\",\n             new Joined<String>(\n-                new ListOf<>(element, \"first\"),\n-                new ListOf<>(\"second\", \"third\")\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_TWO\n+                ),\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE, JoinedTest.LITERAL_FOUR\n+                )\n             ).iterator().next(),\n-            new IsEqual<>(element)\n-        );\n+            new IsEqual<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n+        ).affirm();\n     }\n \n     @Test\n-    public void add() throws Exception {\n+    public void add() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.add(\"Three\");\n+        joined.add(JoinedTest.LITERAL_THREE);\n         new Assertion<>(\n             \"must be able to add element specified\",\n-            joined.size(),\n-            new IsEqual<>(3)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void remove() throws Exception {\n+    public void remove() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n-        joined.remove(\"Two\");\n+        joined.remove(JoinedTest.LITERAL_TWO);\n         new Assertion<>(\n             \"must be able to remove element specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void containsAll() throws Exception {\n-        final String first = \"item1\";\n-        final String second = \"item2\";\n-        MatcherAssert.assertThat(\n+    public void containsAll() {\n+        new Assertion<>(\n+            \"must contain all elements\",\n             new Joined<String>(\n-                new ListOf<>(first, \"item3\"),\n-                new ListOf<>(second, \"item4\")\n-            ).containsAll(new ListOf<>(first, second)),\n-            new IsEqual<>(true)\n-        );\n+                new ListOf<>(JoinedTest.LITERAL_ONE, JoinedTest.LITERAL_THREE),\n+                new ListOf<>(JoinedTest.LITERAL_TWO, JoinedTest.LITERAL_FOUR)\n+            ).containsAll(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            ),\n+            new IsTrue()\n+        ).affirm();\n     }\n \n     @Test\n-    public void addAll() throws Exception {\n+    public void addAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n             \"must be able to addAll elements specified\",\n-            joined.get(2),\n-            new IsEqual<>(\"Three\")\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void addAllInFront() throws Exception {\n+    public void addAllInFront() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(JoinedTest.LITERAL_TWO)\n         );\n         joined.addAll(\n             0,\n-            new ListOf<>(\"Three\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_THREE,\n+                JoinedTest.LITERAL_FOUR\n+            )\n         );\n         new Assertion<>(\n-            \"must be able to addAll elements specified\",\n-            joined.get(0),\n-            new IsEqual<>(\"Three\")\n+            \"must be able to addAll elements in front\",\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_THREE,\n+                    JoinedTest.LITERAL_FOUR,\n+                    JoinedTest.LITERAL_ONE,\n+                    JoinedTest.LITERAL_TWO\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void removeAll() throws Exception {\n+    public void removeAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE,\n+                JoinedTest.LITERAL_TWO\n+            ),\n+            new ListOf<>(JoinedTest.LITERAL_THREE)\n         );\n         joined.removeAll(\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to removeAll elements specified\",\n-            joined.size(),\n-            new IsEqual<>(1)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_ONE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void retainAll() throws Exception {\n+    public void retainAll() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\", \"Three\")\n+            new ListOf<>(JoinedTest.LITERAL_ONE),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         joined.retainAll(\n-            new ListOf<>(\"One\", \"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            )\n         );\n         new Assertion<>(\n             \"must be able to retain all\",\n-            joined.size(),\n-            new IsEqual<>(2)\n+            joined,\n+            new IsEqual<>(\n+                new ListOf<>(\n+                    JoinedTest.LITERAL_TWO,\n+                    JoinedTest.LITERAL_THREE\n+                )\n+            )\n         ).affirm();\n     }\n \n     @Test\n-    public void clear() throws Exception {\n+    public void clear() {\n         final List<String> joined = new Joined<String>(\n-            new ListOf<>(\"One\"),\n-            new ListOf<>(\"Two\")\n+            new ListOf<>(\n+                JoinedTest.LITERAL_TWO,\n+                JoinedTest.LITERAL_THREE\n+            ),\n+            new ListOf<>(\n+                JoinedTest.LITERAL_ONE\n+            )\n         );\n         joined.clear();\n         new Assertion<>(\n", "next_change": null}]}}, {"oid": "9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "url": "https://github.com/yegor256/cactoos/commit/9700ed2e8aea8f4a3a9689fb0a3cd1edce473aae", "message": "(#1291) After review test fixes", "committedDate": "2020-02-24T02:48:17Z", "type": "commit"}, {"oid": "8abb2f4108ef2a22a251bbe4b250dbed672845ff", "url": "https://github.com/yegor256/cactoos/commit/8abb2f4108ef2a22a251bbe4b250dbed672845ff", "message": "(#1291) After review test fixes, attempt 2", "committedDate": "2020-02-24T03:02:37Z", "type": "commit"}, {"oid": "e22c82143d1745d975298a3d0eb6342da7af749d", "url": "https://github.com/yegor256/cactoos/commit/e22c82143d1745d975298a3d0eb6342da7af749d", "message": "(#1291) After review test fixes, attempt 3", "committedDate": "2020-02-24T03:12:39Z", "type": "commit"}]}