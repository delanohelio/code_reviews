{"pr_number": 1270, "pr_title": "iOS_alignment/retry failed uploads", "pr_author": "JulianKast", "pr_createdAt": "2020-02-10T22:55:56Z", "pr_url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270", "timeline": [{"oid": "11bf067fe0a68a0c4c8905de99e6f91846d84ede", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/11bf067fe0a68a0c4c8905de99e6f91846d84ede", "message": "Added FileManagerConfig", "committedDate": "2020-02-10T22:32:05Z", "type": "commit"}, {"oid": "a1e8924e423ba0cda651321ee83995610bb2ee74", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a1e8924e423ba0cda651321ee83995610bb2ee74", "message": "Add Retry logic for list of files", "committedDate": "2020-02-10T22:41:22Z", "type": "commit"}, {"oid": "a72a3c29a78b7b333e6a1c871d50135908d94a1b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a72a3c29a78b7b333e6a1c871d50135908d94a1b", "message": "Added retry logic for single files", "committedDate": "2020-02-10T22:43:22Z", "type": "commit"}, {"oid": "6b08392da2d2e5feb17f38b3fd3746af5af69840", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/6b08392da2d2e5feb17f38b3fd3746af5af69840", "message": "Added unit test", "committedDate": "2020-02-10T22:52:13Z", "type": "commit"}, {"oid": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "message": "Added FileManagerConfig to Java SE", "committedDate": "2020-02-10T23:25:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3Mzg2OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378373869", "body": "Can we add javadoc to all methods in this class?", "bodyText": "Can we add javadoc to all methods in this class?", "bodyHTML": "<p dir=\"auto\">Can we add javadoc to all methods in this class?</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T16:42:11Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/file/FileManagerConfig.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.smartdevicelink.managers.file;", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3NDU0Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378374546", "body": "If the JavaSE and the Android copies for this file are identical, would it be possible to just add one copy to the `base` folder so both projects can reuse that file?", "bodyText": "If the JavaSE and the Android copies for this file are identical, would it be possible to just add one copy to the base folder so both projects can reuse that file?", "bodyHTML": "<p dir=\"auto\">If the JavaSE and the Android copies for this file are identical, would it be possible to just add one copy to the <code>base</code> folder so both projects can reuse that file?</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T16:43:20Z", "path": "javaSE/src/main/java/com/smartdevicelink/managers/file/FileManagerConfig.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.smartdevicelink.managers.file;", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4MDkzNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378380934", "body": "Can we declare this variable outside the `// Managers` block?  it could be just below `lockScreenConfig`. same applies to the SdlManager for javaSE", "bodyText": "Can we declare this variable outside the // Managers block?  it could be just below lockScreenConfig. same applies to the SdlManager for javaSE", "bodyHTML": "<p dir=\"auto\">Can we declare this variable outside the <code>// Managers</code> block?  it could be just below <code>lockScreenConfig</code>. same applies to the SdlManager for javaSE</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T16:53:05Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/SdlManager.java", "diffHunk": "@@ -124,6 +125,7 @@\n \n \t// Managers\n \tprivate PermissionManager permissionManager;\n+\tprivate FileManagerConfig fileManagerConfig;", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4OTIyOA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378389228", "body": "We should mention what the default configs are at least in the `FileManagerConfig` class. This applies to JavaSE as well", "bodyText": "We should mention what the default configs are at least in the FileManagerConfig class. This applies to JavaSE as well", "bodyHTML": "<p dir=\"auto\">We should mention what the default configs are at least in the <code>FileManagerConfig</code> class. This applies to JavaSE as well</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T17:06:42Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/SdlManager.java", "diffHunk": "@@ -1029,6 +1033,16 @@ public Builder setNightColorScheme(final TemplateColorScheme nightColorScheme){\n \t\t\treturn this;\n \t\t}\n \n+\t\t/**\n+\t\t * Sets the FileManagerConfig for the session. <br>\n+\t\t * <strong>Note: If not set, the default configuration will be used.</strong>", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MzQxMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378393413", "body": "Can we add one space after the \",\" and before and `FileManagerConfig`? Also, it is always better to add javadoc to all new methods. This also applies to the javaSE copy", "bodyText": "Can we add one space after the \",\" and before and FileManagerConfig? Also, it is always better to add javadoc to all new methods. This also applies to the javaSE copy", "bodyHTML": "<p dir=\"auto\">Can we add one space after the \",\" and before and <code>FileManagerConfig</code>? Also, it is always better to add javadoc to all new methods. This also applies to the javaSE copy</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T17:14:00Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/file/FileManager.java", "diffHunk": "@@ -64,14 +64,21 @@\n public class FileManager extends BaseFileManager {\n \n \tprivate final WeakReference<Context> context;\n-\n+\t@Deprecated\n \tpublic FileManager(ISdl internalInterface, Context context) {\n \n \t\t// setup\n \t\tsuper(internalInterface);\n \t\tthis.context = new WeakReference<>(context);\n \t}\n \n+\tpublic FileManager(ISdl internalInterface, Context context,FileManagerConfig fileManagerConfig) {", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwMTkwMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r379101902", "bodyText": "Doen", "author": "JulianKast", "createdAt": "2020-02-13T20:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MzQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzNDMwNg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378434306", "body": "This can be private:\r\n```\r\nprivate Hashtable<String, Integer> failedFileUploadsIndex;\r\n```\r\n\r\nIt is better to initialize it in the constructor and remove the types from the initialization\r\n```\r\nfailedFileUploadsIndex = new Hashtable<>();\r\n```", "bodyText": "This can be private:\nprivate Hashtable<String, Integer> failedFileUploadsIndex;\n\nIt is better to initialize it in the constructor and remove the types from the initialization\nfailedFileUploadsIndex = new Hashtable<>();", "bodyHTML": "<p dir=\"auto\">This can be private:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private Hashtable&lt;String, Integer&gt; failedFileUploadsIndex;\"><pre><code>private Hashtable&lt;String, Integer&gt; failedFileUploadsIndex;\n</code></pre></div>\n<p dir=\"auto\">It is better to initialize it in the constructor and remove the types from the initialization</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"failedFileUploadsIndex = new Hashtable&lt;&gt;();\"><pre><code>failedFileUploadsIndex = new Hashtable&lt;&gt;();\n</code></pre></div>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T18:30:24Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -83,14 +86,26 @@\n \tfinal static int SPACE_AVAILABLE_MAX_VALUE = 2000000000;\n \tprivate List<String> remoteFiles, uploadedEphemeralFileNames;\n \tprivate int bytesAvailable = SPACE_AVAILABLE_MAX_VALUE;\n+\tprivate FileManagerConfig fileManagerConfig;\n+\tHashtable<String, Integer> failedFileUploadsIndex", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NjYyNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378466625", "body": "This comment is not very clear", "bodyText": "This comment is not very clear", "bodyHTML": "<p dir=\"auto\">This comment is not very clear</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T19:31:33Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -317,6 +391,31 @@ public void onError(int correlationId, Result resultCode, String info) {\n \t\tinternalInterface.sendRPC(putFile);\n \t}\n \n+\t/**\n+\t * Check to see if file can be reuploaded\n+\t * @param file SdlFile with file name and one of A) fileData, B) Uri, or C) resourceID set\n+\t */\n+\tprivate boolean checkFileForReUpload(SdlFile file) {\n+\t\t//Checking if file has already made an attempt at uploading\n+\t\tif(!failedFileUploadsIndex.containsKey(file.getName())){\n+\t\t\tif(file.getType().equals(FileType.GRAPHIC_JPEG) ||\n+\t\t\t\t\tfile.getType().equals(FileType.GRAPHIC_BMP) ||\n+\t\t\t\t\tfile.getType().equals(FileType.GRAPHIC_PNG)){\n+\t\t\t\tfailedFileUploadsIndex.put(file.getName(),fileManagerConfig.getArtworkRetryCount());\n+\t\t\t}\n+\t\t\telse{\n+\t\t\t\tfailedFileUploadsIndex.put(file.getName(),fileManagerConfig.getFileRetryCount());\n+\t\t\t}\n+\t\t}\n+\t\t//checking file retry upload attempts, if re upload allowed upload, if not completed the listener.", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MjUyNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378472527", "body": "I see that this method and the other one that takes SdlFile are very similar in the logic. Would it be possible to make a new one that works for both situations? something like:\r\n```\r\nprivate boolean shouldReuploadFile(String fileName, FileType fileType) \r\n```", "bodyText": "I see that this method and the other one that takes SdlFile are very similar in the logic. Would it be possible to make a new one that works for both situations? something like:\nprivate boolean shouldReuploadFile(String fileName, FileType fileType)", "bodyHTML": "<p dir=\"auto\">I see that this method and the other one that takes SdlFile are very similar in the logic. Would it be possible to make a new one that works for both situations? something like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private boolean shouldReuploadFile(String fileName, FileType fileType) \"><pre><code>private boolean shouldReuploadFile(String fileName, FileType fileType) \n</code></pre></div>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T19:42:52Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -274,7 +324,30 @@ public void onResponse(int correlationId, RPCResponse response) {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t});\n+\t\t};\n+\n+\t\tinternalInterface.sendRequests(requests, onMultipleRequestListener);\n+\t}\n+\n+\t/**\n+\t *  Check to see if PutFile Request can be reUploaded\n+\t * @param req PutFile req is a failed file upload\n+\t */\n+\tprivate boolean checkRequestForReUpload(PutFile req){", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NDQ2Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378474462", "body": "There is extra space here ", "bodyText": "There is extra space here", "bodyHTML": "<p dir=\"auto\">There is extra space here</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T19:46:30Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -330,7 +429,8 @@ public void uploadFiles(@NonNull List<? extends SdlFile> files, final MultipleFi\n \t\tfor(SdlFile file : files){\n \t\t\tputFileRequests.add(createPutFile(file));\n \t\t}\n-\t\tsendMultipleFileOperations(putFileRequests, listener);\n+\t\tfinal Map<String,String>  customErrors = new HashMap<>();", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwMzg0Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r379103847", "bodyText": "Reformatted all code that I modified to take care of extra spaces", "author": "JulianKast", "createdAt": "2020-02-13T20:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NDQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Njc2Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378476763", "body": "Remember to clean personal comments ", "bodyText": "Remember to clean personal comments", "bodyHTML": "<p dir=\"auto\">Remember to clean personal comments</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T19:50:45Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -240,11 +256,45 @@ public void addCorrelationId(int correlationid) {\n \t\t\tpublic void onUpdate(int remainingRequests) {}\n \n \t\t\t@Override\n-\t\t\tpublic void onFinished() {\n-\t\t\t\tif(listener != null) {\n-\t\t\t\t\tif (errors.isEmpty()) {\n-\t\t\t\t\t\tlistener.onComplete(null);\n+\t\t\tpublic void onFinished() { ///tomorrow add logic for delete operations and test!!!", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4MTkxNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378481914", "body": "Can we rename `customErrors` to `errorsForRequestsThatCannotBeResent` to make it clear what map stores? Also there is an extra space after `customErrors `", "bodyText": "Can we rename customErrors to errorsForRequestsThatCannotBeResent to make it clear what map stores? Also there is an extra space after customErrors", "bodyHTML": "<p dir=\"auto\">Can we rename <code>customErrors</code> to <code>errorsForRequestsThatCannotBeResent</code> to make it clear what map stores? Also there is an extra space after <code>customErrors </code></p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T20:00:39Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -212,7 +227,7 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t * @param requests Non-empty list of PutFile or DeleteFile requests\n \t * @param listener MultipleFileCompletionListener that is called upon conclusion of sending requests\n \t */\n-\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener){\n+\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener, final Map<String, String> customErrors ){", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1NTAwNg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378955006", "bodyText": "Under new logic we only need one hash to handle errors, Im going to get rid of the current hash called errors and rename customErrors to errors.", "author": "JulianKast", "createdAt": "2020-02-13T16:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4MTkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5OTI4NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378499284", "body": "there are some formatting issues in this method. Can we use the Android Studio reformatter tool to reformat this method?", "bodyText": "there are some formatting issues in this method. Can we use the Android Studio reformatter tool to reformat this method?", "bodyHTML": "<p dir=\"auto\">there are some formatting issues in this method. Can we use the Android Studio reformatter tool to reformat this method?</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T20:38:29Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -274,7 +324,30 @@ public void onResponse(int correlationId, RPCResponse response) {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t});\n+\t\t};\n+\n+\t\tinternalInterface.sendRequests(requests, onMultipleRequestListener);\n+\t}\n+\n+\t/**\n+\t *  Check to see if PutFile Request can be reUploaded\n+\t * @param req PutFile req is a failed file upload\n+\t */\n+\tprivate boolean checkRequestForReUpload(PutFile req){", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwNDA5OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r379104099", "bodyText": "Done", "author": "JulianKast", "createdAt": "2020-02-13T20:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5OTI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNzUxOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378507519", "body": "Would it be possible to change this map to store the actual requests indexed by the correlation ids\r\n```\r\nfinal HashMap<Integer, RPCRequest> requestsMap = new HashMap<>();\r\n```\r\nThis way we can grab the failed requests immediately in `onError()` and store them in `requestsToResend` list instead of looping to find the request that corresponds to the correlation id.", "bodyText": "Would it be possible to change this map to store the actual requests indexed by the correlation ids\nfinal HashMap<Integer, RPCRequest> requestsMap = new HashMap<>();\n\nThis way we can grab the failed requests immediately in onError() and store them in requestsToResend list instead of looping to find the request that corresponds to the correlation id.", "bodyHTML": "<p dir=\"auto\">Would it be possible to change this map to store the actual requests indexed by the correlation ids</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final HashMap&lt;Integer, RPCRequest&gt; requestsMap = new HashMap&lt;&gt;();\n\"><pre><code>final HashMap&lt;Integer, RPCRequest&gt; requestsMap = new HashMap&lt;&gt;();\n</code></pre></div>\n<p dir=\"auto\">This way we can grab the failed requests immediately in <code>onError()</code> and store them in <code>requestsToResend</code> list instead of looping to find the request that corresponds to the correlation id.</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T20:55:59Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -212,7 +227,7 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t * @param requests Non-empty list of PutFile or DeleteFile requests\n \t * @param listener MultipleFileCompletionListener that is called upon conclusion of sending requests\n \t */\n-\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener){\n+\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener, final Map<String, String> customErrors ){\n \t\tfinal Map<String, String> errors = new HashMap<>();\n \t\tfinal HashMap<Integer,String> fileNameMap = new HashMap<>();", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMDg4MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378510881", "body": "Can we rename this to `requestsToResend`", "bodyText": "Can we rename this to requestsToResend", "bodyHTML": "<p dir=\"auto\">Can we rename this to <code>requestsToResend</code></p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T21:03:27Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -240,11 +256,45 @@ public void addCorrelationId(int correlationid) {\n \t\t\tpublic void onUpdate(int remainingRequests) {}\n \n \t\t\t@Override\n-\t\t\tpublic void onFinished() {\n-\t\t\t\tif(listener != null) {\n-\t\t\t\t\tif (errors.isEmpty()) {\n-\t\t\t\t\t\tlistener.onComplete(null);\n+\t\t\tpublic void onFinished() { ///tomorrow add logic for delete operations and test!!!\n+\t\t\t\tif (errors.isEmpty() && customErrors.isEmpty()) {\n+\t\t\t\t\tif (listener != null) {\n+\t\t\t\t\t\tlistener.onComplete(null); //if first time no errors and listener is not null\n+\t\t\t\t\t}\n+\t\t\t\t} else if (!deletionOperation) {\n+\t\t\t\t\tfinal List<RPCRequest> reRequest = new ArrayList<>();", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTMyMA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r378515320", "body": "Can we remove the extra spaces here?", "bodyText": "Can we remove the extra spaces here?", "bodyHTML": "<p dir=\"auto\">Can we remove the extra spaces here?</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-12T21:13:05Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/file/FileManagerTests.java", "diffHunk": "@@ -57,6 +60,45 @@ public void tearDown() throws Exception {\n \t\tsuper.tearDown();\n \t}\n \n+\tprivate Answer<Void> onPutFileFailureOnError = new Answer<Void>() {\n+\t\t@Override\n+\t\tpublic Void answer(InvocationOnMock invocation) throws Throwable {\n+\t\t\tObject[] args = invocation.getArguments();\n+\t\t\tRPCRequest message = (RPCRequest) args[0];\n+\t\t\tif(message instanceof PutFile){\n+\t\t\t\tint correlationId = message.getCorrelationID();\n+\t\t\t\tResult resultCode = Result.REJECTED;\n+\t\t\t\tPutFileResponse putFileResponse = new PutFileResponse();\n+\t\t\t\tputFileResponse.setSuccess(false);\n+\t\t\t\tmessage.getOnRPCResponseListener().onError(correlationId, resultCode,\"Binary data empty\");\n+\t\t\t}", "originalCommit": "3aecf13c0fae1024ad9d4107dcbd2e867b5e4b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "863c5f8d5f5f8d97dfef7407cc991f77e4b4f74d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/863c5f8d5f5f8d97dfef7407cc991f77e4b4f74d", "message": "Changed Location of FileManagerConfig", "committedDate": "2020-02-13T18:19:02Z", "type": "commit"}, {"oid": "bc2dd92cf8fc569284fd3d761a995f0db3f2732b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/bc2dd92cf8fc569284fd3d761a995f0db3f2732b", "message": "Deleting FileMangerConfig form JavaSE", "committedDate": "2020-02-13T18:22:28Z", "type": "commit"}, {"oid": "f930bd0b1b39896e59988ebaac3afe1540fe7868", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f930bd0b1b39896e59988ebaac3afe1540fe7868", "message": "Formatting FileManager in android and JavaSE", "committedDate": "2020-02-13T19:37:25Z", "type": "commit"}, {"oid": "5704a7973be030e3f59abd7ac56ac726f162554a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/5704a7973be030e3f59abd7ac56ac726f162554a", "message": "Formatting and moving location of declaring FileManagerConfig", "committedDate": "2020-02-13T19:49:20Z", "type": "commit"}, {"oid": "1098eddf604239bf3850ddc7d6424ede279a8b98", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1098eddf604239bf3850ddc7d6424ede279a8b98", "message": "Modified UploadFiles and sendMultipleFileOperations to use new method shouldReuploadFile, getting rid of two methods. Reorganized logic in sendMultipleFileOperations to be more efficient", "committedDate": "2020-02-13T20:02:15Z", "type": "commit"}, {"oid": "053c5a520ebd622fd826021bf2d49e1b516ab20d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/053c5a520ebd622fd826021bf2d49e1b516ab20d", "message": "Added javaDocs to FileManagerConfig", "committedDate": "2020-02-13T20:28:26Z", "type": "commit"}, {"oid": "1a41ff39e80f5c87b2a0e6e1697e6588ea37cf1a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1a41ff39e80f5c87b2a0e6e1697e6588ea37cf1a", "message": "Add javadocs and remove extra space", "committedDate": "2020-02-13T20:39:08Z", "type": "commit"}, {"oid": "07d25c628de614cb4329b3fcd78eea92c619972a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/07d25c628de614cb4329b3fcd78eea92c619972a", "message": "removed space", "committedDate": "2020-02-13T20:51:21Z", "type": "commit"}, {"oid": "9ef1f3ed4ef2a7de979e26446234e2ce21c978aa", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/9ef1f3ed4ef2a7de979e26446234e2ce21c978aa", "message": "Fixed ClassCast Exception for deleteFiles", "committedDate": "2020-02-14T16:39:39Z", "type": "commit"}, {"oid": "bfd5fac41432a7f7ae21602db9338dc5f61f630d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/bfd5fac41432a7f7ae21602db9338dc5f61f630d", "message": "Added unit test for deleting files, added comments/fixed formatting", "committedDate": "2020-02-14T20:17:22Z", "type": "commit"}, {"oid": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/9285d45941bfcc54786dbcc501ef3b9992d6d593", "message": "Modified broken test for file upload success.", "committedDate": "2020-02-14T20:52:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMDE5NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380320195", "body": "There should be a description for what each param means in the javadoc. This comment applies to all newly added  javadoc comments in this PR.", "bodyText": "There should be a description for what each param means in the javadoc. This comment applies to all newly added  javadoc comments in this PR.", "bodyHTML": "<p dir=\"auto\">There should be a description for what each param means in the javadoc. This comment applies to all newly added  javadoc comments in this PR.</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T18:21:02Z", "path": "javaSE/src/main/java/com/smartdevicelink/managers/file/FileManager.java", "diffHunk": "@@ -55,12 +55,23 @@\n  */\n public class FileManager extends BaseFileManager {\n \n+\t@Deprecated\n \tpublic FileManager(ISdl internalInterface) {\n \n \t\t// setup\n \t\tsuper(internalInterface);\n \t}\n \n+\t/**\n+\t * Constructor for FileManager\n+\t * @param internalInterface ISdl\n+\t * @param fileManagerConfig FileManagerConfig\n+\t */\n+\tpublic FileManager(ISdl internalInterface, FileManagerConfig fileManagerConfig) {", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMjQ0OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380322448", "body": "Can we use `HashMap` instead of `HashTable`? I believe it is more efficient. ", "bodyText": "Can we use HashMap instead of HashTable? I believe it is more efficient.", "bodyHTML": "<p dir=\"auto\">Can we use <code>HashMap</code> instead of <code>HashTable</code>? I believe it is more efficient.</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T18:28:29Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -83,14 +85,31 @@\n \tfinal static int SPACE_AVAILABLE_MAX_VALUE = 2000000000;\n \tprivate List<String> remoteFiles, uploadedEphemeralFileNames;\n \tprivate int bytesAvailable = SPACE_AVAILABLE_MAX_VALUE;\n+\tprivate FileManagerConfig fileManagerConfig;\n+\tprivate Hashtable<String, Integer> failedFileUploadsIndex;", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMzE4Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380323182", "body": "There is no space after `,` and two spaces before `errors`", "bodyText": "There is no space after , and two spaces before errors", "bodyHTML": "<p dir=\"auto\">There is no space after <code>,</code> and two spaces before <code>errors</code></p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T18:31:10Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -194,7 +213,8 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t\t\tdeleteFile.setSdlFileName(fileName);\n \t\t\tdeleteFileRequests.add(deleteFile);\n \t\t}\n-\t\tsendMultipleFileOperations(deleteFileRequests, listener);\n+\t\tfinal Map<String,String>  errors = new HashMap<>();", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM5Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380324397", "body": "The description for the params in javadoc is not very clear. They should define what each param means.", "bodyText": "The description for the params in javadoc is not very clear. They should define what each param means.", "bodyHTML": "<p dir=\"auto\">The description for the params in javadoc is not very clear. They should define what each param means.</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T18:35:21Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -209,114 +229,166 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t/**\n \t * Sends list of provided requests (strictly PutFile or DeleteFile) asynchronously through internalInterface,\n \t * calls listener on conclusion of sending requests.\n+\t *\n \t * @param requests Non-empty list of PutFile or DeleteFile requests\n \t * @param listener MultipleFileCompletionListener that is called upon conclusion of sending requests\n \t */\n-\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener){\n-\t\tfinal Map<String, String> errors = new HashMap<>();\n-\t\tfinal HashMap<Integer,String> fileNameMap = new HashMap<>();\n+\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener, final Map<String, String> errors) {\n+\t\tfinal HashMap<Integer, RPCRequest> requestMap = new HashMap<>();\n+\t\tfinal List<RPCRequest> requestsToResend = new ArrayList<>();\n \t\tfinal boolean deletionOperation;\n-\t\tif(requests.get(0) instanceof PutFile){\n+\t\tif (requests.get(0) instanceof PutFile) {\n \t\t\tdeletionOperation = false;\n-\t\t}else if(requests.get(0) instanceof DeleteFile){\n+\t\t} else if (requests.get(0) instanceof DeleteFile) {\n \t\t\tdeletionOperation = true;\n-\t\t}else{\n-\t\t\treturn; // requests are not DeleteFile or PutFile\n+\t\t} else {\n+\t\t\treturn;\n \t\t}\n-\t\tinternalInterface.sendRequests(requests, new OnMultipleRequestListener() {\n+\n+\t\tOnMultipleRequestListener onMultipleRequestListener = new OnMultipleRequestListener() {\n \t\t\tint fileNum = 0;\n \n \t\t\t@Override\n \t\t\tpublic void addCorrelationId(int correlationid) {\n \t\t\t\tsuper.addCorrelationId(correlationid);\n-\t\t\t\tif(deletionOperation){\n-\t\t\t\t\tfileNameMap.put(correlationid, ((DeleteFile) requests.get(fileNum++)).getSdlFileName());\n-\t\t\t\t}else{\n-\t\t\t\t\tfileNameMap.put(correlationid, ((PutFile) requests.get(fileNum++)).getSdlFileName());\n+\t\t\t\tif (deletionOperation) {\n+\t\t\t\t\trequestMap.put(correlationid, requests.get(fileNum++));\n+\t\t\t\t} else {\n+\t\t\t\t\trequestMap.put(correlationid, requests.get(fileNum++));\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n-\t\t\tpublic void onUpdate(int remainingRequests) {}\n+\t\t\tpublic void onUpdate(int remainingRequests) {\n+\t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onFinished() {\n-\t\t\t\tif(listener != null) {\n-\t\t\t\t\tif (errors.isEmpty()) {\n+\t\t\t\tif (errors.isEmpty() && requestsToResend.isEmpty()) {\n+\t\t\t\t\tif (listener != null) {\n \t\t\t\t\t\tlistener.onComplete(null);\n-\t\t\t\t\t} else {\n+\t\t\t\t\t}\n+\t\t\t\t} else if (deletionOperation) {\n+\t\t\t\t\tif (listener != null) {\n \t\t\t\t\t\tlistener.onComplete(errors);\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!requestsToResend.isEmpty()) {\n+\t\t\t\t\t\tsendMultipleFileOperations(requestsToResend, listener, errors);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (listener != null) {\n+\t\t\t\t\t\t\tlistener.onComplete(errors);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onError(int correlationId, Result resultCode, String info) {\n-\t\t\t\tif(fileNameMap != null && fileNameMap.get(correlationId) != null){\n-\t\t\t\t\terrors.put(fileNameMap.get(correlationId), buildErrorString(resultCode, info));\n-\t\t\t\t}// else no fileName for given correlation ID\n+\t\t\t\tif (requestMap != null && requestMap.get(correlationId) != null) {\n+\t\t\t\t\tif (!deletionOperation) {\n+\t\t\t\t\t\tif (shouldReuploadFile(((PutFile) requestMap.get(correlationId)).getSdlFileName(), ((PutFile) requestMap.get(correlationId)).getFileType())) {\n+\t\t\t\t\t\t\trequestMap.get(correlationId).setOnRPCResponseListener(null);\n+\t\t\t\t\t\t\trequestsToResend.add(requestMap.get(correlationId));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\terrors.put(((PutFile) requestMap.get(correlationId)).getSdlFileName(), buildErrorString(resultCode, info));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\terrors.put(((DeleteFile) requestMap.get(correlationId)).getSdlFileName(), buildErrorString(resultCode, info));\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n-\t\t\t\tPutFileResponse putFileResponse = (PutFileResponse) response;\n-\t\t\t\tif(putFileResponse.getSuccess()){\n-\t\t\t\t\tbytesAvailable = putFileResponse.getSpaceAvailable() != null ? putFileResponse.getSpaceAvailable() : SPACE_AVAILABLE_MAX_VALUE;\n+\t\t\t\tif (response.getSuccess()) {\n+\t\t\t\t\tif (response instanceof PutFileResponse) {\n+\t\t\t\t\t\tPutFileResponse putFileResponse = (PutFileResponse) response;\n+\t\t\t\t\t\tbytesAvailable = putFileResponse.getSpaceAvailable() != null ? putFileResponse.getSpaceAvailable() : SPACE_AVAILABLE_MAX_VALUE;\n+\n+\t\t\t\t\t\tif (requestMap.get(correlationId) != null) {\n+\t\t\t\t\t\t\tremoteFiles.add(((PutFile) requestMap.get(correlationId)).getSdlFileName());\n+\t\t\t\t\t\t\tuploadedEphemeralFileNames.add(((PutFile) requestMap.get(correlationId)).getSdlFileName());\n+\t\t\t\t\t\t}\n \n-\t\t\t\t\tif(fileNameMap.get(correlationId) != null){\n-\t\t\t\t\t\tif(deletionOperation){\n-\t\t\t\t\t\t\tremoteFiles.remove(fileNameMap.get(correlationId));\n-\t\t\t\t\t\t\tuploadedEphemeralFileNames.remove(fileNameMap.get(correlationId));\n-\t\t\t\t\t\t}else{\n-\t\t\t\t\t\t\tremoteFiles.add(fileNameMap.get(correlationId));\n-\t\t\t\t\t\t\tuploadedEphemeralFileNames.add(fileNameMap.get(correlationId));\n+\t\t\t\t\t} else if (response instanceof DeleteFileResponse) {\n+\t\t\t\t\t\tDeleteFileResponse deleteFileResponse = (DeleteFileResponse) response;\n+\t\t\t\t\t\tbytesAvailable = deleteFileResponse.getSpaceAvailable() != null ? deleteFileResponse.getSpaceAvailable() : SPACE_AVAILABLE_MAX_VALUE;\n+\n+\t\t\t\t\t\tif (requestMap.get(correlationId) != null) {\n+\t\t\t\t\t\t\tremoteFiles.remove(((DeleteFile) requestMap.get(correlationId)).getSdlFileName());\n+\t\t\t\t\t\t\tuploadedEphemeralFileNames.remove(((DeleteFile) requestMap.get(correlationId)).getSdlFileName());\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t});\n+\n+\t\t};\n+\t\tinternalInterface.sendRequests(requests, onMultipleRequestListener);\n \t}\n \n \t/**\n \t * Attempts to upload a SdlFile to core\n \t * @param file SdlFile with file name and one of A) fileData, B) Uri, or C) resourceID set\n \t * @param listener called when core responds to the attempt to upload the file\n \t */\n-\tpublic void uploadFile(@NonNull final SdlFile file, final CompletionListener listener){\n-\t\tif (file.isStaticIcon()){\n+\tpublic void uploadFile(@NonNull final SdlFile file, final CompletionListener listener) {\n+\t\tif (file.isStaticIcon()) {\n \t\t\tLog.w(TAG, \"Static icons don't need to be uploaded\");\n \t\t\tlistener.onComplete(true);\n \t\t\treturn;\n \t\t}\n \t\tPutFile putFile = createPutFile(file);\n-\n \t\tputFile.setOnRPCResponseListener(new OnRPCResponseListener() {\n \t\t\t@Override\n \t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n \t\t\t\tPutFileResponse putFileResponse = (PutFileResponse) response;\n-\t\t\t\tif(putFileResponse.getSuccess()){\n+\t\t\t\tif (putFileResponse.getSuccess()) {\n \t\t\t\t\tbytesAvailable = putFileResponse.getSpaceAvailable() != null ? putFileResponse.getSpaceAvailable() : SPACE_AVAILABLE_MAX_VALUE;\n-\n \t\t\t\t\tremoteFiles.add(file.getName());\n \t\t\t\t\tuploadedEphemeralFileNames.add(file.getName());\n \t\t\t\t}\n-\t\t\t\tif(listener != null){\n+\t\t\t\tif (listener != null) {\n \t\t\t\t\tlistener.onComplete(putFileResponse.getSuccess());\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onError(int correlationId, Result resultCode, String info) {\n \t\t\t\tsuper.onError(correlationId, resultCode, info);\n-\t\t\t\tif(listener != null){\n+\t\t\t\tif (shouldReuploadFile(file.getName(), file.getType())) {\n+\t\t\t\t\tuploadFile(file, listener);\n+\t\t\t\t} else if (listener != null) {\n \t\t\t\t\tlistener.onComplete(false);\n \t\t\t\t}\n \t\t\t}\n \t\t});\n-\n \t\tinternalInterface.sendRPC(putFile);\n \t}\n \n+\t/**\n+\t * Check to see if file can be re-uploaded\n+\t * @param fileName SdlFile with file name", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNTYzOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380325639", "body": "Android studio is showing a warning here about a potential NPE. If the value for `failedFileUploadsIndex.get(fileName)` is `null` then it cannot be compared to 0 for example.", "bodyText": "Android studio is showing a warning here about a potential NPE. If the value for failedFileUploadsIndex.get(fileName) is null then it cannot be compared to 0 for example.", "bodyHTML": "<p dir=\"auto\">Android studio is showing a warning here about a potential NPE. If the value for <code>failedFileUploadsIndex.get(fileName)</code> is <code>null</code> then it cannot be compared to 0 for example.</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T18:39:30Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -209,114 +229,166 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t/**\n \t * Sends list of provided requests (strictly PutFile or DeleteFile) asynchronously through internalInterface,\n \t * calls listener on conclusion of sending requests.\n+\t *\n \t * @param requests Non-empty list of PutFile or DeleteFile requests\n \t * @param listener MultipleFileCompletionListener that is called upon conclusion of sending requests\n \t */\n-\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener){\n-\t\tfinal Map<String, String> errors = new HashMap<>();\n-\t\tfinal HashMap<Integer,String> fileNameMap = new HashMap<>();\n+\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener, final Map<String, String> errors) {\n+\t\tfinal HashMap<Integer, RPCRequest> requestMap = new HashMap<>();\n+\t\tfinal List<RPCRequest> requestsToResend = new ArrayList<>();\n \t\tfinal boolean deletionOperation;\n-\t\tif(requests.get(0) instanceof PutFile){\n+\t\tif (requests.get(0) instanceof PutFile) {\n \t\t\tdeletionOperation = false;\n-\t\t}else if(requests.get(0) instanceof DeleteFile){\n+\t\t} else if (requests.get(0) instanceof DeleteFile) {\n \t\t\tdeletionOperation = true;\n-\t\t}else{\n-\t\t\treturn; // requests are not DeleteFile or PutFile\n+\t\t} else {\n+\t\t\treturn;\n \t\t}\n-\t\tinternalInterface.sendRequests(requests, new OnMultipleRequestListener() {\n+\n+\t\tOnMultipleRequestListener onMultipleRequestListener = new OnMultipleRequestListener() {\n \t\t\tint fileNum = 0;\n \n \t\t\t@Override\n \t\t\tpublic void addCorrelationId(int correlationid) {\n \t\t\t\tsuper.addCorrelationId(correlationid);\n-\t\t\t\tif(deletionOperation){\n-\t\t\t\t\tfileNameMap.put(correlationid, ((DeleteFile) requests.get(fileNum++)).getSdlFileName());\n-\t\t\t\t}else{\n-\t\t\t\t\tfileNameMap.put(correlationid, ((PutFile) requests.get(fileNum++)).getSdlFileName());\n+\t\t\t\tif (deletionOperation) {\n+\t\t\t\t\trequestMap.put(correlationid, requests.get(fileNum++));\n+\t\t\t\t} else {\n+\t\t\t\t\trequestMap.put(correlationid, requests.get(fileNum++));\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n-\t\t\tpublic void onUpdate(int remainingRequests) {}\n+\t\t\tpublic void onUpdate(int remainingRequests) {\n+\t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onFinished() {\n-\t\t\t\tif(listener != null) {\n-\t\t\t\t\tif (errors.isEmpty()) {\n+\t\t\t\tif (errors.isEmpty() && requestsToResend.isEmpty()) {\n+\t\t\t\t\tif (listener != null) {\n \t\t\t\t\t\tlistener.onComplete(null);\n-\t\t\t\t\t} else {\n+\t\t\t\t\t}\n+\t\t\t\t} else if (deletionOperation) {\n+\t\t\t\t\tif (listener != null) {\n \t\t\t\t\t\tlistener.onComplete(errors);\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!requestsToResend.isEmpty()) {\n+\t\t\t\t\t\tsendMultipleFileOperations(requestsToResend, listener, errors);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (listener != null) {\n+\t\t\t\t\t\t\tlistener.onComplete(errors);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onError(int correlationId, Result resultCode, String info) {\n-\t\t\t\tif(fileNameMap != null && fileNameMap.get(correlationId) != null){\n-\t\t\t\t\terrors.put(fileNameMap.get(correlationId), buildErrorString(resultCode, info));\n-\t\t\t\t}// else no fileName for given correlation ID\n+\t\t\t\tif (requestMap != null && requestMap.get(correlationId) != null) {\n+\t\t\t\t\tif (!deletionOperation) {\n+\t\t\t\t\t\tif (shouldReuploadFile(((PutFile) requestMap.get(correlationId)).getSdlFileName(), ((PutFile) requestMap.get(correlationId)).getFileType())) {\n+\t\t\t\t\t\t\trequestMap.get(correlationId).setOnRPCResponseListener(null);\n+\t\t\t\t\t\t\trequestsToResend.add(requestMap.get(correlationId));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\terrors.put(((PutFile) requestMap.get(correlationId)).getSdlFileName(), buildErrorString(resultCode, info));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\terrors.put(((DeleteFile) requestMap.get(correlationId)).getSdlFileName(), buildErrorString(resultCode, info));\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n-\t\t\t\tPutFileResponse putFileResponse = (PutFileResponse) response;\n-\t\t\t\tif(putFileResponse.getSuccess()){\n-\t\t\t\t\tbytesAvailable = putFileResponse.getSpaceAvailable() != null ? putFileResponse.getSpaceAvailable() : SPACE_AVAILABLE_MAX_VALUE;\n+\t\t\t\tif (response.getSuccess()) {\n+\t\t\t\t\tif (response instanceof PutFileResponse) {\n+\t\t\t\t\t\tPutFileResponse putFileResponse = (PutFileResponse) response;\n+\t\t\t\t\t\tbytesAvailable = putFileResponse.getSpaceAvailable() != null ? putFileResponse.getSpaceAvailable() : SPACE_AVAILABLE_MAX_VALUE;\n+\n+\t\t\t\t\t\tif (requestMap.get(correlationId) != null) {\n+\t\t\t\t\t\t\tremoteFiles.add(((PutFile) requestMap.get(correlationId)).getSdlFileName());\n+\t\t\t\t\t\t\tuploadedEphemeralFileNames.add(((PutFile) requestMap.get(correlationId)).getSdlFileName());\n+\t\t\t\t\t\t}\n \n-\t\t\t\t\tif(fileNameMap.get(correlationId) != null){\n-\t\t\t\t\t\tif(deletionOperation){\n-\t\t\t\t\t\t\tremoteFiles.remove(fileNameMap.get(correlationId));\n-\t\t\t\t\t\t\tuploadedEphemeralFileNames.remove(fileNameMap.get(correlationId));\n-\t\t\t\t\t\t}else{\n-\t\t\t\t\t\t\tremoteFiles.add(fileNameMap.get(correlationId));\n-\t\t\t\t\t\t\tuploadedEphemeralFileNames.add(fileNameMap.get(correlationId));\n+\t\t\t\t\t} else if (response instanceof DeleteFileResponse) {\n+\t\t\t\t\t\tDeleteFileResponse deleteFileResponse = (DeleteFileResponse) response;\n+\t\t\t\t\t\tbytesAvailable = deleteFileResponse.getSpaceAvailable() != null ? deleteFileResponse.getSpaceAvailable() : SPACE_AVAILABLE_MAX_VALUE;\n+\n+\t\t\t\t\t\tif (requestMap.get(correlationId) != null) {\n+\t\t\t\t\t\t\tremoteFiles.remove(((DeleteFile) requestMap.get(correlationId)).getSdlFileName());\n+\t\t\t\t\t\t\tuploadedEphemeralFileNames.remove(((DeleteFile) requestMap.get(correlationId)).getSdlFileName());\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t});\n+\n+\t\t};\n+\t\tinternalInterface.sendRequests(requests, onMultipleRequestListener);\n \t}\n \n \t/**\n \t * Attempts to upload a SdlFile to core\n \t * @param file SdlFile with file name and one of A) fileData, B) Uri, or C) resourceID set\n \t * @param listener called when core responds to the attempt to upload the file\n \t */\n-\tpublic void uploadFile(@NonNull final SdlFile file, final CompletionListener listener){\n-\t\tif (file.isStaticIcon()){\n+\tpublic void uploadFile(@NonNull final SdlFile file, final CompletionListener listener) {\n+\t\tif (file.isStaticIcon()) {\n \t\t\tLog.w(TAG, \"Static icons don't need to be uploaded\");\n \t\t\tlistener.onComplete(true);\n \t\t\treturn;\n \t\t}\n \t\tPutFile putFile = createPutFile(file);\n-\n \t\tputFile.setOnRPCResponseListener(new OnRPCResponseListener() {\n \t\t\t@Override\n \t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n \t\t\t\tPutFileResponse putFileResponse = (PutFileResponse) response;\n-\t\t\t\tif(putFileResponse.getSuccess()){\n+\t\t\t\tif (putFileResponse.getSuccess()) {\n \t\t\t\t\tbytesAvailable = putFileResponse.getSpaceAvailable() != null ? putFileResponse.getSpaceAvailable() : SPACE_AVAILABLE_MAX_VALUE;\n-\n \t\t\t\t\tremoteFiles.add(file.getName());\n \t\t\t\t\tuploadedEphemeralFileNames.add(file.getName());\n \t\t\t\t}\n-\t\t\t\tif(listener != null){\n+\t\t\t\tif (listener != null) {\n \t\t\t\t\tlistener.onComplete(putFileResponse.getSuccess());\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onError(int correlationId, Result resultCode, String info) {\n \t\t\t\tsuper.onError(correlationId, resultCode, info);\n-\t\t\t\tif(listener != null){\n+\t\t\t\tif (shouldReuploadFile(file.getName(), file.getType())) {\n+\t\t\t\t\tuploadFile(file, listener);\n+\t\t\t\t} else if (listener != null) {\n \t\t\t\t\tlistener.onComplete(false);\n \t\t\t\t}\n \t\t\t}\n \t\t});\n-\n \t\tinternalInterface.sendRPC(putFile);\n \t}\n \n+\t/**\n+\t * Check to see if file can be re-uploaded\n+\t * @param fileName SdlFile with file name\n+\t * @param fileType passes FileType\n+\t * @return true or false deepening on if file with given type and name can be re-uploaded\n+\t */\n+\tprivate boolean shouldReuploadFile(String fileName, FileType fileType) {\n+\t\tif (!failedFileUploadsIndex.containsKey(fileName)) {\n+\t\t\tif (fileType.equals(FileType.GRAPHIC_JPEG) ||\n+\t\t\t\t\tfileType.equals(FileType.GRAPHIC_BMP) ||\n+\t\t\t\t\tfileType.equals(FileType.GRAPHIC_PNG)) {\n+\t\t\t\tfailedFileUploadsIndex.put(fileName, fileManagerConfig.getArtworkRetryCount());\n+\t\t\t} else {\n+\t\t\t\tfailedFileUploadsIndex.put(fileName, fileManagerConfig.getFileRetryCount());\n+\t\t\t}\n+\t\t}\n+\t\tif (failedFileUploadsIndex.get(fileName) > 0) {", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNTk2OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380325968", "body": "There should be one space after `,`", "bodyText": "There should be one space after ,", "bodyHTML": "<p dir=\"auto\">There should be one space after <code>,</code></p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T18:40:40Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -330,7 +402,8 @@ public void uploadFiles(@NonNull List<? extends SdlFile> files, final MultipleFi\n \t\tfor(SdlFile file : files){\n \t\t\tputFileRequests.add(createPutFile(file));\n \t\t}\n-\t\tsendMultipleFileOperations(putFileRequests, listener);\n+\t\tfinal Map<String,String>  errors = new HashMap<>();", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNjQyMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380326421", "body": "the new param (`errors`) should be described in the javadoc", "bodyText": "the new param (errors) should be described in the javadoc", "bodyHTML": "<p dir=\"auto\">the new param (<code>errors</code>) should be described in the javadoc</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T18:42:14Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -209,114 +229,166 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t/**\n \t * Sends list of provided requests (strictly PutFile or DeleteFile) asynchronously through internalInterface,\n \t * calls listener on conclusion of sending requests.\n+\t *", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNzI0Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380327246", "body": "does it really matter here if it is delete operation or not? I see if and else do the same thing ", "bodyText": "does it really matter here if it is delete operation or not? I see if and else do the same thing", "bodyHTML": "<p dir=\"auto\">does it really matter here if it is delete operation or not? I see if and else do the same thing</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T18:45:03Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -209,114 +229,166 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t/**\n \t * Sends list of provided requests (strictly PutFile or DeleteFile) asynchronously through internalInterface,\n \t * calls listener on conclusion of sending requests.\n+\t *\n \t * @param requests Non-empty list of PutFile or DeleteFile requests\n \t * @param listener MultipleFileCompletionListener that is called upon conclusion of sending requests\n \t */\n-\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener){\n-\t\tfinal Map<String, String> errors = new HashMap<>();\n-\t\tfinal HashMap<Integer,String> fileNameMap = new HashMap<>();\n+\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener, final Map<String, String> errors) {\n+\t\tfinal HashMap<Integer, RPCRequest> requestMap = new HashMap<>();\n+\t\tfinal List<RPCRequest> requestsToResend = new ArrayList<>();\n \t\tfinal boolean deletionOperation;\n-\t\tif(requests.get(0) instanceof PutFile){\n+\t\tif (requests.get(0) instanceof PutFile) {\n \t\t\tdeletionOperation = false;\n-\t\t}else if(requests.get(0) instanceof DeleteFile){\n+\t\t} else if (requests.get(0) instanceof DeleteFile) {\n \t\t\tdeletionOperation = true;\n-\t\t}else{\n-\t\t\treturn; // requests are not DeleteFile or PutFile\n+\t\t} else {\n+\t\t\treturn;\n \t\t}\n-\t\tinternalInterface.sendRequests(requests, new OnMultipleRequestListener() {\n+\n+\t\tOnMultipleRequestListener onMultipleRequestListener = new OnMultipleRequestListener() {\n \t\t\tint fileNum = 0;\n \n \t\t\t@Override\n \t\t\tpublic void addCorrelationId(int correlationid) {\n \t\t\t\tsuper.addCorrelationId(correlationid);\n-\t\t\t\tif(deletionOperation){\n-\t\t\t\t\tfileNameMap.put(correlationid, ((DeleteFile) requests.get(fileNum++)).getSdlFileName());\n-\t\t\t\t}else{\n-\t\t\t\t\tfileNameMap.put(correlationid, ((PutFile) requests.get(fileNum++)).getSdlFileName());\n+\t\t\t\tif (deletionOperation) {", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzMTkxNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380331914", "body": "Because we are repeating `requestMap.get(correlationId)` a lot of times in this method, I think it makes it will be better  to get the request one time at the beginning of the `onError()` method and reuse use that `request` variable inside the method \r\n```\r\n@Override\r\npublic void onError(int correlationId, Result resultCode, String info) {\r\n\tfinal RPCRequest request = requestMap.get(correlationId);\r\n\tif (requestMap != null && request != null) {\r\n\t\t...\r\n\t}\r\n}\r\n```", "bodyText": "Because we are repeating requestMap.get(correlationId) a lot of times in this method, I think it makes it will be better  to get the request one time at the beginning of the onError() method and reuse use that request variable inside the method\n@Override\npublic void onError(int correlationId, Result resultCode, String info) {\n\tfinal RPCRequest request = requestMap.get(correlationId);\n\tif (requestMap != null && request != null) {\n\t\t...\n\t}\n}", "bodyHTML": "<p dir=\"auto\">Because we are repeating <code>requestMap.get(correlationId)</code> a lot of times in this method, I think it makes it will be better  to get the request one time at the beginning of the <code>onError()</code> method and reuse use that <code>request</code> variable inside the method</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Override\npublic void onError(int correlationId, Result resultCode, String info) {\n\tfinal RPCRequest request = requestMap.get(correlationId);\n\tif (requestMap != null &amp;&amp; request != null) {\n\t\t...\n\t}\n}\n\"><pre><code>@Override\npublic void onError(int correlationId, Result resultCode, String info) {\n\tfinal RPCRequest request = requestMap.get(correlationId);\n\tif (requestMap != null &amp;&amp; request != null) {\n\t\t...\n\t}\n}\n</code></pre></div>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T19:00:24Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -209,114 +229,166 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t/**\n \t * Sends list of provided requests (strictly PutFile or DeleteFile) asynchronously through internalInterface,\n \t * calls listener on conclusion of sending requests.\n+\t *\n \t * @param requests Non-empty list of PutFile or DeleteFile requests\n \t * @param listener MultipleFileCompletionListener that is called upon conclusion of sending requests\n \t */\n-\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener){\n-\t\tfinal Map<String, String> errors = new HashMap<>();\n-\t\tfinal HashMap<Integer,String> fileNameMap = new HashMap<>();\n+\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener, final Map<String, String> errors) {\n+\t\tfinal HashMap<Integer, RPCRequest> requestMap = new HashMap<>();\n+\t\tfinal List<RPCRequest> requestsToResend = new ArrayList<>();\n \t\tfinal boolean deletionOperation;\n-\t\tif(requests.get(0) instanceof PutFile){\n+\t\tif (requests.get(0) instanceof PutFile) {\n \t\t\tdeletionOperation = false;\n-\t\t}else if(requests.get(0) instanceof DeleteFile){\n+\t\t} else if (requests.get(0) instanceof DeleteFile) {\n \t\t\tdeletionOperation = true;\n-\t\t}else{\n-\t\t\treturn; // requests are not DeleteFile or PutFile\n+\t\t} else {\n+\t\t\treturn;\n \t\t}\n-\t\tinternalInterface.sendRequests(requests, new OnMultipleRequestListener() {\n+\n+\t\tOnMultipleRequestListener onMultipleRequestListener = new OnMultipleRequestListener() {\n \t\t\tint fileNum = 0;\n \n \t\t\t@Override\n \t\t\tpublic void addCorrelationId(int correlationid) {\n \t\t\t\tsuper.addCorrelationId(correlationid);\n-\t\t\t\tif(deletionOperation){\n-\t\t\t\t\tfileNameMap.put(correlationid, ((DeleteFile) requests.get(fileNum++)).getSdlFileName());\n-\t\t\t\t}else{\n-\t\t\t\t\tfileNameMap.put(correlationid, ((PutFile) requests.get(fileNum++)).getSdlFileName());\n+\t\t\t\tif (deletionOperation) {\n+\t\t\t\t\trequestMap.put(correlationid, requests.get(fileNum++));\n+\t\t\t\t} else {\n+\t\t\t\t\trequestMap.put(correlationid, requests.get(fileNum++));\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n-\t\t\tpublic void onUpdate(int remainingRequests) {}\n+\t\t\tpublic void onUpdate(int remainingRequests) {\n+\t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onFinished() {\n-\t\t\t\tif(listener != null) {\n-\t\t\t\t\tif (errors.isEmpty()) {\n+\t\t\t\tif (errors.isEmpty() && requestsToResend.isEmpty()) {\n+\t\t\t\t\tif (listener != null) {\n \t\t\t\t\t\tlistener.onComplete(null);\n-\t\t\t\t\t} else {\n+\t\t\t\t\t}\n+\t\t\t\t} else if (deletionOperation) {\n+\t\t\t\t\tif (listener != null) {\n \t\t\t\t\t\tlistener.onComplete(errors);\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!requestsToResend.isEmpty()) {\n+\t\t\t\t\t\tsendMultipleFileOperations(requestsToResend, listener, errors);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (listener != null) {\n+\t\t\t\t\t\t\tlistener.onComplete(errors);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onError(int correlationId, Result resultCode, String info) {", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1Mjc0Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r380352742", "body": "Would it be possible to simplify the logic a little bit here and separate the Delete And PutFile operations? maybe something like the following would be a bit simpler: \r\n\r\n```\r\n@Override\r\npublic void onFinished() {\r\n\tif (!deletionOperation) {\r\n\t\tif (!requestsToResend.isEmpty()) {\r\n\t\t\tsendMultipleFileOperations(requestsToResend, listener, errors);\r\n\t\t} else if (listener != null) {\r\n\t\t\tlistener.onComplete(errors.isEmpty() ? null : errors);\r\n\t\t}\r\n\t} else {\r\n\t\tif (listener != null) {\r\n\t\t\tlistener.onComplete(errors.isEmpty() ? null : errors);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nI did not test that code snippet though", "bodyText": "Would it be possible to simplify the logic a little bit here and separate the Delete And PutFile operations? maybe something like the following would be a bit simpler:\n@Override\npublic void onFinished() {\n\tif (!deletionOperation) {\n\t\tif (!requestsToResend.isEmpty()) {\n\t\t\tsendMultipleFileOperations(requestsToResend, listener, errors);\n\t\t} else if (listener != null) {\n\t\t\tlistener.onComplete(errors.isEmpty() ? null : errors);\n\t\t}\n\t} else {\n\t\tif (listener != null) {\n\t\t\tlistener.onComplete(errors.isEmpty() ? null : errors);\n\t\t}\n\t}\n}\n\nI did not test that code snippet though", "bodyHTML": "<p dir=\"auto\">Would it be possible to simplify the logic a little bit here and separate the Delete And PutFile operations? maybe something like the following would be a bit simpler:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Override\npublic void onFinished() {\n\tif (!deletionOperation) {\n\t\tif (!requestsToResend.isEmpty()) {\n\t\t\tsendMultipleFileOperations(requestsToResend, listener, errors);\n\t\t} else if (listener != null) {\n\t\t\tlistener.onComplete(errors.isEmpty() ? null : errors);\n\t\t}\n\t} else {\n\t\tif (listener != null) {\n\t\t\tlistener.onComplete(errors.isEmpty() ? null : errors);\n\t\t}\n\t}\n}\n\"><pre><code>@Override\npublic void onFinished() {\n\tif (!deletionOperation) {\n\t\tif (!requestsToResend.isEmpty()) {\n\t\t\tsendMultipleFileOperations(requestsToResend, listener, errors);\n\t\t} else if (listener != null) {\n\t\t\tlistener.onComplete(errors.isEmpty() ? null : errors);\n\t\t}\n\t} else {\n\t\tif (listener != null) {\n\t\t\tlistener.onComplete(errors.isEmpty() ? null : errors);\n\t\t}\n\t}\n}\n</code></pre></div>\n<p dir=\"auto\">I did not test that code snippet though</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-17T20:16:39Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -209,114 +229,166 @@ public void deleteRemoteFilesWithNames(@NonNull List<String> fileNames, final Mu\n \t/**\n \t * Sends list of provided requests (strictly PutFile or DeleteFile) asynchronously through internalInterface,\n \t * calls listener on conclusion of sending requests.\n+\t *\n \t * @param requests Non-empty list of PutFile or DeleteFile requests\n \t * @param listener MultipleFileCompletionListener that is called upon conclusion of sending requests\n \t */\n-\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener){\n-\t\tfinal Map<String, String> errors = new HashMap<>();\n-\t\tfinal HashMap<Integer,String> fileNameMap = new HashMap<>();\n+\tprivate void sendMultipleFileOperations(final List<? extends RPCRequest> requests, final MultipleFileCompletionListener listener, final Map<String, String> errors) {\n+\t\tfinal HashMap<Integer, RPCRequest> requestMap = new HashMap<>();\n+\t\tfinal List<RPCRequest> requestsToResend = new ArrayList<>();\n \t\tfinal boolean deletionOperation;\n-\t\tif(requests.get(0) instanceof PutFile){\n+\t\tif (requests.get(0) instanceof PutFile) {\n \t\t\tdeletionOperation = false;\n-\t\t}else if(requests.get(0) instanceof DeleteFile){\n+\t\t} else if (requests.get(0) instanceof DeleteFile) {\n \t\t\tdeletionOperation = true;\n-\t\t}else{\n-\t\t\treturn; // requests are not DeleteFile or PutFile\n+\t\t} else {\n+\t\t\treturn;\n \t\t}\n-\t\tinternalInterface.sendRequests(requests, new OnMultipleRequestListener() {\n+\n+\t\tOnMultipleRequestListener onMultipleRequestListener = new OnMultipleRequestListener() {\n \t\t\tint fileNum = 0;\n \n \t\t\t@Override\n \t\t\tpublic void addCorrelationId(int correlationid) {\n \t\t\t\tsuper.addCorrelationId(correlationid);\n-\t\t\t\tif(deletionOperation){\n-\t\t\t\t\tfileNameMap.put(correlationid, ((DeleteFile) requests.get(fileNum++)).getSdlFileName());\n-\t\t\t\t}else{\n-\t\t\t\t\tfileNameMap.put(correlationid, ((PutFile) requests.get(fileNum++)).getSdlFileName());\n+\t\t\t\tif (deletionOperation) {\n+\t\t\t\t\trequestMap.put(correlationid, requests.get(fileNum++));\n+\t\t\t\t} else {\n+\t\t\t\t\trequestMap.put(correlationid, requests.get(fileNum++));\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t@Override\n-\t\t\tpublic void onUpdate(int remainingRequests) {}\n+\t\t\tpublic void onUpdate(int remainingRequests) {\n+\t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onFinished() {", "originalCommit": "9285d45941bfcc54786dbcc501ef3b9992d6d593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d72d473b1769f75b88acbdc46b59b777f8d3a2f3", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/d72d473b1769f75b88acbdc46b59b777f8d3a2f3", "message": "Fixed FIleManager Javadocs for android and JavaSE", "committedDate": "2020-02-18T14:19:45Z", "type": "commit"}, {"oid": "c400cb5c55e4cd3f8012a9e3182b51beb7036c1d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/c400cb5c55e4cd3f8012a9e3182b51beb7036c1d", "message": "Changed failedFileUploadsIndex to a HashMap", "committedDate": "2020-02-18T14:22:31Z", "type": "commit"}, {"oid": "d9091e14dc2c68f5bcde166a4a82b91eecc5abac", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/d9091e14dc2c68f5bcde166a4a82b91eecc5abac", "message": "Fixed spacing for errors HashMap In baseFIleManager : deleteRemoteFilesWithNames", "committedDate": "2020-02-18T14:25:06Z", "type": "commit"}, {"oid": "91e718c63c0d533309f0fdff323f5857cc91bd73", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/91e718c63c0d533309f0fdff323f5857cc91bd73", "message": "Fixed Name of method and potential NPE", "committedDate": "2020-02-18T15:26:23Z", "type": "commit"}, {"oid": "10b067aacc8a02b396cf7b6fa22fd0bbef85004f", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/10b067aacc8a02b396cf7b6fa22fd0bbef85004f", "message": "Formatting", "committedDate": "2020-02-18T15:35:43Z", "type": "commit"}, {"oid": "6f69bc66d3b546701e0fcfbb8c68f5be617de9dc", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/6f69bc66d3b546701e0fcfbb8c68f5be617de9dc", "message": "Add param errors to JavaDocs for method sendMultipleFileOperations", "committedDate": "2020-02-18T15:38:39Z", "type": "commit"}, {"oid": "ca37f20174c46342148a28d8ab3478f128d885df", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ca37f20174c46342148a28d8ab3478f128d885df", "message": "Due to a change in logic that if statement was not necessary", "committedDate": "2020-02-18T15:43:55Z", "type": "commit"}, {"oid": "057b7b8ce2bb8ca6ca1b0b306d5f684411f159f3", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/057b7b8ce2bb8ca6ca1b0b306d5f684411f159f3", "message": "Minor change to logic of onError to be more efficient", "committedDate": "2020-02-18T16:19:01Z", "type": "commit"}, {"oid": "6e9aab816f22e8d038e68a9653cb7244a82b7797", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/6e9aab816f22e8d038e68a9653cb7244a82b7797", "message": "Simplified logic in onFinished", "committedDate": "2020-02-18T16:23:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNzg2Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1270#discussion_r382227862", "body": "This import is not used", "bodyText": "This import is not used", "bodyHTML": "<p dir=\"auto\">This import is not used</p>", "author": "bilal-alsharifi", "createdAt": "2020-02-20T20:02:28Z", "path": "base/src/main/java/com/smartdevicelink/managers/file/BaseFileManager.java", "diffHunk": "@@ -59,6 +60,7 @@\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.Hashtable;", "originalCommit": "6e9aab816f22e8d038e68a9653cb7244a82b7797", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0077a95e06c47b35d863e01bd933cfc182d306b4", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/0077a95e06c47b35d863e01bd933cfc182d306b4", "message": "Removed unused import", "committedDate": "2020-02-20T21:04:34Z", "type": "commit"}]}