{"pr_number": 6037, "pr_title": "Implement Emacs key bindings", "pr_author": "muachilin", "pr_createdAt": "2020-02-27T17:38:50Z", "pr_url": "https://github.com/JabRef/jabref/pull/6037", "timeline": [{"oid": "1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "url": "https://github.com/JabRef/jabref/commit/1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "message": "[feat] Implement Emacs key bindings\n\nEmacs style key bindings are re-added to JabRef through the preferences\nmenu. The supported key bindings have feature parity with the previous\nimplementation in JabRef v<4, and additionally support any class that\nextends TextInputControl. In practice, this means that the new\nimplementation supports both TextFields and TextAreas by default. Some\nfunctionality may still be missing\n\nCo-authored-by: Felix Luthman <34520175+felixlut@users.noreply.github.com>\nCo-authored-by: Tommy Samuelsson <Zodbigt@users.noreply.github.com>\nCo-authored-by: muachilin <32566798+muachilin@users.noreply.github.com>\nCo-authored-by: Kristoffer Gunnarsson <kristoffergunnarsson47@gmail.com>", "committedDate": "2020-02-27T17:30:02Z", "type": "commit"}, {"oid": "6f12069dc5483afb7e1b441280ca550fd5dd4a49", "url": "https://github.com/JabRef/jabref/commit/6f12069dc5483afb7e1b441280ca550fd5dd4a49", "message": "Merge branch 'master' into emacs", "committedDate": "2020-02-27T17:40:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MDczMw==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385270733", "body": "Either you use the lamdba with keyBindinding.ifPresent(keybinding->...) or you extract the keyBinding.get() to a variable in the first if and reuse that. Less code duplication.\r\nAnd second, you are comparing enum values, they can be compared with `==` no need for equals\r\nAnd here is an explanation why: https://stackoverflow.com/a/2937561", "bodyText": "Either you use the lamdba with keyBindinding.ifPresent(keybinding->...) or you extract the keyBinding.get() to a variable in the first if and reuse that. Less code duplication.\nAnd second, you are comparing enum values, they can be compared with == no need for equals\nAnd here is an explanation why: https://stackoverflow.com/a/2937561", "bodyHTML": "<p dir=\"auto\">Either you use the lamdba with keyBindinding.ifPresent(keybinding-&gt;...) or you extract the keyBinding.get() to a variable in the first if and reuse that. Less code duplication.<br>\nAnd second, you are comparing enum values, they can be compared with <code>==</code> no need for equals<br>\nAnd here is an explanation why: <a href=\"https://stackoverflow.com/a/2937561\" rel=\"nofollow\">https://stackoverflow.com/a/2937561</a></p>", "author": "Siedlerchr", "createdAt": "2020-02-27T17:48:47Z", "path": "src/main/java/org/jabref/gui/keyboard/EmacsKeyBindings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.jabref.gui.keyboard;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.input.KeyEvent;\n+\n+import org.jabref.Globals;\n+import org.jabref.logic.util.strings.EmacsStringManipulator;\n+import org.jabref.model.util.ResultingEmacsState;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+public class EmacsKeyBindings {\n+\n+    public static void executeEmacs(Scene scene, KeyEvent event) {\n+        boolean EmacsFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS);\n+        if (EmacsFlag && scene.focusOwnerProperty().get() instanceof TextInputControl) {\n+            boolean CAFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CA);\n+            boolean CFFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CF);\n+            boolean CNFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CN);\n+            boolean AUFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_AU);\n+\n+            KeyBindingRepository keyBindingRepository = Globals.getKeyPrefs();\n+            TextInputControl focusedTextField = (TextInputControl) scene.focusOwnerProperty().get();\n+            Optional<KeyBinding> keyBinding = keyBindingRepository.mapToKeyBinding(event);\n+            if (keyBinding.isPresent()) {", "originalCommit": "1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MTkyOA==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385271928", "body": "As you are using the `\\\\w` regex here multiple times it makes sense to compile it and use Pattern.compile(...) with a matcher then.", "bodyText": "As you are using the \\\\w regex here multiple times it makes sense to compile it and use Pattern.compile(...) with a matcher then.", "bodyHTML": "<p dir=\"auto\">As you are using the <code>\\\\w</code> regex here multiple times it makes sense to compile it and use Pattern.compile(...) with a matcher then.</p>", "author": "Siedlerchr", "createdAt": "2020-02-27T17:50:54Z", "path": "src/main/java/org/jabref/logic/util/strings/EmacsStringManipulator.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.jabref.logic.util.strings;\n+import org.jabref.model.util.ResultingEmacsState;\n+\n+public class EmacsStringManipulator {\n+    private enum LetterCase {\n+        UPPER,\n+        LOWER,\n+        CAPITALIZED\n+    }\n+\n+    private enum Direction {\n+        NEXT, PREVIOUS\n+    }\n+\n+    private static ResultingEmacsState setNextWordsCase(String text, int pos, LetterCase targetCase) {\n+        StringBuilder res = new StringBuilder();\n+\n+        boolean firstLetter = true;\n+        int i = pos;\n+        boolean firstLoop = true;\n+        StringBuilder newWordBuilder = new StringBuilder();\n+        for (; i < text.length(); i++) {\n+            // Swallow whitespace\n+            while (firstLoop && i < text.length() && !String.valueOf(text.charAt(i)).matches(\"\\\\w\")) {", "originalCommit": "1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MjYzNw==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385272637", "body": "Is there a good reason why you made all those methods static? \r\nStatic methods are usually hard to test", "bodyText": "Is there a good reason why you made all those methods static?\nStatic methods are usually hard to test", "bodyHTML": "<p dir=\"auto\">Is there a good reason why you made all those methods static?<br>\nStatic methods are usually hard to test</p>", "author": "Siedlerchr", "createdAt": "2020-02-27T17:52:13Z", "path": "src/main/java/org/jabref/logic/util/strings/EmacsStringManipulator.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.jabref.logic.util.strings;\n+import org.jabref.model.util.ResultingEmacsState;\n+\n+public class EmacsStringManipulator {\n+    private enum LetterCase {\n+        UPPER,\n+        LOWER,\n+        CAPITALIZED\n+    }\n+\n+    private enum Direction {\n+        NEXT, PREVIOUS\n+    }\n+\n+    private static ResultingEmacsState setNextWordsCase(String text, int pos, LetterCase targetCase) {\n+        StringBuilder res = new StringBuilder();\n+\n+        boolean firstLetter = true;\n+        int i = pos;\n+        boolean firstLoop = true;\n+        StringBuilder newWordBuilder = new StringBuilder();\n+        for (; i < text.length(); i++) {\n+            // Swallow whitespace\n+            while (firstLoop && i < text.length() && !String.valueOf(text.charAt(i)).matches(\"\\\\w\")) {\n+                newWordBuilder.append(text.charAt(i));\n+                i++;\n+            }\n+            if (i >= text.length()) {\n+                break;\n+            }\n+            if (firstLoop) {\n+                firstLoop = false;\n+            }\n+            char currentChar = text.charAt(i);\n+            if (String.valueOf(currentChar).matches(\"\\\\w\")) {\n+                switch (targetCase) {\n+                    case UPPER:\n+                        newWordBuilder.append(Character.toUpperCase(currentChar));\n+                        break;\n+                    case LOWER:\n+                        newWordBuilder.append(Character.toLowerCase(currentChar));\n+                        break;\n+                    case CAPITALIZED:\n+                        if (firstLetter) {\n+                            newWordBuilder.append(Character.toUpperCase(currentChar));\n+                            firstLetter = false;\n+                        } else {\n+                            newWordBuilder.append(Character.toLowerCase(currentChar));\n+                        }\n+                        break;\n+                }\n+            } else {\n+                // We have reached the word boundary.\n+                break;\n+            }\n+        }\n+        res.append(text, 0, pos);\n+        res.append(newWordBuilder);\n+        res.append(text, i, text.length());\n+\n+        return new ResultingEmacsState(i, res.toString());\n+    }\n+\n+    /**\n+     * Delete all characters in a string from the given position to the next word boundary.\n+     *\n+     * @param pos The index to start from.\n+     * @param text The text to manipulate.\n+     * @param dir The direction to search.\n+     * @return The resulting text.\n+     */\n+    public static ResultingEmacsState deleteUntilWordBoundary(int pos, String text, Direction dir) {\n+        StringBuilder res = new StringBuilder();\n+        int offset;\n+        int wordBreak;\n+        switch (dir) {\n+            case NEXT:\n+                res.append(text, 0, pos);\n+                offset = 1;\n+                wordBreak = text.length();\n+                break;\n+            case PREVIOUS:\n+                res.append(text, pos, text.length());\n+                offset = -1;\n+                wordBreak = 0;\n+                break;\n+            default:\n+                throw new AssertionError(\"Missing case in switch deleteUntilWordBoundary\");\n+        }\n+\n+        for (int i = pos; i < text.length() && i >= 0; i += offset) {\n+            if (i == pos) {\n+                // Swallow whitespace until we hit a word character or newline.\n+                while (i < text.length()\n+                        && i >= 0\n+                        && !String.valueOf(text.charAt(i)).matches(\"\\\\w|[\\\\r\\\\n]\")) {\n+                    i += offset;\n+                }\n+            }\n+            if (!(i < text.length() && i >= 0) || !String.valueOf(text.charAt(i)).matches(\"\\\\w\")) {\n+                wordBreak = i;\n+                break;\n+            }\n+        }\n+        int caretPosition;\n+        if (dir == Direction.NEXT) {\n+            res.append(text, wordBreak, text.length());\n+            // Since we deleted forward, we're in the right place already.\n+            caretPosition = pos;\n+\n+        } else {\n+            // Since we deleted backwards, we need to move the caret appropriately.\n+            // We need to protect against having stepped beyond the string during the while-loop.\n+            if (wordBreak != -1) {\n+                res.append(text, 0, wordBreak);\n+                caretPosition = wordBreak;\n+            } else {\n+                caretPosition = 0;\n+            }\n+        }\n+        return new ResultingEmacsState(caretPosition, res.toString());\n+    }\n+\n+    /**\n+     * Capitalize the next word on the right side of the cursor.\n+     *\n+     * @param pos the position of the cursor\n+     * @param text String to analyze\n+     * @return String the result text\n+     */\n+    public static ResultingEmacsState capitalize(int pos, String text) {", "originalCommit": "1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MzAwMQ==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385273001", "body": "Too many empty lines here. Checkstyle will complain. No more than one empty line", "bodyText": "Too many empty lines here. Checkstyle will complain. No more than one empty line", "bodyHTML": "<p dir=\"auto\">Too many empty lines here. Checkstyle will complain. No more than one empty line</p>", "author": "Siedlerchr", "createdAt": "2020-02-27T17:52:51Z", "path": "src/main/java/org/jabref/model/util/ResultingEmacsState.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.jabref.model.util;\n+\n+public class ResultingEmacsState {\n+    public final int caretPos;\n+    public final String text;\n+\n+", "originalCommit": "1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NDg4NQ==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385274885", "body": "As mentionend earlier, I see no reason why this methods are static", "bodyText": "As mentionend earlier, I see no reason why this methods are static", "bodyHTML": "<p dir=\"auto\">As mentionend earlier, I see no reason why this methods are static</p>", "author": "Siedlerchr", "createdAt": "2020-02-27T17:56:25Z", "path": "src/main/java/org/jabref/logic/util/strings/EmacsStringManipulator.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.jabref.logic.util.strings;\n+import org.jabref.model.util.ResultingEmacsState;\n+\n+public class EmacsStringManipulator {\n+    private enum LetterCase {\n+        UPPER,\n+        LOWER,\n+        CAPITALIZED\n+    }\n+\n+    private enum Direction {\n+        NEXT, PREVIOUS\n+    }\n+\n+    private static ResultingEmacsState setNextWordsCase(String text, int pos, LetterCase targetCase) {", "originalCommit": "1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "88c16b61e7baf5d40ea9163eec6677c02b71f6cc", "url": "https://github.com/JabRef/jabref/commit/88c16b61e7baf5d40ea9163eec6677c02b71f6cc", "message": "Rename localized strings and fix checkstyle error", "committedDate": "2020-02-27T20:01:25Z", "type": "commit"}, {"oid": "0c2f4b23fc9d42f3228923c330378e106da3462e", "url": "https://github.com/JabRef/jabref/commit/0c2f4b23fc9d42f3228923c330378e106da3462e", "message": "Merge branch 'emacs' of github.com:stevensdavid/jabref into emacs", "committedDate": "2020-02-27T20:02:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1Mzk5OQ==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385353999", "body": "Please add a space after `//`", "bodyText": "Please add a space after //", "bodyHTML": "<p dir=\"auto\">Please add a space after <code>//</code></p>", "author": "koppor", "createdAt": "2020-02-27T20:29:07Z", "path": "src/main/java/org/jabref/JabRefGUI.java", "diffHunk": "@@ -87,6 +89,12 @@ private void openWindow(Stage mainStage) {\n         root.getChildren().add(JabRefGUI.mainFrame);\n \n         Scene scene = new Scene(root, 800, 800);\n+\n+        //Handle Emacs key bindings", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NDE2MQ==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385354161", "body": "Please start all variables with lower case names. Also applies to CAFlag -- maybe rename it to `flagCA`.", "bodyText": "Please start all variables with lower case names. Also applies to CAFlag -- maybe rename it to flagCA.", "bodyHTML": "<p dir=\"auto\">Please start all variables with lower case names. Also applies to CAFlag -- maybe rename it to <code>flagCA</code>.</p>", "author": "koppor", "createdAt": "2020-02-27T20:29:31Z", "path": "src/main/java/org/jabref/gui/keyboard/EmacsKeyBindings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.jabref.gui.keyboard;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.input.KeyEvent;\n+\n+import org.jabref.Globals;\n+import org.jabref.logic.util.strings.EmacsStringManipulator;\n+import org.jabref.model.util.ResultingEmacsState;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+public class EmacsKeyBindings {\n+\n+    public static void executeEmacs(Scene scene, KeyEvent event) {\n+        boolean EmacsFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS);", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NjA0Mg==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385356042", "body": "What is the reason for asking for Alt+U? Is that a special JabRef functionality?\r\n\r\nThe reason for the Rebind check boxes is for users with mixed Emacs and Windows shortcuts. And I never remember me typing Alt+U as shortcut (but Ctrl+A for seledct-all very often - also Ctrl+F for \"Find\")", "bodyText": "What is the reason for asking for Alt+U? Is that a special JabRef functionality?\nThe reason for the Rebind check boxes is for users with mixed Emacs and Windows shortcuts. And I never remember me typing Alt+U as shortcut (but Ctrl+A for seledct-all very often - also Ctrl+F for \"Find\")", "bodyHTML": "<p dir=\"auto\">What is the reason for asking for Alt+U? Is that a special JabRef functionality?</p>\n<p dir=\"auto\">The reason for the Rebind check boxes is for users with mixed Emacs and Windows shortcuts. And I never remember me typing Alt+U as shortcut (but Ctrl+A for seledct-all very often - also Ctrl+F for \"Find\")</p>", "author": "koppor", "createdAt": "2020-02-27T20:33:34Z", "path": "src/main/java/org/jabref/gui/keyboard/EmacsKeyBindings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.jabref.gui.keyboard;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.input.KeyEvent;\n+\n+import org.jabref.Globals;\n+import org.jabref.logic.util.strings.EmacsStringManipulator;\n+import org.jabref.model.util.ResultingEmacsState;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+public class EmacsKeyBindings {\n+\n+    public static void executeEmacs(Scene scene, KeyEvent event) {\n+        boolean EmacsFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS);\n+        if (EmacsFlag && scene.focusOwnerProperty().get() instanceof TextInputControl) {\n+            boolean CAFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CA);\n+            boolean CFFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CF);\n+            boolean CNFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CN);\n+            boolean AUFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_AU);", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NjU3Nw==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385356577", "body": "Please do\r\n\r\n`} else  if ...`\r\n\r\n", "bodyText": "Please do\n} else  if ...", "bodyHTML": "<p dir=\"auto\">Please do</p>\n<p dir=\"auto\"><code>} else  if ...</code></p>", "author": "koppor", "createdAt": "2020-02-27T20:34:49Z", "path": "src/main/java/org/jabref/gui/keyboard/EmacsKeyBindings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.jabref.gui.keyboard;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.input.KeyEvent;\n+\n+import org.jabref.Globals;\n+import org.jabref.logic.util.strings.EmacsStringManipulator;\n+import org.jabref.model.util.ResultingEmacsState;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+public class EmacsKeyBindings {\n+\n+    public static void executeEmacs(Scene scene, KeyEvent event) {\n+        boolean EmacsFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS);\n+        if (EmacsFlag && scene.focusOwnerProperty().get() instanceof TextInputControl) {\n+            boolean CAFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CA);\n+            boolean CFFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CF);\n+            boolean CNFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CN);\n+            boolean AUFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_AU);\n+\n+            KeyBindingRepository keyBindingRepository = Globals.getKeyPrefs();\n+            TextInputControl focusedTextField = (TextInputControl) scene.focusOwnerProperty().get();\n+            Optional<KeyBinding> keyBinding = keyBindingRepository.mapToKeyBinding(event);\n+            if (keyBinding.isPresent()) {\n+                if (keyBinding.get().equals(KeyBinding.EMACS_DELETE)) {\n+                    focusedTextField.deletePreviousChar();\n+                    event.consume();\n+                } else if (keyBinding.get().equals(KeyBinding.EMACS_BACKWARD)) {\n+                    focusedTextField.backward();\n+                    event.consume();\n+                } else if (CFFlag && keyBinding.get().equals(KeyBinding.EMACS_FORWARD)) {\n+                    focusedTextField.forward();\n+                    event.consume();\n+                } else if (CAFlag && keyBinding.get().equals(KeyBinding.EMACS_BEGINNING)) {\n+                    focusedTextField.home();\n+                    event.consume();\n+                } else if (keyBinding.get().equals(KeyBinding.EMACS_END)) {\n+                    focusedTextField.end();\n+                    event.consume();\n+                } else if (keyBinding.get().equals(KeyBinding.EMACS_BEGINNING_DOC)) {\n+                    focusedTextField.home();\n+                    event.consume();\n+                } else if (keyBinding.get().equals(KeyBinding.EMACS_END_DOC)) {\n+                    focusedTextField.end();\n+                    event.consume();\n+                } else if (keyBinding.get().equals(KeyBinding.EMACS_UP)) {\n+                    focusedTextField.home();\n+                    event.consume();\n+                } else if (CNFlag && keyBinding.get().equals(KeyBinding.EMACS_DOWN)) {\n+                    focusedTextField.end();\n+                    event.consume();\n+                } else if (keyBinding.get().equals(KeyBinding.EMACS_CAPITALIZE)) {\n+                    int pos = focusedTextField.getCaretPosition();\n+                    String text = focusedTextField.getText(0, focusedTextField.getText().length());\n+                    ResultingEmacsState res = EmacsStringManipulator.capitalize(pos, text);\n+                    focusedTextField.setText(res.text);\n+                    focusedTextField.positionCaret(res.caretPos);\n+                    event.consume();\n+                }\n+                else if (keyBinding.get().equals(KeyBinding.EMACS_LOWERCASE)) {", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NzEzNQ==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385357135", "body": "```suggestion\r\n    EMACS_KILLLINE(\"Emacs remove all characters caret to end of line\", Localization.lang(\"Remove line after caret\"), \"ctrl+K\", KeyBindingCategory.EDIT),\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EMACS_KILLLINE(\"Emacs remove line\", Localization.lang(\"Remove line after caret\"), \"ctrl+K\", KeyBindingCategory.EDIT),\n          \n          \n            \n                EMACS_KILLLINE(\"Emacs remove all characters caret to end of line\", Localization.lang(\"Remove line after caret\"), \"ctrl+K\", KeyBindingCategory.EDIT),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c1\">EMACS_KILLLINE</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Emacs remove line<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Localization</span><span class=\"pl-k\">.</span>lang(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Remove line after caret<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctrl+K<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">KeyBindingCategory</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EDIT</span>),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c1\">EMACS_KILLLINE</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Emacs remove <span class=\"x x-first x-last\">all characters caret to end of </span>line<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Localization</span><span class=\"pl-k\">.</span>lang(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Remove line after caret<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctrl+K<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">KeyBindingCategory</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EDIT</span>),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "koppor", "createdAt": "2020-02-27T20:36:14Z", "path": "src/main/java/org/jabref/gui/keyboard/KeyBinding.java", "diffHunk": "@@ -3,6 +3,21 @@\n import org.jabref.logic.l10n.Localization;\n \n public enum KeyBinding {\n+    EMACS_DELETE(\"Emacs delete\", Localization.lang(\"Delete text\"), \"ctrl+D\", KeyBindingCategory.EDIT),\n+    EMACS_BACKWARD(\"Emacs move caret left\", Localization.lang(\"Move caret left\"), \"ctrl+B\", KeyBindingCategory.EDIT),\n+    EMACS_FORWARD(\"Emacs move caret right\", Localization.lang(\"Move caret right\"), \"ctrl+F\", KeyBindingCategory.EDIT),\n+    EMACS_BEGINNING(\"Emacs move caret to beginning of line\", Localization.lang(\"Move caret to beginning of line\"), \"ctrl+A\", KeyBindingCategory.EDIT),\n+    EMACS_END(\"Emacs move caret to  of line\", Localization.lang(\"Move caret to end of line\"), \"ctrl+E\", KeyBindingCategory.EDIT),\n+    EMACS_BEGINNING_DOC(\"Emacs move caret to beginning of text\", Localization.lang(\"Move the caret to the beginning of text\"), \"alt+LESS\", KeyBindingCategory.EDIT),\n+    EMACS_END_DOC(\"Emacs move caret to end of text\", Localization.lang(\"Move the caret to the end of text\"), \"alt+shift+LESS\", KeyBindingCategory.EDIT),\n+    EMACS_UP(\"Emacs move caret up\", Localization.lang(\"Move the caret up\"), \"ctrl+P\", KeyBindingCategory.EDIT),\n+    EMACS_DOWN(\"Emacs move caret down\", Localization.lang(\"Move the caret down\"), \"ctrl+N\", KeyBindingCategory.EDIT),\n+    EMACS_CAPITALIZE(\"Emacs capitalize word\", Localization.lang(\"Capitalize current word\"), \"alt+C\", KeyBindingCategory.EDIT),\n+    EMACS_LOWERCASE(\"Emacs lowercase word\", Localization.lang(\"Make current word lowercase\"), \"alt+L\", KeyBindingCategory.EDIT),\n+    EMACS_UPPERCASE(\"Emacs uppercase word\", Localization.lang(\"Make current word uppercase\"), \"alt+U\", KeyBindingCategory.EDIT),\n+    EMACS_KILLLINE(\"Emacs remove line\", Localization.lang(\"Remove line after caret\"), \"ctrl+K\", KeyBindingCategory.EDIT),", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5NDU4Mg==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385794582", "bodyText": "I would prefer as the constant name to separate the words by an underscore: EMACS_KILL_LINE because:\na) Java Naming Conventions ( https://www.oracle.com/technetwork/java/codeconventions-135099.html )\nb) Three L after each other hurts my eyes. \ud83d\ude04", "author": "calixtus", "createdAt": "2020-02-28T16:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NzEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1Nzc0Ng==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385357746", "body": "```suggestion\r\n    EMACS_KILLWORD(\"Emacs remove characters until next word\", Localization.lang(\"Remove characters until next word\"), \"alt+D\", KeyBindingCategory.EDIT),\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EMACS_KILLWORD(\"Emacs remove word forwards\", Localization.lang(\"Remove current word forwards\"), \"alt+D\", KeyBindingCategory.EDIT),\n          \n          \n            \n                EMACS_KILLWORD(\"Emacs remove characters until next word\", Localization.lang(\"Remove characters until next word\"), \"alt+D\", KeyBindingCategory.EDIT),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c1\">EMACS_KILLWORD</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Emacs remove <span class=\"x x-first x-last\">word forwards</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Localization</span><span class=\"pl-k\">.</span>lang(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Remove <span class=\"x x-first x-last\">current word forwards</span><span class=\"pl-pds\">\"</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>alt+D<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">KeyBindingCategory</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EDIT</span>),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c1\">EMACS_KILLWORD</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Emacs remove <span class=\"x x-first x-last\">characters until next word</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Localization</span><span class=\"pl-k\">.</span>lang(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Remove <span class=\"x x-first x-last\">characters until next word</span><span class=\"pl-pds\">\"</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>alt+D<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">KeyBindingCategory</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EDIT</span>),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "koppor", "createdAt": "2020-02-27T20:37:41Z", "path": "src/main/java/org/jabref/gui/keyboard/KeyBinding.java", "diffHunk": "@@ -3,6 +3,21 @@\n import org.jabref.logic.l10n.Localization;\n \n public enum KeyBinding {\n+    EMACS_DELETE(\"Emacs delete\", Localization.lang(\"Delete text\"), \"ctrl+D\", KeyBindingCategory.EDIT),\n+    EMACS_BACKWARD(\"Emacs move caret left\", Localization.lang(\"Move caret left\"), \"ctrl+B\", KeyBindingCategory.EDIT),\n+    EMACS_FORWARD(\"Emacs move caret right\", Localization.lang(\"Move caret right\"), \"ctrl+F\", KeyBindingCategory.EDIT),\n+    EMACS_BEGINNING(\"Emacs move caret to beginning of line\", Localization.lang(\"Move caret to beginning of line\"), \"ctrl+A\", KeyBindingCategory.EDIT),\n+    EMACS_END(\"Emacs move caret to  of line\", Localization.lang(\"Move caret to end of line\"), \"ctrl+E\", KeyBindingCategory.EDIT),\n+    EMACS_BEGINNING_DOC(\"Emacs move caret to beginning of text\", Localization.lang(\"Move the caret to the beginning of text\"), \"alt+LESS\", KeyBindingCategory.EDIT),\n+    EMACS_END_DOC(\"Emacs move caret to end of text\", Localization.lang(\"Move the caret to the end of text\"), \"alt+shift+LESS\", KeyBindingCategory.EDIT),\n+    EMACS_UP(\"Emacs move caret up\", Localization.lang(\"Move the caret up\"), \"ctrl+P\", KeyBindingCategory.EDIT),\n+    EMACS_DOWN(\"Emacs move caret down\", Localization.lang(\"Move the caret down\"), \"ctrl+N\", KeyBindingCategory.EDIT),\n+    EMACS_CAPITALIZE(\"Emacs capitalize word\", Localization.lang(\"Capitalize current word\"), \"alt+C\", KeyBindingCategory.EDIT),\n+    EMACS_LOWERCASE(\"Emacs lowercase word\", Localization.lang(\"Make current word lowercase\"), \"alt+L\", KeyBindingCategory.EDIT),\n+    EMACS_UPPERCASE(\"Emacs uppercase word\", Localization.lang(\"Make current word uppercase\"), \"alt+U\", KeyBindingCategory.EDIT),\n+    EMACS_KILLLINE(\"Emacs remove line\", Localization.lang(\"Remove line after caret\"), \"ctrl+K\", KeyBindingCategory.EDIT),\n+    EMACS_KILLWORD(\"Emacs remove word forwards\", Localization.lang(\"Remove current word forwards\"), \"alt+D\", KeyBindingCategory.EDIT),", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1ODAyMA==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385358020", "body": "```suggestion\r\n    EMACS_BACKWARDKILLWORD(\"Emacs remove characters until previous word\", Localization.lang(\"Remove characters until previous word\"), \"alt+DELETE\", KeyBindingCategory.EDIT),\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EMACS_BACKWARDKILLWORD(\"Emacs remove word backwards\", Localization.lang(\"Remove the current word backwards\"), \"alt+DELETE\", KeyBindingCategory.EDIT),\n          \n          \n            \n                EMACS_BACKWARDKILLWORD(\"Emacs remove characters until previous word\", Localization.lang(\"Remove characters until previous word\"), \"alt+DELETE\", KeyBindingCategory.EDIT),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c1\">EMACS_BACKWARDKILLWORD</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Emacs remove <span class=\"x x-first x-last\">word backwards</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Localization</span><span class=\"pl-k\">.</span>lang(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Remove <span class=\"x x-first x-last\">the current word backwards</span><span class=\"pl-pds\">\"</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>alt+DELETE<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">KeyBindingCategory</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EDIT</span>),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c1\">EMACS_BACKWARDKILLWORD</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Emacs remove <span class=\"x x-first x-last\">characters until previous word</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">Localization</span><span class=\"pl-k\">.</span>lang(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Remove <span class=\"x x-first x-last\">characters until previous word</span><span class=\"pl-pds\">\"</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>alt+DELETE<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">KeyBindingCategory</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EDIT</span>),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "koppor", "createdAt": "2020-02-27T20:38:16Z", "path": "src/main/java/org/jabref/gui/keyboard/KeyBinding.java", "diffHunk": "@@ -3,6 +3,21 @@\n import org.jabref.logic.l10n.Localization;\n \n public enum KeyBinding {\n+    EMACS_DELETE(\"Emacs delete\", Localization.lang(\"Delete text\"), \"ctrl+D\", KeyBindingCategory.EDIT),\n+    EMACS_BACKWARD(\"Emacs move caret left\", Localization.lang(\"Move caret left\"), \"ctrl+B\", KeyBindingCategory.EDIT),\n+    EMACS_FORWARD(\"Emacs move caret right\", Localization.lang(\"Move caret right\"), \"ctrl+F\", KeyBindingCategory.EDIT),\n+    EMACS_BEGINNING(\"Emacs move caret to beginning of line\", Localization.lang(\"Move caret to beginning of line\"), \"ctrl+A\", KeyBindingCategory.EDIT),\n+    EMACS_END(\"Emacs move caret to  of line\", Localization.lang(\"Move caret to end of line\"), \"ctrl+E\", KeyBindingCategory.EDIT),\n+    EMACS_BEGINNING_DOC(\"Emacs move caret to beginning of text\", Localization.lang(\"Move the caret to the beginning of text\"), \"alt+LESS\", KeyBindingCategory.EDIT),\n+    EMACS_END_DOC(\"Emacs move caret to end of text\", Localization.lang(\"Move the caret to the end of text\"), \"alt+shift+LESS\", KeyBindingCategory.EDIT),\n+    EMACS_UP(\"Emacs move caret up\", Localization.lang(\"Move the caret up\"), \"ctrl+P\", KeyBindingCategory.EDIT),\n+    EMACS_DOWN(\"Emacs move caret down\", Localization.lang(\"Move the caret down\"), \"ctrl+N\", KeyBindingCategory.EDIT),\n+    EMACS_CAPITALIZE(\"Emacs capitalize word\", Localization.lang(\"Capitalize current word\"), \"alt+C\", KeyBindingCategory.EDIT),\n+    EMACS_LOWERCASE(\"Emacs lowercase word\", Localization.lang(\"Make current word lowercase\"), \"alt+L\", KeyBindingCategory.EDIT),\n+    EMACS_UPPERCASE(\"Emacs uppercase word\", Localization.lang(\"Make current word uppercase\"), \"alt+U\", KeyBindingCategory.EDIT),\n+    EMACS_KILLLINE(\"Emacs remove line\", Localization.lang(\"Remove line after caret\"), \"ctrl+K\", KeyBindingCategory.EDIT),\n+    EMACS_KILLWORD(\"Emacs remove word forwards\", Localization.lang(\"Remove current word forwards\"), \"alt+D\", KeyBindingCategory.EDIT),\n+    EMACS_BACKWARDKILLWORD(\"Emacs remove word backwards\", Localization.lang(\"Remove the current word backwards\"), \"alt+DELETE\", KeyBindingCategory.EDIT),", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1OTEyNA==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385359124", "body": "You can just set `firstLoop` to `false` here", "bodyText": "You can just set firstLoop to false here", "bodyHTML": "<p dir=\"auto\">You can just set <code>firstLoop</code> to <code>false</code> here</p>", "author": "koppor", "createdAt": "2020-02-27T20:40:50Z", "path": "src/main/java/org/jabref/logic/util/strings/EmacsStringManipulator.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.jabref.logic.util.strings;\n+import org.jabref.model.util.ResultingEmacsState;\n+\n+public class EmacsStringManipulator {\n+    private enum LetterCase {\n+        UPPER,\n+        LOWER,\n+        CAPITALIZED\n+    }\n+\n+    private enum Direction {\n+        NEXT, PREVIOUS\n+    }\n+\n+    private static ResultingEmacsState setNextWordsCase(String text, int pos, LetterCase targetCase) {\n+        StringBuilder res = new StringBuilder();\n+\n+        boolean firstLetter = true;\n+        int i = pos;\n+        boolean firstLoop = true;\n+        StringBuilder newWordBuilder = new StringBuilder();\n+        for (; i < text.length(); i++) {\n+            // Swallow whitespace\n+            while (firstLoop && i < text.length() && !String.valueOf(text.charAt(i)).matches(\"\\\\w\")) {\n+                newWordBuilder.append(text.charAt(i));\n+                i++;\n+            }\n+            if (i >= text.length()) {\n+                break;\n+            }\n+            if (firstLoop) {", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2MTM3MA==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385361370", "body": "I searched the code for `LOCALE` for `toUpperCase`, because of https://haacked.com/archive/2012/07/05/turkish-i-problem-and-why-you-should-care.aspx/. I know that JabRef isn't doing it quite right.\r\n\r\nCould you please rewrite your code to\r\n\r\n1. Extract the string where the case needs to be changed\r\n2. Use `org.jabref.logic.bst.BibtexCaseChanger#changeCase`.\r\n\r\nReason: code-reuse and we are in a BibTeX setting which needs special treatment.", "bodyText": "I searched the code for LOCALE for toUpperCase, because of https://haacked.com/archive/2012/07/05/turkish-i-problem-and-why-you-should-care.aspx/. I know that JabRef isn't doing it quite right.\nCould you please rewrite your code to\n\nExtract the string where the case needs to be changed\nUse org.jabref.logic.bst.BibtexCaseChanger#changeCase.\n\nReason: code-reuse and we are in a BibTeX setting which needs special treatment.", "bodyHTML": "<p dir=\"auto\">I searched the code for <code>LOCALE</code> for <code>toUpperCase</code>, because of <a href=\"https://haacked.com/archive/2012/07/05/turkish-i-problem-and-why-you-should-care.aspx/\" rel=\"nofollow\">https://haacked.com/archive/2012/07/05/turkish-i-problem-and-why-you-should-care.aspx/</a>. I know that JabRef isn't doing it quite right.</p>\n<p dir=\"auto\">Could you please rewrite your code to</p>\n<ol dir=\"auto\">\n<li>Extract the string where the case needs to be changed</li>\n<li>Use <code>org.jabref.logic.bst.BibtexCaseChanger#changeCase</code>.</li>\n</ol>\n<p dir=\"auto\">Reason: code-reuse and we are in a BibTeX setting which needs special treatment.</p>", "author": "koppor", "createdAt": "2020-02-27T20:45:41Z", "path": "src/main/java/org/jabref/logic/util/strings/EmacsStringManipulator.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.jabref.logic.util.strings;\n+import org.jabref.model.util.ResultingEmacsState;\n+\n+public class EmacsStringManipulator {\n+    private enum LetterCase {\n+        UPPER,\n+        LOWER,\n+        CAPITALIZED\n+    }\n+\n+    private enum Direction {\n+        NEXT, PREVIOUS\n+    }\n+\n+    private static ResultingEmacsState setNextWordsCase(String text, int pos, LetterCase targetCase) {\n+        StringBuilder res = new StringBuilder();\n+\n+        boolean firstLetter = true;\n+        int i = pos;\n+        boolean firstLoop = true;\n+        StringBuilder newWordBuilder = new StringBuilder();\n+        for (; i < text.length(); i++) {\n+            // Swallow whitespace\n+            while (firstLoop && i < text.length() && !String.valueOf(text.charAt(i)).matches(\"\\\\w\")) {\n+                newWordBuilder.append(text.charAt(i));\n+                i++;\n+            }\n+            if (i >= text.length()) {\n+                break;\n+            }\n+            if (firstLoop) {\n+                firstLoop = false;\n+            }\n+            char currentChar = text.charAt(i);\n+            if (String.valueOf(currentChar).matches(\"\\\\w\")) {\n+                switch (targetCase) {\n+                    case UPPER:\n+                        newWordBuilder.append(Character.toUpperCase(currentChar));", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1OTY3OQ==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r510459679", "bodyText": "JavaDoc in BibtexCaseChanger says:\n// the following would have to be done if the functionality of CaseChangers would be included here\n// However, we decided against it and will probably do the other way round: https://github.com/JabRef/jabref/pull/215#issuecomment-146981624\n\nSo I understand that BibtexCaseChangers are somewhat deprecated... Therefor I will use CaseChangeFormatters (also because the BibtexCaseChanger does not support simple capitalization :-o \ud83d\ude09", "author": "calixtus", "createdAt": "2020-10-22T21:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2MTM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2MTY3OA==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385361678", "body": "I think, this is obsolete and `org.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE` can be used. See below for a longer explanation.", "bodyText": "I think, this is obsolete and org.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE can be used. See below for a longer explanation.", "bodyHTML": "<p dir=\"auto\">I think, this is obsolete and <code>org.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE</code> can be used. See below for a longer explanation.</p>", "author": "koppor", "createdAt": "2020-02-27T20:46:20Z", "path": "src/main/java/org/jabref/logic/util/strings/EmacsStringManipulator.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.jabref.logic.util.strings;\n+import org.jabref.model.util.ResultingEmacsState;\n+\n+public class EmacsStringManipulator {\n+    private enum LetterCase {", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NzQzMQ==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385367431", "body": "Please add a new category `KeyBindingCategory.EMACS`. Otherwise, it will confuse users, because the keybindings in the normal menu make the impression that they are always enabled (which they are not)\r\n\r\n![grafik](https://user-images.githubusercontent.com/1366654/75486124-43810f80-59ac-11ea-9859-864af3374779.png)\r\n", "bodyText": "Please add a new category KeyBindingCategory.EMACS. Otherwise, it will confuse users, because the keybindings in the normal menu make the impression that they are always enabled (which they are not)", "bodyHTML": "<p dir=\"auto\">Please add a new category <code>KeyBindingCategory.EMACS</code>. Otherwise, it will confuse users, because the keybindings in the normal menu make the impression that they are always enabled (which they are not)</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1366654/75486124-43810f80-59ac-11ea-9859-864af3374779.png\"><img src=\"https://user-images.githubusercontent.com/1366654/75486124-43810f80-59ac-11ea-9859-864af3374779.png\" alt=\"grafik\" style=\"max-width: 100%;\"></a></p>", "author": "koppor", "createdAt": "2020-02-27T20:58:21Z", "path": "src/main/java/org/jabref/gui/keyboard/KeyBinding.java", "diffHunk": "@@ -3,6 +3,21 @@\n import org.jabref.logic.l10n.Localization;\n \n public enum KeyBinding {\n+    EMACS_DELETE(\"Emacs delete\", Localization.lang(\"Delete text\"), \"ctrl+D\", KeyBindingCategory.EDIT),", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2MTkwOQ==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r385561909", "body": "Can `event.consume()` be extracted below the if construct?", "bodyText": "Can event.consume() be extracted below the if construct?", "bodyHTML": "<p dir=\"auto\">Can <code>event.consume()</code> be extracted below the if construct?</p>", "author": "calixtus", "createdAt": "2020-02-28T08:23:20Z", "path": "src/main/java/org/jabref/gui/keyboard/EmacsKeyBindings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.jabref.gui.keyboard;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.input.KeyEvent;\n+\n+import org.jabref.Globals;\n+import org.jabref.logic.util.strings.EmacsStringManipulator;\n+import org.jabref.model.util.ResultingEmacsState;\n+import org.jabref.preferences.JabRefPreferences;\n+\n+public class EmacsKeyBindings {\n+\n+    public static void executeEmacs(Scene scene, KeyEvent event) {\n+        boolean EmacsFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS);\n+        if (EmacsFlag && scene.focusOwnerProperty().get() instanceof TextInputControl) {\n+            boolean CAFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CA);\n+            boolean CFFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CF);\n+            boolean CNFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_CN);\n+            boolean AUFlag = Globals.prefs.getBoolean(JabRefPreferences.EDITOR_EMACS_KEYBINDINGS_REBIND_AU);\n+\n+            KeyBindingRepository keyBindingRepository = Globals.getKeyPrefs();\n+            TextInputControl focusedTextField = (TextInputControl) scene.focusOwnerProperty().get();\n+            Optional<KeyBinding> keyBinding = keyBindingRepository.mapToKeyBinding(event);\n+            if (keyBinding.isPresent()) {\n+                if (keyBinding.get().equals(KeyBinding.EMACS_DELETE)) {\n+                    focusedTextField.deletePreviousChar();\n+                    event.consume();", "originalCommit": "0c2f4b23fc9d42f3228923c330378e106da3462e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6b7ce3284db98df2f116040711d8b13203b2e511", "url": "https://github.com/JabRef/jabref/commit/6b7ce3284db98df2f116040711d8b13203b2e511", "message": "Merge conflicts solved", "committedDate": "2020-10-20T22:33:37Z", "type": "commit"}, {"oid": "aad47bf1429b2ca274504bd79c3fe1c227b78dce", "url": "https://github.com/JabRef/jabref/commit/aad47bf1429b2ca274504bd79c3fe1c227b78dce", "message": "Integrated some suggestions", "committedDate": "2020-10-20T23:13:23Z", "type": "commit"}, {"oid": "5b9498c1ad8349d34f804cb23be652fcb0749502", "url": "https://github.com/JabRef/jabref/commit/5b9498c1ad8349d34f804cb23be652fcb0749502", "message": "Introduced KeyBindingCategory Emacs", "committedDate": "2020-10-21T18:59:29Z", "type": "commit"}, {"oid": "1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "url": "https://github.com/JabRef/jabref/commit/1d68c6e161b27c982ebcc2e4a346eb8b383ac071", "message": "[feat] Implement Emacs key bindings\n\nEmacs style key bindings are re-added to JabRef through the preferences\nmenu. The supported key bindings have feature parity with the previous\nimplementation in JabRef v<4, and additionally support any class that\nextends TextInputControl. In practice, this means that the new\nimplementation supports both TextFields and TextAreas by default. Some\nfunctionality may still be missing\n\nCo-authored-by: Felix Luthman <34520175+felixlut@users.noreply.github.com>\nCo-authored-by: Tommy Samuelsson <Zodbigt@users.noreply.github.com>\nCo-authored-by: muachilin <32566798+muachilin@users.noreply.github.com>\nCo-authored-by: Kristoffer Gunnarsson <kristoffergunnarsson47@gmail.com>", "committedDate": "2020-02-27T17:30:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2MTUxMg==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r509961512", "body": "I thought about this again, and still think it would make sense to add these keybindings as normal keybindings, setting them to \"normal\" defaults: e.g. `WORD_FORWARD` to `Ctrl + right`, others like `CAPITALIZE` to empty. Then people can customize to whatever they want, e.g. emacs or vi or ... \r\nThis would also hugely simplify the code as these keybindings would be treated as normal bindings.", "bodyText": "I thought about this again, and still think it would make sense to add these keybindings as normal keybindings, setting them to \"normal\" defaults: e.g. WORD_FORWARD to Ctrl + right, others like CAPITALIZE to empty. Then people can customize to whatever they want, e.g. emacs or vi or ...\nThis would also hugely simplify the code as these keybindings would be treated as normal bindings.", "bodyHTML": "<p dir=\"auto\">I thought about this again, and still think it would make sense to add these keybindings as normal keybindings, setting them to \"normal\" defaults: e.g. <code>WORD_FORWARD</code> to <code>Ctrl + right</code>, others like <code>CAPITALIZE</code> to empty. Then people can customize to whatever they want, e.g. emacs or vi or ...<br>\nThis would also hugely simplify the code as these keybindings would be treated as normal bindings.</p>", "author": "tobiasdiez", "createdAt": "2020-10-22T08:07:56Z", "path": "src/main/java/org/jabref/gui/keyboard/KeyBinding.java", "diffHunk": "@@ -3,6 +3,23 @@\n import org.jabref.logic.l10n.Localization;\n \n public enum KeyBinding {\n+    EMACS_DELETE(\"Emacs delete\", Localization.lang(\"Delete text\"), \"ctrl+D\", KeyBindingCategory.EMACS),\n+    EMACS_BACKWARD(\"Emacs move caret left\", Localization.lang(\"Move caret left\"), \"ctrl+B\", KeyBindingCategory.EMACS),\n+    EMACS_FORWARD(\"Emacs move caret right\", Localization.lang(\"Move caret right\"), \"ctrl+F\", KeyBindingCategory.EMACS),\n+    EMACS_WORD_BACKWARD(\"Emacs move caret to previous word\", Localization.lang(\"Move caret to previous word\"), \"alt+B\", KeyBindingCategory.EMACS),\n+    EMACS_WORD_FORWARD(\"Emacs move caret to next word\", Localization.lang(\"Move caret to next word\"), \"alt+B\", KeyBindingCategory.EMACS),\n+    EMACS_BEGINNING(\"Emacs move caret to beginning of line\", Localization.lang(\"Move caret to beginning of line\"), \"ctrl+A\", KeyBindingCategory.EMACS),", "originalCommit": "5b9498c1ad8349d34f804cb23be652fcb0749502", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3NTgzOA==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r509975838", "bodyText": "Yes, I started working myself slowly through all the comments. I think I agree with you, a generic keybinding solution really does make sense.", "author": "calixtus", "createdAt": "2020-10-22T08:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2MTUxMg=="}], "type": "inlineReview"}, {"oid": "b3fbfe951da8fe1d6c791c68d8622712a2e14c7f", "url": "https://github.com/JabRef/jabref/commit/b3fbfe951da8fe1d6c791c68d8622712a2e14c7f", "message": "Integrated some more remarks", "committedDate": "2020-10-22T16:55:40Z", "type": "commit"}, {"oid": "f0468b23986044525251938be58ce63e557fc60b", "url": "https://github.com/JabRef/jabref/commit/f0468b23986044525251938be58ce63e557fc60b", "message": "Integrated again some more remarks", "committedDate": "2020-10-22T22:51:03Z", "type": "commit"}, {"oid": "4b0a3eb98cfb4d76f9a41f32ba471ce688360aa7", "url": "https://github.com/JabRef/jabref/commit/4b0a3eb98cfb4d76f9a41f32ba471ce688360aa7", "message": "Removed some artifacts", "committedDate": "2020-10-22T22:57:29Z", "type": "commit"}, {"oid": "cdfb2e414a0668b3e4018dff96f15ecfd6364cc2", "url": "https://github.com/JabRef/jabref/commit/cdfb2e414a0668b3e4018dff96f15ecfd6364cc2", "message": "Merge remote-tracking branch 'upstream/master' into emacs", "committedDate": "2020-11-02T21:45:25Z", "type": "commit"}, {"oid": "df1889e893354d78afdc553c9dc031698d658f8b", "url": "https://github.com/JabRef/jabref/commit/df1889e893354d78afdc553c9dc031698d658f8b", "message": "First attempt to fix backwardKillWord", "committedDate": "2020-11-04T20:33:14Z", "type": "commit"}, {"oid": "bf20143d479a483d87b24ed3ded333e5e43d33c9", "url": "https://github.com/JabRef/jabref/commit/bf20143d479a483d87b24ed3ded333e5e43d33c9", "message": "Fixed all StringManipulatorTests", "committedDate": "2020-11-04T21:19:49Z", "type": "commit"}, {"oid": "83a384837dc0b311fe263c550419ac0c9b486814", "url": "https://github.com/JabRef/jabref/commit/83a384837dc0b311fe263c550419ac0c9b486814", "message": "Added ParameterizedTests", "committedDate": "2020-11-04T21:36:19Z", "type": "commit"}, {"oid": "09338561e5a54ee241f4526881f9a02fbd7322be", "url": "https://github.com/JabRef/jabref/commit/09338561e5a54ee241f4526881f9a02fbd7322be", "message": "Refactor setWordCase", "committedDate": "2020-11-04T22:52:16Z", "type": "commit"}, {"oid": "ffcaeb6ceb48d772137b1263a53e8542a71f0984", "url": "https://github.com/JabRef/jabref/commit/ffcaeb6ceb48d772137b1263a53e8542a71f0984", "message": "Removed artifacts and made cleanups", "committedDate": "2020-11-05T15:01:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyMDE0Mw==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r518120143", "body": "In all other cases you use ==.\r\nWhy not refactor to a switch case?", "bodyText": "In all other cases you use ==.\nWhy not refactor to a switch case?", "bodyHTML": "<p dir=\"auto\">In all other cases you use ==.<br>\nWhy not refactor to a switch case?</p>", "author": "Siedlerchr", "createdAt": "2020-11-05T15:04:49Z", "path": "src/main/java/org/jabref/gui/keyboard/EditorKeyBindings.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.jabref.gui.keyboard;\n+\n+import java.util.Optional;\n+\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.input.KeyEvent;\n+\n+import org.jabref.gui.Globals;\n+import org.jabref.logic.util.strings.StringManipulator;\n+import org.jabref.model.util.ResultingStringState;\n+import org.jabref.preferences.PreferencesService;\n+\n+public class EditorKeyBindings {\n+\n+    public static void call(Scene scene, KeyEvent event, PreferencesService preferencesService) {\n+        if (scene.focusOwnerProperty().get() instanceof TextInputControl) {\n+\n+            KeyBindingRepository keyBindingRepository = Globals.getKeyPrefs();\n+            TextInputControl focusedTextField = (TextInputControl) scene.focusOwnerProperty().get();\n+            Optional<KeyBinding> keyBinding = keyBindingRepository.mapToKeyBinding(event);\n+            keyBinding.ifPresent(binding -> {\n+                if (binding.equals(KeyBinding.EDITOR_DELETE)) {", "originalCommit": "ffcaeb6ceb48d772137b1263a53e8542a71f0984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEzNzU1Mg==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r518137552", "bodyText": "I did not yet work on that, had some trouble refactoring and fixing the logic part of this PR which had some defects. But thanks for the note. Next i going to take a look into getting this to work with CodeAreaa and then include a button to fill in presets (like bash keybindings).", "author": "calixtus", "createdAt": "2020-11-05T15:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyMDE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1Mjc0NA==", "url": "https://github.com/JabRef/jabref/pull/6037#discussion_r518152744", "bodyText": "Good luck, for codeArea you might want to check out this_ https://github.com/FXMisc/RichTextFX/wiki/How-to-Override-the-Default-Behavior", "author": "Siedlerchr", "createdAt": "2020-11-05T15:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyMDE0Mw=="}], "type": "inlineReview"}, {"oid": "eb6fc8ce2766721fccb28aba4e6301c75fe34648", "url": "https://github.com/JabRef/jabref/commit/eb6fc8ce2766721fccb28aba4e6301c75fe34648", "message": "Added CodeAreaKeyBindings", "committedDate": "2020-11-05T19:27:09Z", "type": "commit"}, {"oid": "a9384e02be6dbf86c314205b63ac28f42482d9b6", "url": "https://github.com/JabRef/jabref/commit/a9384e02be6dbf86c314205b63ac28f42482d9b6", "message": "Added KeyBindingPreset", "committedDate": "2020-11-05T21:38:53Z", "type": "commit"}, {"oid": "0d3a9d091f4763620d76d21642efb7c76aa884f3", "url": "https://github.com/JabRef/jabref/commit/0d3a9d091f4763620d76d21642efb7c76aa884f3", "message": "Changed preset combobox to menubutton", "committedDate": "2020-11-06T14:05:18Z", "type": "commit"}, {"oid": "0c59a82f35fec85408ac85450424e7ef42d8e7b1", "url": "https://github.com/JabRef/jabref/commit/0c59a82f35fec85408ac85450424e7ef42d8e7b1", "message": "l10n and CHANGELOG.md", "committedDate": "2020-11-06T19:33:50Z", "type": "commit"}]}