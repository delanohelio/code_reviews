{"pr_number": 7036, "pr_title": "Added error msg when isbn entry was not found", "pr_author": "tmrd993", "pr_createdAt": "2020-10-22T13:01:49Z", "pr_url": "https://github.com/JabRef/jabref/pull/7036", "merge_commit": "590e2c3727ea3d6b6b872875c77ee0d16ae2b154", "timeline": [{"oid": "f31a2d3abb14697427438e6b25944fd842884efd", "url": "https://github.com/JabRef/jabref/commit/f31a2d3abb14697427438e6b25944fd842884efd", "message": "add error msg when isbn entry not found", "committedDate": "2020-10-22T12:56:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MTA4NA==", "url": "https://github.com/JabRef/jabref/pull/7036#discussion_r510261084", "body": "```suggestion\r\n            LOGGER.error(\"ISBN { } not found at ottobib\", identifier);\r\n```\r\nThis is the recommended way", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.error(\"ISBN \" + identifier + \" not found at ottobib\");\n          \n          \n            \n                        LOGGER.error(\"ISBN { } not found at ottobib\", identifier);\n          \n      \n    \n    \n  \n\nThis is the recommended way", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ISBN <span class=\"pl-pds x x-first\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> identifier </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x x-last\"> </span>not found at ottobib<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ISBN <span class=\"x x-first x-last\">{ } </span>not found at ottobib<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\">, identifier</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">This is the recommended way</p>", "author": "Siedlerchr", "createdAt": "2020-10-22T15:36:28Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java", "diffHunk": "@@ -58,6 +58,13 @@ public URL getUrlForIdentifier(String identifier) throws URISyntaxException, Mal\n             throw new FetcherException(\"Could not \", e);\n         }\n         Element textArea = html.select(\"textarea\").first();\n+\n+        // inspect the \"no results\" error message (if there is one)\n+        Element potentialErrorMessageDiv = html.select(\"div#flash-notice.notice.add-bottom\").first();\n+        if (potentialErrorMessageDiv.hasText() && potentialErrorMessageDiv.text().contains(\"No Results\")) {\n+            LOGGER.error(\"ISBN \" + identifier + \" not found at ottobib\");", "originalCommit": "f31a2d3abb14697427438e6b25944fd842884efd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06ff6968d94eea78f6f406be657effe103c275b1", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java\nindex a44de470cb..30e6f8513f 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java\n", "chunk": "@@ -60,9 +60,9 @@ public class IsbnViaOttoBibFetcher extends AbstractIsbnFetcher {\n         Element textArea = html.select(\"textarea\").first();\n \n         // inspect the \"no results\" error message (if there is one)\n-        Element potentialErrorMessageDiv = html.select(\"div#flash-notice.notice.add-bottom\").first();\n-        if (potentialErrorMessageDiv.hasText() && potentialErrorMessageDiv.text().contains(\"No Results\")) {\n-            LOGGER.error(\"ISBN \" + identifier + \" not found at ottobib\");\n+        Optional<Element> potentialErrorMessageDiv = Optional.ofNullable((html.select(\"div#flash-notice.notice.add-bottom\").first()));\n+        if (potentialErrorMessageDiv.isPresent() && potentialErrorMessageDiv.get().text().contains(\"No Results\")) {\n+            LOGGER.error(\"ISBN {} not found at ottobib\", identifier);\n         }\n \n         Optional<BibEntry> entry = Optional.empty();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "590e2c3727ea3d6b6b872875c77ee0d16ae2b154", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java\nindex a44de470cb..30e6f8513f 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java\n", "chunk": "@@ -60,9 +60,9 @@ public class IsbnViaOttoBibFetcher extends AbstractIsbnFetcher {\n         Element textArea = html.select(\"textarea\").first();\n \n         // inspect the \"no results\" error message (if there is one)\n-        Element potentialErrorMessageDiv = html.select(\"div#flash-notice.notice.add-bottom\").first();\n-        if (potentialErrorMessageDiv.hasText() && potentialErrorMessageDiv.text().contains(\"No Results\")) {\n-            LOGGER.error(\"ISBN \" + identifier + \" not found at ottobib\");\n+        Optional<Element> potentialErrorMessageDiv = Optional.ofNullable((html.select(\"div#flash-notice.notice.add-bottom\").first()));\n+        if (potentialErrorMessageDiv.isPresent() && potentialErrorMessageDiv.get().text().contains(\"No Results\")) {\n+            LOGGER.error(\"ISBN {} not found at ottobib\", identifier);\n         }\n \n         Optional<BibEntry> entry = Optional.empty();\n", "next_change": {"commit": "51a1569bde2e2bd547463c157594888757b50b5d", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java\ndeleted file mode 100644\nindex 30e6f8513f..0000000000\n--- a/src/main/java/org/jabref/logic/importer/fetcher/IsbnViaOttoBibFetcher.java\n+++ /dev/null\n", "chunk": "@@ -1,77 +0,0 @@\n-package org.jabref.logic.importer.fetcher;\n-\n-import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n-import java.util.Optional;\n-\n-import org.jabref.logic.importer.FetcherException;\n-import org.jabref.logic.importer.ImportFormatPreferences;\n-import org.jabref.logic.importer.ParseException;\n-import org.jabref.logic.importer.fileformat.BibtexParser;\n-import org.jabref.logic.net.URLDownload;\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.strings.StringUtil;\n-import org.jabref.model.util.DummyFileUpdateMonitor;\n-\n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n-\n-/**\n- * Fetcher for ISBN using https://www.ottobib.com\n- */\n-public class IsbnViaOttoBibFetcher extends AbstractIsbnFetcher {\n-\n-    private static final String BASE_URL = \"https://www.ottobib.com/isbn/\";\n-\n-    public IsbnViaOttoBibFetcher(ImportFormatPreferences importFormatPreferences) {\n-        super(importFormatPreferences);\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return \"ISBN (OttoBib)\";\n-    }\n-\n-    /**\n-     * @return null, because the identifier is passed using form data. This method is not used.\n-     */\n-    @Override\n-    public URL getUrlForIdentifier(String identifier) throws URISyntaxException, MalformedURLException, FetcherException {\n-        return null;\n-    }\n-\n-    @Override\n-    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n-        if (StringUtil.isBlank(identifier)) {\n-            return Optional.empty();\n-        }\n-\n-        this.ensureThatIsbnIsValid(identifier);\n-\n-        Document html;\n-        try {\n-            html = Jsoup.connect(BASE_URL + identifier + \"/bibtex\").userAgent(URLDownload.USER_AGENT).get();\n-        } catch (IOException e) {\n-            throw new FetcherException(\"Could not \", e);\n-        }\n-        Element textArea = html.select(\"textarea\").first();\n-\n-        // inspect the \"no results\" error message (if there is one)\n-        Optional<Element> potentialErrorMessageDiv = Optional.ofNullable((html.select(\"div#flash-notice.notice.add-bottom\").first()));\n-        if (potentialErrorMessageDiv.isPresent() && potentialErrorMessageDiv.get().text().contains(\"No Results\")) {\n-            LOGGER.error(\"ISBN {} not found at ottobib\", identifier);\n-        }\n-\n-        Optional<BibEntry> entry = Optional.empty();\n-        try {\n-            entry = BibtexParser.singleFromString(textArea.text(), importFormatPreferences, new DummyFileUpdateMonitor());\n-        } catch (ParseException e) {\n-            throw new FetcherException(\"An internal parser error occurred\", e);\n-        }\n-        entry.ifPresent(bibEntry -> doPostCleanup(bibEntry));\n-        return entry;\n-    }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "590e2c3727ea3d6b6b872875c77ee0d16ae2b154", "message": "Merge commit", "committedDate": null}, {"oid": "51a1569bde2e2bd547463c157594888757b50b5d", "committedDate": "2022-04-20 23:53:23 +0200", "message": "Introduce OpenLibraryFetcher (and remove OttoBibFetcher) (#8700)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTM1NQ==", "url": "https://github.com/JabRef/jabref/pull/7036#discussion_r510265355", "body": "This is not the right place. You cannot put GUI code into logic/model classes.\r\nSee https://devdocs.jabref.org/getting-into-the-code/high-level-documentation\r\n\r\nThe right place to check if the results are empty would be here: Than you have it generic as well for all kind of fetchers\r\nhttps://github.com/JabRef/jabref/blob/7f4c36c03629498db8e56281906241a82846e1e3/src/main/java/org/jabref/gui/EntryTypeViewModel.java#L147", "bodyText": "This is not the right place. You cannot put GUI code into logic/model classes.\nSee https://devdocs.jabref.org/getting-into-the-code/high-level-documentation\nThe right place to check if the results are empty would be here: Than you have it generic as well for all kind of fetchers\n\n  \n    \n      jabref/src/main/java/org/jabref/gui/EntryTypeViewModel.java\n    \n    \n         Line 147\n      in\n      7f4c36c\n    \n    \n    \n    \n\n        \n          \n           Optional<BibEntry> result = fetcherWorker.getValue();", "bodyHTML": "<p dir=\"auto\">This is not the right place. You cannot put GUI code into logic/model classes.<br>\nSee <a href=\"https://devdocs.jabref.org/getting-into-the-code/high-level-documentation\" rel=\"nofollow\">https://devdocs.jabref.org/getting-into-the-code/high-level-documentation</a></p>\n<p dir=\"auto\">The right place to check if the results are empty would be here: Than you have it generic as well for all kind of fetchers<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/JabRef/jabref/blob/7f4c36c03629498db8e56281906241a82846e1e3/src/main/java/org/jabref/gui/EntryTypeViewModel.java#L147\">jabref/src/main/java/org/jabref/gui/EntryTypeViewModel.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 147\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/JabRef/jabref/commit/7f4c36c03629498db8e56281906241a82846e1e3\">7f4c36c</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L147\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"147\"></td>\n          <td id=\"LC147\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">BibEntry</span>&gt;</span> result <span class=\"pl-k\">=</span> fetcherWorker<span class=\"pl-k\">.</span>getValue(); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "Siedlerchr", "createdAt": "2020-10-22T15:42:14Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java", "diffHunk": "@@ -59,6 +62,13 @@ public String getName() {\n             bibEntry = isbnViaOttoBibFetcher.performSearchById(identifier);\n         }\n \n+        // nothing found at ebook.de and ottobib\n+        if (!bibEntry.isPresent()) {\n+            FXDialog noEntryFoundDialog = new FXDialog(AlertType.ERROR);", "originalCommit": "f31a2d3abb14697427438e6b25944fd842884efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMwMjk0OQ==", "url": "https://github.com/JabRef/jabref/pull/7036#discussion_r510302949", "bodyText": "oops, my mistake. I'll fix it later today. I have another question about the ottobib fetcher though, should getting no results throw an exception? Ottobib seems like a special case since supplying an ISBN that leads to no entry doesn't give a 404 but instead leads to a special page with an error message.", "author": "tmrd993", "createdAt": "2020-10-22T16:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxMDIzMA==", "url": "https://github.com/JabRef/jabref/pull/7036#discussion_r510310230", "bodyText": "I thought about throwing a fetcher exception as well. But on the other hand we have optional for those cases.\nSo I would not throw an exception.\n@tobiasdiez", "author": "Siedlerchr", "createdAt": "2020-10-22T16:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxMzgyOA==", "url": "https://github.com/JabRef/jabref/pull/7036#discussion_r510313828", "bodyText": "Thanks for your work so far.\nExceptions are only for exceptional program states. An unkown ISBN is a possible case in Ottobib. Thats probably why Ottobib does not show 404, but a page saying: unkown ISBN.\nSee: https://github.com/HugoMatilla/Effective-JAVA-Summary#57-use-exceptions-only-for-exceptional-conditions", "author": "calixtus", "createdAt": "2020-10-22T16:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "06ff6968d94eea78f6f406be657effe103c275b1", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\nindex 43a9300238..626ae6a1ed 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n", "chunk": "@@ -62,13 +59,6 @@ public class IsbnFetcher implements EntryBasedFetcher, IdBasedFetcher {\n             bibEntry = isbnViaOttoBibFetcher.performSearchById(identifier);\n         }\n \n-        // nothing found at ebook.de and ottobib\n-        if (!bibEntry.isPresent()) {\n-            FXDialog noEntryFoundDialog = new FXDialog(AlertType.ERROR);\n-            noEntryFoundDialog.setContentText(\"No entry found for ISBN: \" + identifier + \".\");\n-            noEntryFoundDialog.show();\n-        }\n-\n         return bibEntry;\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "590e2c3727ea3d6b6b872875c77ee0d16ae2b154", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\nindex 43a9300238..626ae6a1ed 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n", "chunk": "@@ -62,13 +59,6 @@ public class IsbnFetcher implements EntryBasedFetcher, IdBasedFetcher {\n             bibEntry = isbnViaOttoBibFetcher.performSearchById(identifier);\n         }\n \n-        // nothing found at ebook.de and ottobib\n-        if (!bibEntry.isPresent()) {\n-            FXDialog noEntryFoundDialog = new FXDialog(AlertType.ERROR);\n-            noEntryFoundDialog.setContentText(\"No entry found for ISBN: \" + identifier + \".\");\n-            noEntryFoundDialog.show();\n-        }\n-\n         return bibEntry;\n     }\n \n", "next_change": {"commit": "51a1569bde2e2bd547463c157594888757b50b5d", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\nindex 626ae6a1ed..c97184bd36 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n", "chunk": "@@ -49,14 +49,14 @@ public class IsbnFetcher implements EntryBasedFetcher, IdBasedFetcher {\n         // remove any newlines and spaces.\n         identifier = NEWLINE_SPACE_PATTERN.matcher(identifier).replaceAll(\"\");\n \n-        IsbnViaEbookDeFetcher isbnViaEbookDeFetcher = new IsbnViaEbookDeFetcher(importFormatPreferences);\n-        Optional<BibEntry> bibEntry = isbnViaEbookDeFetcher.performSearchById(identifier);\n+        OpenLibraryFetcher openLibraryFetcher = new OpenLibraryFetcher(importFormatPreferences);\n+        Optional<BibEntry> bibEntry = openLibraryFetcher.performSearchById(identifier);\n \n-        // nothing found at ebook.de: try ottobib\n+        // nothing found at OpenLibrary: try ebook.de\n         if (!bibEntry.isPresent()) {\n-            LOGGER.debug(\"No entry found at ebook.de; trying ottobib\");\n-            IsbnViaOttoBibFetcher isbnViaOttoBibFetcher = new IsbnViaOttoBibFetcher(importFormatPreferences);\n-            bibEntry = isbnViaOttoBibFetcher.performSearchById(identifier);\n+            LOGGER.debug(\"No entry found at OpenLibrary; trying ebook.de\");\n+            IsbnViaEbookDeFetcher isbnViaEbookDeFetcher = new IsbnViaEbookDeFetcher(importFormatPreferences);\n+            bibEntry = isbnViaEbookDeFetcher.performSearchById(identifier);\n         }\n \n         return bibEntry;\n", "next_change": {"commit": "16de272317ee0f50b4abd5efcd84c56e9621bb76", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\nindex c97184bd36..f4dedae3e7 100644\n--- a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n+++ b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n", "chunk": "@@ -50,13 +50,19 @@ public class IsbnFetcher implements EntryBasedFetcher, IdBasedFetcher {\n         identifier = NEWLINE_SPACE_PATTERN.matcher(identifier).replaceAll(\"\");\n \n         OpenLibraryFetcher openLibraryFetcher = new OpenLibraryFetcher(importFormatPreferences);\n-        Optional<BibEntry> bibEntry = openLibraryFetcher.performSearchById(identifier);\n \n-        // nothing found at OpenLibrary: try ebook.de\n-        if (!bibEntry.isPresent()) {\n-            LOGGER.debug(\"No entry found at OpenLibrary; trying ebook.de\");\n-            IsbnViaEbookDeFetcher isbnViaEbookDeFetcher = new IsbnViaEbookDeFetcher(importFormatPreferences);\n-            bibEntry = isbnViaEbookDeFetcher.performSearchById(identifier);\n+        Optional<BibEntry> bibEntry = Optional.empty();\n+        try {\n+            bibEntry = openLibraryFetcher.performSearchById(identifier);\n+        } catch (FetcherException ex) {\n+            LOGGER.debug(\"Got a fetcher exception for IBSN search\", ex);\n+        } finally {\n+            // nothing found at OpenLibrary: try ebook.de\n+            if (!bibEntry.isPresent()) {\n+                LOGGER.debug(\"No entry found at OpenLibrary; trying ebook.de\");\n+                IsbnViaEbookDeFetcher isbnViaEbookDeFetcher = new IsbnViaEbookDeFetcher(importFormatPreferences);\n+                bibEntry = isbnViaEbookDeFetcher.performSearchById(identifier);\n+            }\n         }\n \n         return bibEntry;\n", "next_change": {"commit": "5f7aa46dd794877996951f169071b241bf90b928", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java b/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\ndeleted file mode 100644\nindex f4dedae3e7..0000000000\n--- a/src/main/java/org/jabref/logic/importer/fetcher/IsbnFetcher.java\n+++ /dev/null\n", "chunk": "@@ -1,80 +0,0 @@\n-package org.jabref.logic.importer.fetcher;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.regex.Pattern;\n-\n-import org.jabref.logic.help.HelpFile;\n-import org.jabref.logic.importer.EntryBasedFetcher;\n-import org.jabref.logic.importer.FetcherException;\n-import org.jabref.logic.importer.IdBasedFetcher;\n-import org.jabref.logic.importer.ImportFormatPreferences;\n-import org.jabref.model.entry.BibEntry;\n-import org.jabref.model.entry.field.StandardField;\n-import org.jabref.model.strings.StringUtil;\n-import org.jabref.model.util.OptionalUtil;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Fetcher for ISBN trying ebook.de first, chimbori.com and then ottobib\n- */\n-public class IsbnFetcher implements EntryBasedFetcher, IdBasedFetcher {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(IsbnFetcher.class);\n-    private static final Pattern NEWLINE_SPACE_PATTERN = Pattern.compile(\"\\\\n|\\\\r\\\\n|\\\\s\");\n-    protected final ImportFormatPreferences importFormatPreferences;\n-\n-    public IsbnFetcher(ImportFormatPreferences importFormatPreferences) {\n-        this.importFormatPreferences = importFormatPreferences;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return \"ISBN\";\n-    }\n-\n-    @Override\n-    public Optional<HelpFile> getHelpPage() {\n-        return Optional.of(HelpFile.FETCHER_ISBN);\n-    }\n-\n-    @Override\n-    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n-        if (StringUtil.isBlank(identifier)) {\n-            return Optional.empty();\n-        }\n-        // remove any newlines and spaces.\n-        identifier = NEWLINE_SPACE_PATTERN.matcher(identifier).replaceAll(\"\");\n-\n-        OpenLibraryFetcher openLibraryFetcher = new OpenLibraryFetcher(importFormatPreferences);\n-\n-        Optional<BibEntry> bibEntry = Optional.empty();\n-        try {\n-            bibEntry = openLibraryFetcher.performSearchById(identifier);\n-        } catch (FetcherException ex) {\n-            LOGGER.debug(\"Got a fetcher exception for IBSN search\", ex);\n-        } finally {\n-            // nothing found at OpenLibrary: try ebook.de\n-            if (!bibEntry.isPresent()) {\n-                LOGGER.debug(\"No entry found at OpenLibrary; trying ebook.de\");\n-                IsbnViaEbookDeFetcher isbnViaEbookDeFetcher = new IsbnViaEbookDeFetcher(importFormatPreferences);\n-                bibEntry = isbnViaEbookDeFetcher.performSearchById(identifier);\n-            }\n-        }\n-\n-        return bibEntry;\n-    }\n-\n-    @Override\n-    public List<BibEntry> performSearch(BibEntry entry) throws FetcherException {\n-        Optional<String> isbn = entry.getField(StandardField.ISBN);\n-        if (isbn.isPresent()) {\n-            return OptionalUtil.toList(performSearchById(isbn.get()));\n-        } else {\n-            return Collections.emptyList();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "590e2c3727ea3d6b6b872875c77ee0d16ae2b154", "message": "Merge commit", "committedDate": null}, {"oid": "51a1569bde2e2bd547463c157594888757b50b5d", "committedDate": "2022-04-20 23:53:23 +0200", "message": "Introduce OpenLibraryFetcher (and remove OttoBibFetcher) (#8700)"}, {"oid": "16de272317ee0f50b4abd5efcd84c56e9621bb76", "committedDate": "2022-08-06 21:44:07 +0200", "message": "Refactor of DOI import failure dialog, import format reader and clipboard manager (#8839)"}, {"oid": "5f7aa46dd794877996951f169071b241bf90b928", "committedDate": "2022-10-12 18:48:50 +0200", "message": "ISSUE-9145: implement isbn fetcher (#9205)"}]}, {"oid": "06ff6968d94eea78f6f406be657effe103c275b1", "url": "https://github.com/JabRef/jabref/commit/06ff6968d94eea78f6f406be657effe103c275b1", "message": "move error dialog to EntryTypeViewModel, add changelog entry", "committedDate": "2020-10-22T19:50:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxODM2OQ==", "url": "https://github.com/JabRef/jabref/pull/7036#discussion_r510418369", "body": "Can I leave this error message or should it be unique?", "bodyText": "Can I leave this error message or should it be unique?", "bodyHTML": "<p dir=\"auto\">Can I leave this error message or should it be unique?</p>", "author": "tmrd993", "createdAt": "2020-10-22T19:53:27Z", "path": "src/main/java/org/jabref/gui/EntryTypeViewModel.java", "diffHunk": "@@ -176,6 +176,10 @@ public void runFetcherWorker() {\n                 searchSuccesfulProperty.set(true);\n             } else if (StringUtil.isBlank(idText.getValue())) {\n                 dialogService.showWarningDialogAndWait(Localization.lang(\"Empty search ID\"), Localization.lang(\"The given search ID was empty.\"));\n+            } else if (result.isEmpty()) {\n+                String fetcher = selectedItemProperty().getValue().getName();\n+                String searchId = idText.getValue();\n+                dialogService.showErrorDialogAndWait(Localization.lang(\"Fetcher '%0' did not find an entry for id '%1'.\", fetcher, searchId));", "originalCommit": "06ff6968d94eea78f6f406be657effe103c275b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1OTI1NQ==", "url": "https://github.com/JabRef/jabref/pull/7036#discussion_r510459255", "bodyText": "Yes, looks good so far", "author": "Siedlerchr", "createdAt": "2020-10-22T21:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxODM2OQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "f0f7aa49765fe68b521cb0eb4ef43cd3e1e763af", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/gui/EntryTypeViewModel.java b/src/main/java/org/jabref/gui/EntryTypeViewModel.java\nindex 21f6079193..f58f758e14 100644\n--- a/src/main/java/org/jabref/gui/EntryTypeViewModel.java\n+++ b/src/main/java/org/jabref/gui/EntryTypeViewModel.java\n", "chunk": "@@ -179,7 +182,16 @@ public class EntryTypeViewModel {\n             } else if (result.isEmpty()) {\n                 String fetcher = selectedItemProperty().getValue().getName();\n                 String searchId = idText.getValue();\n-                dialogService.showErrorDialogAndWait(Localization.lang(\"Fetcher '%0' did not find an entry for id '%1'.\", fetcher, searchId));\n+                // When DOI ID is not found, allow the user to either return to the dialog or\n+                // add entry manually\n+                boolean addEntryFlag = dialogService.showConfirmationDialogAndWait(Localization.lang(\"DOI not found\"),\n+                        Localization.lang(\"Fetcher '%0' did not find an entry for id '%1'.\", fetcher, searchId),\n+                        Localization.lang(\"Add entry manually\"),\n+                        Localization.lang(\"Return to dialog\"));\n+                if (addEntryFlag) {\n+                    new NewEntryAction(libraryTab.frame(), StandardEntryType.Article, dialogService, preferencesService, stateManager).execute();\n+                    searchSuccesfulProperty.set(true);\n+                }\n             }\n             fetcherWorker = new FetcherWorker();\n \n", "next_change": {"commit": "6dfc2e00b4fc1dd76f4865e81894e2f7b2e50968", "changed_code": [{"header": "diff --git a/src/main/java/org/jabref/gui/EntryTypeViewModel.java b/src/main/java/org/jabref/gui/EntryTypeViewModel.java\nindex f58f758e14..16782b19c0 100644\n--- a/src/main/java/org/jabref/gui/EntryTypeViewModel.java\n+++ b/src/main/java/org/jabref/gui/EntryTypeViewModel.java\n", "chunk": "@@ -150,46 +156,38 @@ public class EntryTypeViewModel {\n             Optional<BibEntry> result = fetcherWorker.getValue();\n             if (result.isPresent()) {\n                 final BibEntry entry = result.get();\n-                ImportCleanup cleanup = new ImportCleanup(libraryTab.getBibDatabaseContext().getMode());\n-                cleanup.doPostCleanup(entry);\n-                Optional<BibEntry> duplicate = new DuplicateCheck(Globals.entryTypesManager).containsDuplicate(libraryTab.getDatabase(), entry, libraryTab.getBibDatabaseContext().getMode());\n-                if (duplicate.isPresent()) {\n-                    DuplicateResolverDialog dialog = new DuplicateResolverDialog(entry, duplicate.get(), DuplicateResolverDialog.DuplicateResolverType.IMPORT_CHECK, libraryTab.getBibDatabaseContext(), stateManager);\n-                    switch (dialogService.showCustomDialogAndWait(dialog).orElse(DuplicateResolverDialog.DuplicateResolverResult.BREAK)) {\n-                        case KEEP_LEFT:\n-                            libraryTab.getDatabase().removeEntry(duplicate.get());\n-                            libraryTab.getDatabase().insertEntry(entry);\n-                            break;\n-                        case KEEP_BOTH:\n-                            libraryTab.getDatabase().insertEntry(entry);\n-                            break;\n-                        case KEEP_MERGE:\n-                            libraryTab.getDatabase().removeEntry(duplicate.get());\n-                            libraryTab.getDatabase().insertEntry(dialog.getMergedEntry());\n-                            break;\n-                        default:\n-                            // Do nothing\n-                            break;\n-                    }\n-                } else {\n-                    // Regenerate CiteKey of imported BibEntry\n-                    new CitationKeyGenerator(libraryTab.getBibDatabaseContext(), preferencesService.getCitationKeyPatternPreferences()).generateAndSetKey(entry);\n-                    libraryTab.insertEntry(entry);\n-                }\n+\n+                ImportHandler handler = new ImportHandler(\n+                        libraryTab.getBibDatabaseContext(),\n+                        ExternalFileTypes.getInstance(),\n+                        preferencesService,\n+                        Globals.getFileUpdateMonitor(),\n+                        libraryTab.getUndoManager(),\n+                        stateManager,\n+                        dialogService);\n+                handler.importEntryWithDuplicateCheck(libraryTab.getBibDatabaseContext(), entry);\n+\n                 searchSuccesfulProperty.set(true);\n             } else if (StringUtil.isBlank(idText.getValue())) {\n                 dialogService.showWarningDialogAndWait(Localization.lang(\"Empty search ID\"), Localization.lang(\"The given search ID was empty.\"));\n-            } else if (result.isEmpty()) {\n+            } else {\n+                // result is empty\n+\n                 String fetcher = selectedItemProperty().getValue().getName();\n                 String searchId = idText.getValue();\n-                // When DOI ID is not found, allow the user to either return to the dialog or\n-                // add entry manually\n+\n+                // When DOI ID is not found, allow the user to either return to the dialog or add entry manually\n                 boolean addEntryFlag = dialogService.showConfirmationDialogAndWait(Localization.lang(\"DOI not found\"),\n                         Localization.lang(\"Fetcher '%0' did not find an entry for id '%1'.\", fetcher, searchId),\n                         Localization.lang(\"Add entry manually\"),\n                         Localization.lang(\"Return to dialog\"));\n                 if (addEntryFlag) {\n-                    new NewEntryAction(libraryTab.frame(), StandardEntryType.Article, dialogService, preferencesService, stateManager).execute();\n+                    new NewEntryAction(\n+                            libraryTab.frame(),\n+                            StandardEntryType.Article,\n+                            dialogService,\n+                            preferencesService,\n+                            stateManager).execute();\n                     searchSuccesfulProperty.set(true);\n                 }\n             }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "590e2c3727ea3d6b6b872875c77ee0d16ae2b154", "message": "Merge commit", "committedDate": null}, {"oid": "c0153bd501754d220e34f45ca689851f8ffd5fbd", "committedDate": "2020-12-14 21:28:26 +0100", "message": "Extraction of Globals.prefs.put and .get (#7121)"}, {"oid": "0b4be8a1417fd7053646bfe10ef22d37614683a9", "committedDate": "2021-01-02 17:34:40 +0100", "message": "Fix for application dialogs opening in wrong displays (#7273)"}, {"oid": "71327b86e597ca565bae3700b0117f396f418b9b", "committedDate": "2021-10-18 21:38:31 +0200", "message": "Fix some typos (#8157)"}, {"oid": "bcbb1430b941233e7e33c05a3ea0f3540763dda6", "committedDate": "2021-10-25 23:08:34 +0200", "message": "minor tweaks"}, {"oid": "2153a0549c6443feb7bab4cf3958f1c321e8e3d6", "committedDate": "2021-10-26 21:42:35 +0200", "message": "Merge pull request #8129 from colinhex/generateEntryFromId"}, {"oid": "f0f7aa49765fe68b521cb0eb4ef43cd3e1e763af", "committedDate": "2021-11-08 06:25:08 +0100", "message": "Present options to create an article for manual entry or return to the new entry dialog box when failed to find DOI ID ... #7870 (#8203)"}, {"oid": "8ca6b7f28caa9116f02c0ff6f7147cb7ebf01a95", "committedDate": "2022-01-30 20:15:06 +0100", "message": "Observable Preferences K (Integration of wild preferences) (#8422)"}, {"oid": "4d8e41c1aca0d945a21041c2b23c5fee986120db", "committedDate": "2022-04-04 22:57:54 +0200", "message": "Fix import entry by id does not generate citation key (#8361)"}, {"oid": "6dfc2e00b4fc1dd76f4865e81894e2f7b2e50968", "committedDate": "2022-04-25 20:27:27 +0200", "message": "Fix for issue 6877: Allow users to customize the API Key (#7720)"}, {"oid": "16de272317ee0f50b4abd5efcd84c56e9621bb76", "committedDate": "2022-08-06 21:44:07 +0200", "message": "Refactor of DOI import failure dialog, import format reader and clipboard manager (#8839)"}, {"oid": "507a2635f40807d8882efdbe5c68454e00917c16", "committedDate": "2022-08-12 14:22:12 +0200", "message": "ExternalFileTypes singleton refactor (#9044)"}, {"oid": "d5b9016c042d6ea7c2aee6e5477c1edf848c84bb", "committedDate": "2022-10-10 18:55:49 +0200", "message": "Log exception (#9227)"}, {"oid": "4223d9f90f99a79f454336b720c9e4a0e4f594f2", "committedDate": "2023-04-12 19:05:11 +0200", "message": "Download linked files for id based entries"}, {"oid": "61db95a3091387d87892d4bfbc7c96b9523f3d24", "committedDate": "2023-05-16 10:13:52 +0200", "message": "Removed ImportFormatReader variable from Globals"}, {"oid": "b3f9f7afec77b3922d6e4db8981a8dcd2976d14a", "committedDate": "2023-05-17 15:12:27 +0200", "message": "Removed ImportFormatReader from Globals at all"}, {"oid": "6ba180827dbcb505989843741bf34c7fafc227a4", "committedDate": "2023-05-17 18:46:03 +0200", "message": "Reduced use of Globals for fileUpdateMonitor, removed unused themeManager vars"}]}, {"oid": "a951fa012ff1096df1c75dba2848ed870e09f59a", "url": "https://github.com/JabRef/jabref/commit/a951fa012ff1096df1c75dba2848ed870e09f59a", "message": "Update CHANGELOG.md\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>", "committedDate": "2020-10-22T23:02:47Z", "type": "commit"}]}