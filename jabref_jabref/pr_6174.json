{"pr_number": 6174, "pr_title": "Fix overwritting downloaded files with same name", "pr_author": "gtam25", "pr_createdAt": "2020-03-25T07:15:01Z", "pr_url": "https://github.com/JabRef/jabref/pull/6174", "timeline": [{"oid": "10ee0efac0798947943dbc7d913212b7527adac7", "url": "https://github.com/JabRef/jabref/commit/10ee0efac0798947943dbc7d913212b7527adac7", "message": "resolved style checks", "committedDate": "2020-03-25T09:01:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDI2Ng==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397820266", "body": "Please put that into an else path in the if of line 91. (Declaring the variables here is OK). I find it hard if the contents of the variables are overwritten: The default case is that there is an extension.", "bodyText": "Please put that into an else path in the if of line 91. (Declaring the variables here is OK). I find it hard if the contents of the variables are overwritten: The default case is that there is an extension.", "bodyHTML": "<p dir=\"auto\">Please put that into an else path in the if of line 91. (Declaring the variables here is OK). I find it hard if the contents of the variables are overwritten: The default case is that there is an extension.</p>", "author": "koppor", "createdAt": "2020-03-25T12:37:02Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDc5OA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397820798", "body": "```suggestion\r\n        for (int counter = 1; Files.exists(absolutePath); counter++) {\r\n```\r\n\r\n`++` at the end to be inline with the usual `i++`.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int counter = 1; Files.exists(absolutePath); ++counter) {\n          \n          \n            \n                    for (int counter = 1; Files.exists(absolutePath); counter++) {\n          \n      \n    \n    \n  \n\n++ at the end to be inline with the usual i++.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> counter <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>; <span class=\"pl-smi\">Files</span><span class=\"pl-k\">.</span>exists(absolutePath); <span class=\"pl-k x x-first\">++</span><span class=\"x x-last\">counter</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> counter <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>; <span class=\"pl-smi\">Files</span><span class=\"pl-k\">.</span>exists(absolutePath); <span class=\"x x-first\">counter</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\"><code>++</code> at the end to be inline with the usual <code>i++</code>.</p>", "author": "koppor", "createdAt": "2020-03-25T12:37:53Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMTI5Mg==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397821292", "bodyText": "After thinking longer, please rewrite to a while loop. Not testing for the counter in the test of a for loop is uncommon. Thus, hard to read when maintaining the code.", "author": "koppor", "createdAt": "2020-03-25T12:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMjI3OA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397822278", "body": "No need for that variable. Can be tesed in the while condition.", "bodyText": "No need for that variable. Can be tesed in the while condition.", "bodyHTML": "<p dir=\"auto\">No need for that variable. Can be tesed in the while condition.</p>", "author": "koppor", "createdAt": "2020-03-25T12:40:43Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameHandler.java", "diffHunk": "@@ -67,7 +71,41 @@ public static String cleanDirectoryName(String badFileName) {\n         return cleanName.toString().trim();\n     }\n \n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+        String absoluteName = targetDirectory.resolve(fileName)\n+                                            .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix = \"\";\n+        String fileNameWithoutExtension = fileName;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+\n+        Path absolutePath = Paths.get(absoluteName);\n+        String newFileName = fileName;\n+\n+        for (int counter = 1; Files.exists(absolutePath); ++counter) {\n+            newFileName = fileNameWithoutExtension +\n+                            \" (\" + counter + \")\" +\n+                            extensionSuffix;\n+            absolutePath = targetDirectory.resolve(newFileName);", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMjY2MA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397822660", "body": "Please include that in the `assertEquals` directly.", "bodyText": "Please include that in the assertEquals directly.", "bodyHTML": "<p dir=\"auto\">Please include that in the <code>assertEquals</code> directly.</p>", "author": "koppor", "createdAt": "2020-03-25T12:41:27Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n+        String dummyFile1 = \"default.txt\";\n+        String dummyFile2 = \"default (1).txt\";\n+        String expectedFileName = \"default (2).txt\";", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNTg5Nw==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397825897", "body": "Please introduce `Path dummyFile1` variable. In both usages of `dummyFileX`, you are resulting the name using the same path.", "bodyText": "Please introduce Path dummyFile1 variable. In both usages of dummyFileX, you are resulting the name using the same path.", "bodyHTML": "<p dir=\"auto\">Please introduce <code>Path dummyFile1</code> variable. In both usages of <code>dummyFileX</code>, you are resulting the name using the same path.</p>", "author": "koppor", "createdAt": "2020-03-25T12:47:07Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {\n+        String dummyFile1 = \"default.txt\";", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNjU0NQ==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r397826545", "body": "Good to have a test. - Could you add two more:\r\n\r\n1. One for a non existing file\r\n2. One for just one file existing\r\n\r\nI know, these are trivial. - Nevertheless, if someone touches your code, even the trivial ones are tested then (and there could something go wrong)", "bodyText": "Good to have a test. - Could you add two more:\n\nOne for a non existing file\nOne for just one file existing\n\nI know, these are trivial. - Nevertheless, if someone touches your code, even the trivial ones are tested then (and there could something go wrong)", "bodyHTML": "<p dir=\"auto\">Good to have a test. - Could you add two more:</p>\n<ol dir=\"auto\">\n<li>One for a non existing file</li>\n<li>One for just one file existing</li>\n</ol>\n<p dir=\"auto\">I know, these are trivial. - Nevertheless, if someone touches your code, even the trivial ones are tested then (and there could something go wrong)</p>", "author": "koppor", "createdAt": "2020-03-25T12:48:16Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileNameHandlerTest {\n+\n+    @Test\n+    public void testCleanFileName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanFileName(\"legalFilename.txt\"));\n+        assertEquals(\"illegalFilename______.txt\", FileNameHandler.cleanFileName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryName() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir/legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir/legalFilename.txt\"));\n+        assertEquals(\"illegalFilename/_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename/?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanDirectoryNameForWindows() {\n+        assertEquals(\"legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"legalFilename.txt\"));\n+        assertEquals(\"subdir\\\\legalFilename.txt\", FileNameHandler.cleanDirectoryName(\"subdir\\\\legalFilename.txt\"));\n+        assertEquals(\"illegalFilename\\\\_____.txt\", FileNameHandler.cleanDirectoryName(\"illegalFilename\\\\?*<>|.txt\"));\n+    }\n+\n+    @Test\n+    public void testCleanCurlyBracesAsWell() {\n+        assertEquals(\"The Evolution of Sentiment_ Analysis_A Review of Research Topics, Venues, and Top Cited Papers.PDF\", FileNameHandler.cleanFileName(\"The Evolution of Sentiment} Analysis}A Review of Research Topics, Venues, and Top Cited Papers.PDF\"));\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueName(@TempDir Path tempDirectory) throws IOException {", "originalCommit": "7f4af8c53c5cbeb79249e4d15682ebdfbb017c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "155fbe396c18b01139f87f845f76daa124ea5492", "url": "https://github.com/JabRef/jabref/commit/155fbe396c18b01139f87f845f76daa124ea5492", "message": "fixes #6068\n\n- fixed downloading file with same name\n- updated changelog", "committedDate": "2020-03-25T15:19:44Z", "type": "commit"}, {"oid": "155fbe396c18b01139f87f845f76daa124ea5492", "url": "https://github.com/JabRef/jabref/commit/155fbe396c18b01139f87f845f76daa124ea5492", "message": "fixes #6068\n\n- fixed downloading file with same name\n- updated changelog", "committedDate": "2020-03-25T15:19:44Z", "type": "forcePushed"}, {"oid": "1bfb77914faef877a82d00d91090ec703b9e8138", "url": "https://github.com/JabRef/jabref/commit/1bfb77914faef877a82d00d91090ec703b9e8138", "message": "code check style", "committedDate": "2020-03-25T16:38:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzYyNg==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667626", "body": "Please remove this comment.", "bodyText": "Please remove this comment.", "bodyHTML": "<p dir=\"auto\">Please remove this comment.</p>", "author": "tobiasdiez", "createdAt": "2020-03-28T14:20:52Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+//        String absoluteName = targetDirectory.resolve(fileName)", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzYzNw==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667637", "body": "This one as well.", "bodyText": "This one as well.", "bodyHTML": "<p dir=\"auto\">This one as well.</p>", "author": "tobiasdiez", "createdAt": "2020-03-28T14:21:03Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names\n+     *\n+     * @param targetDirectory The directory in which file name should be unique\n+     * @param fileName Suggested name for the file\n+     * @return a file-name such that it does not match any existing files in targetDirectory.\n+     * */\n+    public static String getNonOverWritingFileName(Path targetDirectory, String fileName) {\n+//        String absoluteName = targetDirectory.resolve(fileName)\n+//                .toString();\n+\n+        Optional<String> extensionOptional = FileUtil.getFileExtension(fileName);\n+\n+        // the suffix include the '.' , if extension is present Eg: \".pdf\"\n+        String extensionSuffix;\n+        String fileNameWithoutExtension;\n+\n+        if (extensionOptional.isPresent()) {\n+            extensionSuffix = '.' + extensionOptional.get();\n+            fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));\n+        }\n+        else {\n+            extensionSuffix = \"\";\n+            fileNameWithoutExtension = fileName;\n+        }\n+\n+//        Path absolutePath = Paths.get(absoluteName);", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2NzgzOA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667838", "body": "Is there a need to have the temporary directory as a variable as well as an argument? I would prefer if all tests use the same format (either variable or either paramater)", "bodyText": "Is there a need to have the temporary directory as a variable as well as an argument? I would prefer if all tests use the same format (either variable or either paramater)", "bodyHTML": "<p dir=\"auto\">Is there a need to have the temporary directory as a variable as well as an argument? I would prefer if all tests use the same format (either variable or either paramater)</p>", "author": "tobiasdiez", "createdAt": "2020-03-28T14:23:19Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class FileNameUniquenessTest {\n+\n+    @TempDir\n+    protected Path tempDir;\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2Nzk2NQ==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399667965", "body": "The description seems to be off as no absolute path is returned but only the file name, right?", "bodyText": "The description seems to be off as no absolute path is returned but only the file name, right?", "bodyHTML": "<p dir=\"auto\">The description seems to be off as no absolute path is returned but only the file name, right?</p>", "author": "tobiasdiez", "createdAt": "2020-03-28T14:24:11Z", "path": "src/main/java/org/jabref/logic/util/io/FileNameUniqueness.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.jabref.logic.util.io;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public class FileNameUniqueness {\n+\n+    /**\n+     * Returns an absolute path to a file which does not match with any existing file names", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY2ODA2MA==", "url": "https://github.com/JabRef/jabref/pull/6174#discussion_r399668060", "body": "Deleting the file shouldn't be necessary as the `TempDir` should take care of this.", "bodyText": "Deleting the file shouldn't be necessary as the TempDir should take care of this.", "bodyHTML": "<p dir=\"auto\">Deleting the file shouldn't be necessary as the <code>TempDir</code> should take care of this.</p>", "author": "tobiasdiez", "createdAt": "2020-03-28T14:25:00Z", "path": "src/test/java/org/jabref/logic/util/io/FileNameUniquenessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.logic.util.io;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class FileNameUniquenessTest {\n+\n+    @TempDir\n+    protected Path tempDir;\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsSameName(@TempDir Path tempDirectory) throws IOException {\n+\n+        assertFalse(\n+                Files.exists(tempDirectory.resolve(\"sameFile.txt\"))\n+        );\n+\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDirectory, \"sameFile.txt\");\n+        assertEquals(\"sameFile.txt\", outputFileName);\n+\n+    }\n+\n+    @Test\n+    public void testGetNonOverWritingFileNameReturnsUniqueNameOver1Conflict() throws IOException {\n+        Path dummyFilePath1 = tempDir.resolve(\"differentFile.txt\");\n+\n+        Files.createFile(dummyFilePath1);\n+\n+        String outputFileName = FileNameUniqueness.getNonOverWritingFileName(tempDir, \"differentFile.txt\");\n+        assertEquals(\"differentFile (1).txt\", outputFileName);\n+\n+        Files.delete(dummyFilePath1);", "originalCommit": "1bfb77914faef877a82d00d91090ec703b9e8138", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "838539c9094a18d70e869b252a7f0731706e90fd", "url": "https://github.com/JabRef/jabref/commit/838539c9094a18d70e869b252a7f0731706e90fd", "message": "Remove commented code and refactor", "committedDate": "2020-03-28T15:03:02Z", "type": "commit"}]}