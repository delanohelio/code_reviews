{"pr_number": 6872, "pr_title": "Add multi-sentence title formatting to sentence case and title case", "pr_author": "tmrd993", "pr_createdAt": "2020-09-04T20:47:22Z", "pr_url": "https://github.com/JabRef/jabref/pull/6872", "timeline": [{"oid": "c29cfb1e58bc459b235fbc9f9ff4793b1c1dac8b", "url": "https://github.com/JabRef/jabref/commit/c29cfb1e58bc459b235fbc9f9ff4793b1c1dac8b", "message": "Add multi-sentence title formatting to sentence case and title case", "committedDate": "2020-09-04T20:34:32Z", "type": "commit"}, {"oid": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "url": "https://github.com/JabRef/jabref/commit/d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "message": "fix checkstyle issues", "committedDate": "2020-09-08T16:38:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4Nzc3Ng==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491687776", "body": "Here, the power of Java streams can be used: (then, one does not need the hack `deleteCharAt`.\r\n\r\n```suggestion\r\n        return StringUtil.getStringAsSentences(input)\r\n                  .stream()\r\n                  .map(sentence -> new LowerCaseFormatter().format(sentence))\r\n                  .map(lowerCase -> new Title(lowerCase))\r\n                  .map(title -> {\r\n                      title.getFirstWord().ifPresent(Word::toUpperFirst);\r\n                      return title;\r\n                  })\r\n                  .map(title -> title.toString())\r\n                  .collect(Collectors.joining(\" \"));\r\n```\r\n", "bodyText": "Here, the power of Java streams can be used: (then, one does not need the hack deleteCharAt.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> sentences = StringUtil.getStringAsSentences(input);\n          \n          \n            \n                    return StringUtil.getStringAsSentences(input)\n          \n          \n            \n                              .stream()\n          \n          \n            \n                              .map(sentence -> new LowerCaseFormatter().format(sentence))\n          \n          \n            \n                              .map(lowerCase -> new Title(lowerCase))\n          \n          \n            \n                              .map(title -> {\n          \n          \n            \n                                  title.getFirstWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n                                  return title;\n          \n          \n            \n                              })\n          \n          \n            \n                              .map(title -> title.toString())\n          \n          \n            \n                              .collect(Collectors.joining(\" \"));", "bodyHTML": "<p dir=\"auto\">Here, the power of Java streams can be used: (then, one does not need the hack <code>deleteCharAt</code>.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\"><span class=\"x x-first\">List&lt;</span><span class=\"pl-smi x\">String</span><span class=\"x\">&gt;</span></span><span class=\"x\"> sentences </span><span class=\"pl-k x\">=</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">StringUtil</span><span class=\"pl-k\">.</span>getStringAsSentences(input)<span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">return</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">StringUtil</span><span class=\"pl-k\">.</span>getStringAsSentences(input)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  .stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  .map(sentence <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">LowerCaseFormatter</span>()<span class=\"pl-k\">.</span>format(sentence))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  .map(lowerCase <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Title</span>(lowerCase))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  .map(title <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                      title<span class=\"pl-k\">.</span>getFirstWord()<span class=\"pl-k\">.</span>ifPresent(<span class=\"pl-smi\">Word</span><span class=\"pl-k\">::</span>toUpperFirst);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                      <span class=\"pl-k\">return</span> title;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  })</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  .map(title <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> title<span class=\"pl-k\">.</span>toString())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>joining(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "koppor", "createdAt": "2020-09-20T12:39:48Z", "path": "src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java", "diffHunk": "@@ -20,11 +23,17 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(new LowerCaseFormatter().format(input));\n+        List<String> sentences = StringUtil.getStringAsSentences(input);", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4NzgzOQ==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491687839", "body": "This relies on the fact that `toUpperFirst` modifies the underlying object. This is a design of our `Word` class. It is OK for me now.", "bodyText": "This relies on the fact that toUpperFirst modifies the underlying object. This is a design of our Word class. It is OK for me now.", "bodyHTML": "<p dir=\"auto\">This relies on the fact that <code>toUpperFirst</code> modifies the underlying object. This is a design of our <code>Word</code> class. It is OK for me now.</p>", "author": "koppor", "createdAt": "2020-09-20T12:40:22Z", "path": "src/main/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatter.java", "diffHunk": "@@ -20,11 +23,17 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(new LowerCaseFormatter().format(input));\n+        List<String> sentences = StringUtil.getStringAsSentences(input);\n+        StringBuilder result = new StringBuilder();\n+        for (String sentence : sentences) {\n+            Title title = new Title(new LowerCaseFormatter().format(sentence));\n \n-        title.getWords().stream().findFirst().ifPresent(Word::toUpperFirst);\n+            title.getWords().stream().findFirst().ifPresent(Word::toUpperFirst);", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODA4Nw==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688087", "body": "Also stream magic here:\r\n\r\n```suggestion\r\n        return StringUtil\r\n                .getStringAsSentences(input)\r\n                .stream()\r\n                .map(sentence -> {\r\n                    Title title = new Title(sentence);\r\n                    title.getWords().stream().filter(Word::isSmallerWord).forEach(Word::toLowerCase);\r\n                    title.getWords().stream().filter(Word::isLargerWord).forEach(Word::toUpperFirst);\r\n\r\n                    title.getFirstWord().ifPresent(Word::toUpperFirst);\r\n                    title.getLastWord().ifPresent(Word::toUpperFirst);\r\n\r\n                    for (int i = 0; i < (title.getWords().size() - 2); i++) {\r\n                        if (title.getWords().get(i).endsWithColon()) {\r\n                            title.getWords().get(i + 1).toUpperFirst();\r\n                        }\r\n                    }\r\n                    return title.toString();\r\n                })\r\n                .collect(Collectors.joining(\" \"));\r\n```", "bodyText": "Also stream magic here:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> sentences = StringUtil.getStringAsSentences(input);\n          \n          \n            \n                    return StringUtil\n          \n          \n            \n                            .getStringAsSentences(input)\n          \n          \n            \n                            .stream()\n          \n          \n            \n                            .map(sentence -> {\n          \n          \n            \n                                Title title = new Title(sentence);\n          \n          \n            \n                                title.getWords().stream().filter(Word::isSmallerWord).forEach(Word::toLowerCase);\n          \n          \n            \n                                title.getWords().stream().filter(Word::isLargerWord).forEach(Word::toUpperFirst);\n          \n          \n            \n            \n          \n          \n            \n                                title.getFirstWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n                                title.getLastWord().ifPresent(Word::toUpperFirst);\n          \n          \n            \n            \n          \n          \n            \n                                for (int i = 0; i < (title.getWords().size() - 2); i++) {\n          \n          \n            \n                                    if (title.getWords().get(i).endsWithColon()) {\n          \n          \n            \n                                        title.getWords().get(i + 1).toUpperFirst();\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                                return title.toString();\n          \n          \n            \n                            })\n          \n          \n            \n                            .collect(Collectors.joining(\" \"));", "bodyHTML": "<p dir=\"auto\">Also stream magic here:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\"><span class=\"x x-first\">List&lt;</span><span class=\"pl-smi x\">String</span><span class=\"x\">&gt;</span></span><span class=\"x\"> sentences </span><span class=\"pl-k x\">=</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">StringUtil</span><span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">getStringAsSentences(input);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">return</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">StringUtil</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .getStringAsSentences(input)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .stream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .map(sentence <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-smi\">Title</span> title <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Title</span>(sentence);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    title<span class=\"pl-k\">.</span>getWords()<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>filter(<span class=\"pl-smi\">Word</span><span class=\"pl-k\">::</span>isSmallerWord)<span class=\"pl-k\">.</span>forEach(<span class=\"pl-smi\">Word</span><span class=\"pl-k\">::</span>toLowerCase);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    title<span class=\"pl-k\">.</span>getWords()<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>filter(<span class=\"pl-smi\">Word</span><span class=\"pl-k\">::</span>isLargerWord)<span class=\"pl-k\">.</span>forEach(<span class=\"pl-smi\">Word</span><span class=\"pl-k\">::</span>toUpperFirst);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    title<span class=\"pl-k\">.</span>getFirstWord()<span class=\"pl-k\">.</span>ifPresent(<span class=\"pl-smi\">Word</span><span class=\"pl-k\">::</span>toUpperFirst);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    title<span class=\"pl-k\">.</span>getLastWord()<span class=\"pl-k\">.</span>ifPresent(<span class=\"pl-smi\">Word</span><span class=\"pl-k\">::</span>toUpperFirst);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> (title<span class=\"pl-k\">.</span>getWords()<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">-</span> <span class=\"pl-c1\">2</span>); i<span class=\"pl-k\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        <span class=\"pl-k\">if</span> (title<span class=\"pl-k\">.</span>getWords()<span class=\"pl-k\">.</span>get(i)<span class=\"pl-k\">.</span>endsWithColon()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            title<span class=\"pl-k\">.</span>getWords()<span class=\"pl-k\">.</span>get(i <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>)<span class=\"pl-k\">.</span>toUpperFirst();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k\">return</span> title<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                })</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>joining(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "koppor", "createdAt": "2020-09-20T12:43:39Z", "path": "src/main/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatter.java", "diffHunk": "@@ -22,21 +25,26 @@ public String getKey() {\n      */\n     @Override\n     public String format(String input) {\n-        Title title = new Title(input);\n+        List<String> sentences = StringUtil.getStringAsSentences(input);", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODkyOQ==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688929", "body": "Could yo add some comment on the Regex? I think, it is:\r\n\r\n```suggestion\r\n        // A sentence ends with a .?!;, but not in the case of \"Mr.\", \"Ms.\", \"Mrs.\", \"Dr.\", \"st.\", \"jr.\", \"co.\", \"inc.\", and \"ltd.\"\r\n        Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");\r\n```\r\n", "bodyText": "Could yo add some comment on the Regex? I think, it is:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");\n          \n          \n            \n                    // A sentence ends with a .?!;, but not in the case of \"Mr.\", \"Ms.\", \"Mrs.\", \"Dr.\", \"st.\", \"jr.\", \"co.\", \"inc.\", and \"ltd.\"\n          \n          \n            \n                    Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");", "bodyHTML": "<p dir=\"auto\">Could yo add some comment on the Regex? I think, it is:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi x x-first\">Pattern</span><span class=\"x\"> splitTextPattern </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-smi x\">Pattern</span><span class=\"pl-k x\">.</span><span class=\"x\">compile(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">(?&lt;=[</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.!;</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">?])(?&lt;![Mm][Rr]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.|[Mm][Rr][Ss]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.|[Dd][Rr]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.|[Mm][Ss]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.|[Ss][Tt]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.|[Jj][Rr]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.|[Cc][Oo]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.|[Ii][Nn][Cc]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.|[Ll][Tt][Dd]</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">.)</span><span class=\"pl-cce x\">\\\\</span><span class=\"x\">s+</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c x x-first\">//</span><span class=\"x x-last\"> A sentence ends with a .?!;, but not in the case of \"Mr.\", \"Ms.\", \"Mrs.\", \"Dr.\", \"st.\", \"jr.\", \"co.\", \"inc.\", and \"ltd.\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">Pattern</span> splitTextPattern <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Pattern</span><span class=\"pl-k\">.</span>compile(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(?&lt;=[<span class=\"pl-cce\">\\\\</span>.!;<span class=\"pl-cce\">\\\\</span>?])(?&lt;![Mm][Rr]<span class=\"pl-cce\">\\\\</span>.|[Mm][Rr][Ss]<span class=\"pl-cce\">\\\\</span>.|[Dd][Rr]<span class=\"pl-cce\">\\\\</span>.|[Mm][Ss]<span class=\"pl-cce\">\\\\</span>.|[Ss][Tt]<span class=\"pl-cce\">\\\\</span>.|[Jj][Rr]<span class=\"pl-cce\">\\\\</span>.|[Cc][Oo]<span class=\"pl-cce\">\\\\</span>.|[Ii][Nn][Cc]<span class=\"pl-cce\">\\\\</span>.|[Ll][Tt][Dd]<span class=\"pl-cce\">\\\\</span>.)<span class=\"pl-cce\">\\\\</span>s+<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "koppor", "createdAt": "2020-09-20T12:54:30Z", "path": "src/main/java/org/jabref/model/strings/StringUtil.java", "diffHunk": "@@ -720,6 +720,14 @@ public static String capitalizeFirst(String toCapitalize) {\n         return Arrays.asList(text.split(\"[\\\\s,;]+\"));\n     }\n \n+    /**\n+     * Returns a list of sentences contained in the given text.\n+     */\n+    public static List<String> getStringAsSentences(String text) {\n+        Pattern splitTextPattern = Pattern.compile(\"(?<=[\\\\.!;\\\\?])(?<![Mm][Rr]\\\\.|[Mm][Rr][Ss]\\\\.|[Dd][Rr]\\\\.|[Mm][Ss]\\\\.|[Ss][Tt]\\\\.|[Jj][Rr]\\\\.|[Cc][Oo]\\\\.|[Ii][Nn][Cc]\\\\.|[Ll][Tt][Dd]\\\\.)\\\\s+\");", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODk2Mg==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491688962", "bodyText": "Please group mr, ms, and mrs together", "author": "koppor", "createdAt": "2020-09-20T12:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4ODkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5MTI0Mw==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r491691243", "body": "While you are on it, I propose to rewrite to parameterized tests:\r\n\r\n```java\r\npackage org.jabref.logic.formatter.casechanger;\r\n\r\nimport java.util.stream.Stream;\r\n\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.Arguments;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\n/**\r\n * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}\r\n */\r\npublic class SentenceCaseFormatterTest {\r\n\r\n    private SentenceCaseFormatter formatter = new SentenceCaseFormatter();\r\n\r\n    private static Stream<Arguments> testData() {\r\n        return Stream.of(\r\n                Arguments.of(\"Upper first\", \"upper First\"),\r\n                Arguments.of(\"Upper first\", \"uPPER FIRST\"),\r\n                Arguments.of(\"Upper {NOT} first\", \"upper {NOT} FIRST\"),\r\n                Arguments.of(\"Upper {N}ot first\", \"upper {N}OT FIRST\"),\r\n                Arguments.of(\"Whose music? A sociology of musical language\",\r\n                        \"Whose music? a sociology of musical language\"),\r\n                Arguments.of(\"Bibliographic software. A comparison.\",\r\n                        \"bibliographic software. a comparison.\"),\r\n                Arguments.of(\"England\u2019s monitor; The history of the separation\",\r\n                        \"England\u2019s Monitor; the History of the Separation\"),\r\n                Arguments.of(\"Dr. schultz: a dentist turned bounty hunter.\",\r\n                        \"Dr. schultz: a dentist turned bounty hunter.\"),\r\n                Arguments.of(\"Example case. {EXCLUDED SENTENCE.}\",\r\n                        \"Example case. {EXCLUDED SENTENCE.}\"),\r\n                Arguments.of(\"I have {Aa} dream\", new SentenceCaseFormatter().getExampleInput())\r\n        );\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"testData\")\r\n    public void test(String expected, String input) {\r\n        assertEquals(expected, formatter.format(input));\r\n    }\r\n}\r\n```\r\n\r\n\r\nOK, the descriptions are lost. Maybe, the description could be added as first paramter to the `test` method.", "bodyText": "While you are on it, I propose to rewrite to parameterized tests:\npackage org.jabref.logic.formatter.casechanger;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}\n */\npublic class SentenceCaseFormatterTest {\n\n    private SentenceCaseFormatter formatter = new SentenceCaseFormatter();\n\n    private static Stream<Arguments> testData() {\n        return Stream.of(\n                Arguments.of(\"Upper first\", \"upper First\"),\n                Arguments.of(\"Upper first\", \"uPPER FIRST\"),\n                Arguments.of(\"Upper {NOT} first\", \"upper {NOT} FIRST\"),\n                Arguments.of(\"Upper {N}ot first\", \"upper {N}OT FIRST\"),\n                Arguments.of(\"Whose music? A sociology of musical language\",\n                        \"Whose music? a sociology of musical language\"),\n                Arguments.of(\"Bibliographic software. A comparison.\",\n                        \"bibliographic software. a comparison.\"),\n                Arguments.of(\"England\u2019s monitor; The history of the separation\",\n                        \"England\u2019s Monitor; the History of the Separation\"),\n                Arguments.of(\"Dr. schultz: a dentist turned bounty hunter.\",\n                        \"Dr. schultz: a dentist turned bounty hunter.\"),\n                Arguments.of(\"Example case. {EXCLUDED SENTENCE.}\",\n                        \"Example case. {EXCLUDED SENTENCE.}\"),\n                Arguments.of(\"I have {Aa} dream\", new SentenceCaseFormatter().getExampleInput())\n        );\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"testData\")\n    public void test(String expected, String input) {\n        assertEquals(expected, formatter.format(input));\n    }\n}\nOK, the descriptions are lost. Maybe, the description could be added as first paramter to the test method.", "bodyHTML": "<p dir=\"auto\">While you are on it, I propose to rewrite to parameterized tests:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package org.jabref.logic.formatter.casechanger;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * Tests in addition to the general tests from {@link org.jabref.logic.formatter.FormatterTest}\n */\npublic class SentenceCaseFormatterTest {\n\n    private SentenceCaseFormatter formatter = new SentenceCaseFormatter();\n\n    private static Stream&lt;Arguments&gt; testData() {\n        return Stream.of(\n                Arguments.of(&quot;Upper first&quot;, &quot;upper First&quot;),\n                Arguments.of(&quot;Upper first&quot;, &quot;uPPER FIRST&quot;),\n                Arguments.of(&quot;Upper {NOT} first&quot;, &quot;upper {NOT} FIRST&quot;),\n                Arguments.of(&quot;Upper {N}ot first&quot;, &quot;upper {N}OT FIRST&quot;),\n                Arguments.of(&quot;Whose music? A sociology of musical language&quot;,\n                        &quot;Whose music? a sociology of musical language&quot;),\n                Arguments.of(&quot;Bibliographic software. A comparison.&quot;,\n                        &quot;bibliographic software. a comparison.&quot;),\n                Arguments.of(&quot;England\u2019s monitor; The history of the separation&quot;,\n                        &quot;England\u2019s Monitor; the History of the Separation&quot;),\n                Arguments.of(&quot;Dr. schultz: a dentist turned bounty hunter.&quot;,\n                        &quot;Dr. schultz: a dentist turned bounty hunter.&quot;),\n                Arguments.of(&quot;Example case. {EXCLUDED SENTENCE.}&quot;,\n                        &quot;Example case. {EXCLUDED SENTENCE.}&quot;),\n                Arguments.of(&quot;I have {Aa} dream&quot;, new SentenceCaseFormatter().getExampleInput())\n        );\n    }\n\n    @ParameterizedTest\n    @MethodSource(&quot;testData&quot;)\n    public void test(String expected, String input) {\n        assertEquals(expected, formatter.format(input));\n    }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-smi\">org.jabref.logic.formatter.casechanger</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.stream.Stream</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.junit.jupiter.params.ParameterizedTest</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.junit.jupiter.params.provider.Arguments</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.junit.jupiter.params.provider.MethodSource</span>;\n\n<span class=\"pl-k\">import static</span> <span class=\"pl-smi\">org.junit.jupiter.api.Assertions.assertEquals</span>;\n\n<span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * Tests in addition to the general tests from {<span class=\"pl-k\">@link</span> org.jabref.logic.formatter.FormatterTest}</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">SentenceCaseFormatterTest</span> {\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">SentenceCaseFormatter</span> formatter <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SentenceCaseFormatter</span>();\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">Stream&lt;<span class=\"pl-smi\">Arguments</span>&gt;</span> <span class=\"pl-en\">testData</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Stream</span><span class=\"pl-k\">.</span>of(\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upper first<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>upper First<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upper first<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>uPPER FIRST<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upper {NOT} first<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>upper {NOT} FIRST<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upper {N}ot first<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>upper {N}OT FIRST<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Whose music? A sociology of musical language<span class=\"pl-pds\">\"</span></span>,\n                        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Whose music? a sociology of musical language<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bibliographic software. A comparison.<span class=\"pl-pds\">\"</span></span>,\n                        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bibliographic software. a comparison.<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>England\u2019s monitor; The history of the separation<span class=\"pl-pds\">\"</span></span>,\n                        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>England\u2019s Monitor; the History of the Separation<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Dr. schultz: a dentist turned bounty hunter.<span class=\"pl-pds\">\"</span></span>,\n                        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Dr. schultz: a dentist turned bounty hunter.<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Example case. {EXCLUDED SENTENCE.}<span class=\"pl-pds\">\"</span></span>,\n                        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Example case. {EXCLUDED SENTENCE.}<span class=\"pl-pds\">\"</span></span>),\n                <span class=\"pl-smi\">Arguments</span><span class=\"pl-k\">.</span>of(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I have {Aa} dream<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SentenceCaseFormatter</span>()<span class=\"pl-k\">.</span>getExampleInput())\n        );\n    }\n\n    <span class=\"pl-k\">@ParameterizedTest</span>\n    <span class=\"pl-k\">@MethodSource</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testData<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">test</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">expected</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-v\">input</span>) {\n        assertEquals(expected, formatter<span class=\"pl-k\">.</span>format(input));\n    }\n}</pre></div>\n<p dir=\"auto\">OK, the descriptions are lost. Maybe, the description could be added as first paramter to the <code>test</code> method.</p>", "author": "koppor", "createdAt": "2020-09-20T13:23:01Z", "path": "src/test/java/org/jabref/logic/formatter/casechanger/SentenceCaseFormatterTest.java", "diffHunk": "@@ -25,6 +25,36 @@ public void test() {\n         assertEquals(\"Upper {N}ot first\", formatter.format(\"upper {N}OT FIRST\"));\n     }\n \n+    @Test", "originalCommit": "d2eaf1a5899b613e125ae15bfa3c6853d2921f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a9ff15e508caab4dce607bf652cf4ea6a855921", "url": "https://github.com/JabRef/jabref/commit/4a9ff15e508caab4dce607bf652cf4ea6a855921", "message": "refactor sentence case and title case format method, add additional info to ADR", "committedDate": "2020-09-21T14:46:37Z", "type": "commit"}, {"oid": "338e03afc2b10d909088b00154dbf51b0f8d676b", "url": "https://github.com/JabRef/jabref/commit/338e03afc2b10d909088b00154dbf51b0f8d676b", "message": "refactor titlecase and sentencecase tests", "committedDate": "2020-09-22T09:37:22Z", "type": "commit"}, {"oid": "f9f05a93bf6cbf694a7b305bff3d4f833b812909", "url": "https://github.com/JabRef/jabref/commit/f9f05a93bf6cbf694a7b305bff3d4f833b812909", "message": "fix checkstyle issues", "committedDate": "2020-09-23T10:37:35Z", "type": "commit"}, {"oid": "856c4a7a68d0be38f9f3b519415e14ccc4fa5160", "url": "https://github.com/JabRef/jabref/commit/856c4a7a68d0be38f9f3b519415e14ccc4fa5160", "message": "fix checkstyle issues", "committedDate": "2020-09-23T11:05:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MDMxMA==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r493580310", "body": "Is there a reason why these tests are commented out?", "bodyText": "Is there a reason why these tests are commented out?", "bodyHTML": "<p dir=\"auto\">Is there a reason why these tests are commented out?</p>", "author": "Siedlerchr", "createdAt": "2020-09-23T13:21:12Z", "path": "src/test/java/org/jabref/logic/formatter/casechanger/TitleCaseFormatterTest.java", "diffHunk": "@@ -10,8 +13,43 @@\n  */\n public class TitleCaseFormatterTest {\n \n-    private TitleCaseFormatter formatter;\n+    private final TitleCaseFormatter formatter = new TitleCaseFormatter();\n+\n+    private static Stream<Arguments> testData() {\n+        return Stream.of(\n+                Arguments.of(\"Upper Each First\", \"upper each first\"),\n+                Arguments.of(\"Upper Each First\", \"upper eACH first\"),\n+                Arguments.of(\"An Upper Each First And\", \"an upper each first and\"),\n+                Arguments.of(\"An Upper Each First And\", \"an upper each first AND\"),\n+                Arguments.of(\"An Upper Each of the and First And\",\n+                             \"an upper each of the and first and\"),\n+                Arguments.of(\"An Upper Each of the and First And\",\n+                             \"an upper each of the AND first and\"),\n+                Arguments.of(\"An Upper Each of: The and First And\",\n+                             \"an upper each of: the and first and\"),\n+                Arguments.of(\"An Upper First with and without {CURLY} {brackets}\",\n+                             \"AN UPPER FIRST WITH AND WITHOUT {CURLY} {brackets}\"),\n+                Arguments.of(\"An Upper First with {A}nd without {C}urly {b}rackets\",\n+                             \"AN UPPER FIRST WITH {A}ND WITHOUT {C}URLY {b}rackets\"),\n+                Arguments.of(\"{b}rackets {b}rac{K}ets Brack{E}ts\",\n+                             \"{b}RaCKeTS {b}RaC{K}eTS bRaCK{E}ts\"),\n+                Arguments.of(\"Two Experiences Designing for Effective Security\",\n+                             \"Two experiences designing for effective security\"),\n+                Arguments.of(\"Bibliographic Software. A Comparison.\",\n+                             \"bibliographic software. a comparison.\"),\n+                Arguments.of(\"Bibliographic Software. {A COMPARISON.}\",\n+                             \"bibliographic software. {A COMPARISON.}\"),\n+                Arguments.of(\"{BPMN} Conformance in Open Source Engines\",\n+                             new TitleCaseFormatter().getExampleInput()));\n+    }\n \n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n+    public void test(String expected, String input) {\n+        assertEquals(expected, formatter.format(input));\n+    }\n+\n+    /*", "originalCommit": "856c4a7a68d0be38f9f3b519415e14ccc4fa5160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2ODE1Mg==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r493668152", "bodyText": "They are redundant as I already added them as parameterized tests but I didn't know if I should delete them yet since they contain the descriptions of the tests.", "author": "tmrd993", "createdAt": "2020-09-23T15:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MjQ4NQ==", "url": "https://github.com/JabRef/jabref/pull/6872#discussion_r493682485", "bodyText": "Then just remove them. I think it's clear from the arguments what is tested", "author": "Siedlerchr", "createdAt": "2020-09-23T15:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MDMxMA=="}], "type": "inlineReview"}, {"oid": "9237d0743d1cfba6275bc5ac7fe1682231a98577", "url": "https://github.com/JabRef/jabref/commit/9237d0743d1cfba6275bc5ac7fe1682231a98577", "message": "remove redundant test cases", "committedDate": "2020-09-23T15:55:00Z", "type": "commit"}]}