{"pr_number": 2503, "pr_title": "Begin cleanup of core plugin entity mixins", "pr_createdAt": "2020-02-14T02:53:53Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/2503", "merge_commit": "454e93dd9dd3a1f6fed51d17450ae64a9435fb6f", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjEwMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379232100", "body": "Could you maybe move these to the `Constants` class?", "bodyText": "Could you maybe move these to the Constants class?", "bodyHTML": "<p dir=\"auto\">Could you maybe move these to the <code>Constants</code> class?</p>", "author": "gabizou", "createdAt": "2020-02-14T03:12:30Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -203,7 +191,7 @@\n         final EntityTypeBridge entityTypeBridge = (EntityTypeBridge) entityType;\n         if (!entityTypeBridge.bridge$checkedDamageEntity()) {\n             try {\n-                final String mapping = SpongeImplHooks.isDeobfuscatedEnvironment() ? \"damageEntity\" : \"func_70665_d\";\n+                final String mapping = SpongeImplHooks.isDeobfuscatedEnvironment() ? \"attackEntityFrom\" : \"func_70097_a\";", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -191,7 +206,7 @@\n         final EntityTypeBridge entityTypeBridge = (EntityTypeBridge) entityType;\n         if (!entityTypeBridge.bridge$checkedDamageEntity()) {\n             try {\n-                final String mapping = SpongeImplHooks.isDeobfuscatedEnvironment() ? \"attackEntityFrom\" : \"func_70097_a\";\n+                final String mapping = SpongeImplHooks.isDeobfuscatedEnvironment() ? Constants.Entity.ATTACK_ENTITY_FROM_MAPPING : Constants.Entity.ATTACK_ENTITY_FROM_OBFUSCATED;\n                 final Class<?>[] argTypes = {DamageSource.class, float.class};\n                 final Class<?> clazz = this.getClass().getMethod(mapping, argTypes).getDeclaringClass();\n                 if (!(clazz.equals(LivingEntity.class) || clazz.equals(PlayerEntity.class) || clazz.equals(ServerPlayerEntity.class))) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjI0MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379232241", "body": "`final Vec3d vec3d`", "bodyText": "final Vec3d vec3d", "bodyHTML": "<p dir=\"auto\"><code>final Vec3d vec3d</code></p>", "author": "gabizou", "createdAt": "2020-02-14T03:13:13Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -301,15 +289,15 @@ public void dismountRidingEntity() {\n     @Override\n     public boolean bridge$removePassengers(final DismountType type) {\n         boolean dismount = false;\n-        for (int i = this.riddenByEntities.size() - 1; i >= 0; --i) {\n-            dismount = ((EntityMixin) (Object) this.riddenByEntities.get(i)).spongeImpl$dismountRidingEntity(type) || dismount;\n+        for (int i = this.passengers.size() - 1; i >= 0; --i) {\n+            dismount = ((EntityMixin) (Object) this.passengers.get(i)).spongeImpl$dismountRidingEntity(type) || dismount;\n         }\n         return dismount;\n     }\n \n     @Inject(method = \"move\", at = @At(\"HEAD\"), cancellable = true)\n-    private void spongeImpl$onSpongeMoveEntity(final MoverType type, final double x, final double y, final double z, final CallbackInfo ci) {\n-        if (!this.world.isRemote && !SpongeHooks.checkEntitySpeed(((Entity) (Object) this), x, y, z)) {\n+    private void spongeImpl$onSpongeMoveEntity(final MoverType type, Vec3d vec3d, final CallbackInfo ci) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -290,13 +305,13 @@ public void stopRiding() {\n     public boolean bridge$removePassengers(final DismountType type) {\n         boolean dismount = false;\n         for (int i = this.passengers.size() - 1; i >= 0; --i) {\n-            dismount = ((EntityMixin) (Object) this.passengers.get(i)).spongeImpl$dismountRidingEntity(type) || dismount;\n+            dismount = ((EntityMixin) (Object) this.passengers.get(i)).impl$dismountRidingEntity(type) || dismount;\n         }\n         return dismount;\n     }\n \n     @Inject(method = \"move\", at = @At(\"HEAD\"), cancellable = true)\n-    private void spongeImpl$onSpongeMoveEntity(final MoverType type, Vec3d vec3d, final CallbackInfo ci) {\n+    private void impl$onSpongeMoveEntity(final MoverType type, final Vec3d vec3d, final CallbackInfo ci) {\n         if (!this.world.isRemote && !SpongeHooks.checkEntitySpeed(((Entity) (Object) this), vec3d.getX(), vec3d.getY(), vec3d.getZ())) {\n             ci.cancel();\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjU5NA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379232594", "body": "If you're moving this to a new line, change the `at = @At` to new line, so like:\r\n```java\r\n@Redirect(method = \"doBlockCollisions,\r\n    at = @At(value = \"INVOKE\",\r\n        target = \"Lnet/n....\"\r\n    )\r\n)\r\n```\r\nThis way it's clearer, at least it's the format I'm trying to migrate the codebase to.", "bodyText": "If you're moving this to a new line, change the at = @At to new line, so like:\n@Redirect(method = \"doBlockCollisions,\n    at = @At(value = \"INVOKE\",\n        target = \"Lnet/n....\"\n    )\n)\nThis way it's clearer, at least it's the format I'm trying to migrate the codebase to.", "bodyHTML": "<p dir=\"auto\">If you're moving this to a new line, change the <code>at = @At</code> to new line, so like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Redirect(method = &quot;doBlockCollisions,\n    at = @At(value = &quot;INVOKE&quot;,\n        target = &quot;Lnet/n....&quot;\n    )\n)\"><pre><span class=\"pl-k\">@Redirect</span>(<span class=\"pl-c1\">method</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>doBlockCollisions,</span>\n<span class=\"pl-s\">    at = @At(value = <span class=\"pl-pds\">\"</span></span><span class=\"pl-c1\">INVOKE</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,</span>\n<span class=\"pl-s\">        target = <span class=\"pl-pds\">\"</span></span><span class=\"pl-smi\">Lnet</span><span class=\"pl-k\">/</span>n<span class=\"pl-k\">.</span><span class=\"pl-c1\">...</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-s\">    )</span>\n<span class=\"pl-s\">)</span></pre></div>\n<p dir=\"auto\">This way it's clearer, at least it's the format I'm trying to migrate the codebase to.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:15:19Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -558,21 +544,22 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n \n     }\n \n-    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n-    private void spongeImpl$onEntityCollideWithBlockState(\n-        final Block block, final net.minecraft.world.World world, final BlockPos pos, final BlockState state, final Entity entity) {\n+    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\",\n+        target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -539,34 +553,36 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n         final BlockState state = world.getBlockState(pos);\n         if (!SpongeCommonEventFactory.handleCollideBlockEvent(block, world, pos, state, entity, Direction.NONE)) {\n             block.onEntityWalk(world, pos, entity);\n-            this.lastCollidedBlockPos = pos;\n+            this.impl$lastCollidedBlockPos = pos;\n         }\n \n     }\n \n-    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\",\n-        target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n-    private void spongeImpl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n+    @Redirect(method = \"doBlockCollisions\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\"\n+        )\n+    ) // doBlockCollisions\n+    private void impl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n         // if block can't collide, return\n         if (!((BlockBridge) blockState.getBlock()).bridge$hasCollideWithStateLogic()) {\n             return;\n         }\n \n         if (world.isRemote) {\n-            // In 1.14, why are we calling the state instead? You will notice these methods are deprecated on block since you are supposed to call the state method instead, the methods aren't actually deprecated.\n             blockState.onEntityCollision(world, pos, entityIn);\n             return;\n         }\n \n         if (!SpongeCommonEventFactory.handleCollideBlockEvent(blockState.getBlock(), world, pos, blockState, entityIn, Direction.NONE)) {\n             blockState.onEntityCollision(world, pos, entityIn);\n-            this.lastCollidedBlockPos = pos;\n+            this.impl$lastCollidedBlockPos = pos;\n         }\n \n     }\n \n     @Redirect(method = \"updateFallState\", at = @At(value = \"INVOKE\", target=\"Lnet/minecraft/block/Block;onFallenUpon(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;F)V\"))\n-    private void spongeImpl$onBlockFallenUpon(\n+    private void impl$onBlockFallenUpon(\n         final Block block, final net.minecraft.world.World world, final BlockPos pos, final Entity entity, final float fallDistance) {\n         if (world.isRemote) {\n             block.onFallenUpon(world, pos, entity, fallDistance);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjYzMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379232630", "body": "s/`spongeImpl`/`impl`", "bodyText": "s/spongeImpl/impl", "bodyHTML": "<p dir=\"auto\">s/<code>spongeImpl</code>/<code>impl</code></p>", "author": "gabizou", "createdAt": "2020-02-14T03:15:32Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -558,21 +544,22 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n \n     }\n \n-    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n-    private void spongeImpl$onEntityCollideWithBlockState(\n-        final Block block, final net.minecraft.world.World world, final BlockPos pos, final BlockState state, final Entity entity) {\n+    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\",\n+        target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n+    private void spongeImpl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -539,34 +553,36 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n         final BlockState state = world.getBlockState(pos);\n         if (!SpongeCommonEventFactory.handleCollideBlockEvent(block, world, pos, state, entity, Direction.NONE)) {\n             block.onEntityWalk(world, pos, entity);\n-            this.lastCollidedBlockPos = pos;\n+            this.impl$lastCollidedBlockPos = pos;\n         }\n \n     }\n \n-    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\",\n-        target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n-    private void spongeImpl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n+    @Redirect(method = \"doBlockCollisions\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\"\n+        )\n+    ) // doBlockCollisions\n+    private void impl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n         // if block can't collide, return\n         if (!((BlockBridge) blockState.getBlock()).bridge$hasCollideWithStateLogic()) {\n             return;\n         }\n \n         if (world.isRemote) {\n-            // In 1.14, why are we calling the state instead? You will notice these methods are deprecated on block since you are supposed to call the state method instead, the methods aren't actually deprecated.\n             blockState.onEntityCollision(world, pos, entityIn);\n             return;\n         }\n \n         if (!SpongeCommonEventFactory.handleCollideBlockEvent(blockState.getBlock(), world, pos, blockState, entityIn, Direction.NONE)) {\n             blockState.onEntityCollision(world, pos, entityIn);\n-            this.lastCollidedBlockPos = pos;\n+            this.impl$lastCollidedBlockPos = pos;\n         }\n \n     }\n \n     @Redirect(method = \"updateFallState\", at = @At(value = \"INVOKE\", target=\"Lnet/minecraft/block/Block;onFallenUpon(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;F)V\"))\n-    private void spongeImpl$onBlockFallenUpon(\n+    private void impl$onBlockFallenUpon(\n         final Block block, final net.minecraft.world.World world, final BlockPos pos, final Entity entity, final float fallDistance) {\n         if (world.isRemote) {\n             block.onFallenUpon(world, pos, entity, fallDistance);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjgzMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379232831", "body": "Leave out the comment. It's a recognized 1.14 change to call the methods on `BlockState` instead of the parent `Block`.", "bodyText": "Leave out the comment. It's a recognized 1.14 change to call the methods on BlockState instead of the parent Block.", "bodyHTML": "<p dir=\"auto\">Leave out the comment. It's a recognized 1.14 change to call the methods on <code>BlockState</code> instead of the parent <code>Block</code>.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:16:29Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -558,21 +544,22 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n \n     }\n \n-    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n-    private void spongeImpl$onEntityCollideWithBlockState(\n-        final Block block, final net.minecraft.world.World world, final BlockPos pos, final BlockState state, final Entity entity) {\n+    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\",\n+        target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n+    private void spongeImpl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n         // if block can't collide, return\n-        if (!((BlockBridge) block).bridge$hasCollideWithStateLogic()) {\n+        if (!((BlockBridge) blockState.getBlock()).bridge$hasCollideWithStateLogic()) {\n             return;\n         }\n \n         if (world.isRemote) {\n-            block.onEntityCollision(world, pos, state, entity);\n+            // In 1.14, why are we calling the state instead? You will notice these methods are deprecated on block since you are supposed to call the state method instead, the methods aren't actually deprecated.", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -539,34 +553,36 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n         final BlockState state = world.getBlockState(pos);\n         if (!SpongeCommonEventFactory.handleCollideBlockEvent(block, world, pos, state, entity, Direction.NONE)) {\n             block.onEntityWalk(world, pos, entity);\n-            this.lastCollidedBlockPos = pos;\n+            this.impl$lastCollidedBlockPos = pos;\n         }\n \n     }\n \n-    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\",\n-        target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n-    private void spongeImpl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n+    @Redirect(method = \"doBlockCollisions\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\"\n+        )\n+    ) // doBlockCollisions\n+    private void impl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n         // if block can't collide, return\n         if (!((BlockBridge) blockState.getBlock()).bridge$hasCollideWithStateLogic()) {\n             return;\n         }\n \n         if (world.isRemote) {\n-            // In 1.14, why are we calling the state instead? You will notice these methods are deprecated on block since you are supposed to call the state method instead, the methods aren't actually deprecated.\n             blockState.onEntityCollision(world, pos, entityIn);\n             return;\n         }\n \n         if (!SpongeCommonEventFactory.handleCollideBlockEvent(blockState.getBlock(), world, pos, blockState, entityIn, Direction.NONE)) {\n             blockState.onEntityCollision(world, pos, entityIn);\n-            this.lastCollidedBlockPos = pos;\n+            this.impl$lastCollidedBlockPos = pos;\n         }\n \n     }\n \n     @Redirect(method = \"updateFallState\", at = @At(value = \"INVOKE\", target=\"Lnet/minecraft/block/Block;onFallenUpon(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;F)V\"))\n-    private void spongeImpl$onBlockFallenUpon(\n+    private void impl$onBlockFallenUpon(\n         final Block block, final net.minecraft.world.World world, final BlockPos pos, final Entity entity, final float fallDistance) {\n         if (world.isRemote) {\n             block.onFallenUpon(world, pos, entity, fallDistance);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjkxNQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379232915", "body": "Do we need to pass in the block anymore?", "bodyText": "Do we need to pass in the block anymore?", "bodyHTML": "<p dir=\"auto\">Do we need to pass in the block anymore?</p>", "author": "gabizou", "createdAt": "2020-02-14T03:16:51Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -558,21 +544,22 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n \n     }\n \n-    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/Block;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n-    private void spongeImpl$onEntityCollideWithBlockState(\n-        final Block block, final net.minecraft.world.World world, final BlockPos pos, final BlockState state, final Entity entity) {\n+    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\",\n+        target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n+    private void spongeImpl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n         // if block can't collide, return\n-        if (!((BlockBridge) block).bridge$hasCollideWithStateLogic()) {\n+        if (!((BlockBridge) blockState.getBlock()).bridge$hasCollideWithStateLogic()) {\n             return;\n         }\n \n         if (world.isRemote) {\n-            block.onEntityCollision(world, pos, state, entity);\n+            // In 1.14, why are we calling the state instead? You will notice these methods are deprecated on block since you are supposed to call the state method instead, the methods aren't actually deprecated.\n+            blockState.onEntityCollision(world, pos, entityIn);\n             return;\n         }\n \n-        if (!SpongeCommonEventFactory.handleCollideBlockEvent(block, world, pos, state, entity, Direction.NONE)) {\n-            block.onEntityCollision(world, pos, state, entity);\n+        if (!SpongeCommonEventFactory.handleCollideBlockEvent(blockState.getBlock(), world, pos, blockState, entityIn, Direction.NONE)) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMTg2Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379711867", "bodyText": "The SpongeCommonEventFactory method it calls is with that block param is bridge$addTrackedBlockPosition, so I don't wholey know if It needs to stay.", "author": "i509VCB", "createdAt": "2020-02-15T02:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -539,34 +553,36 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n         final BlockState state = world.getBlockState(pos);\n         if (!SpongeCommonEventFactory.handleCollideBlockEvent(block, world, pos, state, entity, Direction.NONE)) {\n             block.onEntityWalk(world, pos, entity);\n-            this.lastCollidedBlockPos = pos;\n+            this.impl$lastCollidedBlockPos = pos;\n         }\n \n     }\n \n-    @Redirect(method = \"doBlockCollisions\", at = @At(value = \"INVOKE\",\n-        target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\")) // doBlockCollisions\n-    private void spongeImpl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n+    @Redirect(method = \"doBlockCollisions\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/block/BlockState;onEntityCollision(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;)V\"\n+        )\n+    ) // doBlockCollisions\n+    private void impl$onEntityCollideWithBlockState(BlockState blockState, net.minecraft.world.World worldIn, BlockPos pos, Entity entityIn) {\n         // if block can't collide, return\n         if (!((BlockBridge) blockState.getBlock()).bridge$hasCollideWithStateLogic()) {\n             return;\n         }\n \n         if (world.isRemote) {\n-            // In 1.14, why are we calling the state instead? You will notice these methods are deprecated on block since you are supposed to call the state method instead, the methods aren't actually deprecated.\n             blockState.onEntityCollision(world, pos, entityIn);\n             return;\n         }\n \n         if (!SpongeCommonEventFactory.handleCollideBlockEvent(blockState.getBlock(), world, pos, blockState, entityIn, Direction.NONE)) {\n             blockState.onEntityCollision(world, pos, entityIn);\n-            this.lastCollidedBlockPos = pos;\n+            this.impl$lastCollidedBlockPos = pos;\n         }\n \n     }\n \n     @Redirect(method = \"updateFallState\", at = @At(value = \"INVOKE\", target=\"Lnet/minecraft/block/Block;onFallenUpon(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/entity/Entity;F)V\"))\n-    private void spongeImpl$onBlockFallenUpon(\n+    private void impl$onBlockFallenUpon(\n         final Block block, final net.minecraft.world.World world, final BlockPos pos, final Entity entity, final float fallDistance) {\n         if (world.isRemote) {\n             block.onFallenUpon(world, pos, entity, fallDistance);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjk5Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379232992", "body": "Fix the method name with `impl$` prefix.", "bodyText": "Fix the method name with impl$ prefix.", "bodyHTML": "<p dir=\"auto\">Fix the method name with <code>impl$</code> prefix.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:17:14Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -672,48 +659,48 @@ private boolean spongeApplyEntityCollisionCheckVanish(final Entity entity) {\n         return entity.noClip || ((VanishableBridge) entity).bridge$isVanished();\n     }\n \n-    @Redirect(method = \"doWaterSplashEffect\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;spawnParticle(Lnet/minecraft/util/EnumParticleTypes;DDDDDD[I)V\"))\n-    private void spawnParticle(final net.minecraft.world.World world, final EnumParticleTypes particleTypes, final double xCoord, final double yCoord, final double zCoord,\n-        final double xOffset, final double yOffset, final double zOffset, final int... p_175688_14_) {\n+    @Redirect(method = \"doWaterSplashEffect\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;addParticle(Lnet/minecraft/particles/IParticleData;DDDDDD)V\"))\n+    private void spawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -650,17 +666,17 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n      * This prevents sounds from being sent to the server by entities that are vanished\n      */\n     @Redirect(method = \"playSound\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/Entity;isSilent()Z\"))\n-    private boolean spongeImpl$checkIsSilentOrInvis(final Entity entity) {\n+    private boolean impl$checkIsSilentOrInvis(final Entity entity) {\n         return entity.isSilent() || this.vanish$isVanished;\n     }\n \n     @Redirect(method = \"applyEntityCollision\", at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/Entity;noClip:Z\", opcode = Opcodes.GETFIELD))\n-    private boolean spongeApplyEntityCollisionCheckVanish(final Entity entity) {\n+    private boolean impl$applyEntityCollisionCheckVanish(final Entity entity) {\n         return entity.noClip || ((VanishableBridge) entity).bridge$isVanished();\n     }\n \n     @Redirect(method = \"doWaterSplashEffect\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;addParticle(Lnet/minecraft/particles/IParticleData;DDDDDD)V\"))\n-    private void spawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,\n+    private void impl$spawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,\n                                final double xOffset, final double yOffset, final double zOffset) {\n         if (!this.vanish$isVanished) {\n             this.world.addParticle(particleTypes, xCoord, yCoord, zCoord, xOffset, yOffset, zOffset);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMzAzMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379233030", "body": "Same here, fix the prefixing.", "bodyText": "Same here, fix the prefixing.", "bodyHTML": "<p dir=\"auto\">Same here, fix the prefixing.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:17:25Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -672,48 +659,48 @@ private boolean spongeApplyEntityCollisionCheckVanish(final Entity entity) {\n         return entity.noClip || ((VanishableBridge) entity).bridge$isVanished();\n     }\n \n-    @Redirect(method = \"doWaterSplashEffect\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;spawnParticle(Lnet/minecraft/util/EnumParticleTypes;DDDDDD[I)V\"))\n-    private void spawnParticle(final net.minecraft.world.World world, final EnumParticleTypes particleTypes, final double xCoord, final double yCoord, final double zCoord,\n-        final double xOffset, final double yOffset, final double zOffset, final int... p_175688_14_) {\n+    @Redirect(method = \"doWaterSplashEffect\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;addParticle(Lnet/minecraft/particles/IParticleData;DDDDDD)V\"))\n+    private void spawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,\n+                               final double xOffset, final double yOffset, final double zOffset) {\n         if (!this.vanish$isVanished) {\n-            this.world.spawnParticle(particleTypes, xCoord, yCoord, zCoord, xOffset, yOffset, zOffset, p_175688_14_);\n+            this.world.addParticle(particleTypes, xCoord, yCoord, zCoord, xOffset, yOffset, zOffset);\n         }\n     }\n \n-    @Redirect(method = \"createRunningParticles\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;spawnParticle(Lnet/minecraft/util/EnumParticleTypes;DDDDDD[I)V\"))\n-    private void runningSpawnParticle(final net.minecraft.world.World world, final EnumParticleTypes particleTypes, final double xCoord, final double yCoord, final double zCoord,\n-        final double xOffset, final double yOffset, final double zOffset, final int... p_175688_14_) {\n+    @Redirect(method = \"createRunningParticles\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;addParticle(Lnet/minecraft/particles/IParticleData;DDDDDD)V\"))\n+    private void runningSpawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -650,17 +666,17 @@ private void onSpongeReadFromNBT(final CompoundNBT compound, final CallbackInfo\n      * This prevents sounds from being sent to the server by entities that are vanished\n      */\n     @Redirect(method = \"playSound\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/Entity;isSilent()Z\"))\n-    private boolean spongeImpl$checkIsSilentOrInvis(final Entity entity) {\n+    private boolean impl$checkIsSilentOrInvis(final Entity entity) {\n         return entity.isSilent() || this.vanish$isVanished;\n     }\n \n     @Redirect(method = \"applyEntityCollision\", at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/Entity;noClip:Z\", opcode = Opcodes.GETFIELD))\n-    private boolean spongeApplyEntityCollisionCheckVanish(final Entity entity) {\n+    private boolean impl$applyEntityCollisionCheckVanish(final Entity entity) {\n         return entity.noClip || ((VanishableBridge) entity).bridge$isVanished();\n     }\n \n     @Redirect(method = \"doWaterSplashEffect\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;addParticle(Lnet/minecraft/particles/IParticleData;DDDDDD)V\"))\n-    private void spawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,\n+    private void impl$spawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,\n                                final double xOffset, final double yOffset, final double zOffset) {\n         if (!this.vanish$isVanished) {\n             this.world.addParticle(particleTypes, xCoord, yCoord, zCoord, xOffset, yOffset, zOffset);\n", "next_change": null}, {"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex af34a1b71..fd4d408b7 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -668,7 +684,7 @@ private void spawnParticle(final net.minecraft.world.World world, final IParticl\n     }\n \n     @Redirect(method = \"createRunningParticles\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;addParticle(Lnet/minecraft/particles/IParticleData;DDDDDD)V\"))\n-    private void runningSpawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,\n+    private void impl$runningSpawnParticle(final net.minecraft.world.World world, final IParticleData particleTypes, final double xCoord, final double yCoord, final double zCoord,\n         final double xOffset, final double yOffset, final double zOffset) {\n         if (!this.vanish$isVanished) {\n             this.world.addParticle(particleTypes, xCoord, yCoord, zCoord, xOffset, yOffset, zOffset);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMzQ1OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379233458", "body": "Add a `TODO` for me to review this bit of code, it might be refactored into oblivion later when entity capturing is reviewed.", "bodyText": "Add a TODO for me to review this bit of code, it might be refactored into oblivion later when entity capturing is reviewed.", "bodyHTML": "<p dir=\"auto\">Add a <code>TODO</code> for me to review this bit of code, it might be refactored into oblivion later when entity capturing is reviewed.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:19:32Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -743,7 +730,7 @@ public ItemEntity entityDropItem(final ItemStack stack, final float offsetY) {\n             } else {\n                 final ItemEntity entityitem = new ItemEntity(this.world, this.posX, this.posY + (double) offsetY, this.posZ, stack);\n                 entityitem.setDefaultPickupDelay();\n-                this.world.addEntity0(entityitem);", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMzU5Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379233597", "body": "Is it on `EntityTypeBridge`? Did you add that or is that being inherited from `TimingsHolder` (or whatever the interface is)?", "bodyText": "Is it on EntityTypeBridge? Did you add that or is that being inherited from TimingsHolder (or whatever the interface is)?", "bodyHTML": "<p dir=\"auto\">Is it on <code>EntityTypeBridge</code>? Did you add that or is that being inherited from <code>TimingsHolder</code> (or whatever the interface is)?</p>", "author": "gabizou", "createdAt": "2020-02-14T03:20:22Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -754,12 +741,12 @@ public ItemEntity entityDropItem(final ItemStack stack, final float offsetY) {\n     @Nullable\n     @Override\n     public BlockPos bridge$getLastCollidedBlockPos() {\n-        return this.lastCollidedBlockPos;\n+        return this.impl$lastCollidedBlockPos;\n     }\n \n     @Override\n     public Timing bridge$getTimingsHandler() {\n-        return this.entityType.getTimingsHandler();\n+        return ((EntityTypeBridge) this.shadow$getType()).bridge$getTimings();", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMjA0NA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379712044", "bodyText": "There isn't a TimingsHolder interface but there is a timings instance inside of EntityTypeMixin which is what this bridge refers to.", "author": "i509VCB", "createdAt": "2020-02-15T02:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMzU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5OTc3NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382399775", "bodyText": "I see, I stand corrected. I was vaguely remembering timings to be instanced based on the bridge interface separate from the targeted bridges, but that's a separate story", "author": "gabizou", "createdAt": "2020-02-21T05:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMzU5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMzc1NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379233755", "body": "Fix the method name here please.", "bodyText": "Fix the method name here please.", "bodyHTML": "<p dir=\"auto\">Fix the method name here please.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:21:05Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java", "diffHunk": "@@ -330,7 +333,7 @@ private EntityDeathContext createOrNullDeathPhase(final boolean isMainThread, fi\n         return null;\n     }\n \n-    @Redirect(method = \"applyPotionDamageCalculations\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;isPotionActive(Lnet/minecraft/potion/Potion;)Z\") )\n+    @Redirect(method = \"applyPotionDamageCalculations\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;isPotionActive(Lnet/minecraft/potion/Effect;)Z\") )\n     private boolean onIsPotionActive(final LivingEntity entityIn, final Effect potion) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\nindex c276511ea..0d1833513 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n", "chunk": "@@ -334,7 +336,7 @@ private EntityDeathContext createOrNullDeathPhase(final boolean isMainThread, fi\n     }\n \n     @Redirect(method = \"applyPotionDamageCalculations\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;isPotionActive(Lnet/minecraft/potion/Effect;)Z\") )\n-    private boolean onIsPotionActive(final LivingEntity entityIn, final Effect potion) {\n+    private boolean impl$onIsPotionActive(final LivingEntity entityIn, final Effect potion) {\n         return false; // handled in our bridge$damageEntityHook\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDAzMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234033", "body": "Should be `shadow$` prefixed if it's calling a shadow method (Yes, I know this is an overwrite).", "bodyText": "Should be shadow$ prefixed if it's calling a shadow method (Yes, I know this is an overwrite).", "bodyHTML": "<p dir=\"auto\">Should be <code>shadow$</code> prefixed if it's calling a shadow method (Yes, I know this is an overwrite).</p>", "author": "gabizou", "createdAt": "2020-02-14T03:22:28Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java", "diffHunk": "@@ -385,7 +388,7 @@ public boolean attackEntityFrom(final DamageSource source, final float amount) {\n             return false;\n         }\n         // Sponge end\n-        if (this.isEntityInvulnerable(source)) {\n+        if (this.isInvulnerableTo(source)) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\nindex c276511ea..0d1833513 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n", "chunk": "@@ -388,7 +390,7 @@ public boolean attackEntityFrom(final DamageSource source, final float amount) {\n             return false;\n         }\n         // Sponge end\n-        if (this.isInvulnerableTo(source)) {\n+        if (this.shadow$isInvulnerableTo(source)) {\n             return false;\n         } else if (this.world.isRemote) {\n             return false;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDA1OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234058", "body": "Same here", "bodyText": "Same here", "bodyHTML": "<p dir=\"auto\">Same here</p>", "author": "gabizou", "createdAt": "2020-02-14T03:22:36Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java", "diffHunk": "@@ -590,7 +593,7 @@ private void spawnItemParticle(final World world, final EnumParticleTypes partic\n     @SuppressWarnings(\"ConstantConditions\")\n     @Override\n     public boolean bridge$damageEntityHook(final DamageSource damageSource, float damage) {\n-        if (!this.isEntityInvulnerable(damageSource)) {\n+        if (!this.isInvulnerableTo(damageSource)) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\nindex c276511ea..0d1833513 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n", "chunk": "@@ -593,7 +595,7 @@ private void spawnItemParticle(final World world, final EnumParticleTypes partic\n     @SuppressWarnings(\"ConstantConditions\")\n     @Override\n     public boolean bridge$damageEntityHook(final DamageSource damageSource, float damage) {\n-        if (!this.isInvulnerableTo(damageSource)) {\n+        if (!this.shadow$isInvulnerableTo(damageSource)) {\n             final boolean human = (LivingEntity) (Object) this instanceof PlayerEntity;\n             // apply forge damage hook\n             damage = this.bridge$applyModDamage((LivingEntity) (Object) this, damageSource, damage);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDE5MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234191", "body": "Fix the method name for this, don't keep it same named with the added prefix.", "bodyText": "Fix the method name for this, don't keep it same named with the added prefix.", "bodyHTML": "<p dir=\"auto\">Fix the method name for this, don't keep it same named with the added prefix.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:23:13Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java", "diffHunk": "@@ -872,7 +875,7 @@ private void causeTrackDeathUpdate(final LivingEntity entityLivingBase) {\n         }\n     }\n \n-    @Redirect(method = \"onDeathUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;getExperiencePoints(Lnet/minecraft/entity/player/EntityPlayer;)I\"))\n+    @Redirect(method = \"onDeathUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;getExperiencePoints(Lnet/minecraft/entity/player/PlayerEntity;)I\"))\n     private int onGetExperiencePoints(final LivingEntity entity, final PlayerEntity attackingPlayer) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\nindex c276511ea..0d1833513 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n", "chunk": "@@ -851,32 +831,19 @@ public boolean canBeCollidedWith() {\n         return !(this.bridge$isVanished() && this.bridge$isUncollideable()) && !this.isDead;\n     }\n \n-    @Redirect(method = \"updateFallState\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/WorldServer;spawnParticle(Lnet/minecraft/util/EnumParticleTypes;DDDIDDDD[I)V\"))\n-    private void spongeSpawnParticleForFallState(\n-        final ServerWorld worldServer, final EnumParticleTypes particleTypes, final double xCoord, final double yCoord,\n-            final double zCoord, final int numberOfParticles, final double xOffset, final double yOffset, final double zOffset, final double particleSpeed, final int... extraArgs) {\n+    @Redirect(method = \"updateFallState\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/server/ServerWorld;spawnParticle(Lnet/minecraft/particles/IParticleData;DDDIDDDD)I\"))\n+    private int impl$vanishSpawnParticleForFallState(\n+        final ServerWorld serverWorld, final IParticleData particleTypes, final double xCoord, final double yCoord,\n+        final double zCoord, final int numberOfParticles, final double xOffset, final double yOffset, final double zOffset, final double particleSpeed) {\n         if (!this.bridge$isVanished()) {\n-            worldServer.spawnParticle(particleTypes, xCoord, yCoord, zCoord, numberOfParticles, xOffset, yOffset, zOffset, particleSpeed, extraArgs);\n+            serverWorld.spawnParticle(particleTypes, xCoord, yCoord, zCoord, numberOfParticles, xOffset, yOffset, zOffset, particleSpeed);\n         }\n \n-    }\n-\n-    @Redirect(method = \"onEntityUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;onDeathUpdate()V\"))\n-    private void causeTrackDeathUpdate(final LivingEntity entityLivingBase) {\n-        if (!this.world.isRemote) {\n-            try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame();\n-                 final PhaseContext<?> context = EntityPhase.State.DEATH_UPDATE.createPhaseContext(PhaseTracker.SERVER).source(entityLivingBase)) {\n-                context.buildAndSwitch();\n-                frame.pushCause(this);\n-                this.onDeathUpdate();\n-            }\n-        } else {\n-            this.onDeathUpdate();\n-        }\n+        return 0; // TODO: Is this correct to return 0?\n     }\n \n     @Redirect(method = \"onDeathUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;getExperiencePoints(Lnet/minecraft/entity/player/PlayerEntity;)I\"))\n-    private int onGetExperiencePoints(final LivingEntity entity, final PlayerEntity attackingPlayer) {\n+    private int impl$modifyExperiencePointsOnDeath(final LivingEntity entity, final PlayerEntity attackingPlayer) {\n         if (entity instanceof PlayerEntityBridge) {\n             if (((PlayerEntityBridge) entity).bridge$keepInventory()) {\n                 return 0;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDIwOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234208", "body": "Prefix the method name.", "bodyText": "Prefix the method name.", "bodyHTML": "<p dir=\"auto\">Prefix the method name.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:23:21Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java", "diffHunk": "@@ -889,7 +892,7 @@ public void onEntityItemPickup(final Entity entityItem, final int unused, final\n         }\n     }\n \n-    @Inject(method = \"onItemUseFinish\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;resetActiveHand()V\"))\n+    @Inject(method = \"onItemUseFinish\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;resetActiveHand()V\"))\n     private void updateHealthForUseFinish(final CallbackInfo ci) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\nindex c276511ea..0d1833513 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n", "chunk": "@@ -886,14 +853,14 @@ private int onGetExperiencePoints(final LivingEntity entity, final PlayerEntity\n     }\n \n     @Inject(method = \"onItemPickup\", at = @At(\"HEAD\"))\n-    public void onEntityItemPickup(final Entity entityItem, final int unused, final CallbackInfo ci) {\n+    public void impl$onEntityItemPickup(final Entity entityItem, final int unused, final CallbackInfo ci) {\n         if (!this.world.isRemote) {\n //            EntityUtil.toMixin(entityItem).setDestructCause(Cause.of(NamedCause.of(\"PickedUp\", this)));\n         }\n     }\n \n     @Inject(method = \"onItemUseFinish\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;resetActiveHand()V\"))\n-    private void updateHealthForUseFinish(final CallbackInfo ci) {\n+    private void impl$updateHealthForUseFinish(final CallbackInfo ci) {\n         if (this instanceof ServerPlayerEntityBridge) {\n             ((ServerPlayerEntityBridge) this).bridge$refreshScaledHealth();\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDI1Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234252", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:23:32Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java", "diffHunk": "@@ -901,7 +904,7 @@ private void updateHealthForUseFinish(final CallbackInfo ci) {\n     // Start implementation of UseItemstackEvent\n \n     @Inject(method = \"setActiveHand\", cancellable = true, locals = LocalCapture.CAPTURE_FAILHARD,\n-            at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/EntityLivingBase;activeItemStack:Lnet/minecraft/item/ItemStack;\"))\n+            at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/LivingEntity;activeItemStack:Lnet/minecraft/item/ItemStack;\"))\n     private void onSetActiveItemStack(final Hand hand, final CallbackInfo ci, final ItemStack stack) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\nindex c276511ea..0d1833513 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n", "chunk": "@@ -905,7 +872,7 @@ private void updateHealthForUseFinish(final CallbackInfo ci) {\n \n     @Inject(method = \"setActiveHand\", cancellable = true, locals = LocalCapture.CAPTURE_FAILHARD,\n             at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/LivingEntity;activeItemStack:Lnet/minecraft/item/ItemStack;\"))\n-    private void onSetActiveItemStack(final Hand hand, final CallbackInfo ci, final ItemStack stack) {\n+    private void impl$onSetActiveItemStack(final Hand hand, final CallbackInfo ci, final ItemStack stack) {\n         if (this.world.isRemote) {\n             return;\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDI4MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234281", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:23:42Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java", "diffHunk": "@@ -950,7 +953,7 @@ private void addSelfToFrame(final CauseStackManager.StackFrame frame, final Item\n     }\n \n     @Redirect(method = \"updateActiveHand\",\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;getItemInUseCount()I\", ordinal = 0))\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;getItemInUseCount()I\", ordinal = 0))\n     private int onGetRemainingItemDuration(final LivingEntity self) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\nindex c276511ea..0d1833513 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n", "chunk": "@@ -954,7 +921,7 @@ private void addSelfToFrame(final CauseStackManager.StackFrame frame, final Item\n \n     @Redirect(method = \"updateActiveHand\",\n             at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;getItemInUseCount()I\", ordinal = 0))\n-    private int onGetRemainingItemDuration(final LivingEntity self) {\n+    private int impl$onGetRemainingItemDuration(final LivingEntity self) {\n         if (this.world.isRemote) {\n             return self.getItemInUseCount();\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDMwNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234304", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:23:50Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java", "diffHunk": "@@ -982,7 +985,7 @@ private int onGetRemainingItemDuration(final LivingEntity self) {\n \n     @SuppressWarnings(\"ConstantConditions\")\n     @Inject(method = \"onItemUseFinish\", cancellable = true,\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLivingBase;updateItemUse(Lnet/minecraft/item/ItemStack;I)V\"))\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;updateItemUse(Lnet/minecraft/item/ItemStack;I)V\"))\n     private void onUpdateItemUse(final CallbackInfo ci) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\nindex c276511ea..0d1833513 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/LivingEntityMixin.java\n", "chunk": "@@ -986,7 +953,7 @@ private int onGetRemainingItemDuration(final LivingEntity self) {\n     @SuppressWarnings(\"ConstantConditions\")\n     @Inject(method = \"onItemUseFinish\", cancellable = true,\n             at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;updateItemUse(Lnet/minecraft/item/ItemStack;I)V\"))\n-    private void onUpdateItemUse(final CallbackInfo ci) {\n+    private void impl$onUpdateItemUse(final CallbackInfo ci) {\n         if (this.world.isRemote) {\n             return;\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDM1MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234351", "body": "Fix the prefix, should be `impl$`.", "bodyText": "Fix the prefix, should be impl$.", "bodyHTML": "<p dir=\"auto\">Fix the prefix, should be <code>impl$</code>.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:24:03Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java", "diffHunk": "@@ -72,39 +72,39 @@\n @Mixin(MobEntity.class)\n public abstract class MobEntityMixin extends LivingEntityMixin {\n \n-    @Shadow @Final protected GoalSelector tasks;\n-    @Shadow @Final protected GoalSelector targetTasks;\n+    @Shadow @Final protected GoalSelector goalSelector;\n+    @Shadow @Final protected GoalSelector targetSelector;\n     @Shadow @Nullable private LivingEntity attackTarget;\n \n     @Shadow public abstract boolean isAIDisabled();\n-    @Shadow @Nullable public abstract net.minecraft.entity.Entity getLeashHolder();\n-    @Shadow protected abstract void initEntityAI();\n+    @Shadow @Nullable public abstract net.minecraft.entity.Entity shadow$getLeashHolder();\n+    @Shadow protected abstract void shadow$registerGoals();\n \n-    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLiving;initEntityAI()V\"))\n-    private void spongeImpl$initializeAI(final MobEntity this$0) {\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/MobEntity;registerGoals()V\"))\n+    private void spongeImpl$registerGoals(final MobEntity this$0) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\nindex a9ead8c95..fab0d98a1 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\n", "chunk": "@@ -81,7 +81,7 @@\n     @Shadow protected abstract void shadow$registerGoals();\n \n     @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/MobEntity;registerGoals()V\"))\n-    private void spongeImpl$registerGoals(final MobEntity this$0) {\n+    private void impl$registerGoals(final MobEntity this$0) {\n         this.initSpongeAI();\n         this.shadow$registerGoals();\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDQ5MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234490", "body": "Split out the `target` and `opcode` to new lines for shorter line lengths.", "bodyText": "Split out the target and opcode to new lines for shorter line lengths.", "bodyHTML": "<p dir=\"auto\">Split out the <code>target</code> and <code>opcode</code> to new lines for shorter line lengths.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:24:44Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java", "diffHunk": "@@ -138,10 +138,10 @@ private void callLeashEvent(final PlayerEntity playerIn, final Hand hand, final\n     }\n \n     @Inject(method = \"clearLeashed\",\n-        at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/EntityLiving;isLeashed:Z\", opcode = Opcodes.PUTFIELD),\n+        at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/MobEntity;leashHolder:Lnet/minecraft/entity/Entity;\", opcode = Opcodes.PUTFIELD),", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\nindex a9ead8c95..fab0d98a1 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\n", "chunk": "@@ -138,7 +138,10 @@ private void callLeashEvent(final PlayerEntity playerIn, final Hand hand, final\n     }\n \n     @Inject(method = \"clearLeashed\",\n-        at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/MobEntity;leashHolder:Lnet/minecraft/entity/Entity;\", opcode = Opcodes.PUTFIELD),\n+        at = @At(value = \"FIELD\",\n+            target = \"Lnet/minecraft/entity/MobEntity;leashHolder:Lnet/minecraft/entity/Entity;\",\n+            opcode = Opcodes.PUTFIELD\n+        ),\n         cancellable = true)\n     private void impl$ThrowUnleashEvent(final boolean sendPacket, final boolean dropLead, final CallbackInfo ci) {\n         final net.minecraft.entity.Entity entity = this.shadow$getLeashHolder();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDUzMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234531", "body": "Fix method prefixing..", "bodyText": "Fix method prefixing..", "bodyHTML": "<p dir=\"auto\">Fix method prefixing..</p>", "author": "gabizou", "createdAt": "2020-02-14T03:24:57Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java", "diffHunk": "@@ -267,7 +267,7 @@ public LivingEntity getAttackTarget() {\n      * @param thisEntity\n      * @return\n      */\n-    @Redirect(method = \"onLivingUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityLiving;canPickUpLoot()Z\"))\n+    @Redirect(method = \"livingTick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/MobEntity;canPickUpLoot()Z\"))\n     private boolean onCanGrief(final MobEntity thisEntity) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\nindex a9ead8c95..fab0d98a1 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/MobEntityMixin.java\n", "chunk": "@@ -268,7 +271,7 @@ public LivingEntity getAttackTarget() {\n      * @return\n      */\n     @Redirect(method = \"livingTick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/MobEntity;canPickUpLoot()Z\"))\n-    private boolean onCanGrief(final MobEntity thisEntity) {\n+    private boolean impl$onCanGrief(final MobEntity thisEntity) {\n         return thisEntity.canPickUpLoot() && ((GrieferBridge) this).bridge$canGrief();\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDYyMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234623", "body": "Fix the prefix to `impl`", "bodyText": "Fix the prefix to impl", "bodyHTML": "<p dir=\"auto\">Fix the prefix to <code>impl</code></p>", "author": "gabizou", "createdAt": "2020-02-14T03:25:26Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java", "diffHunk": "@@ -63,8 +63,8 @@\n         return this.spongeImpl$strikeBlockAndAddSnapshot(world, pos, blockState);\n     }\n \n-    @Redirect(method = \"onUpdate()V\", at = @At(value = \"INVOKE\",\n-            target = \"Lnet/minecraft/world/World;setBlockState(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;)Z\"))\n+    @Redirect(method = \"igniteBlocks(I)V\", at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/world/World;setBlockState(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;)Z\"))\n     private boolean spongeImpl$throwEventForChangingBlockDuringUpdate(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java\nindex b0cdbce0e..6fde1d586 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java\n", "chunk": "@@ -59,13 +59,13 @@\n \n     @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\",\n             target = \"Lnet/minecraft/world/World;setBlockState(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;)Z\"))\n-    private boolean spongeImpl$throwEventForChangingBlocks(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {\n+    private boolean impl$throwEventForChangingBlocks(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {\n         return this.spongeImpl$strikeBlockAndAddSnapshot(world, pos, blockState);\n     }\n \n     @Redirect(method = \"igniteBlocks(I)V\", at = @At(value = \"INVOKE\",\n             target = \"Lnet/minecraft/world/World;setBlockState(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;)Z\"))\n-    private boolean spongeImpl$throwEventForChangingBlockDuringUpdate(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {\n+    private boolean impl$throwEventForChangingBlockDuringUpdate(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {\n         return this.spongeImpl$strikeBlockAndAddSnapshot(world, pos, blockState);\n     }\n \n", "next_change": {"commit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java\nindex 6fde1d586..792b71cb2 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/effect/LightningBoltEntityMixin.java\n", "chunk": "@@ -60,16 +60,16 @@\n     @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\",\n             target = \"Lnet/minecraft/world/World;setBlockState(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;)Z\"))\n     private boolean impl$throwEventForChangingBlocks(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {\n-        return this.spongeImpl$strikeBlockAndAddSnapshot(world, pos, blockState);\n+        return this.impl$strikeBlockAndAddSnapshot(world, pos, blockState);\n     }\n \n     @Redirect(method = \"igniteBlocks(I)V\", at = @At(value = \"INVOKE\",\n             target = \"Lnet/minecraft/world/World;setBlockState(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;)Z\"))\n     private boolean impl$throwEventForChangingBlockDuringUpdate(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {\n-        return this.spongeImpl$strikeBlockAndAddSnapshot(world, pos, blockState);\n+        return this.impl$strikeBlockAndAddSnapshot(world, pos, blockState);\n     }\n \n-    private boolean spongeImpl$strikeBlockAndAddSnapshot(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {\n+    private boolean impl$strikeBlockAndAddSnapshot(final net.minecraft.world.World world, final BlockPos pos, final BlockState blockState) {\n         if (!this.effect && ((World) world).containsBlock(pos.getX(), pos.getY(), pos.getZ())) {\n             final Vector3i pos3i = VecHelper.toVector3i(pos);\n             final Transaction<BlockSnapshot> transaction = new Transaction<>(\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDc5OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234798", "body": "Just leave a comment at the end what the func should be called..", "bodyText": "Just leave a comment at the end what the func should be called..", "bodyHTML": "<p dir=\"auto\">Just leave a comment at the end what the func should be called..</p>", "author": "gabizou", "createdAt": "2020-02-14T03:26:12Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java", "diffHunk": "@@ -49,7 +49,7 @@\n @Mixin(ArmorStandEntity.class)\n public abstract class ArmorStandEntityMixin extends LivingEntityMixin {\n \n-    @Shadow protected abstract void damageArmorStand(float damage);\n+    @Shadow protected abstract void shadow$func_213817_e(DamageSource damageSource, float damage);", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\nindex 4297bdd07..6a2133652 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n", "chunk": "@@ -49,7 +49,7 @@\n @Mixin(ArmorStandEntity.class)\n public abstract class ArmorStandEntityMixin extends LivingEntityMixin {\n \n-    @Shadow protected abstract void shadow$func_213817_e(DamageSource damageSource, float damage);\n+    @Shadow protected abstract void shadow$func_213817_e(DamageSource damageSource, float damage); // damageArmorStand\n \n     /**\n      * The return value is set to false if the entity should not be completely\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDkzOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234939", "body": "Don't change from `Lclass/path;method()return`, keep it prefixed with `L` and split the method with `;`", "bodyText": "Don't change from Lclass/path;method()return, keep it prefixed with L and split the method with ;", "bodyHTML": "<p dir=\"auto\">Don't change from <code>Lclass/path;method()return</code>, keep it prefixed with <code>L</code> and split the method with <code>;</code></p>", "author": "gabizou", "createdAt": "2020-02-14T03:26:48Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java", "diffHunk": "@@ -64,49 +64,49 @@ private void fireDestroyDamageEvent(final DamageSource source, final CallbackInf\n                 cir.setReturnValue(false);\n             }\n             if (event.getFinalDamage() < this.getHealth()) {\n-                this.damageArmorStand((float) event.getFinalDamage());\n+                this.shadow$func_213817_e(source, (float) event.getFinalDamage());\n                 cir.setReturnValue(false);\n             }\n         }\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"FIELD\", target = \"Lnet/minecraft/util/DamageSource;OUT_OF_WORLD:Lnet/minecraft/util/DamageSource;\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;setDead()V\", ordinal = 0),\n+            at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/item/ArmorStandEntity.remove()V\", ordinal = 0),", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzOTAxMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379239010", "bodyText": "Well that atleast explains why MC dev was confused. Copying from bytecode a little too liberally", "author": "i509VCB", "createdAt": "2020-02-14T03:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzOTUyMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379239520", "bodyText": "It's supported to use non L prefixed syntax, but you would need to change / to . from what I remember.", "author": "gabizou", "createdAt": "2020-02-14T03:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzOTY0MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379239640", "bodyText": "It's also why we chose to stick with L format, because it's abundantly clear where the class definition ends and method/field name begin.", "author": "gabizou", "createdAt": "2020-02-14T03:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\nindex 4297bdd07..6a2133652 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n", "chunk": "@@ -72,22 +72,25 @@ private void fireDestroyDamageEvent(final DamageSource source, final CallbackInf\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"FIELD\", target = \"Lnet/minecraft/util/DamageSource;OUT_OF_WORLD:Lnet/minecraft/util/DamageSource;\")),\n-            at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/item/ArmorStandEntity.remove()V\", ordinal = 0),\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;remove()V\", ordinal = 0),\n             cancellable = true)\n     private void fireDamageEventOutOfWorld(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n-            slice = @Slice(from = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n+            slice = @Slice(from = @At(value = \"INVOKE\",\n+                target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")\n+            ),\n+            at = @At(value = \"INVOKE\",\n+                target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n             cancellable = true)\n-    private void fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    private void impl$fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Redirect(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213817_e(Lnet/minecraft/util/DamageSource;F)V\"))\n-    private void fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {\n+    private void impl$fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             DamageEventHandler.generateCauseFor(source, frame);\n             final DamageEntityEvent event = SpongeEventFactory.createDamageEntityEvent(frame.getCurrentCause(), new ArrayList<>(),\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNDk4NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379234985", "body": "Fix this method with the prefix.", "bodyText": "Fix this method with the prefix.", "bodyHTML": "<p dir=\"auto\">Fix this method with the prefix.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:27:03Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java", "diffHunk": "@@ -64,49 +64,49 @@ private void fireDestroyDamageEvent(final DamageSource source, final CallbackInf\n                 cir.setReturnValue(false);\n             }\n             if (event.getFinalDamage() < this.getHealth()) {\n-                this.damageArmorStand((float) event.getFinalDamage());\n+                this.shadow$func_213817_e(source, (float) event.getFinalDamage());\n                 cir.setReturnValue(false);\n             }\n         }\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"FIELD\", target = \"Lnet/minecraft/util/DamageSource;OUT_OF_WORLD:Lnet/minecraft/util/DamageSource;\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;setDead()V\", ordinal = 0),\n+            at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/item/ArmorStandEntity.remove()V\", ordinal = 0),\n             cancellable = true)\n     private void fireDamageEventOutOfWorld(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;dropContents()V\"),\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n             cancellable = true)\n     private void fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\nindex 4297bdd07..6a2133652 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n", "chunk": "@@ -72,22 +72,25 @@ private void fireDestroyDamageEvent(final DamageSource source, final CallbackInf\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"FIELD\", target = \"Lnet/minecraft/util/DamageSource;OUT_OF_WORLD:Lnet/minecraft/util/DamageSource;\")),\n-            at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/item/ArmorStandEntity.remove()V\", ordinal = 0),\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;remove()V\", ordinal = 0),\n             cancellable = true)\n     private void fireDamageEventOutOfWorld(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n-            slice = @Slice(from = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n+            slice = @Slice(from = @At(value = \"INVOKE\",\n+                target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")\n+            ),\n+            at = @At(value = \"INVOKE\",\n+                target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n             cancellable = true)\n-    private void fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    private void impl$fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Redirect(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213817_e(Lnet/minecraft/util/DamageSource;F)V\"))\n-    private void fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {\n+    private void impl$fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             DamageEventHandler.generateCauseFor(source, frame);\n             final DamageEntityEvent event = SpongeEventFactory.createDamageEntityEvent(frame.getCurrentCause(), new ArrayList<>(),\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTAyNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235026", "body": "Multiline this annotation, it's too long now.", "bodyText": "Multiline this annotation, it's too long now.", "bodyHTML": "<p dir=\"auto\">Multiline this annotation, it's too long now.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:27:18Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java", "diffHunk": "@@ -64,49 +64,49 @@ private void fireDestroyDamageEvent(final DamageSource source, final CallbackInf\n                 cir.setReturnValue(false);\n             }\n             if (event.getFinalDamage() < this.getHealth()) {\n-                this.damageArmorStand((float) event.getFinalDamage());\n+                this.shadow$func_213817_e(source, (float) event.getFinalDamage());\n                 cir.setReturnValue(false);\n             }\n         }\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"FIELD\", target = \"Lnet/minecraft/util/DamageSource;OUT_OF_WORLD:Lnet/minecraft/util/DamageSource;\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;setDead()V\", ordinal = 0),\n+            at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/item/ArmorStandEntity.remove()V\", ordinal = 0),\n             cancellable = true)\n     private void fireDamageEventOutOfWorld(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;dropContents()V\"),\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n             cancellable = true)\n     private void fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n-    @Redirect(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;damageArmorStand(F)V\"))\n-    private void fireDamageEventDamage(final ArmorStandEntity self, final float effectiveAmount, final DamageSource source, final float originalAmount) {\n+    @Redirect(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213817_e(Lnet/minecraft/util/DamageSource;F)V\"))", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\nindex 4297bdd07..6a2133652 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n", "chunk": "@@ -72,22 +72,25 @@ private void fireDestroyDamageEvent(final DamageSource source, final CallbackInf\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"FIELD\", target = \"Lnet/minecraft/util/DamageSource;OUT_OF_WORLD:Lnet/minecraft/util/DamageSource;\")),\n-            at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/item/ArmorStandEntity.remove()V\", ordinal = 0),\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;remove()V\", ordinal = 0),\n             cancellable = true)\n     private void fireDamageEventOutOfWorld(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n-            slice = @Slice(from = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n+            slice = @Slice(from = @At(value = \"INVOKE\",\n+                target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")\n+            ),\n+            at = @At(value = \"INVOKE\",\n+                target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n             cancellable = true)\n-    private void fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    private void impl$fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Redirect(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213817_e(Lnet/minecraft/util/DamageSource;F)V\"))\n-    private void fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {\n+    private void impl$fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             DamageEventHandler.generateCauseFor(source, frame);\n             final DamageEntityEvent event = SpongeEventFactory.createDamageEntityEvent(frame.getCurrentCause(), new ArrayList<>(),\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTA1OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235059", "body": "Change the prefix with `impl$`.", "bodyText": "Change the prefix with impl$.", "bodyHTML": "<p dir=\"auto\">Change the prefix with <code>impl$</code>.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:27:31Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java", "diffHunk": "@@ -64,49 +64,49 @@ private void fireDestroyDamageEvent(final DamageSource source, final CallbackInf\n                 cir.setReturnValue(false);\n             }\n             if (event.getFinalDamage() < this.getHealth()) {\n-                this.damageArmorStand((float) event.getFinalDamage());\n+                this.shadow$func_213817_e(source, (float) event.getFinalDamage());\n                 cir.setReturnValue(false);\n             }\n         }\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"FIELD\", target = \"Lnet/minecraft/util/DamageSource;OUT_OF_WORLD:Lnet/minecraft/util/DamageSource;\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;setDead()V\", ordinal = 0),\n+            at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/item/ArmorStandEntity.remove()V\", ordinal = 0),\n             cancellable = true)\n     private void fireDamageEventOutOfWorld(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;dropContents()V\"),\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n             cancellable = true)\n     private void fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n-    @Redirect(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;damageArmorStand(F)V\"))\n-    private void fireDamageEventDamage(final ArmorStandEntity self, final float effectiveAmount, final DamageSource source, final float originalAmount) {\n+    @Redirect(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213817_e(Lnet/minecraft/util/DamageSource;F)V\"))\n+    private void fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\nindex 4297bdd07..6a2133652 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n", "chunk": "@@ -72,22 +72,25 @@ private void fireDestroyDamageEvent(final DamageSource source, final CallbackInf\n \n     @Inject(method = \"attackEntityFrom\",\n             slice = @Slice(from = @At(value = \"FIELD\", target = \"Lnet/minecraft/util/DamageSource;OUT_OF_WORLD:Lnet/minecraft/util/DamageSource;\")),\n-            at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/item/ArmorStandEntity.remove()V\", ordinal = 0),\n+            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;remove()V\", ordinal = 0),\n             cancellable = true)\n     private void fireDamageEventOutOfWorld(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Inject(method = \"attackEntityFrom\",\n-            slice = @Slice(from = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")),\n-            at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n+            slice = @Slice(from = @At(value = \"INVOKE\",\n+                target = \"Lnet/minecraft/util/DamageSource;isExplosion()Z\")\n+            ),\n+            at = @At(value = \"INVOKE\",\n+                target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213816_g(Lnet/minecraft/util/DamageSource;)V\"),\n             cancellable = true)\n-    private void fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    private void impl$fireDamageEventExplosion(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n \n     @Redirect(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213817_e(Lnet/minecraft/util/DamageSource;F)V\"))\n-    private void fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {\n+    private void impl$fireDamageEventDamage(final ArmorStandEntity self, final DamageSource source, final float amount) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             DamageEventHandler.generateCauseFor(source, frame);\n             final DamageEntityEvent event = SpongeEventFactory.createDamageEntityEvent(frame.getCurrentCause(), new ArrayList<>(),\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTEwNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235107", "body": "Too long, multi-line the annotation.", "bodyText": "Too long, multi-line the annotation.", "bodyHTML": "<p dir=\"auto\">Too long, multi-line the annotation.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:27:45Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java", "diffHunk": "@@ -122,7 +122,7 @@ private void fireDamageEventFirstPunch(final DamageSource source, final float am\n         }\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityArmorStand;dropBlock()V\"),\n+    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213815_f(Lnet/minecraft/util/DamageSource;)V\"),", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\nindex 4297bdd07..6a2133652 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/ArmorStandEntityMixin.java\n", "chunk": "@@ -122,8 +125,11 @@ private void fireDamageEventFirstPunch(final DamageSource source, final float am\n         }\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213815_f(Lnet/minecraft/util/DamageSource;)V\"),\n-            cancellable = true)\n+    @Inject(method = \"attackEntityFrom\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/ArmorStandEntity;func_213815_f(Lnet/minecraft/util/DamageSource;)V\"\n+        ),\n+        cancellable = true)\n     private void fireDamageEventSecondPunch(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         this.fireDestroyDamageEvent(source, cir);\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTMwMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235300", "body": "It's returning an `Entity`, not `DimensionType`. ", "bodyText": "It's returning an Entity, not DimensionType.", "bodyHTML": "<p dir=\"auto\">It's returning an <code>Entity</code>, not <code>DimensionType</code>.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:28:32Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java", "diffHunk": "@@ -96,11 +97,13 @@ private boolean onEnderPearlImpact(final ServerPlayerEntity player) {\n \n     /**\n      * @author Zidane - June 2019 - 1.12.2\n+     * @author i509VCB - Feb 2020 - 1.14.4\n      * @reason Only have this ender pearl remove the thrower references if we actually changed dimension\n+     * @return Change to use DimensionType", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\nindex c362081ad..25e92d504 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\n", "chunk": "@@ -82,16 +82,16 @@ private boolean onEnderPearlImpact(final ServerPlayerEntity player) {\n     }\n \n     @Override\n-    public void spongeImpl$readFromSpongeCompound(final CompoundNBT compound) {\n-        super.spongeImpl$readFromSpongeCompound(compound);\n+    public void impl$readFromSpongeCompound(final CompoundNBT compound) {\n+        super.impl$readFromSpongeCompound(compound);\n         if (compound.contains(Constants.Sponge.Entity.Projectile.PROJECTILE_DAMAGE_AMOUNT)) {\n             this.damageAmount = compound.getDouble(Constants.Sponge.Entity.Projectile.PROJECTILE_DAMAGE_AMOUNT);\n         }\n     }\n \n     @Override\n-    public void spongeImpl$writeToSpongeCompound(final CompoundNBT compound) {\n-        super.spongeImpl$writeToSpongeCompound(compound);\n+    public void impl$writeToSpongeCompound(final CompoundNBT compound) {\n+        super.impl$writeToSpongeCompound(compound);\n         compound.putDouble(Constants.Sponge.Entity.Projectile.PROJECTILE_DAMAGE_AMOUNT, this.damageAmount);\n     }\n \n", "next_change": {"commit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\nindex 25e92d504..2526cdd87 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\n", "chunk": "@@ -85,21 +85,20 @@ private boolean onEnderPearlImpact(final ServerPlayerEntity player) {\n     public void impl$readFromSpongeCompound(final CompoundNBT compound) {\n         super.impl$readFromSpongeCompound(compound);\n         if (compound.contains(Constants.Sponge.Entity.Projectile.PROJECTILE_DAMAGE_AMOUNT)) {\n-            this.damageAmount = compound.getDouble(Constants.Sponge.Entity.Projectile.PROJECTILE_DAMAGE_AMOUNT);\n+            this.impl$damageAmount = compound.getDouble(Constants.Sponge.Entity.Projectile.PROJECTILE_DAMAGE_AMOUNT);\n         }\n     }\n \n     @Override\n     public void impl$writeToSpongeCompound(final CompoundNBT compound) {\n         super.impl$writeToSpongeCompound(compound);\n-        compound.putDouble(Constants.Sponge.Entity.Projectile.PROJECTILE_DAMAGE_AMOUNT, this.damageAmount);\n+        compound.putDouble(Constants.Sponge.Entity.Projectile.PROJECTILE_DAMAGE_AMOUNT, this.impl$damageAmount);\n     }\n \n     /**\n      * @author Zidane - June 2019 - 1.12.2\n      * @author i509VCB - Feb 2020 - 1.14.4\n      * @reason Only have this ender pearl remove the thrower references if we actually changed dimension\n-     * @return Change to use DimensionType\n      */\n     @Override\n     @Nullable\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\nindex c362081ad..25e92d504 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\n", "chunk": "@@ -103,13 +103,13 @@ private boolean onEnderPearlImpact(final ServerPlayerEntity player) {\n      */\n     @Override\n     @Nullable\n-    public Entity changeDimension(DimensionType dimensionIn) {\n-        final Entity entity = super.changeDimension(dimensionIn);\n+    public Entity shadow$changeDimension(DimensionType dimensionIn) {\n+        final Entity entity = super.shadow$changeDimension(dimensionIn);\n \n         if (entity instanceof EnderPearlEntity) {\n             // We actually teleported so...\n             this.perlThrower = null;\n-            this.thrower = null;\n+            this.owner = null;\n         }\n \n         return entity;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTQwMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235402", "body": "Is this a vanilla method, or sponge-added method? If it's a vanilla method, and it's overriding a `@Shadow`'ed method, it should be prefixed appropriately", "bodyText": "Is this a vanilla method, or sponge-added method? If it's a vanilla method, and it's overriding a @Shadow'ed method, it should be prefixed appropriately", "bodyHTML": "<p dir=\"auto\">Is this a vanilla method, or sponge-added method? If it's a vanilla method, and it's overriding a <code>@Shadow</code>'ed method, it should be prefixed appropriately</p>", "author": "gabizou", "createdAt": "2020-02-14T03:29:12Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java", "diffHunk": "@@ -96,11 +97,13 @@ private boolean onEnderPearlImpact(final ServerPlayerEntity player) {\n \n     /**\n      * @author Zidane - June 2019 - 1.12.2\n+     * @author i509VCB - Feb 2020 - 1.14.4\n      * @reason Only have this ender pearl remove the thrower references if we actually changed dimension\n+     * @return Change to use DimensionType\n      */\n     @Override\n     @Nullable\n-    public Entity changeDimension(final int dimensionIn) {\n+    public Entity changeDimension(DimensionType dimensionIn) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\nindex c362081ad..25e92d504 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/EnderPearlEntityMixin.java\n", "chunk": "@@ -103,13 +103,13 @@ private boolean onEnderPearlImpact(final ServerPlayerEntity player) {\n      */\n     @Override\n     @Nullable\n-    public Entity changeDimension(DimensionType dimensionIn) {\n-        final Entity entity = super.changeDimension(dimensionIn);\n+    public Entity shadow$changeDimension(DimensionType dimensionIn) {\n+        final Entity entity = super.shadow$changeDimension(dimensionIn);\n \n         if (entity instanceof EnderPearlEntity) {\n             // We actually teleported so...\n             this.perlThrower = null;\n-            this.thrower = null;\n+            this.owner = null;\n         }\n \n         return entity;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTQ4NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235485", "body": "Fix the method prefix and method name, `onExplode` makes little to no sense of what it's doing.", "bodyText": "Fix the method prefix and method name, onExplode makes little to no sense of what it's doing.", "bodyHTML": "<p dir=\"auto\">Fix the method prefix and method name, <code>onExplode</code> makes little to no sense of what it's doing.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:29:45Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java", "diffHunk": "@@ -111,7 +111,7 @@\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    @Redirect(method = \"onUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;setEntityState\"\n+    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;setEntityState\"\n                                                                        + \"(Lnet/minecraft/entity/Entity;B)V\"))\n     private void onExplode(final World world, final Entity self, final byte state) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\nindex 9797caa6f..8c035a064 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\n", "chunk": "@@ -111,9 +111,11 @@\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;setEntityState\"\n-                                                                       + \"(Lnet/minecraft/entity/Entity;B)V\"))\n-    private void onExplode(final World world, final Entity self, final byte state) {\n+    @Redirect(method = \"func_213893_k()V\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/world/World;setEntityState(Lnet/minecraft/entity/Entity;B)V\")\n+    )\n+    private void impl$onExplosionDamage(final World world, final Entity self, final byte state) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             // Fireworks don't typically explode like other explosives, but we'll\n             // post an event regardless and if the radius is zero the explosion\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTU0Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235542", "body": "Unify the string target value and multi-line the annotation instead.", "bodyText": "Unify the string target value and multi-line the annotation instead.", "bodyHTML": "<p dir=\"auto\">Unify the string target value and multi-line the annotation instead.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:30:08Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java", "diffHunk": "@@ -111,7 +111,7 @@\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    @Redirect(method = \"onUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;setEntityState\"\n+    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;setEntityState\"", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\nindex 9797caa6f..8c035a064 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\n", "chunk": "@@ -111,9 +111,11 @@\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/World;setEntityState\"\n-                                                                       + \"(Lnet/minecraft/entity/Entity;B)V\"))\n-    private void onExplode(final World world, final Entity self, final byte state) {\n+    @Redirect(method = \"func_213893_k()V\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/world/World;setEntityState(Lnet/minecraft/entity/Entity;B)V\")\n+    )\n+    private void impl$onExplosionDamage(final World world, final Entity self, final byte state) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             // Fireworks don't typically explode like other explosives, but we'll\n             // post an event regardless and if the radius is zero the explosion\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTU3MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235570", "body": "Fix the method prefix and name.", "bodyText": "Fix the method prefix and name.", "bodyHTML": "<p dir=\"auto\">Fix the method prefix and name.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:30:18Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java", "diffHunk": "@@ -130,7 +130,7 @@ private void onExplode(final World world, final Entity self, final byte state) {\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    @Inject(method = \"onUpdate\", at = @At(\"RETURN\"))\n+    @Inject(method = \"tick()V\", at = @At(\"RETURN\"))\n     private void onUpdate(final CallbackInfo ci) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\nindex 9797caa6f..8c035a064 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/FireworkRocketEntityMixin.java\n", "chunk": "@@ -131,7 +133,7 @@ private void onExplode(final World world, final Entity self, final byte state) {\n \n     @SuppressWarnings(\"deprecation\")\n     @Inject(method = \"tick()V\", at = @At(\"RETURN\"))\n-    private void onUpdate(final CallbackInfo ci) {\n+    private void impl$postPrimeEvent(final CallbackInfo ci) {\n         if (this.fireworkAge == 1 && !this.world.isRemote) {\n             try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n                 frame.pushCause(this);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTYyNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235627", "body": "Prefix with `impl$`.", "bodyText": "Prefix with impl$.", "bodyHTML": "<p dir=\"auto\">Prefix with <code>impl$</code>.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:30:34Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java", "diffHunk": "@@ -55,33 +55,33 @@\n public abstract class HangingEntityMixin extends EntityMixin {\n \n     @Shadow @Nullable public Direction facingDirection;\n-    @Shadow public abstract boolean onValidSurface();\n+    @Shadow public abstract boolean shadow$onValidSurface();\n \n-    private boolean ignorePhysics = false;\n+    private boolean impl$ignorePhysics = false;\n \n     /**\n      * Called to update the entity's position/logic.\n      */\n-    @Redirect(method = \"onUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityHanging;onValidSurface()Z\"))\n+    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;onValidSurface()Z\"))\n     private boolean checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\nindex d801ac935..e99ad292a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\n", "chunk": "@@ -63,26 +63,31 @@\n      * Called to update the entity's position/logic.\n      */\n     @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;onValidSurface()Z\"))\n-    private boolean checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {\n+    private boolean impl$checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {\n         return this.shadow$onValidSurface() && !this.impl$ignorePhysics;\n     }\n \n     @Override\n-    public void spongeImpl$writeToSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$writeToSpongeCompound(compound);\n+    public void impl$writeToSpongeCompound(CompoundNBT compound) {\n+        super.impl$writeToSpongeCompound(compound);\n         compound.putBoolean(\"ignorePhysics\", this.impl$ignorePhysics);\n     }\n \n     @Override\n-    public void spongeImpl$readFromSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$readFromSpongeCompound(compound);\n+    public void impl$readFromSpongeCompound(CompoundNBT compound) {\n+        super.impl$readFromSpongeCompound(compound);\n         if (compound.contains(\"ignorePhysics\")) {\n             this.impl$ignorePhysics = compound.getBoolean(\"ignorePhysics\");\n         }\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;remove()V\"), cancellable = true)\n-    private void onAttackEntityFrom(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {\n+    @Inject(method = \"attackEntityFrom\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/HangingEntity;remove()V\"\n+        ),\n+        cancellable = true\n+    )\n+    private void impl$postEventOnAttackEntityFrom(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {\n         try (CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             frame.pushCause(source);\n             AttackEntityEvent event = SpongeEventFactory.createAttackEntityEvent(frame.getCurrentCause(), new ArrayList<>(), (Entity) this, 0, amount);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTY4Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235682", "body": "s/`spongeImpl`/`impl`", "bodyText": "s/spongeImpl/impl", "bodyHTML": "<p dir=\"auto\">s/<code>spongeImpl</code>/<code>impl</code></p>", "author": "gabizou", "createdAt": "2020-02-14T03:30:50Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java", "diffHunk": "@@ -55,33 +55,33 @@\n public abstract class HangingEntityMixin extends EntityMixin {\n \n     @Shadow @Nullable public Direction facingDirection;\n-    @Shadow public abstract boolean onValidSurface();\n+    @Shadow public abstract boolean shadow$onValidSurface();\n \n-    private boolean ignorePhysics = false;\n+    private boolean impl$ignorePhysics = false;\n \n     /**\n      * Called to update the entity's position/logic.\n      */\n-    @Redirect(method = \"onUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityHanging;onValidSurface()Z\"))\n+    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;onValidSurface()Z\"))\n     private boolean checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {\n-        return this.onValidSurface() && !this.ignorePhysics;\n+        return this.shadow$onValidSurface() && !this.impl$ignorePhysics;\n     }\n \n     @Override\n     public void spongeImpl$writeToSpongeCompound(CompoundNBT compound) {\n         super.spongeImpl$writeToSpongeCompound(compound);\n-        compound.putBoolean(\"ignorePhysics\", this.ignorePhysics);\n+        compound.putBoolean(\"ignorePhysics\", this.impl$ignorePhysics);\n     }\n \n     @Override\n     public void spongeImpl$readFromSpongeCompound(CompoundNBT compound) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\nindex d801ac935..e99ad292a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\n", "chunk": "@@ -63,26 +63,31 @@\n      * Called to update the entity's position/logic.\n      */\n     @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;onValidSurface()Z\"))\n-    private boolean checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {\n+    private boolean impl$checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {\n         return this.shadow$onValidSurface() && !this.impl$ignorePhysics;\n     }\n \n     @Override\n-    public void spongeImpl$writeToSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$writeToSpongeCompound(compound);\n+    public void impl$writeToSpongeCompound(CompoundNBT compound) {\n+        super.impl$writeToSpongeCompound(compound);\n         compound.putBoolean(\"ignorePhysics\", this.impl$ignorePhysics);\n     }\n \n     @Override\n-    public void spongeImpl$readFromSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$readFromSpongeCompound(compound);\n+    public void impl$readFromSpongeCompound(CompoundNBT compound) {\n+        super.impl$readFromSpongeCompound(compound);\n         if (compound.contains(\"ignorePhysics\")) {\n             this.impl$ignorePhysics = compound.getBoolean(\"ignorePhysics\");\n         }\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;remove()V\"), cancellable = true)\n-    private void onAttackEntityFrom(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {\n+    @Inject(method = \"attackEntityFrom\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/HangingEntity;remove()V\"\n+        ),\n+        cancellable = true\n+    )\n+    private void impl$postEventOnAttackEntityFrom(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {\n         try (CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             frame.pushCause(source);\n             AttackEntityEvent event = SpongeEventFactory.createAttackEntityEvent(frame.getCurrentCause(), new ArrayList<>(), (Entity) this, 0, amount);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTcxMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235710", "body": "Same here. Fix prefix.", "bodyText": "Same here. Fix prefix.", "bodyHTML": "<p dir=\"auto\">Same here. Fix prefix.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:30:59Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java", "diffHunk": "@@ -55,33 +55,33 @@\n public abstract class HangingEntityMixin extends EntityMixin {\n \n     @Shadow @Nullable public Direction facingDirection;\n-    @Shadow public abstract boolean onValidSurface();\n+    @Shadow public abstract boolean shadow$onValidSurface();\n \n-    private boolean ignorePhysics = false;\n+    private boolean impl$ignorePhysics = false;\n \n     /**\n      * Called to update the entity's position/logic.\n      */\n-    @Redirect(method = \"onUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityHanging;onValidSurface()Z\"))\n+    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;onValidSurface()Z\"))\n     private boolean checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {\n-        return this.onValidSurface() && !this.ignorePhysics;\n+        return this.shadow$onValidSurface() && !this.impl$ignorePhysics;\n     }\n \n     @Override\n     public void spongeImpl$writeToSpongeCompound(CompoundNBT compound) {\n         super.spongeImpl$writeToSpongeCompound(compound);\n-        compound.putBoolean(\"ignorePhysics\", this.ignorePhysics);\n+        compound.putBoolean(\"ignorePhysics\", this.impl$ignorePhysics);\n     }\n \n     @Override\n     public void spongeImpl$readFromSpongeCompound(CompoundNBT compound) {\n         super.spongeImpl$readFromSpongeCompound(compound);\n         if (compound.contains(\"ignorePhysics\")) {\n-            this.ignorePhysics = compound.getBoolean(\"ignorePhysics\");\n+            this.impl$ignorePhysics = compound.getBoolean(\"ignorePhysics\");\n         }\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/EntityHanging;setDead()V\"), cancellable = true)\n+    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;remove()V\"), cancellable = true)\n     private void onAttackEntityFrom(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\nindex d801ac935..e99ad292a 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/HangingEntityMixin.java\n", "chunk": "@@ -63,26 +63,31 @@\n      * Called to update the entity's position/logic.\n      */\n     @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;onValidSurface()Z\"))\n-    private boolean checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {\n+    private boolean impl$checkIfOnValidSurfaceAndIgnoresPhysics(HangingEntity entityHanging) {\n         return this.shadow$onValidSurface() && !this.impl$ignorePhysics;\n     }\n \n     @Override\n-    public void spongeImpl$writeToSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$writeToSpongeCompound(compound);\n+    public void impl$writeToSpongeCompound(CompoundNBT compound) {\n+        super.impl$writeToSpongeCompound(compound);\n         compound.putBoolean(\"ignorePhysics\", this.impl$ignorePhysics);\n     }\n \n     @Override\n-    public void spongeImpl$readFromSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$readFromSpongeCompound(compound);\n+    public void impl$readFromSpongeCompound(CompoundNBT compound) {\n+        super.impl$readFromSpongeCompound(compound);\n         if (compound.contains(\"ignorePhysics\")) {\n             this.impl$ignorePhysics = compound.getBoolean(\"ignorePhysics\");\n         }\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/HangingEntity;remove()V\"), cancellable = true)\n-    private void onAttackEntityFrom(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {\n+    @Inject(method = \"attackEntityFrom\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/HangingEntity;remove()V\"\n+        ),\n+        cancellable = true\n+    )\n+    private void impl$postEventOnAttackEntityFrom(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {\n         try (CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             frame.pushCause(source);\n             AttackEntityEvent event = SpongeEventFactory.createAttackEntityEvent(frame.getCurrentCause(), new ArrayList<>(), (Entity) this, 0, amount);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTg1Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235857", "body": "Fix the method name.", "bodyText": "Fix the method name.", "bodyHTML": "<p dir=\"auto\">Fix the method name.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:31:42Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/ItemFrameEntityMixin.java", "diffHunk": "@@ -46,10 +46,9 @@\n @Mixin(ItemFrameEntity.class)\n public abstract class ItemFrameEntityMixin extends HangingEntityMixin {\n \n-    @Shadow public abstract void setDisplayedItem(@Nullable net.minecraft.item.ItemStack p_82334_1_);\n+    @Shadow public abstract void shadow$setDisplayedItem(@Nullable net.minecraft.item.ItemStack p_82334_1_);\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityItemFrame;dropItemOrSelf\"\n-      + \"(Lnet/minecraft/entity/Entity;Z)V\"), cancellable = true)\n+    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ItemFrameEntity;dropItemOrSelf(Lnet/minecraft/entity/Entity;Z)V\"), cancellable = true)\n     private void onAttackEntityFrom(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTg4OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235889", "body": "Multi-line the annotation..", "bodyText": "Multi-line the annotation..", "bodyHTML": "<p dir=\"auto\">Multi-line the annotation..</p>", "author": "gabizou", "createdAt": "2020-02-14T03:31:51Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/ItemFrameEntityMixin.java", "diffHunk": "@@ -46,10 +46,9 @@\n @Mixin(ItemFrameEntity.class)\n public abstract class ItemFrameEntityMixin extends HangingEntityMixin {\n \n-    @Shadow public abstract void setDisplayedItem(@Nullable net.minecraft.item.ItemStack p_82334_1_);\n+    @Shadow public abstract void shadow$setDisplayedItem(@Nullable net.minecraft.item.ItemStack p_82334_1_);\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityItemFrame;dropItemOrSelf\"\n-      + \"(Lnet/minecraft/entity/Entity;Z)V\"), cancellable = true)\n+    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/ItemFrameEntity;dropItemOrSelf(Lnet/minecraft/entity/Entity;Z)V\"), cancellable = true)", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTk1OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235958", "body": "Change method name.", "bodyText": "Change method name.", "bodyHTML": "<p dir=\"auto\">Change method name.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:32:11Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/TNTEntityMixin.java", "diffHunk": "@@ -123,7 +123,7 @@\n     }\n \n \n-    @Inject(method = \"onUpdate\", at = @At(\"RETURN\"))\n+    @Inject(method = \"tick()V\", at = @At(\"RETURN\"))\n     private void onSpongeUpdateTNTPushPrime(final CallbackInfo ci) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/TNTEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/TNTEntityMixin.java\nindex 3e3eb8de6..24103d237 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/TNTEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/TNTEntityMixin.java\n", "chunk": "@@ -124,7 +124,7 @@\n \n \n     @Inject(method = \"tick()V\", at = @At(\"RETURN\"))\n-    private void onSpongeUpdateTNTPushPrime(final CallbackInfo ci) {\n+    private void impl$updateTNTPushPrime(final CallbackInfo ci) {\n         if (this.fuse == this.bridge$fuseDuration - 1 && !this.world.isRemote) {\n             try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n                 if (this.impl$detonator != null) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNTk5Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379235993", "body": "Multi-line annotation.", "bodyText": "Multi-line annotation.", "bodyHTML": "<p dir=\"auto\">Multi-line annotation.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:32:23Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java", "diffHunk": "@@ -85,12 +85,12 @@ private double onDecelerateZ(final double defaultValue) {\n         return this.impl$derailedMod.getZ();\n     }\n \n-    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityMinecart;isBeingRidden()Z\"))\n+    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;isBeingRidden()Z\"))", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\nindex 924cf900f..aa4112581 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\n", "chunk": "@@ -85,14 +85,21 @@ private double onDecelerateZ(final double defaultValue) {\n         return this.impl$derailedMod.getZ();\n     }\n \n-    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;isBeingRidden()Z\"))\n-    private boolean onIsRidden(final AbstractMinecartEntity self) {\n+    @Redirect(method = \"applyDrag\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/AbstractMinecartEntity;isBeingRidden()Z\"\n+        )\n+    )\n+    private boolean impl$applyDragIfEmpty(final AbstractMinecartEntity self) {\n         return !this.impl$slowWhenEmpty || this.shadow$isBeingRidden();\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;removePassengers()V\"),\n-      cancellable = true)\n-    private void onAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    @Inject(method = \"attackEntityFrom\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/AbstractMinecartEntity;removePassengers()V\"\n+        ),\n+        cancellable = true)\n+    private void impl$postOnAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             frame.pushCause(source);\n             final AttackEntityEvent event = SpongeEventFactory.createAttackEntityEvent(frame.getCurrentCause(), new ArrayList<>(), (Minecart) this, 0, amount);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjAwOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236009", "body": "Change method name with prefix.", "bodyText": "Change method name with prefix.", "bodyHTML": "<p dir=\"auto\">Change method name with prefix.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:32:32Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java", "diffHunk": "@@ -85,12 +85,12 @@ private double onDecelerateZ(final double defaultValue) {\n         return this.impl$derailedMod.getZ();\n     }\n \n-    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityMinecart;isBeingRidden()Z\"))\n+    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;isBeingRidden()Z\"))\n     private boolean onIsRidden(final AbstractMinecartEntity self) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\nindex 924cf900f..aa4112581 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\n", "chunk": "@@ -85,14 +85,21 @@ private double onDecelerateZ(final double defaultValue) {\n         return this.impl$derailedMod.getZ();\n     }\n \n-    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;isBeingRidden()Z\"))\n-    private boolean onIsRidden(final AbstractMinecartEntity self) {\n+    @Redirect(method = \"applyDrag\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/AbstractMinecartEntity;isBeingRidden()Z\"\n+        )\n+    )\n+    private boolean impl$applyDragIfEmpty(final AbstractMinecartEntity self) {\n         return !this.impl$slowWhenEmpty || this.shadow$isBeingRidden();\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;removePassengers()V\"),\n-      cancellable = true)\n-    private void onAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    @Inject(method = \"attackEntityFrom\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/AbstractMinecartEntity;removePassengers()V\"\n+        ),\n+        cancellable = true)\n+    private void impl$postOnAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             frame.pushCause(source);\n             final AttackEntityEvent event = SpongeEventFactory.createAttackEntityEvent(frame.getCurrentCause(), new ArrayList<>(), (Minecart) this, 0, amount);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjAzNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236037", "body": "Multi-line appropriately.", "bodyText": "Multi-line appropriately.", "bodyHTML": "<p dir=\"auto\">Multi-line appropriately.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:32:44Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java", "diffHunk": "@@ -85,12 +85,12 @@ private double onDecelerateZ(final double defaultValue) {\n         return this.impl$derailedMod.getZ();\n     }\n \n-    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityMinecart;isBeingRidden()Z\"))\n+    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;isBeingRidden()Z\"))\n     private boolean onIsRidden(final AbstractMinecartEntity self) {\n-        return !this.impl$slowWhenEmpty || this.isBeingRidden();\n+        return !this.impl$slowWhenEmpty || this.shadow$isBeingRidden();\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityMinecart;removePassengers()V\"),\n+    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;removePassengers()V\"),", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\nindex 924cf900f..aa4112581 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\n", "chunk": "@@ -85,14 +85,21 @@ private double onDecelerateZ(final double defaultValue) {\n         return this.impl$derailedMod.getZ();\n     }\n \n-    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;isBeingRidden()Z\"))\n-    private boolean onIsRidden(final AbstractMinecartEntity self) {\n+    @Redirect(method = \"applyDrag\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/AbstractMinecartEntity;isBeingRidden()Z\"\n+        )\n+    )\n+    private boolean impl$applyDragIfEmpty(final AbstractMinecartEntity self) {\n         return !this.impl$slowWhenEmpty || this.shadow$isBeingRidden();\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;removePassengers()V\"),\n-      cancellable = true)\n-    private void onAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    @Inject(method = \"attackEntityFrom\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/AbstractMinecartEntity;removePassengers()V\"\n+        ),\n+        cancellable = true)\n+    private void impl$postOnAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             frame.pushCause(source);\n             final AttackEntityEvent event = SpongeEventFactory.createAttackEntityEvent(frame.getCurrentCause(), new ArrayList<>(), (Minecart) this, 0, amount);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjA3NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236075", "body": "Change prefix and method name..", "bodyText": "Change prefix and method name..", "bodyHTML": "<p dir=\"auto\">Change prefix and method name..</p>", "author": "gabizou", "createdAt": "2020-02-14T03:32:55Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java", "diffHunk": "@@ -85,12 +85,12 @@ private double onDecelerateZ(final double defaultValue) {\n         return this.impl$derailedMod.getZ();\n     }\n \n-    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityMinecart;isBeingRidden()Z\"))\n+    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;isBeingRidden()Z\"))\n     private boolean onIsRidden(final AbstractMinecartEntity self) {\n-        return !this.impl$slowWhenEmpty || this.isBeingRidden();\n+        return !this.impl$slowWhenEmpty || this.shadow$isBeingRidden();\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityMinecart;removePassengers()V\"),\n+    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;removePassengers()V\"),\n       cancellable = true)\n     private void onAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\nindex 924cf900f..aa4112581 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/AbstractMinecartEntityMixin.java\n", "chunk": "@@ -85,14 +85,21 @@ private double onDecelerateZ(final double defaultValue) {\n         return this.impl$derailedMod.getZ();\n     }\n \n-    @Redirect(method = \"applyDrag\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;isBeingRidden()Z\"))\n-    private boolean onIsRidden(final AbstractMinecartEntity self) {\n+    @Redirect(method = \"applyDrag\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/AbstractMinecartEntity;isBeingRidden()Z\"\n+        )\n+    )\n+    private boolean impl$applyDragIfEmpty(final AbstractMinecartEntity self) {\n         return !this.impl$slowWhenEmpty || this.shadow$isBeingRidden();\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/AbstractEntityMinecart;removePassengers()V\"),\n-      cancellable = true)\n-    private void onAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    @Inject(method = \"attackEntityFrom\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/item/AbstractMinecartEntity;removePassengers()V\"\n+        ),\n+        cancellable = true)\n+    private void impl$postOnAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             frame.pushCause(source);\n             final AttackEntityEvent event = SpongeEventFactory.createAttackEntityEvent(frame.getCurrentCause(), new ArrayList<>(), (Minecart) this, 0, amount);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjEyMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236123", "body": "Same as the other instance comment, you're not returning a `DimensionType`.", "bodyText": "Same as the other instance comment, you're not returning a DimensionType.", "bodyHTML": "<p dir=\"auto\">Same as the other instance comment, you're not returning a <code>DimensionType</code>.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:33:19Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/ContainerMinecartEntityMixin.java", "diffHunk": "@@ -38,11 +39,13 @@\n \n     /**\n      * @author Zidane - June 2019 - 1.12.2\n+     * @author i509VCB - Feb 2020 - 1.14.4\n      * @reason Only have this Minecart not drop contents if we actually changed dimension\n+     * @return Change to use DimensionType", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/ContainerMinecartEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/ContainerMinecartEntityMixin.java\nindex 35526129b..d46bd28b1 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/ContainerMinecartEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/ContainerMinecartEntityMixin.java\n", "chunk": "@@ -41,12 +41,11 @@\n      * @author Zidane - June 2019 - 1.12.2\n      * @author i509VCB - Feb 2020 - 1.14.4\n      * @reason Only have this Minecart not drop contents if we actually changed dimension\n-     * @return Change to use DimensionType\n      */\n     @Override\n     @Nullable\n-    public Entity changeDimension(DimensionType dimensionIn) {\n-        final Entity entity = super.changeDimension(dimensionIn);\n+    public Entity shadow$changeDimension(DimensionType dimensionIn) {\n+        final Entity entity = super.shadow$changeDimension(dimensionIn);\n \n         if (entity instanceof ContainerMinecartEntity) {\n             // We actually teleported so...\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjE2Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236167", "body": "Fix method name.", "bodyText": "Fix method name.", "bodyHTML": "<p dir=\"auto\">Fix method name.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:33:33Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/TNTMinecartEntityMixin.java", "diffHunk": "@@ -157,7 +157,7 @@ private void postExplode(final CallbackInfo ci) {\n         }\n     }\n \n-    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/EntityMinecartTNT;explodeCart(D)V\"))\n+    @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/minecart/TNTMinecartEntity;explodeCart(D)V\"))\n     private void onAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/TNTMinecartEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/TNTMinecartEntityMixin.java\nindex 818d10717..4caf91e95 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/TNTMinecartEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/item/minecart/TNTMinecartEntityMixin.java\n", "chunk": "@@ -158,7 +158,7 @@ private void postExplode(final CallbackInfo ci) {\n     }\n \n     @Inject(method = \"attackEntityFrom\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/item/minecart/TNTMinecartEntity;explodeCart(D)V\"))\n-    private void onAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n+    private void impl$postOnAttackEntityFrom(final DamageSource source, final float amount, final CallbackInfoReturnable<Boolean> cir) {\n         try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame()) {\n             frame.pushCause(source);\n             final AttackEntityEvent event = SpongeEventFactory.createAttackEntityEvent(frame.getCurrentCause(), new ArrayList<>(),\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjI3MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236270", "body": "Your change should be after mine since yours came after.", "bodyText": "Your change should be after mine since yours came after.", "bodyHTML": "<p dir=\"auto\">Your change should be after mine since yours came after.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:34:09Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java", "diffHunk": "@@ -24,121 +24,74 @@\n  */\n package org.spongepowered.common.mixin.core.entity.merchant.villager;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n+import com.google.common.collect.Sets;\n+import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerData;\n import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.player.PlayerEntity;\n-import net.minecraft.inventory.Inventory;\n-import net.minecraft.village.MerchantRecipeList;\n-import org.spongepowered.api.data.type.Career;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n import org.spongepowered.api.data.type.Profession;\n import org.spongepowered.api.entity.living.trader.Villager;\n import org.spongepowered.api.item.merchant.TradeOffer;\n import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Overwrite;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.common.SpongeImplHooks;\n-import org.spongepowered.common.bridge.entity.merchant.villager.VillagerEntityBridge;\n-import org.spongepowered.common.data.type.SpongeEntityMetadataType;\n-import org.spongepowered.common.inventory.lens.impl.collections.SlotLensCollection;\n-import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n import org.spongepowered.common.registry.SpongeVillagerRegistry;\n \n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.Random;\n-\n-import javax.annotation.Nullable;\n+import java.util.Set;\n \n @SuppressWarnings(\"rawtypes\")\n @Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AgeableEntityMixin implements VillagerEntityBridge {\n-\n-    @Shadow private int careerId; // careerId\n-    @Shadow private int careerLevel; // careerLevel\n-    @Shadow @Nullable private MerchantRecipeList buyingList; // buyingList\n-    @Shadow @Final private Inventory villagerInventory; // villagerInventory\n-\n-    @Shadow public abstract void setProfession(int professionId); // setProfession\n-    @Shadow public abstract MerchantRecipeList getRecipes(PlayerEntity player);\n-\n-    @Nullable private Profession impl$profession;\n-\n-    @Inject(method = \"setProfession(I)V\", at = @At(\"RETURN\"))\n-    private void onSetProfession(final int professionId, final CallbackInfo ci) {\n-        this.impl$profession = SpongeImplHooks.validateProfession(professionId);\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n+    public VillagerEntityMixin() {\n+        super(null, null);\n     }\n \n-    @Override\n-    public Career bridge$getCareer() {\n-        final List<Career> careers = (List<Career>) this.impl$profession.getCareers();\n-        if (this.careerId == 0 || this.careerId > careers.size()) {\n-            this.careerId = new Random().nextInt(careers.size()) + 1;\n-        }\n-        this.getRecipes(null);\n-        return careers.get(this.careerId - 1);\n-    }\n-\n-    @Override\n-    public Optional<Profession> bridge$getProfessionOptional() {\n-        return Optional.ofNullable(this.impl$profession);\n-    }\n-\n-    @Override\n-    public void bridge$setProfession(final Profession profession) {\n-        this.impl$profession = checkNotNull(profession, \"VillagerProfession cannot be null!\");\n-    }\n-\n-    @Override\n-    public void bridge$setCareer(final Career career) {\n-        this.setProfession(((SpongeEntityMetadataType) career.getProfession()).type);\n-        this.buyingList = null;\n-        this.careerId = ((SpongeCareer) career).type + 1;\n-        this.careerLevel = 1;\n-        this.getRecipes(null);\n-    }\n+    @Shadow public abstract VillagerData shadow$getVillagerData();\n \n     /**\n+     * @author i509VCB - Feb 12, 2020 - 1.14.4\n+     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n+     *", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\ndeleted file mode 100644\nindex d7c04303e..000000000\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/*\n- * This file is part of Sponge, licensed under the MIT License (MIT).\n- *\n- * Copyright (c) SpongePowered <https://www.spongepowered.org>\n- * Copyright (c) contributors\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.spongepowered.common.mixin.core.entity.merchant.villager;\n-\n-import com.google.common.collect.Sets;\n-import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerData;\n-import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerTrades;\n-import net.minecraft.item.MerchantOffer;\n-import net.minecraft.item.MerchantOffers;\n-import org.spongepowered.api.data.type.Profession;\n-import org.spongepowered.api.entity.living.trader.Villager;\n-import org.spongepowered.api.item.merchant.TradeOffer;\n-import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n-import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.registry.SpongeVillagerRegistry;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-\n-@SuppressWarnings(\"rawtypes\")\n-@Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n-    public VillagerEntityMixin() {\n-        super(null, null);\n-    }\n-\n-    @Shadow public abstract VillagerData shadow$getVillagerData();\n-\n-    /**\n-     * @author i509VCB - Feb 12, 2020 - 1.14.4\n-     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n-     *\n-     * @author gabizou - January 13th, 2016\n-     * @reason This overwrites the current method using the multi-dimension array with\n-     * our {@link VillagerRegistry} to handle career levels and registrations\n-     * for {@link TradeOfferGenerator}s. Note that this takes over entirely\n-     * whatever vanilla does, but this allows for maximum customization for\n-     * plugins to handle gracefully.\n-     */\n-    @Override\n-    public void addTrades(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers) {\n-        Set<Integer> set = Sets.newHashSet();\n-        if (newTrades.length > maxNumbers) {\n-            while(set.size() < maxNumbers) {\n-                set.add(this.rand.nextInt(newTrades.length));\n-            }\n-        } else {\n-            for(int i = 0; i < newTrades.length; ++i) {\n-                set.add(i);\n-            }\n-        }\n-\n-        List<MerchantOffer> newOffers = new ArrayList<>(); // Sponge - Create temporary list to store the new offers\n-\n-        for(Integer integer : set) {\n-            VillagerTrades.ITrade villagertrades$itrade = newTrades[integer];\n-            MerchantOffer merchantoffer = villagertrades$itrade.getOffer(this, this.rand); // Sponge - cast \"this\" to Abstract Villager Entity\n-            if (merchantoffer != null) {\n-                // Sponge - Add to newOffers list instead\n-                //givenMerchantOffers.add(merchantoffer);\n-                newOffers.add(merchantoffer);\n-            }\n-        }\n-\n-        // Sponge - start - fire off the trade offer mutators for the new trades\n-        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) newOffers, (Profession) this.shadow$getVillagerData().getProfession(), this.shadow$getVillagerData().getLevel(), this.rand);\n-        givenMerchantOffers.addAll(newOffers); // Finally add the mutated offers to the trade offer map.\n-        // Sponge - end\n-    }\n-}\n", "next_change": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\nnew file mode 100644\nindex 000000000..1595dc4de\n--- /dev/null\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n", "chunk": "@@ -0,0 +1,76 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.entity.merchant.villager;\n+\n+import net.minecraft.entity.merchant.villager.VillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n+import org.spongepowered.api.data.type.Profession;\n+import org.spongepowered.api.entity.living.trader.Villager;\n+import org.spongepowered.api.item.merchant.TradeOffer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.registry.SpongeVillagerRegistry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Mixin(VillagerEntity.class)\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntityMixin {\n+    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Here we apply the Trade Mutators to the villager's new merchant offers and then add them to the entity.\n+     *\n+     * @param givenMerchantOffers The merchant's current merchant offers.\n+     * @param newTrades The trade factories representing the new trades this villager will receive.\n+     * @param maxNumbers The maximum amount of trades for this villager to receive.\n+     * @param ci CallbackInfo.\n+     */\n+    @Override\n+    protected void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n+        VillagerEntity villager = (VillagerEntity) (Object) this;\n+        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) impl$newOffers, (Profession) villager.getVillagerData().getProfession(), villager.getVillagerData().getLevel(), this.rand);\n+        givenMerchantOffers.addAll(this.impl$newOffers); // Finally add the mutated offers to the trade offer map.\n+        this.impl$newOffers.clear(); // And clean up our temp values\n+    }\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Override the redirect call in AbstractVillagerEntityMixin to capture merchant offers to be mutated.\n+     *\n+     * @param merchantOffers The current offers the villager has.\n+     * @param offer The merchant offer to add.\n+     * @return true\n+     */\n+    @Override\n+    protected boolean impl$addNewOfferToTempMap(MerchantOffers merchantOffers, MerchantOffer offer) {\n+        return this.impl$newOffers.add(offer);\n+    }\n+}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjMwNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236307", "body": "This is no longer an overwrite, or is it?", "bodyText": "This is no longer an overwrite, or is it?", "bodyHTML": "<p dir=\"auto\">This is no longer an overwrite, or is it?</p>", "author": "gabizou", "createdAt": "2020-02-14T03:34:23Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java", "diffHunk": "@@ -24,121 +24,74 @@\n  */\n package org.spongepowered.common.mixin.core.entity.merchant.villager;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n+import com.google.common.collect.Sets;\n+import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerData;\n import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.player.PlayerEntity;\n-import net.minecraft.inventory.Inventory;\n-import net.minecraft.village.MerchantRecipeList;\n-import org.spongepowered.api.data.type.Career;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n import org.spongepowered.api.data.type.Profession;\n import org.spongepowered.api.entity.living.trader.Villager;\n import org.spongepowered.api.item.merchant.TradeOffer;\n import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Overwrite;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.common.SpongeImplHooks;\n-import org.spongepowered.common.bridge.entity.merchant.villager.VillagerEntityBridge;\n-import org.spongepowered.common.data.type.SpongeEntityMetadataType;\n-import org.spongepowered.common.inventory.lens.impl.collections.SlotLensCollection;\n-import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n import org.spongepowered.common.registry.SpongeVillagerRegistry;\n \n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.Random;\n-\n-import javax.annotation.Nullable;\n+import java.util.Set;\n \n @SuppressWarnings(\"rawtypes\")\n @Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AgeableEntityMixin implements VillagerEntityBridge {\n-\n-    @Shadow private int careerId; // careerId\n-    @Shadow private int careerLevel; // careerLevel\n-    @Shadow @Nullable private MerchantRecipeList buyingList; // buyingList\n-    @Shadow @Final private Inventory villagerInventory; // villagerInventory\n-\n-    @Shadow public abstract void setProfession(int professionId); // setProfession\n-    @Shadow public abstract MerchantRecipeList getRecipes(PlayerEntity player);\n-\n-    @Nullable private Profession impl$profession;\n-\n-    @Inject(method = \"setProfession(I)V\", at = @At(\"RETURN\"))\n-    private void onSetProfession(final int professionId, final CallbackInfo ci) {\n-        this.impl$profession = SpongeImplHooks.validateProfession(professionId);\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n+    public VillagerEntityMixin() {\n+        super(null, null);\n     }\n \n-    @Override\n-    public Career bridge$getCareer() {\n-        final List<Career> careers = (List<Career>) this.impl$profession.getCareers();\n-        if (this.careerId == 0 || this.careerId > careers.size()) {\n-            this.careerId = new Random().nextInt(careers.size()) + 1;\n-        }\n-        this.getRecipes(null);\n-        return careers.get(this.careerId - 1);\n-    }\n-\n-    @Override\n-    public Optional<Profession> bridge$getProfessionOptional() {\n-        return Optional.ofNullable(this.impl$profession);\n-    }\n-\n-    @Override\n-    public void bridge$setProfession(final Profession profession) {\n-        this.impl$profession = checkNotNull(profession, \"VillagerProfession cannot be null!\");\n-    }\n-\n-    @Override\n-    public void bridge$setCareer(final Career career) {\n-        this.setProfession(((SpongeEntityMetadataType) career.getProfession()).type);\n-        this.buyingList = null;\n-        this.careerId = ((SpongeCareer) career).type + 1;\n-        this.careerLevel = 1;\n-        this.getRecipes(null);\n-    }\n+    @Shadow public abstract VillagerData shadow$getVillagerData();\n \n     /**\n+     * @author i509VCB - Feb 12, 2020 - 1.14.4\n+     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n+     *\n      * @author gabizou - January 13th, 2016\n      * @reason This overwrites the current method using the multi-dimension array with", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\ndeleted file mode 100644\nindex d7c04303e..000000000\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/*\n- * This file is part of Sponge, licensed under the MIT License (MIT).\n- *\n- * Copyright (c) SpongePowered <https://www.spongepowered.org>\n- * Copyright (c) contributors\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.spongepowered.common.mixin.core.entity.merchant.villager;\n-\n-import com.google.common.collect.Sets;\n-import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerData;\n-import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerTrades;\n-import net.minecraft.item.MerchantOffer;\n-import net.minecraft.item.MerchantOffers;\n-import org.spongepowered.api.data.type.Profession;\n-import org.spongepowered.api.entity.living.trader.Villager;\n-import org.spongepowered.api.item.merchant.TradeOffer;\n-import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n-import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.registry.SpongeVillagerRegistry;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-\n-@SuppressWarnings(\"rawtypes\")\n-@Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n-    public VillagerEntityMixin() {\n-        super(null, null);\n-    }\n-\n-    @Shadow public abstract VillagerData shadow$getVillagerData();\n-\n-    /**\n-     * @author i509VCB - Feb 12, 2020 - 1.14.4\n-     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n-     *\n-     * @author gabizou - January 13th, 2016\n-     * @reason This overwrites the current method using the multi-dimension array with\n-     * our {@link VillagerRegistry} to handle career levels and registrations\n-     * for {@link TradeOfferGenerator}s. Note that this takes over entirely\n-     * whatever vanilla does, but this allows for maximum customization for\n-     * plugins to handle gracefully.\n-     */\n-    @Override\n-    public void addTrades(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers) {\n-        Set<Integer> set = Sets.newHashSet();\n-        if (newTrades.length > maxNumbers) {\n-            while(set.size() < maxNumbers) {\n-                set.add(this.rand.nextInt(newTrades.length));\n-            }\n-        } else {\n-            for(int i = 0; i < newTrades.length; ++i) {\n-                set.add(i);\n-            }\n-        }\n-\n-        List<MerchantOffer> newOffers = new ArrayList<>(); // Sponge - Create temporary list to store the new offers\n-\n-        for(Integer integer : set) {\n-            VillagerTrades.ITrade villagertrades$itrade = newTrades[integer];\n-            MerchantOffer merchantoffer = villagertrades$itrade.getOffer(this, this.rand); // Sponge - cast \"this\" to Abstract Villager Entity\n-            if (merchantoffer != null) {\n-                // Sponge - Add to newOffers list instead\n-                //givenMerchantOffers.add(merchantoffer);\n-                newOffers.add(merchantoffer);\n-            }\n-        }\n-\n-        // Sponge - start - fire off the trade offer mutators for the new trades\n-        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) newOffers, (Profession) this.shadow$getVillagerData().getProfession(), this.shadow$getVillagerData().getLevel(), this.rand);\n-        givenMerchantOffers.addAll(newOffers); // Finally add the mutated offers to the trade offer map.\n-        // Sponge - end\n-    }\n-}\n", "next_change": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\nnew file mode 100644\nindex 000000000..1595dc4de\n--- /dev/null\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n", "chunk": "@@ -0,0 +1,76 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.entity.merchant.villager;\n+\n+import net.minecraft.entity.merchant.villager.VillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n+import org.spongepowered.api.data.type.Profession;\n+import org.spongepowered.api.entity.living.trader.Villager;\n+import org.spongepowered.api.item.merchant.TradeOffer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.registry.SpongeVillagerRegistry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Mixin(VillagerEntity.class)\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntityMixin {\n+    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Here we apply the Trade Mutators to the villager's new merchant offers and then add them to the entity.\n+     *\n+     * @param givenMerchantOffers The merchant's current merchant offers.\n+     * @param newTrades The trade factories representing the new trades this villager will receive.\n+     * @param maxNumbers The maximum amount of trades for this villager to receive.\n+     * @param ci CallbackInfo.\n+     */\n+    @Override\n+    protected void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n+        VillagerEntity villager = (VillagerEntity) (Object) this;\n+        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) impl$newOffers, (Profession) villager.getVillagerData().getProfession(), villager.getVillagerData().getLevel(), this.rand);\n+        givenMerchantOffers.addAll(this.impl$newOffers); // Finally add the mutated offers to the trade offer map.\n+        this.impl$newOffers.clear(); // And clean up our temp values\n+    }\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Override the redirect call in AbstractVillagerEntityMixin to capture merchant offers to be mutated.\n+     *\n+     * @param merchantOffers The current offers the villager has.\n+     * @param offer The merchant offer to add.\n+     * @return true\n+     */\n+    @Override\n+    protected boolean impl$addNewOfferToTempMap(MerchantOffers merchantOffers, MerchantOffer offer) {\n+        return this.impl$newOffers.add(offer);\n+    }\n+}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjQxNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236416", "body": "There's no casting going on? What's the comment doing?", "bodyText": "There's no casting going on? What's the comment doing?", "bodyHTML": "<p dir=\"auto\">There's no casting going on? What's the comment doing?</p>", "author": "gabizou", "createdAt": "2020-02-14T03:35:07Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java", "diffHunk": "@@ -24,121 +24,74 @@\n  */\n package org.spongepowered.common.mixin.core.entity.merchant.villager;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n+import com.google.common.collect.Sets;\n+import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerData;\n import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.player.PlayerEntity;\n-import net.minecraft.inventory.Inventory;\n-import net.minecraft.village.MerchantRecipeList;\n-import org.spongepowered.api.data.type.Career;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n import org.spongepowered.api.data.type.Profession;\n import org.spongepowered.api.entity.living.trader.Villager;\n import org.spongepowered.api.item.merchant.TradeOffer;\n import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Overwrite;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.common.SpongeImplHooks;\n-import org.spongepowered.common.bridge.entity.merchant.villager.VillagerEntityBridge;\n-import org.spongepowered.common.data.type.SpongeEntityMetadataType;\n-import org.spongepowered.common.inventory.lens.impl.collections.SlotLensCollection;\n-import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n import org.spongepowered.common.registry.SpongeVillagerRegistry;\n \n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.Random;\n-\n-import javax.annotation.Nullable;\n+import java.util.Set;\n \n @SuppressWarnings(\"rawtypes\")\n @Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AgeableEntityMixin implements VillagerEntityBridge {\n-\n-    @Shadow private int careerId; // careerId\n-    @Shadow private int careerLevel; // careerLevel\n-    @Shadow @Nullable private MerchantRecipeList buyingList; // buyingList\n-    @Shadow @Final private Inventory villagerInventory; // villagerInventory\n-\n-    @Shadow public abstract void setProfession(int professionId); // setProfession\n-    @Shadow public abstract MerchantRecipeList getRecipes(PlayerEntity player);\n-\n-    @Nullable private Profession impl$profession;\n-\n-    @Inject(method = \"setProfession(I)V\", at = @At(\"RETURN\"))\n-    private void onSetProfession(final int professionId, final CallbackInfo ci) {\n-        this.impl$profession = SpongeImplHooks.validateProfession(professionId);\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n+    public VillagerEntityMixin() {\n+        super(null, null);\n     }\n \n-    @Override\n-    public Career bridge$getCareer() {\n-        final List<Career> careers = (List<Career>) this.impl$profession.getCareers();\n-        if (this.careerId == 0 || this.careerId > careers.size()) {\n-            this.careerId = new Random().nextInt(careers.size()) + 1;\n-        }\n-        this.getRecipes(null);\n-        return careers.get(this.careerId - 1);\n-    }\n-\n-    @Override\n-    public Optional<Profession> bridge$getProfessionOptional() {\n-        return Optional.ofNullable(this.impl$profession);\n-    }\n-\n-    @Override\n-    public void bridge$setProfession(final Profession profession) {\n-        this.impl$profession = checkNotNull(profession, \"VillagerProfession cannot be null!\");\n-    }\n-\n-    @Override\n-    public void bridge$setCareer(final Career career) {\n-        this.setProfession(((SpongeEntityMetadataType) career.getProfession()).type);\n-        this.buyingList = null;\n-        this.careerId = ((SpongeCareer) career).type + 1;\n-        this.careerLevel = 1;\n-        this.getRecipes(null);\n-    }\n+    @Shadow public abstract VillagerData shadow$getVillagerData();\n \n     /**\n+     * @author i509VCB - Feb 12, 2020 - 1.14.4\n+     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n+     *\n      * @author gabizou - January 13th, 2016\n      * @reason This overwrites the current method using the multi-dimension array with\n      * our {@link VillagerRegistry} to handle career levels and registrations\n      * for {@link TradeOfferGenerator}s. Note that this takes over entirely\n      * whatever vanilla does, but this allows for maximum customization for\n      * plugins to handle gracefully.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    @Overwrite\n-    private void populateBuyingList() { // populateBuyingList\n-        // Sponge\n-        final List<Career> careers = (List<Career>) this.impl$profession.getCareers();\n-\n-        // EntityVillager.ITradeList[][][] aentityvillager$itradelist = DEFAULT_TRADE_LIST_MAP[this.getProfession()];\n-\n-        if (this.careerId != 0 && this.careerLevel != 0) {\n-            ++this.careerLevel;\n+    @Override\n+    public void addTrades(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers) {\n+        Set<Integer> set = Sets.newHashSet();\n+        if (newTrades.length > maxNumbers) {\n+            while(set.size() < maxNumbers) {\n+                set.add(this.rand.nextInt(newTrades.length));\n+            }\n         } else {\n-            // Sponge change aentityvillager$itradelist to use this.profession.getCareers()\n-            this.careerId = this.rand.nextInt(careers.size()) + 1;\n-            this.careerLevel = 1;\n+            for(int i = 0; i < newTrades.length; ++i) {\n+                set.add(i);\n+            }\n         }\n \n-        if (this.buyingList == null) {\n-            this.buyingList = new MerchantRecipeList();\n+        List<MerchantOffer> newOffers = new ArrayList<>(); // Sponge - Create temporary list to store the new offers\n+\n+        for(Integer integer : set) {\n+            VillagerTrades.ITrade villagertrades$itrade = newTrades[integer];\n+            MerchantOffer merchantoffer = villagertrades$itrade.getOffer(this, this.rand); // Sponge - cast \"this\" to Abstract Villager Entity", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\ndeleted file mode 100644\nindex d7c04303e..000000000\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/*\n- * This file is part of Sponge, licensed under the MIT License (MIT).\n- *\n- * Copyright (c) SpongePowered <https://www.spongepowered.org>\n- * Copyright (c) contributors\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.spongepowered.common.mixin.core.entity.merchant.villager;\n-\n-import com.google.common.collect.Sets;\n-import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerData;\n-import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerTrades;\n-import net.minecraft.item.MerchantOffer;\n-import net.minecraft.item.MerchantOffers;\n-import org.spongepowered.api.data.type.Profession;\n-import org.spongepowered.api.entity.living.trader.Villager;\n-import org.spongepowered.api.item.merchant.TradeOffer;\n-import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n-import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.registry.SpongeVillagerRegistry;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-\n-@SuppressWarnings(\"rawtypes\")\n-@Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n-    public VillagerEntityMixin() {\n-        super(null, null);\n-    }\n-\n-    @Shadow public abstract VillagerData shadow$getVillagerData();\n-\n-    /**\n-     * @author i509VCB - Feb 12, 2020 - 1.14.4\n-     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n-     *\n-     * @author gabizou - January 13th, 2016\n-     * @reason This overwrites the current method using the multi-dimension array with\n-     * our {@link VillagerRegistry} to handle career levels and registrations\n-     * for {@link TradeOfferGenerator}s. Note that this takes over entirely\n-     * whatever vanilla does, but this allows for maximum customization for\n-     * plugins to handle gracefully.\n-     */\n-    @Override\n-    public void addTrades(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers) {\n-        Set<Integer> set = Sets.newHashSet();\n-        if (newTrades.length > maxNumbers) {\n-            while(set.size() < maxNumbers) {\n-                set.add(this.rand.nextInt(newTrades.length));\n-            }\n-        } else {\n-            for(int i = 0; i < newTrades.length; ++i) {\n-                set.add(i);\n-            }\n-        }\n-\n-        List<MerchantOffer> newOffers = new ArrayList<>(); // Sponge - Create temporary list to store the new offers\n-\n-        for(Integer integer : set) {\n-            VillagerTrades.ITrade villagertrades$itrade = newTrades[integer];\n-            MerchantOffer merchantoffer = villagertrades$itrade.getOffer(this, this.rand); // Sponge - cast \"this\" to Abstract Villager Entity\n-            if (merchantoffer != null) {\n-                // Sponge - Add to newOffers list instead\n-                //givenMerchantOffers.add(merchantoffer);\n-                newOffers.add(merchantoffer);\n-            }\n-        }\n-\n-        // Sponge - start - fire off the trade offer mutators for the new trades\n-        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) newOffers, (Profession) this.shadow$getVillagerData().getProfession(), this.shadow$getVillagerData().getLevel(), this.rand);\n-        givenMerchantOffers.addAll(newOffers); // Finally add the mutated offers to the trade offer map.\n-        // Sponge - end\n-    }\n-}\n", "next_change": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\nnew file mode 100644\nindex 000000000..1595dc4de\n--- /dev/null\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n", "chunk": "@@ -0,0 +1,76 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.entity.merchant.villager;\n+\n+import net.minecraft.entity.merchant.villager.VillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n+import org.spongepowered.api.data.type.Profession;\n+import org.spongepowered.api.entity.living.trader.Villager;\n+import org.spongepowered.api.item.merchant.TradeOffer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.registry.SpongeVillagerRegistry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Mixin(VillagerEntity.class)\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntityMixin {\n+    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Here we apply the Trade Mutators to the villager's new merchant offers and then add them to the entity.\n+     *\n+     * @param givenMerchantOffers The merchant's current merchant offers.\n+     * @param newTrades The trade factories representing the new trades this villager will receive.\n+     * @param maxNumbers The maximum amount of trades for this villager to receive.\n+     * @param ci CallbackInfo.\n+     */\n+    @Override\n+    protected void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n+        VillagerEntity villager = (VillagerEntity) (Object) this;\n+        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) impl$newOffers, (Profession) villager.getVillagerData().getProfession(), villager.getVillagerData().getLevel(), this.rand);\n+        givenMerchantOffers.addAll(this.impl$newOffers); // Finally add the mutated offers to the trade offer map.\n+        this.impl$newOffers.clear(); // And clean up our temp values\n+    }\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Override the redirect call in AbstractVillagerEntityMixin to capture merchant offers to be mutated.\n+     *\n+     * @param merchantOffers The current offers the villager has.\n+     * @param offer The merchant offer to add.\n+     * @return true\n+     */\n+    @Override\n+    protected boolean impl$addNewOfferToTempMap(MerchantOffers merchantOffers, MerchantOffer offer) {\n+        return this.impl$newOffers.add(offer);\n+    }\n+}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjUyMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236523", "body": "Could this have been replaced with a `Redirect` on the `addAll`?", "bodyText": "Could this have been replaced with a Redirect on the addAll?", "bodyHTML": "<p dir=\"auto\">Could this have been replaced with a <code>Redirect</code> on the <code>addAll</code>?</p>", "author": "gabizou", "createdAt": "2020-02-14T03:35:46Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java", "diffHunk": "@@ -24,121 +24,74 @@\n  */\n package org.spongepowered.common.mixin.core.entity.merchant.villager;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n+import com.google.common.collect.Sets;\n+import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerData;\n import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.player.PlayerEntity;\n-import net.minecraft.inventory.Inventory;\n-import net.minecraft.village.MerchantRecipeList;\n-import org.spongepowered.api.data.type.Career;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n import org.spongepowered.api.data.type.Profession;\n import org.spongepowered.api.entity.living.trader.Villager;\n import org.spongepowered.api.item.merchant.TradeOffer;\n import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Overwrite;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.common.SpongeImplHooks;\n-import org.spongepowered.common.bridge.entity.merchant.villager.VillagerEntityBridge;\n-import org.spongepowered.common.data.type.SpongeEntityMetadataType;\n-import org.spongepowered.common.inventory.lens.impl.collections.SlotLensCollection;\n-import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n import org.spongepowered.common.registry.SpongeVillagerRegistry;\n \n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.Random;\n-\n-import javax.annotation.Nullable;\n+import java.util.Set;\n \n @SuppressWarnings(\"rawtypes\")\n @Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AgeableEntityMixin implements VillagerEntityBridge {\n-\n-    @Shadow private int careerId; // careerId\n-    @Shadow private int careerLevel; // careerLevel\n-    @Shadow @Nullable private MerchantRecipeList buyingList; // buyingList\n-    @Shadow @Final private Inventory villagerInventory; // villagerInventory\n-\n-    @Shadow public abstract void setProfession(int professionId); // setProfession\n-    @Shadow public abstract MerchantRecipeList getRecipes(PlayerEntity player);\n-\n-    @Nullable private Profession impl$profession;\n-\n-    @Inject(method = \"setProfession(I)V\", at = @At(\"RETURN\"))\n-    private void onSetProfession(final int professionId, final CallbackInfo ci) {\n-        this.impl$profession = SpongeImplHooks.validateProfession(professionId);\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n+    public VillagerEntityMixin() {\n+        super(null, null);\n     }\n \n-    @Override\n-    public Career bridge$getCareer() {\n-        final List<Career> careers = (List<Career>) this.impl$profession.getCareers();\n-        if (this.careerId == 0 || this.careerId > careers.size()) {\n-            this.careerId = new Random().nextInt(careers.size()) + 1;\n-        }\n-        this.getRecipes(null);\n-        return careers.get(this.careerId - 1);\n-    }\n-\n-    @Override\n-    public Optional<Profession> bridge$getProfessionOptional() {\n-        return Optional.ofNullable(this.impl$profession);\n-    }\n-\n-    @Override\n-    public void bridge$setProfession(final Profession profession) {\n-        this.impl$profession = checkNotNull(profession, \"VillagerProfession cannot be null!\");\n-    }\n-\n-    @Override\n-    public void bridge$setCareer(final Career career) {\n-        this.setProfession(((SpongeEntityMetadataType) career.getProfession()).type);\n-        this.buyingList = null;\n-        this.careerId = ((SpongeCareer) career).type + 1;\n-        this.careerLevel = 1;\n-        this.getRecipes(null);\n-    }\n+    @Shadow public abstract VillagerData shadow$getVillagerData();\n \n     /**\n+     * @author i509VCB - Feb 12, 2020 - 1.14.4\n+     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n+     *\n      * @author gabizou - January 13th, 2016\n      * @reason This overwrites the current method using the multi-dimension array with\n      * our {@link VillagerRegistry} to handle career levels and registrations\n      * for {@link TradeOfferGenerator}s. Note that this takes over entirely\n      * whatever vanilla does, but this allows for maximum customization for\n      * plugins to handle gracefully.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    @Overwrite\n-    private void populateBuyingList() { // populateBuyingList\n-        // Sponge\n-        final List<Career> careers = (List<Career>) this.impl$profession.getCareers();\n-\n-        // EntityVillager.ITradeList[][][] aentityvillager$itradelist = DEFAULT_TRADE_LIST_MAP[this.getProfession()];\n-\n-        if (this.careerId != 0 && this.careerLevel != 0) {\n-            ++this.careerLevel;\n+    @Override\n+    public void addTrades(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers) {\n+        Set<Integer> set = Sets.newHashSet();\n+        if (newTrades.length > maxNumbers) {\n+            while(set.size() < maxNumbers) {\n+                set.add(this.rand.nextInt(newTrades.length));\n+            }\n         } else {\n-            // Sponge change aentityvillager$itradelist to use this.profession.getCareers()\n-            this.careerId = this.rand.nextInt(careers.size()) + 1;\n-            this.careerLevel = 1;\n+            for(int i = 0; i < newTrades.length; ++i) {\n+                set.add(i);\n+            }\n         }\n \n-        if (this.buyingList == null) {\n-            this.buyingList = new MerchantRecipeList();\n+        List<MerchantOffer> newOffers = new ArrayList<>(); // Sponge - Create temporary list to store the new offers\n+\n+        for(Integer integer : set) {\n+            VillagerTrades.ITrade villagertrades$itrade = newTrades[integer];\n+            MerchantOffer merchantoffer = villagertrades$itrade.getOffer(this, this.rand); // Sponge - cast \"this\" to Abstract Villager Entity\n+            if (merchantoffer != null) {\n+                // Sponge - Add to newOffers list instead\n+                //givenMerchantOffers.add(merchantoffer);\n+                newOffers.add(merchantoffer);\n+            }\n         }\n \n-        // Sponge start - use our own registry stuffs\n-        checkState(this.careerId <= careers.size(), \"The villager career id is out of bounds fo the available Careers! Found: \" + this.careerId\n-                                                    + \" when the current maximum is: \" + careers.size());\n-        final Career careerLevel = careers.get(this.careerId - 1);\n-        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) this.buyingList, careerLevel, this.careerLevel, this.rand);\n-        // Sponge end\n+        // Sponge - start - fire off the trade offer mutators for the new trades\n+        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) newOffers, (Profession) this.shadow$getVillagerData().getProfession(), this.shadow$getVillagerData().getLevel(), this.rand);\n+        givenMerchantOffers.addAll(newOffers); // Finally add the mutated offers to the trade offer map.", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\ndeleted file mode 100644\nindex d7c04303e..000000000\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/*\n- * This file is part of Sponge, licensed under the MIT License (MIT).\n- *\n- * Copyright (c) SpongePowered <https://www.spongepowered.org>\n- * Copyright (c) contributors\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.spongepowered.common.mixin.core.entity.merchant.villager;\n-\n-import com.google.common.collect.Sets;\n-import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerData;\n-import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerTrades;\n-import net.minecraft.item.MerchantOffer;\n-import net.minecraft.item.MerchantOffers;\n-import org.spongepowered.api.data.type.Profession;\n-import org.spongepowered.api.entity.living.trader.Villager;\n-import org.spongepowered.api.item.merchant.TradeOffer;\n-import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n-import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.registry.SpongeVillagerRegistry;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-\n-@SuppressWarnings(\"rawtypes\")\n-@Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n-    public VillagerEntityMixin() {\n-        super(null, null);\n-    }\n-\n-    @Shadow public abstract VillagerData shadow$getVillagerData();\n-\n-    /**\n-     * @author i509VCB - Feb 12, 2020 - 1.14.4\n-     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n-     *\n-     * @author gabizou - January 13th, 2016\n-     * @reason This overwrites the current method using the multi-dimension array with\n-     * our {@link VillagerRegistry} to handle career levels and registrations\n-     * for {@link TradeOfferGenerator}s. Note that this takes over entirely\n-     * whatever vanilla does, but this allows for maximum customization for\n-     * plugins to handle gracefully.\n-     */\n-    @Override\n-    public void addTrades(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers) {\n-        Set<Integer> set = Sets.newHashSet();\n-        if (newTrades.length > maxNumbers) {\n-            while(set.size() < maxNumbers) {\n-                set.add(this.rand.nextInt(newTrades.length));\n-            }\n-        } else {\n-            for(int i = 0; i < newTrades.length; ++i) {\n-                set.add(i);\n-            }\n-        }\n-\n-        List<MerchantOffer> newOffers = new ArrayList<>(); // Sponge - Create temporary list to store the new offers\n-\n-        for(Integer integer : set) {\n-            VillagerTrades.ITrade villagertrades$itrade = newTrades[integer];\n-            MerchantOffer merchantoffer = villagertrades$itrade.getOffer(this, this.rand); // Sponge - cast \"this\" to Abstract Villager Entity\n-            if (merchantoffer != null) {\n-                // Sponge - Add to newOffers list instead\n-                //givenMerchantOffers.add(merchantoffer);\n-                newOffers.add(merchantoffer);\n-            }\n-        }\n-\n-        // Sponge - start - fire off the trade offer mutators for the new trades\n-        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) newOffers, (Profession) this.shadow$getVillagerData().getProfession(), this.shadow$getVillagerData().getLevel(), this.rand);\n-        givenMerchantOffers.addAll(newOffers); // Finally add the mutated offers to the trade offer map.\n-        // Sponge - end\n-    }\n-}\n", "next_change": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\nnew file mode 100644\nindex 000000000..1595dc4de\n--- /dev/null\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n", "chunk": "@@ -0,0 +1,76 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.entity.merchant.villager;\n+\n+import net.minecraft.entity.merchant.villager.VillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n+import org.spongepowered.api.data.type.Profession;\n+import org.spongepowered.api.entity.living.trader.Villager;\n+import org.spongepowered.api.item.merchant.TradeOffer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.registry.SpongeVillagerRegistry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Mixin(VillagerEntity.class)\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntityMixin {\n+    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Here we apply the Trade Mutators to the villager's new merchant offers and then add them to the entity.\n+     *\n+     * @param givenMerchantOffers The merchant's current merchant offers.\n+     * @param newTrades The trade factories representing the new trades this villager will receive.\n+     * @param maxNumbers The maximum amount of trades for this villager to receive.\n+     * @param ci CallbackInfo.\n+     */\n+    @Override\n+    protected void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n+        VillagerEntity villager = (VillagerEntity) (Object) this;\n+        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) impl$newOffers, (Profession) villager.getVillagerData().getProfession(), villager.getVillagerData().getLevel(), this.rand);\n+        givenMerchantOffers.addAll(this.impl$newOffers); // Finally add the mutated offers to the trade offer map.\n+        this.impl$newOffers.clear(); // And clean up our temp values\n+    }\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Override the redirect call in AbstractVillagerEntityMixin to capture merchant offers to be mutated.\n+     *\n+     * @param merchantOffers The current offers the villager has.\n+     * @param offer The merchant offer to add.\n+     * @return true\n+     */\n+    @Override\n+    protected boolean impl$addNewOfferToTempMap(MerchantOffers merchantOffers, MerchantOffer offer) {\n+        return this.impl$newOffers.add(offer);\n+    }\n+}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjk3Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379236977", "body": "Let me think about this change, because it might be possible to pass in a copy of the `MerchantOffers` at the head of the method (by using a `@ModifyVariable` and doing an injection at the end of the method, allowing us to throw a \"here's a copy of the changes\", or even redirecting the `add()` to add to our own list, and then at the tail, doing the event processing.", "bodyText": "Let me think about this change, because it might be possible to pass in a copy of the MerchantOffers at the head of the method (by using a @ModifyVariable and doing an injection at the end of the method, allowing us to throw a \"here's a copy of the changes\", or even redirecting the add() to add to our own list, and then at the tail, doing the event processing.", "bodyHTML": "<p dir=\"auto\">Let me think about this change, because it might be possible to pass in a copy of the <code>MerchantOffers</code> at the head of the method (by using a <code>@ModifyVariable</code> and doing an injection at the end of the method, allowing us to throw a \"here's a copy of the changes\", or even redirecting the <code>add()</code> to add to our own list, and then at the tail, doing the event processing.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:38:17Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java", "diffHunk": "@@ -24,121 +24,74 @@\n  */\n package org.spongepowered.common.mixin.core.entity.merchant.villager;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n+import com.google.common.collect.Sets;\n+import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerData;\n import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.player.PlayerEntity;\n-import net.minecraft.inventory.Inventory;\n-import net.minecraft.village.MerchantRecipeList;\n-import org.spongepowered.api.data.type.Career;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n import org.spongepowered.api.data.type.Profession;\n import org.spongepowered.api.entity.living.trader.Villager;\n import org.spongepowered.api.item.merchant.TradeOffer;\n import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Overwrite;\n import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.common.SpongeImplHooks;\n-import org.spongepowered.common.bridge.entity.merchant.villager.VillagerEntityBridge;\n-import org.spongepowered.common.data.type.SpongeEntityMetadataType;\n-import org.spongepowered.common.inventory.lens.impl.collections.SlotLensCollection;\n-import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n import org.spongepowered.common.registry.SpongeVillagerRegistry;\n \n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.Random;\n-\n-import javax.annotation.Nullable;\n+import java.util.Set;\n \n @SuppressWarnings(\"rawtypes\")\n @Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AgeableEntityMixin implements VillagerEntityBridge {\n-\n-    @Shadow private int careerId; // careerId\n-    @Shadow private int careerLevel; // careerLevel\n-    @Shadow @Nullable private MerchantRecipeList buyingList; // buyingList\n-    @Shadow @Final private Inventory villagerInventory; // villagerInventory\n-\n-    @Shadow public abstract void setProfession(int professionId); // setProfession\n-    @Shadow public abstract MerchantRecipeList getRecipes(PlayerEntity player);\n-\n-    @Nullable private Profession impl$profession;\n-\n-    @Inject(method = \"setProfession(I)V\", at = @At(\"RETURN\"))\n-    private void onSetProfession(final int professionId, final CallbackInfo ci) {\n-        this.impl$profession = SpongeImplHooks.validateProfession(professionId);\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n+    public VillagerEntityMixin() {\n+        super(null, null);\n     }\n \n-    @Override\n-    public Career bridge$getCareer() {\n-        final List<Career> careers = (List<Career>) this.impl$profession.getCareers();\n-        if (this.careerId == 0 || this.careerId > careers.size()) {\n-            this.careerId = new Random().nextInt(careers.size()) + 1;\n-        }\n-        this.getRecipes(null);\n-        return careers.get(this.careerId - 1);\n-    }\n-\n-    @Override\n-    public Optional<Profession> bridge$getProfessionOptional() {\n-        return Optional.ofNullable(this.impl$profession);\n-    }\n-\n-    @Override\n-    public void bridge$setProfession(final Profession profession) {\n-        this.impl$profession = checkNotNull(profession, \"VillagerProfession cannot be null!\");\n-    }\n-\n-    @Override\n-    public void bridge$setCareer(final Career career) {\n-        this.setProfession(((SpongeEntityMetadataType) career.getProfession()).type);\n-        this.buyingList = null;\n-        this.careerId = ((SpongeCareer) career).type + 1;\n-        this.careerLevel = 1;\n-        this.getRecipes(null);\n-    }\n+    @Shadow public abstract VillagerData shadow$getVillagerData();\n \n     /**\n+     * @author i509VCB - Feb 12, 2020 - 1.14.4\n+     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n+     *\n      * @author gabizou - January 13th, 2016\n      * @reason This overwrites the current method using the multi-dimension array with\n      * our {@link VillagerRegistry} to handle career levels and registrations\n      * for {@link TradeOfferGenerator}s. Note that this takes over entirely\n      * whatever vanilla does, but this allows for maximum customization for\n      * plugins to handle gracefully.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    @Overwrite\n-    private void populateBuyingList() { // populateBuyingList\n-        // Sponge\n-        final List<Career> careers = (List<Career>) this.impl$profession.getCareers();\n-\n-        // EntityVillager.ITradeList[][][] aentityvillager$itradelist = DEFAULT_TRADE_LIST_MAP[this.getProfession()];\n-\n-        if (this.careerId != 0 && this.careerLevel != 0) {\n-            ++this.careerLevel;\n+    @Override\n+    public void addTrades(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers) {\n+        Set<Integer> set = Sets.newHashSet();\n+        if (newTrades.length > maxNumbers) {\n+            while(set.size() < maxNumbers) {\n+                set.add(this.rand.nextInt(newTrades.length));\n+            }\n         } else {\n-            // Sponge change aentityvillager$itradelist to use this.profession.getCareers()\n-            this.careerId = this.rand.nextInt(careers.size()) + 1;\n-            this.careerLevel = 1;\n+            for(int i = 0; i < newTrades.length; ++i) {\n+                set.add(i);\n+            }\n         }\n \n-        if (this.buyingList == null) {\n-            this.buyingList = new MerchantRecipeList();\n+        List<MerchantOffer> newOffers = new ArrayList<>(); // Sponge - Create temporary list to store the new offers\n+\n+        for(Integer integer : set) {\n+            VillagerTrades.ITrade villagertrades$itrade = newTrades[integer];\n+            MerchantOffer merchantoffer = villagertrades$itrade.getOffer(this, this.rand); // Sponge - cast \"this\" to Abstract Villager Entity\n+            if (merchantoffer != null) {\n+                // Sponge - Add to newOffers list instead\n+                //givenMerchantOffers.add(merchantoffer);", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ0NjYwNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r380446604", "bodyText": "I did the latter option in this case for simplicity's sake. It's 1 redirect and tail injection now.", "author": "i509VCB", "createdAt": "2020-02-18T04:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNjk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\ndeleted file mode 100644\nindex d7c04303e..000000000\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n+++ /dev/null\n", "chunk": "@@ -1,97 +0,0 @@\n-/*\n- * This file is part of Sponge, licensed under the MIT License (MIT).\n- *\n- * Copyright (c) SpongePowered <https://www.spongepowered.org>\n- * Copyright (c) contributors\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.spongepowered.common.mixin.core.entity.merchant.villager;\n-\n-import com.google.common.collect.Sets;\n-import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerData;\n-import net.minecraft.entity.merchant.villager.VillagerEntity;\n-import net.minecraft.entity.merchant.villager.VillagerTrades;\n-import net.minecraft.item.MerchantOffer;\n-import net.minecraft.item.MerchantOffers;\n-import org.spongepowered.api.data.type.Profession;\n-import org.spongepowered.api.entity.living.trader.Villager;\n-import org.spongepowered.api.item.merchant.TradeOffer;\n-import org.spongepowered.api.item.merchant.TradeOfferGenerator;\n-import org.spongepowered.api.item.merchant.VillagerRegistry;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.common.registry.SpongeVillagerRegistry;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-\n-@SuppressWarnings(\"rawtypes\")\n-@Mixin(VillagerEntity.class)\n-public abstract class VillagerEntityMixin extends AbstractVillagerEntity {\n-    public VillagerEntityMixin() {\n-        super(null, null);\n-    }\n-\n-    @Shadow public abstract VillagerData shadow$getVillagerData();\n-\n-    /**\n-     * @author i509VCB - Feb 12, 2020 - 1.14.4\n-     * @reason Call trade mutators when adding offers. This covers both Wandering Traders and Villagers.\n-     *\n-     * @author gabizou - January 13th, 2016\n-     * @reason This overwrites the current method using the multi-dimension array with\n-     * our {@link VillagerRegistry} to handle career levels and registrations\n-     * for {@link TradeOfferGenerator}s. Note that this takes over entirely\n-     * whatever vanilla does, but this allows for maximum customization for\n-     * plugins to handle gracefully.\n-     */\n-    @Override\n-    public void addTrades(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers) {\n-        Set<Integer> set = Sets.newHashSet();\n-        if (newTrades.length > maxNumbers) {\n-            while(set.size() < maxNumbers) {\n-                set.add(this.rand.nextInt(newTrades.length));\n-            }\n-        } else {\n-            for(int i = 0; i < newTrades.length; ++i) {\n-                set.add(i);\n-            }\n-        }\n-\n-        List<MerchantOffer> newOffers = new ArrayList<>(); // Sponge - Create temporary list to store the new offers\n-\n-        for(Integer integer : set) {\n-            VillagerTrades.ITrade villagertrades$itrade = newTrades[integer];\n-            MerchantOffer merchantoffer = villagertrades$itrade.getOffer(this, this.rand); // Sponge - cast \"this\" to Abstract Villager Entity\n-            if (merchantoffer != null) {\n-                // Sponge - Add to newOffers list instead\n-                //givenMerchantOffers.add(merchantoffer);\n-                newOffers.add(merchantoffer);\n-            }\n-        }\n-\n-        // Sponge - start - fire off the trade offer mutators for the new trades\n-        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) newOffers, (Profession) this.shadow$getVillagerData().getProfession(), this.shadow$getVillagerData().getLevel(), this.rand);\n-        givenMerchantOffers.addAll(newOffers); // Finally add the mutated offers to the trade offer map.\n-        // Sponge - end\n-    }\n-}\n", "next_change": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\nnew file mode 100644\nindex 000000000..1595dc4de\n--- /dev/null\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/VillagerEntityMixin.java\n", "chunk": "@@ -0,0 +1,76 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.entity.merchant.villager;\n+\n+import net.minecraft.entity.merchant.villager.VillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n+import org.spongepowered.api.data.type.Profession;\n+import org.spongepowered.api.entity.living.trader.Villager;\n+import org.spongepowered.api.item.merchant.TradeOffer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.registry.SpongeVillagerRegistry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Mixin(VillagerEntity.class)\n+public abstract class VillagerEntityMixin extends AbstractVillagerEntityMixin {\n+    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Here we apply the Trade Mutators to the villager's new merchant offers and then add them to the entity.\n+     *\n+     * @param givenMerchantOffers The merchant's current merchant offers.\n+     * @param newTrades The trade factories representing the new trades this villager will receive.\n+     * @param maxNumbers The maximum amount of trades for this villager to receive.\n+     * @param ci CallbackInfo.\n+     */\n+    @Override\n+    protected void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n+        VillagerEntity villager = (VillagerEntity) (Object) this;\n+        SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) impl$newOffers, (Profession) villager.getVillagerData().getProfession(), villager.getVillagerData().getLevel(), this.rand);\n+        givenMerchantOffers.addAll(this.impl$newOffers); // Finally add the mutated offers to the trade offer map.\n+        this.impl$newOffers.clear(); // And clean up our temp values\n+    }\n+\n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason Override the redirect call in AbstractVillagerEntityMixin to capture merchant offers to be mutated.\n+     *\n+     * @param merchantOffers The current offers the villager has.\n+     * @param offer The merchant offer to add.\n+     * @return true\n+     */\n+    @Override\n+    protected boolean impl$addNewOfferToTempMap(MerchantOffers merchantOffers, MerchantOffer offer) {\n+        return this.impl$newOffers.add(offer);\n+    }\n+}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNzAyNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379237026", "body": "Change method name with prefix.", "bodyText": "Change method name with prefix.", "bodyHTML": "<p dir=\"auto\">Change method name with prefix.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:38:33Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java", "diffHunk": "@@ -63,24 +63,25 @@\n      * @author gabizou - July 26th, 2018\n      * @reason Adds sanity check for calling a change block event pre\n      *\n-     * @param entityEnderman The enderman doing griefing\n+     * @param endermanEntity The enderman doing griefing\n      * @return The block state that can be placed, or null if the enderman can't grief\n      */\n     @Redirect(\n         method = \"shouldExecute\",\n         at = @At(\n             value = \"INVOKE\",\n-            target = \"Lnet/minecraft/entity/monster/EntityEnderman;getHeldBlockState()Lnet/minecraft/block/state/IBlockState;\"\n+            target = \"Lnet/minecraft/entity/monster/EndermanEntity;getHeldBlockState()Lnet/minecraft/block/BlockState;\"\n         )\n     )\n     @Nullable\n-    private BlockState onCanGrief(final EndermanEntity entityEnderman) {\n-        final BlockState heldBlockState = entityEnderman.getHeldBlockState();\n+    private BlockState onCanGrief(final EndermanEntity endermanEntity) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java\nindex 6e622e3bd..ddb1930a0 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java\n", "chunk": "@@ -74,14 +74,14 @@\n         )\n     )\n     @Nullable\n-    private BlockState onCanGrief(final EndermanEntity endermanEntity) {\n+    private BlockState impl$onCanGrief(final EndermanEntity endermanEntity) {\n         final BlockState heldBlockState = endermanEntity.getHeldBlockState();\n         return ((GrieferBridge) this.enderman).bridge$canGrief() ? heldBlockState : null;\n     }\n \n     /**\n      * @author gabizou - July 26th, 2018\\\n-     * @author i509VCB - February 11th, 2020 - 1.14.4\n+     * @author i509VCB - February 11th, 2020 - 1.14.4 TODO: This needs to be looked at with another eye to make sure this injection isn't stupidly made\n      * @reason Makes enderman check for block changes before they can place their blocks.\n      * This allows plugins to cancel the event regardless without issue.\n      *\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNzEwOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379237109", "body": "Multiline this annotation. Also, is it required to have all the parameters?", "bodyText": "Multiline this annotation. Also, is it required to have all the parameters?", "bodyHTML": "<p dir=\"auto\">Multiline this annotation. Also, is it required to have all the parameters?</p>", "author": "gabizou", "createdAt": "2020-02-14T03:38:59Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java", "diffHunk": "@@ -92,10 +93,10 @@ private BlockState onCanGrief(final EndermanEntity entityEnderman) {\n      * @param state The new state\n      * @return True if the state is a full cube, and the event didnt get cancelled\n      */\n-    @Redirect(method = \"canPlaceBlock\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/state/IBlockState;isFullCube()Z\"))\n+    @Redirect(method = \"func_220836_a(Lnet/minecraft/world/IWorldReader;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/block/BlockState;Lnet/minecraft/block/BlockState;Lnet/minecraft/util/math/BlockPos;)Z\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/state/IBlockState;isFullCube()Z\"))", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java\nindex 6e622e3bd..ddb1930a0 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/EndermanEntity_PlaceBlockGoalMixin.java\n", "chunk": "@@ -93,9 +93,13 @@ private BlockState onCanGrief(final EndermanEntity endermanEntity) {\n      * @param state The new state\n      * @return True if the state is a full cube, and the event didnt get cancelled\n      */\n-    @Redirect(method = \"func_220836_a(Lnet/minecraft/world/IWorldReader;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;Lnet/minecraft/block/BlockState;Lnet/minecraft/block/BlockState;Lnet/minecraft/util/math/BlockPos;)Z\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/state/IBlockState;isFullCube()Z\"))\n-    private boolean onUpdateCancel(final BlockState blockState, final World world, final BlockPos pos, final Block toPlace,\n-        final BlockState old, final BlockState state) {\n+    @Redirect(method = \"func_220836_a\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/block/BlockState;isNormalCube(Lnet/minecraft/world/IBlockReader;Lnet/minecraft/util/math/BlockPos;)Z\"\n+        )\n+    )\n+    private boolean impl$onPlaceBlockCancel(final BlockState blockState, final World world, final BlockPos pos, final Block toPlace,\n+            final BlockState old, final BlockState state) {\n         if (state.isNormalCube(world, pos)) {\n             if (ShouldFire.CHANGE_BLOCK_EVENT_PRE) {\n                 final Location<org.spongepowered.api.world.World> location =\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNzIzMQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379237231", "body": "Fix method name with prefix..", "bodyText": "Fix method name with prefix..", "bodyHTML": "<p dir=\"auto\">Fix method name with prefix..</p>", "author": "gabizou", "createdAt": "2020-02-14T03:39:41Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/monster/SilverfishEntity_HideInStoneGoalMixin.java", "diffHunk": "@@ -42,7 +42,7 @@ public SilverfishEntity_HideInStoneGoalMixin(CreatureEntity creatureIn, double s\n     }\n \n     @Redirect(method = \"shouldExecute\",\n-        at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/BlockSilverfish;canContainSilverfish(Lnet/minecraft/block/state/IBlockState;)Z\"))\n+        at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/SilverfishBlock;canContainSilverfish(Lnet/minecraft/block/BlockState;)Z\"))\n     private boolean onCanGrief(final BlockState blockState) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/SilverfishEntity_HideInStoneGoalMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/SilverfishEntity_HideInStoneGoalMixin.java\nindex a7eaae55f..cc2118b7c 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/SilverfishEntity_HideInStoneGoalMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/SilverfishEntity_HideInStoneGoalMixin.java\n", "chunk": "@@ -43,7 +43,7 @@ public SilverfishEntity_HideInStoneGoalMixin(CreatureEntity creatureIn, double s\n \n     @Redirect(method = \"shouldExecute\",\n         at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/SilverfishBlock;canContainSilverfish(Lnet/minecraft/block/BlockState;)Z\"))\n-    private boolean onCanGrief(final BlockState blockState) {\n+    private boolean impl$onCanGrief(final BlockState blockState) {\n         return SilverfishBlock.canContainSilverfish(blockState) && ((GrieferBridge) this.creature).bridge$canGrief();\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNzMyNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379237324", "body": "Might want to multi-line.", "bodyText": "Might want to multi-line.", "bodyHTML": "<p dir=\"auto\">Might want to multi-line.</p>", "author": "gabizou", "createdAt": "2020-02-14T03:40:20Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java", "diffHunk": "@@ -61,9 +61,9 @@\n         ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.thrower);\n     }\n \n-    @Redirect(method = \"onUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/EntityThrowable;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))\n+    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\nindex cf395c835..6b8786164 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\n", "chunk": "@@ -43,27 +44,31 @@\n @Mixin(ThrowableEntity.class)\n public abstract class ThrowableEntityMixin extends EntityMixin {\n \n-    @Shadow protected LivingEntity thrower;\n+    @Shadow protected LivingEntity owner;\n     @Shadow protected abstract void onImpact(RayTraceResult movingObjectPosition);\n \n     @Nullable\n     public ProjectileSource projectileSource;\n \n     @Override\n-    public void spongeImpl$readFromSpongeCompound(final CompoundNBT compound) {\n-        super.spongeImpl$readFromSpongeCompound(compound);\n+    public void impl$readFromSpongeCompound(final CompoundNBT compound) {\n+        super.impl$readFromSpongeCompound(compound);\n         ProjectileSourceSerializer.readSourceFromNbt(compound, ((Projectile) this));\n     }\n \n     @Override\n-    public void spongeImpl$writeToSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$writeToSpongeCompound(compound);\n-        ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.thrower);\n+    public void impl$writeToSpongeCompound(CompoundNBT compound) {\n+        super.impl$writeToSpongeCompound(compound);\n+        ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.owner);\n     }\n \n-    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))\n-    public void onProjectileImpact(ThrowableEntity projectile, RayTraceResult movingObjectPosition) {\n-        if (this.world.isRemote || movingObjectPosition.getType() == RayTraceResult.Type.MISS) {\n+    @Redirect(method = \"tick()V\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"\n+        )\n+    )\n+    private void impl$handleProjectileImpact(ThrowableEntity projectile, RayTraceResult movingObjectPosition) {\n+        if (((WorldBridge) this.world).bridge$isFake() || movingObjectPosition.getType() == RayTraceResult.Type.MISS) {\n             this.onImpact(movingObjectPosition);\n             return;\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNzM0NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379237345", "body": "Change method name and prefix..", "bodyText": "Change method name and prefix..", "bodyHTML": "<p dir=\"auto\">Change method name and prefix..</p>", "author": "gabizou", "createdAt": "2020-02-14T03:40:27Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java", "diffHunk": "@@ -61,9 +61,9 @@\n         ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.thrower);\n     }\n \n-    @Redirect(method = \"onUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/EntityThrowable;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))\n+    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))\n     public void onProjectileImpact(ThrowableEntity projectile, RayTraceResult movingObjectPosition) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\nindex cf395c835..6b8786164 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\n", "chunk": "@@ -43,27 +44,31 @@\n @Mixin(ThrowableEntity.class)\n public abstract class ThrowableEntityMixin extends EntityMixin {\n \n-    @Shadow protected LivingEntity thrower;\n+    @Shadow protected LivingEntity owner;\n     @Shadow protected abstract void onImpact(RayTraceResult movingObjectPosition);\n \n     @Nullable\n     public ProjectileSource projectileSource;\n \n     @Override\n-    public void spongeImpl$readFromSpongeCompound(final CompoundNBT compound) {\n-        super.spongeImpl$readFromSpongeCompound(compound);\n+    public void impl$readFromSpongeCompound(final CompoundNBT compound) {\n+        super.impl$readFromSpongeCompound(compound);\n         ProjectileSourceSerializer.readSourceFromNbt(compound, ((Projectile) this));\n     }\n \n     @Override\n-    public void spongeImpl$writeToSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$writeToSpongeCompound(compound);\n-        ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.thrower);\n+    public void impl$writeToSpongeCompound(CompoundNBT compound) {\n+        super.impl$writeToSpongeCompound(compound);\n+        ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.owner);\n     }\n \n-    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))\n-    public void onProjectileImpact(ThrowableEntity projectile, RayTraceResult movingObjectPosition) {\n-        if (this.world.isRemote || movingObjectPosition.getType() == RayTraceResult.Type.MISS) {\n+    @Redirect(method = \"tick()V\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"\n+        )\n+    )\n+    private void impl$handleProjectileImpact(ThrowableEntity projectile, RayTraceResult movingObjectPosition) {\n+        if (((WorldBridge) this.world).bridge$isFake() || movingObjectPosition.getType() == RayTraceResult.Type.MISS) {\n             this.onImpact(movingObjectPosition);\n             return;\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzNzQ5NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r379237495", "body": "TODO will need to change to a `SpongeImplHooks.isMainThread` or `WorldBridge.bridge$isFake()` for the `world.isRemote.`", "bodyText": "TODO will need to change to a SpongeImplHooks.isMainThread or WorldBridge.bridge$isFake() for the world.isRemote.", "bodyHTML": "<p dir=\"auto\">TODO will need to change to a <code>SpongeImplHooks.isMainThread</code> or <code>WorldBridge.bridge$isFake()</code> for the <code>world.isRemote.</code></p>", "author": "gabizou", "createdAt": "2020-02-14T03:41:14Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java", "diffHunk": "@@ -61,9 +61,9 @@\n         ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.thrower);\n     }\n \n-    @Redirect(method = \"onUpdate\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/EntityThrowable;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))\n+    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))\n     public void onProjectileImpact(ThrowableEntity projectile, RayTraceResult movingObjectPosition) {\n-        if (this.world.isRemote || movingObjectPosition.typeOfHit == RayTraceResult.Type.MISS) {\n+        if (this.world.isRemote || movingObjectPosition.getType() == RayTraceResult.Type.MISS) {", "originalCommit": "28e7257e4dae66eaae78d8cae681fc70e99a5ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\nindex cf395c835..6b8786164 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/projectile/ThrowableEntityMixin.java\n", "chunk": "@@ -43,27 +44,31 @@\n @Mixin(ThrowableEntity.class)\n public abstract class ThrowableEntityMixin extends EntityMixin {\n \n-    @Shadow protected LivingEntity thrower;\n+    @Shadow protected LivingEntity owner;\n     @Shadow protected abstract void onImpact(RayTraceResult movingObjectPosition);\n \n     @Nullable\n     public ProjectileSource projectileSource;\n \n     @Override\n-    public void spongeImpl$readFromSpongeCompound(final CompoundNBT compound) {\n-        super.spongeImpl$readFromSpongeCompound(compound);\n+    public void impl$readFromSpongeCompound(final CompoundNBT compound) {\n+        super.impl$readFromSpongeCompound(compound);\n         ProjectileSourceSerializer.readSourceFromNbt(compound, ((Projectile) this));\n     }\n \n     @Override\n-    public void spongeImpl$writeToSpongeCompound(CompoundNBT compound) {\n-        super.spongeImpl$writeToSpongeCompound(compound);\n-        ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.thrower);\n+    public void impl$writeToSpongeCompound(CompoundNBT compound) {\n+        super.impl$writeToSpongeCompound(compound);\n+        ProjectileSourceSerializer.writeSourceToNbt(compound, ((Projectile) this).getShooter(), this.owner);\n     }\n \n-    @Redirect(method = \"tick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"))\n-    public void onProjectileImpact(ThrowableEntity projectile, RayTraceResult movingObjectPosition) {\n-        if (this.world.isRemote || movingObjectPosition.getType() == RayTraceResult.Type.MISS) {\n+    @Redirect(method = \"tick()V\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/entity/projectile/ThrowableEntity;onImpact(Lnet/minecraft/util/math/RayTraceResult;)V\"\n+        )\n+    )\n+    private void impl$handleProjectileImpact(ThrowableEntity projectile, RayTraceResult movingObjectPosition) {\n+        if (((WorldBridge) this.world).bridge$isFake() || movingObjectPosition.getType() == RayTraceResult.Type.MISS) {\n             this.onImpact(movingObjectPosition);\n             return;\n         }\n", "next_change": null}]}}, {"oid": "a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "url": "https://github.com/SpongePowered/Sponge/commit/a9896ac8e37b1b0f38a79fbb4d01272c7767ab1d", "message": "Make references to GameRules refer to actual RuleKey rather than string constant, clean up and make most of core entity mixins compile", "committedDate": "2020-02-18T04:04:11Z", "type": "forcePushed"}, {"oid": "735f108ed788a97a7a8309ee70453e48fdcf0594", "url": "https://github.com/SpongePowered/Sponge/commit/735f108ed788a97a7a8309ee70453e48fdcf0594", "message": "Make references to GameRules refer to actual RuleKey rather than string constant, clean up and make most of core entity mixins compile", "committedDate": "2020-02-18T04:05:28Z", "type": "forcePushed"}, {"oid": "92a4e950408beab4785ef89b99ea8115af0e1d54", "url": "https://github.com/SpongePowered/Sponge/commit/92a4e950408beab4785ef89b99ea8115af0e1d54", "message": "Make references to GameRules refer to actual RuleKey rather than string constant, clean up and make most of core entity mixins compile", "committedDate": "2020-02-19T01:07:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5OTE0OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382399148", "body": "extra spaces unnecessary", "bodyText": "extra spaces unnecessary", "bodyHTML": "<p dir=\"auto\">extra spaces unnecessary</p>", "author": "gabizou", "createdAt": "2020-02-21T05:04:04Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java", "diffHunk": "@@ -152,47 +143,61 @@\n     @Shadow public int fire;\n     @Shadow public int hurtResistantTime;\n     @Shadow protected EntityDataManager dataManager;\n-    @Shadow public int dimension;\n+    @Shadow public DimensionType dimension;\n     @Shadow private boolean invulnerable;\n-\n-    @Shadow public abstract void setPosition(double x, double y, double z);\n-    @Shadow public abstract void setDead();\n-    @Shadow public abstract int getAir();\n-    @Shadow public abstract void setAir(int air);\n-    @Shadow public abstract float getEyeHeight();\n-    @Shadow public abstract void setCustomNameTag(String name);\n-    @Shadow public abstract UUID getUniqueID();\n-    @Shadow public abstract AxisAlignedBB getEntityBoundingBox();\n-    @Shadow public abstract void setFire(int seconds);\n-    @Shadow public abstract CompoundNBT writeToNBT(CompoundNBT compound);\n+    @Shadow @Final private EntityType<?> type;\n+\n+    @Shadow public abstract void shadow$remove();\n+    @Shadow public abstract int shadow$getAir();\n+    @Shadow public abstract void shadow$setAir(int air);\n+    @Shadow public abstract void shadow$setCustomName(@Nullable ITextComponent name);\n+    @Shadow public abstract UUID shadow$getUniqueID();\n+    @Shadow public abstract AxisAlignedBB shadow$getBoundingBox();\n+    @Shadow public abstract void shadow$setFire(int seconds);\n     @Shadow public abstract boolean attackEntityFrom(DamageSource source, float amount);\n-    @Shadow public abstract int getEntityId();\n-    @Shadow public abstract boolean isBeingRidden();\n-    @Shadow public abstract SoundCategory getSoundCategory();\n-    @Shadow public abstract List<Entity> shadow$getPassengers();\n+    @Shadow public abstract int shadow$getEntityId();\n+    @Shadow public abstract boolean shadow$isBeingRidden();\n     @Shadow public abstract Entity getRidingEntity();\n-    @Shadow public abstract void setItemStackToSlot(EquipmentSlotType slotIn, ItemStack stack);\n-    @Shadow public abstract void playSound(SoundEvent soundIn, float volume, float pitch);\n-    @Shadow public abstract boolean isEntityInvulnerable(DamageSource source);\n-    @Shadow public abstract boolean isSprinting();\n-    @Shadow public abstract boolean shadow$isInWater();\n-    @Shadow public abstract boolean isRiding();\n-    @Shadow public abstract boolean isOnSameTeam(Entity entityIn);\n-    @Shadow public abstract double getDistanceSq(Entity entityIn);\n+    @Shadow public abstract void shadow$playSound(SoundEvent soundIn, float volume, float pitch);\n     @Shadow public abstract void setLocationAndAngles(double x, double y, double z, float yaw, float pitch);\n-    @Shadow public abstract void setPositionAndUpdate(double x, double y, double z);\n-    @Shadow protected abstract void removePassenger(Entity passenger);\n-    @Shadow protected abstract void setSize(float width, float height);\n-    @Shadow protected abstract void applyEnchantments(LivingEntity entityLivingBaseIn, Entity entityIn);\n-    @Shadow public abstract void extinguish();\n-    @Shadow protected abstract void setFlag(int flag, boolean set);\n-    @Shadow @Nullable public Entity changeDimension(final int dimension) { return null; } // Shadow\n-    @Shadow public abstract boolean isInvisible();\n-    @Shadow public abstract void setInvisible(boolean invisible);\n-    @Shadow public abstract int getMaxAir();\n-    @Shadow protected abstract int getFireImmuneTicks();\n-\n-    private int customFireImmuneTicks = this.getFireImmuneTicks();\n+    @Shadow protected abstract void shadow$removePassenger(Entity passenger);\n+    @Shadow @Nullable public Entity shadow$changeDimension(DimensionType dimension) { return null; } // Shadow\n+    @Shadow public abstract boolean shadow$isInvisible();\n+    @Shadow public abstract void shadow$setInvisible(boolean invisible);\n+    @Shadow protected abstract int shadow$getFireImmuneTicks();\n+    @Shadow public abstract EntityType<?> shadow$getType();\n+    @Shadow public abstract boolean shadow$isInvulnerableTo(DamageSource source);\n+    @Shadow public abstract float shadow$getEyeHeight();\n+    @Shadow protected abstract void shadow$setFlag(int flag, boolean set);\n+    @Shadow public abstract void shadow$extinguish();\n+    @Shadow public abstract void shadow$setPosition(double x, double y, double z);\n+    @Shadow public abstract void shadow$setMotion(Vec3d motionIn);\n+    @Shadow public abstract void shadow$setMotion(double x, double y, double z);\n+    @Shadow public abstract boolean shadow$isSprinting();\n+    @Shadow public abstract Vec3d shadow$getMotion();\n+    @Shadow public abstract boolean shadow$isOnSameTeam(Entity entityIn);\n+    @Shadow public abstract double shadow$getDistanceSq(Entity entityIn);\n+    @Shadow @Nullable public abstract ItemEntity shadow$entityDropItem(IItemProvider itemIn, int offset);\n+    @Shadow public abstract boolean shadow$isInWater();\n+    @Shadow public abstract boolean shadow$isPassenger();\n+    @Shadow @Nullable public abstract Team shadow$getTeam();\n+\n+    @Shadow public abstract void shadow$setPositionAndUpdate(double x, double y, double z);\n+", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\nindex 19b244838..dc624d132 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/EntityMixin.java\n", "chunk": "@@ -181,9 +181,7 @@\n     @Shadow public abstract boolean shadow$isInWater();\n     @Shadow public abstract boolean shadow$isPassenger();\n     @Shadow @Nullable public abstract Team shadow$getTeam();\n-\n     @Shadow public abstract void shadow$setPositionAndUpdate(double x, double y, double z);\n-\n     @Shadow public abstract int shadow$getMaxAir();\n \n     private boolean impl$isConstructing = true;\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDE4OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382400188", "body": "Yes, but that can be put up as an issue to remind us later.", "bodyText": "Yes, but that can be put up as an issue to remind us later.", "bodyHTML": "<p dir=\"auto\">Yes, but that can be put up as an issue to remind us later.</p>", "author": "gabizou", "createdAt": "2020-02-21T05:10:09Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.entity.merchant.villager;\n+\n+import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n+import org.spongepowered.api.data.type.Profession;\n+import org.spongepowered.api.entity.living.trader.Villager;\n+import org.spongepowered.api.item.merchant.TradeOffer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n+import org.spongepowered.common.registry.SpongeVillagerRegistry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Mixin(AbstractVillagerEntity.class)\n+public abstract class AbstractVillagerEntityMixin extends AgeableEntityMixin {\n+    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n+\n+    /**\n+     * @author i509VCB - February 17th, 2020 - 1.14.4\n+     *\n+     * @reason Here we apply the Trade Mutators. For a villager we will apply our mutators and then add them to the villager's merchant offers.\n+     * If a wandering trader is the subject here, we do nothing since that merchant would already have it's new merchant offers.\n+     *\n+     * @todo: Do we want to support Trade Mutators on Wandering Trader's TradeOffers?", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU3NDYxNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382574617", "bodyText": "Made an api issue about it", "author": "i509VCB", "createdAt": "2020-02-21T13:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\nindex 37df6c14c..12e4deff1 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\n", "chunk": "@@ -40,40 +40,15 @@\n import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n import org.spongepowered.common.registry.SpongeVillagerRegistry;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n @Mixin(AbstractVillagerEntity.class)\n public abstract class AbstractVillagerEntityMixin extends AgeableEntityMixin {\n-    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n-\n-    /**\n-     * @author i509VCB - February 17th, 2020 - 1.14.4\n-     *\n-     * @reason Here we apply the Trade Mutators. For a villager we will apply our mutators and then add them to the villager's merchant offers.\n-     * If a wandering trader is the subject here, we do nothing since that merchant would already have it's new merchant offers.\n-     *\n-     * @todo: Do we want to support Trade Mutators on Wandering Trader's TradeOffers?\n-     *\n-     * @param givenMerchantOffers The merchant's current merchant offers.\n-     * @param newTrades The trade factories representing the new trades this villager will receive.\n-     * @param maxNumbers The maximum amount of trades for this villager to receive.\n-     * @param ci CallbackInfo.\n-     */\n-    @Inject(method = \"addTrades(Lnet/minecraft/item/MerchantOffers;[Lnet/minecraft/entity/merchant/villager/VillagerTrades$ITrade;I)V\", at = @At(\"TAIL\"))\n-    private void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n-        if ((Object) this instanceof VillagerEntity) {\n-            VillagerEntity villager = (VillagerEntity) (Object) this;\n-            SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) impl$newOffers, (Profession) villager.getVillagerData().getProfession(), villager.getVillagerData().getLevel(), this.rand);\n-            givenMerchantOffers.addAll(this.impl$newOffers); // Finally add the mutated offers to the trade offer map.\n-            this.impl$newOffers.clear(); // And clean up our temp values\n-        }\n-    }\n-\n     /**\n-     * @author i509VCB - February 17th, 2020 - 1.14.4\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason In order to apply the Trade mutators, we need a way to intercept the merchant offers. In VillagerEntityMixin we override this redirect to capture all the merchant offers being added to the merchant.\n+     * This does the exact same as vanilla but the VillagerEntity and WanderingTraderEntity would override this to implement their own logic.\n      *\n-     * @reason In order to apply the Trade mutators, we need to redirect addition to the MerchantOffers till the all offers have been \"created\".\n      * @param merchantOffers The current offers the villager has.\n      * @param offer The merchant offer to add.\n      * @return true.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDU1Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382400556", "body": "So there's a bit of a elegant hack to doing this:\r\nYou can redirect to do the same as the original method, and then override this injection method in `VillagerEntityMixin` to do all this logic that otherwise you'd be doing.\r\n\r\nI do this with WorldMixin_Tracker and ServerWorldMixin_Tracker to do extra logic only on server worlds for injections that are in the subclass.", "bodyText": "So there's a bit of a elegant hack to doing this:\nYou can redirect to do the same as the original method, and then override this injection method in VillagerEntityMixin to do all this logic that otherwise you'd be doing.\nI do this with WorldMixin_Tracker and ServerWorldMixin_Tracker to do extra logic only on server worlds for injections that are in the subclass.", "bodyHTML": "<p dir=\"auto\">So there's a bit of a elegant hack to doing this:<br>\nYou can redirect to do the same as the original method, and then override this injection method in <code>VillagerEntityMixin</code> to do all this logic that otherwise you'd be doing.</p>\n<p dir=\"auto\">I do this with WorldMixin_Tracker and ServerWorldMixin_Tracker to do extra logic only on server worlds for injections that are in the subclass.</p>", "author": "gabizou", "createdAt": "2020-02-21T05:12:04Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.entity.merchant.villager;\n+\n+import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n+import org.spongepowered.api.data.type.Profession;\n+import org.spongepowered.api.entity.living.trader.Villager;\n+import org.spongepowered.api.item.merchant.TradeOffer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n+import org.spongepowered.common.registry.SpongeVillagerRegistry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Mixin(AbstractVillagerEntity.class)\n+public abstract class AbstractVillagerEntityMixin extends AgeableEntityMixin {\n+    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n+\n+    /**\n+     * @author i509VCB - February 17th, 2020 - 1.14.4\n+     *\n+     * @reason Here we apply the Trade Mutators. For a villager we will apply our mutators and then add them to the villager's merchant offers.\n+     * If a wandering trader is the subject here, we do nothing since that merchant would already have it's new merchant offers.\n+     *\n+     * @todo: Do we want to support Trade Mutators on Wandering Trader's TradeOffers?\n+     *\n+     * @param givenMerchantOffers The merchant's current merchant offers.\n+     * @param newTrades The trade factories representing the new trades this villager will receive.\n+     * @param maxNumbers The maximum amount of trades for this villager to receive.\n+     * @param ci CallbackInfo.\n+     */\n+    @Inject(method = \"addTrades(Lnet/minecraft/item/MerchantOffers;[Lnet/minecraft/entity/merchant/villager/VillagerTrades$ITrade;I)V\", at = @At(\"TAIL\"))\n+    private void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n+        if ((Object) this instanceof VillagerEntity) {", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5Mzg5MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382693890", "bodyText": "So something similar to how you did impl$wrapTileEntityTick in WorldMixin_Tracker and then override it in ServerWorldMixin_Tracker", "author": "i509VCB", "createdAt": "2020-02-21T16:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Nzg2NA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382877864", "bodyText": "Yep, precisely", "author": "gabizou", "createdAt": "2020-02-22T02:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\nindex 37df6c14c..12e4deff1 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\n", "chunk": "@@ -40,40 +40,15 @@\n import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n import org.spongepowered.common.registry.SpongeVillagerRegistry;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n @Mixin(AbstractVillagerEntity.class)\n public abstract class AbstractVillagerEntityMixin extends AgeableEntityMixin {\n-    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n-\n-    /**\n-     * @author i509VCB - February 17th, 2020 - 1.14.4\n-     *\n-     * @reason Here we apply the Trade Mutators. For a villager we will apply our mutators and then add them to the villager's merchant offers.\n-     * If a wandering trader is the subject here, we do nothing since that merchant would already have it's new merchant offers.\n-     *\n-     * @todo: Do we want to support Trade Mutators on Wandering Trader's TradeOffers?\n-     *\n-     * @param givenMerchantOffers The merchant's current merchant offers.\n-     * @param newTrades The trade factories representing the new trades this villager will receive.\n-     * @param maxNumbers The maximum amount of trades for this villager to receive.\n-     * @param ci CallbackInfo.\n-     */\n-    @Inject(method = \"addTrades(Lnet/minecraft/item/MerchantOffers;[Lnet/minecraft/entity/merchant/villager/VillagerTrades$ITrade;I)V\", at = @At(\"TAIL\"))\n-    private void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n-        if ((Object) this instanceof VillagerEntity) {\n-            VillagerEntity villager = (VillagerEntity) (Object) this;\n-            SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) impl$newOffers, (Profession) villager.getVillagerData().getProfession(), villager.getVillagerData().getLevel(), this.rand);\n-            givenMerchantOffers.addAll(this.impl$newOffers); // Finally add the mutated offers to the trade offer map.\n-            this.impl$newOffers.clear(); // And clean up our temp values\n-        }\n-    }\n-\n     /**\n-     * @author i509VCB - February 17th, 2020 - 1.14.4\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason In order to apply the Trade mutators, we need a way to intercept the merchant offers. In VillagerEntityMixin we override this redirect to capture all the merchant offers being added to the merchant.\n+     * This does the exact same as vanilla but the VillagerEntity and WanderingTraderEntity would override this to implement their own logic.\n      *\n-     * @reason In order to apply the Trade mutators, we need to redirect addition to the MerchantOffers till the all offers have been \"created\".\n      * @param merchantOffers The current offers the villager has.\n      * @param offer The merchant offer to add.\n      * @return true.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDYzNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382400634", "body": "Same with this, if the logic is specific to `VillagerEntity`, it can be overridden in the mixin", "bodyText": "Same with this, if the logic is specific to VillagerEntity, it can be overridden in the mixin", "bodyHTML": "<p dir=\"auto\">Same with this, if the logic is specific to <code>VillagerEntity</code>, it can be overridden in the mixin</p>", "author": "gabizou", "createdAt": "2020-02-21T05:12:29Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.entity.merchant.villager;\n+\n+import net.minecraft.entity.merchant.villager.AbstractVillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerEntity;\n+import net.minecraft.entity.merchant.villager.VillagerTrades;\n+import net.minecraft.item.MerchantOffer;\n+import net.minecraft.item.MerchantOffers;\n+import org.spongepowered.api.data.type.Profession;\n+import org.spongepowered.api.entity.living.trader.Villager;\n+import org.spongepowered.api.item.merchant.TradeOffer;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.mixin.core.entity.AgeableEntityMixin;\n+import org.spongepowered.common.registry.SpongeVillagerRegistry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Mixin(AbstractVillagerEntity.class)\n+public abstract class AbstractVillagerEntityMixin extends AgeableEntityMixin {\n+    private List<MerchantOffer> impl$newOffers = new ArrayList<>();\n+\n+    /**\n+     * @author i509VCB - February 17th, 2020 - 1.14.4\n+     *\n+     * @reason Here we apply the Trade Mutators. For a villager we will apply our mutators and then add them to the villager's merchant offers.\n+     * If a wandering trader is the subject here, we do nothing since that merchant would already have it's new merchant offers.\n+     *\n+     * @todo: Do we want to support Trade Mutators on Wandering Trader's TradeOffers?\n+     *\n+     * @param givenMerchantOffers The merchant's current merchant offers.\n+     * @param newTrades The trade factories representing the new trades this villager will receive.\n+     * @param maxNumbers The maximum amount of trades for this villager to receive.\n+     * @param ci CallbackInfo.\n+     */\n+    @Inject(method = \"addTrades(Lnet/minecraft/item/MerchantOffers;[Lnet/minecraft/entity/merchant/villager/VillagerTrades$ITrade;I)V\", at = @At(\"TAIL\"))\n+    private void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n+        if ((Object) this instanceof VillagerEntity) {\n+            VillagerEntity villager = (VillagerEntity) (Object) this;\n+            SpongeVillagerRegistry.getInstance().populateOffers((Villager) this, (List<TradeOffer>) (List<?>) impl$newOffers, (Profession) villager.getVillagerData().getProfession(), villager.getVillagerData().getLevel(), this.rand);\n+            givenMerchantOffers.addAll(this.impl$newOffers); // Finally add the mutated offers to the trade offer map.\n+            this.impl$newOffers.clear(); // And clean up our temp values\n+        }\n+    }\n+\n+    /**\n+     * @author i509VCB - February 17th, 2020 - 1.14.4\n+     *\n+     * @reason In order to apply the Trade mutators, we need to redirect addition to the MerchantOffers till the all offers have been \"created\".\n+     * @param merchantOffers The current offers the villager has.\n+     * @param offer The merchant offer to add.\n+     * @return true.\n+     */\n+    @Redirect(method = \"addTrades(Lnet/minecraft/item/MerchantOffers;[Lnet/minecraft/entity/merchant/villager/VillagerTrades$ITrade;I)V\",\n+        at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/item/MerchantOffers;add(Lnet/minecraft/item/MerchantOffer;)Z\")\n+    )\n+    private boolean impl$addNewOfferToTempMap(MerchantOffers merchantOffers, MerchantOffer offer) {\n+        if ((Object) this instanceof VillagerEntity) { // Currently only villagers support trade mutators.\n+            return this.impl$newOffers.add(offer);", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\nindex 37df6c14c..12e4deff1 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/merchant/villager/AbstractVillagerEntityMixin.java\n", "chunk": "@@ -81,12 +56,23 @@\n     @Redirect(method = \"addTrades(Lnet/minecraft/item/MerchantOffers;[Lnet/minecraft/entity/merchant/villager/VillagerTrades$ITrade;I)V\",\n         at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/item/MerchantOffers;add(Lnet/minecraft/item/MerchantOffer;)Z\")\n     )\n-    private boolean impl$addNewOfferToTempMap(MerchantOffers merchantOffers, MerchantOffer offer) {\n-        if ((Object) this instanceof VillagerEntity) { // Currently only villagers support trade mutators.\n-            return this.impl$newOffers.add(offer);\n-        }\n-\n+    protected boolean impl$addNewOfferToTempMap(MerchantOffers merchantOffers, MerchantOffer offer) {\n         return merchantOffers.add(offer);\n     }\n \n+    /**\n+     * @author i509VCB - February 21st, 2020 - 1.14.4\n+     * @reason At TAIL, all merchant offers have been selected. Implementations of this method would process trade mutators and then add to the givenMerchantOffers.\n+     *\n+     * @param givenMerchantOffers\n+     * @param newTrades\n+     * @param maxNumbers\n+     * @param ci\n+     */\n+    @Inject(method = \"addTrades(Lnet/minecraft/item/MerchantOffers;[Lnet/minecraft/entity/merchant/villager/VillagerTrades$ITrade;I)V\",\n+        at = @At(\"TAIL\"))\n+    protected void impl$addAndApplyTradeMutators(MerchantOffers givenMerchantOffers, VillagerTrades.ITrade[] newTrades, int maxNumbers, CallbackInfo ci) {\n+        // Do nothing, this is overriden by the Villager/WanderingTraderEntity\n+    }\n+\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDc2NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382400765", "body": "The constant here should be shoved into the related (or new) `Constants` nested class.", "bodyText": "The constant here should be shoved into the related (or new) Constants nested class.", "bodyHTML": "<p dir=\"auto\">The constant here should be shoved into the related (or new) <code>Constants</code> nested class.</p>", "author": "gabizou", "createdAt": "2020-02-21T05:13:18Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java", "diffHunk": "@@ -55,15 +57,15 @@\n     @Shadow private int fuseTime;\n     @Shadow private int explosionRadius;\n \n-    @Shadow public abstract void ignite();\n-    @Shadow public abstract int getCreeperState();\n-    @Shadow public abstract void setCreeperState(int state);\n-    @Shadow private void explode() { } // explode\n+    @Shadow public abstract void shadow$ignite();\n+    @Shadow public abstract int shadow$getCreeperState();\n+    @Shadow public abstract void shadow$setCreeperState(int state);\n+    @Shadow private void shadow$explode() { } // explode\n \n-    private int fuseDuration = 30;\n-    private boolean interactPrimeCancelled;\n-    private boolean stateDirty;\n-    private boolean detonationCancelled;\n+    private int impl$fuseDuration = 30;", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\nindex d19cff1f2..a2e4c1152 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\n", "chunk": "@@ -62,7 +62,7 @@\n     @Shadow public abstract void shadow$setCreeperState(int state);\n     @Shadow private void shadow$explode() { } // explode\n \n-    private int impl$fuseDuration = 30;\n+    private int impl$fuseDuration = Constants.Entity.Creeper.FUSE_DURATION;\n     private boolean impl$interactPrimeCancelled;\n     private boolean impl$stateDirty;\n     private boolean impl$detonationCancelled;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "454e93dd9dd3a1f6fed51d17450ae64a9435fb6f", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\nindex d19cff1f2..a2e4c1152 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\n", "chunk": "@@ -62,7 +62,7 @@ public abstract class CreeperEntityMixin extends MonsterEntityMixin implements F\n     @Shadow public abstract void shadow$setCreeperState(int state);\n     @Shadow private void shadow$explode() { } // explode\n \n-    private int impl$fuseDuration = 30;\n+    private int impl$fuseDuration = Constants.Entity.Creeper.FUSE_DURATION;\n     private boolean impl$interactPrimeCancelled;\n     private boolean impl$stateDirty;\n     private boolean impl$detonationCancelled;\n", "next_change": null}]}, "commits_in_main": [{"oid": "454e93dd9dd3a1f6fed51d17450ae64a9435fb6f", "message": "Merge commit", "committedDate": null}, {"oid": "be5a9caad71118bf53d0d78f624897bc452c5749", "committedDate": "2020-03-19 21:34:27 +0100", "message": "fixing a few compile errors"}, {"oid": "74ea9174d3b37b356b1d3fb64e1a5cbe5ad3ad0e", "committedDate": "2020-04-02 18:29:28 -0700", "message": "Move mixins to their proper sourceset."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDgxNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382400817", "body": "Fix the method name/prefixing here please", "bodyText": "Fix the method name/prefixing here please", "bodyHTML": "<p dir=\"auto\">Fix the method name/prefixing here please</p>", "author": "gabizou", "createdAt": "2020-02-21T05:13:42Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java", "diffHunk": "@@ -147,36 +149,39 @@ private void postStateChange(final int state, final CallbackInfo ci) {\n                 .shouldPlaySmoke(smoking)\n                 .shouldBreakBlocks(smoking && ((GrieferBridge) this).bridge$canGrief()))\n                 .orElseGet(() -> {\n-                    this.detonationCancelled = true;\n+                    this.impl$detonationCancelled = true;\n                     return null;\n                 });\n     }\n \n     @Inject(method = \"explode\", at = @At(\"RETURN\"))\n     private void postExplode(final CallbackInfo ci) {\n-        if (this.detonationCancelled) {\n-            this.detonationCancelled = this.isDead = false;\n+        if (this.impl$detonationCancelled) {\n+            this.impl$detonationCancelled = this.isDead = false;\n         }\n     }\n \n-    @Redirect(method = \"processInteract\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/monster/EntityCreeper;ignite()V\"))\n+    @Redirect(method = \"processInteract\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/monster/CreeperEntity;ignite()V\"))\n     private void onInteractIgnite(final CreeperEntity self) {", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\nindex d19cff1f2..a2e4c1152 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/monster/CreeperEntityMixin.java\n", "chunk": "@@ -162,7 +162,7 @@ private void postExplode(final CallbackInfo ci) {\n     }\n \n     @Redirect(method = \"processInteract\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/monster/CreeperEntity;ignite()V\"))\n-    private void onInteractIgnite(final CreeperEntity self) {\n+    private void impl$onProcessIgnition(final CreeperEntity self) {\n         this.impl$interactPrimeCancelled = !this.bridge$shouldPrime();\n         if (!this.impl$interactPrimeCancelled) {\n             this.shadow$ignite();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMTMyMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382401322", "body": "Space between shadow and non-shadow fields please", "bodyText": "Space between shadow and non-shadow fields please", "bodyHTML": "<p dir=\"auto\">Space between shadow and non-shadow fields please</p>", "author": "gabizou", "createdAt": "2020-02-21T05:16:17Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java", "diffHunk": "@@ -130,46 +129,47 @@\n     @Shadow public int experienceLevel;\n     @Shadow public int experienceTotal;\n     @Shadow public float experience;\n-    @Shadow public PlayerAbilities capabilities;\n+    @Shadow public PlayerAbilities abilities;\n     @Shadow public net.minecraft.entity.player.PlayerInventory inventory;\n-    @Shadow public BlockPos bedLocation;\n-\n-    @Shadow public abstract boolean isPlayerSleeping();\n-    @Shadow public abstract boolean isSpectator();\n-    @Shadow public abstract int xpBarCap();\n-    @Shadow public abstract float getCooledAttackStrength(float adjustTicks);\n-    @Shadow public abstract float getAIMoveSpeed();\n-    @Shadow public abstract void onCriticalHit(net.minecraft.entity.Entity entityHit);\n-    @Shadow public abstract void onEnchantmentCritical(net.minecraft.entity.Entity entityHit); // onEnchantmentCritical\n-    @Shadow public abstract void addExhaustion(float p_71020_1_);\n-    @Shadow public abstract void addStat(@Nullable Stat stat, int amount);\n-    @Shadow public abstract void addStat(Stat stat);\n-    @Shadow public abstract void resetCooldown();\n-    @Shadow public abstract void spawnSweepParticles(); //spawnSweepParticles()\n-    @Shadow public abstract void takeStat(Stat stat);\n-    @Shadow protected abstract void destroyVanishingCursedItems(); // Filter vanishing curse enchanted items\n-    @Shadow public void wakeUpPlayer(final boolean immediately, final boolean updateWorldFlag, final boolean setSpawn) {};\n-    @Shadow @Nullable public abstract ItemEntity dropItem(boolean dropAll); // Overridden in EntityPlayerMPMixin for tracking\n-    @Shadow public abstract FoodStats getFoodStats();\n-    @Shadow public abstract GameProfile getGameProfile();\n-    @Shadow public abstract Scoreboard getWorldScoreboard();\n-    @Shadow public abstract String shadow$getName();\n-    @Shadow @Nullable public abstract Team getTeam();\n-    @Shadow public abstract void addExperienceLevel(int levels);\n-    @Shadow public abstract void addScore(int scoreIn);\n-\n-    @Shadow protected abstract void spawnShoulderEntities();\n-    @Shadow public abstract boolean isCreative();\n-\n-    @Shadow public boolean canAttackPlayer(final PlayerEntity other) {\n+    @Shadow public BlockPos spawnPos;\n+\n+    @Shadow public abstract boolean shadow$isSpectator();\n+    @Shadow public abstract int shadow$xpBarCap();\n+    @Shadow public abstract float shadow$getCooledAttackStrength(float adjustTicks);\n+    @Shadow public abstract float shadow$getAIMoveSpeed();\n+    @Shadow public abstract void shadow$onCriticalHit(net.minecraft.entity.Entity entityHit);\n+    @Shadow public abstract void shadow$onEnchantmentCritical(net.minecraft.entity.Entity entityHit); // onEnchantmentCritical\n+    @Shadow public abstract void shadow$addExhaustion(float p_71020_1_);\n+    @Shadow public abstract void shadow$addStat(ResourceLocation stat, int amount);\n+    @Shadow public abstract void shadow$addStat(@Nullable Stat stat, int amount);\n+    @Shadow public abstract void shadow$addStat(ResourceLocation stat);\n+    @Shadow public abstract void shadow$resetCooldown();\n+    @Shadow public abstract void shadow$spawnSweepParticles(); //spawnSweepParticles()\n+    @Shadow public abstract void shadow$takeStat(Stat stat);\n+    @Shadow protected abstract void shadow$destroyVanishingCursedItems(); // Filter vanishing curse enchanted items\n+    @Shadow public void shadow$wakeUpPlayer(final boolean immediately, final boolean updateWorldFlag, final boolean setSpawn) {};\n+    @Shadow @Nullable public abstract ItemEntity shadow$dropItem(boolean dropAll); // Overridden in EntityPlayerMPMixin for tracking\n+    @Shadow @Nullable public abstract ItemEntity shadow$dropItem(final ItemStack droppedItem, final boolean dropAround, final boolean traceItem);\n+    @Shadow public abstract FoodStats shadow$getFoodStats();\n+    @Shadow public abstract GameProfile shadow$getGameProfile();\n+    @Shadow public abstract Scoreboard shadow$getWorldScoreboard();\n+    @Shadow public abstract void shadow$addExperienceLevel(int levels);\n+    @Shadow public abstract void shadow$addScore(int scoreIn);\n+    @Shadow protected abstract void shadow$spawnShoulderEntities();\n+    @Shadow public abstract boolean shadow$isCreative();\n+    @Shadow public boolean shadow$canAttackPlayer(final PlayerEntity other) {\n         return false;\n     }\n+    @Shadow public abstract SoundCategory shadow$getSoundCategory();\n \n-    private boolean affectsSpawning = true;\n-    private Vector3d targetedLocation = VecHelper.toVector3d(this.world.getSpawnPoint());\n-    private boolean dontRecalculateExperience;\n-    private boolean shouldRestoreInventory = false;\n-    protected final boolean isFake = SpongeImplHooks.isFakePlayer((PlayerEntity) (Object) this);\n+    @Shadow public abstract String shadow$getScoreboardName();\n+\n+    @Shadow public Container openContainer;", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\nindex 77f125cd8..d910b9071 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\n", "chunk": "@@ -161,18 +162,14 @@\n         return false;\n     }\n     @Shadow public abstract SoundCategory shadow$getSoundCategory();\n-\n     @Shadow public abstract String shadow$getScoreboardName();\n \n-    @Shadow public Container openContainer;\n     private boolean impl$affectsSpawning = true;\n     private Vector3d impl$targetedLocation = VecHelper.toVector3d(this.world.getSpawnPoint());\n     private boolean impl$dontRecalculateExperience;\n     private boolean impl$shouldRestoreInventory = false;\n     protected final boolean impl$isFake = SpongeImplHooks.isFakePlayer((PlayerEntity) (Object) this);\n \n-\n-\n     @Inject(method = \"getDisplayName\", at = @At(\"RETURN\"), cancellable = true)\n     private void impl$getDisplayNameWithParsing(final CallbackInfoReturnable<ITextComponent> ci) {\n         ci.setReturnValue(LegacyTexts.parseComponent((StringTextComponent) ci.getReturnValue(), SpongeTexts.COLOR_CHAR));\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMTkwNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382401906", "body": "```suggestion\r\n    @Redirect(method = \"canPlayerEdit\",\r\n        at = @At(value = \"INVOKE\", \r\n            target = \"Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/tags/NetworkTagManager;Lnet/minecraft/util/CachedBlockInfo;)Z\"))\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Redirect(method = \"canPlayerEdit\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/tags/NetworkTagManager;Lnet/minecraft/util/CachedBlockInfo;)Z\"))\n          \n          \n            \n                @Redirect(method = \"canPlayerEdit\",\n          \n          \n            \n                    at = @At(value = \"INVOKE\", \n          \n          \n            \n                        target = \"Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/tags/NetworkTagManager;Lnet/minecraft/util/CachedBlockInfo;)Z\"))", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Redirect</span>(<span class=\"pl-c1\">method</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>canPlayerEdit<span class=\"pl-pds\">\"</span></span>,<span class=\"x x-first\"> </span><span class=\"pl-c1 x\">at</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-k x\">@At</span><span class=\"x\">(</span><span class=\"pl-c1 x\">value</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">INVOKE</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-c1 x\">target</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/tags/NetworkTagManager;Lnet/minecraft/util/CachedBlockInfo;)Z</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">))</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Redirect</span>(<span class=\"pl-c1\">method</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>canPlayerEdit<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        at <span class=\"pl-k\">=</span> <span class=\"pl-k\">@At</span>(<span class=\"pl-c1\">value</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>INVOKE<span class=\"pl-pds\">\"</span></span>, </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            target <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/tags/NetworkTagManager;Lnet/minecraft/util/CachedBlockInfo;)Z<span class=\"pl-pds\">\"</span></span>))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gabizou", "createdAt": "2020-02-21T05:19:00Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java", "diffHunk": "@@ -407,20 +406,21 @@ private void spongePlaySound(final World world, final PlayerEntity player, final\n      * however, sometimes that isn't enough.\n      *\n      * @param stack The item stack in use\n-     * @param block The target block\n+     * @param tagManager The tag manager\n+     * @param cachedBlockInfo The cached block info.\n      * @param pos The target position\n      * @param facing The facing direction of the player\n      * @param sameStack The very same stack as the first parameter\n      * @return Check if the player is a fake player, if it is, then just do\n      *  the same return, otherwise, throw an event first and then return if the\n      *  event is cancelled, or the stack.canPlaceOn\n      */\n-    @Redirect(method = \"canPlayerEdit\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/block/Block;)Z\"))\n-    private boolean canEditSpongeThrowChangePreEvent(\n-        final ItemStack stack, final Block block, final BlockPos pos, final Direction facing, final ItemStack sameStack) {\n+    @Redirect(method = \"canPlayerEdit\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/tags/NetworkTagManager;Lnet/minecraft/util/CachedBlockInfo;)Z\"))", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\nindex 77f125cd8..d910b9071 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\n", "chunk": "@@ -415,7 +412,9 @@ public void onDeath(final DamageSource cause) {\n      *  the same return, otherwise, throw an event first and then return if the\n      *  event is cancelled, or the stack.canPlaceOn\n      */\n-    @Redirect(method = \"canPlayerEdit\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/tags/NetworkTagManager;Lnet/minecraft/util/CachedBlockInfo;)Z\"))\n+    @Redirect(method = \"canPlayerEdit\",\n+        at = @At(value = \"INVOKE\",\n+            target = \"Lnet/minecraft/item/ItemStack;canPlaceOn(Lnet/minecraft/tags/NetworkTagManager;Lnet/minecraft/util/CachedBlockInfo;)Z\"))\n     private boolean impl$canEditSpongeThrowChangePreEvent(\n         final ItemStack stack, final NetworkTagManager tagManager, final CachedBlockInfo cachedBlockInfo, final BlockPos pos, final Direction facing, final ItemStack sameStack) {\n         // Lazy evaluation, if the stack isn't placeable anyways, might as well not\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMjE3NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382402175", "body": "```suggestion\r\n                    final Vec3d targetMotion = targetEntity.getMotion();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Vec3d targetMotion = targetEntity.getMotion();\n          \n          \n            \n                                final Vec3d targetMotion = targetEntity.getMotion();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">Vec3d</span> targetMotion <span class=\"pl-k\">=</span> targetEntity<span class=\"pl-k\">.</span>getMotion();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Vec3d</span> targetMotion <span class=\"pl-k\">=</span> targetEntity<span class=\"pl-k\">.</span>getMotion();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "gabizou", "createdAt": "2020-02-21T05:20:38Z", "path": "src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java", "diffHunk": "@@ -788,9 +774,7 @@ public void attackTargetEntityWithCurrentItem(final Entity targetEntity) {\n                         }\n                     }\n \n-                    final double targetMotionX = targetEntity.motionX;\n-                    final double targetMotionY = targetEntity.motionY;\n-                    final double targetMotionZ = targetEntity.motionZ;\n+                    Vec3d targetMotion = targetEntity.getMotion();", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java b/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\nindex 77f125cd8..d910b9071 100644\n--- a/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\n+++ b/src/main/java/org/spongepowered/common/mixin/core/entity/player/PlayerEntityMixin.java\n", "chunk": "@@ -774,7 +773,7 @@ public void attackTargetEntityWithCurrentItem(final Entity targetEntity) {\n                         }\n                     }\n \n-                    Vec3d targetMotion = targetEntity.getMotion();\n+                    final Vec3d targetMotion = targetEntity.getMotion();\n                     final boolean attackSucceeded = targetEntity.attackEntityFrom(DamageSource.causePlayerDamage((PlayerEntity) (Object) this), damage);\n \n                     if (attackSucceeded) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMjQ4Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382402487", "body": "don't just check if the world is remote, we have a better check: `!((WorldBridge) this.world).bridge$isFake()`", "bodyText": "don't just check if the world is remote, we have a better check: !((WorldBridge) this.world).bridge$isFake()", "bodyHTML": "<p dir=\"auto\">don't just check if the world is remote, we have a better check: <code>!((WorldBridge) this.world).bridge$isFake()</code></p>", "author": "gabizou", "createdAt": "2020-02-21T05:22:09Z", "path": "src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.tracker.entity;\n+\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.LivingEntity;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.event.CauseStackManager;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.common.event.tracking.PhaseContext;\n+import org.spongepowered.common.event.tracking.PhaseTracker;\n+import org.spongepowered.common.event.tracking.phase.entity.EntityPhase;\n+\n+@Mixin(LivingEntity.class)\n+public abstract class LivingEntityMixin_Tracker extends Entity {\n+    @Shadow protected abstract void shadow$onDeathUpdate();\n+\n+    public LivingEntityMixin_Tracker() {\n+        super(null, null);\n+    }\n+\n+    /**\n+     * @author i509VCB - February 17th, 2020 - 1.14.4\n+     *\n+     * @reason Enter phase state on entity death.\n+     * @param livingEntity The entity which is dying.\n+     */\n+    @Redirect(method = \"baseTick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;onDeathUpdate()V\"))\n+    private void tracker$enterPhaseOnDeath(final LivingEntity livingEntity) {\n+        if (!this.world.isRemote) {", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java b/src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java\nindex 889d17a7e..49a2c297c 100644\n--- a/src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java\n+++ b/src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java\n", "chunk": "@@ -52,7 +49,7 @@ public LivingEntityMixin_Tracker() {\n      */\n     @Redirect(method = \"baseTick()V\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/entity/LivingEntity;onDeathUpdate()V\"))\n     private void tracker$enterPhaseOnDeath(final LivingEntity livingEntity) {\n-        if (!this.world.isRemote) {\n+        if (!((WorldBridge) this.world).bridge$isFake()) {\n             try (final CauseStackManager.StackFrame frame = Sponge.getCauseStackManager().pushCauseFrame();\n                  final PhaseContext<?> context = EntityPhase.State.DEATH_UPDATE.createPhaseContext(PhaseTracker.SERVER).source(livingEntity)) {\n                 context.buildAndSwitch();\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMjYwOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2503#discussion_r382402609", "body": "Can extend `EntityMixin` from core, or if there's one in the tracker package.", "bodyText": "Can extend EntityMixin from core, or if there's one in the tracker package.", "bodyHTML": "<p dir=\"auto\">Can extend <code>EntityMixin</code> from core, or if there's one in the tracker package.</p>", "author": "gabizou", "createdAt": "2020-02-21T05:22:52Z", "path": "src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.tracker.entity;\n+\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.LivingEntity;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.event.CauseStackManager;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.common.event.tracking.PhaseContext;\n+import org.spongepowered.common.event.tracking.PhaseTracker;\n+import org.spongepowered.common.event.tracking.phase.entity.EntityPhase;\n+\n+@Mixin(LivingEntity.class)\n+public abstract class LivingEntityMixin_Tracker extends Entity {", "originalCommit": "92a4e950408beab4785ef89b99ea8115af0e1d54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java b/src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java\nindex 889d17a7e..49a2c297c 100644\n--- a/src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java\n+++ b/src/main/java/org/spongepowered/common/mixin/tracker/entity/LivingEntityMixin_Tracker.java\n", "chunk": "@@ -32,18 +31,16 @@\n import org.spongepowered.asm.mixin.Shadow;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.common.bridge.world.WorldBridge;\n import org.spongepowered.common.event.tracking.PhaseContext;\n import org.spongepowered.common.event.tracking.PhaseTracker;\n import org.spongepowered.common.event.tracking.phase.entity.EntityPhase;\n+import org.spongepowered.common.mixin.core.entity.EntityMixin;\n \n @Mixin(LivingEntity.class)\n-public abstract class LivingEntityMixin_Tracker extends Entity {\n+public abstract class LivingEntityMixin_Tracker extends EntityMixin {\n     @Shadow protected abstract void shadow$onDeathUpdate();\n \n-    public LivingEntityMixin_Tracker() {\n-        super(null, null);\n-    }\n-\n     /**\n      * @author i509VCB - February 17th, 2020 - 1.14.4\n      *\n", "next_change": null}]}}, {"oid": "1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "url": "https://github.com/SpongePowered/Sponge/commit/1538ebb199ccc72b37f95778fa8e39d58f50dbc2", "message": "Make references to GameRules refer to actual RuleKey rather than string constant, clean up and make most of core entity mixins compile", "committedDate": "2020-02-22T04:46:01Z", "type": "forcePushed"}, {"oid": "70b13023b87c95bd8f6e7065655947903a035a21", "url": "https://github.com/SpongePowered/Sponge/commit/70b13023b87c95bd8f6e7065655947903a035a21", "message": "Make references to GameRules refer to actual RuleKey rather than string constant, clean up and make most of core entity mixins compile", "committedDate": "2020-02-22T16:27:12Z", "type": "forcePushed"}, {"oid": "7e5938cf08afd45082efeec2b8c29d8ea8a52125", "url": "https://github.com/SpongePowered/Sponge/commit/7e5938cf08afd45082efeec2b8c29d8ea8a52125", "message": "Make references to GameRules refer to actual RuleKey rather than string constant, clean up and make most of core entity mixins compile", "committedDate": "2020-02-22T16:30:09Z", "type": "commit"}, {"oid": "7e5938cf08afd45082efeec2b8c29d8ea8a52125", "url": "https://github.com/SpongePowered/Sponge/commit/7e5938cf08afd45082efeec2b8c29d8ea8a52125", "message": "Make references to GameRules refer to actual RuleKey rather than string constant, clean up and make most of core entity mixins compile", "committedDate": "2020-02-22T16:30:09Z", "type": "forcePushed"}]}