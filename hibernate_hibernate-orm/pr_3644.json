{"pr_number": 3644, "pr_title": "HHH-14318 Work on @JoinFormula and @JoinColumnOrFormula support", "pr_author": "beikov", "pr_createdAt": "2020-11-12T22:54:34Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3644", "timeline": [{"oid": "8649534f34d1918723cd399e0717dcf6b4530957", "url": "https://github.com/hibernate/hibernate-orm/commit/8649534f34d1918723cd399e0717dcf6b4530957", "message": "HHH-14318 Work on @JoinFormula and @JoinColumnOrFormula support", "committedDate": "2020-11-13T11:08:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0NDAzMg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r522944032", "body": "Why this change? MutableInteger was added to explicitly replace such uses of AtomicInteger", "bodyText": "Why this change? MutableInteger was added to explicitly replace such uses of AtomicInteger", "bodyHTML": "<p dir=\"auto\">Why this change? MutableInteger was added to explicitly replace such uses of AtomicInteger</p>", "author": "sebersole", "createdAt": "2020-11-13T13:18:13Z", "path": "hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java", "diffHunk": "@@ -50,7 +51,7 @@\n  */\n @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n public class TypeDefinition implements Serializable {\n-\tpublic static final MutableInteger NAME_COUNTER = new MutableInteger();\n+\tpublic static final AtomicInteger NAME_COUNTER = new AtomicInteger();", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3MjEzMw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523072133", "bodyText": "Since this is static and thus accessible by multiple threads, this must use a thread safe data structure like AtomicInteger.", "author": "beikov", "createdAt": "2020-11-13T16:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0NDAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE2MzgwMg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523163802", "bodyText": "Ah, missed the static.. carry on.", "author": "sebersole", "createdAt": "2020-11-13T19:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0NDAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java b/hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java\nindex 2b41046107..b8e7d32671 100644\n--- a/hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java\n+++ b/hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java\n", "chunk": "@@ -51,7 +50,7 @@ import org.hibernate.usertype.UserType;\n  */\n @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n public class TypeDefinition implements Serializable {\n-\tpublic static final AtomicInteger NAME_COUNTER = new AtomicInteger();\n+\tpublic static final MutableInteger NAME_COUNTER = new MutableInteger();\n \n \tprivate final String name;\n \tprivate final Class typeImplementorClass;\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java b/hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java\nindex b8e7d32671..2b41046107 100644\n--- a/hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java\n+++ b/hibernate-core/src/main/java/org/hibernate/boot/model/TypeDefinition.java\n", "chunk": "@@ -50,7 +51,7 @@ import org.hibernate.usertype.UserType;\n  */\n @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n public class TypeDefinition implements Serializable {\n-\tpublic static final MutableInteger NAME_COUNTER = new MutableInteger();\n+\tpublic static final AtomicInteger NAME_COUNTER = new AtomicInteger();\n \n \tprivate final String name;\n \tprivate final Class typeImplementorClass;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0NTM4Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r522945383", "body": "Could we stick with the standard code style for multi-line statements?  Or at least one of the 2 prevalent ones?", "bodyText": "Could we stick with the standard code style for multi-line statements?  Or at least one of the 2 prevalent ones?", "bodyHTML": "<p dir=\"auto\">Could we stick with the standard code style for multi-line statements?  Or at least one of the 2 prevalent ones?</p>", "author": "sebersole", "createdAt": "2020-11-13T13:20:47Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java", "diffHunk": "@@ -78,6 +79,21 @@ default void visitJdbcTypes(\n \t\tthrow new NotYetImplementedFor6Exception( getClass() );\n \t}\n \n+\tdefault void visitJdbcTypes(\n+\t\t\tClause clause,\n+\t\t\tTypeConfiguration typeConfiguration,\n+\t\t\tIndexedConsumer<JdbcMapping> action) {\n+\t\tvisitJdbcTypes( new Consumer<JdbcMapping>() {", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyNzY3Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523027672", "bodyText": "Also, why not just switch everything to use this method rather than the form accepting a Consumer?", "author": "sebersole", "createdAt": "2020-11-13T15:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0NTM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\nindex 35b9f8861d..afb0e3353a 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n", "chunk": "@@ -83,15 +83,19 @@ public interface Bindable {\n \t\t\tClause clause,\n \t\t\tTypeConfiguration typeConfiguration,\n \t\t\tIndexedConsumer<JdbcMapping> action) {\n-\t\tvisitJdbcTypes( new Consumer<JdbcMapping>() {\n-\t\t\tprivate int index;\n+\t\tvisitJdbcTypes(\n+\t\t\t\tnew Consumer<JdbcMapping>() {\n+\t\t\t\t\tprivate int index;\n \n-\t\t\t@Override\n-\t\t\tpublic void accept(JdbcMapping jdbcMapping) {\n-\t\t\t\taction.accept( index, jdbcMapping );\n-\t\t\t\tindex++;\n-\t\t\t}\n-\t\t}, clause, typeConfiguration );\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void accept(JdbcMapping jdbcMapping) {\n+\t\t\t\t\t\taction.accept( index, jdbcMapping );\n+\t\t\t\t\t\tindex++;\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tclause,\n+\t\t\t\ttypeConfiguration\n+\t\t);\n \t}\n \n \t/**\n", "next_change": {"commit": "a03a0d04dac8cfa2f17b851e1e4fda9e3630c814", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\nindex afb0e3353a..1cf48c0f1c 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n", "chunk": "@@ -72,30 +65,19 @@ public interface Bindable {\n \t * <p>\n \t * Used during cacheable SQL AST creation.\n \t */\n-\tdefault void visitJdbcTypes(\n-\t\t\tConsumer<JdbcMapping> action,\n+\n+\tdefault int forEachJdbcType(\n \t\t\tClause clause,\n-\t\t\tTypeConfiguration typeConfiguration) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\t\tTypeConfiguration typeConfiguration,\n+\t\t\tIndexedConsumer<JdbcMapping> action) {\n+\t\treturn forEachJdbcType( clause, typeConfiguration, 0, action );\n \t}\n-\n-\tdefault void visitJdbcTypes(\n+\tdefault int forEachJdbcType(\n \t\t\tClause clause,\n \t\t\tTypeConfiguration typeConfiguration,\n+\t\t\tint offset,\n \t\t\tIndexedConsumer<JdbcMapping> action) {\n-\t\tvisitJdbcTypes(\n-\t\t\t\tnew Consumer<JdbcMapping>() {\n-\t\t\t\t\tprivate int index;\n-\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void accept(JdbcMapping jdbcMapping) {\n-\t\t\t\t\t\taction.accept( index, jdbcMapping );\n-\t\t\t\t\t\tindex++;\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tclause,\n-\t\t\t\ttypeConfiguration\n-\t\t);\n+\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n \t}\n \n \t/**\n", "next_change": {"commit": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\nindex 1cf48c0f1c..2171c098de 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n", "chunk": "@@ -66,17 +59,11 @@ public interface Bindable {\n \t * Used during cacheable SQL AST creation.\n \t */\n \n-\tdefault int forEachJdbcType(\n-\t\t\tClause clause,\n-\t\t\tTypeConfiguration typeConfiguration,\n-\t\t\tIndexedConsumer<JdbcMapping> action) {\n-\t\treturn forEachJdbcType( clause, typeConfiguration, 0, action );\n+\tdefault int forEachJdbcType(IndexedConsumer<JdbcMapping> action) {\n+\t\treturn forEachJdbcType( 0, action );\n \t}\n-\tdefault int forEachJdbcType(\n-\t\t\tClause clause,\n-\t\t\tTypeConfiguration typeConfiguration,\n-\t\t\tint offset,\n-\t\t\tIndexedConsumer<JdbcMapping> action) {\n+\n+\tdefault int forEachJdbcType(int offset, IndexedConsumer<JdbcMapping> action) {\n \t\tthrow new NotYetImplementedFor6Exception( getClass() );\n \t}\n \n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\nindex 2171c098de..b2f8d6d539 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n", "chunk": "@@ -58,12 +71,10 @@ public interface Bindable {\n \t * <p>\n \t * Used during cacheable SQL AST creation.\n \t */\n-\n-\tdefault int forEachJdbcType(IndexedConsumer<JdbcMapping> action) {\n-\t\treturn forEachJdbcType( 0, action );\n-\t}\n-\n-\tdefault int forEachJdbcType(int offset, IndexedConsumer<JdbcMapping> action) {\n+\tdefault void visitJdbcTypes(\n+\t\t\tConsumer<JdbcMapping> action,\n+\t\t\tClause clause,\n+\t\t\tTypeConfiguration typeConfiguration) {\n \t\tthrow new NotYetImplementedFor6Exception( getClass() );\n \t}\n \n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\nindex b2f8d6d539..716ba77184 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/Bindable.java\n", "chunk": "@@ -71,10 +58,12 @@ public interface Bindable {\n \t * <p>\n \t * Used during cacheable SQL AST creation.\n \t */\n-\tdefault void visitJdbcTypes(\n-\t\t\tConsumer<JdbcMapping> action,\n-\t\t\tClause clause,\n-\t\t\tTypeConfiguration typeConfiguration) {\n+\n+\tdefault int forEachJdbcType(IndexedConsumer<JdbcMapping> action) {\n+\t\treturn forEachJdbcType( 0, action );\n+\t}\n+\n+\tdefault int forEachJdbcType(int offset, IndexedConsumer<JdbcMapping> action) {\n \t\tthrow new NotYetImplementedFor6Exception( getClass() );\n \t}\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0NjQwNQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r522946405", "body": "I think both table and JdbcMapping make sense as well.  Would also allow us to clean up some of the functional interfaces around column handling", "bodyText": "I think both table and JdbcMapping make sense as well.  Would also allow us to clean up some of the functional interfaces around column handling", "bodyHTML": "<p dir=\"auto\">I think both table and JdbcMapping make sense as well.  Would also allow us to clean up some of the functional interfaces around column handling</p>", "author": "sebersole", "createdAt": "2020-11-13T13:22:40Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html\n+ */\n+package org.hibernate.metamodel.mapping;\n+\n+/**\n+ * A column mapping.\n+ *\n+ * @author Christian Beikov\n+ */\n+public interface ColumnMapping {", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java\nindex d456c08808..e8a669f35e 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java\n", "chunk": "@@ -12,9 +12,9 @@ package org.hibernate.metamodel.mapping;\n  * @author Christian Beikov\n  */\n public interface ColumnMapping {\n-\t// todo: table expression? jdbc mapping?\n \tString getMappedColumnExpression();\n \tString getCustomReadExpression();\n \tString getCustomWriteExpression();\n \tboolean isMappedColumnExpressionFormula();\n+\tJdbcMapping getJdbcMapping();\n }\n", "next_change": {"commit": "ca5520e21e4c7547632fc505fb0a51a931bfe0fa", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java\nindex e8a669f35e..d985ec2036 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java\n", "chunk": "@@ -12,6 +12,7 @@ package org.hibernate.metamodel.mapping;\n  * @author Christian Beikov\n  */\n public interface ColumnMapping {\n+\tString getContainingTableExpression();\n \tString getMappedColumnExpression();\n \tString getCustomReadExpression();\n \tString getCustomWriteExpression();\n", "next_change": {"commit": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/SelectionMapping.java\nsimilarity index 80%\nrename from hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java\nrename to hibernate-core/src/main/java/org/hibernate/metamodel/mapping/SelectionMapping.java\nindex d985ec2036..846e052ced 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMapping.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/SelectionMapping.java\n", "chunk": "@@ -11,11 +11,11 @@ package org.hibernate.metamodel.mapping;\n  *\n  * @author Christian Beikov\n  */\n-public interface ColumnMapping {\n+public interface SelectionMapping {\n \tString getContainingTableExpression();\n-\tString getMappedColumnExpression();\n+\tString getSelectionExpression();\n \tString getCustomReadExpression();\n \tString getCustomWriteExpression();\n-\tboolean isMappedColumnExpressionFormula();\n+\tboolean isFormula();\n \tJdbcMapping getJdbcMapping();\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0ODEyOQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r522948129", "body": "I'd rather leave table expression off here...  While today embeddable values need to map to a single table, so far I have been working in 6 under the assumption that we want to start allowing compositions across tables.  We cannot fully make that transition until we can pull \"writing\" under this new mapping model, but as much as possible let's design the mapping model with this in mind.\r\n\r\nAnd of course the is no notion of a JdbcMapping for multiple columns, unless we start considering complex SQL types (arrays, etc)", "bodyText": "I'd rather leave table expression off here...  While today embeddable values need to map to a single table, so far I have been working in 6 under the assumption that we want to start allowing compositions across tables.  We cannot fully make that transition until we can pull \"writing\" under this new mapping model, but as much as possible let's design the mapping model with this in mind.\nAnd of course the is no notion of a JdbcMapping for multiple columns, unless we start considering complex SQL types (arrays, etc)", "bodyHTML": "<p dir=\"auto\">I'd rather leave table expression off here...  While today embeddable values need to map to a single table, so far I have been working in 6 under the assumption that we want to start allowing compositions across tables.  We cannot fully make that transition until we can pull \"writing\" under this new mapping model, but as much as possible let's design the mapping model with this in mind.</p>\n<p dir=\"auto\">And of course the is no notion of a JdbcMapping for multiple columns, unless we start considering complex SQL types (arrays, etc)</p>", "author": "sebersole", "createdAt": "2020-11-13T13:25:47Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html\n+ */\n+package org.hibernate.metamodel.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hibernate.mapping.IndexedConsumer;\n+\n+/**\n+ * A container for multiple column mappings.\n+ *\n+ * @author Christian Beikov\n+ */\n+public interface ColumnMappings {\n+\t// todo: table expression? jdbc mapping?", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java\nindex c83e7716db..f9b3b671eb 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java\n", "chunk": "@@ -6,34 +6,32 @@\n  */\n package org.hibernate.metamodel.mapping;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n-import org.hibernate.mapping.IndexedConsumer;\n-\n /**\n  * A container for multiple column mappings.\n  *\n  * @author Christian Beikov\n  */\n public interface ColumnMappings {\n-\t// todo: table expression? jdbc mapping?\n \tString getMappedColumnExpression(int columnIndex);\n \tString getCustomReadExpression(int columnIndex);\n \tString getCustomWriteExpression(int columnIndex);\n \tboolean isMappedColumnExpressionFormula(int columnIndex);\n+\tJdbcMapping getJdbcMapping(int columnIndex);\n \n \tint getColumnSpan();\n \n \tvoid forEachColumn(\n \t\t\tfinal String containingTableExpression,\n-\t\t\tfinal List<JdbcMapping> jdbcMappings,\n+\t\t\tfinal int columnIndexOffset,\n \t\t\tfinal ColumnConsumer consumer);\n \n-\tvoid forEachColumn(\n+\tdefault void forEachColumn(\n \t\t\tfinal String containingTableExpression,\n-\t\t\tfinal List<JdbcMapping> jdbcMappings,\n-\t\t\tfinal IndexedColumnConsumer consumer);\n+\t\t\tfinal ColumnConsumer consumer) {\n+\t\tforEachColumn( containingTableExpression, 0, consumer );\n+\t}\n \n-\tList<String> getMappedColumnExpressions();\n+\tList<JdbcMapping> getJdbcMappings();\n }\n", "next_change": {"commit": "ca5520e21e4c7547632fc505fb0a51a931bfe0fa", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java\nindex f9b3b671eb..f562c29d22 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java\n", "chunk": "@@ -22,15 +23,10 @@ public interface ColumnMappings {\n \n \tint getColumnSpan();\n \n-\tvoid forEachColumn(\n-\t\t\tfinal String containingTableExpression,\n-\t\t\tfinal int columnIndexOffset,\n-\t\t\tfinal ColumnConsumer consumer);\n+\tvoid forEachColumn(int columnIndexOffset, ColumnConsumer consumer);\n \n-\tdefault void forEachColumn(\n-\t\t\tfinal String containingTableExpression,\n-\t\t\tfinal ColumnConsumer consumer) {\n-\t\tforEachColumn( containingTableExpression, 0, consumer );\n+\tdefault void forEachColumn(ColumnConsumer consumer) {\n+\t\tforEachColumn( 0, consumer );\n \t}\n \n \tList<JdbcMapping> getJdbcMappings();\n", "next_change": {"commit": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/SelectionMappings.java\nsimilarity index 66%\nrename from hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java\nrename to hibernate-core/src/main/java/org/hibernate/metamodel/mapping/SelectionMappings.java\nindex f562c29d22..de2cab3f03 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappings.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/SelectionMappings.java\n", "chunk": "@@ -13,20 +13,20 @@ import java.util.List;\n  *\n  * @author Christian Beikov\n  */\n-public interface ColumnMappings {\n+public interface SelectionMappings {\n \tString getContainingTableExpression(int columnIndex);\n-\tString getMappedColumnExpression(int columnIndex);\n+\tString getSelectionExpression(int columnIndex);\n \tString getCustomReadExpression(int columnIndex);\n \tString getCustomWriteExpression(int columnIndex);\n-\tboolean isMappedColumnExpressionFormula(int columnIndex);\n+\tboolean isFormula(int columnIndex);\n \tJdbcMapping getJdbcMapping(int columnIndex);\n \n-\tint getColumnSpan();\n+\tint getJdbcTypeCount();\n \n-\tvoid forEachColumn(int columnIndexOffset, ColumnConsumer consumer);\n+\tint forEachSelection(int columnIndexOffset, ColumnConsumer consumer);\n \n-\tdefault void forEachColumn(ColumnConsumer consumer) {\n-\t\tforEachColumn( 0, consumer );\n+\tdefault int forEachSelection(ColumnConsumer consumer) {\n+\t\treturn forEachSelection( 0, consumer );\n \t}\n \n \tList<JdbcMapping> getJdbcMappings();\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0OTM1Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r522949353", "body": ":+1: ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "sebersole", "createdAt": "2020-11-13T13:28:09Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java", "diffHunk": "@@ -311,17 +310,13 @@ public CascadeStyle getCascadeStyle() {\n \t\t\t}\n \t\t\telse if ( subtype instanceof CompositeType ) {\n \t\t\t\tfinal CompositeType subCompositeType = (CompositeType) subtype;\n-\t\t\t\tfinal int columnSpan = subCompositeType.getColumnSpan( sessionFactory );\n-\n-\t\t\t\tfinal List<String> customReadExpressions = new ArrayList<>( columnSpan );\n-\t\t\t\tfinal List<String> customWriteExpressions = new ArrayList<>( columnSpan );\n-\n-\t\t\t\tfinal Iterator<Selectable> columnIterator = bootDescriptor.getColumnIterator();\n-\t\t\t\twhile ( columnIterator.hasNext() ) {\n-\t\t\t\t\tfinal Selectable selectable = columnIterator.next();\n-\t\t\t\t\tcustomReadExpressions.add( selectable.getCustomReadExpression() );\n-\t\t\t\t\tcustomWriteExpressions.add( selectable.getCustomWriteExpression() );\n-\t\t\t\t}\n+\t\t\t\tfinal ColumnMappings subMappings = ColumnMappingsImpl.from(", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\nindex c2bff51d1e..bc4103b2c2 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\n", "chunk": "@@ -291,71 +287,68 @@ public class EmbeddableMappingType implements ManagedMappingType {\n \t\t\t\t\t}\n \t\t\t\t};\n \n-\t\t\t\tattributeMappings.put(\n-\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\tnew DiscriminatedAssociationAttributeMapping(\n-\t\t\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n-\t\t\t\t\t\t\t\ttypeConfiguration.getJavaTypeDescriptorRegistry().getDescriptor( Object.class ),\n-\t\t\t\t\t\t\t\tthis,\n-\t\t\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\t\t\tattributeMetadataAccess,\n-\t\t\t\t\t\t\t\tbootPropertyDescriptor.isLazy() ? FetchTiming.DELAYED : FetchTiming.IMMEDIATE,\n-\t\t\t\t\t\t\t\tpropertyAccess,\n-\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\t\t\tanyType,\n-\t\t\t\t\t\t\t\tbootValueMapping,\n-\t\t\t\t\t\t\t\tcreationProcess\n-\t\t\t\t\t\t)\n+\t\t\t\tDiscriminatedAssociationAttributeMapping attributeMapping = new DiscriminatedAssociationAttributeMapping(\n+\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n+\t\t\t\t\t\ttypeConfiguration.getJavaTypeDescriptorRegistry().getDescriptor( Object.class ),\n+\t\t\t\t\t\tthis,\n+\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\tattributeMetadataAccess,\n+\t\t\t\t\t\tbootPropertyDescriptor.isLazy() ? FetchTiming.DELAYED : FetchTiming.IMMEDIATE,\n+\t\t\t\t\t\tpropertyAccess,\n+\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\tanyType,\n+\t\t\t\t\t\tbootValueMapping,\n+\t\t\t\t\t\tcreationProcess\n \t\t\t\t);\n+\t\t\t\taddAttribute( attributeMapping );\n+\t\t\t\tcolumnPosition += columnSpan;\n \t\t\t}\n \t\t\telse if ( subtype instanceof CompositeType ) {\n \t\t\t\tfinal CompositeType subCompositeType = (CompositeType) subtype;\n-\t\t\t\tfinal ColumnMappings subMappings = ColumnMappingsImpl.from(\n-\t\t\t\t\t\t(Component) bootPropertyDescriptor.getValue(),\n-\t\t\t\t\t\tcreationProcess.getCreationContext()\n-\t\t\t\t\t\t\t\t.getSessionFactory()\n-\t\t\t\t\t\t\t\t.getDialect(),\n-\t\t\t\t\t\tcreationProcess.getSqmFunctionRegistry()\n-\t\t\t\t);\n+\t\t\t\tfinal int columnSpan = subCompositeType.getColumnSpan( sessionFactory );\n+\t\t\t\tfinal String[] subRootTableKeyColumnNames;\n+\t\t\t\tif ( rootTableKeyColumnNames == null ) {\n+\t\t\t\t\tsubRootTableKeyColumnNames = null;\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tsubRootTableKeyColumnNames = new String[columnSpan];\n+\t\t\t\t\tSystem.arraycopy( rootTableKeyColumnNames, columnPosition, subRootTableKeyColumnNames, 0, columnSpan );\n+\t\t\t\t}\n \n-\t\t\t\tattributeMappings.put(\n+\t\t\t\tEmbeddedAttributeMapping attributeMapping = MappingModelCreationHelper.buildEmbeddedAttributeMapping(\n \t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\tMappingModelCreationHelper.buildEmbeddedAttributeMapping(\n-\t\t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\t\t\tthis,\n-\t\t\t\t\t\t\t\tsubCompositeType,\n-\t\t\t\t\t\t\t\tcontainingTableExpression,\n-\t\t\t\t\t\t\t\tsubMappings,\n-\t\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n-\t\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n-\t\t\t\t\t\t\t\tcreationProcess\n-\t\t\t\t\t\t)\n+\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\tthis,\n+\t\t\t\t\t\tsubCompositeType,\n+\t\t\t\t\t\tcontainingTableExpression,\n+\t\t\t\t\t\tsubRootTableKeyColumnNames,\n+\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n+\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n+\t\t\t\t\t\tcreationProcess\n \t\t\t\t);\n-\n-\t\t\t\tcolumnPosition += subMappings.getColumnSpan();\n+\t\t\t\taddAttribute( attributeMapping );\n+\t\t\t\tcolumnPosition += columnSpan;\n \t\t\t}\n \t\t\telse {\n \t\t\t\tfinal EntityPersister entityPersister = creationProcess\n \t\t\t\t\t\t.getEntityPersister( bootDescriptor.getOwner().getEntityName() );\n \t\t\t\tif ( subtype instanceof CollectionType ) {\n-\t\t\t\t\tattributeMappings.put(\n+\t\t\t\t\tPluralAttributeMapping attributeMapping = MappingModelCreationHelper.buildPluralAttributeMapping(\n \t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\t\tMappingModelCreationHelper.buildPluralAttributeMapping(\n-\t\t\t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\t\t\t\tentityPersister,\n-\t\t\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n-\t\t\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex),\n-\t\t\t\t\t\t\t\t\tcompositeType.getFetchMode( attributeIndex ),\n-\t\t\t\t\t\t\t\t\tcreationProcess\n-\t\t\t\t\t\t\t)\n+\t\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\t\tentityPersister,\n+\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n+\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n+\t\t\t\t\t\t\tcompositeType.getFetchMode( attributeIndex ),\n+\t\t\t\t\t\t\tcreationProcess\n \t\t\t\t\t);\n+\t\t\t\t\taddAttribute( attributeMapping );\n \t\t\t\t}\n \t\t\t\telse if ( subtype instanceof EntityType ) {\n-\t\t\t\t\tfinal ToOneAttributeMapping toOneAttributeMapping = MappingModelCreationHelper.buildSingularAssociationAttributeMapping(\n+\t\t\t\t\tfinal int columnSpan = subtype.getColumnSpan( sessionFactory );\n+\t\t\t\t\tfinal ToOneAttributeMapping attributeMapping = MappingModelCreationHelper.buildSingularAssociationAttributeMapping(\n \t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n \t\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n \t\t\t\t\t\t\tattributeIndex,\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\nindex bc4103b2c2..450a4cf2f4 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\n", "chunk": "@@ -287,68 +292,79 @@ public class EmbeddableMappingType implements ManagedMappingType, ColumnMappings\n \t\t\t\t\t}\n \t\t\t\t};\n \n-\t\t\t\tDiscriminatedAssociationAttributeMapping attributeMapping = new DiscriminatedAssociationAttributeMapping(\n-\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n-\t\t\t\t\t\ttypeConfiguration.getJavaTypeDescriptorRegistry().getDescriptor( Object.class ),\n-\t\t\t\t\t\tthis,\n-\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\tattributeMetadataAccess,\n-\t\t\t\t\t\tbootPropertyDescriptor.isLazy() ? FetchTiming.DELAYED : FetchTiming.IMMEDIATE,\n-\t\t\t\t\t\tpropertyAccess,\n-\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\tanyType,\n-\t\t\t\t\t\tbootValueMapping,\n-\t\t\t\t\t\tcreationProcess\n+\t\t\t\tattributeMappings.put(\n+\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n+\t\t\t\t\t\tnew DiscriminatedAssociationAttributeMapping(\n+\t\t\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n+\t\t\t\t\t\t\t\ttypeConfiguration.getJavaTypeDescriptorRegistry().getDescriptor( Object.class ),\n+\t\t\t\t\t\t\t\tthis,\n+\t\t\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\t\t\tattributeMetadataAccess,\n+\t\t\t\t\t\t\t\tbootPropertyDescriptor.isLazy() ? FetchTiming.DELAYED : FetchTiming.IMMEDIATE,\n+\t\t\t\t\t\t\t\tpropertyAccess,\n+\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\t\t\tanyType,\n+\t\t\t\t\t\t\t\tbootValueMapping,\n+\t\t\t\t\t\t\t\tcreationProcess\n+\t\t\t\t\t\t)\n \t\t\t\t);\n-\t\t\t\taddAttribute( attributeMapping );\n-\t\t\t\tcolumnPosition += columnSpan;\n \t\t\t}\n \t\t\telse if ( subtype instanceof CompositeType ) {\n \t\t\t\tfinal CompositeType subCompositeType = (CompositeType) subtype;\n \t\t\t\tfinal int columnSpan = subCompositeType.getColumnSpan( sessionFactory );\n-\t\t\t\tfinal String[] subRootTableKeyColumnNames;\n-\t\t\t\tif ( rootTableKeyColumnNames == null ) {\n-\t\t\t\t\tsubRootTableKeyColumnNames = null;\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tsubRootTableKeyColumnNames = new String[columnSpan];\n-\t\t\t\t\tSystem.arraycopy( rootTableKeyColumnNames, columnPosition, subRootTableKeyColumnNames, 0, columnSpan );\n+\n+\t\t\t\tfinal List<String> customReadExpressions = new ArrayList<>( columnSpan );\n+\t\t\t\tfinal List<String> customWriteExpressions = new ArrayList<>( columnSpan );\n+\n+\t\t\t\tfinal Iterator<Selectable> columnIterator = bootDescriptor.getColumnIterator();\n+\t\t\t\twhile ( columnIterator.hasNext() ) {\n+\t\t\t\t\tfinal Selectable selectable = columnIterator.next();\n+\t\t\t\t\tcustomReadExpressions.add( selectable.getCustomReadExpression() );\n+\t\t\t\t\tcustomWriteExpressions.add( selectable.getCustomWriteExpression() );\n \t\t\t\t}\n \n-\t\t\t\tEmbeddedAttributeMapping attributeMapping = MappingModelCreationHelper.buildEmbeddedAttributeMapping(\n+\t\t\t\tattributeMappings.put(\n \t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\tthis,\n-\t\t\t\t\t\tsubCompositeType,\n-\t\t\t\t\t\tcontainingTableExpression,\n-\t\t\t\t\t\tsubRootTableKeyColumnNames,\n-\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n-\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n-\t\t\t\t\t\tcreationProcess\n+\t\t\t\t\t\tMappingModelCreationHelper.buildEmbeddedAttributeMapping(\n+\t\t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n+\t\t\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\t\t\tthis,\n+\t\t\t\t\t\t\t\tsubCompositeType,\n+\t\t\t\t\t\t\t\tcontainingTableExpression,\n+\t\t\t\t\t\t\t\tArrayHelper.toStringArray( mappedColumnExpressions.subList( columnPosition, columnPosition + columnSpan ) ),\n+//\t\t\t\t\t\t\t\tArrayHelper.toStringArray( customReadExpressions.subList( columnPosition, columnPosition + columnSpan ) ),\n+//\t\t\t\t\t\t\t\tArrayHelper.toStringArray( customWriteExpressions.subList( columnPosition, columnPosition + columnSpan ) ),\n+\t\t\t\t\t\t\t\tArrayHelper.toStringArray( customReadExpressions ),\n+\t\t\t\t\t\t\t\tArrayHelper.toStringArray( customWriteExpressions ),\n+\t\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n+\t\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n+\t\t\t\t\t\t\t\tcreationProcess\n+\t\t\t\t\t\t)\n \t\t\t\t);\n-\t\t\t\taddAttribute( attributeMapping );\n+\n \t\t\t\tcolumnPosition += columnSpan;\n \t\t\t}\n \t\t\telse {\n \t\t\t\tfinal EntityPersister entityPersister = creationProcess\n \t\t\t\t\t\t.getEntityPersister( bootDescriptor.getOwner().getEntityName() );\n \t\t\t\tif ( subtype instanceof CollectionType ) {\n-\t\t\t\t\tPluralAttributeMapping attributeMapping = MappingModelCreationHelper.buildPluralAttributeMapping(\n+\t\t\t\t\tattributeMappings.put(\n \t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\t\tentityPersister,\n-\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n-\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n-\t\t\t\t\t\t\tcompositeType.getFetchMode( attributeIndex ),\n-\t\t\t\t\t\t\tcreationProcess\n+\t\t\t\t\t\t\tMappingModelCreationHelper.buildPluralAttributeMapping(\n+\t\t\t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n+\t\t\t\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\t\t\t\tentityPersister,\n+\t\t\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n+\t\t\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex),\n+\t\t\t\t\t\t\t\t\tcompositeType.getFetchMode( attributeIndex ),\n+\t\t\t\t\t\t\t\t\tcreationProcess\n+\t\t\t\t\t\t\t)\n \t\t\t\t\t);\n-\t\t\t\t\taddAttribute( attributeMapping );\n \t\t\t\t}\n \t\t\t\telse if ( subtype instanceof EntityType ) {\n-\t\t\t\t\tfinal int columnSpan = subtype.getColumnSpan( sessionFactory );\n-\t\t\t\t\tfinal ToOneAttributeMapping attributeMapping = MappingModelCreationHelper.buildSingularAssociationAttributeMapping(\n+\t\t\t\t\tfinal ToOneAttributeMapping toOneAttributeMapping = MappingModelCreationHelper.buildSingularAssociationAttributeMapping(\n \t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n \t\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n \t\t\t\t\t\t\tattributeIndex,\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\nindex 450a4cf2f4..77c4aadc03 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableMappingType.java\n", "chunk": "@@ -292,79 +302,70 @@ public class EmbeddableMappingType implements ManagedMappingType {\n \t\t\t\t\t}\n \t\t\t\t};\n \n-\t\t\t\tattributeMappings.put(\n-\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\tnew DiscriminatedAssociationAttributeMapping(\n-\t\t\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n-\t\t\t\t\t\t\t\ttypeConfiguration.getJavaTypeDescriptorRegistry().getDescriptor( Object.class ),\n-\t\t\t\t\t\t\t\tthis,\n-\t\t\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\t\t\tattributeMetadataAccess,\n-\t\t\t\t\t\t\t\tbootPropertyDescriptor.isLazy() ? FetchTiming.DELAYED : FetchTiming.IMMEDIATE,\n-\t\t\t\t\t\t\t\tpropertyAccess,\n-\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\t\t\tanyType,\n-\t\t\t\t\t\t\t\tbootValueMapping,\n-\t\t\t\t\t\t\t\tcreationProcess\n-\t\t\t\t\t\t)\n+\t\t\t\tDiscriminatedAssociationAttributeMapping attributeMapping = new DiscriminatedAssociationAttributeMapping(\n+\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n+\t\t\t\t\t\ttypeConfiguration.getJavaTypeDescriptorRegistry().getDescriptor( Object.class ),\n+\t\t\t\t\t\tthis,\n+\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\tattributeMetadataAccess,\n+\t\t\t\t\t\tbootPropertyDescriptor.isLazy() ? FetchTiming.DELAYED : FetchTiming.IMMEDIATE,\n+\t\t\t\t\t\tpropertyAccess,\n+\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\tanyType,\n+\t\t\t\t\t\tbootValueMapping,\n+\t\t\t\t\t\tcreationProcess\n \t\t\t\t);\n+\t\t\t\taddAttribute( attributeMapping );\n \t\t\t}\n \t\t\telse if ( subtype instanceof CompositeType ) {\n \t\t\t\tfinal CompositeType subCompositeType = (CompositeType) subtype;\n \t\t\t\tfinal int columnSpan = subCompositeType.getColumnSpan( sessionFactory );\n-\n-\t\t\t\tfinal List<String> customReadExpressions = new ArrayList<>( columnSpan );\n-\t\t\t\tfinal List<String> customWriteExpressions = new ArrayList<>( columnSpan );\n-\n-\t\t\t\tfinal Iterator<Selectable> columnIterator = bootDescriptor.getColumnIterator();\n-\t\t\t\twhile ( columnIterator.hasNext() ) {\n-\t\t\t\t\tfinal Selectable selectable = columnIterator.next();\n-\t\t\t\t\tcustomReadExpressions.add( selectable.getCustomReadExpression() );\n-\t\t\t\t\tcustomWriteExpressions.add( selectable.getCustomWriteExpression() );\n+\t\t\t\tfinal String subTableExpression;\n+\t\t\t\tfinal String[] subRootTableKeyColumnNames;\n+\t\t\t\tif ( rootTableKeyColumnNames == null ) {\n+\t\t\t\t\tsubTableExpression = baseTableExpression;\n+\t\t\t\t\tsubRootTableKeyColumnNames = null;\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tsubTableExpression = rootTableExpression;\n+\t\t\t\t\tsubRootTableKeyColumnNames = new String[columnSpan];\n+\t\t\t\t\tSystem.arraycopy( rootTableKeyColumnNames, columnPosition, subRootTableKeyColumnNames, 0, columnSpan );\n \t\t\t\t}\n \n-\t\t\t\tattributeMappings.put(\n+\t\t\t\tEmbeddedAttributeMapping attributeMapping = MappingModelCreationHelper.buildEmbeddedAttributeMapping(\n \t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\tMappingModelCreationHelper.buildEmbeddedAttributeMapping(\n-\t\t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\t\t\tthis,\n-\t\t\t\t\t\t\t\tsubCompositeType,\n-\t\t\t\t\t\t\t\tcontainingTableExpression,\n-\t\t\t\t\t\t\t\tArrayHelper.toStringArray( mappedColumnExpressions.subList( columnPosition, columnPosition + columnSpan ) ),\n-//\t\t\t\t\t\t\t\tArrayHelper.toStringArray( customReadExpressions.subList( columnPosition, columnPosition + columnSpan ) ),\n-//\t\t\t\t\t\t\t\tArrayHelper.toStringArray( customWriteExpressions.subList( columnPosition, columnPosition + columnSpan ) ),\n-\t\t\t\t\t\t\t\tArrayHelper.toStringArray( customReadExpressions ),\n-\t\t\t\t\t\t\t\tArrayHelper.toStringArray( customWriteExpressions ),\n-\t\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n-\t\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n-\t\t\t\t\t\t\t\tcreationProcess\n-\t\t\t\t\t\t)\n+\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\tthis,\n+\t\t\t\t\t\tsubCompositeType,\n+\t\t\t\t\t\tsubTableExpression,\n+\t\t\t\t\t\tsubRootTableKeyColumnNames,\n+\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n+\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n+\t\t\t\t\t\tcreationProcess\n \t\t\t\t);\n-\n+\t\t\t\taddAttribute( attributeMapping );\n \t\t\t\tcolumnPosition += columnSpan;\n \t\t\t}\n \t\t\telse {\n \t\t\t\tfinal EntityPersister entityPersister = creationProcess\n \t\t\t\t\t\t.getEntityPersister( bootDescriptor.getOwner().getEntityName() );\n \t\t\t\tif ( subtype instanceof CollectionType ) {\n-\t\t\t\t\tattributeMappings.put(\n+\t\t\t\t\tPluralAttributeMapping attributeMapping = MappingModelCreationHelper.buildPluralAttributeMapping(\n \t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\t\tMappingModelCreationHelper.buildPluralAttributeMapping(\n-\t\t\t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n-\t\t\t\t\t\t\t\t\tattributeIndex,\n-\t\t\t\t\t\t\t\t\tbootPropertyDescriptor,\n-\t\t\t\t\t\t\t\t\tentityPersister,\n-\t\t\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n-\t\t\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex),\n-\t\t\t\t\t\t\t\t\tcompositeType.getFetchMode( attributeIndex ),\n-\t\t\t\t\t\t\t\t\tcreationProcess\n-\t\t\t\t\t\t\t)\n+\t\t\t\t\t\t\tattributeIndex,\n+\t\t\t\t\t\t\tbootPropertyDescriptor,\n+\t\t\t\t\t\t\tentityPersister,\n+\t\t\t\t\t\t\trepresentationStrategy.resolvePropertyAccess( bootPropertyDescriptor ),\n+\t\t\t\t\t\t\tcompositeType.getCascadeStyle( attributeIndex ),\n+\t\t\t\t\t\t\tcompositeType.getFetchMode( attributeIndex ),\n+\t\t\t\t\t\t\tcreationProcess\n \t\t\t\t\t);\n+\t\t\t\t\taddAttribute( attributeMapping );\n \t\t\t\t}\n \t\t\t\telse if ( subtype instanceof EntityType ) {\n-\t\t\t\t\tfinal ToOneAttributeMapping toOneAttributeMapping = MappingModelCreationHelper.buildSingularAssociationAttributeMapping(\n+\t\t\t\t\tfinal int columnSpan = subtype.getColumnSpan( sessionFactory );\n+\t\t\t\t\tfinal ToOneAttributeMapping attributeMapping = MappingModelCreationHelper.buildSingularAssociationAttributeMapping(\n \t\t\t\t\t\t\tbootPropertyDescriptor.getName(),\n \t\t\t\t\t\t\tvalueMapping.getNavigableRole().append( bootPropertyDescriptor.getName() ),\n \t\t\t\t\t\t\tattributeIndex,\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0OTgxMg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r522949812", "body": "Again with the code style here and below", "bodyText": "Again with the code style here and below", "bodyHTML": "<p dir=\"auto\">Again with the code style here and below</p>", "author": "sebersole", "createdAt": "2020-11-13T13:29:06Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java", "diffHunk": "@@ -61,7 +61,59 @@ default void visitColumns(ColumnConsumer consumer) {\n \n \tvoid visitReferringColumns(ColumnConsumer consumer);\n \n+\tdefault void visitReferringColumns(IndexedColumnConsumer consumer) {\n+\t\tvisitReferringColumns( new ColumnConsumer() {", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\nindex 56702d551f..b1298504c2 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\n", "chunk": "@@ -55,64 +55,20 @@ public interface ForeignKeyDescriptor extends VirtualModelPart {\n \t * Visits the FK \"referring\" columns\n \t */\n \t@Override\n-\tdefault void visitColumns(ColumnConsumer consumer) {\n-\t\tvisitReferringColumns( consumer );\n+\tdefault void visitColumns(int columnIndexOffset, ColumnConsumer consumer) {\n+\t\tvisitReferringColumns( columnIndexOffset, consumer );\n \t}\n \n-\tvoid visitReferringColumns(ColumnConsumer consumer);\n+\tvoid visitReferringColumns(int columnIndexOffset, ColumnConsumer consumer);\n \n-\tdefault void visitReferringColumns(IndexedColumnConsumer consumer) {\n-\t\tvisitReferringColumns( new ColumnConsumer() {\n-\t\t\tprivate int index;\n+\tvoid visitTargetColumns(int columnIndexOffset, ColumnConsumer consumer);\n \n-\t\t\t@Override\n-\t\t\tpublic void accept(\n-\t\t\t\t\tString containingTableExpression,\n-\t\t\t\t\tString columnExpression,\n-\t\t\t\t\tboolean isFormula,\n-\t\t\t\t\tString customReadExpression,\n-\t\t\t\t\tString customWriteExpression,\n-\t\t\t\t\tJdbcMapping jdbcMapping) {\n-\t\t\t\tconsumer.accept(\n-\t\t\t\t\t\tindex,\n-\t\t\t\t\t\tcontainingTableExpression,\n-\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\tcustomReadExpression,\n-\t\t\t\t\t\tcustomWriteExpression,\n-\t\t\t\t\t\tjdbcMapping\n-\t\t\t\t);\n-\t\t\t\tindex++;\n-\t\t\t}\n-\t\t} );\n+\tdefault void visitReferringColumns(ColumnConsumer consumer)  {\n+\t\tvisitReferringColumns( 0, consumer );\n \t}\n \n-\tvoid visitTargetColumns(ColumnConsumer consumer);\n-\n-\tdefault void visitTargetColumns(IndexedColumnConsumer consumer) {\n-\t\tvisitTargetColumns( new ColumnConsumer() {\n-\t\t\tprivate int index;\n-\n-\t\t\t@Override\n-\t\t\tpublic void accept(\n-\t\t\t\t\tString containingTableExpression,\n-\t\t\t\t\tString columnExpression,\n-\t\t\t\t\tboolean isFormula,\n-\t\t\t\t\tString customReadExpression,\n-\t\t\t\t\tString customWriteExpression,\n-\t\t\t\t\tJdbcMapping jdbcMapping) {\n-\t\t\t\tconsumer.accept(\n-\t\t\t\t\t\tindex,\n-\t\t\t\t\t\tcontainingTableExpression,\n-\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\tcustomReadExpression,\n-\t\t\t\t\t\tcustomWriteExpression,\n-\t\t\t\t\t\tjdbcMapping\n-\t\t\t\t);\n-\t\t\t\tindex++;\n-\t\t\t}\n-\t\t} );\n+\tdefault void visitTargetColumns(ColumnConsumer consumer) {\n+\t\tvisitTargetColumns( 0, consumer );\n \t}\n \n \tAssociationKey getAssociationKey();\n", "next_change": {"commit": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\nindex b1298504c2..32a633a3d2 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\n", "chunk": "@@ -53,22 +53,23 @@ public interface ForeignKeyDescriptor extends VirtualModelPart {\n \n \t/**\n \t * Visits the FK \"referring\" columns\n+\t * @return\n \t */\n \t@Override\n-\tdefault void visitColumns(int columnIndexOffset, ColumnConsumer consumer) {\n-\t\tvisitReferringColumns( columnIndexOffset, consumer );\n+\tdefault int forEachSelection(int columnIndexOffset, ColumnConsumer consumer) {\n+\t\treturn visitReferringColumns( columnIndexOffset, consumer );\n \t}\n \n-\tvoid visitReferringColumns(int columnIndexOffset, ColumnConsumer consumer);\n+\tint visitReferringColumns(int columnIndexOffset, ColumnConsumer consumer);\n \n-\tvoid visitTargetColumns(int columnIndexOffset, ColumnConsumer consumer);\n+\tint visitTargetColumns(int columnIndexOffset, ColumnConsumer consumer);\n \n-\tdefault void visitReferringColumns(ColumnConsumer consumer)  {\n-\t\tvisitReferringColumns( 0, consumer );\n+\tdefault int visitReferringColumns(ColumnConsumer consumer)  {\n+\t\treturn visitReferringColumns( 0, consumer );\n \t}\n \n-\tdefault void visitTargetColumns(ColumnConsumer consumer) {\n-\t\tvisitTargetColumns( 0, consumer );\n+\tdefault int visitTargetColumns(ColumnConsumer consumer) {\n+\t\treturn visitTargetColumns( 0, consumer );\n \t}\n \n \tAssociationKey getAssociationKey();\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\nindex 32a633a3d2..d627d5883e 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\n", "chunk": "@@ -53,24 +53,15 @@ public interface ForeignKeyDescriptor extends VirtualModelPart {\n \n \t/**\n \t * Visits the FK \"referring\" columns\n-\t * @return\n \t */\n \t@Override\n-\tdefault int forEachSelection(int columnIndexOffset, ColumnConsumer consumer) {\n-\t\treturn visitReferringColumns( columnIndexOffset, consumer );\n+\tdefault void visitColumns(ColumnConsumer consumer) {\n+\t\tvisitReferringColumns( consumer );\n \t}\n \n-\tint visitReferringColumns(int columnIndexOffset, ColumnConsumer consumer);\n+\tvoid visitReferringColumns(ColumnConsumer consumer);\n \n-\tint visitTargetColumns(int columnIndexOffset, ColumnConsumer consumer);\n-\n-\tdefault int visitReferringColumns(ColumnConsumer consumer)  {\n-\t\treturn visitReferringColumns( 0, consumer );\n-\t}\n-\n-\tdefault int visitTargetColumns(ColumnConsumer consumer) {\n-\t\treturn visitTargetColumns( 0, consumer );\n-\t}\n+\tvoid visitTargetColumns(ColumnConsumer consumer);\n \n \tAssociationKey getAssociationKey();\n }\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\nindex d627d5883e..1d3a35bf3d 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ForeignKeyDescriptor.java\n", "chunk": "@@ -55,13 +55,21 @@ public interface ForeignKeyDescriptor extends VirtualModelPart {\n \t * Visits the FK \"referring\" columns\n \t */\n \t@Override\n-\tdefault void visitColumns(ColumnConsumer consumer) {\n-\t\tvisitReferringColumns( consumer );\n+\tdefault int forEachSelection(int offset, SelectionConsumer consumer) {\n+\t\treturn visitReferringColumns( offset, consumer );\n \t}\n \n-\tvoid visitReferringColumns(ColumnConsumer consumer);\n+\tint visitReferringColumns(int offset, SelectionConsumer consumer);\n \n-\tvoid visitTargetColumns(ColumnConsumer consumer);\n+\tint visitTargetColumns(int offset, SelectionConsumer consumer);\n+\n+\tdefault int visitReferringColumns(SelectionConsumer consumer)  {\n+\t\treturn visitReferringColumns( 0, consumer );\n+\t}\n+\n+\tdefault int visitTargetColumns(SelectionConsumer consumer) {\n+\t\treturn visitTargetColumns( 0, consumer );\n+\t}\n \n \tAssociationKey getAssociationKey();\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1MDMyMQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r522950321", "body": "Perhaps both this and a `IndexedColumnMappingConsumer` make sense?  If the target already has ColumnMappings, imo it makes sense to allow a consumer to access the aggregation.", "bodyText": "Perhaps both this and a IndexedColumnMappingConsumer make sense?  If the target already has ColumnMappings, imo it makes sense to allow a consumer to access the aggregation.", "bodyHTML": "<p dir=\"auto\">Perhaps both this and a <code>IndexedColumnMappingConsumer</code> make sense?  If the target already has ColumnMappings, imo it makes sense to allow a consumer to access the aggregation.</p>", "author": "sebersole", "createdAt": "2020-11-13T13:30:04Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/IndexedColumnConsumer.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html\n+ */\n+package org.hibernate.metamodel.mapping;\n+\n+/**\n+ * Consumer used to visit columns for a given model part\n+ *\n+ * @author Steve Ebersole\n+ */\n+@FunctionalInterface\n+public interface IndexedColumnConsumer {\n+\tvoid accept(", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/IndexedColumnConsumer.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappingConsumer.java\nsimilarity index 64%\nrename from hibernate-core/src/main/java/org/hibernate/metamodel/mapping/IndexedColumnConsumer.java\nrename to hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappingConsumer.java\nindex 952c364872..3437dd587a 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/IndexedColumnConsumer.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnMappingConsumer.java\n", "chunk": "@@ -9,16 +9,12 @@ package org.hibernate.metamodel.mapping;\n /**\n  * Consumer used to visit columns for a given model part\n  *\n- * @author Steve Ebersole\n+ * @author Christian Beikov\n  */\n @FunctionalInterface\n-public interface IndexedColumnConsumer {\n+public interface ColumnMappingConsumer {\n \tvoid accept(\n-\t\t\tint index,\n+\t\t\tint columnIndex,\n \t\t\tString containingTableExpression,\n-\t\t\tString columnExpression,\n-\t\t\tboolean isFormula,\n-\t\t\tString customReadExpression,\n-\t\t\tString customWriteExpression,\n-\t\t\tJdbcMapping jdbcMapping);\n+\t\t\tColumnMapping columnMapping);\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1MjI1Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r522952252", "body": "Similar question regarding `ColumnConsumer` and `IndexedColumnConsumer`... why not just pass the `ColumnMapping` rather than each of its aggregated values individually?", "bodyText": "Similar question regarding ColumnConsumer and IndexedColumnConsumer... why not just pass the ColumnMapping rather than each of its aggregated values individually?", "bodyHTML": "<p dir=\"auto\">Similar question regarding <code>ColumnConsumer</code> and <code>IndexedColumnConsumer</code>... why not just pass the <code>ColumnMapping</code> rather than each of its aggregated values individually?</p>", "author": "sebersole", "createdAt": "2020-11-13T13:33:48Z", "path": "hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java", "diffHunk": "@@ -917,9 +917,8 @@ private QuerySpec generateSubSelect(\n \n \t\tfinal SqlExpressionResolver sqlExpressionResolver = creationState.getSqlExpressionResolver();\n \n-\t\tfinal MutableInteger count = new MutableInteger();\n \t\tfkDescriptor.visitTargetColumns(\n-\t\t\t\t(table, column, isFormula, customReadExpr, customWriteExpr, jdbcMapping) -> {\n+\t\t\t\t(valuesPosition, table, column, isFormula, customReadExpr, customWriteExpr, jdbcMapping) -> {", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java b/hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java\nindex ad85e32bcd..751580b073 100644\n--- a/hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java\n+++ b/hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java\n", "chunk": "@@ -917,8 +918,9 @@ public class LoaderSelectBuilder {\n \n \t\tfinal SqlExpressionResolver sqlExpressionResolver = creationState.getSqlExpressionResolver();\n \n+\t\tfinal MutableInteger count = new MutableInteger();\n \t\tfkDescriptor.visitTargetColumns(\n-\t\t\t\t(valuesPosition, table, column, isFormula, customReadExpr, customWriteExpr, jdbcMapping) -> {\n+\t\t\t\t(table, column, isFormula, customReadExpr, customWriteExpr, jdbcMapping) -> {\n \t\t\t\t\t// for each column, resolve a SqlSelection and add it to the sub-query select-clause\n \t\t\t\t\tfinal TableReference tableReference = ownerTableGroup.resolveTableReference( table );\n \t\t\t\t\tfinal Expression expression = sqlExpressionResolver.resolveSqlExpression(\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java b/hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java\nindex 751580b073..3c27ec6baa 100644\n--- a/hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java\n+++ b/hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java\n", "chunk": "@@ -918,24 +903,18 @@ public class LoaderSelectBuilder {\n \n \t\tfinal SqlExpressionResolver sqlExpressionResolver = creationState.getSqlExpressionResolver();\n \n-\t\tfinal MutableInteger count = new MutableInteger();\n \t\tfkDescriptor.visitTargetColumns(\n-\t\t\t\t(table, column, isFormula, customReadExpr, customWriteExpr, jdbcMapping) -> {\n+\t\t\t\t(valuesPosition, selection) -> {\n \t\t\t\t\t// for each column, resolve a SqlSelection and add it to the sub-query select-clause\n-\t\t\t\t\tfinal TableReference tableReference = ownerTableGroup.resolveTableReference( table );\n+\t\t\t\t\tfinal TableReference tableReference = ownerTableGroup.resolveTableReference( selection.getContainingTableExpression() );\n \t\t\t\t\tfinal Expression expression = sqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\tcreateColumnReferenceKey( tableReference, column ),\n+\t\t\t\t\t\t\tcreateColumnReferenceKey( tableReference, selection.getSelectionExpression() ),\n \t\t\t\t\t\t\tsqlAstProcessingState -> new ColumnReference(\n \t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\tcolumn,\n-\t\t\t\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\t\t\t\tcustomReadExpr,\n-\t\t\t\t\t\t\t\t\tcustomWriteExpr,\n-\t\t\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\t\t\tselection,\n \t\t\t\t\t\t\t\t\tsessionFactory\n \t\t\t\t\t\t\t)\n \t\t\t\t\t);\n-\t\t\t\t\tfinal int valuesPosition = count.getAndIncrement();\n \t\t\t\t\tsubQuery.getSelectClause().addSqlSelection(\n \t\t\t\t\t\t\tnew SqlSelectionImpl(\n \t\t\t\t\t\t\t\t\tvaluesPosition + 1,\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzMTgwMw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523031803", "body": ":+1: ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "sebersole", "createdAt": "2020-11-13T15:41:22Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java", "diffHunk": "@@ -38,14 +36,7 @@\n \t */\n \tString getContainingTableExpression();\n \n-\t/**\n-\t * The column expressions (column name or formula) to which this embedded value\n-\t * is mapped\n-\t */\n-\tList<String> getMappedColumnExpressions();\n-\n-\tList<String> getCustomReadExpressions();\n-\tList<String> getCustomWriteExpressions();\n+\tColumnMappings getColumnMappings();", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\nindex e5770865ab..9471f63199 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\n", "chunk": "@@ -36,8 +37,6 @@ public interface EmbeddableValuedModelPart extends ModelPart, Fetchable, Fetchab\n \t */\n \tString getContainingTableExpression();\n \n-\tColumnMappings getColumnMappings();\n-\n \t/**\n \t * @see org.hibernate.annotations.Parent\n \t */\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\nindex 9471f63199..8081a6e07a 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\n", "chunk": "@@ -37,6 +39,15 @@ public interface EmbeddableValuedModelPart extends ModelPart, Fetchable, Fetchab\n \t */\n \tString getContainingTableExpression();\n \n+\t/**\n+\t * The column expressions (column name or formula) to which this embedded value\n+\t * is mapped\n+\t */\n+\tList<String> getMappedColumnExpressions();\n+\n+\tList<String> getCustomReadExpressions();\n+\tList<String> getCustomWriteExpressions();\n+\n \t/**\n \t * @see org.hibernate.annotations.Parent\n \t */\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\nindex 8081a6e07a..73868d90a8 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/EmbeddableValuedModelPart.java\n", "chunk": "@@ -29,25 +30,68 @@ import org.hibernate.sql.results.graph.FetchableContainer;\n  * @author Steve Ebersole\n  */\n public interface EmbeddableValuedModelPart extends ModelPart, Fetchable, FetchableContainer, TableGroupJoinProducer {\n+\n \tEmbeddableMappingType getEmbeddableTypeDescriptor();\n \n+\t@Override\n+\tdefault int getJdbcTypeCount() {\n+\t\treturn getEmbeddableTypeDescriptor().getJdbcTypeCount();\n+\t}\n+\n+\t@Override\n+\tdefault List<JdbcMapping> getJdbcMappings() {\n+\t\treturn getEmbeddableTypeDescriptor().getJdbcMappings();\n+\t}\n+\n+\t@Override\n+\tdefault int forEachJdbcType(int offset, IndexedConsumer<JdbcMapping> action) {\n+\t\treturn getEmbeddableTypeDescriptor().forEachJdbcType( offset, action );\n+\t}\n+\n+\t@Override\n+\tdefault int forEachJdbcValue(\n+\t\t\tObject value,\n+\t\t\tClause clause,\n+\t\t\tint offset,\n+\t\t\tJdbcValuesConsumer valuesConsumer,\n+\t\t\tSharedSessionContractImplementor session) {\n+\t\treturn getEmbeddableTypeDescriptor().forEachJdbcValue( value, clause, offset, valuesConsumer, session );\n+\t}\n+\n+\t@Override\n+\tdefault int forEachSelection(int offset, SelectionConsumer consumer) {\n+\t\treturn getEmbeddableTypeDescriptor().forEachSelection( offset, consumer );\n+\t}\n+\n+\t@Override\n+\tdefault int forEachDisassembledJdbcValue(\n+\t\t\tObject value,\n+\t\t\tClause clause,\n+\t\t\tint offset,\n+\t\t\tJdbcValuesConsumer valuesConsumer,\n+\t\t\tSharedSessionContractImplementor session) {\n+\t\treturn getEmbeddableTypeDescriptor().forEachDisassembledJdbcValue(\n+\t\t\t\tvalue,\n+\t\t\t\tclause,\n+\t\t\t\toffset,\n+\t\t\t\tvaluesConsumer,\n+\t\t\t\tsession\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tdefault Object disassemble(Object value, SharedSessionContractImplementor session) {\n+\t\treturn getEmbeddableTypeDescriptor().disassemble( value, session );\n+\t}\n+\n \t/**\n-\t * The table expression (table name or subselect) that contains\n-\t * the columns to which this embedded is mapped.\n+\t * The main table expression (table name or subselect) that usually contains\n+\t * most of the columns to which this embedded is mapped.\n \t *\n \t * @apiNote Hibernate has historically required a composite to be mapped to the same table.\n \t */\n \tString getContainingTableExpression();\n \n-\t/**\n-\t * The column expressions (column name or formula) to which this embedded value\n-\t * is mapped\n-\t */\n-\tList<String> getMappedColumnExpressions();\n-\n-\tList<String> getCustomReadExpressions();\n-\tList<String> getCustomWriteExpressions();\n-\n \t/**\n \t * @see org.hibernate.annotations.Parent\n \t */\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzNzI4NA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523037284", "body": ":+1: ", "bodyText": "\ud83d\udc4d", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "sebersole", "createdAt": "2020-11-13T15:49:50Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java", "diffHunk": "@@ -33,10 +33,7 @@ public static Expression buildColumnReferenceExpression(\n \t\t\tif ( sqlExpressionResolver == null ) {\n \t\t\t\treturn new ColumnReference(\n \t\t\t\t\t\tbasicPart.getContainingTableExpression(),\n-\t\t\t\t\t\tbasicPart.getMappedColumnExpression(),\n-\t\t\t\t\t\tbasicPart.isMappedColumnExpressionFormula(),\n-\t\t\t\t\t\tbasicPart.getCustomReadExpression(),\n-\t\t\t\t\t\tbasicPart.getCustomWriteExpression(),\n+\t\t\t\t\t\tbasicPart,", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\nindex 55b304bcac..8b31eda7ff 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\n", "chunk": "@@ -27,33 +27,10 @@ public class MappingModelHelper {\n \t\t\tSessionFactoryImplementor sessionFactory) {\n \t\tfinal int jdbcTypeCount = modelPart.getJdbcTypeCount( sessionFactory.getTypeConfiguration() );\n \n-\t\tif ( jdbcTypeCount == 1 ) {\n-\t\t\tassert modelPart instanceof BasicValuedModelPart;\n-\t\t\tfinal BasicValuedModelPart basicPart = (BasicValuedModelPart) modelPart;\n-\t\t\tif ( sqlExpressionResolver == null ) {\n-\t\t\t\treturn new ColumnReference(\n-\t\t\t\t\t\tbasicPart.getContainingTableExpression(),\n-\t\t\t\t\t\tbasicPart,\n-\t\t\t\t\t\tbasicPart.getJdbcMapping(),\n-\t\t\t\t\t\tsessionFactory\n-\t\t\t\t);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn sqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\tcreateColumnReferenceKey( basicPart.getContainingTableExpression(), basicPart.getMappedColumnExpression() ),\n-\t\t\t\t\t\tsqlAstProcessingState -> new ColumnReference(\n-\t\t\t\t\t\t\t\tbasicPart.getContainingTableExpression(),\n-\t\t\t\t\t\t\t\tbasicPart,\n-\t\t\t\t\t\t\t\tbasicPart.getJdbcMapping(),\n-\t\t\t\t\t\t\t\tsessionFactory\n-\t\t\t\t\t\t)\n-\t\t\t\t);\n-\t\t\t}\n-\t\t}\n-\t\telse {\n+\t\tif ( modelPart instanceof EmbeddableValuedModelPart ) {\n \t\t\tfinal List<ColumnReference> columnReferences = new ArrayList<>( jdbcTypeCount );\n \t\t\tmodelPart.visitColumns(\n-\t\t\t\t\t(table, column, isFormula, readFragment, writeFragment, jdbcMapping) -> {\n+\t\t\t\t\t(columnIndex, table, column, isFormula, readFragment, writeFragment, jdbcMapping) -> {\n \t\t\t\t\t\tfinal ColumnReference colRef;\n \t\t\t\t\t\tif ( sqlExpressionResolver == null ) {\n \t\t\t\t\t\t\tcolRef = new ColumnReference(\n", "next_change": {"commit": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\nindex 8b31eda7ff..f07eaca673 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\n", "chunk": "@@ -25,11 +25,11 @@ public class MappingModelHelper {\n \t\t\tModelPart modelPart,\n \t\t\tSqlExpressionResolver sqlExpressionResolver,\n \t\t\tSessionFactoryImplementor sessionFactory) {\n-\t\tfinal int jdbcTypeCount = modelPart.getJdbcTypeCount( sessionFactory.getTypeConfiguration() );\n+\t\tfinal int jdbcTypeCount = modelPart.getJdbcTypeCount();\n \n \t\tif ( modelPart instanceof EmbeddableValuedModelPart ) {\n \t\t\tfinal List<ColumnReference> columnReferences = new ArrayList<>( jdbcTypeCount );\n-\t\t\tmodelPart.visitColumns(\n+\t\t\tmodelPart.forEachSelection(\n \t\t\t\t\t(columnIndex, table, column, isFormula, readFragment, writeFragment, jdbcMapping) -> {\n \t\t\t\t\t\tfinal ColumnReference colRef;\n \t\t\t\t\t\tif ( sqlExpressionResolver == null ) {\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\nindex f07eaca673..bfda29445a 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\n", "chunk": "@@ -25,12 +25,12 @@ public class MappingModelHelper {\n \t\t\tModelPart modelPart,\n \t\t\tSqlExpressionResolver sqlExpressionResolver,\n \t\t\tSessionFactoryImplementor sessionFactory) {\n-\t\tfinal int jdbcTypeCount = modelPart.getJdbcTypeCount();\n+\t\tfinal int jdbcTypeCount = modelPart.getJdbcTypeCount( sessionFactory.getTypeConfiguration() );\n \n \t\tif ( modelPart instanceof EmbeddableValuedModelPart ) {\n \t\t\tfinal List<ColumnReference> columnReferences = new ArrayList<>( jdbcTypeCount );\n-\t\t\tmodelPart.forEachSelection(\n-\t\t\t\t\t(columnIndex, table, column, isFormula, readFragment, writeFragment, jdbcMapping) -> {\n+\t\t\tmodelPart.visitColumns(\n+\t\t\t\t\t(table, column, isFormula, readFragment, writeFragment, jdbcMapping) -> {\n \t\t\t\t\t\tfinal ColumnReference colRef;\n \t\t\t\t\t\tif ( sqlExpressionResolver == null ) {\n \t\t\t\t\t\t\tcolRef = new ColumnReference(\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\nindex bfda29445a..f3044daed0 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/MappingModelHelper.java\n", "chunk": "@@ -25,34 +25,26 @@ public class MappingModelHelper {\n \t\t\tModelPart modelPart,\n \t\t\tSqlExpressionResolver sqlExpressionResolver,\n \t\t\tSessionFactoryImplementor sessionFactory) {\n-\t\tfinal int jdbcTypeCount = modelPart.getJdbcTypeCount( sessionFactory.getTypeConfiguration() );\n+\t\tfinal int jdbcTypeCount = modelPart.getJdbcTypeCount();\n \n \t\tif ( modelPart instanceof EmbeddableValuedModelPart ) {\n \t\t\tfinal List<ColumnReference> columnReferences = new ArrayList<>( jdbcTypeCount );\n-\t\t\tmodelPart.visitColumns(\n-\t\t\t\t\t(table, column, isFormula, readFragment, writeFragment, jdbcMapping) -> {\n+\t\t\tmodelPart.forEachSelection(\n+\t\t\t\t\t(columnIndex, selection) -> {\n \t\t\t\t\t\tfinal ColumnReference colRef;\n \t\t\t\t\t\tif ( sqlExpressionResolver == null ) {\n \t\t\t\t\t\t\tcolRef = new ColumnReference(\n-\t\t\t\t\t\t\t\t\ttable,\n-\t\t\t\t\t\t\t\t\tcolumn,\n-\t\t\t\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\t\t\t\treadFragment,\n-\t\t\t\t\t\t\t\t\twriteFragment,\n-\t\t\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\t\t\tselection.getContainingTableExpression(),\n+\t\t\t\t\t\t\t\t\tselection,\n \t\t\t\t\t\t\t\t\tsessionFactory\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse {\n \t\t\t\t\t\t\tcolRef = (ColumnReference) sqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\t\t\tcreateColumnReferenceKey( table, column ),\n+\t\t\t\t\t\t\t\t\tcreateColumnReferenceKey( selection.getContainingTableExpression(), selection.getSelectionExpression() ),\n \t\t\t\t\t\t\t\t\tsqlAstProcessingState -> new ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\ttable,\n-\t\t\t\t\t\t\t\t\t\t\tcolumn,\n-\t\t\t\t\t\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\t\t\t\t\t\treadFragment,\n-\t\t\t\t\t\t\t\t\t\t\twriteFragment,\n-\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\t\t\t\t\tselection.getContainingTableExpression(),\n+\t\t\t\t\t\t\t\t\t\t\tselection,\n \t\t\t\t\t\t\t\t\t\t\tsessionFactory\n \t\t\t\t\t\t\t\t\t)\n \t\t\t\t\t\t\t);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzNzYxMA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523037610", "body": "Multi-line code style", "bodyText": "Multi-line code style", "bodyHTML": "<p dir=\"auto\">Multi-line code style</p>", "author": "sebersole", "createdAt": "2020-11-13T15:50:19Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java", "diffHunk": "@@ -98,5 +98,31 @@ default void visitColumns(ColumnConsumer consumer) {\n \n \t}\n \n+\tdefault void visitColumns(IndexedColumnConsumer consumer) {\n+\t\tvisitColumns( new ColumnConsumer() {", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\nindex a5873f35ea..eea83c8742 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\n", "chunk": "@@ -95,33 +95,11 @@ public interface ModelPart extends MappingModelExpressable {\n \t}\n \n \tdefault void visitColumns(ColumnConsumer consumer) {\n-\n+\t\tvisitColumns( 0, consumer );\n \t}\n \n-\tdefault void visitColumns(IndexedColumnConsumer consumer) {\n-\t\tvisitColumns( new ColumnConsumer() {\n-\t\t\tprivate int index;\n+\tdefault void visitColumns(int columnIndexOffset, ColumnConsumer consumer) {\n \n-\t\t\t@Override\n-\t\t\tpublic void accept(\n-\t\t\t\t\tString containingTableExpression,\n-\t\t\t\t\tString columnExpression,\n-\t\t\t\t\tboolean isFormula,\n-\t\t\t\t\tString customReadExpression,\n-\t\t\t\t\tString customWriteExpression,\n-\t\t\t\t\tJdbcMapping jdbcMapping) {\n-\t\t\t\tconsumer.accept(\n-\t\t\t\t\t\tindex,\n-\t\t\t\t\t\tcontainingTableExpression,\n-\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\tcustomReadExpression,\n-\t\t\t\t\t\tcustomWriteExpression,\n-\t\t\t\t\t\tjdbcMapping\n-\t\t\t\t);\n-\t\t\t\tindex++;\n-\t\t\t}\n-\t\t} );\n \t}\n \n \tEntityMappingType findContainingEntityMapping();\n", "next_change": {"commit": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\nindex eea83c8742..f14b90a4c9 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\n", "chunk": "@@ -94,12 +94,12 @@ public interface ModelPart extends MappingModelExpressable {\n \t\tthrow new NotYetImplementedFor6Exception( getClass() );\n \t}\n \n-\tdefault void visitColumns(ColumnConsumer consumer) {\n-\t\tvisitColumns( 0, consumer );\n+\tdefault int forEachSelection(ColumnConsumer consumer) {\n+\t\treturn forEachSelection( 0, consumer );\n \t}\n \n-\tdefault void visitColumns(int columnIndexOffset, ColumnConsumer consumer) {\n-\n+\tdefault int forEachSelection(int columnIndexOffset, ColumnConsumer consumer) {\n+\t\treturn 0;\n \t}\n \n \tEntityMappingType findContainingEntityMapping();\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\nindex f14b90a4c9..076eadf661 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\n", "chunk": "@@ -94,12 +94,8 @@ public interface ModelPart extends MappingModelExpressable {\n \t\tthrow new NotYetImplementedFor6Exception( getClass() );\n \t}\n \n-\tdefault int forEachSelection(ColumnConsumer consumer) {\n-\t\treturn forEachSelection( 0, consumer );\n-\t}\n+\tdefault void visitColumns(ColumnConsumer consumer) {\n \n-\tdefault int forEachSelection(int columnIndexOffset, ColumnConsumer consumer) {\n-\t\treturn 0;\n \t}\n \n \tEntityMappingType findContainingEntityMapping();\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\nindex 076eadf661..75458a495b 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ModelPart.java\n", "chunk": "@@ -94,8 +94,12 @@ public interface ModelPart extends MappingModelExpressable {\n \t\tthrow new NotYetImplementedFor6Exception( getClass() );\n \t}\n \n-\tdefault void visitColumns(ColumnConsumer consumer) {\n+\tdefault int forEachSelection(SelectionConsumer consumer) {\n+\t\treturn forEachSelection( 0, consumer );\n+\t}\n \n+\tdefault int forEachSelection(int offset, SelectionConsumer consumer) {\n+\t\treturn 0;\n \t}\n \n \tEntityMappingType findContainingEntityMapping();\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzODQ0Ng==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523038446", "body": "Multi-line code style", "bodyText": "Multi-line code style", "bodyHTML": "<p dir=\"auto\">Multi-line code style</p>", "author": "sebersole", "createdAt": "2020-11-13T15:51:40Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html\n+ */\n+package org.hibernate.metamodel.mapping.internal;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import org.hibernate.dialect.Dialect;\n+import org.hibernate.internal.util.collections.ArrayHelper;\n+import org.hibernate.internal.util.collections.CollectionHelper;\n+import org.hibernate.mapping.Component;\n+import org.hibernate.mapping.IndexedConsumer;\n+import org.hibernate.mapping.Selectable;\n+import org.hibernate.mapping.Value;\n+import org.hibernate.metamodel.mapping.ColumnConsumer;\n+import org.hibernate.metamodel.mapping.ColumnMappings;\n+import org.hibernate.metamodel.mapping.IndexedColumnConsumer;\n+import org.hibernate.metamodel.mapping.JdbcMapping;\n+import org.hibernate.query.sqm.function.SqmFunctionRegistry;\n+\n+/**\n+ * @author Christian Beikov\n+ */\n+public class ColumnMappingsImpl implements ColumnMappings {\n+\n+\tprivate final String[] columnExpressions;\n+\tprivate final String[] customReadExpressions;\n+\tprivate final String[] customWriteExpressions;\n+\tprivate final boolean[] mappedColumnExpressionFormula;\n+\n+\tpublic ColumnMappingsImpl(\n+\t\t\tString[] columnExpressions,\n+\t\t\tString[] customReadExpressions,\n+\t\t\tString[] customWriteExpressions,\n+\t\t\tboolean[] mappedColumnExpressionFormula) {\n+\t\tthis.columnExpressions = columnExpressions;\n+\t\tthis.customReadExpressions = customReadExpressions;\n+\t\tthis.customWriteExpressions = customWriteExpressions;\n+\t\tthis.mappedColumnExpressionFormula = mappedColumnExpressionFormula;\n+\t}\n+\n+\tpublic static ColumnMappings from(Component component, Dialect dialect, SqmFunctionRegistry sqmFunctionRegistry) {\n+\t\treturn from( component::forEachColumn, component.getPropertySpan(), dialect, sqmFunctionRegistry );\n+\t}\n+\n+\tpublic static ColumnMappings from(Value value, Dialect dialect, SqmFunctionRegistry sqmFunctionRegistry) {\n+\t\tif ( value instanceof Component ) {\n+\t\t\treturn from( (Component) value, dialect, sqmFunctionRegistry );\n+\t\t}\n+\t\treturn from( consumer -> {\n+\t\t\tIterator<Selectable> columnIterator = value.getColumnIterator();\n+\t\t\tint columnIndex = 0;\n+\t\t\twhile ( columnIterator.hasNext() ) {\n+\t\t\t\tconsumer.accept( columnIndex, columnIterator.next() );\n+\t\t\t\tcolumnIndex++;\n+\t\t\t}\n+\t\t}, value.getColumnSpan(), dialect, sqmFunctionRegistry );\n+\t}\n+\n+\tprivate static ColumnMappings from(\n+\t\t\tfinal Consumer<IndexedConsumer<Selectable>> consumer,\n+\t\t\tfinal int propertySpan,\n+\t\t\tfinal Dialect dialect,\n+\t\t\tfinal SqmFunctionRegistry sqmFunctionRegistry) {\n+\t\tfinal List<String> columnExpressions = CollectionHelper.arrayList( propertySpan );\n+\t\tfinal List<String> customReadExpressions = CollectionHelper.arrayList( propertySpan );\n+\t\tfinal List<String> customWriteExpressions = CollectionHelper.arrayList( propertySpan );\n+\t\tfinal List<Boolean> isFormulas = CollectionHelper.arrayList( propertySpan );\n+\n+\t\tconsumer.accept( (index, selectable) -> {", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java\nindex dd9b8671b9..772270108e 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java\n", "chunk": "@@ -33,47 +35,50 @@ public class ColumnMappingsImpl implements ColumnMappings {\n \tprivate final String[] customReadExpressions;\n \tprivate final String[] customWriteExpressions;\n \tprivate final boolean[] mappedColumnExpressionFormula;\n+\tprivate final JdbcMapping[] jdbcMappings;\n \n \tpublic ColumnMappingsImpl(\n \t\t\tString[] columnExpressions,\n \t\t\tString[] customReadExpressions,\n \t\t\tString[] customWriteExpressions,\n-\t\t\tboolean[] mappedColumnExpressionFormula) {\n+\t\t\tboolean[] mappedColumnExpressionFormula,\n+\t\t\tJdbcMapping[] jdbcMappings) {\n \t\tthis.columnExpressions = columnExpressions;\n \t\tthis.customReadExpressions = customReadExpressions;\n \t\tthis.customWriteExpressions = customWriteExpressions;\n \t\tthis.mappedColumnExpressionFormula = mappedColumnExpressionFormula;\n+\t\tthis.jdbcMappings = jdbcMappings;\n \t}\n \n-\tpublic static ColumnMappings from(Component component, Dialect dialect, SqmFunctionRegistry sqmFunctionRegistry) {\n-\t\treturn from( component::forEachColumn, component.getPropertySpan(), dialect, sqmFunctionRegistry );\n-\t}\n-\n-\tpublic static ColumnMappings from(Value value, Dialect dialect, SqmFunctionRegistry sqmFunctionRegistry) {\n-\t\tif ( value instanceof Component ) {\n-\t\t\treturn from( (Component) value, dialect, sqmFunctionRegistry );\n+\tprivate static void resolveJdbcMappings(List<JdbcMapping> jdbcMappings, Mapping mapping, Type valueType) {\n+\t\tfinal Type keyType;\n+\t\tif ( valueType instanceof EntityType ) {\n+\t\t\tkeyType = ( (EntityType) valueType ).getIdentifierOrUniqueKeyType( mapping );\n+\t\t}\n+\t\telse {\n+\t\t\tkeyType = valueType;\n \t\t}\n-\t\treturn from( consumer -> {\n-\t\t\tIterator<Selectable> columnIterator = value.getColumnIterator();\n-\t\t\tint columnIndex = 0;\n-\t\t\twhile ( columnIterator.hasNext() ) {\n-\t\t\t\tconsumer.accept( columnIndex, columnIterator.next() );\n-\t\t\t\tcolumnIndex++;\n+\t\tif ( keyType instanceof CompositeType ) {\n+\t\t\tType[] subtypes = ( (CompositeType) keyType ).getSubtypes();\n+\t\t\tfor ( Type subtype : subtypes ) {\n+\t\t\t\tresolveJdbcMappings( jdbcMappings, mapping, subtype );\n \t\t\t}\n-\t\t}, value.getColumnSpan(), dialect, sqmFunctionRegistry );\n+\t\t}\n+\t\telse {\n+\t\t\tjdbcMappings.add( (JdbcMapping) keyType );\n+\t\t}\n \t}\n \n-\tprivate static ColumnMappings from(\n-\t\t\tfinal Consumer<IndexedConsumer<Selectable>> consumer,\n-\t\t\tfinal int propertySpan,\n-\t\t\tfinal Dialect dialect,\n-\t\t\tfinal SqmFunctionRegistry sqmFunctionRegistry) {\n-\t\tfinal List<String> columnExpressions = CollectionHelper.arrayList( propertySpan );\n-\t\tfinal List<String> customReadExpressions = CollectionHelper.arrayList( propertySpan );\n-\t\tfinal List<String> customWriteExpressions = CollectionHelper.arrayList( propertySpan );\n-\t\tfinal List<Boolean> isFormulas = CollectionHelper.arrayList( propertySpan );\n-\n-\t\tconsumer.accept( (index, selectable) -> {\n+\tpublic static ColumnMappings from(Value value, Mapping mapping, Dialect dialect, SqmFunctionRegistry sqmFunctionRegistry) {\n+\t\tfinal List<String> columnExpressions = new ArrayList<>();\n+\t\tfinal List<String> customReadExpressions = new ArrayList<>();\n+\t\tfinal List<String> customWriteExpressions = new ArrayList<>();\n+\t\tfinal List<Boolean> isFormulas = new ArrayList<>();\n+\t\tfinal List<JdbcMapping> jdbcMappings = new ArrayList<>();\n+\t\tresolveJdbcMappings( jdbcMappings, mapping, value.getType() );\n+\t\tfinal Iterator<Selectable> columnIterator = value.getColumnIterator();\n+\t\twhile ( columnIterator.hasNext() ) {\n+\t\t\tfinal Selectable selectable = columnIterator.next();\n \t\t\tif ( selectable.isFormula() ) {\n \t\t\t\tisFormulas.add( true );\n \t\t\t\tcolumnExpressions.add( selectable.getTemplate( dialect, sqmFunctionRegistry ) );\n", "next_change": {"commit": "ca5520e21e4c7547632fc505fb0a51a931bfe0fa", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java\nindex 772270108e..14e72d79e6 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java\n", "chunk": "@@ -78,6 +87,7 @@ public class ColumnMappingsImpl implements ColumnMappings {\n \t\tresolveJdbcMappings( jdbcMappings, mapping, value.getType() );\n \t\tfinal Iterator<Selectable> columnIterator = value.getColumnIterator();\n \t\twhile ( columnIterator.hasNext() ) {\n+\t\t\tcontainingTableExpressions.add( containingTableExpression );\n \t\t\tfinal Selectable selectable = columnIterator.next();\n \t\t\tif ( selectable.isFormula() ) {\n \t\t\t\tisFormulas.add( true );\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java\ndeleted file mode 100644\nindex 14e72d79e6..0000000000\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/ColumnMappingsImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,203 +0,0 @@\n-/*\n- * Hibernate, Relational Persistence for Idiomatic Java\n- *\n- * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n- * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html\n- */\n-package org.hibernate.metamodel.mapping.internal;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.hibernate.dialect.Dialect;\n-import org.hibernate.engine.spi.Mapping;\n-import org.hibernate.internal.util.collections.ArrayHelper;\n-import org.hibernate.internal.util.collections.CollectionHelper;\n-import org.hibernate.mapping.Selectable;\n-import org.hibernate.mapping.Value;\n-import org.hibernate.metamodel.mapping.ColumnConsumer;\n-import org.hibernate.metamodel.mapping.ColumnMappings;\n-import org.hibernate.metamodel.mapping.EmbeddableMappingType;\n-import org.hibernate.metamodel.mapping.JdbcMapping;\n-import org.hibernate.query.sqm.function.SqmFunctionRegistry;\n-import org.hibernate.type.CompositeType;\n-import org.hibernate.type.EntityType;\n-import org.hibernate.type.Type;\n-\n-/**\n- * @author Christian Beikov\n- */\n-public class ColumnMappingsImpl implements ColumnMappings {\n-\n-\tprivate final String[] containingTableExpressions;\n-\tprivate final String[] columnExpressions;\n-\tprivate final String[] customReadExpressions;\n-\tprivate final String[] customWriteExpressions;\n-\tprivate final boolean[] mappedColumnExpressionFormula;\n-\tprivate final JdbcMapping[] jdbcMappings;\n-\n-\tprivate ColumnMappingsImpl(\n-\t\t\tString[] containingTableExpressions,\n-\t\t\tString[] columnExpressions,\n-\t\t\tString[] customReadExpressions,\n-\t\t\tString[] customWriteExpressions,\n-\t\t\tboolean[] mappedColumnExpressionFormula,\n-\t\t\tJdbcMapping[] jdbcMappings) {\n-\t\tthis.containingTableExpressions = containingTableExpressions;\n-\t\tthis.columnExpressions = columnExpressions;\n-\t\tthis.customReadExpressions = customReadExpressions;\n-\t\tthis.customWriteExpressions = customWriteExpressions;\n-\t\tthis.mappedColumnExpressionFormula = mappedColumnExpressionFormula;\n-\t\tthis.jdbcMappings = jdbcMappings;\n-\t}\n-\n-\tprivate static void resolveJdbcMappings(List<JdbcMapping> jdbcMappings, Mapping mapping, Type valueType) {\n-\t\tfinal Type keyType;\n-\t\tif ( valueType instanceof EntityType ) {\n-\t\t\tkeyType = ( (EntityType) valueType ).getIdentifierOrUniqueKeyType( mapping );\n-\t\t}\n-\t\telse {\n-\t\t\tkeyType = valueType;\n-\t\t}\n-\t\tif ( keyType instanceof CompositeType ) {\n-\t\t\tType[] subtypes = ( (CompositeType) keyType ).getSubtypes();\n-\t\t\tfor ( Type subtype : subtypes ) {\n-\t\t\t\tresolveJdbcMappings( jdbcMappings, mapping, subtype );\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tjdbcMappings.add( (JdbcMapping) keyType );\n-\t\t}\n-\t}\n-\n-\tpublic static ColumnMappings from(\n-\t\t\tString containingTableExpression,\n-\t\t\tValue value,\n-\t\t\tMapping mapping,\n-\t\t\tDialect dialect,\n-\t\t\tSqmFunctionRegistry sqmFunctionRegistry) {\n-\t\tfinal List<String> containingTableExpressions = new ArrayList<>();\n-\t\tfinal List<String> columnExpressions = new ArrayList<>();\n-\t\tfinal List<String> customReadExpressions = new ArrayList<>();\n-\t\tfinal List<String> customWriteExpressions = new ArrayList<>();\n-\t\tfinal List<Boolean> isFormulas = new ArrayList<>();\n-\t\tfinal List<JdbcMapping> jdbcMappings = new ArrayList<>();\n-\t\tresolveJdbcMappings( jdbcMappings, mapping, value.getType() );\n-\t\tfinal Iterator<Selectable> columnIterator = value.getColumnIterator();\n-\t\twhile ( columnIterator.hasNext() ) {\n-\t\t\tcontainingTableExpressions.add( containingTableExpression );\n-\t\t\tfinal Selectable selectable = columnIterator.next();\n-\t\t\tif ( selectable.isFormula() ) {\n-\t\t\t\tisFormulas.add( true );\n-\t\t\t\tcolumnExpressions.add( selectable.getTemplate( dialect, sqmFunctionRegistry ) );\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tisFormulas.add( false );\n-\t\t\t\tcolumnExpressions.add( selectable.getText( dialect ) );\n-\t\t\t}\n-\t\t\tcustomReadExpressions.add( selectable.getCustomReadExpression() );\n-\t\t\tcustomWriteExpressions.add( selectable.getCustomWriteExpression() );\n-\t\t}\n-\t\treturn new ColumnMappingsImpl(\n-\t\t\t\tArrayHelper.toStringArray( containingTableExpressions ),\n-\t\t\t\tArrayHelper.toStringArray( columnExpressions ),\n-\t\t\t\tArrayHelper.toStringArray( customReadExpressions ),\n-\t\t\t\tArrayHelper.toStringArray( customWriteExpressions ),\n-\t\t\t\tArrayHelper.toBooleanArray( isFormulas ),\n-\t\t\t\tjdbcMappings.toArray( new JdbcMapping[0] )\n-\t\t);\n-\t}\n-\n-\tpublic static ColumnMappings from(EmbeddableMappingType embeddableMappingType) {\n-\t\tfinal int propertySpan = embeddableMappingType.getNumberOfAttributeMappings();\n-\t\tfinal List<String> containingTableExpressions = CollectionHelper.arrayList( propertySpan );\n-\t\tfinal List<String> columnExpressions = CollectionHelper.arrayList( propertySpan );\n-\t\tfinal List<String> customReadExpressions = CollectionHelper.arrayList( propertySpan );\n-\t\tfinal List<String> customWriteExpressions = CollectionHelper.arrayList( propertySpan );\n-\t\tfinal List<Boolean> isFormulas = CollectionHelper.arrayList( propertySpan );\n-\t\tfinal List<JdbcMapping> jdbcMappings = CollectionHelper.arrayList( propertySpan );\n-\n-\t\tembeddableMappingType.forEachAttributeMapping(\n-\t\t\t\t(index, attributeMapping) -> {\n-\t\t\t\t\tattributeMapping.visitColumns(\n-\t\t\t\t\t\t\t(columnIndex, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n-\t\t\t\t\t\t\t\tcontainingTableExpressions.add( containingTableExpression );\n-\t\t\t\t\t\t\t\tisFormulas.add( isFormula );\n-\t\t\t\t\t\t\t\tcolumnExpressions.add( columnExpression );\n-\t\t\t\t\t\t\t\tcustomReadExpressions.add( customReadExpression );\n-\t\t\t\t\t\t\t\tcustomWriteExpressions.add( customWriteExpression );\n-\t\t\t\t\t\t\t\tjdbcMappings.add( jdbcMapping );\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t);\n-\t\t\t\t}\n-\t\t);\n-\n-\t\treturn new ColumnMappingsImpl(\n-\t\t\t\tArrayHelper.toStringArray( containingTableExpressions ),\n-\t\t\t\tArrayHelper.toStringArray( columnExpressions ),\n-\t\t\t\tArrayHelper.toStringArray( customReadExpressions ),\n-\t\t\t\tArrayHelper.toStringArray( customWriteExpressions ),\n-\t\t\t\tArrayHelper.toBooleanArray( isFormulas ),\n-\t\t\t\tjdbcMappings.toArray( new JdbcMapping[0] )\n-\t\t);\n-\t}\n-\n-\t@Override\n-\tpublic String getContainingTableExpression(int columnIndex) {\n-\t\treturn containingTableExpressions[columnIndex];\n-\t}\n-\n-\t@Override\n-\tpublic String getMappedColumnExpression(int columnIndex) {\n-\t\treturn columnExpressions[columnIndex];\n-\t}\n-\n-\t@Override\n-\tpublic String getCustomReadExpression(int columnIndex) {\n-\t\treturn customReadExpressions[columnIndex];\n-\t}\n-\n-\t@Override\n-\tpublic String getCustomWriteExpression(int columnIndex) {\n-\t\treturn customWriteExpressions[columnIndex];\n-\t}\n-\n-\t@Override\n-\tpublic boolean isMappedColumnExpressionFormula(int columnIndex) {\n-\t\treturn mappedColumnExpressionFormula[columnIndex];\n-\t}\n-\n-\t@Override\n-\tpublic JdbcMapping getJdbcMapping(int columnIndex) {\n-\t\treturn jdbcMappings[columnIndex];\n-\t}\n-\n-\t@Override\n-\tpublic int getColumnSpan() {\n-\t\treturn columnExpressions.length;\n-\t}\n-\n-\t@Override\n-\tpublic void forEachColumn(\n-\t\t\tfinal int columnIndexOffset,\n-\t\t\tfinal ColumnConsumer consumer) {\n-\t\tfor ( int i = 0; i < columnExpressions.length; i++ ) {\n-\t\t\tconsumer.accept(\n-\t\t\t\t\tcolumnIndexOffset + i,\n-\t\t\t\t\tcontainingTableExpressions[i],\n-\t\t\t\t\tcolumnExpressions[i],\n-\t\t\t\t\tmappedColumnExpressionFormula[i],\n-\t\t\t\t\tcustomReadExpressions[i],\n-\t\t\t\t\tcustomWriteExpressions[i],\n-\t\t\t\t\tjdbcMappings[i]\n-\t\t\t);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<JdbcMapping> getJdbcMappings() {\n-\t\treturn Arrays.asList( jdbcMappings );\n-\t}\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NTYyNQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523045625", "body": "I'm tempted to say that `ColumnReference` should accept the `ColumnMapping` rather than the individual pieces.  I understand you probably chose that because it matches the existing contracts.  \r\n\r\nBut this is point I brought up in regards to model parts accepting a `ColumnConsumer`, but that really a `ColumnMappingConsumer` makes sense as well.  There is never a time when a model part wont have the  `ColumnMapping` reference(s) already, so concerns about instantiations isn't really a hinderance there.\r\n\r\nI'm not sure there is ever a time when we would not want a `ColumnMapping` on the `ColumnReference` for some reason (\"PK tables\", e.g.), but if so we could e.g. add a `ModelColumnReference` also that takes the ColumnMapping.\r\n\r\nI just think we added this `ColumnMapping` contract because it cleaned up a lot of code.  It would be a shame to not use it in other places where we could be using it.", "bodyText": "I'm tempted to say that ColumnReference should accept the ColumnMapping rather than the individual pieces.  I understand you probably chose that because it matches the existing contracts.\nBut this is point I brought up in regards to model parts accepting a ColumnConsumer, but that really a ColumnMappingConsumer makes sense as well.  There is never a time when a model part wont have the  ColumnMapping reference(s) already, so concerns about instantiations isn't really a hinderance there.\nI'm not sure there is ever a time when we would not want a ColumnMapping on the ColumnReference for some reason (\"PK tables\", e.g.), but if so we could e.g. add a ModelColumnReference also that takes the ColumnMapping.\nI just think we added this ColumnMapping contract because it cleaned up a lot of code.  It would be a shame to not use it in other places where we could be using it.", "bodyHTML": "<p dir=\"auto\">I'm tempted to say that <code>ColumnReference</code> should accept the <code>ColumnMapping</code> rather than the individual pieces.  I understand you probably chose that because it matches the existing contracts.</p>\n<p dir=\"auto\">But this is point I brought up in regards to model parts accepting a <code>ColumnConsumer</code>, but that really a <code>ColumnMappingConsumer</code> makes sense as well.  There is never a time when a model part wont have the  <code>ColumnMapping</code> reference(s) already, so concerns about instantiations isn't really a hinderance there.</p>\n<p dir=\"auto\">I'm not sure there is ever a time when we would not want a <code>ColumnMapping</code> on the <code>ColumnReference</code> for some reason (\"PK tables\", e.g.), but if so we could e.g. add a <code>ModelColumnReference</code> also that takes the ColumnMapping.</p>\n<p dir=\"auto\">I just think we added this <code>ColumnMapping</code> contract because it cleaned up a lot of code.  It would be a shame to not use it in other places where we could be using it.</p>", "author": "sebersole", "createdAt": "2020-11-13T16:02:49Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java", "diffHunk": "@@ -181,11 +186,11 @@ public DomainResult createDomainResult(\n \t\t\t\t\t\t\t),\n \t\t\t\t\t\t\ts ->\n \t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 182874cf64..5ec291c567 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -176,34 +156,34 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\tList<SqlSelection> sqlSelections = new ArrayList<>( keyColumnMappings.getColumnSpan() );\n \t\tkeyColumnMappings.forEachColumn(\n \t\t\t\tidentificationVariable,\n-\t\t\t\tjdbcMappings,\n-\t\t\t\t(containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n-\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n-\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n-\t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\tcolumnExpression\n+\t\t\t\t(columnIndex, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n+\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n+\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n+\t\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n+\t\t\t\t\t\t\t\t\t\t\ttableReference,\n+\t\t\t\t\t\t\t\t\t\t\tcolumnExpression\n+\t\t\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t\t\ts ->\n+\t\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcontainingTableExpression,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tisFormula,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcustomReadExpression,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcustomWriteExpression,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n+\t\t\t\t\t\t\t\t\t\t\t)\n \t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\ts ->\n-\t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\tcontainingTableExpression,\n-\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\t\t\t\t\t\tcustomReadExpression,\n-\t\t\t\t\t\t\t\t\t\t\tcustomWriteExpression,\n-\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n-\t\t\t\t\t\t\t\t\t)\n-\t\t\t\t\t),\n-\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n-\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n-\t\t\t);\n-\t\t\tsqlSelections.add( sqlSelection );\n-\t\t} );\n+\t\t\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n+\t\t\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n+\t\t\t\t\t);\n+\t\t\t\t\tsqlSelections.add( sqlSelection );\n+\t\t\t\t}\n+\t\t);\n \n-\t\treturn new EmbeddableForeignKeyResultImpl(\n+\t\treturn new EmbeddableForeignKeyResultImpl<>(\n \t\t\t\tsqlSelections,\n \t\t\t\tcollectionPath,\n \t\t\t\tmappingType,\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 5ec291c567..9f8d508a35 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -153,37 +172,37 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\tfinal SqlExpressionResolver sqlExpressionResolver = sqlAstCreationState.getSqlExpressionResolver();\n \t\tfinal TableReference tableReference = tableGroup.resolveTableReference( keyColumnContainingTable );\n \t\tfinal String identificationVariable = tableReference.getIdentificationVariable();\n-\t\tList<SqlSelection> sqlSelections = new ArrayList<>( keyColumnMappings.getColumnSpan() );\n-\t\tkeyColumnMappings.forEachColumn(\n-\t\t\t\tidentificationVariable,\n-\t\t\t\t(columnIndex, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n-\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n-\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n-\t\t\t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\t\t\tcolumnExpression\n-\t\t\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\t\t\ts ->\n-\t\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\t\t\tcontainingTableExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\t\t\t\t\t\t\t\tcustomReadExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\tcustomWriteExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n-\t\t\t\t\t\t\t\t\t\t\t)\n+\t\tint size = keyColumnExpressions.size();\n+\t\tList<SqlSelection> sqlSelections = new ArrayList<>( size );\n+\t\tfor ( int i = 0; i < size; i++ ) {\n+\t\t\tfinal String columnExpression = keyColumnExpressions.get( i );\n+\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n+\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n+\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n+\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n+\t\t\t\t\t\t\t\t\ttableReference,\n+\t\t\t\t\t\t\t\t\tcolumnExpression\n \t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n-\t\t\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n-\t\t\t\t\t);\n-\t\t\t\t\tsqlSelections.add( sqlSelection );\n-\t\t\t\t}\n-\t\t);\n+\t\t\t\t\t\t\ts ->\n+\t\t\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n+\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n+\t\t\t\t\t\t\t\t\t\t\tfalse,\n+\t\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n+\t\t\t\t\t\t\t\t\t)\n+\t\t\t\t\t),\n+\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n+\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n+\t\t\t);\n+\t\t\tsqlSelections.add( sqlSelection );\n+\t\t}\n \n-\t\treturn new EmbeddableForeignKeyResultImpl<>(\n+\t\treturn new EmbeddableForeignKeyResultImpl(\n \t\t\t\tsqlSelections,\n \t\t\t\tcollectionPath,\n \t\t\t\tmappingType,\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 9f8d508a35..df6c5f5a9e 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -172,37 +147,32 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\tfinal SqlExpressionResolver sqlExpressionResolver = sqlAstCreationState.getSqlExpressionResolver();\n \t\tfinal TableReference tableReference = tableGroup.resolveTableReference( keyColumnContainingTable );\n \t\tfinal String identificationVariable = tableReference.getIdentificationVariable();\n-\t\tint size = keyColumnExpressions.size();\n-\t\tList<SqlSelection> sqlSelections = new ArrayList<>( size );\n-\t\tfor ( int i = 0; i < size; i++ ) {\n-\t\t\tfinal String columnExpression = keyColumnExpressions.get( i );\n-\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n-\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n-\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n-\t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\tcolumnExpression\n+\t\tList<SqlSelection> sqlSelections = new ArrayList<>( keySelectionMappings.getJdbcTypeCount() );\n+\t\tkeySelectionMappings.forEachSelection(\n+\t\t\t\t(columnIndex, selection) -> {\n+\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n+\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n+\t\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n+\t\t\t\t\t\t\t\t\t\t\ttableReference,\n+\t\t\t\t\t\t\t\t\t\t\tselection.getSelectionExpression()\n+\t\t\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t\t\ts ->\n+\t\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tselection,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n+\t\t\t\t\t\t\t\t\t\t\t)\n \t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\ts ->\n-\t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n-\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\t\t\t\t\t\tfalse,\n-\t\t\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n-\t\t\t\t\t\t\t\t\t)\n-\t\t\t\t\t),\n-\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n-\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n-\t\t\t);\n-\t\t\tsqlSelections.add( sqlSelection );\n-\t\t}\n+\t\t\t\t\t\t\tselection.getJdbcMapping().getJavaTypeDescriptor(),\n+\t\t\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n+\t\t\t\t\t);\n+\t\t\t\t\tsqlSelections.add( sqlSelection );\n+\t\t\t\t}\n+\t\t);\n \n-\t\treturn new EmbeddableForeignKeyResultImpl(\n+\t\treturn new EmbeddableForeignKeyResultImpl<>(\n \t\t\t\tsqlSelections,\n \t\t\t\tcollectionPath,\n \t\t\t\tmappingType,\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0OTI5MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523049290", "body": "The more I see it the more I really like your naming pattern here better - `#forEachColumn` as opposed to `#visitColumns`.  It better matches with the Java naming.  \r\n\r\nI'm actually thinking of a general refactoring to make that change.  What do y'all think? ", "bodyText": "The more I see it the more I really like your naming pattern here better - #forEachColumn as opposed to #visitColumns.  It better matches with the Java naming.\nI'm actually thinking of a general refactoring to make that change.  What do y'all think?", "bodyHTML": "<p dir=\"auto\">The more I see it the more I really like your naming pattern here better - <code>#forEachColumn</code> as opposed to <code>#visitColumns</code>.  It better matches with the Java naming.</p>\n<p dir=\"auto\">I'm actually thinking of a general refactoring to make that change.  What do y'all think?</p>", "author": "sebersole", "createdAt": "2020-11-13T16:08:50Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java", "diffHunk": "@@ -255,46 +260,49 @@ public Predicate generateJoinPredicate(\n \t\tfinal String lhsTableExpression = lhs.getTableExpression();\n \t\tif ( lhsTableExpression.equals( keyColumnContainingTable ) ) {\n \t\t\tassert rhsTableExpression.equals( targetColumnContainingTable );\n-\t\t\treturn getPredicate( lhs, rhs, creationContext, keyColumnExpressions, targetColumnExpressions );\n+\t\t\treturn getPredicate( lhs, rhs, creationContext, keyColumnMappings, targetColumnMappings );\n \t\t}\n \t\telse {\n \t\t\tassert rhsTableExpression.equals( keyColumnContainingTable );\n-\t\t\treturn getPredicate( lhs, rhs, creationContext, targetColumnExpressions, keyColumnExpressions );\n+\t\t\treturn getPredicate( lhs, rhs, creationContext, targetColumnMappings, keyColumnMappings );\n \t\t}\n \t}\n \n \tprivate Predicate getPredicate(\n \t\t\tTableReference lhs,\n \t\t\tTableReference rhs,\n \t\t\tSqlAstCreationContext creationContext,\n-\t\t\tList<String> lhsExpressions,\n-\t\t\tList<String> rhsColumnExpressions) {\n+\t\t\tColumnMappings lhsMappings,\n+\t\t\tColumnMappings rhsMappings) {\n \t\tfinal Junction predicate = new Junction( Junction.Nature.CONJUNCTION );\n-\t\tfor ( int i = 0; i < lhsExpressions.size(); i++ ) {\n-\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n-\t\t\tfinal ComparisonPredicate comparisonPredicate = new ComparisonPredicate(\n-\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\tlhs,\n-\t\t\t\t\t\t\tlhsExpressions.get( i ),\n-\t\t\t\t\t\t\tfalse,\n-\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n-\t\t\t\t\t),\n-\t\t\t\t\tComparisonOperator.EQUAL,\n-\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\trhs,\n-\t\t\t\t\t\t\trhsColumnExpressions.get( i ),\n-\t\t\t\t\t\t\tfalse,\n-\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n-\t\t\t\t\t)\n-\t\t\t);\n-\t\t\tpredicate.add( comparisonPredicate );\n-\t\t}\n+\t\tlhsMappings.forEachColumn(", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 182874cf64..5ec291c567 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -277,7 +257,6 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\tfinal Junction predicate = new Junction( Junction.Nature.CONJUNCTION );\n \t\tlhsMappings.forEachColumn(\n \t\t\t\tlhs.getIdentificationVariable(),\n-\t\t\t\tjdbcMappings,\n \t\t\t\t(i, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n \t\t\t\t\tfinal ComparisonPredicate comparisonPredicate = new ComparisonPredicate(\n \t\t\t\t\t\t\tnew ColumnReference(\n", "next_change": {"commit": "ca5520e21e4c7547632fc505fb0a51a931bfe0fa", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 5ec291c567..6c534636f3 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -256,11 +254,10 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tColumnMappings rhsMappings) {\n \t\tfinal Junction predicate = new Junction( Junction.Nature.CONJUNCTION );\n \t\tlhsMappings.forEachColumn(\n-\t\t\t\tlhs.getIdentificationVariable(),\n \t\t\t\t(i, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n \t\t\t\t\tfinal ComparisonPredicate comparisonPredicate = new ComparisonPredicate(\n \t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\tcontainingTableExpression,\n+\t\t\t\t\t\t\t\t\tlhs.getIdentificationVariable(),\n \t\t\t\t\t\t\t\t\tcolumnExpression,\n \t\t\t\t\t\t\t\t\tisFormula,\n \t\t\t\t\t\t\t\t\tcustomReadExpression,\n", "next_change": {"commit": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 6c534636f3..7df3ded03f 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -250,10 +249,10 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tTableReference lhs,\n \t\t\tTableReference rhs,\n \t\t\tSqlAstCreationContext creationContext,\n-\t\t\tColumnMappings lhsMappings,\n-\t\t\tColumnMappings rhsMappings) {\n+\t\t\tSelectionMappings lhsMappings,\n+\t\t\tSelectionMappings rhsMappings) {\n \t\tfinal Junction predicate = new Junction( Junction.Nature.CONJUNCTION );\n-\t\tlhsMappings.forEachColumn(\n+\t\tlhsMappings.forEachSelection(\n \t\t\t\t(i, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n \t\t\t\t\tfinal ComparisonPredicate comparisonPredicate = new ComparisonPredicate(\n \t\t\t\t\t\t\tnew ColumnReference(\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 7df3ded03f..9f8d508a35 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -249,35 +271,34 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tTableReference lhs,\n \t\t\tTableReference rhs,\n \t\t\tSqlAstCreationContext creationContext,\n-\t\t\tSelectionMappings lhsMappings,\n-\t\t\tSelectionMappings rhsMappings) {\n+\t\t\tList<String> lhsExpressions,\n+\t\t\tList<String> rhsColumnExpressions) {\n \t\tfinal Junction predicate = new Junction( Junction.Nature.CONJUNCTION );\n-\t\tlhsMappings.forEachSelection(\n-\t\t\t\t(i, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n-\t\t\t\t\tfinal ComparisonPredicate comparisonPredicate = new ComparisonPredicate(\n-\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\tlhs.getIdentificationVariable(),\n-\t\t\t\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\t\t\t\tcustomReadExpression,\n-\t\t\t\t\t\t\t\t\tcustomWriteExpression,\n-\t\t\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n-\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\tComparisonOperator.EQUAL,\n-\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\trhs,\n-\t\t\t\t\t\t\t\t\trhsMappings.getSelectionExpression( i ),\n-\t\t\t\t\t\t\t\t\trhsMappings.isFormula( i ),\n-\t\t\t\t\t\t\t\t\trhsMappings.getCustomReadExpression( i ),\n-\t\t\t\t\t\t\t\t\trhsMappings.getCustomWriteExpression( i ),\n-\t\t\t\t\t\t\t\t\trhsMappings.getJdbcMapping( i ),\n-\t\t\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n-\t\t\t\t\t\t\t)\n-\t\t\t\t\t);\n-\t\t\t\t\tpredicate.add( comparisonPredicate );\n-\t\t\t\t}\n-\t\t);\n+\t\tfor ( int i = 0; i < lhsExpressions.size(); i++ ) {\n+\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n+\t\t\tfinal ComparisonPredicate comparisonPredicate = new ComparisonPredicate(\n+\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\tlhs,\n+\t\t\t\t\t\t\tlhsExpressions.get( i ),\n+\t\t\t\t\t\t\tfalse,\n+\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n+\t\t\t\t\t),\n+\t\t\t\t\tComparisonOperator.EQUAL,\n+\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\trhs,\n+\t\t\t\t\t\t\trhsColumnExpressions.get( i ),\n+\t\t\t\t\t\t\tfalse,\n+\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n+\t\t\t\t\t)\n+\t\t\t);\n+\t\t\tpredicate.add( comparisonPredicate );\n+\t\t}\n \t\treturn predicate;\n \t}\n \n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 9f8d508a35..df6c5f5a9e 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -271,34 +241,27 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tTableReference lhs,\n \t\t\tTableReference rhs,\n \t\t\tSqlAstCreationContext creationContext,\n-\t\t\tList<String> lhsExpressions,\n-\t\t\tList<String> rhsColumnExpressions) {\n+\t\t\tSelectionMappings lhsMappings,\n+\t\t\tSelectionMappings rhsMappings) {\n \t\tfinal Junction predicate = new Junction( Junction.Nature.CONJUNCTION );\n-\t\tfor ( int i = 0; i < lhsExpressions.size(); i++ ) {\n-\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n-\t\t\tfinal ComparisonPredicate comparisonPredicate = new ComparisonPredicate(\n-\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\tlhs,\n-\t\t\t\t\t\t\tlhsExpressions.get( i ),\n-\t\t\t\t\t\t\tfalse,\n-\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n-\t\t\t\t\t),\n-\t\t\t\t\tComparisonOperator.EQUAL,\n-\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\trhs,\n-\t\t\t\t\t\t\trhsColumnExpressions.get( i ),\n-\t\t\t\t\t\t\tfalse,\n-\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n-\t\t\t\t\t)\n-\t\t\t);\n-\t\t\tpredicate.add( comparisonPredicate );\n-\t\t}\n+\t\tlhsMappings.forEachSelection(\n+\t\t\t\t(i, selection) -> {\n+\t\t\t\t\tfinal ComparisonPredicate comparisonPredicate = new ComparisonPredicate(\n+\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\tlhs,\n+\t\t\t\t\t\t\t\t\tselection,\n+\t\t\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\tComparisonOperator.EQUAL,\n+\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\trhs,\n+\t\t\t\t\t\t\t\t\trhsMappings.getSelectionMapping( i ),\n+\t\t\t\t\t\t\t\t\tcreationContext.getSessionFactory()\n+\t\t\t\t\t\t\t)\n+\t\t\t\t\t);\n+\t\t\t\t\tpredicate.add( comparisonPredicate );\n+\t\t\t\t}\n+\t\t);\n \t\treturn predicate;\n \t}\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1MTA4Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3644#discussion_r523051083", "body": "Another case where this code would be a lot cleaner passing along the `ColumnMapping`", "bodyText": "Another case where this code would be a lot cleaner passing along the ColumnMapping", "bodyHTML": "<p dir=\"auto\">Another case where this code would be a lot cleaner passing along the <code>ColumnMapping</code></p>", "author": "sebersole", "createdAt": "2020-11-13T16:11:48Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java", "diffHunk": "@@ -115,35 +116,39 @@ public DomainResult createCollectionFetchDomainResult(\n \t\t\tfinal TableReference tableReference = tableGroup.resolveTableReference( keyColumnContainingTable );\n \t\t\tfinal String identificationVariable = tableReference.getIdentificationVariable();\n \n-\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>();\n-\t\t\tfor ( int i = 0; i < keyColumnExpressions.size(); i++ ) {\n-\t\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n-\t\t\t\tfinal String columnExpression = targetColumnExpressions.get( i );\n-\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n-\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n-\t\t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\t\tcolumnExpression\n+\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetColumnMappings.getColumnSpan() );\n+\t\t\ttargetColumnMappings.forEachColumn(", "originalCommit": "8649534f34d1918723cd399e0717dcf6b4530957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c63b686e9eb49b46a39c1a08463600aad18524d4", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 182874cf64..5ec291c567 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -119,8 +100,7 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetColumnMappings.getColumnSpan() );\n \t\t\ttargetColumnMappings.forEachColumn(\n \t\t\t\t\tidentificationVariable,\n-\t\t\t\t\tjdbcMappings,\n-\t\t\t\t\t(containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n+\t\t\t\t\t(columnIndex, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n \t\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n \t\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n \t\t\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n", "next_change": {"commit": "ca5520e21e4c7547632fc505fb0a51a931bfe0fa", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 5ec291c567..6c534636f3 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -99,7 +99,6 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \n \t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetColumnMappings.getColumnSpan() );\n \t\t\ttargetColumnMappings.forEachColumn(\n-\t\t\t\t\tidentificationVariable,\n \t\t\t\t\t(columnIndex, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n \t\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n \t\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n", "next_change": {"commit": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 6c534636f3..7df3ded03f 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -97,8 +96,8 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tfinal TableReference tableReference = tableGroup.resolveTableReference( keyColumnContainingTable );\n \t\t\tfinal String identificationVariable = tableReference.getIdentificationVariable();\n \n-\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetColumnMappings.getColumnSpan() );\n-\t\t\ttargetColumnMappings.forEachColumn(\n+\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetSelectionMappings.getJdbcTypeCount() );\n+\t\t\ttargetSelectionMappings.forEachSelection(\n \t\t\t\t\t(columnIndex, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n \t\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n \t\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 7df3ded03f..9f8d508a35 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -96,39 +119,37 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tfinal TableReference tableReference = tableGroup.resolveTableReference( keyColumnContainingTable );\n \t\t\tfinal String identificationVariable = tableReference.getIdentificationVariable();\n \n-\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetSelectionMappings.getJdbcTypeCount() );\n-\t\t\ttargetSelectionMappings.forEachSelection(\n-\t\t\t\t\t(columnIndex, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n-\t\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n-\t\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n-\t\t\t\t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression\n-\t\t\t\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\t\t\t\ts ->\n-\t\t\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomReadExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomWriteExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n-\t\t\t\t\t\t\t\t\t\t\t\t)\n-\n+\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>();\n+\t\t\tfor ( int i = 0; i < keyColumnExpressions.size(); i++ ) {\n+\t\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n+\t\t\t\tfinal String columnExpression = targetColumnExpressions.get( i );\n+\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n+\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n+\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n+\t\t\t\t\t\t\t\t\t\ttableReference,\n+\t\t\t\t\t\t\t\t\t\tcolumnExpression\n \t\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n-\t\t\t\t\t\t\t\tsqlAstCreationState.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t.getDomainModel()\n-\t\t\t\t\t\t\t\t\t\t.getTypeConfiguration()\n-\t\t\t\t\t\t);\n-\t\t\t\t\t\tsqlSelections.add( sqlSelection );\n-\t\t\t\t\t}\n-\t\t\t);\n+\t\t\t\t\t\t\t\ts ->\n+\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n+\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n+\t\t\t\t\t\t\t\t\t\t\t\tfalse,\n+\t\t\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n+\t\t\t\t\t\t\t\t\t\t)\n+\n+\t\t\t\t\t\t),\n+\t\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n+\t\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n+\t\t\t\t);\n+\t\t\t\tsqlSelections.add( sqlSelection );\n+\t\t\t}\n \n-\t\t\treturn new EmbeddableForeignKeyResultImpl<>(\n+\t\t\treturn new EmbeddableForeignKeyResultImpl(\n \t\t\t\t\tsqlSelections,\n \t\t\t\t\tcollectionPath,\n \t\t\t\t\tmappingType,\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 9f8d508a35..df6c5f5a9e 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -119,37 +96,35 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tfinal TableReference tableReference = tableGroup.resolveTableReference( keyColumnContainingTable );\n \t\t\tfinal String identificationVariable = tableReference.getIdentificationVariable();\n \n-\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>();\n-\t\t\tfor ( int i = 0; i < keyColumnExpressions.size(); i++ ) {\n-\t\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n-\t\t\t\tfinal String columnExpression = targetColumnExpressions.get( i );\n-\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n-\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n-\t\t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\t\tcolumnExpression\n+\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetSelectionMappings.getJdbcTypeCount() );\n+\t\t\ttargetSelectionMappings.forEachSelection(\n+\t\t\t\t\t(columnIndex, selection) -> {\n+\t\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n+\t\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n+\t\t\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n+\t\t\t\t\t\t\t\t\t\t\t\ttableReference,\n+\t\t\t\t\t\t\t\t\t\t\t\tselection.getSelectionExpression()\n+\t\t\t\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t\t\t\ts ->\n+\t\t\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tselection,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n+\t\t\t\t\t\t\t\t\t\t\t\t)\n+\n \t\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\t\ts ->\n-\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n-\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\tfalse,\n-\t\t\t\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n-\t\t\t\t\t\t\t\t\t\t)\n-\n-\t\t\t\t\t\t),\n-\t\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n-\t\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n-\t\t\t\t);\n-\t\t\t\tsqlSelections.add( sqlSelection );\n-\t\t\t}\n+\t\t\t\t\t\t\t\tselection.getJdbcMapping().getJavaTypeDescriptor(),\n+\t\t\t\t\t\t\t\tsqlAstCreationState.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t.getDomainModel()\n+\t\t\t\t\t\t\t\t\t\t.getTypeConfiguration()\n+\t\t\t\t\t\t);\n+\t\t\t\t\t\tsqlSelections.add( sqlSelection );\n+\t\t\t\t\t}\n+\t\t\t);\n \n-\t\t\treturn new EmbeddableForeignKeyResultImpl(\n+\t\t\treturn new EmbeddableForeignKeyResultImpl<>(\n \t\t\t\t\tsqlSelections,\n \t\t\t\t\tcollectionPath,\n \t\t\t\t\tmappingType,\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 5ec291c567..6c534636f3 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -109,7 +108,7 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\t\t\t\t\t\t\t\t),\n \t\t\t\t\t\t\t\t\t\ts ->\n \t\t\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontainingTableExpression,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tisFormula,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomReadExpression,\n", "next_change": {"commit": "884e2c59d7c3ec147ea6db703d606b3016a15524", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 6c534636f3..9f8d508a35 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -97,39 +119,37 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tfinal TableReference tableReference = tableGroup.resolveTableReference( keyColumnContainingTable );\n \t\t\tfinal String identificationVariable = tableReference.getIdentificationVariable();\n \n-\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetColumnMappings.getColumnSpan() );\n-\t\t\ttargetColumnMappings.forEachColumn(\n-\t\t\t\t\t(columnIndex, containingTableExpression, columnExpression, isFormula, customReadExpression, customWriteExpression, jdbcMapping) -> {\n-\t\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n-\t\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n-\t\t\t\t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression\n-\t\t\t\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\t\t\t\ts ->\n-\t\t\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tisFormula,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomReadExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomWriteExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n-\t\t\t\t\t\t\t\t\t\t\t\t)\n-\n+\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>();\n+\t\t\tfor ( int i = 0; i < keyColumnExpressions.size(); i++ ) {\n+\t\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n+\t\t\t\tfinal String columnExpression = targetColumnExpressions.get( i );\n+\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n+\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n+\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n+\t\t\t\t\t\t\t\t\t\ttableReference,\n+\t\t\t\t\t\t\t\t\t\tcolumnExpression\n \t\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n-\t\t\t\t\t\t\t\tsqlAstCreationState.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t.getDomainModel()\n-\t\t\t\t\t\t\t\t\t\t.getTypeConfiguration()\n-\t\t\t\t\t\t);\n-\t\t\t\t\t\tsqlSelections.add( sqlSelection );\n-\t\t\t\t\t}\n-\t\t\t);\n+\t\t\t\t\t\t\t\ts ->\n+\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n+\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n+\t\t\t\t\t\t\t\t\t\t\t\tfalse,\n+\t\t\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\t\t\tnull,\n+\t\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n+\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n+\t\t\t\t\t\t\t\t\t\t)\n+\n+\t\t\t\t\t\t),\n+\t\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n+\t\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n+\t\t\t\t);\n+\t\t\t\tsqlSelections.add( sqlSelection );\n+\t\t\t}\n \n-\t\t\treturn new EmbeddableForeignKeyResultImpl<>(\n+\t\t\treturn new EmbeddableForeignKeyResultImpl(\n \t\t\t\t\tsqlSelections,\n \t\t\t\t\tcollectionPath,\n \t\t\t\t\tmappingType,\n", "next_change": {"commit": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "changed_code": [{"header": "diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\nindex 9f8d508a35..df6c5f5a9e 100644\n--- a/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/EmbeddedForeignKeyDescriptor.java\n", "chunk": "@@ -119,37 +96,35 @@ public class EmbeddedForeignKeyDescriptor implements ForeignKeyDescriptor, Model\n \t\t\tfinal TableReference tableReference = tableGroup.resolveTableReference( keyColumnContainingTable );\n \t\t\tfinal String identificationVariable = tableReference.getIdentificationVariable();\n \n-\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>();\n-\t\t\tfor ( int i = 0; i < keyColumnExpressions.size(); i++ ) {\n-\t\t\t\tfinal JdbcMapping jdbcMapping = jdbcMappings.get( i );\n-\t\t\t\tfinal String columnExpression = targetColumnExpressions.get( i );\n-\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n-\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n-\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n-\t\t\t\t\t\t\t\t\t\ttableReference,\n-\t\t\t\t\t\t\t\t\t\tcolumnExpression\n+\t\t\tList<SqlSelection> sqlSelections = new ArrayList<>( targetSelectionMappings.getJdbcTypeCount() );\n+\t\t\ttargetSelectionMappings.forEachSelection(\n+\t\t\t\t\t(columnIndex, selection) -> {\n+\t\t\t\t\t\tfinal SqlSelection sqlSelection = sqlExpressionResolver.resolveSqlSelection(\n+\t\t\t\t\t\t\t\tsqlExpressionResolver.resolveSqlExpression(\n+\t\t\t\t\t\t\t\t\t\tSqlExpressionResolver.createColumnReferenceKey(\n+\t\t\t\t\t\t\t\t\t\t\t\ttableReference,\n+\t\t\t\t\t\t\t\t\t\t\t\tselection.getSelectionExpression()\n+\t\t\t\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t\t\t\ts ->\n+\t\t\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tselection,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n+\t\t\t\t\t\t\t\t\t\t\t\t)\n+\n \t\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t\t\ts ->\n-\t\t\t\t\t\t\t\t\t\tnew ColumnReference(\n-\t\t\t\t\t\t\t\t\t\t\t\tidentificationVariable,\n-\t\t\t\t\t\t\t\t\t\t\t\tcolumnExpression,\n-\t\t\t\t\t\t\t\t\t\t\t\tfalse,\n-\t\t\t\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\t\t\t\tnull,\n-\t\t\t\t\t\t\t\t\t\t\t\tjdbcMapping,\n-\t\t\t\t\t\t\t\t\t\t\t\tcreationState.getSqlAstCreationState()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCreationContext()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getSessionFactory()\n-\t\t\t\t\t\t\t\t\t\t)\n-\n-\t\t\t\t\t\t),\n-\t\t\t\t\t\tjdbcMapping.getJavaTypeDescriptor(),\n-\t\t\t\t\t\tsqlAstCreationState.getCreationContext().getDomainModel().getTypeConfiguration()\n-\t\t\t\t);\n-\t\t\t\tsqlSelections.add( sqlSelection );\n-\t\t\t}\n+\t\t\t\t\t\t\t\tselection.getJdbcMapping().getJavaTypeDescriptor(),\n+\t\t\t\t\t\t\t\tsqlAstCreationState.getCreationContext()\n+\t\t\t\t\t\t\t\t\t\t.getDomainModel()\n+\t\t\t\t\t\t\t\t\t\t.getTypeConfiguration()\n+\t\t\t\t\t\t);\n+\t\t\t\t\t\tsqlSelections.add( sqlSelection );\n+\t\t\t\t\t}\n+\t\t\t);\n \n-\t\t\treturn new EmbeddableForeignKeyResultImpl(\n+\t\t\treturn new EmbeddableForeignKeyResultImpl<>(\n \t\t\t\t\tsqlSelections,\n \t\t\t\t\tcollectionPath,\n \t\t\t\t\tmappingType,\n", "next_change": null}]}}]}}]}}]}}, {"oid": "c63b686e9eb49b46a39c1a08463600aad18524d4", "url": "https://github.com/hibernate/hibernate-orm/commit/c63b686e9eb49b46a39c1a08463600aad18524d4", "message": "HHH-14318 Introduce column mapping abstract to support formulas easily", "committedDate": "2020-12-10T10:56:13Z", "type": "forcePushed"}, {"oid": "ca5520e21e4c7547632fc505fb0a51a931bfe0fa", "url": "https://github.com/hibernate/hibernate-orm/commit/ca5520e21e4c7547632fc505fb0a51a931bfe0fa", "message": "HHH-14318 Introduce column mapping abstract to support formulas easily", "committedDate": "2020-12-10T15:29:14Z", "type": "forcePushed"}, {"oid": "a03a0d04dac8cfa2f17b851e1e4fda9e3630c814", "url": "https://github.com/hibernate/hibernate-orm/commit/a03a0d04dac8cfa2f17b851e1e4fda9e3630c814", "message": "HHH-14318 Introduce column mapping abstract to support formulas easily", "committedDate": "2020-12-10T17:20:49Z", "type": "forcePushed"}, {"oid": "5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "url": "https://github.com/hibernate/hibernate-orm/commit/5aed3fbcac4cfee28fd3066255d420ded8fa37e5", "message": "HHH-14318 Introduce column mapping abstract to support formulas easily", "committedDate": "2020-12-10T23:23:09Z", "type": "forcePushed"}, {"oid": "884e2c59d7c3ec147ea6db703d606b3016a15524", "url": "https://github.com/hibernate/hibernate-orm/commit/884e2c59d7c3ec147ea6db703d606b3016a15524", "message": "Use new parent PostgreSQLDialect for @RequiresDialect rather than subclass", "committedDate": "2020-12-11T10:58:05Z", "type": "commit"}, {"oid": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "url": "https://github.com/hibernate/hibernate-orm/commit/1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "message": "HHH-14318 Introduce column mapping abstract to support formulas easily", "committedDate": "2020-12-14T12:52:42Z", "type": "commit"}, {"oid": "1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "url": "https://github.com/hibernate/hibernate-orm/commit/1dd656c99205d25b3f1d25ce0b7b0c231f52aaf9", "message": "HHH-14318 Introduce column mapping abstract to support formulas easily", "committedDate": "2020-12-14T12:52:42Z", "type": "forcePushed"}]}