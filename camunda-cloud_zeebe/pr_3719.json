{"pr_number": 3719, "pr_title": "fix(broker): fixing interrupting event subprocesses", "pr_author": "saig0", "pr_createdAt": "2020-01-20T14:53:11Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3719", "timeline": [{"oid": "94b8fe104eda31f6252bdc5182cbd13f1ec9aa6b", "url": "https://github.com/camunda-cloud/zeebe/commit/94b8fe104eda31f6252bdc5182cbd13f1ec9aa6b", "message": "fix(broker): consume tokens when triggering event subprocess\n\n* when an interrupting event subprocess is triggered then terminate the child instances and consume waiting token (e.g. on a joining parallel gateway)", "committedDate": "2020-01-20T14:42:32Z", "type": "commit"}, {"oid": "ee34273fa74173a5eae8cd33c325d79b451db3e1", "url": "https://github.com/camunda-cloud/zeebe/commit/ee34273fa74173a5eae8cd33c325d79b451db3e1", "message": "fix(broker): close event subscriptions\n\n* close event subscriptions when an interrupting event subprocess is triggered", "committedDate": "2020-01-20T14:42:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNTM1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3719#discussion_r370115355", "body": "Just a minor nit pick: This was a little odd to me, I guess I'm so used to seeing a `for` when iterating, that I had to read the next line again looking for the `z` variable. It also seems that we can achieve the same without it, like:\r\n\r\n```suggestion\r\n    while (zombies-- > 0) {\r\n```\r\nor\r\n```suggestion\r\nwhile (zombies > 0) {\r\nzombies--;\r\n...\r\n```\r\n", "bodyText": "Just a minor nit pick: This was a little odd to me, I guess I'm so used to seeing a for when iterating, that I had to read the next line again looking for the z variable. It also seems that we can achieve the same without it, like:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (int z = 0; z < zombies; z++) {\n          \n          \n            \n                while (zombies-- > 0) {\n          \n      \n    \n    \n  \n\nor\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (int z = 0; z < zombies; z++) {\n          \n          \n            \n            while (zombies > 0) {\n          \n          \n            \n            zombies--;\n          \n          \n            \n            ...", "bodyHTML": "<p dir=\"auto\">Just a minor nit pick: This was a little odd to me, I guess I'm so used to seeing a <code>for</code> when iterating, that I had to read the next line again looking for the <code>z</code> variable. It also seems that we can achieve the same without it, like:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first\">for</span><span class=\"x\"> (</span><span class=\"pl-k x\">int</span><span class=\"x\"> z </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">0</span><span class=\"x\">; z </span><span class=\"pl-k x\">&lt;</span><span class=\"x\"> zombies; z</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first\">while</span><span class=\"x\"> (zombies</span><span class=\"pl-k x\">--</span><span class=\"x\"> </span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">0</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">or</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">    </span><span class=\"pl-k x\">for</span><span class=\"x\"> (</span><span class=\"pl-k x\">int</span><span class=\"x\"> z </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">0</span><span class=\"x\">; z </span><span class=\"pl-k x\">&lt;</span><span class=\"x\"> zombies; z</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k x x-first\">while</span><span class=\"x\"> (zombies </span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">0</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"115\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">zombies<span class=\"pl-k\">--</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"116\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-c1\">...</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "MiguelPires", "createdAt": "2020-01-23T13:28:25Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/eventsubproc/EventSubProcessEventOccurredHandler.java", "diffHunk": "@@ -86,21 +94,28 @@ private long handleInterrupting(\n   private boolean interruptParentScope(final BpmnStepContext<T> context) {\n     final long scopeKey = context.getValue().getFlowScopeKey();\n     final List<ElementInstance> children = context.getElementInstanceState().getChildren(scopeKey);\n-    boolean waitForTermination = false;\n+\n+    int terminatedChildInstances = 0;\n \n     for (final ElementInstance child : children) {\n       if (child.canTerminate()) {\n-        waitForTermination = true;\n         context\n             .getOutput()\n             .appendFollowUpEvent(\n                 child.getKey(), WorkflowInstanceIntent.ELEMENT_TERMINATING, child.getValue());\n-      } else {\n-        context.getElementInstanceState().consumeToken(scopeKey);\n+\n+        terminatedChildInstances += 1;\n       }\n     }\n \n-    return waitForTermination;\n+    // consume all other active tokens (e.g. tokens waiting at a joining gateway)\n+    final int zombies =\n+        context.getFlowScopeInstance().getNumberOfActiveTokens() - terminatedChildInstances;\n+    for (int z = 0; z < zombies; z++) {", "originalCommit": "ee34273fa74173a5eae8cd33c325d79b451db3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3Nzk3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3719#discussion_r370477971", "bodyText": "Thanks @MiguelPires. I see your point. But as for now, I will not change it. There are 2 other places which almost the same code \ud83d\ude48 I hope to get rid of it soon.", "author": "saig0", "createdAt": "2020-01-24T05:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNTM1NQ=="}], "type": "inlineReview"}]}