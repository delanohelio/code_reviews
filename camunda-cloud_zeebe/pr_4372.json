{"pr_number": 4372, "pr_title": "fix(atomix): consume read buffer correctly", "pr_author": "Zelldon", "pr_createdAt": "2020-04-24T09:43:12Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4372", "timeline": [{"oid": "af7de134f4c84c11bd92244b149e3ef0f2ef4f38", "url": "https://github.com/camunda-cloud/zeebe/commit/af7de134f4c84c11bd92244b149e3ef0f2ef4f38", "message": "fix(atomix): consume read buffer correctly\n\n Fix issue where the read buffer was consumed only half and the rest was\n thrown away.\n\n Refactor FileChannelJournalSegmentReader#readNext to improve\n readability and hopefully maintainability.", "committedDate": "2020-04-24T09:41:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzMjM3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#discussion_r415832379", "body": "```suggestion\r\n      final var cantReadEntry = memory.remaining() < length + Integer.BYTES;\r\n```\r\nShould include the checksum.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final var cantReadEntry = memory.remaining() < length;\n          \n          \n            \n                  final var cantReadEntry = memory.remaining() < length + Integer.BYTES;\n          \n      \n    \n    \n  \n\nShould include the checksum.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">final</span> <span class=\"pl-k\">var</span> cantReadEntry <span class=\"pl-k\">=</span> memory<span class=\"pl-k\">.</span>remaining() <span class=\"pl-k\">&lt;</span> length;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">final</span> <span class=\"pl-k\">var</span> cantReadEntry <span class=\"pl-k\">=</span> memory<span class=\"pl-k\">.</span>remaining() <span class=\"pl-k\">&lt;</span> length<span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-smi x\">Integer</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x x-last\">BYTES</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Should include the checksum.</p>", "author": "deepthidevaki", "createdAt": "2020-04-27T13:53:59Z", "path": "atomix/storage/src/main/java/io/atomix/storage/journal/FileChannelJournalSegmentReader.java", "diffHunk": "@@ -172,54 +172,82 @@ private void readNext() {\n     final long index = getNextIndex();\n \n     try {\n-      // Read more bytes from the segment if necessary.\n-      if (memory.remaining() < maxEntrySize) {\n-        final long position = channel.position() + memory.position();\n-        channel.position(position);\n-        memory.clear();\n-        channel.read(memory);\n-        channel.position(position);\n-        memory.flip();\n-      }\n-\n       // Mark the buffer so it can be reset if necessary.\n       memory.mark();\n \n-      try {\n-        // Read the length of the entry.\n-        final int length = memory.getInt();\n-\n-        // If the buffer length is zero then return.\n-        if (length <= 0 || length > maxEntrySize) {\n-          memory.reset().limit(memory.position());\n-          nextEntry = null;\n-          return;\n-        }\n-\n-        // Read the checksum of the entry.\n-        final long checksum = memory.getInt() & 0xFFFFFFFFL;\n-\n-        // Compute the checksum for the entry bytes.\n-        final Checksum crc32 = new CRC32();\n-        crc32.update(memory.array(), memory.position(), length);\n-\n-        // If the stored checksum equals the computed checksum, return the entry.\n-        if (checksum == crc32.getValue()) {\n-          final int limit = memory.limit();\n-          memory.limit(memory.position() + length);\n-          final E entry = namespace.deserialize(memory);\n-          memory.limit(limit);\n-          nextEntry = new Indexed<>(index, entry, length);\n-        } else {\n-          memory.reset().limit(memory.position());\n-          nextEntry = null;\n-        }\n-      } catch (final BufferUnderflowException e) {\n-        memory.reset().limit(memory.position());\n-        nextEntry = null;\n+      final var cantReadLength = memory.remaining() < Integer.BYTES;\n+      if (cantReadLength) {\n+        readBytesIntoBuffer();\n+        memory.mark();\n+      }\n+\n+      final int length = memory.getInt();\n+      if (isLengthInvalid(length)) {\n+        return;\n+      }\n+\n+      final var cantReadEntry = memory.remaining() < length;", "originalCommit": "af7de134f4c84c11bd92244b149e3ef0f2ef4f38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b111a977c289674007760213533d0396fccda9b0", "url": "https://github.com/camunda-cloud/zeebe/commit/b111a977c289674007760213533d0396fccda9b0", "message": "chore(atomix): take checksum length into account\n\n Adjust check such that it takes also checksum into account. Adjust tests such that they fail if this change is missing", "committedDate": "2020-04-28T10:11:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2OTI5NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#discussion_r417069294", "body": "I'm thinking if it would be good to test with multiple max entry sizes to find other potential bugs in future.", "bodyText": "I'm thinking if it would be good to test with multiple max entry sizes to find other potential bugs in future.", "bodyHTML": "<p dir=\"auto\">I'm thinking if it would be good to test with multiple max entry sizes to find other potential bugs in future.</p>", "author": "deepthidevaki", "createdAt": "2020-04-29T05:07:43Z", "path": "atomix/storage/src/test/java/io/atomix/storage/journal/AbstractJournalTest.java", "diffHunk": "@@ -91,7 +91,7 @@ public static Collection primeNumbers() {\n         .withNamespace(NAMESPACE)\n         .withStorageLevel(storageLevel())\n         .withMaxSegmentSize(maxSegmentSize)\n-        .withMaxEntrySize(64)\n+        .withMaxEntrySize(48)", "originalCommit": "b111a977c289674007760213533d0396fccda9b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MTE4Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#discussion_r417071183", "bodyText": "Are you fine in doing this in a separate issue? Then I would create an issue to improve in the journal tests.", "author": "Zelldon", "createdAt": "2020-04-29T05:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2OTI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3MjUxMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#discussion_r417072513", "bodyText": "Yes \ud83d\udc4d", "author": "deepthidevaki", "createdAt": "2020-04-29T05:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2OTI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NDkxMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#discussion_r417074912", "bodyText": "#4407", "author": "Zelldon", "createdAt": "2020-04-29T05:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2OTI5NA=="}], "type": "inlineReview"}]}