{"pr_number": 5809, "pr_title": "chore(broker): persists streamprocessor pause state", "pr_author": "deepthidevaki", "pr_createdAt": "2020-11-11T09:34:37Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5809", "timeline": [{"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "url": "https://github.com/camunda-cloud/zeebe/commit/3d1dac93fc379b37d9415fa9247689c43b352c3f", "message": "chore(broker): persists streamprocessor pause state", "committedDate": "2020-11-12T08:21:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDEwNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522864104", "body": "ioe?", "bodyText": "ioe?", "bodyHTML": "<p dir=\"auto\">ioe?</p>", "author": "Zelldon", "createdAt": "2020-11-13T10:33:01Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -332,11 +332,17 @@ public void onDiskSpaceAvailable() {\n     final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n     actor.call(\n         () -> {\n-          context.setProcessingPaused(true);\n-          if (context.getStreamProcessor() != null) {\n-            context.getStreamProcessor().pauseProcessing().onComplete(completed);\n-          } else {\n-            completed.complete(null);\n+          try {\n+            context.setProcessingPaused(true);\n+\n+            if (context.getStreamProcessor() != null && !context.shouldProcess()) {\n+              context.getStreamProcessor().pauseProcessing().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3Mjc2OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522872768", "bodyText": "What happens then ? Do we return an error?", "author": "Zelldon", "createdAt": "2020-11-13T10:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3Nzk2Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r523977962", "bodyText": "The returned future is completed exceptionally. But the api to pause processing is async, so it is not returned to the client.", "author": "deepthidevaki", "createdAt": "2020-11-16T08:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0NzA0MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r524947040", "bodyText": "async means you could complete it right with the error right? But might make it to complex idk", "author": "Zelldon", "createdAt": "2020-11-17T07:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2ODkxNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r524968916", "bodyText": "Yes. It is completed with error. But the actuators that call this method does not wait for the future. It is just trigger and go.", "author": "deepthidevaki", "createdAt": "2020-11-17T08:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDIzNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522864237", "body": "ioe?", "bodyText": "ioe?", "bodyHTML": "<p dir=\"auto\">ioe?</p>", "author": "Zelldon", "createdAt": "2020-11-13T10:33:18Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -345,9 +351,13 @@ public void onDiskSpaceAvailable() {\n   public void resumeProcessing() {\n     actor.call(\n         () -> {\n-          context.setProcessingPaused(false);\n-          if (context.getStreamProcessor() != null && context.shouldProcess()) {\n-            context.getStreamProcessor().resumeProcessing();\n+          try {\n+            context.setProcessingPaused(false);\n+            if (context.getStreamProcessor() != null && context.shouldProcess()) {\n+              context.getStreamProcessor().resumeProcessing();\n+            }\n+          } catch (final IOException e) {", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3MjgyMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522872820", "bodyText": "What happens then ? Do we return an error?", "author": "Zelldon", "createdAt": "2020-11-13T10:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3ODI3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r523978278", "bodyText": "Same as above. The api to resume processing is async, so the error is not returned to the client.", "author": "deepthidevaki", "createdAt": "2020-11-16T08:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjY4Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522866687", "body": "what is this :eyes: ", "bodyText": "what is this \ud83d\udc40", "bodyHTML": "<p dir=\"auto\">what is this <g-emoji class=\"g-emoji\" alias=\"eyes\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f440.png\">\ud83d\udc40</g-emoji></p>", "author": "Zelldon", "createdAt": "2020-11-13T10:38:03Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";\n+  private boolean isProcessingPaused;\n+  private final RaftPartition raftPartition;\n+  private boolean diskSpaceAvailable;\n+\n+  public PartitionProcessingState(final RaftPartition raftPartition) {\n+    this.raftPartition = raftPartition;\n+    initProcessingStatus();\n+  }\n+\n+  public boolean isDiskSpaceAvailable() {\n+    return diskSpaceAvailable;\n+  }\n+\n+  public void setDiskSpaceAvailable(final boolean diskSpaceAvailable) {\n+    this.diskSpaceAvailable = diskSpaceAvailable;\n+  }\n+\n+  public boolean isProcessingPaused() {\n+    return isProcessingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4MDcwOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r523980709", "bodyText": "Sonar complains that the returned value of createNewFile is not used. We are checking if the file exists in the next line.", "author": "deepthidevaki", "createdAt": "2020-11-16T08:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjgyMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522866823", "body": "why we have this twice?", "bodyText": "why we have this twice?", "bodyHTML": "<p dir=\"auto\">why we have this twice?</p>", "author": "Zelldon", "createdAt": "2020-11-13T10:38:18Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzI5Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522867293", "body": "Would like to have two methods here. One is pause processing which does the first branch and another for resume processing which does the second.", "bodyText": "Would like to have two methods here. One is pause processing which does the first branch and another for resume processing which does the second.", "bodyHTML": "<p dir=\"auto\">Would like to have two methods here. One is pause processing which does the first branch and another for resume processing which does the second.</p>", "author": "Zelldon", "createdAt": "2020-11-13T10:39:20Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";\n+  private boolean isProcessingPaused;\n+  private final RaftPartition raftPartition;\n+  private boolean diskSpaceAvailable;\n+\n+  public PartitionProcessingState(final RaftPartition raftPartition) {\n+    this.raftPartition = raftPartition;\n+    initProcessingStatus();\n+  }\n+\n+  public boolean isDiskSpaceAvailable() {\n+    return diskSpaceAvailable;\n+  }\n+\n+  public void setDiskSpaceAvailable(final boolean diskSpaceAvailable) {\n+    this.diskSpaceAvailable = diskSpaceAvailable;\n+  }\n+\n+  public boolean isProcessingPaused() {\n+    return isProcessingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})\n+  public void setProcessingPaused(final boolean processingPaused) throws IOException {\n+    final File persistedPauseState = getPersistedPauseState();\n+    if (processingPaused) {\n+      persistedPauseState.createNewFile();\n+      if (persistedPauseState.exists()) {\n+        isProcessingPaused = processingPaused;\n+      }\n+    } else {\n+      Files.deleteIfExists(persistedPauseState.toPath());\n+      if (!persistedPauseState.exists()) {\n+        isProcessingPaused = processingPaused;\n+      }\n+    }\n+  }", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3MDU2MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522870561", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final Logger LOG = Loggers.SYSTEM_LOGGER;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">  </span><span class=\"pl-k x\">public</span><span class=\"x\"> </span><span class=\"pl-k x\">static</span><span class=\"x\"> </span><span class=\"pl-k x\">final</span><span class=\"x\"> </span><span class=\"pl-smi x\">Logger</span><span class=\"x\"> </span><span class=\"pl-c1 x\">LOG</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-smi x\">Loggers</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">SYSTEM_LOGGER</span></span><span class=\"x x-last\">;</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Zelldon", "createdAt": "2020-11-13T10:45:25Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3MTY2NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522871665", "body": "```suggestion\r\n    isProcessingPaused = getPersistedPauseState().exists();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final boolean pauseProcessing = getPersistedPauseState().exists();\n          \n          \n            \n                isProcessingPaused = pauseProcessing;\n          \n          \n            \n                isProcessingPaused = getPersistedPauseState().exists();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">final</span> <span class=\"pl-k\">boolean</span> pauseProcessing <span class=\"pl-k\">=</span> getPersistedPauseState()<span class=\"pl-k\">.</span>exists();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    isProcessingPaused <span class=\"pl-k\">=</span> pauseProcessing;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    isProcessingPaused <span class=\"pl-k\">=</span> getPersistedPauseState()<span class=\"pl-k\">.</span>exists();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Zelldon", "createdAt": "2020-11-13T10:47:36Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";\n+  private boolean isProcessingPaused;\n+  private final RaftPartition raftPartition;\n+  private boolean diskSpaceAvailable;\n+\n+  public PartitionProcessingState(final RaftPartition raftPartition) {\n+    this.raftPartition = raftPartition;\n+    initProcessingStatus();\n+  }\n+\n+  public boolean isDiskSpaceAvailable() {\n+    return diskSpaceAvailable;\n+  }\n+\n+  public void setDiskSpaceAvailable(final boolean diskSpaceAvailable) {\n+    this.diskSpaceAvailable = diskSpaceAvailable;\n+  }\n+\n+  public boolean isProcessingPaused() {\n+    return isProcessingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})\n+  public void setProcessingPaused(final boolean processingPaused) throws IOException {\n+    final File persistedPauseState = getPersistedPauseState();\n+    if (processingPaused) {\n+      persistedPauseState.createNewFile();\n+      if (persistedPauseState.exists()) {\n+        isProcessingPaused = processingPaused;\n+      }\n+    } else {\n+      Files.deleteIfExists(persistedPauseState.toPath());\n+      if (!persistedPauseState.exists()) {\n+        isProcessingPaused = processingPaused;\n+      }\n+    }\n+  }\n+\n+  private File getPersistedPauseState() {\n+    return raftPartition.dataDirectory().toPath().resolve(PERSISTED_PAUSE_STATE_FILENAME).toFile();\n+  }\n+\n+  private void initProcessingStatus() {\n+    final boolean pauseProcessing = getPersistedPauseState().exists();\n+    isProcessingPaused = pauseProcessing;", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3MjAwNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522872006", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">  </span><span class=\"pl-k x\">private</span><span class=\"x\"> </span><span class=\"pl-k x\">static</span><span class=\"x\"> </span><span class=\"pl-k x\">final</span><span class=\"x\"> </span><span class=\"pl-smi x\">String</span><span class=\"x\"> </span><span class=\"pl-c1 x\">PERSISTED_PAUSE_STATE_FILENAME</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">.paused</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">;</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Zelldon", "createdAt": "2020-11-13T10:48:16Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/PartitionContext.java", "diffHunk": "@@ -27,11 +28,13 @@\n import io.zeebe.util.sched.ActorControl;\n import io.zeebe.util.sched.ActorScheduler;\n import io.zeebe.util.sched.ScheduledTimer;\n+import java.io.IOException;\n import java.util.Collections;\n import java.util.List;\n \n public class PartitionContext {\n \n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3Mzc1Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522873752", "body": "How do we know that 1 is the leader?", "bodyText": "How do we know that 1 is the leader?", "bodyHTML": "<p dir=\"auto\">How do we know that 1 is the leader?</p>", "author": "Zelldon", "createdAt": "2020-11-13T10:51:12Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceClusterTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.system;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.atomix.raft.RaftServer.Role;\n+import io.zeebe.broker.Broker;\n+import io.zeebe.broker.it.clustering.ClusteringRule;\n+import io.zeebe.broker.it.util.GrpcClientRule;\n+import io.zeebe.broker.system.management.BrokerAdminService;\n+import io.zeebe.broker.system.management.PartitionStatus;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor.Phase;\n+import java.time.Duration;\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.Timeout;\n+\n+public class BrokerAdminServiceClusterTest {\n+\n+  private final Timeout testTimeout = Timeout.seconds(60);\n+  private final ClusteringRule clusteringRule =\n+      new ClusteringRule(\n+          1,\n+          3,\n+          3,\n+          cfg -> {\n+            cfg.getData().setLogIndexDensity(1);\n+            cfg.getData().setSnapshotPeriod(Duration.ofMinutes(15));\n+          });\n+  private final GrpcClientRule clientRule = new GrpcClientRule(clusteringRule);\n+\n+  @Rule\n+  public RuleChain ruleChain =\n+      RuleChain.outerRule(testTimeout).around(clusteringRule).around(clientRule);\n+\n+  private BrokerAdminService leaderAdminService;\n+  private Broker leader;\n+\n+  @Before\n+  public void before() {\n+    leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());\n+    leaderAdminService = leader.getBrokerAdminService();\n+  }\n+\n+  @Test\n+  public void shouldReportPartitionStatusOnFollowersAndLeader() {\n+    // given\n+    final var followers =\n+        clusteringRule.getOtherBrokerObjects(clusteringRule.getLeaderForPartition(1).getNodeId());\n+\n+    // when\n+    final var followerStatus =\n+        followers.stream()\n+            .map(Broker::getBrokerAdminService)\n+            .map(BrokerAdminService::getPartitionStatus)\n+            .map(status -> status.get(1));\n+\n+    final var leaderStatus = leaderAdminService.getPartitionStatus().get(1);\n+\n+    // then\n+    followerStatus.forEach(\n+        partitionStatus -> {\n+          assertThat(partitionStatus.getRole()).isEqualTo(Role.FOLLOWER);\n+          assertThat(partitionStatus.getProcessedPosition()).isNull();\n+          assertThat(partitionStatus.getSnapshotId()).isNull();\n+          assertThat(partitionStatus.getProcessedPositionInSnapshot()).isNull();\n+          assertThat(partitionStatus.getStreamProcessorPhase()).isNull();\n+        });\n+\n+    assertThat(leaderStatus.getRole()).isEqualTo(Role.LEADER);\n+    assertThat(leaderStatus.getProcessedPosition()).isEqualTo(-1);\n+    assertThat(leaderStatus.getSnapshotId()).isNull();\n+    assertThat(leaderStatus.getProcessedPositionInSnapshot()).isNull();\n+    assertThat(leaderStatus.getStreamProcessorPhase()).isEqualTo(Phase.PROCESSING);\n+  }\n+\n+  @Test\n+  public void shouldReportPartitionStatusWithSnapshotOnFollowers() {\n+    // given\n+    clientRule.createSingleJob(\"test\");\n+    leaderAdminService.takeSnapshot();\n+\n+    // when\n+    waitForSnapshotAtBroker(leaderAdminService);\n+\n+    // then\n+    final var leaderStatus = leaderAdminService.getPartitionStatus().get(1);", "originalCommit": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk4MjU2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r523982560", "bodyText": "1 is the partitionId. It is getting the status of partition 1.", "author": "deepthidevaki", "createdAt": "2020-11-16T08:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3Mzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NTg5Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r524965892", "bodyText": "but it says leaderStatus", "author": "Zelldon", "createdAt": "2020-11-17T08:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3Mzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTgzMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r524969832", "bodyText": "Ya. Status of the leader for partition 1.", "author": "deepthidevaki", "createdAt": "2020-11-17T08:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3Mzc1Mg=="}], "type": "inlineReview"}, {"oid": "c98a5619deaf8326a735fd39ded9842b4db31c05", "url": "https://github.com/camunda-cloud/zeebe/commit/c98a5619deaf8326a735fd39ded9842b4db31c05", "message": "chore(broker): apply review comments", "committedDate": "2020-11-16T08:58:27Z", "type": "forcePushed"}, {"oid": "0e54283d6b1eb2955b21d5191db9f0d9d8fd5d2e", "url": "https://github.com/camunda-cloud/zeebe/commit/0e54283d6b1eb2955b21d5191db9f0d9d8fd5d2e", "message": "chore(broker): apply review comments", "committedDate": "2020-11-16T10:18:06Z", "type": "forcePushed"}, {"oid": "308b0ea461f7a955ef0a53a0d716e314a0f8ec4b", "url": "https://github.com/camunda-cloud/zeebe/commit/308b0ea461f7a955ef0a53a0d716e314a0f8ec4b", "message": "chore(broker): persists streamprocessor pause state", "committedDate": "2020-11-18T07:04:00Z", "type": "commit"}, {"oid": "308b0ea461f7a955ef0a53a0d716e314a0f8ec4b", "url": "https://github.com/camunda-cloud/zeebe/commit/308b0ea461f7a955ef0a53a0d716e314a0f8ec4b", "message": "chore(broker): persists streamprocessor pause state", "committedDate": "2020-11-18T07:04:00Z", "type": "forcePushed"}]}