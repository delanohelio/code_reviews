{"pr_number": 4268, "pr_title": "Only init variable names to nil for output element variable", "pr_author": "korthout", "pr_createdAt": "2020-04-07T13:45:26Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4268", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMjg2MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407912861", "body": "Please add some unit tests for the different implementations.", "bodyText": "Please add some unit tests for the different implementations.", "bodyHTML": "<p dir=\"auto\">Please add some unit tests for the different implementations.</p>", "author": "saig0", "createdAt": "2020-04-14T07:10:37Z", "path": "expression-language/src/main/java/io/zeebe/el/Expression.java", "diffHunk": "@@ -7,12 +7,20 @@\n  */\n package io.zeebe.el;\n \n+import java.util.Optional;\n+\n /** A parsed expression. */\n public interface Expression {\n \n   /** @return the (raw) expression as string */\n   String getExpression();\n \n+  /**\n+   * @return optional of the name of the variable if expression is a single variable or a property\n+   *     of a single variable, otherwise empty\n+   */\n+  Optional<String> getVariableName();", "originalCommit": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNzUyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407917521", "body": "This check is done in `completeJobs()`", "bodyText": "This check is done in completeJobs()", "bodyHTML": "<p dir=\"auto\">This check is done in <code>completeJobs()</code></p>", "author": "saig0", "createdAt": "2020-04-14T07:19:42Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -518,6 +521,48 @@ public void shouldIterateOverNestedInputCollection() {\n         .containsExactlyElementsOf(INPUT_COLLECTION);\n   }\n \n+  @Test\n+  public void shouldCollectNestedOutputElements() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m -> m.zeebeOutputElementExpression(OUTPUT_ELEMENT_EXPRESSION + \".nested\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    RecordingExporter.jobRecords(JobIntent.CREATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .limit(INPUT_COLLECTION.size())\n+        .exists();", "originalCommit": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxOTEzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407919131", "body": "What do you want to check here?\r\n\r\nI think that we should verify that \r\n* the variable is created without `.nested` in its name (which is the issue that was fixed)\r\n* the variable is initialized with `null`\r\n* the values are collected in the output collection ", "bodyText": "What do you want to check here?\nI think that we should verify that\n\nthe variable is created without .nested in its name (which is the issue that was fixed)\nthe variable is initialized with null\nthe values are collected in the output collection", "bodyHTML": "<p dir=\"auto\">What do you want to check here?</p>\n<p dir=\"auto\">I think that we should verify that</p>\n<ul dir=\"auto\">\n<li>the variable is created without <code>.nested</code> in its name (which is the issue that was fixed)</li>\n<li>the variable is initialized with <code>null</code></li>\n<li>the values are collected in the output collection</li>\n</ul>", "author": "saig0", "createdAt": "2020-04-14T07:22:54Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -518,6 +521,48 @@ public void shouldIterateOverNestedInputCollection() {\n         .containsExactlyElementsOf(INPUT_COLLECTION);\n   }\n \n+  @Test\n+  public void shouldCollectNestedOutputElements() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m -> m.zeebeOutputElementExpression(OUTPUT_ELEMENT_EXPRESSION + \".nested\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    RecordingExporter.jobRecords(JobIntent.CREATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .limit(INPUT_COLLECTION.size())\n+        .exists();\n+\n+    // complete job\n+    completeJobs(\n+        workflowInstanceKey,\n+        INPUT_COLLECTION.size(),\n+        i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n+\n+    // then\n+    final List<Long> scopeKeys =\n+        RecordingExporter.variableRecords(VariableIntent.CREATED)\n+            .withName(OUTPUT_ELEMENT_EXPRESSION)\n+            .map(Record::getValue)\n+            .map(VariableRecordValue::getScopeKey)\n+            .limit(3)\n+            .collect(Collectors.toList());\n+    assertThat(scopeKeys)\n+        .hasSize(3)\n+        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));", "originalCommit": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "509f41cabfab36f2e1a33a905375b027e2f4035f", "url": "https://github.com/camunda-cloud/zeebe/commit/509f41cabfab36f2e1a33a905375b027e2f4035f", "message": "chore(engine): resolve review commments\n\n- remove unnecessary wait for jobs created\n- alter test to check for null and output collection result\n- add test to check no variables created for more complex expressions\n- add tests for Expression.getVariableName", "committedDate": "2020-04-14T11:35:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Mzg5NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408083895", "body": "That looks tricky :joy: ", "bodyText": "That looks tricky \ud83d\ude02", "bodyHTML": "<p dir=\"auto\">That looks tricky <g-emoji class=\"g-emoji\" alias=\"joy\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png\">\ud83d\ude02</g-emoji></p>", "author": "saig0", "createdAt": "2020-04-14T12:06:52Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -539,28 +539,67 @@ public void shouldCollectNestedOutputElements() {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))", "originalCommit": "509f41cabfab36f2e1a33a905375b027e2f4035f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Njg4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408086880", "body": "Limiting the records to a specific number is a bit unsteady. Instead, we can limit the records from creating a workflow instance to its completion/termination.\r\n\r\n```suggestion\r\n             RecordingExporter.records()\r\n                .limitToWorkflowInstance(workflowInstanceKey)\r\n                .variableRecords()\r\n                .map(Record::getValue)\r\n                .map(VariableRecordValue::getName))\r\n```", "bodyText": "Limiting the records to a specific number is a bit unsteady. Instead, we can limit the records from creating a workflow instance to its completion/termination.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        RecordingExporter.variableRecords(VariableIntent.CREATED)\n          \n          \n            \n                            .map(Record::getValue)\n          \n          \n            \n                            .map(VariableRecordValue::getName)\n          \n          \n            \n                            .limit(10))\n          \n          \n            \n                         RecordingExporter.records()\n          \n          \n            \n                            .limitToWorkflowInstance(workflowInstanceKey)\n          \n          \n            \n                            .variableRecords()\n          \n          \n            \n                            .map(Record::getValue)\n          \n          \n            \n                            .map(VariableRecordValue::getName))", "bodyHTML": "<p dir=\"auto\">Limiting the records to a specific number is a bit unsteady. Instead, we can limit the records from creating a workflow instance to its completion/termination.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">RecordingExporter</span><span class=\"pl-k\">.</span>variableRecords(<span class=\"pl-smi\">VariableIntent</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CREATED</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .map(<span class=\"pl-smi\">Record</span><span class=\"pl-k\">::</span>getValue)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .map(<span class=\"pl-smi\">VariableRecordValue</span><span class=\"pl-k\">::</span>getName)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .limit(<span class=\"pl-c1\">10</span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">             <span class=\"pl-smi\">RecordingExporter</span><span class=\"pl-k\">.</span>records()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .limitToWorkflowInstance(workflowInstanceKey)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .variableRecords()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .map(<span class=\"pl-smi\">Record</span><span class=\"pl-k\">::</span>getValue)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .map(<span class=\"pl-smi\">VariableRecordValue</span><span class=\"pl-k\">::</span>getName))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "saig0", "createdAt": "2020-04-14T12:12:29Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -539,28 +539,67 @@ public void shouldCollectNestedOutputElements() {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    // complete jobs\n+    completeJobs(workflowInstanceKey, INPUT_COLLECTION.size());\n+\n+    // then\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .map(Record::getValue)\n+                .map(VariableRecordValue::getName)\n+                .limit(10))", "originalCommit": "509f41cabfab36f2e1a33a905375b027e2f4035f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMTk2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408231960", "bodyText": "Nice, that's a good one to learn about.", "author": "korthout", "createdAt": "2020-04-14T15:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Njg4MA=="}], "type": "inlineReview"}, {"oid": "23f7a2e624cbbb30a7d7117a27eb3ef5d2ab600c", "url": "https://github.com/camunda-cloud/zeebe/commit/23f7a2e624cbbb30a7d7117a27eb3ef5d2ab600c", "message": "chore(engine): only init variable names to nil for output element", "committedDate": "2020-04-14T15:36:21Z", "type": "forcePushed"}, {"oid": "75a61fb2cf7cd43a218299d99f70f69da5780106", "url": "https://github.com/camunda-cloud/zeebe/commit/75a61fb2cf7cd43a218299d99f70f69da5780106", "message": "chore(engine): only init variable names to nil for output element", "committedDate": "2020-04-14T15:37:56Z", "type": "commit"}, {"oid": "75a61fb2cf7cd43a218299d99f70f69da5780106", "url": "https://github.com/camunda-cloud/zeebe/commit/75a61fb2cf7cd43a218299d99f70f69da5780106", "message": "chore(engine): only init variable names to nil for output element", "committedDate": "2020-04-14T15:37:56Z", "type": "forcePushed"}]}