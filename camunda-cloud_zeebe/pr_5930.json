{"pr_number": 5930, "pr_title": "feat(broker): a job worker is optional", "pr_author": "aivinog1", "pr_createdAt": "2020-11-27T11:10:19Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5930", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MTI1Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r531581253", "body": "Not sure this is useful, can you explain when someone would want this log message?", "bodyText": "Not sure this is useful, can you explain when someone would want this log message?", "bodyHTML": "<p dir=\"auto\">Not sure this is useful, can you explain when someone would want this log message?</p>", "author": "npepinpe", "createdAt": "2020-11-27T12:44:07Z", "path": "engine/src/main/java/io/zeebe/engine/processing/job/JobBatchActivateProcessor.java", "diffHunk": "@@ -130,6 +133,9 @@ private void collectJobsToActivate(\n         (key, jobRecord) -> {\n           int remainingAmount = amount.get();\n           final long deadline = record.getTimestamp() + value.getTimeout();\n+          if (value.getWorkerBuffer().capacity() == 0) {\n+            LOGGER.trace(String.format(\"A job worker for a record: %s is anonymous.\", value));", "originalCommit": "401685fc35abc71fb262914c974960848f51599a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MTcyOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r532361729", "bodyText": "I'm thinking about this part from the issue(#5819):\n\nwe should also accept that it is absent on the broker side and simply log the client as anonymous.\n\nSo, did I add this logging in the wrong place? :)", "author": "aivinog1", "createdAt": "2020-11-30T05:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MTI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0NTEwNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r557545104", "bodyText": "Ah, sorry - I know we used to log the worker during activation. I meant here wherever we are logging the name, we should just log anonymous if there is no name. If we had no logging anywhere related to this then that's fine, just ignore it \ud83d\ude42\nSo here we could remove this entirely", "author": "npepinpe", "createdAt": "2021-01-14T16:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MTI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwOTI1OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r558309259", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-15T13:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MTI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NjMwNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r531586305", "body": "```suggestion\r\n  public void shouldAcceptEmptyWorker() {\r\n```\r\n\r\nI find its always better to test the positive, i.e. it works without a worker, as opposed to it doesn't not work without a worker :wink: I know it's just semantics, but I think it's a little clearer.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldNotRejectEmptyWorker() {\n          \n          \n            \n              public void shouldAcceptEmptyWorker() {\n          \n      \n    \n    \n  \n\nI find its always better to test the positive, i.e. it works without a worker, as opposed to it doesn't not work without a worker \ud83d\ude09 I know it's just semantics, but I think it's a little clearer.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldNotRejectEmptyWorker</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldAcceptEmptyWorker</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">I find its always better to test the positive, i.e. it works without a worker, as opposed to it doesn't not work without a worker <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji> I know it's just semantics, but I think it's a little clearer.</p>", "author": "npepinpe", "createdAt": "2020-11-27T12:55:32Z", "path": "engine/src/test/java/io/zeebe/engine/processing/job/ActivateJobsTest.java", "diffHunk": "@@ -111,16 +111,49 @@ public void shouldRejectInvalidType() {\n   }\n \n   @Test\n-  public void shouldRejectInvalidWorker() {\n+  public void shouldNotRejectEmptyWorker() {", "originalCommit": "401685fc35abc71fb262914c974960848f51599a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUyMzYwOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r555523609", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-12T05:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NjMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMjk0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r531612944", "body": "I think it's fine to not test these things - we already have tests covering this. Rule of thumb is to have many tests, each asserting as little as possible (the ideal is one assertion per test, but obviously that's not always possible). So in this case, what is our test covering? What are the things that we really need to assert?\r\n\r\nI would argue only care that one job was activated, and that its worker is nothing. The rest isn't important.", "bodyText": "I think it's fine to not test these things - we already have tests covering this. Rule of thumb is to have many tests, each asserting as little as possible (the ideal is one assertion per test, but obviously that's not always possible). So in this case, what is our test covering? What are the things that we really need to assert?\nI would argue only care that one job was activated, and that its worker is nothing. The rest isn't important.", "bodyHTML": "<p dir=\"auto\">I think it's fine to not test these things - we already have tests covering this. Rule of thumb is to have many tests, each asserting as little as possible (the ideal is one assertion per test, but obviously that's not always possible). So in this case, what is our test covering? What are the things that we really need to assert?</p>\n<p dir=\"auto\">I would argue only care that one job was activated, and that its worker is nothing. The rest isn't important.</p>", "author": "npepinpe", "createdAt": "2020-11-27T13:49:35Z", "path": "engine/src/test/java/io/zeebe/engine/processing/job/ActivateJobsTest.java", "diffHunk": "@@ -111,16 +111,49 @@ public void shouldRejectInvalidType() {\n   }\n \n   @Test\n-  public void shouldRejectInvalidWorker() {\n+  public void shouldNotRejectEmptyWorker() {\n+    // given\n+    ENGINE.deployment().withXmlResource(PROCESS_ID, MODEL_SUPPLIER.apply(taskType)).deploy();\n+    final long firstInstanceKey = createWorkflowInstances(3, \"{'foo':'bar'}\").get(0);\n+\n+    final long expectedJobKey =\n+        jobRecords(JobIntent.CREATED)\n+            .withType(taskType)\n+            .filter(r -> r.getValue().getWorkflowInstanceKey() == firstInstanceKey)\n+            .getFirst()\n+            .getKey();\n+\n+    final Duration timeout = Duration.ofMinutes(12);\n+\n     // when\n     final Record<JobBatchRecordValue> batchRecord =\n-        ENGINE.jobs().withType(taskType).byWorker(\"\").expectRejection().activate();\n+        ENGINE\n+            .jobs()\n+            .withType(taskType)\n+            .withTimeout(timeout.toMillis())\n+            .withMaxJobsToActivate(1)\n+            .activate();\n+\n+    final List<JobRecordValue> jobs = batchRecord.getValue().getJobs();\n+    final List<Long> jobKeys = batchRecord.getValue().getJobKeys();\n \n     // then\n-    assertThat(batchRecord)\n-        .hasRejectionType(RejectionType.INVALID_ARGUMENT)\n-        .hasRejectionReason(\n-            \"Expected to activate job batch with worker to be present, but it was blank\");\n+    assertThat(batchRecord.getIntent()).isEqualTo(JobBatchIntent.ACTIVATED);\n+\n+    assertThat(jobKeys).hasSize(1);", "originalCommit": "401685fc35abc71fb262914c974960848f51599a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzI2MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r532363261", "bodyText": "I agree, will fix that. By the way, what do you think about parameterized tests? We can simply reuse some tests that already exist, but with different worker name.", "author": "aivinog1", "createdAt": "2020-11-30T05:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMjk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUyNDE5OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r555524198", "bodyText": "I decided to not use parameterized tests in that case. I removed unnecessary parts.", "author": "aivinog1", "createdAt": "2021-01-12T05:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMjk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0NjY0Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5930#discussion_r557546642", "bodyText": "We'll be refactoring parts of the engine and how we process job, so I imagine some of the tests will change - best not to modify too much now \ud83d\ude42", "author": "npepinpe", "createdAt": "2021-01-14T16:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMjk0NA=="}], "type": "inlineReview"}, {"oid": "b5f6e84d1fc24abd060887cc4c720425f85353e7", "url": "https://github.com/camunda-cloud/zeebe/commit/b5f6e84d1fc24abd060887cc4c720425f85353e7", "message": "feat(broker): a job worker is optional", "committedDate": "2021-01-19T05:12:50Z", "type": "commit"}, {"oid": "b5f6e84d1fc24abd060887cc4c720425f85353e7", "url": "https://github.com/camunda-cloud/zeebe/commit/b5f6e84d1fc24abd060887cc4c720425f85353e7", "message": "feat(broker): a job worker is optional", "committedDate": "2021-01-19T05:12:50Z", "type": "forcePushed"}]}