{"pr_number": 4612, "pr_title": "Migrate receive task processor", "pr_author": "korthout", "pr_createdAt": "2020-05-27T15:12:30Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4612", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MjAyNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4612#discussion_r431582024", "body": "Don't forget to remove the instance :wink: \r\n\r\n```suggestion\r\n    stateBehavior.removeElementInstance(context);  \r\n  }\r\n```", "bodyText": "Don't forget to remove the instance \ud83d\ude09\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              }\n          \n          \n            \n                stateBehavior.removeElementInstance(context);  \n          \n          \n            \n              }", "bodyHTML": "<p dir=\"auto\">Don't forget to remove the instance <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji></p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"88\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"x x-first x-last\">}</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"88\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"x x-first\">  stateBehavior</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">removeElementInstance(context);  </span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"89\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "saig0", "createdAt": "2020-05-28T05:00:07Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/task/ReceiveTaskProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.task;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnVariableMappingBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableReceiveTask;\n+\n+public final class ReceiveTaskProcessor implements BpmnElementProcessor<ExecutableReceiveTask> {\n+\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnVariableMappingBehavior variableMappingBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+\n+  public ReceiveTaskProcessor(final BpmnBehaviors behaviors) {\n+    eventSubscriptionBehavior = behaviors.eventSubscriptionBehavior();\n+    incidentBehavior = behaviors.incidentBehavior();\n+    stateBehavior = behaviors.stateBehavior();\n+    stateTransitionBehavior = behaviors.stateTransitionBehavior();\n+    variableMappingBehavior = behaviors.variableMappingBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableReceiveTask> getType() {\n+    return ExecutableReceiveTask.class;\n+  }\n+\n+  @Override\n+  public void onActivating(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyInputMappings(context, element)\n+        .flatMap(ok -> eventSubscriptionBehavior.subscribeToEvents(element, context))\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    // nothing to do here\n+  }\n+\n+  @Override\n+  public void onCompleting(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyOutputMappings(context, element)\n+        .ifRightOrLeft(\n+            ok -> {\n+              eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+              stateTransitionBehavior.transitionToCompleted(context);\n+            },\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onCompleted(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeElementInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+    stateTransitionBehavior.transitionToTerminated(context);\n+  }\n+\n+  @Override\n+  public void onTerminated(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.publishTriggeredBoundaryEvent(context);\n+    incidentBehavior.resolveIncidents(context);\n+    stateTransitionBehavior.onElementTerminated(element, context);\n+    stateBehavior.consumeToken(context);\n+  }", "originalCommit": "793b27e93172279d1aba14e24fc7831e73304101", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMDE1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4612#discussion_r431600151", "body": "Looking at `triggerBoundaryEvent()` and `triggerIntermediateEvent()`, I have the feeling that `transitionToCompleting()` can be part of `triggerIntermediateEvent()`. In case of an interrupting boundary event, the transition is also taken inside the `eventSubscriptionBehavior`.\r\n\r\nMaybe, we can also combine `triggerBoundaryEvent()` and `triggerIntermediateEvent()` in the `eventSubscriptionBehavior` to peek the event trigger only once.", "bodyText": "Looking at triggerBoundaryEvent() and triggerIntermediateEvent(), I have the feeling that transitionToCompleting() can be part of triggerIntermediateEvent(). In case of an interrupting boundary event, the transition is also taken inside the eventSubscriptionBehavior.\nMaybe, we can also combine triggerBoundaryEvent() and triggerIntermediateEvent() in the eventSubscriptionBehavior to peek the event trigger only once.", "bodyHTML": "<p dir=\"auto\">Looking at <code>triggerBoundaryEvent()</code> and <code>triggerIntermediateEvent()</code>, I have the feeling that <code>transitionToCompleting()</code> can be part of <code>triggerIntermediateEvent()</code>. In case of an interrupting boundary event, the transition is also taken inside the <code>eventSubscriptionBehavior</code>.</p>\n<p dir=\"auto\">Maybe, we can also combine <code>triggerBoundaryEvent()</code> and <code>triggerIntermediateEvent()</code> in the <code>eventSubscriptionBehavior</code> to peek the event trigger only once.</p>", "author": "saig0", "createdAt": "2020-05-28T06:04:34Z", "path": "engine/src/main/java/io/zeebe/engine/nwe/task/ReceiveTaskProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.task;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnVariableMappingBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableReceiveTask;\n+\n+public final class ReceiveTaskProcessor implements BpmnElementProcessor<ExecutableReceiveTask> {\n+\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnVariableMappingBehavior variableMappingBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+\n+  public ReceiveTaskProcessor(final BpmnBehaviors behaviors) {\n+    eventSubscriptionBehavior = behaviors.eventSubscriptionBehavior();\n+    incidentBehavior = behaviors.incidentBehavior();\n+    stateBehavior = behaviors.stateBehavior();\n+    stateTransitionBehavior = behaviors.stateTransitionBehavior();\n+    variableMappingBehavior = behaviors.variableMappingBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableReceiveTask> getType() {\n+    return ExecutableReceiveTask.class;\n+  }\n+\n+  @Override\n+  public void onActivating(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyInputMappings(context, element)\n+        .flatMap(ok -> eventSubscriptionBehavior.subscribeToEvents(element, context))\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    // nothing to do here\n+  }\n+\n+  @Override\n+  public void onCompleting(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyOutputMappings(context, element)\n+        .ifRightOrLeft(\n+            ok -> {\n+              eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+              stateTransitionBehavior.transitionToCompleted(context);\n+            },\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onCompleted(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeElementInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+    stateTransitionBehavior.transitionToTerminated(context);\n+  }\n+\n+  @Override\n+  public void onTerminated(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.publishTriggeredBoundaryEvent(context);\n+    incidentBehavior.resolveIncidents(context);\n+    stateTransitionBehavior.onElementTerminated(element, context);\n+    stateBehavior.consumeToken(context);\n+  }\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    if (eventSubscriptionBehavior.hasBoundaryEventOccurred(element, context)) {\n+      eventSubscriptionBehavior.triggerBoundaryEvent(element, context);\n+    } else {\n+      eventSubscriptionBehavior.triggerIntermediateEvent(context);\n+      stateTransitionBehavior.transitionToCompleting(context);", "originalCommit": "793b27e93172279d1aba14e24fc7831e73304101", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a9cdb1e89391a1949f183dc24b3d1e96c54ea3e7", "url": "https://github.com/camunda-cloud/zeebe/commit/a9cdb1e89391a1949f183dc24b3d1e96c54ea3e7", "message": "chore(engine): migrate receive task processor", "committedDate": "2020-05-28T14:58:32Z", "type": "forcePushed"}, {"oid": "97e79283717ca4f7ca9da18e8c8a8764a0184e88", "url": "https://github.com/camunda-cloud/zeebe/commit/97e79283717ca4f7ca9da18e8c8a8764a0184e88", "message": "chore(engine): migrate receive task processor", "committedDate": "2020-05-28T15:00:08Z", "type": "commit"}, {"oid": "97e79283717ca4f7ca9da18e8c8a8764a0184e88", "url": "https://github.com/camunda-cloud/zeebe/commit/97e79283717ca4f7ca9da18e8c8a8764a0184e88", "message": "chore(engine): migrate receive task processor", "committedDate": "2020-05-28T15:00:08Z", "type": "forcePushed"}]}