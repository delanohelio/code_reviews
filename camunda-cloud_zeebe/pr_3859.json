{"pr_number": 3859, "pr_title": "feat(broker): process id as expression", "pr_author": "saig0", "pr_createdAt": "2020-02-17T13:31:01Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3859", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyODU5OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3859#discussion_r380528599", "body": "```suggestion\r\n              \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Expected FEEL expression (e.g. '${variableName}') or static value (e.g. 'jobType') but found '%s'\",\n          \n          \n            \n                          \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expected FEEL expression (e.g. '<span class=\"x x-first x-last\">${</span>variableName<span class=\"x x-first x-last\">}</span>') or static value (e.g. 'jobType') but found '%s'<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expected FEEL expression (e.g. '<span class=\"x x-first x-last\">=</span>variableName') or static value (e.g. 'jobType') but found '%s'<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "deepthidevaki", "createdAt": "2020-02-18T08:48:21Z", "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.el.impl;\n+\n+import static io.zeebe.util.EnsureUtil.ensureNotNull;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.Expression;\n+import io.zeebe.el.ExpressionLanguage;\n+import java.util.regex.Pattern;\n+import org.agrona.DirectBuffer;\n+import org.camunda.feel.FeelEngine;\n+import org.camunda.feel.FeelEngine.Failure;\n+import org.camunda.feel.ParsedExpression;\n+import org.camunda.feel.spi.JavaValueMapper;\n+import scala.util.Either;\n+\n+/**\n+ * A wrapper around the FEEL-Scala expression language.\n+ *\n+ * <p>\n+ * <li><a href=\"https://github.com/camunda/feel-scala\">GitHub Repository</a>\n+ * <li><a href=\"https://camunda.github.io/feel-scala\">Documentation</a>\n+ */\n+public final class FeelExpressionLanguage implements ExpressionLanguage {\n+\n+  private static final Pattern EXPRESSION_PATTERN = Pattern.compile(\"\\\\=(.+)\");\n+  private static final Pattern STATIC_VALUE_PATTERN = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9_\\\\-]*\");\n+\n+  private final FeelEngine feelEngine =\n+      new FeelEngine.Builder().customValueMapper(new JavaValueMapper()).build();\n+\n+  private final MessagePackConverter messagePackConverter = new MessagePackConverter();\n+\n+  @Override\n+  public Expression parseExpression(final String expression) {\n+    ensureNotNull(\"expression\", expression);\n+\n+    final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n+    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n+\n+    if (expressionMatcher.matches()) {\n+      final var unpackedExpression = expressionMatcher.group(1);\n+      return parseFeelExpression(unpackedExpression);\n+\n+    } else if (valueMather.matches()) {\n+      final var value = valueMather.group();\n+      return new StaticExpression(value);\n+\n+    } else {\n+      final var failureMessage =\n+          String.format(\n+              \"Expected FEEL expression (e.g. '${variableName}') or static value (e.g. 'jobType') but found '%s'\",", "originalCommit": "8436c4d1989629cb6169f965a3a3e4d376449b91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYzMDQ1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3859#discussion_r380630455", "bodyText": "Good catch \ud83d\udc4d", "author": "saig0", "createdAt": "2020-02-18T12:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyODU5OQ=="}], "type": "inlineReview"}, {"oid": "37c62ff9df7bb1daa8f3d183602f253f0468e82c", "url": "https://github.com/camunda-cloud/zeebe/commit/37c62ff9df7bb1daa8f3d183602f253f0468e82c", "message": "feat(broker): process id as expression\n\n* new module to parse and evaluate expressions\n* abstract from concrete expression language\n* integrate expression into call activity transformer and handler\n* extract common engine expression usage", "committedDate": "2020-02-18T12:55:12Z", "type": "commit"}, {"oid": "37c62ff9df7bb1daa8f3d183602f253f0468e82c", "url": "https://github.com/camunda-cloud/zeebe/commit/37c62ff9df7bb1daa8f3d183602f253f0468e82c", "message": "feat(broker): process id as expression\n\n* new module to parse and evaluate expressions\n* abstract from concrete expression language\n* integrate expression into call activity transformer and handler\n* extract common engine expression usage", "committedDate": "2020-02-18T12:55:12Z", "type": "forcePushed"}]}