{"pr_number": 1133, "pr_title": "Fix ConcurrentModificationException in EventProcessor.", "pr_author": "rulle-io", "pr_createdAt": "2020-08-19T20:20:42Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1133", "timeline": [{"oid": "c3e4d1fb78ad10c27ff5d72a6ec0bba5b8a3b0d6", "url": "https://github.com/resilience4j/resilience4j/commit/c3e4d1fb78ad10c27ff5d72a6ec0bba5b8a3b0d6", "message": "Changes to fix ConcurrentModificationException.", "committedDate": "2020-08-19T20:19:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyMDM3NQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1133#discussion_r473820375", "body": "```suggestion\r\n    public void testOnEventParallel() throws ExecutionException, InterruptedException {\r\n        CountDownLatch eventConsumed = new CountDownLatch(1);\r\n        CountDownLatch waitForConsumerRegistration = new CountDownLatch(1);\r\n\r\n        EventProcessor<Number> eventProcessor = new EventProcessor<>();\r\n        EventConsumer<Integer> eventConsumer1 = event -> {\r\n            try {\r\n                eventConsumed.countDown();\r\n                waitForConsumerRegistration.await(5, TimeUnit.SECONDS);\r\n                logger.info(event.toString());\r\n            } catch (InterruptedException e) {\r\n                fail(\"Must not happen\");\r\n            }\r\n        };\r\n\r\n        EventConsumer<Integer> eventConsumer2 = event -> logger.info(event.toString());\r\n\r\n        // 1st consumer is added\r\n        eventProcessor.registerConsumer(Integer.class.getSimpleName(), eventConsumer1);\r\n\r\n        // process first event in a separate thread to create a race condition\r\n        CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\r\n            eventProcessor.processEvent(1); // blocks because of the count down latch\r\n        });\r\n\r\n        eventConsumed.await(1, TimeUnit.SECONDS);\r\n\r\n        // 2nd consumer is added\r\n        eventProcessor.registerConsumer(Integer.class.getSimpleName(), eventConsumer2);\r\n\r\n        future.get();\r\n\r\n        waitForConsumerRegistration.countDown();\r\n\r\n        then(logger).should(times(1)).info(\"1\");\r\n    }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testOnEventParallel() throws ExecutionException {\n          \n          \n            \n                    EventProcessor<Number> eventProcessor = new EventProcessor<>();\n          \n          \n            \n                    EventConsumer<Integer> eventConsumer1 = event -> {\n          \n          \n            \n                        // Artificial delay in a listener's code\n          \n          \n            \n                        System.out.println(\"1\" + \"start\" + event.toString());\n          \n          \n            \n                        try {\n          \n          \n            \n                            Thread.sleep(10 * 1000L);\n          \n          \n            \n                        } catch (InterruptedException e) {\n          \n          \n            \n                            e.printStackTrace();\n          \n          \n            \n                        }\n          \n          \n            \n                        System.out.println(\"1\" + \"end\" + event.toString());\n          \n          \n            \n                    };\n          \n          \n            \n            \n          \n          \n            \n                    EventConsumer<Integer> eventConsumer2 = event -> System.out.println(\"2\" + event.toString());\n          \n          \n            \n            \n          \n          \n            \n                    // 1st consumer is added\n          \n          \n            \n                    eventProcessor.registerConsumer(Integer.class.getSimpleName(), eventConsumer1);\n          \n          \n            \n            \n          \n          \n            \n                    // process first event in a separate thread to create a race condition\n          \n          \n            \n                    CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\n          \n          \n            \n                        eventProcessor.processEvent(1); // sleeps 10 sec inside listener's code\n          \n          \n            \n                    });\n          \n          \n            \n            \n          \n          \n            \n                    try {\n          \n          \n            \n                        Thread.sleep(1 * 1000L);\n          \n          \n            \n                    } catch (InterruptedException e) {\n          \n          \n            \n                        e.printStackTrace();\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // 2nd consumer is added\n          \n          \n            \n                    eventProcessor.registerConsumer(Integer.class.getSimpleName(), eventConsumer2);\n          \n          \n            \n            \n          \n          \n            \n                    try {\n          \n          \n            \n                        future.get();\n          \n          \n            \n                    } catch (InterruptedException e) {\n          \n          \n            \n                        e.printStackTrace();\n          \n          \n            \n                    } catch (ExecutionException e) {\n          \n          \n            \n                        e.printStackTrace();\n          \n          \n            \n                        throw e;\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                public void testOnEventParallel() throws ExecutionException, InterruptedException {\n          \n          \n            \n                    CountDownLatch eventConsumed = new CountDownLatch(1);\n          \n          \n            \n                    CountDownLatch waitForConsumerRegistration = new CountDownLatch(1);\n          \n          \n            \n            \n          \n          \n            \n                    EventProcessor<Number> eventProcessor = new EventProcessor<>();\n          \n          \n            \n                    EventConsumer<Integer> eventConsumer1 = event -> {\n          \n          \n            \n                        try {\n          \n          \n            \n                            eventConsumed.countDown();\n          \n          \n            \n                            waitForConsumerRegistration.await(5, TimeUnit.SECONDS);\n          \n          \n            \n                            logger.info(event.toString());\n          \n          \n            \n                        } catch (InterruptedException e) {\n          \n          \n            \n                            fail(\"Must not happen\");\n          \n          \n            \n                        }\n          \n          \n            \n                    };\n          \n          \n            \n            \n          \n          \n            \n                    EventConsumer<Integer> eventConsumer2 = event -> logger.info(event.toString());\n          \n          \n            \n            \n          \n          \n            \n                    // 1st consumer is added\n          \n          \n            \n                    eventProcessor.registerConsumer(Integer.class.getSimpleName(), eventConsumer1);\n          \n          \n            \n            \n          \n          \n            \n                    // process first event in a separate thread to create a race condition\n          \n          \n            \n                    CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\n          \n          \n            \n                        eventProcessor.processEvent(1); // blocks because of the count down latch\n          \n          \n            \n                    });\n          \n          \n            \n            \n          \n          \n            \n                    eventConsumed.await(1, TimeUnit.SECONDS);\n          \n          \n            \n            \n          \n          \n            \n                    // 2nd consumer is added\n          \n          \n            \n                    eventProcessor.registerConsumer(Integer.class.getSimpleName(), eventConsumer2);\n          \n          \n            \n            \n          \n          \n            \n                    future.get();\n          \n          \n            \n            \n          \n          \n            \n                    waitForConsumerRegistration.countDown();\n          \n          \n            \n            \n          \n          \n            \n                    then(logger).should(times(1)).info(\"1\");\n          \n          \n            \n                }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"153\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> testOnEventParallel() throws <span class=\"pl-smi\">ExecutionException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"154\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">EventProcessor&lt;<span class=\"pl-smi\">Number</span>&gt;</span> eventProcessor <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">EventProcessor&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"155\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">EventConsumer&lt;<span class=\"pl-smi\">Integer</span>&gt;</span> eventConsumer1 <span class=\"pl-k\">=</span> event <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"156\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> Artificial delay in a listener's code</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"157\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>start<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> event<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"158\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"159\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">Thread</span><span class=\"pl-k\">.</span>sleep(<span class=\"pl-c1\">10</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1000L</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"160\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InterruptedException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"161\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                e<span class=\"pl-k\">.</span>printStackTrace();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"162\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"163\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>end<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> event<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"164\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        };</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"165\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"166\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">EventConsumer&lt;<span class=\"pl-smi\">Integer</span>&gt;</span> eventConsumer2 <span class=\"pl-k\">=</span> event <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> event<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"167\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"168\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 1st consumer is added</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"169\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        eventProcessor<span class=\"pl-k\">.</span>registerConsumer(<span class=\"pl-smi\">Integer</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getSimpleName(), eventConsumer1);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"170\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"171\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> process first event in a separate thread to create a race condition</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"172\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">CompletableFuture&lt;<span class=\"pl-smi\">Void</span>&gt;</span> future <span class=\"pl-k\">=</span> <span class=\"pl-smi\">CompletableFuture</span><span class=\"pl-k\">.</span>runAsync(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"173\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            eventProcessor<span class=\"pl-k\">.</span>processEvent(<span class=\"pl-c1\">1</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> sleeps 10 sec inside listener's code</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"174\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"175\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"176\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"177\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">Thread</span><span class=\"pl-k\">.</span>sleep(<span class=\"pl-c1\">1</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1000L</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"178\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InterruptedException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"179\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            e<span class=\"pl-k\">.</span>printStackTrace();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"180\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"181\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"182\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 2nd consumer is added</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"183\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        eventProcessor<span class=\"pl-k\">.</span>registerConsumer(<span class=\"pl-smi\">Integer</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getSimpleName(), eventConsumer2);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"184\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"185\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"186\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            future<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"187\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InterruptedException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"188\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            e<span class=\"pl-k\">.</span>printStackTrace();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"189\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">ExecutionException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"190\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            e<span class=\"pl-k\">.</span>printStackTrace();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"191\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> e;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"192\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"193\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"153\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> testOnEventParallel() throws <span class=\"pl-smi\">ExecutionException</span>, <span class=\"pl-smi\">InterruptedException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"154\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">CountDownLatch</span> eventConsumed <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CountDownLatch</span>(<span class=\"pl-c1\">1</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"155\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">CountDownLatch</span> waitForConsumerRegistration <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CountDownLatch</span>(<span class=\"pl-c1\">1</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"156\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"157\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">EventProcessor&lt;<span class=\"pl-smi\">Number</span>&gt;</span> eventProcessor <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">EventProcessor&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"158\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">EventConsumer&lt;<span class=\"pl-smi\">Integer</span>&gt;</span> eventConsumer1 <span class=\"pl-k\">=</span> event <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"159\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"160\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                eventConsumed<span class=\"pl-k\">.</span>countDown();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"161\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                waitForConsumerRegistration<span class=\"pl-k\">.</span>await(<span class=\"pl-c1\">5</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SECONDS</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"162\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                logger<span class=\"pl-k\">.</span>info(event<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"163\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">InterruptedException</span> e) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"164\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                fail(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Must not happen<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"165\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"166\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        };</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"167\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"168\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">EventConsumer&lt;<span class=\"pl-smi\">Integer</span>&gt;</span> eventConsumer2 <span class=\"pl-k\">=</span> event <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> logger<span class=\"pl-k\">.</span>info(event<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"169\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"170\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 1st consumer is added</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"171\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        eventProcessor<span class=\"pl-k\">.</span>registerConsumer(<span class=\"pl-smi\">Integer</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getSimpleName(), eventConsumer1);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"172\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"173\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> process first event in a separate thread to create a race condition</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"174\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">CompletableFuture&lt;<span class=\"pl-smi\">Void</span>&gt;</span> future <span class=\"pl-k\">=</span> <span class=\"pl-smi\">CompletableFuture</span><span class=\"pl-k\">.</span>runAsync(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"175\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            eventProcessor<span class=\"pl-k\">.</span>processEvent(<span class=\"pl-c1\">1</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> blocks because of the count down latch</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"176\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"177\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"178\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        eventConsumed<span class=\"pl-k\">.</span>await(<span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SECONDS</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"179\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"180\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 2nd consumer is added</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"181\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        eventProcessor<span class=\"pl-k\">.</span>registerConsumer(<span class=\"pl-smi\">Integer</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getSimpleName(), eventConsumer2);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"182\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"183\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        future<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"184\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"185\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        waitForConsumerRegistration<span class=\"pl-k\">.</span>countDown();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"186\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"187\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        then(logger)<span class=\"pl-k\">.</span>should(times(<span class=\"pl-c1\">1</span>))<span class=\"pl-k\">.</span>info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"188\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "RobWin", "createdAt": "2020-08-20T09:39:38Z", "path": "resilience4j-core/src/test/java/io/github/resilience4j/core/EventProcessorTest.java", "diffHunk": "@@ -107,4 +110,48 @@ public void testNoConsumers() {\n         assertThat(consumed).isEqualTo(false);\n     }\n \n+\n+    @Test\n+    public void testOnEventParallel() throws ExecutionException {\n+        EventProcessor<Number> eventProcessor = new EventProcessor<>();\n+        EventConsumer<Integer> eventConsumer1 = event -> {\n+            // Artificial delay in a listener's code\n+            System.out.println(\"1\" + \"start\" + event.toString());\n+            try {\n+                Thread.sleep(10 * 1000L);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            System.out.println(\"1\" + \"end\" + event.toString());\n+        };\n+\n+        EventConsumer<Integer> eventConsumer2 = event -> System.out.println(\"2\" + event.toString());\n+\n+        // 1st consumer is added\n+        eventProcessor.registerConsumer(Integer.class.getSimpleName(), eventConsumer1);\n+\n+        // process first event in a separate thread to create a race condition\n+        CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\n+            eventProcessor.processEvent(1); // sleeps 10 sec inside listener's code\n+        });\n+\n+        try {\n+            Thread.sleep(1 * 1000L);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+\n+        // 2nd consumer is added\n+        eventProcessor.registerConsumer(Integer.class.getSimpleName(), eventConsumer2);\n+\n+        try {\n+            future.get();\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        } catch (ExecutionException e) {\n+            e.printStackTrace();\n+            throw e;\n+        }\n+    }", "originalCommit": "c3e4d1fb78ad10c27ff5d72a6ec0bba5b8a3b0d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70527a65d2e2419fdba55cbae4fc7d2fe3f8b5a5", "url": "https://github.com/resilience4j/resilience4j/commit/70527a65d2e2419fdba55cbae4fc7d2fe3f8b5a5", "message": "Update resilience4j-core/src/test/java/io/github/resilience4j/core/EventProcessorTest.java\n\nCo-authored-by: Robert Winkler <robwin@t-online.de>", "committedDate": "2020-08-20T11:30:58Z", "type": "commit"}, {"oid": "235081d0c32fd5c828d3a5b9c4e0ed8b83c8157b", "url": "https://github.com/resilience4j/resilience4j/commit/235081d0c32fd5c828d3a5b9c4e0ed8b83c8157b", "message": "Add missing imports.", "committedDate": "2020-08-20T11:59:56Z", "type": "commit"}]}