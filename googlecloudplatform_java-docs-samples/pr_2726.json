{"pr_number": 2726, "pr_title": "Add pubsub tests", "pr_author": "ace-n", "pr_createdAt": "2020-04-22T05:32:22Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726", "timeline": [{"oid": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6dfd05401b94a2d0ffdf8f46ecb84589415b2111", "message": "Add pubsub tests", "committedDate": "2020-04-22T04:47:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTQ4NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412955485", "body": "```suggestion\r\n    emulatorProcess = new ProcessBuilder(\"mvn\", \"function:run\").start();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                emulatorProcess = (new ProcessBuilder()).command(\"mvn\", \"function:run\").start();\n          \n          \n            \n                emulatorProcess = new ProcessBuilder(\"mvn\", \"function:run\").start();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    emulatorProcess <span class=\"pl-k\">=</span> <span class=\"x x-first x-last\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-smi\">ProcessBuilder</span><span class=\"x x-first\">())</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">command</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mvn<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>function:run<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>start();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    emulatorProcess <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ProcessBuilder</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mvn<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>function:run<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>start();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kurtisvg", "createdAt": "2020-04-22T12:53:39Z", "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package functions;\n+\n+// [START functions_pubsub_integration_test]\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import io.vavr.CheckedRunnable;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.UUID;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.HttpHostConnectException;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleIntegrationTest {\n+  // Root URL pointing to the locally hosted function\n+  // The Functions Framework Maven plugin lets us run a function locally\n+  private static final String BASE_URL = \"http://localhost:8080\";\n+\n+  private static Process emulatorProcess = null;\n+  private static HttpClient client = HttpClientBuilder.create().build();\n+\n+  @BeforeClass\n+  public static void setUp() throws IOException {\n+    // Emulate the function locally by running the Functions Framework Maven plugin\n+    emulatorProcess = (new ProcessBuilder()).command(\"mvn\", \"function:run\").start();", "originalCommit": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1ODA0NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412958045", "bodyText": "We should really verify this has started successfully as part of the setUp.", "author": "kurtisvg", "createdAt": "2020-04-22T12:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNzIwNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r414107205", "bodyText": "We could likely move the retry logic here instead, and wait until the process has \"warmed up\" before sending requests to the FF process.\nThat said, the HTTP PR (#2691) was already merged using this approach. IMO we should merge as-is (to avoid blocking TW) and push a fast-follow fix.", "author": "ace-n", "createdAt": "2020-04-23T20:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyODU3Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r414128576", "bodyText": "That PR was just merged \ud83d\ude43. I'll let this slide provided you open an issue on java-docs-samples and assign it to yourself. FWIW pushing a bad sample to avoid blocking a TW is not a good reason.\nI don't think retry logic is needed at all. You can start up the process and wait for it to print \"ready to serve\" or whatever signal it gives that it's ready to start up.\nWe should save retries for legitimately flakey services. If starting the emulator startup is flakey, that's a different problem.", "author": "kurtisvg", "createdAt": "2020-04-23T21:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzNjk0MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r414136940", "bodyText": "See #2763 - would you mind chiming in and making a suggestion on which solution to use there?", "author": "ace-n", "createdAt": "2020-04-23T21:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NDgyNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412964824", "body": "I don't think the appropriate strategy is to retry for this - users may miss flaky behavior in tests because of that. We should ensure that the Process has started successfully (probably by waiting and/or verifying with stdout), and run the test once.\r\n", "bodyText": "I don't think the appropriate strategy is to retry for this - users may miss flaky behavior in tests because of that. We should ensure that the Process has started successfully (probably by waiting and/or verifying with stdout), and run the test once.", "bodyHTML": "<p dir=\"auto\">I don't think the appropriate strategy is to retry for this - users may miss flaky behavior in tests because of that. We should ensure that the Process has started successfully (probably by waiting and/or verifying with stdout), and run the test once.</p>", "author": "kurtisvg", "createdAt": "2020-04-22T13:06:28Z", "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package functions;\n+\n+// [START functions_pubsub_integration_test]\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import io.vavr.CheckedRunnable;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.UUID;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.HttpHostConnectException;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleIntegrationTest {\n+  // Root URL pointing to the locally hosted function\n+  // The Functions Framework Maven plugin lets us run a function locally\n+  private static final String BASE_URL = \"http://localhost:8080\";\n+\n+  private static Process emulatorProcess = null;\n+  private static HttpClient client = HttpClientBuilder.create().build();\n+\n+  @BeforeClass\n+  public static void setUp() throws IOException {\n+    // Emulate the function locally by running the Functions Framework Maven plugin\n+    emulatorProcess = (new ProcessBuilder()).command(\"mvn\", \"function:run\").start();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    // Terminate the running Functions Framework Maven plugin process (if it's still running)\n+    if (emulatorProcess.isAlive()) {\n+      emulatorProcess.destroy();\n+    }\n+  }\n+\n+  @Test\n+  public void helloPubSub_shouldRunWithFunctionsFramework() throws Throwable {\n+    String functionUrl = BASE_URL + \"/helloPubsub\"; // URL to your locally-running function\n+\n+    // Initialize constants\n+    String name = UUID.randomUUID().toString();\n+    String nameBase64 = Base64.getEncoder().encodeToString(name.getBytes(StandardCharsets.UTF_8));\n+\n+    String expected = String.format(\"Hello %s!\", name);\n+    String jsonStr = String.format(\"{'data': {'data': '%s'}}\", nameBase64);\n+\n+    HttpPost postRequest =  new HttpPost(URI.create(functionUrl));\n+    postRequest.setEntity(new StringEntity(jsonStr));\n+\n+    // The Functions Framework Maven plugin process takes time to start up\n+    // Use resilience4j to retry the test HTTP request until the plugin responds\n+    RetryRegistry registry = RetryRegistry.of(RetryConfig.custom()\n+        .maxAttempts(8)\n+        .retryExceptions(HttpHostConnectException.class)\n+        .intervalFunction(IntervalFunction.ofExponentialBackoff(200, 2))\n+        .build());\n+    Retry retry = registry.retry(\"my\");", "originalCommit": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNTMwOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r414105308", "bodyText": "The emulator takes time to start up. @grant and I decided to go with retry/backoff rather than constant-timed sleep()s", "author": "ace-n", "createdAt": "2020-04-23T20:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NDgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2ODI3Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412968276", "body": "```suggestion\r\n    String filter = \"resource.type=\\\"cloud_function\\\"\"\r\n        + \" AND severity=INFO\"\r\n        + \" AND resource.labels.function_name=\" + FUNCTION_DEPLOYED_NAME\r\n        +  String.format(\" AND timestamp>=\\\"%s\\\"\", startTimestamp);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String filter = \"resource.type=\\\"cloud_function\\\"\";\n          \n          \n            \n                filter += \" AND severity=INFO\";\n          \n          \n            \n                filter += \" AND resource.labels.function_name=\" + FUNCTION_DEPLOYED_NAME;\n          \n          \n            \n                filter += String.format(\" AND timestamp>=\\\"%s\\\"\", startTimestamp);\n          \n          \n            \n                String filter = \"resource.type=\\\"cloud_function\\\"\"\n          \n          \n            \n                    + \" AND severity=INFO\"\n          \n          \n            \n                    + \" AND resource.labels.function_name=\" + FUNCTION_DEPLOYED_NAME\n          \n          \n            \n                    +  String.format(\" AND timestamp>=\\\"%s\\\"\", startTimestamp);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">String</span> filter <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resource.type=<span class=\"pl-cce\">\\\"</span>cloud_function<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"x x-first\">filter </span><span class=\"pl-k x x-last\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> AND severity=INFO<span class=\"pl-pds\">\"</span></span><span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"x x-first\">filter </span><span class=\"pl-k x x-last\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> AND resource.labels.function_name=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">FUNCTION_DEPLOYED_NAME</span><span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"x x-first\">filter </span><span class=\"pl-k x x-last\">+=</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> AND timestamp&gt;=<span class=\"pl-cce\">\\\"</span>%s<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span>, startTimestamp);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">String</span> filter <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resource.type=<span class=\"pl-cce\">\\\"</span>cloud_function<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first\">    </span><span class=\"pl-k x x-last\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> AND severity=INFO<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first\">    </span><span class=\"pl-k x x-last\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> AND resource.labels.function_name=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">FUNCTION_DEPLOYED_NAME</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first\">    </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> AND timestamp&gt;=<span class=\"pl-cce\">\\\"</span>%s<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span>, startTimestamp);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kurtisvg", "createdAt": "2020-04-22T13:11:09Z", "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleSystemTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.logging.LogEntry;\n+import com.google.cloud.logging.Logging;\n+import com.google.cloud.logging.LoggingOptions;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleSystemTest {\n+\n+  // TODO<developer>: set these values (as environment variables, or hard-coded into your test)\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TOPIC_NAME = System.getenv(\"FUNCTIONS_SYSTEM_TEST_TOPIC\");\n+  private static final String FUNCTION_DEPLOYED_NAME = \"HelloPubSub\";\n+\n+  private static Logging loggingClient;\n+\n+  private static Publisher publisher;\n+\n+  private HelloPubSub sampleUnderTest;\n+\n+  @BeforeClass\n+  public static void setUp() throws IOException {\n+    loggingClient = LoggingOptions.getDefaultInstance().getService();\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TOPIC_NAME)).build();\n+  }\n+\n+  private static String getLogEntriesAsString(String startTimestamp) {\n+    // Construct Stackdriver logging filter\n+    // See this page for more info: https://cloud.google.com/logging/docs/view/advanced-queries\n+    String filter = \"resource.type=\\\"cloud_function\\\"\";\n+    filter += \" AND severity=INFO\";\n+    filter += \" AND resource.labels.function_name=\" + FUNCTION_DEPLOYED_NAME;\n+    filter += String.format(\" AND timestamp>=\\\"%s\\\"\", startTimestamp);", "originalCommit": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwOTA2Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r414109063", "bodyText": "Done.", "author": "ace-n", "createdAt": "2020-04-23T20:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2ODI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3MTAxNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412971016", "body": "Let's not tell users to hard code configuration values into their code.\r\n\r\nIf you want to point them to something helpful, consider linking to SecretManager. ", "bodyText": "Let's not tell users to hard code configuration values into their code.\nIf you want to point them to something helpful, consider linking to SecretManager.", "bodyHTML": "<p dir=\"auto\">Let's not tell users to hard code configuration values into their code.</p>\n<p dir=\"auto\">If you want to point them to something helpful, consider linking to SecretManager.</p>", "author": "kurtisvg", "createdAt": "2020-04-22T13:14:34Z", "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleSystemTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.logging.LogEntry;\n+import com.google.cloud.logging.Logging;\n+import com.google.cloud.logging.LoggingOptions;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleSystemTest {\n+\n+  // TODO<developer>: set these values (as environment variables, or hard-coded into your test)", "originalCommit": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwODQ4Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r414108487", "bodyText": "Will drop the mention of hard-coding here. Based on our internal practices, environment variables should be an acceptable answer for this.", "author": "ace-n", "createdAt": "2020-04-23T20:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3MTAxNg=="}], "type": "inlineReview"}, {"oid": "513499bcf717da6b47b7edc9727639ed4db0c482", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/513499bcf717da6b47b7edc9727639ed4db0c482", "message": "Apply bugfixes from HTTP PR", "committedDate": "2020-04-23T20:31:37Z", "type": "commit"}, {"oid": "6f27e0531d869386eadef5390adee812220a2fd3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6f27e0531d869386eadef5390adee812220a2fd3", "message": "Address comments", "committedDate": "2020-04-23T20:41:26Z", "type": "commit"}, {"oid": "fe323981ff89d1b9415a940abdc1d59a1a05a4f6", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fe323981ff89d1b9415a940abdc1d59a1a05a4f6", "message": "Update deps", "committedDate": "2020-04-23T20:46:38Z", "type": "commit"}, {"oid": "7e8ba246848563ebd6b462f23e735f6b28771ceb", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7e8ba246848563ebd6b462f23e735f6b28771ceb", "message": "Increase system test retry count", "committedDate": "2020-04-23T21:41:10Z", "type": "commit"}, {"oid": "f36bd7be809c3befb3290334a83173f5a34c12dc", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f36bd7be809c3befb3290334a83173f5a34c12dc", "message": "Add region tags", "committedDate": "2020-04-23T22:20:29Z", "type": "commit"}, {"oid": "6605541a1f24e5e91887692adfdf96158d9908e2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6605541a1f24e5e91887692adfdf96158d9908e2", "message": "Revert \"Increase system test retry count\"\n\nThis reverts commit 7e8ba246848563ebd6b462f23e735f6b28771ceb.", "committedDate": "2020-04-23T22:47:45Z", "type": "commit"}, {"oid": "f519979ba50a1cb5f75fb48a98310f15fe01e879", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f519979ba50a1cb5f75fb48a98310f15fe01e879", "message": "Use gson for json formatting instead of raw strings", "committedDate": "2020-04-23T23:25:10Z", "type": "commit"}, {"oid": "6526e8fc573c3cbdefa3b2516437aa18eb5fee92", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6526e8fc573c3cbdefa3b2516437aa18eb5fee92", "message": "Add region tags", "committedDate": "2020-04-23T23:49:50Z", "type": "commit"}, {"oid": "0e285fe8842f545832392848603b9e6ef179a3ec", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0e285fe8842f545832392848603b9e6ef179a3ec", "message": "Fix checkstyle", "committedDate": "2020-04-24T01:05:05Z", "type": "commit"}]}